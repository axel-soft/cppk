#Область ОписаниеПеременных

&НаКлиенте
Перем РежимДобавленияИсполнителя;

&НаКлиенте
Перем ПолноеИмяПеретаскиваемогоФайла;

&НаКлиенте
Перем ТекущаяСтрокаДереваПриложений;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Для корректного перехода по внешней навигационной ссылке в веб-клиенте,
	// учитывая что объект не основной реквизит, если не заполнен то не открываем.
	Если Не ЗначениеЗаполнено(Параметры.Ключ)
		Или Не ОбщегоНазначения.СсылкаСуществует(Параметры.Ключ) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ТекущееДействиеЗадачи = Параметры.Ключ;
	ИсторияРаботыПользователя.Добавить(ТекущееДействиеЗадачи);
	
	ЭтоМобильныйКлиент = ПараметрыСеанса.ЭтоМобильныйКлиент;
	
	Если ЭтоМобильныйКлиент Тогда
		МК_ЭлементыСтиля = МК_ПовтИсп.ЭлементыСтиля();
	КонецЕсли;
	
	ЭтоТонкийWindowsКлиент = Не ОбщегоНазначенияДокументооборот.ПриложениеЯвляетсяВебКлиентом()
		И ОбщегоНазначения.ЭтоWindowsКлиент();
		
	ПолеPDFРаботаетВВебКлиенте = РаботаСPDFПовтИсп.ПолеPDFРаботаетВВебКлиенте();	
	МаксимальноеЧислоСтраницДляПредпросмотра = ОбзорФайловСервер.МаксимальноеЧислоСтраницДляПредпросмотра();
	
	РеквизитыДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ТекущееДействиеЗадачи,
		"Задача, ВидДействия, ОсобыйЗаголовок, Источник, ВерсияДанных, Исполнитель");
	Заголовок = Документы.ДействиеЗадачи.ЗаголовокДействияЗадачи(
		РеквизитыДействия.ВидДействия,
		РеквизитыДействия.ОсобыйЗаголовок,
		Строка(РеквизитыДействия.Задача));
	ТекущаяЗадача = РеквизитыДействия.Задача;

	Описание = СтрШаблон(
		НСтр("ru = 'Просмотр задачи участника %1'"), 
		РеквизитыДействия.Исполнитель);
	ПротоколированиеРаботыСотрудников.ЗаписатьОткрытие(ТекущаяЗадача, Описание);
	
	ТекущийИсточникДействия = РеквизитыДействия.Источник;
	Элементы.ПодробнееОЗадаче.Видимость = Пользователи.ЭтоПолноправныйПользователь()
		И ЗначениеЗаполнено(ТекущийИсточникДействия) 
		И ТипЗнч(ТекущийИсточникДействия) <> Тип("СправочникСсылка.ДействияОзнакомления");
		
	ИспользоватьПредпросмотрФайловОбщая = ПолучитьФункциональнуюОпцию("ИспользоватьПредпросмотрФайлов");
	ИспользоватьПредпросмотрФайловЛичная =
		ХранилищеОбщихНастроек.Загрузить(
			"НастройкиРаботыСДокументами",
			"ИспользоватьПредпросмотрФайлов");
	Если ИспользоватьПредпросмотрФайловЛичная = Неопределено Тогда
		ИспользоватьПредпросмотрФайловЛичная = Истина;
	КонецЕсли;			
	ИспользоватьПредпросмотрФайлов = 
		ИспользоватьПредпросмотрФайловОбщая 
		И ИспользоватьПредпросмотрФайловЛичная
		И Не ЭтоМобильныйКлиент; 
		
	Если ЗначениеЗаполнено(ТекущийИсточникДействия) И ТипЗнч(ТекущийИсточникДействия) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		УстановитьПривилегированныйРежим(Истина);
		БизнесПроцессИсточника = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийИсточникДействия, "БизнесПроцесс");
		НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(БизнесПроцессИсточника);
		УстановитьПривилегированныйРежим(Ложь);
	ИначеЕсли ЗначениеЗаполнено(ТекущийИсточникДействия) И ТипЗнч(ТекущийИсточникДействия) = Тип("СправочникСсылка.ДействияОзнакомления") Тогда
		НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ТекущийИсточникДействия);
	Иначе
		НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ТекущаяЗадача);
	КонецЕсли;
	
	// Учет трудозатрат
	ПереключитьХронометражНеМеняяПодсказку = Новый Структура("Подсказка");
	УчетВремени.ПроинициализироватьПараметрыУчетаВремени(
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ОпцияИспользоватьУчетВремени,
		ТекущееДействиеЗадачи,
		ВидыРабот,
		СпособУказанияВремени,
		ПереключитьХронометражНеМеняяПодсказку,
		Элементы.ПереключитьХронометраж,
		Элементы.УказатьТрудозатраты);
	
	РаботаСЗадачами.УстановитьУсловноеОформлениеПодзадач(УсловноеОформление);
	РаботаСЗадачами.УстановитьУсловноеОформлениеДереваПриложений(УсловноеОформление);
	
	Если ЗначениеЗаполнено(ТекущийИсточникДействия) И ТипЗнч(ТекущийИсточникДействия) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		ТекущийИсточникДействияОбъект = ТекущийИсточникДействия.ПолучитьОбъект();
		ЗначениеВРеквизитФормы(ТекущийИсточникДействияОбъект, "ТекущийИсточникДействияДанные");
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Объект", ТекущийИсточникДействияОбъект);
		ДополнительныеПараметры.Вставить("ПроизвольныйОбъект", Истина);
		ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", Элементы.СтраницаДополнительныеРеквизиты.Имя);
		ДополнительныеПараметры.Вставить("ИмяЭлементаКоманднойПанели", Элементы.ГруппаКоманднаяПанель.Имя);
		УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
		
		УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(
			ЭтотОбъект,
			ТекущийИсточникДействияДанные);
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	ОбновитьКомандыВыполнения();
	ОбновитьНаСервере();
	
	ОбновитьПоступившиеОбновления();
	
	Если ЭтоМобильныйКлиент Тогда
		МК_НастроитьЭлементыФормы();
	КонецЕсли;
	
	Объект = Строка(ТекущееДействиеЗадачи); // Временно, для работы учета трудозатрат.
	
	Элементы.ПриложенияРезультатаИндексКартинки1.Рамка =
		Новый Рамка(ТипРамкиЭлементаУправления.БезРамки, 1);
	Элементы.ПриложенияРезультатаИндексКартинки2.Рамка =
		Новый Рамка(ТипРамкиЭлементаУправления.БезРамки, 1);
	Элементы.ПриложенияРезультатаИндексКартинки3.Рамка =
		Новый Рамка(ТипРамкиЭлементаУправления.БезРамки, 1);
	
	ОписаниеТиповПриложенийОтчетов =
		Метаданные.Документы.ДействиеЗадачи.ТабличныеЧасти.Приложения.Реквизиты.Приложение.Тип;
	ОписаниеТиповВладельцевФайлов =
		Метаданные.ОпределяемыеТипы.ВладелецФайлов.Тип;
	
	// РаспознаваниеРечи
	РаспознаваниеРечи_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	// Конец РаспознаваниеРечи

	ПоказыватьPdfСредствами1С = РаботаСФайламиСлужебныйПовтИсп.ПоказыватьPdfСредствами1С();
	
	ЭтоВебКлиент = ОбщегоНазначения.ЭтоВебКлиент();
	ЭтоТонкийКлиент = ОбщегоНазначенияДокументооборот.ЭтоТонкийКлиент();
	
	// Pdf
	Если ЭтоТонкийКлиент Или (ЭтоВебКлиент И ПолеPDFРаботаетВВебКлиенте) Тогда
		Если ПоказыватьPdfСредствами1С Тогда
			ВывестиPDFДокументНаСервере();
		КонецЕсли;
	КонецЕсли;
	//Конец Pdf                      
	
	СоздатьКнопкиПорционногоПредпросмотра();

	ВсегоПорцийПредпросмотра = 1;
	НомерПорции = 1;
	ОбновитьКнопкиДинамическогоСписка();
	
	НастройкиДействий.НастроитьУсловноеОформлениеДействий(УсловноеОформление);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(ТекущийИсточникДействия) И ТипЗнч(ТекущийИсточникДействия) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		// СтандартныеПодсистемы.Свойства
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		// Конец СтандартныеПодсистемы.Свойства
		
	КонецЕсли;
	
	РаботаСЗадачамиКлиент.ДеревоПриложенийРазвернуть(ДеревоПриложений, Элементы.ДеревоПриложений);
	
	// РаспознаваниеРечи
	РаспознаваниеРечи_ИзменитьСостояниеФормы();
	// Конец РаспознаваниеРечи
	
	Если ЭтоМобильныйКлиент Тогда
		УстановитьДоступностьКомандПриложений();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияДокументооборотКлиент.ПередЗакрытием(
			Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, Модифицированность) Тогда
		
		Если НужноСохранитьРезультатДействия Тогда
			Отказ = Истина;
			ТекстПредупреждения = НСтр("ru = 'Данные были изменены. Все изменения будут потеряны.'");
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("ВзятьВРаботуСВыборомИсполнителя");
	ДействиеДляОтложенногоВзятияВРаботу = Неопределено;
	
	Если ПредложитьСохранитьЗанятыеФайлы() Тогда
		Отказ = Истина;
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ПредложитьСохранитьЗанятыеФайлыРезультата() Тогда
		Отказ = Истина;
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если РаботаСЗадачамиКлиент.ОткрытВыборФактическогоИсполнителя(ЭтотОбъект) Тогда
		
		Отказ = Истина;
		СтандартнаяОбработка = Ложь;
		
		Возврат;
		
	КонецЕсли;
	
	// РаспознаваниеРечи
	РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
	РаботаСРечьюЖурналированиеКлиент.ОчиститьЖурнал(УникальныйИдентификатор);
	// Конец РаспознаваниеРечи
	
	Если НужноСохранитьРезультатДействия Тогда
		СохранитьРезультатДействия();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ПеретаскиваниеФайловЗавершено" И ЭтоПриложениеТекущейЗадачи(Параметр) Тогда
		ОбновитьНаКлиентеОтложенно();
	КонецЕсли;
	
	Если ИмяСобытия = "ПереименованиеФайловЗавершено" И ЭтоПриложениеТекущейЗадачи(Параметр) Тогда
		ОбновитьНаКлиентеОтложенно();
	КонецЕсли;
	
	Если ИмяСобытия = "ФайлыДокументаПомеченыНаУдаление" И ЭтоПриложениеТекущейЗадачи(Параметр) Тогда
		ОбновитьНаКлиентеОтложенно();
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ДействиеЗадачи" И Источник = ТекущееДействиеЗадачи Тогда
		
		ПредыдущаяПометкаУдаления = ПометкаУдаленияДействия;
		
		ОбновитьНаКлиентеОтложенно();
		
		Если ПредыдущаяПометкаУдаления = Ложь И ПометкаУдаленияДействия = Истина Тогда
			Если Открыта() Тогда
				Закрыть();
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_ДействиеЗадачи"
		И РаботаСЗадачамиКлиент.ЭтоДействиеПодзадачи(Подзадачи, Источник) Тогда
		
		ОбновитьНаКлиентеОтложенно();
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ШаблоныТекстов" Тогда
		ОбновитьКомандыВыполнения();
		ОбновитьНаКлиентеОтложенно();
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Задача"
		И Источник = ТекущаяЗадача
		И (Параметр = Неопределено
			Или Параметр.ИдентификаторФормы <> УникальныйИдентификатор) Тогда
		
		ОбновитьНаКлиентеОтложенно();
		
	ИначеЕсли ИмяСобытия = "Запись_Задача"
		И РаботаСЗадачамиКлиент.ЭтоПодзадача(
			ТекущаяЗадача,
			Подзадачи,
			Источник,
			?(Параметр <> Неопределено, Параметр.ВышестоящаяЗадача, Неопределено)) Тогда
		
		ОбновитьНаКлиентеОтложенно();
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Файл"
		И (Параметр.Событие = "ДанныеФайлаИзменены"
			Или Параметр.Событие = "СозданФайл") Тогда
		
		Если ТипЗнч(Параметр) = Тип("Структура")
			И Параметр.Свойство("Владелец")
			И Параметр.Свойство("Файл")
			И ЗначениеЗаполнено(Параметр.Владелец)  Тогда
			ВладелецФайла = Параметр.Владелец;
			ФайлСсылка = Параметр.Файл; 
		Иначе	
			ВладелецФайла = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Источник, "ВладелецФайла");
			ФайлСсылка = Источник; 
		КонецЕсли;	
		
		ТекущиеДанные = Элементы.ДеревоПриложений.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			ТекущийФайл = ТекущиеДанные.Приложение;
		КонецЕсли;	
		
		Если ВладелецФайла = ТекущаяЗадача
			Или ВладелецФайла = ТекущееДействиеЗадачи
			Или ЭтоПриложениеТекущейЗадачи(ВладелецФайла)
			Или ФайлСсылка = ТекущийФайл Тогда
			
			Если НужноСохранитьРезультатДействия Тогда
				СохранитьРезультатДействия();
			КонецЕсли;
			ОбновитьНаКлиентеОтложенно();
			
			ТекущиеДанные = Элементы.ДеревоПриложений.ТекущиеДанные;
			
			Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.Приложение) 
				И ТипЗнч(ТекущиеДанные.Приложение) = Тип("СправочникСсылка.Файлы")  Тогда
				
				ТекущийФайл = ТекущиеДанные.Приложение;
				ФайлРедактируется = ТекущиеДанные.РедактируетТекущийПользователь;
				
				Если (ФайлСсылка = ТекущийФайл) И ФайлРедактируется Тогда
			
					ОписаниеHTMLФайла = ОбзорФайловКлиентСервер.HTMLПредставлениеПриРедактировании();
					Элементы.ГруппаПредпросмотрУрезан.Видимость = Ложь;
					Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
					Элементы.ГруппаОбзорФайлаКомандыВертикально.Видимость = Ложь;
					Элементы.ГруппаОбзорФайлаОтступКоманд.Видимость = Истина;
					
				Иначе
					
					ДокументPDF = Неопределено;
					
					ПараметрыHTMLПредставление = ОбзорФайловКлиентСервер.СтруктураПараметровHTMLПредставлениеФайла();
					ПараметрыHTMLПредставление.МаксимальноеЧислоСтраницДляПредпросмотра = МаксимальноеЧислоСтраницДляПредпросмотра;
					ПараметрыHTMLПредставление.Расширение = ТекущиеДанные.Расширение;
					ПараметрыHTMLПредставление.Размер = ТекущиеДанные.ТекущаяВерсияРазмер;
					ПараметрыHTMLПредставление.УникальныйИдентификатор = УникальныйИдентификатор;
					
					ДанныеОбзора = ОбзорФайловКлиент.HTMLПредставлениеФайла(
						ТекущийФайл,
						ПараметрыHTMLПредставление,
						ДокументPDF);
					
					ОбзорФайловКлиент.ЗаполнитьРеквизитыОбзора(ДанныеОбзора, ОписаниеHTMLФайла);
					
					Элементы.ГруппаПредпросмотрУрезан.Видимость = ПараметрыHTMLПредставление.ПредпросмотрУрезан;
					МасштабироватьPDFИКартинки = ПараметрыHTMLПредставление.МасштабироватьPDFИКартинки;
					
					УстановитьВидимостьКомандМасштаба(ТекущиеДанные.Расширение);
					
					Если ДокументPDF = Неопределено Тогда
						Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
						Элементы.ГруппаОбзорФайлаКомандыВертикально.Видимость = Ложь;
						Элементы.ГруппаОбзорФайлаОтступКоманд.Видимость = Истина;
					Иначе
						Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаPdf;
						//@skip-check bsl-legacy-check-string-literal
						ЭтотОбъект["ДокументPdfРеквизит"] = ДокументPDF;
						Элементы["ДокументPdfПоле"].НомерТекущейСтраницы = 1;
						
						Элементы.ГруппаОбзорФайлаКомандыВертикально.Видимость = Истина;
						Элементы.ГруппаОбзорФайлаОтступКоманд.Видимость = Ложь;
					КонецЕсли;
					
				КонецЕсли;
					
		 	КонецЕсли;
			
		КонецЕсли;
		
 	КонецЕсли;
	
	Если ИмяСобытия = "ИмпортФайловЗавершен"
		И ТипЗнч(Источник) = Тип("Структура")
		И Источник.ВладелецФайлов = ТекущееДействиеЗадачи Тогда
		
		ДобавитьМассивФайловРезультата(Источник.МассивСсылокФайлов);
		
	ИначеЕсли ИмяСобытия = "ИмпортФайловЗавершен"
		И ТипЗнч(Источник) = Тип("Структура")
		И ЕстьПриложение(Источник.ВладелецФайлов) Тогда
		
		ОбновитьНаКлиентеОтложенно();
		
	КонецЕсли;
	
	Если ИмяСобытия = "ВыполненоДействиеЗадачи"
		И Параметр = ТекущееДействиеЗадачи
		И Источник = УникальныйИдентификатор Тогда
		
		Если Открыта() Тогда
			Закрыть();
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "ДействиеЗадачиПеренаправлено"
		И Параметр = ТекущееДействиеЗадачи
		И Источник = УникальныйИдентификатор Тогда
		
		Если Открыта() Тогда
			Закрыть();
		КонецЕсли;
	
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененыНастройкиЗадач" Тогда
		ОбновитьНаКлиентеОтложенно();
	КонецЕсли;
	
	Если ИмяСобытия = "ЗадачаИзмениласьПередПопыткойИсполненияИлиИзменения"
		И Параметр = УникальныйИдентификатор Тогда
			
		Сообщение = НСтр("ru = 'Не удалось выполнить задачу. Возможно, задача была выполнена или изменена другим сотрудником. Отображение данных задачи обновлено.'");
		Оповестить("Запись_ДействиеЗадачи", , ТекущееДействиеЗадачи);
		ПоказатьПредупреждение(, Сообщение);
		ОбновитьНаКлиентеОтложенно();
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийИсточникДействия) И ТипЗнч(ТекущийИсточникДействия) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		// СтандартныеПодсистемы.Свойства 
		Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
			ОбновитьЭлементыДополнительныхРеквизитов();
			УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		КонецЕсли;
		// Конец СтандартныеПодсистемы.Свойства
		
	КонецЕсли;
	
	Если (ИмяСобытия = "Запись_ДействияИсполнения"
			Или ИмяСобытия = "Запись_ДействияОзнакомления"
			Или ИмяСобытия = "Запись_ДействияПодписания"
			Или ИмяСобытия = "Запись_ДействияРегистрации"
			Или ИмяСобытия = "Запись_ДействияСогласования"
			Или ИмяСобытия = "Запись_ДействияУтверждения")
		И Источник = ДействиеОбработки Тогда
		ОбновитьНаКлиентеОтложенно();
	КонецЕсли;
	
	Если ИмяСобытия = "ПредупредитьОЗаполненииДополнительныхРеквизитов" И Параметр = УникальныйИдентификатор Тогда
		ПредупредитьОЗаполненииДополнительныхРеквизитов();
	КонецЕсли;
	
	Если ИмяСобытия = "ФайлИзменен" И (ЕстьПриложение(Параметр.Файл) Или ЕстьПриложение(Параметр.Владелец)) Тогда
		ОбновитьНаКлиентеОтложенно();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПолученияНавигационнойСсылки(Ключ, Представление, ПолученнаяНавигационнаяСсылка, СтандартнаяОбработка)
	
	Если Ключ = "ФормаИсполнителя" Тогда
		ПолученнаяНавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ТекущееДействиеЗадачи);
	ИначеЕсли Ключ = "ФормаАвтора" Тогда
		ПолученнаяНавигационнаяСсылка = НавигационнаяСсылка;
	Иначе
		ВызватьИсключение СтрШаблон("%1 ""%2""", НСтр("ru = 'Неизвестный ключ'"), Ключ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПолученияСпискаНавигационныхСсылок(СписокНавигационыхСсылок, КлючПоУмолчанию)
	
	КлючИсполнителя = "ФормаИсполнителя";
	ПредставлениеИсполнителя = СтрШаблон("%1 (%2)", Заголовок, НСтр("ru = 'форма исполнителя'"));
	СписокНавигационыхСсылок.Добавить(КлючИсполнителя, ПредставлениеИсполнителя);
	
	КлючАвтора = "ФормаАвтора";
	ПредставлениеАвтора = СтрШаблон("%1 (%2)", Заголовок, НСтр("ru = 'форма автора'"));
	СписокНавигационыхСсылок.Добавить(КлючАвтора, ПредставлениеАвтора);
	
	КлючПоУмолчанию = КлючИсполнителя;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИнструкцияПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСИнструкциямиКлиент.ОткрытьСсылку(
		ДанныеСобытия.Href,
		ДанныеСобытия.Element,
		Элемент.Документ);
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатДействияТекстомПриИзменении(Элемент)

	СохранитьРезультатДействияОтложенно(0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатДействияТекстомКнопкаВыбораНажатие(Элемент)
	
	РезультатДействияТекстомКнопкаВыбораНажатиеПродолжение();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриложенияРезультатаИндексКартинки1Нажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = ПриложенияРезультата[0];
	
	ВыборФайлаРезультата(ДанныеСтроки.Приложение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриложенияРезультатаИндексКартинки2Нажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = ПриложенияРезультата[1];
	
	ВыборФайлаРезультата(ДанныеСтроки.Приложение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриложенияРезультатаИндексКартинки3Нажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = ПриложенияРезультата[2];
	
	ВыборФайлаРезультата(ДанныеСтроки.Приложение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриложенияРезультатаПриложение1Нажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = ПриложенияРезультата[0];
	
	ВыборФайлаРезультата(ДанныеСтроки.Приложение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриложенияРезультатаПриложение2Нажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = ПриложенияРезультата[1];
	
	ВыборФайлаРезультата(ДанныеСтроки.Приложение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриложенияРезультатаПриложение3Нажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = ПриложенияРезультата[2];
	
	ВыборФайлаРезультата(ДанныеСтроки.Приложение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеHTMLПриложенияПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	РаботаС_HTMLКлиент.ОткрытьСсылку(Элемент, ДанныеСобытия, СтандартнаяОбработка, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура МК_ДеревоПриложенийНадписьНажатие(Элемент)
	
	Элементы.ДеревоПриложений.Видимость = Не Элементы.ДеревоПриложений.Видимость;
	МК_НастроитьПоказатьСкрытьДеревоПриложений(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура МК_ПриложенияРезультатаНадписьНажатие(Элемент)
	
	Элементы.ПриложенияРезультата.Видимость = Не Элементы.ПриложенияРезультата.Видимость;
	МК_НастроитьПоказатьСкрытьПриложенияРезультата(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОписаниеHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	Если СтрНайти(ДанныеСобытия.Href, "OpenForEdit") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТекущиеДанные = Элементы.ДеревоПриложений.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			
			ТекущиФайл = ТекущиеДанные.Приложение;
			РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
			
			Если Не РедактируетТекущийПользователь 
				Или ДанныеСобытия.Anchor = Неопределено Тогда
			
				Возврат;
			
			КонецЕсли;
			
			КомандыРаботыСФайламиКлиент.Редактировать(ТекущиФайл);
			
			Возврат;
			
		КонецЕсли;

	ИначеЕсли СтрНайти(ДанныеСобытия.Href, "OpenForView") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТекущиеДанные = Элементы.ДеревоПриложений.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			
			ТекущиФайл = ТекущиеДанные.Приложение;
			РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
			
			Если ДанныеСобытия.Anchor = Неопределено Тогда
			
				Возврат;
			
			КонецЕсли;
			
			РаботаСФайламиКлиент.ОткрытьФайлДокумента(ТекущиФайл, ЭтотОбъект);
			
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли СтрНайти(ДанныеСобытия.Href, "ShowCoperformers") > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Для Каждого СтрокаДерева Из ДеревоПриложений.ПолучитьЭлементы() Цикл
			
			Для Каждого СтрокаВетви Из СтрокаДерева.ПолучитьЭлементы() Цикл
				
				Если СтрокаВетви.ТипСтроки <> ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Соисполнители") Тогда
					Продолжить;
				КонецЕсли;
				
				Если ЭтоМобильныйКлиент Тогда
					
					Элементы.СтраницыПросмотра.ТекущаяСтраница = Элементы.СтраницаСоисполнители;
					
				Иначе
					
					Элементы.ДеревоПриложений.ТекущаяСтрока = СтрокаВетви.ПолучитьИдентификатор();
					
				КонецЕсли;
				
				Прервать;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Возврат;
		
	ИначеЕсли СтрНайти(ДанныеСобытия.Href, "OpenEDI") Тогда
		
		Если ЗначениеЗаполнено(ТекущийДокументЭДО) Тогда
			ПоказатьЗначение(, ТекущийДокументЭДО);
		КонецЕсли;	
		
		Возврат;
		
	КонецЕсли; 
	
	РаботаС_HTMLКлиент.ОткрытьСсылку(Элемент, ДанныеСобытия, СтандартнаяОбработка, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеHTMLФайлаПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	Если СтрНайти(ДанныеСобытия.Href, "OpenForEdit") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТекущиеДанные = Элементы.ДеревоПриложений.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			
			ТекущиФайл = ТекущиеДанные.Приложение;
			РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
			
			Если Не РедактируетТекущийПользователь 
				Или ДанныеСобытия.Anchor = Неопределено Тогда
			
				Возврат;
			
			КонецЕсли;
			
			КомандыРаботыСФайламиКлиент.Редактировать(ТекущиФайл);
			
			Возврат;
			
		КонецЕсли;

	ИначеЕсли СтрНайти(ДанныеСобытия.Href, "OpenForView") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТекущиеДанные = Элементы.ДеревоПриложений.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			
			ТекущиФайл = ТекущиеДанные.Приложение;
			РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
			
			Если ДанныеСобытия.Anchor = Неопределено Тогда
			
				Возврат;
			
			КонецЕсли;
			
			РаботаСФайламиКлиент.ОткрытьФайлДокумента(ТекущиФайл, ЭтотОбъект);
			
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли СтрНайти(ДанныеСобытия.Href, "ShowCoperformers") > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Для Каждого СтрокаДерева Из ДеревоПриложений.ПолучитьЭлементы() Цикл
			
			Для Каждого СтрокаВетви Из СтрокаДерева.ПолучитьЭлементы() Цикл
				
				Если СтрокаВетви.ТипСтроки <> ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Соисполнители") Тогда
					Продолжить;
				КонецЕсли;
				
				Если ЭтоМобильныйКлиент Тогда
					
					Элементы.СтраницыПросмотра.ТекущаяСтраница = Элементы.СтраницаСоисполнители;
					
				Иначе
					
					Элементы.ДеревоПриложений.ТекущаяСтрока = СтрокаВетви.ПолучитьИдентификатор();
					
				КонецЕсли;
				
				Прервать;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Возврат;
		
	ИначеЕсли СтрНайти(ДанныеСобытия.Href, "CreatePreview") Тогда  
		
		ТекущиеДанные = Элементы.ДеревоПриложений.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда   
			
			ТекущийФайл = ТекущиеДанные.Приложение;
		
			ДокументPDF = Неопределено;
			
			ПараметрыHTMLПредставление = ОбзорФайловКлиентСервер.СтруктураПараметровHTMLПредставлениеФайла();
			ПараметрыHTMLПредставление.МаксимальноеЧислоСтраницДляПредпросмотра = МаксимальноеЧислоСтраницДляПредпросмотра;
			ПараметрыHTMLПредставление.Расширение = ТекущиеДанные.Расширение;
			ПараметрыHTMLПредставление.Размер = ТекущиеДанные.ТекущаяВерсияРазмер;
			ПараметрыHTMLПредставление.УникальныйИдентификатор = УникальныйИдентификатор;
			ПараметрыHTMLПредставление.ИгнорироватьМаксРазмер = Истина;
			
			ДанныеОбзора = ОбзорФайловКлиент.HTMLПредставлениеФайла(
				ТекущийФайл,
				ПараметрыHTMLПредставление,
				ДокументPDF);
			
			ОбзорФайловКлиент.ЗаполнитьРеквизитыОбзора(ДанныеОбзора, ОписаниеHTMLФайла);
			
			Элементы.ГруппаПредпросмотрУрезан.Видимость = ПараметрыHTMLПредставление.ПредпросмотрУрезан;
			МасштабироватьPDFИКартинки = ПараметрыHTMLПредставление.МасштабироватьPDFИКартинки;
			
		КонецЕсли;
		
		Возврат;
		
	ИначеЕсли СтрНайти(ДанныеСобытия.Href, "OpenEDI") Тогда
		
		Если ЗначениеЗаполнено(ТекущийДокументЭДО) Тогда
			ПоказатьЗначение(, ТекущийДокументЭДО);
		КонецЕсли;	
		
		Возврат;
		
	КонецЕсли; 
	
	РаботаС_HTMLКлиент.ОткрытьСсылку(Элемент, ДанныеСобытия, СтандартнаяОбработка, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеHTMLФайлаПередПечатью(Элемент, ДиалогПечати, Отказ)
	
	Если ИспользоватьПредпросмотрФайлов И ЗначениеЗаполнено(ТекущийФайл) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(, НСтр("ru = 'Откройте файл в приложении и там выполните команду печати'"));
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоПриложений

&НаКлиенте
Процедура ДеревоПриложенийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элемент.ДанныеСтроки(ВыбраннаяСтрока);
	
	Если ДанныеСтроки <> Неопределено Тогда
		
		Если ДанныеСтроки.РольПредмета = ПредопределенноеЗначение("Перечисление.РолиПредметов.Заполняемый")
			И Не ЗначениеЗаполнено(ДанныеСтроки.Приложение)
			И ЗначениеЗаполнено(ДанныеСтроки.ИмяПредмета) Тогда
			
			РаботаСЗадачамиКлиент.ДобавитьПриложениеЗадачи(
				ТекущееДействиеЗадачи,
				ДанныеСтроки.ИмяПредмета,
				ДанныеСтроки.Приложение);
			
		ИначеЕсли ТипЗнч(ДанныеСтроки.Приложение) = Тип("СправочникСсылка.Файлы") Тогда
			
			РаботаСФайламиКлиент.ОткрытьФайлДокумента(ДанныеСтроки.Приложение, ЭтотОбъект);
			
		ИначеЕсли ЗначениеЗаполнено(ДанныеСтроки.Приложение) Тогда
			
			РаботаСЗадачамиКлиент.ПоказатьПриложение(ДанныеСтроки.Приложение);
			
		ИначеЕсли ДанныеСтроки.ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Задача") Тогда
			
			ПоказатьЗначение(, ТекущаяЗадача);
			
		ИначеЕсли ЗначениеЗаполнено(ДанныеСтроки.ДокументЭДО) Тогда

			ПоказатьЗначение(, ДанныеСтроки.ДокументЭДО);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриложенийПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКомандПриложений();
	
	ТекущиеДанные = Элементы.ДеревоПриложений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НоваяТекущаяСтрока = Элементы.ДеревоПриложений.ТекущаяСтрока;
	Если ТекущаяСтрокаДереваПриложений = НоваяТекущаяСтрока Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрокаДереваПриложений = НоваяТекущаяСтрока;
	
	Если ИспользоватьПредпросмотрФайлов
		И ТекущиеДанные.ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Файл") Тогда
		
		Элементы.СтраницыПросмотра.ТекущаяСтраница = Элементы.СтраницаОбзорФайла;
		
		Если ОбзорФайловКлиент.ЭтоФайлСДолгойОбработкой(ТекущиеДанные.Расширение)
			И Не ТекущиеДанные.ПредпросмотрЕстьВБазе Тогда
			ОписаниеHTMLФайла = ОбзорФайловКлиент.HTMLПредставлениеСДолгойОбработкой();
			Элементы.ГруппаПредпросмотрУрезан.Видимость = Ложь;
			Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
			Элементы.ГруппаОбзорФайлаКомандыВертикально.Видимость = Ложь;
			Элементы.ГруппаОбзорФайлаОтступКоманд.Видимость = Истина;
			
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("ОбновитьПревьюФайла", 0.2, Истина);
		
	ИначеЕсли ИспользоватьПредпросмотрФайлов
		И ТекущиеДанные.ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.ДокументЭДО") Тогда
		
		Элементы.СтраницыПросмотра.ТекущаяСтраница = Элементы.СтраницаОбзорФайла; // та же страница
		
		ПодключитьОбработчикОжидания("ОбновитьПревьюДокументаЭДО", 0.2, Истина);
		
	ИначеЕсли ТекущиеДанные.ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.ДополнительныеРеквизиты") Тогда
		
		Элементы.СтраницыПросмотра.ТекущаяСтраница = Элементы.СтраницаДополнительныеРеквизиты;
		
	ИначеЕсли ТекущиеДанные.ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Инструкция") Тогда
		
		ПодключитьОбработчикОжидания("ОбновитьИнструкциюКлиент", 0.2, Истина);
		
	ИначеЕсли ТекущиеДанные.ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.ИсторияВыполнения") Тогда
		
		ПодключитьОбработчикОжидания("ОбновитьЖизненныйЦиклКлиент", 0.2, Истина);
		
	ИначеЕсли ТекущиеДанные.ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Подзадачи") Тогда
		
		Элементы.СтраницыПросмотра.ТекущаяСтраница = Элементы.СтраницаПодзадачи;
		
	ИначеЕсли ТекущиеДанные.ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Соисполнители") Тогда
		
		Элементы.СтраницыПросмотра.ТекущаяСтраница = Элементы.СтраницаСоисполнители;
		
	ИначеЕсли ТекущиеДанные.ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Приложение") Тогда
		
		ПодключитьОбработчикОжидания("ОбновитьОбзорПриложенияКлиент", 0.2, Истина);
		
	Иначе
		
		Элементы.СтраницыПросмотра.ТекущаяСтраница = Элементы.СтраницаОсновное;
		
		Если ЭтоМобильныйКлиент Тогда 
			МК_КлиентСервер.АдаптироватьHtmlПодЭкранМобильногоПриНеобходимости(ОписаниеHTMLЗадачи);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриложенийПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ДанныеСтроки = Элементы.ДеревоПриложений.ТекущиеДанные;
	
	Если ДанныеСтроки <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(ДанныеСтроки.Приложение) Тогда
			
			РаботаСЗадачамиКлиент.ПоказатьПриложение(ДанныеСтроки.Приложение);
			
		ИначеЕсли ДанныеСтроки.ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Задача") Тогда
			
			ПоказатьЗначение(, ТекущаяЗадача);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриложенийНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	#Если Не ВебКлиент Тогда
		
		КоличествоВыделенныхВложений = Элементы.ДеревоПриложений.ВыделенныеСтроки.Количество();
		
		Если КоличествоВыделенныхВложений = 0 Тогда
			
			Возврат;
			
		ИначеЕсли КоличествоВыделенныхВложений = 1 Тогда
			
			ФайлСсылка = Элементы.ДеревоПриложений.ТекущиеДанные.Приложение;
			Если ТипЗнч(ФайлСсылка) <> Тип("СправочникСсылка.Файлы") Тогда
				
				МассивОбъектов = Новый Массив;
				МассивОбъектов.Добавить(ФайлСсылка);
				ПараметрыПеретаскивания.Значение = МассивОбъектов;
				
				Возврат;
				
			КонецЕсли;
				
			ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(ФайлСсылка);
			
			ПолноеИмяПеретаскиваемогоФайла = "";
			
			Обработчик = Новый ОписаниеОповещения("ПослеПолучитьФайлВерсииВРабочийКаталог", ЭтотОбъект);
			РаботаСФайламиКлиент.ПолучитьФайлВерсииВРабочийКаталог(Обработчик, 
			ДанныеФайла, ПолноеИмяПеретаскиваемогоФайла, УникальныйИдентификатор);
			
			Если ЗначениеЗаполнено(ПолноеИмяПеретаскиваемогоФайла) Тогда
				Файл = Новый Файл(ПолноеИмяПеретаскиваемогоФайла);
				ПараметрыПеретаскивания.Значение = Файл;
			Иначе
				Выполнение = Ложь;
			КонецЕсли;
			
		Иначе // более одного выделено
			
			МассивОбъектов = Новый Массив;
			Для каждого ВыделеннаяСтрока Из Элементы.ДеревоПриложений.ВыделенныеСтроки Цикл
				ДанныеСтроки = ДеревоПриложений.НайтиПоИдентификатору(ВыделеннаяСтрока);
				Если ДанныеСтроки.ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Приложение")
					Или ДанныеСтроки.ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Файл") Тогда
					МассивОбъектов.Добавить(ДанныеСтроки.Приложение);
				КонецЕсли;
			КонецЦикла;
			Если МассивОбъектов.Количество() = 0 Тогда
				Возврат;
			КонецЕсли;
			
			ПараметрыПеретаскивания.Значение = МассивОбъектов;
			
		КонецЕсли;
		
	#Иначе
		Выполнение = Ложь;
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриложенийПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	ЗначениеПеретаскивания = Новый Массив;
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		ЗначениеПеретаскивания = ПараметрыПеретаскивания.Значение;
	Иначе
		ЗначениеПеретаскивания.Добавить(ПараметрыПеретаскивания.Значение);
	КонецЕсли;
	
	ДанныеСтроки = Элемент.ДанныеСтроки(Строка);
	Если ДанныеСтроки <> Неопределено Тогда
		ТипСтроки = ДанныеСтроки.ТипСтроки;
	Иначе
		ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.ПустаяСсылка");
	КонецЕсли;
	
	Для Каждого ЭлементПеретаскивания Из ЗначениеПеретаскивания Цикл
		
		Если ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Приложение")
			Или ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.РольФайла")
			Или ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Файл") Тогда
			
			ДанныеСтрокиПриложения = Неопределено;
			ДанныеСтрокиРолиФайла = Неопределено;
			Если ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Приложение") Тогда
				
				ДанныеСтрокиПриложения = ДанныеСтроки;
				
			ИначеЕсли ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.РольФайла") Тогда
				
				ДанныеСтрокиРолиФайла = ДанныеСтроки;
				ДанныеСтрокиПриложения = ДанныеСтрокиРолиФайла.ПолучитьРодителя();
				Если ДанныеСтрокиПриложения = Неопределено
					Или ДанныеСтрокиПриложения.ТипСтроки <> ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Приложение") Тогда
					
					Продолжить;
					
				КонецЕсли;
				
			ИначеЕсли ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Файл") Тогда
				
				ДанныеСтрокиРодителя = ДанныеСтроки.ПолучитьРодителя();
				Если ДанныеСтрокиРодителя <> Неопределено
					И ДанныеСтрокиРодителя.ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.РольФайла") Тогда
					
					ДанныеСтрокиРолиФайла = ДанныеСтрокиРодителя;
					ДанныеСтрокиПриложения = ДанныеСтрокиРолиФайла.ПолучитьРодителя();
					Если ДанныеСтрокиПриложения = Неопределено
						Или ДанныеСтрокиПриложения.ТипСтроки <> ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Приложение") Тогда
						
						Продолжить;
						
					КонецЕсли;
					
				ИначеЕсли ДанныеСтрокиРодителя <> Неопределено
					И ДанныеСтрокиРодителя.ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Приложение") Тогда
					
					ДанныеСтрокиПриложения = ДанныеСтрокиРодителя;
					
				Иначе
					
					Продолжить;
					
				КонецЕсли;
				
			Иначе
				
				Продолжить;
				
			КонецЕсли;
			
			// Перетаскивание к приложению.
			ТипЭлементаПеретаскивания = ТипЗнч(ЭлементПеретаскивания);
			ТипПриложения = ТипЗнч(ДанныеСтрокиПриложения.Приложение);
			Если ТипЭлементаПеретаскивания = Тип("Файл")
				И ОписаниеТиповВладельцевФайлов.СодержитТип(ТипПриложения) Тогда
				Продолжить;
			КонецЕсли;
			
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
			ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
			
		Иначе
			
			// Перетаскивание к отчету об исполнении.
			ТипЭлементаПеретаскивания = ТипЗнч(ЭлементПеретаскивания);
			Если ТипЭлементаПеретаскивания = Тип("Файл")
				Или ОписаниеТиповПриложенийОтчетов.СодержитТип(ТипЭлементаПеретаскивания) Тогда
				Продолжить;
			КонецЕсли;
			
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
			ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриложенийПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элемент.ДанныеСтроки(Строка);
	Если ДанныеСтроки <> Неопределено Тогда
		ТипСтроки = ДанныеСтроки.ТипСтроки;
	Иначе
		ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.ПустаяСсылка");
	КонецЕсли;
	
	Если ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Приложение")
		Или ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.РольФайла")
		Или ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Файл") Тогда
		
		РольФайлаИПриложение = РольФайлаИПриложение(ДанныеСтроки);
		
		// Перетаскивание к приложению.
		ТипПриложения = ТипЗнч(РольФайлаИПриложение.Приложение);
		Если Не ОписаниеТиповВладельцевФайлов.СодержитТип(ТипПриложения) Тогда
			Возврат;
		КонецЕсли;
		
		ЗначениеПеретаскивания = Новый Массив;
		Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл")
			Или (ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив")
				И ПараметрыПеретаскивания.Значение.Количество() >= 1
				И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("Файл")) Тогда
			
			ОбщегоНазначенияДокументооборотКлиент.ПеретаскиваниеФайлов(
				ЭтотОбъект,
				РольФайлаИПриложение.Приложение,
				РольФайлаИПриложение.РольФайла,
				ПараметрыПеретаскивания);
			
		КонецЕсли;
		
	Иначе
		
		// Перетаскивание к отчету об исполнении.
		Если Не ПриложенияРезультатаИзменятьСоставСтрок Тогда 
			Возврат;
		КонецЕсли;
		
		ЗначениеПеретаскивания = Новый Массив;
		Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл")
			Или (ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив")
				И ПараметрыПеретаскивания.Значение.Количество() >= 1
				И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("Файл")) Тогда
			
			ЗначениеПеретаскивания = 
				РаботаСФайламиКлиент.ОбработкаПеретаскиванияВЛинейныйСписок(
					ПараметрыПеретаскивания,
					ТекущееДействиеЗадачи,
					ЭтотОбъект,
					Истина);
			
		ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				ЗначениеПеретаскивания,
				ПараметрыПеретаскивания.Значение);
				
		Иначе
			
			ЗначениеПеретаскивания.Добавить(ПараметрыПеретаскивания.Значение);
			
		КонецЕсли;
		
		Контекст = Новый Структура("ДействиеЗадачи, ФормаВладелец", ТекущееДействиеЗадачи, ЭтотОбъект);
		РаботаСЗадачамиКлиент.ЗавершитьДобавлениеПриложенияКОтчету(
			ЗначениеПеретаскивания,
			Контекст);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПодзадачи

&НаКлиенте
Процедура ПодзадачиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	РаботаСЗадачамиКлиент.ПодзадачиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодзадачиПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекущаяПодзадачаИлиДействие = Неопределено;
		Элементы.ВзятьОтчетОбИсполненииИПриложения.Доступность = Ложь;
		Элементы.ПодзадачиКонтекстноеМенюВзятьОтчетОбИсполненииИПриложения.Доступность =
			Элементы.ВзятьОтчетОбИсполненииИПриложения.Доступность;
		Элементы.ВернутьНаДоработку.Доступность = Ложь;
		Возврат;
	КонецЕсли;
	
	// Наследует доступность создания подзадачи и накладывает дополнительные условия.
	ТекущаяПодзадачаИлиДействие =
		?(ЗначениеЗаполнено(ТекущиеДанные.ДействиеЗадачи),
			ТекущиеДанные.ДействиеЗадачи,
			ТекущиеДанные.Задача); 
	Элементы.ВзятьОтчетОбИсполненииИПриложения.Доступность =
		Элементы.СоздатьПодзадачу.Доступность
		И ТекущиеДанные.ЭтоПервыйУровень
		И (ЗначениеЗаполнено(ТекущиеДанные.РезультатДействияТекстом)
			Или ТекущиеДанные.ЕстьПриложения
			Или Не ЗначениеЗаполнено(ТекущиеДанные.ДействиеЗадачи));
	Элементы.ПодзадачиКонтекстноеМенюВзятьОтчетОбИсполненииИПриложения.Доступность =
		Элементы.ВзятьОтчетОбИсполненииИПриложения.Доступность;
	Элементы.ВернутьНаДоработку.Доступность =
		Элементы.СоздатьПодзадачу.Доступность
		И ТекущиеДанные.ЭтоПервыйУровень
		И ТекущиеДанные.ВозможенВозвратНаДоработку;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПриложенияРезультата

&НаКлиенте
Процедура ПриложенияРезультатаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элемент.ДанныеСтроки(ВыбраннаяСтрока);
	
	Если ДанныеСтроки <> Неопределено Тогда
		ВыборФайлаРезультата(ДанныеСтроки.Приложение);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриложенияРезультатаПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКомандПриложенийРезультата();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриложенияРезультатаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриложенияРезультатаПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.ПриложенияРезультата.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РаботаСЗадачамиКлиент.ПоказатьПриложение(ТекущиеДанные.Приложение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриложенияРезультатаПередУдалением(Элемент, Отказ)

	Отказ = Истина;
	
	Если Не ПриложенияРезультатаИзменятьСоставСтрок Тогда
		Возврат;
	КонецЕсли;
	
	МассивПриложений = Новый Массив;
	
	Для Каждого ВыбраннаяСтрока Из Элементы.ПриложенияРезультата.ВыделенныеСтроки Цикл
		
		ДанныеСтроки = ПриложенияРезультата.НайтиПоИдентификатору(ВыбраннаяСтрока);
			
		МассивПриложений.Добавить(ДанныеСтроки.Приложение);
		
	КонецЦикла;
	
	РаботаСЗадачамиКлиент.УдалитьПриложенияРезультата(ТекущееДействиеЗадачи, МассивПриложений);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриложенияРезультатаНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	#Если Не ВебКлиент Тогда
		
		КоличествоВыделенныхВложений = Элементы.ПриложенияРезультата.ВыделенныеСтроки.Количество();
		
		Если КоличествоВыделенныхВложений = 0 Тогда
			
			Возврат;
			
		ИначеЕсли КоличествоВыделенныхВложений = 1 Тогда
			
			ФайлСсылка = Элементы.ПриложенияРезультата.ТекущиеДанные.Приложение;
			Если ТипЗнч(ФайлСсылка) <> Тип("СправочникСсылка.Файлы") Тогда
				
				МассивОбъектов = Новый Массив;
				МассивОбъектов.Добавить(ФайлСсылка);
				ПараметрыПеретаскивания.Значение = МассивОбъектов;
				
				Возврат;
				
			КонецЕсли;
				
			ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(ФайлСсылка);
			
			ПолноеИмяПеретаскиваемогоФайла = "";
			
			Обработчик = Новый ОписаниеОповещения("ПослеПолучитьФайлВерсииВРабочийКаталог", ЭтотОбъект);
			РаботаСФайламиКлиент.ПолучитьФайлВерсииВРабочийКаталог(Обработчик, 
			ДанныеФайла, ПолноеИмяПеретаскиваемогоФайла, УникальныйИдентификатор);
			
			Если ЗначениеЗаполнено(ПолноеИмяПеретаскиваемогоФайла) Тогда
				Файл = Новый Файл(ПолноеИмяПеретаскиваемогоФайла);
				ПараметрыПеретаскивания.Значение = Файл;
			Иначе
				Выполнение = Ложь;
			КонецЕсли;
			
		Иначе // более одного выделено
			
			МассивОбъектов = Новый Массив;
			Для каждого ВыделеннаяСтрока Из Элементы.ПриложенияРезультата.ВыделенныеСтроки Цикл
				ДанныеСтроки = ПриложенияРезультата.НайтиПоИдентификатору(ВыделеннаяСтрока);
				МассивОбъектов.Добавить(ДанныеСтроки.Приложение);
			КонецЦикла;
			Если МассивОбъектов.Количество() = 0 Тогда
				Возврат;
			КонецЕсли;
			
			ПараметрыПеретаскивания.Значение = МассивОбъектов;
			
		КонецЕсли;
		
	#Иначе
		Выполнение = Ложь;
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПриложенияРезультатаПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	ЗначениеПеретаскивания = Новый Массив;
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		ЗначениеПеретаскивания = ПараметрыПеретаскивания.Значение;
	Иначе
		ЗначениеПеретаскивания.Добавить(ПараметрыПеретаскивания.Значение);
	КонецЕсли;
	
	Для Каждого ЭлементПеретаскивания Из ЗначениеПеретаскивания Цикл
		
		ТипЭлементаПеретаскивания = ТипЗнч(ЭлементПеретаскивания);
		Если ТипЭлементаПеретаскивания = Тип("Файл")
			Или ОписаниеТиповПриложенийОтчетов.СодержитТип(ТипЭлементаПеретаскивания) Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриложенияРезультатаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ПриложенияРезультатаИзменятьСоставСтрок Тогда 
		Возврат;
	КонецЕсли;
	
	ЗначениеПеретаскивания = Новый Массив;
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл")
		Или (ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив")
			И ПараметрыПеретаскивания.Значение.Количество() >= 1
			И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("Файл")) Тогда
		
		ЗначениеПеретаскивания = 
			РаботаСФайламиКлиент.ОбработкаПеретаскиванияВЛинейныйСписок(
				ПараметрыПеретаскивания,
				ТекущееДействиеЗадачи,
				ЭтотОбъект,
				Истина);
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			ЗначениеПеретаскивания,
			ПараметрыПеретаскивания.Значение);
			
	Иначе
		
		ЗначениеПеретаскивания.Добавить(ПараметрыПеретаскивания.Значение);
		
	КонецЕсли;
	
	
	Контекст = Новый Структура("ДействиеЗадачи, ФормаВладелец", ТекущееДействиеЗадачи, ЭтотОбъект);
	РаботаСЗадачамиКлиент.ЗавершитьДобавлениеПриложенияКОтчету(
		ЗначениеПеретаскивания,
		Контекст);
		
	Если ЭтоМобильныйКлиент Тогда
		МК_НастроитьПоказатьСкрытьПриложенияРезультата(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСоисполнители

&НаКлиенте
Процедура СоисполнителиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДанныеСтроки = Элемент.ДанныеСтроки(ВыбраннаяСтрока);
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеСтроки.ДействиеЗадачи) Тогда
		СтандартнаяОбработка = Ложь;
		РаботаСЗадачамиКлиент.ОткрытьКарточкуИсполнителяЗадачи(ДанныеСтроки.ДействиеЗадачи);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьПредпросмотр(Команда)
	
	Если Не ИспользоватьПредпросмотрФайлов Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ДеревоПриложений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено 
		Или ТекущиеДанные.ТипСтроки <> ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Файл") Тогда
		Возврат;
	КонецЕсли;
		
	ТекущийФайл = ТекущиеДанные.Приложение;
	РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
	
	Если ТипЗнч(ТекущийФайл) = Тип("СправочникСсылка.Файлы") 
		И Не РедактируетТекущийПользователь Тогда
		
		ДокументPDF = Неопределено;
		
		ПараметрыHTMLПредставление = ОбзорФайловКлиентСервер.СтруктураПараметровHTMLПредставлениеФайла();
		ПараметрыHTMLПредставление.МаксимальноеЧислоСтраницДляПредпросмотра = МаксимальноеЧислоСтраницДляПредпросмотра;
		ПараметрыHTMLПредставление.Расширение = ТекущиеДанные.Расширение;
		ПараметрыHTMLПредставление.Размер = ТекущиеДанные.ТекущаяВерсияРазмер;
		ПараметрыHTMLПредставление.УникальныйИдентификатор = УникальныйИдентификатор;
		ПараметрыHTMLПредставление.ОбновитьПредставление = Истина;
		
		ДанныеОбзора = ОбзорФайловКлиент.HTMLПредставлениеФайла(
			ТекущийФайл,
			ПараметрыHTMLПредставление,
			ДокументPDF);
		
		ОбзорФайловКлиент.ЗаполнитьРеквизитыОбзора(ДанныеОбзора, ОписаниеHTMLФайла);
		
		Элементы.ГруппаПредпросмотрУрезан.Видимость = ПараметрыHTMLПредставление.ПредпросмотрУрезан;
		МасштабироватьPDFИКартинки = ПараметрыHTMLПредставление.МасштабироватьPDFИКартинки;
		
		УстановитьВидимостьКомандМасштаба(ТекущиеДанные.Расширение);
		
		НомерПорции = 1;
		ВсегоПорцийПредпросмотра = ПараметрыHTMLПредставление.ВсегоПорцийПредпросмотра;
		ОбновитьКнопкиДинамическогоСпискаКлиент();
		
		Если ДокументPDF = Неопределено Тогда
			Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
			Элементы.ГруппаОбзорФайлаКомандыВертикально.Видимость = Ложь;
			Элементы.ГруппаОбзорФайлаОтступКоманд.Видимость = Истина;
			
		Иначе
			Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаPdf;
			//@skip-check bsl-legacy-check-string-literal
			ЭтотОбъект["ДокументPdfРеквизит"] = ДокументPDF;
			Элементы["ДокументPdfПоле"].НомерТекущейСтраницы = 1;
			

			Элементы.ГруппаОбзорФайлаКомандыВертикально.Видимость = Истина;
			Элементы.ГруппаОбзорФайлаОтступКоманд.Видимость = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастоящийРазмер(Команда)
	
	Если Не ИспользоватьПредпросмотрФайлов Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ДеревоПриложений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено 
		Или ТекущиеДанные.ТипСтроки <> ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Файл") Тогда
		Возврат;
	КонецЕсли;
		
	ТекущийФайл = ТекущиеДанные.Приложение;
	РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
	
	Если ТипЗнч(ТекущийФайл) = Тип("СправочникСсылка.Файлы") 
		И Не РедактируетТекущийПользователь Тогда   
		
		ДокументPDF = Неопределено;
		
		ПараметрыHTMLПредставление = ОбзорФайловКлиентСервер.СтруктураПараметровHTMLПредставлениеФайла();
		ПараметрыHTMLПредставление.МаксимальноеЧислоСтраницДляПредпросмотра = МаксимальноеЧислоСтраницДляПредпросмотра;
		ПараметрыHTMLПредставление.Расширение = ТекущиеДанные.Расширение;
		ПараметрыHTMLПредставление.Размер = ТекущиеДанные.ТекущаяВерсияРазмер;
		ПараметрыHTMLПредставление.УникальныйИдентификатор = УникальныйИдентификатор;
		ПараметрыHTMLПредставление.МасштабироватьPDFИКартинки = Ложь;
		МасштабироватьPDFИКартинки = Ложь;
		
		ДанныеОбзора = ОбзорФайловКлиент.HTMLПредставлениеФайла(
			ТекущийФайл,
			ПараметрыHTMLПредставление,
			ДокументPDF);
		
		ОбзорФайловКлиент.ЗаполнитьРеквизитыОбзора(ДанныеОбзора, ОписаниеHTMLФайла);
		
		Элементы.ГруппаПредпросмотрУрезан.Видимость = ПараметрыHTMLПредставление.ПредпросмотрУрезан;
		
		УстановитьВидимостьКомандМасштаба(ТекущиеДанные.Расширение);
		
		Если ДокументPDF = Неопределено Тогда
			Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
			Элементы.ГруппаОбзорФайлаКомандыВертикально.Видимость = Ложь;
			Элементы.ГруппаОбзорФайлаОтступКоманд.Видимость = Истина;
			
		Иначе
			Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаPdf;
			//@skip-check bsl-legacy-check-string-literal
			ЭтотОбъект["ДокументPdfРеквизит"] = ДокументPDF;
			Элементы["ДокументPdfПоле"].НомерТекущейСтраницы = 1;

			Элементы.ГруппаОбзорФайлаКомандыВертикально.Видимость = Истина;
			Элементы.ГруппаОбзорФайлаОтступКоманд.Видимость = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоШиринеОкна(Команда)
	
	Если Не ИспользоватьПредпросмотрФайлов Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ДеревоПриложений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено 
		Или ТекущиеДанные.ТипСтроки <> ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Файл") Тогда
		Возврат;
	КонецЕсли;
		
	ТекущийФайл = ТекущиеДанные.Приложение;
	РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
	
	Если ТипЗнч(ТекущийФайл) = Тип("СправочникСсылка.Файлы")
		И Не РедактируетТекущийПользователь Тогда
		
		ДокументPDF = Неопределено;
		
		ПараметрыHTMLПредставление = ОбзорФайловКлиентСервер.СтруктураПараметровHTMLПредставлениеФайла();
		ПараметрыHTMLПредставление.МаксимальноеЧислоСтраницДляПредпросмотра = МаксимальноеЧислоСтраницДляПредпросмотра;
		ПараметрыHTMLПредставление.Расширение = ТекущиеДанные.Расширение;
		ПараметрыHTMLПредставление.Размер = ТекущиеДанные.ТекущаяВерсияРазмер;
		ПараметрыHTMLПредставление.УникальныйИдентификатор = УникальныйИдентификатор;
		ПараметрыHTMLПредставление.МасштабироватьPDFИКартинки = Истина;
		МасштабироватьPDFИКартинки = Истина;
		
		ДанныеОбзора = ОбзорФайловКлиент.HTMLПредставлениеФайла(
			ТекущийФайл,
			ПараметрыHTMLПредставление,
			ДокументPDF);
		
		ОбзорФайловКлиент.ЗаполнитьРеквизитыОбзора(ДанныеОбзора, ОписаниеHTMLФайла);
		
		Элементы.ГруппаПредпросмотрУрезан.Видимость = ПараметрыHTMLПредставление.ПредпросмотрУрезан;
		
		УстановитьВидимостьКомандМасштаба(ТекущиеДанные.Расширение);
		
		Если ДокументPDF = Неопределено Тогда
			Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
			Элементы.ГруппаОбзорФайлаКомандыВертикально.Видимость = Ложь;
			Элементы.ГруппаОбзорФайлаОтступКоманд.Видимость = Истина;
			
		Иначе
			Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаPdf;
			//@skip-check bsl-legacy-check-string-literal
			ЭтотОбъект["ДокументPdfРеквизит"] = ДокументPDF;
			Элементы["ДокументPdfПоле"].НомерТекущейСтраницы = 1;
			
			Элементы.ГруппаОбзорФайлаКомандыВертикально.Видимость = Истина;
			Элементы.ГруппаОбзорФайлаОтступКоманд.Видимость = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МК_ПоказатьСкрытьПриложенияРезультата(Команда)
	
	Элементы.ПриложенияРезультата.Видимость = Не Элементы.ПриложенияРезультата.Видимость;
	МК_НастроитьПоказатьСкрытьПриложенияРезультата(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура МК_ЗаполнитьПоШаблону(Команда)
	
	РезультатДействияТекстомКнопкаВыбораНажатиеПродолжение();
	
КонецПроцедуры

&НаКлиенте
Процедура МК_ПоказатьСкрытьДеревоПриложений(Команда)
	
	Элементы.ДеревоПриложений.Видимость = Не Элементы.ДеревоПриложений.Видимость;
	МК_НастроитьПоказатьСкрытьДеревоПриложений(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура МК_СтраницаИнформация(Команда)
	
	МК_ПереключитьНаОсновнуюСтраницу(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура МК_СтраницаИстория(Команда)
	
	МК_ПереключитьНаСтраницуИстория(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура МК_СтраницаПодзадачи(Команда)
	
	МК_ПереключитьНаСтраницуПодзадачи(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура МК_СтраницаИнструкция(Команда)
	
	МК_ПереключитьНаСтраницуИнструкция(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура МК_СтраницаСоисполнители(Команда)
	
	МК_ПереключитьНаСтраницуСоисполнители(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьШаблонДляВыполненияЗадачи(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВыполнитьДействиеЗадачиПослеВыбораШаблонаТекста",
		ЭтотОбъект);
	
	ПоказатьВыборИзМеню(
		ОписаниеОповещения,
		ШаблоныДляВыбора,
		Элементы.ВыбратьШаблонДляВыполненияЗадачи);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактированиеФайлаРезультата(Команда)
	
	ДанныеСтроки = Элементы.ПриложенияРезультата.ТекущиеДанные;
	
	ЗакончитьРедактированиеФайлаРезультатаСтроки(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактированиеФайлаРезультата1(Команда)
	
	ДанныеСтроки = ПриложенияРезультата[0];
	
	ЗакончитьРедактированиеФайлаРезультатаСтроки(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактированиеФайлаРезультата2(Команда)
	
	ДанныеСтроки = ПриложенияРезультата[1];
	
	ЗакончитьРедактированиеФайлаРезультатаСтроки(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактированиеФайлаРезультата3(Команда)
	
	ДанныеСтроки = ПриложенияРезультата[2];
	
	ЗакончитьРедактированиеФайлаРезультатаСтроки(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсвободитьПриложениеРезультата(Команда)
	
	ДанныеСтроки = Элементы.ПриложенияРезультата.ТекущиеДанные;
	
	ОсвободитьПриложениеРезультатаСтроки(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсвободитьПриложениеРезультата1(Команда)
	
	ДанныеСтроки = ПриложенияРезультата[0];
	
	ОсвободитьПриложениеРезультатаСтроки(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсвободитьПриложениеРезультата2(Команда)
	
	ДанныеСтроки = ПриложенияРезультата[1];
	
	ОсвободитьПриложениеРезультатаСтроки(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсвободитьПриложениеРезультата3(Команда)
	
	ДанныеСтроки = ПриложенияРезультата[2];
	
	ОсвободитьПриложениеРезультатаСтроки(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПриложение(Команда)
	
	ТекущиеДанные = Элементы.ДеревоПриложений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РаботаСЗадачамиКлиент.ПросмотретьПриложение(
		ТекущиеДанные.Приложение,
		УникальныйИдентификатор,
		ПредыдущийАдресФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуПриложенияРезультата(Команда)
	
	ДанныеСтроки = Элементы.ПриложенияРезультата.ТекущиеДанные;
	
	ОткрытьКарточкуПриложенияРезультатаСтроки(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуПриложенияРезультата1(Команда)
	
	ДанныеСтроки = ПриложенияРезультата[0];
	
	ОткрытьКарточкуПриложенияРезультатаСтроки(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуПриложенияРезультата2(Команда)
	
	ДанныеСтроки = ПриложенияРезультата[1];
	
	ОткрытьКарточкуПриложенияРезультатаСтроки(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуПриложенияРезультата3(Команда)
	
	ДанныеСтроки = ПриложенияРезультата[2];
	
	ОткрытьКарточкуПриложенияРезультатаСтроки(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПриложениеРезультата(Команда)
	
	ДанныеСтроки = Элементы.ПриложенияРезультата.ТекущиеДанные;
	
	ОткрытьПриложениеРезультатаСтроки(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПриложениеРезультата1(Команда)
	
	ДанныеСтроки = ПриложенияРезультата[0];
	
	ОткрытьПриложениеРезультатаСтроки(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПриложениеРезультата2(Команда)
	
	ДанныеСтроки = ПриложенияРезультата[1];
	
	ОткрытьПриложениеРезультатаСтроки(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПриложениеРезультата3(Команда)
	
	ДанныеСтроки = ПриложенияРезультата[2];
	
	ОткрытьПриложениеРезультатаСтроки(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВыполнение(Команда)
	
	РаботаСЗадачамиКлиент.ОтменитьВыполнение(
		ТекущееДействиеЗадачи,
		ТекущаяВерсияДанныхДействияЗадачи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьХронометраж(Команда)
	
	Если Не ЗначениеЗаполнено(ТекущееДействиеЗадачи) Тогда
		Возврат;
	КонецЕсли;
	
	НуженДиалог = УчетВремениКлиент.НуженДиалогДляХронометража(
		ВключенХронометраж, 
		ДатаНачалаХронометража,
		ВидыРабот);
	Если Не НуженДиалог Тогда
		
		ПараметрыОповещения = Неопределено;
		ПереключитьХронометражНаСервере(ПараметрыОповещения);
		УчетВремениКлиент.ПоказатьОповещение(
			ПараметрыОповещения,
			ВключенХронометраж,
			ТекущееДействиеЗадачи);
		
		Возврат;
		
	КонецЕсли;
	
	ДлительностьРаботы = УчетВремениКлиент.ПолучитьДлительностьРаботы(ДатаНачалаХронометража);
	
	ОписаниеРаботы = СтрШаблон(
		НСтр("ru = 'Работа над задачей ""%1""'"),
		ТекущееДействиеЗадачи);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаОтчета", ОбщегоНазначенияКлиент.ДатаСеанса());
	ПараметрыФормы.Вставить("ВидыРабот", ВидыРабот);
	ПараметрыФормы.Вставить("ОписаниеРаботы", ОписаниеРаботы);
	ПараметрыФормы.Вставить("ДлительностьРаботы", ДлительностьРаботы);
	ПараметрыФормы.Вставить("НачалоРаботы", ДатаНачалаХронометража);
	ПараметрыФормы.Вставить("Объект", ТекущееДействиеЗадачи);
	ПараметрыФормы.Вставить("СпособУказанияВремени", СпособУказанияВремени);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПереключитьХронометражПродолжение",
		ЭтотОбъект,
		Новый Структура("Объект, ПараметрыОповещения", ТекущееДействиеЗадачи, ПараметрыОповещения));
	
	ОткрытьФорму(
		"РегистрСведений.ФактическиеТрудозатраты.Форма.ФормаДобавленияРаботы",
		ПараметрыФормы,,,,,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодробнееОЗадаче(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ТекущийИсточникДействия);
	
	ОткрытьФорму("Задача.ЗадачаИсполнителя.Форма.ПодробнаяФормаЗадачи", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПраваДоступа(Команда)
	
	ОткрытьФорму(
		"ОбщаяФорма.ДокументооборотПраваДоступаПоОбъекту",
		Новый Структура("ОбъектДоступа", ТекущееДействиеЗадачи),,
		ПолучитьНавигационнуюСсылку(ТекущееДействиеЗадачи));
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьФайлРезультата(Команда)
	
	ДанныеСтроки = Элементы.ПриложенияРезультата.ТекущиеДанные;
	
	РедактироватьФайлРезультатаСтроки(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьФайлРезультата1(Команда)
	
	ДанныеСтроки = ПриложенияРезультата[0];
	
	РедактироватьФайлРезультатаСтроки(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьФайлРезультата2(Команда)
	
	ДанныеСтроки = ПриложенияРезультата[1];
	
	РедактироватьФайлРезультатаСтроки(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьФайлРезультата3(Команда)
	
	ДанныеСтроки = ПриложенияРезультата[2];
	
	РедактироватьФайлРезультатаСтроки(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКакФайлРезультата(Команда)
	
	Если Элементы.ПриложенияРезультата.ВыделенныеСтроки.Количество() > 1 Тогда
		
		СписокФайловДляВыгрузки = Новый СписокЗначений;
		Для Каждого ВыбраннаяСтрока Из Элементы.ПриложенияРезультата.ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.ПриложенияРезультата.ДанныеСтроки(ВыбраннаяСтрока);
			Если ТипЗнч(ДанныеСтроки.Приложение) = Тип("СправочникСсылка.Файлы") Тогда
				СписокФайловДляВыгрузки.Добавить(ДанныеСтроки.Приложение);
			КонецЕсли;
		КонецЦикла;
		
		Если СписокФайловДляВыгрузки.Количество() > 1 Тогда
			РаботаСФайламиКлиент.СохранитьФайлыКак(СписокФайловДляВыгрузки, УникальныйИдентификатор);
		ИначеЕсли СписокФайловДляВыгрузки.Количество() = 1 Тогда
			ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляСохранения(СписокФайловДляВыгрузки[0].Значение, Неопределено, УникальныйИдентификатор);
			КомандыРаботыСФайламиКлиент.СохранитьКак(ДанныеФайла, УникальныйИдентификатор);
		Иначе
			ПоказатьПредупреждение(,НСтр("ru = 'Выберите файл.'"));
		КонецЕсли;
		
	Иначе
		
		ДанныеСтроки = Элементы.ПриложенияРезультата.ТекущиеДанные;
		
		СохранитьКакФайлРезультатаСтроки(ДанныеСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКакФайлРезультата1(Команда)
	
	ДанныеСтроки = ПриложенияРезультата[0];
	
	СохранитьКакФайлРезультатаСтроки(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКакФайлРезультата2(Команда)
	
	ДанныеСтроки = ПриложенияРезультата[1];
	
	СохранитьКакФайлРезультатаСтроки(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКакФайлРезультата3(Команда)
	
	ДанныеСтроки = ПриложенияРезультата[2];
	
	СохранитьКакФайлРезультатаСтроки(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьТрудозатраты(Команда)
	
	Если Не ЗначениеЗаполнено(ТекущееДействиеЗадачи) Тогда
		Возврат;
	КонецЕсли;
	
	УчетВремениКлиент.ДобавитьВОтчетКлиент(
		ОбщегоНазначенияКлиент.ДатаСеанса(),
		ВключенХронометраж,
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВидыРабот,
		ТекущееДействиеЗадачи,
		СпособУказанияВремени,
		Элементы.ПереключитьХронометраж,
		Ложь,
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыЗакончитьРедактирование(Команда)
	
	Если Элементы.ДеревоПриложений.ТекущиеДанные.Приложение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Элементы.ДеревоПриложений.ТекущиеДанные.Приложение) = Тип("СправочникСсылка.Файлы") Тогда
		
		Обработчик = Новый ОписаниеОповещения("ОбновитьВОбработкеОповещения", ЭтотОбъект, Новый Структура);
		
		ПараметрыОбновленияФайла = РаботаСФайламиКлиент.ПараметрыОбновленияФайла(
			Обработчик,
			Элементы.ДеревоПриложений.ТекущиеДанные.Приложение,
			УникальныйИдентификатор);
		ПараметрыОбновленияФайла.ХранитьВерсии = Элементы.ДеревоПриложений.ТекущиеДанные.ХранитьВерсии;
		ПараметрыОбновленияФайла.РедактируетТекущийПользователь = Элементы.ДеревоПриложений.ТекущиеДанные.РедактируетТекущийПользователь;
		ПараметрыОбновленияФайла.Редактирует = Элементы.ДеревоПриложений.ТекущиеДанные.Редактирует;
		РаботаСФайламиКлиент.ЗакончитьРедактированиеСОповещением(ПараметрыОбновленияФайла);
		
	Иначе
		
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите файл.'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Освободить(Команда)
	
	Если Элементы.ДеревоПриложений.ТекущиеДанные.Приложение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Элементы.ДеревоПриложений.ТекущиеДанные.Приложение) = Тип("СправочникСсылка.Файлы") Тогда
		
		Обработчик = Новый ОписаниеОповещения("ОбновитьВОбработкеОповещения", ЭтотОбъект, Новый Структура);
		
		ПараметрыОсвобожденияФайла = РаботаСФайламиКлиент.ПараметрыОсвобожденияФайла(
			Обработчик,
			Элементы.ДеревоПриложений.ТекущиеДанные.Приложение);
		ПараметрыОсвобожденияФайла.ХранитьВерсии = Элементы.ДеревоПриложений.ТекущиеДанные.ХранитьВерсии;
		ПараметрыОсвобожденияФайла.РедактируетТекущийПользователь = Элементы.ДеревоПриложений.ТекущиеДанные.РедактируетТекущийПользователь;
		ПараметрыОсвобожденияФайла.Редактирует = Элементы.ДеревоПриложений.ТекущиеДанные.Редактирует;
		ПараметрыОсвобожденияФайла.УникальныйИдентификатор = УникальныйИдентификатор;
		РаботаСФайламиКлиент.ОсвободитьФайлСОповещением(ПараметрыОсвобожденияФайла);
		
	Иначе
		
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите файл.'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыОбновитьИзФайлаНаДиске(Команда)
	
	Если Элементы.ДеревоПриложений.ТекущиеДанные.Приложение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Элементы.ДеревоПриложений.ТекущиеДанные.Приложение) = Тип("СправочникСсылка.Файлы") Тогда
		
		Обработчик = Новый ОписаниеОповещения("ОбновитьВОбработкеОповещения", ЭтотОбъект, Новый Структура);
		
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(Элементы.ДеревоПриложений.ТекущиеДанные.Приложение);
		
		РаботаСФайламиКлиент.ОбновитьИзФайлаНаДиске(
			Обработчик,
			ДанныеФайла,
			УникальныйИдентификатор);
		
	Иначе
		
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите файл.'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыОткрытьКарточку(Команда)
	
	ДанныеСтроки = Элементы.ДеревоПриложений.ТекущиеДанные;
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеСтроки.ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Задача") Тогда
		РаботаСЗадачамиКлиент.ОткрытьКарточкуАвтораЗадачи(ТекущаяЗадача);
	Иначе
		РаботаСЗадачамиКлиент.ПоказатьПриложение(ДанныеСтроки.Приложение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыВставитьКартинкуИзБуфера(Команда)
	
	ДанныеСтроки = Элементы.ДеревоПриложений.ТекущиеДанные;
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РольФайлаИПриложение = РольФайлаИПриложение(ДанныеСтроки);
	
	ОбщегоНазначенияДокументооборотКлиент.ДобавитьФайл(
		ЭтотОбъект,
		РольФайлаИПриложение.Приложение,
		РольФайлаИПриложение.РольФайла,
		Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыДобавить(Команда)
	
	ДанныеСтроки = Элементы.ДеревоПриложений.ТекущиеДанные;
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеСтроки.РольПредмета = ПредопределенноеЗначение("Перечисление.РолиПредметов.Заполняемый")
		И Не ЗначениеЗаполнено(ДанныеСтроки.Приложение)
		И ЗначениеЗаполнено(ДанныеСтроки.ИмяПредмета) Тогда
		
		РаботаСЗадачамиКлиент.ДобавитьПриложениеЗадачи(
			ТекущееДействиеЗадачи,
			ДанныеСтроки.ИмяПредмета,
			ДанныеСтроки.Приложение);
		
	Иначе
		
		РольФайлаИПриложение = РольФайлаИПриложение(ДанныеСтроки);
		
		ОбщегоНазначенияДокументооборотКлиент.ДобавитьФайл(
			ЭтотОбъект,
			РольФайлаИПриложение.Приложение,
			РольФайлаИПриложение.РольФайла,
			Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыУдалить(Команда)
	
	ДанныеСтроки = Элементы.ДеревоПриложений.ТекущиеДанные;
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеСтроки.РольПредмета = ПредопределенноеЗначение("Перечисление.РолиПредметов.Заполняемый")
		И ЗначениеЗаполнено(ДанныеСтроки.Приложение)
		И ЗначениеЗаполнено(ДанныеСтроки.ИмяПредмета) Тогда
		
		РаботаСЗадачамиКлиент.УдалитьПриложениеЗадачи(
			ТекущееДействиеЗадачи,
			ДанныеСтроки.ИмяПредмета);
		
	ИначеЕсли ДанныеСтроки.ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Файл") Тогда
		
		ОбщегоНазначенияДокументооборотКлиент.УдалитьФайл(ДанныеСтроки.Приложение);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыРедактировать(Команда)
	
	Если Элементы.ДеревоПриложений.ТекущиеДанные.Приложение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Элементы.ДеревоПриложений.ТекущиеДанные.Приложение) = Тип("СправочникСсылка.Файлы") Тогда
		
		Обработчик = Новый ОписаниеОповещения("ОбновитьВОбработкеОповещения", ЭтотОбъект, Новый Структура);
		
		РаботаСФайламиКлиент.РедактироватьФайлПоСсылке(
			Обработчик,
			Элементы.ДеревоПриложений.ТекущиеДанные.Приложение);
		
	Иначе
		
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите файл.'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыСохранитьКак(Команда)
	
	Если Элементы.ДеревоПриложений.ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущаяСсылка = Элементы.ДеревоПриложений.ТекущиеДанные.Приложение;
	Если Элементы.ДеревоПриложений.ВыделенныеСтроки.Количество() > 1 Тогда
		СписокФайловДляВыгрузки = Новый СписокЗначений;
		Для Каждого ВыбраннаяСтрока Из Элементы.ДеревоПриложений.ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.ДеревоПриложений.ДанныеСтроки(ВыбраннаяСтрока);
			Если ТипЗнч(ДанныеСтроки.Приложение) = Тип("СправочникСсылка.Файлы") Тогда
				СписокФайловДляВыгрузки.Добавить(ДанныеСтроки.Приложение);
			КонецЕсли;
		КонецЦикла;
		
		Если СписокФайловДляВыгрузки.Количество() > 1 Тогда
			РаботаСФайламиКлиент.СохранитьФайлыКак(СписокФайловДляВыгрузки, УникальныйИдентификатор);
		ИначеЕсли СписокФайловДляВыгрузки.Количество() = 1 Тогда
			ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляСохранения(СписокФайловДляВыгрузки[0].Значение, Неопределено, УникальныйИдентификатор);
			КомандыРаботыСФайламиКлиент.СохранитьКак(ДанныеФайла, УникальныйИдентификатор);
		Иначе
			ПоказатьПредупреждение(,НСтр("ru = 'Выберите файл.'"));
		КонецЕсли;
	Иначе
		Если ТипЗнч(ТекущаяСсылка) = Тип("СправочникСсылка.Файлы") Тогда
			ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляСохранения(ТекущаяСсылка, Неопределено, УникальныйИдентификатор);
			КомандыРаботыСФайламиКлиент.СохранитьКак(ДанныеФайла, УникальныйИдентификатор);
		Иначе
			ПоказатьПредупреждение(,НСтр("ru = 'Выберите файл.'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ФайлыРезультатаОбновитьИзФайлаНаДиске(Команда)
	
	ДанныеСтроки = Элементы.ПриложенияРезультата.ТекущиеДанные;
	
	ФайлыРезультатаОбновитьИзФайлаНаДискеСтроку(ДанныеСтроки)
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыРезультатаОбновитьИзФайлаНаДиске1(Команда)
	
	ДанныеСтроки = ПриложенияРезультата[0];
	
	ФайлыРезультатаОбновитьИзФайлаНаДискеСтроку(ДанныеСтроки)
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыРезультатаОбновитьИзФайлаНаДиске2(Команда)
	
	ДанныеСтроки = ПриложенияРезультата[1];
	
	ФайлыРезультатаОбновитьИзФайлаНаДискеСтроку(ДанныеСтроки)
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыРезультатаОбновитьИзФайлаНаДиске3(Команда)
	
	ДанныеСтроки = ПриложенияРезультата[2];
	
	ФайлыРезультатаОбновитьИзФайлаНаДискеСтроку(ДанныеСтроки)
	
КонецПроцедуры

&НаКлиенте
Процедура ПриложенияРезультатаУдалитьСтроку1(Команда)
	
	МассивПриложений = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
		ПриложенияРезультата[0].Приложение);
	
	РаботаСЗадачамиКлиент.УдалитьПриложенияРезультата(ТекущееДействиеЗадачи, МассивПриложений);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриложенияРезультатаУдалитьСтроку2(Команда)
	
	МассивПриложений = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
		ПриложенияРезультата[1].Приложение);
	
	РаботаСЗадачамиКлиент.УдалитьПриложенияРезультата(ТекущееДействиеЗадачи, МассивПриложений);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриложенияРезультатаУдалитьСтроку3(Команда)
	
	МассивПриложений = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
		ПриложенияРезультата[2].Приложение);
	
	РаботаСЗадачамиКлиент.УдалитьПриложенияРезультата(ТекущееДействиеЗадачи, МассивПриложений);
	
КонецПроцедуры

&НаКлиенте
Процедура РаспознаваниеРечи(Команда)
	
	Если РаспознаваниеРечи_ВыполняетсяРаспознавание Тогда
		РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
		Если НужноСохранитьРезультатДействия Тогда
			СохранитьРезультатДействия();
		КонецЕсли;
	Иначе
		РаспознаваниеРечи_НачатьРаспознавание();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Пожаловаться(Команда)
	
	РаботаСРечьюЖурналированиеКлиент.СформироватьПисьмо(УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыРаспознавания(Команда)
	
	ТекущиеПараметры = РаспознаваниеРечи_ПараметрыРаспознавания;
	ПараметрыРаспознаванияРечиКлиент.ПоказатьВыборПараметровРаспознаванияРечи(ЭтотОбъект, ТекущиеПараметры, 
		Новый ОписаниеОповещения("ПриВыбореПараметровРаспознаванияРечи", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	НомерПорции = НомерПорции - 1;
	ЧастьВыбор(НомерПорции);
	
КонецПроцедуры

&НаКлиенте
Процедура Вперед(Команда)
	
	НомерПорции = НомерПорции + 1;
	ЧастьВыбор(НомерПорции);
	
КонецПроцедуры       

&НаКлиенте
Процедура Страница1(Команда)
	
	СтраницаВыбор(Команда);
	
КонецПроцедуры	

&НаКлиенте
Процедура Страница2(Команда)      
	
	СтраницаВыбор(Команда);
	
КонецПроцедуры	

&НаКлиенте
Процедура Страница3(Команда)
	
	СтраницаВыбор(Команда);
	
КонецПроцедуры	

&НаКлиенте
Процедура Страница4(Команда)
	
	СтраницаВыбор(Команда);
	
КонецПроцедуры	

&НаКлиенте         
Процедура Страница5(Команда)
	
	СтраницаВыбор(Команда);
	
КонецПроцедуры	      

&НаКлиенте
Процедура Страница6(Команда)
	
	СтраницаВыбор(Команда);
	
КонецПроцедуры	  

&НаКлиенте
Процедура Страница7(Команда)
	
	СтраницаВыбор(Команда);
	
КонецПроцедуры	 

&НаКлиенте
Процедура Страница8(Команда)
	
	СтраницаВыбор(Команда);
	
КонецПроцедуры	   

&НаКлиенте
Процедура Страница9(Команда)
	
	СтраницаВыбор(Команда);
	
КонецПроцедуры	

&НаКлиенте
Процедура СтраницаВыбор(Команда)
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("СтраницаВыборЗавершение", ЭтотОбъект);
	ОбзорФайловКлиент.ВыбратьСтраницуДинамическогоСписка(
		ЭтотОбъект,
		Команда,
		НомерПорции,
		ВсегоПорцийПредпросмотра,
		ОповещениеОЗавершении);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ЭтоПриложениеТекущейЗадачи(Приложение)
	
	ЭтоПриложениеТекущейЗадачи = Ложь;
	
	Для Каждого СтрокаДерева Из ДеревоПриложений.ПолучитьЭлементы() Цикл
		
		Если СтрокаДерева.ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Приложение")
			И СтрокаДерева.Приложение = Приложение Тогда
			ЭтоПриложениеТекущейЗадачи = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЭтоПриложениеТекущейЗадачи;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьДействиеЗадачиНаКлиентеВФорме(РезультатДействия)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("ДействиеЗадачиВыполнениеИзФормыОбъекта");
	
	ОтключитьОбработчикОжидания("ВзятьВРаботуСВыборомИсполнителя");
	ДействиеДляОтложенногоВзятияВРаботу = Неопределено;
	
	// РаспознаваниеРечи
	РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
	РаботаСРечьюЖурналированиеКлиент.ОчиститьЖурнал(УникальныйИдентификатор);
	// Конец РаспознаваниеРечи
	
	Если НужноСохранитьРезультатДействия Тогда
		РезультатДействияСохранен = СохранитьРезультатДействия();
		Если Не РезультатДействияСохранен Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РезультатДействия) Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Не указан результат действия %1 (%2).'"),
			РезультатДействия,
			ТипЗнч(РезультатДействия));
	КонецЕсли;
	
	ВерсииДанных = Новый Соответствие;
	ВерсииДанных[ТекущееДействиеЗадачи] = ТекущаяВерсияДанныхДействияЗадачи;
	
	РаботаСЗадачамиКлиент.ВыполнитьДействиеЗадачи(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущееДействиеЗадачи),
		РезультатДействия,
		ЭтотОбъект,
		ВерсииДанных);
	
КонецПроцедуры

//@skip-check export-method-in-command-form-module
//@skip-check doc-comment-parameter-section
&НаСервере
Процедура ДобавитьВОтчетИОбновитьФорму(ПараметрыОтчета, ПараметрыОповещения) Экспорт
	
	ПереключитьХронометражНеМеняяПодсказку = Новый Структура("Подсказка");
	УчетВремени.ДобавитьВОтчетИОбновитьФорму(
		ПараметрыОтчета, 
		ПараметрыОповещения,
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ПереключитьХронометражНеМеняяПодсказку,
		Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьМассивФайловРезультата(МассивСсылокФайлов)
	
	ДобавитьФайлыВПриложенияРезультата(ТекущееДействиеЗадачи, МассивСсылокФайлов);
	
	ОбновитьНаКлиенте();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьФайлыВПриложенияРезультата(Действие, МассивСсылокФайлов)
	
	ДействиеОбъект = Действие.ПолучитьОбъект();
	
	Для Каждого Файл Из МассивСсылокФайлов Цикл
		
		Если ДействиеОбъект.Приложения.Найти(Файл, "Приложение") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаПриложения = ДействиеОбъект.Приложения.Добавить();
		СтрокаПриложения.Приложение = Файл;
		
	КонецЦикла;
	
	Если ДействиеОбъект.Модифицированность() Тогда
		ДействиеОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЕстьЗанятыеФайлы()
	
	#Если ВебКлиент Тогда
		Возврат Ложь;
	#КонецЕсли	
	
	Для Каждого Стр Из ДеревоПриложений.ПолучитьЭлементы() Цикл
		
		Если Стр.РедактируетТекущийПользователь Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Функция ЕстьЗанятыеФайлыРезультата()
	
	#Если ВебКлиент Тогда
		Возврат Ложь;
	#КонецЕсли
	
	Для Каждого Стр Из ПриложенияРезультата Цикл 
		
		Если Стр.РедактируетТекущийПользователь Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Процедура ЗакончитьРедактированиеФайлаРезультатаСтроки(ДанныеСтроки)
	
	Если ДанныеСтроки = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыОбновленияФайла = РаботаСФайламиКлиент.ПараметрыОбновленияФайла(
		Неопределено,
		ДанныеСтроки.Приложение,
		УникальныйИдентификатор);
	ПараметрыОбновленияФайла.ХранитьВерсии = Ложь;
	ПараметрыОбновленияФайла.РедактируетТекущийПользователь =
		ДанныеСтроки.РедактируетТекущийПользователь;
	ПараметрыОбновленияФайла.Редактирует = ДанныеСтроки.Редактирует;
	РаботаСФайламиКлиент.ЗакончитьРедактированиеСОповещением(ПараметрыОбновленияФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНаКлиентеОтложенно()
	
	ПодключитьОбработчикОжидания("ОбновитьНаКлиенте", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНаКлиенте() Экспорт
	
	Если Не ВводДоступен() Тогда
		ПодключитьОбработчикОжидания("ОбновитьНаКлиенте", 1, Истина);
		Возврат;
	КонецЕсли;
	
	Если НужноСохранитьРезультатДействия Тогда
		СохранитьРезультатДействия();
	КонецЕсли;
	
	Если Не ОбновитьНаСервере() Тогда
		Если Открыта() Тогда
			Закрыть();
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	УстановитьДоступностьКомандПриложений();
	
КонецПроцедуры

&НаСервере
Функция ОбновитьНаСервере()
	
	СсылкаДоступнаТекущемуПользователю =
		УправлениеДоступомДокументооборот.СсылкаДоступнаТекущемуПользователю(ТекущееДействиеЗадачи);
	Если Не СсылкаДоступнаТекущемуПользователю Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КэшиНаВремяВызова.ИнициализироватьКэшЗадачаОбластьПросмотра(ТекущееДействиеЗадачи);
	
	ПометкаУдаленияДействия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ТекущееДействиеЗадачи, "ПометкаУдаления");
	
	ЗадачаОбъект = ТекущаяЗадача.ПолучитьОбъект();
	ОписаниеHTMLЗадачи = ЗадачаОбъект.ОписаниеHTML(ТекущееДействиеЗадачи, Ложь);
	
	Если ЭтоМобильныйКлиент Тогда
		МК_КлиентСервер.АдаптироватьHtmlПодЭкранМобильногоПриНеобходимости(ОписаниеHTMLЗадачи);
	КонецЕсли;
	
	ОбновитьПодзадачи();
	ОбновитьВидимостьЭлементов();
	ОбновитьЖизненныйЦикл(Ложь);
	ОбновитьОбластьДействия();
	ОбновитьЭлементыДополнительныхРеквизитов();
	ОбновитьИнструкцию(Ложь);
	ОбновитьСоисполнителей();
	
	// Приложения.
	ПараметрыОбновления = РаботаСЗадачамиКлиентСервер.НовыйПараметрыОбновленияДереваПриложений();
	ПараметрыОбновления.РеквизитДерева = ДеревоПриложений;
	ПараметрыОбновления.ЭлементДерева = Элементы.ДеревоПриложений;
	ПараметрыОбновления.Задача = ТекущаяЗадача;
	ПараметрыОбновления.ДействиеЗадачи = ТекущееДействиеЗадачи;
	
	РаботаСЗадачами.ОбновитьДеревоПриложений(ПараметрыОбновления);
	
	ТекущаяВерсияДанныхДействияЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ТекущееДействиеЗадачи, "ВерсияДанных");
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(ТекущийИсточникДействия) Тогда
		ТекущаяВерсияДанныхИсточникаЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ТекущийИсточникДействия, "ВерсияДанных");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьВОбработкеОповещения(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьНаКлиенте();
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ДанныеФайла")
		И ТипЗнч(ДополнительныеПараметры.ДанныеФайла) = Тип("Структура")
		И ДополнительныеПараметры.ДанныеФайла.Свойство("РедактируетТекущийПользователь") 
		И ДополнительныеПараметры.ДанныеФайла.РедактируетТекущийПользователь Тогда
		ПоказатьОбзорТекущегоФайла();
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьЭлементов()
	
	ПриложениеЯвляетсяВебКлиентом = ОбщегоНазначенияДокументооборот.ПриложениеЯвляетсяВебКлиентом();
	
	// Режим "Тонкий клиент" Windows.
	Элементы.ДобавитьКартинкуИзБуфераКОтчету.Видимость = 
		Не ПриложениеЯвляетсяВебКлиентом И ОбщегоНазначения.ЭтоWindowsКлиент();
	
	Если ЭтоМобильныйКлиент Тогда
		Элементы.ДобавитьКартинкуИзБуфераКОтчету.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЖизненныйЦиклКлиент()
	
	ТекущиеДанные = Элементы.ДеревоПриложений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено
		Или ТекущиеДанные.ТипСтроки <> ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.ИсторияВыполнения") Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьЖизненныйЦикл(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЖизненныйЦикл(АктивироватьСтраницу)
	
	Если Элементы.СтраницыПросмотра.ТекущаяСтраница <> Элементы.СтраницаИстория
		И Не АктивироватьСтраницу 
		И Не ЭтоМобильныйКлиент Тогда
		Возврат;
	КонецЕсли;
	
	СхемаЖизненногоЦикла = РаботаСЗадачами.СхемаЖизненногоЦикла(ТекущаяЗадача);
	
	// Обновление жизненного цикла.
	РаботаСЗадачами.ОбновитьЖизненныйЦикл(
		ЭтотОбъект,
		Элементы.ГруппаЖизненныйЦикл,
		Элементы.СтраницыЖизненныйЦиклПрокрутка,
		ДанныеЖизненногоЦикла,
		СхемаЖизненногоЦикла);
	
	Если АктивироватьСтраницу Тогда
		Элементы.СтраницыПросмотра.ТекущаяСтраница = Элементы.СтраницаИстория;
	КонецЕсли;
	
	Если ЭтоМобильныйКлиент Тогда
		Элементы.МК_КнопкаСтраницаИстория.Видимость = Элементы.СтраницаИстория.Видимость;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОбзорПриложенияКлиент() 
	
	ТекущиеДанные = Элементы.ДеревоПриложений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено
		Или ТекущиеДанные.ТипСтроки <> ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Приложение") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОбзораОбъекта = ОбзорОбъектовКлиент.ДанныеОбзораОбъекта(
		ТекущиеДанные.Приложение,
		УникальныйИдентификатор);
	
	Если ДанныеОбзораОбъекта.ЕстьТекстHTML Тогда
		
		ОписаниеHTMLПриложения = ДанныеОбзораОбъекта.ТекстHTML;
		
		Элементы.СтраницыПросмотра.ТекущаяСтраница = Элементы.СтраницаОбзорПриложения;
		
	Иначе
		
		Элементы.СтраницыПросмотра.ТекущаяСтраница = Элементы.СтраницаОсновное;
		
	КонецЕсли;
	
	Если ЭтоМобильныйКлиент Тогда
		МК_КлиентСервер.АдаптироватьHtmlПодЭкранМобильногоПриНеобходимости(ОписаниеHTMLПриложения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнструкциюКлиент()
	
	ТекущиеДанные = Элементы.ДеревоПриложений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено
		Или ТекущиеДанные.ТипСтроки <> ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Инструкция") Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьИнструкцию(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнструкцию(АктивироватьСтраницу)
	
	Если Элементы.СтраницыПросмотра.ТекущаяСтраница <> Элементы.СтраницаИнструкция
		И Не АктивироватьСтраницу
		И Не ЭтоМобильныйКлиент Тогда
		Возврат;
	КонецЕсли;
	
	Инструкция = РаботаСЗадачами.ОписаниеHTMLИнструкции(ТекущееДействиеЗадачи);
	
	Если ЭтоМобильныйКлиент Тогда
		Элементы.СтраницаИнструкция.Видимость = ЗначениеЗаполнено(Инструкция);
		МК_КлиентСервер.АдаптироватьHtmlПодЭкранМобильногоПриНеобходимости(Инструкция);
		Элементы.МК_КнопкаСтраницаИнструкция.Видимость = Элементы.СтраницаИнструкция.Видимость;
	КонецЕсли;
	
	Если АктивироватьСтраницу Тогда
		Элементы.СтраницыПросмотра.ТекущаяСтраница = Элементы.СтраницаИнструкция;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСоисполнителей()
	
	ДанныеДереваСоисполнителей = РаботаСЗадачами.ДанныеДереваСоисполнителей(ТекущаяЗадача, ТекущееДействиеЗадачи);
	РаботаСЗадачамиКлиентСервер.ОбновитьДерево(Соисполнители, Элементы.Соисполнители, ДанныеДереваСоисполнителей);
	
	Элементы.Соисполнители.Видимость = Соисполнители.ПолучитьЭлементы().Количество() > 0;
	
	Если ЭтоМобильныйКлиент Тогда
		Элементы.МК_КнопкаСтраницаСоисполнители.Видимость = Элементы.Соисполнители.Видимость;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОбластьДействия()
	
	ОбластьДействия = РаботаСЗадачамиКлиентСервер.НоваяОбластьДействия();
	ОбластьДействия.РезультатДействияТекстом = Элементы.РезультатДействияТекстом;
	ОбластьДействия.РезультатДействияТекстомКнопкаВыбора = Элементы.РезультатДействияТекстомКнопкаВыбора;
	ОбластьДействия.ПриложенияРезультата = Элементы.ПриложенияРезультата;
	ОбластьДействия.ГруппаКомандыПриложенийРезультата = Элементы.ГруппаКомандыПриложенийРезультата;
	ОбластьДействия.ВыбратьШаблонДляВыполненияЗадачи = Элементы.ВыбратьШаблонДляВыполненияЗадачи;
	ОбластьДействия.ОтменитьВыполнение = Элементы.ОтменитьВыполнение;
	ОбластьДействия.ВзятьВРаботу = Элементы.ВзятьВРаботу;
	ОбластьДействия.МаксимальнаяДлинаОбщая = 1000;
	ОбластьДействия.ОтменитьВзятиеВРаботу = Элементы.ДокументДействиеЗадачиОтменитьВзятиеВРаботу;
	ОбластьДействия.ПодменюФлаги = ?(ЗначениеЗаполнено(ТекущееДействиеЗадачи),
		Элементы.ФормаПодменюФлагиДействия,
		Неопределено);
	ОбластьДействия.Перенаправить = Элементы.ДокументДействиеЗадачиПеренаправить;
	ОбластьДействия.ДокументЗадачаСоздатьПодзадачу = Элементы.ДокументЗадачаСоздатьПодзадачу;
	ОбластьДействия.СоздатьПодзадачу = Элементы.СоздатьПодзадачу;
	ОбластьДействия.ФормаДобавитьУчастников = Элементы.ФормаДобавитьУчастников;
	ОбластьДействия.КомандаДобавитьУчастников = Элементы.КомандаДобавитьУчастников;
	ОбластьДействия.ГруппаОбъектИзДругойСистемы = Элементы.ГруппаОбъектИзДругойСистемы;
	ОбластьДействия.СогласоватьПереносСрока = Элементы.ЗадачаЗадачаИсполнителяСогласоватьПереносСрока;
	ОбластьДействия.СтрокаПриложенияРезультата1 =
		Элементы.СтрокаПриложенияРезультата1;
	ОбластьДействия.ПриложенияРезультатаПриложение1 =
		Элементы.ПриложенияРезультатаПриложение1;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиОткрытьПриложениеРезультата1 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюКартинкиОткрытьПриложениеРезультата1;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиУдалить1 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюКартинкиУдалить1;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиРедактироватьФайлРезультата1 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюКартинкиРедактироватьФайлРезультата1;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиЗакончитьРедактированиеФайла1 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюКартинкиЗакончитьРедактированиеФайла1;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиОсвободитьПриложениеРезультата1 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюКартинкиОсвободитьПриложениеРезультата1;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиОбновитьИзФайлаНаДискеФайлРезультата1 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюКартинкиОбновитьИзФайлаНаДискеФайлРезультата1;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиСохранитьКакФайлРезультата1 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюКартинкиСохранитьКакФайлРезультата1;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОткрытьПриложениеРезультата1 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОткрытьПриложениеРезультата1;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаУдалить1 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюЗаголовкаУдалить1;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаРедактироватьФайлРезультата1 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюЗаголовкаРедактироватьФайлРезультата1;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаЗакончитьРедактированиеФайла1 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюЗаголовкаЗакончитьРедактированиеФайла1;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОсвободитьПриложениеРезультата1 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОсвободитьПриложениеРезультата1;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОбновитьИзФайлаНаДискеФайл1 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОбновитьИзФайлаНаДискеФайл1;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаСохранитьКакФайлРезультата1 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюЗаголовкаСохранитьКакФайлРезультата1;
	ОбластьДействия.СтрокаПриложенияРезультата2 =
		Элементы.СтрокаПриложенияРезультата2;
	ОбластьДействия.ПриложенияРезультатаПриложение2 =
		Элементы.ПриложенияРезультатаПриложение2;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиОткрытьПриложениеРезультата2 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюКартинкиОткрытьПриложениеРезультата2;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиУдалить2 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюКартинкиУдалить2;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиРедактироватьФайлРезультата2 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюКартинкиРедактироватьФайлРезультата2;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиЗакончитьРедактированиеФайла2 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюКартинкиЗакончитьРедактированиеФайла2;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиОсвободитьПриложениеРезультата2 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюКартинкиОсвободитьПриложениеРезультата2;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиОбновитьИзФайлаНаДискеФайлРезультата2 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюКартинкиОбновитьИзФайлаНаДискеФайлРезультата2;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиСохранитьКакФайлРезультата2 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюКартинкиСохранитьКакФайлРезультата2;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОткрытьПриложениеРезультата2 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОткрытьПриложениеРезультата2;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаУдалить2 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюЗаголовкаУдалить2;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаРедактироватьФайлРезультата2 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюЗаголовкаРедактироватьФайлРезультата2;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаЗакончитьРедактированиеФайла2 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюЗаголовкаЗакончитьРедактированиеФайла2;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОсвободитьПриложениеРезультата2 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОсвободитьПриложениеРезультата2;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОбновитьИзФайлаНаДискеФайл2 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОбновитьИзФайлаНаДискеФайл2;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаСохранитьКакФайлРезультата2 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюЗаголовкаСохранитьКакФайлРезультата2;
	ОбластьДействия.СтрокаПриложенияРезультата3 =
		Элементы.СтрокаПриложенияРезультата3;
	ОбластьДействия.ПриложенияРезультатаПриложение3 =
		Элементы.ПриложенияРезультатаПриложение3;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиОткрытьПриложениеРезультата3 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюКартинкиОткрытьПриложениеРезультата3;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиУдалить3 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюКартинкиУдалить3;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиРедактироватьФайлРезультата3 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюКартинкиРедактироватьФайлРезультата3;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиЗакончитьРедактированиеФайла3 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюКартинкиЗакончитьРедактированиеФайла3;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиОсвободитьПриложениеРезультата3 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюКартинкиОсвободитьПриложениеРезультата3;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиОбновитьИзФайлаНаДискеФайлРезультата3 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюКартинкиОбновитьИзФайлаНаДискеФайлРезультата3;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиСохранитьКакФайлРезультата3 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюКартинкиСохранитьКакФайлРезультата3;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОткрытьПриложениеРезультата3 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОткрытьПриложениеРезультата3;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаУдалить3 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюЗаголовкаУдалить3;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаРедактироватьФайлРезультата3 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюЗаголовкаРедактироватьФайлРезультата3;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаЗакончитьРедактированиеФайла3 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюЗаголовкаЗакончитьРедактированиеФайла3;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОсвободитьПриложениеРезультата3 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОсвободитьПриложениеРезультата3;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОбновитьИзФайлаНаДискеФайл3 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОбновитьИзФайлаНаДискеФайл3;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаСохранитьКакФайлРезультата3 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюЗаголовкаСохранитьКакФайлРезультата3;
	
	ВыделенныеДействия = Новый Массив;
	Если ЗначениеЗаполнено(ТекущееДействиеЗадачи) Тогда
		ВыделенныеДействия.Добавить(ТекущееДействиеЗадачи);
	КонецЕсли;
	
	ДанныеОбластиДействия = РаботаСЗадачами.ДанныеОбластиДействия(
		ТекущееДействиеЗадачи,
		ВыделенныеДействия,
		ТекущаяЗадача,
		ОбластьДействия.МаксимальнаяДлинаОбщая);
	ЗначенияРеквизитовОбласти = РаботаСЗадачамиКлиентСервер.ОбновитьОбластьДействия(
		ОбластьДействия,
		ДанныеОбластиДействия);
	РезультатДействияТекстом = ЗначенияРеквизитовОбласти.РезультатДействияТекстом;
	ПриложенияРезультата.Очистить();
	Для Каждого СтруктураПриложения Из ЗначенияРеквизитовОбласти.ПриложенияРезультата Цикл
		СтрокаПриложения = ПриложенияРезультата.Добавить();
		СтрокаПриложения.Приложение = СтруктураПриложения.Приложение;
		СтрокаПриложения.ИндексКартинки = СтруктураПриложения.ИндексКартинки;
		СтрокаПриложения.РедактируетТекущийПользователь = СтруктураПриложения.РедактируетТекущийПользователь;
		СтрокаПриложения.Редактирует = СтруктураПриложения.Редактирует;
	КонецЦикла;
	ДействиеОбработки = ЗначенияРеквизитовОбласти.ДействиеОбработки;
	ПриложенияРезультатаИзменятьСоставСтрок = ЗначенияРеквизитовОбласти.ПриложенияРезультатаИзменятьСоставСтрок;
	
	ШаблоныДляВыбора.Очистить();
	Для Каждого СтрокаШаблона Из ЗначенияРеквизитовОбласти.ШаблоныДляВыбора Цикл
		ШаблоныДляВыбора.Добавить(СтрокаШаблона.Значение, СтрокаШаблона.Представление);
	КонецЦикла;
	
	Элементы.ГруппаРезультатДействияТекстом.Видимость = Элементы.РезультатДействияТекстом.Видимость;
	Элементы.ФормаПодменюФлагиДействия.Видимость = ЗначениеЗаполнено(ТекущееДействиеЗадачи);
	Элементы.ГруппаРезультатДействияТекстомОтступКоманд.Видимость =
		Не Элементы.МК_ОтступКомандРезультатДействияТекстом.Видимость
		И Не Элементы.РезультатДействияТекстомКнопкаВыбора.Видимость;
	
	// Команды выполнения.
	РаботаСЗадачамиКлиентСервер.ОбновитьКомандыВыполнения(
		Элементы,
		ДанныеКомандВыполнения,
		ДанныеОбластиДействия.ДанныеВариантовВыполненияЗадачи);
	
	Если ЭтоМобильныйКлиент Тогда
		
		Элементы.МК_ЗаполнитьПоШаблону.Видимость = Элементы.РезультатДействияТекстомКнопкаВыбора.Видимость;
		МК_ОбновитьКнопкиВыполнения();
		МК_НастроитьПоказатьСкрытьПриложенияРезультата(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПодзадачи()
	
	ДанныеДереваПодзадач = РаботаСЗадачами.ДанныеДереваПодзадач(ТекущаяЗадача, ТекущееДействиеЗадачи);
	РаботаСЗадачамиКлиентСервер.ОбновитьДерево(Подзадачи, Элементы.Подзадачи, ДанныеДереваПодзадач);
	
	СтрокиПодзадач = Подзадачи.ПолучитьЭлементы();
	КоличествоСтрокПодзадач = СтрокиПодзадач.Количество();
	Элементы.СтраницаПодзадачи.Видимость = КоличествоСтрокПодзадач > 0;
		
	Если ЭтоМобильныйКлиент Тогда
		Элементы.МК_КнопкаСтраницаПодзадачи.Видимость = Элементы.СтраницаПодзадачи.Видимость;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПоступившиеОбновления()
	
	ОписаниеПоступившихОбновленийЗадачи = РаботаСЗадачами.ОписаниеПоступившихОбновленийЗадачи(ТекущееДействиеЗадачи);
	ЕстьПоступившиеОбновления = ЗначениеЗаполнено(ОписаниеПоступившихОбновленийЗадачи);
	
	Если ЕстьПоступившиеОбновления Тогда
		РаботаСЗадачами.ОзнакомитьсяСОбновлениямиЗадач(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущееДействиеЗадачи));
	КонецЕсли;
	
КонецПроцедуры

//@skip-check export-method-in-command-form-module
&НаСервере
Процедура ОтключитьХронометражСервер() Экспорт
	
	Если Не ЗначениеЗаполнено(ТекущееДействиеЗадачи) Тогда
		Возврат;
	КонецЕсли;
	
	ПереключитьХронометражНеМеняяПодсказку = Новый Структура("Подсказка");
	УчетВремени.ОтключитьХронометражСервер(
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ТекущееДействиеЗадачи,
		ПереключитьХронометражНеМеняяПодсказку,
		Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуПриложенияРезультатаСтроки(ДанныеСтроки)
	
	Если ДанныеСтроки = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РаботаСЗадачамиКлиент.ПоказатьПриложение(ДанныеСтроки.Приложение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПриложениеРезультатаСтроки(ДанныеСтроки)
	
	Если ДанныеСтроки = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РаботаСЗадачамиКлиент.ПросмотретьПриложение(
		ДанныеСтроки.Приложение,
		УникальныйИдентификатор,
		ПредыдущийАдресФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьХронометражПродолжение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат <> Неопределено Тогда
		
		ДобавитьВОтчетИОбновитьФорму(
			Результат,
			ДополнительныеПараметры.ПараметрыОповещения);
		
		УчетВремениКлиент.ПоказатьОповещение(
			ДополнительныеПараметры.ПараметрыОповещения,
			ВключенХронометраж,
			ДополнительныеПараметры.Объект);
		
	Иначе
		
		ОтключитьХронометражСервер();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПереключитьХронометражНаСервере(ПараметрыОповещения)
	
	Если Не ЗначениеЗаполнено(ТекущееДействиеЗадачи) Тогда
		Возврат;
	КонецЕсли;
	
	ПереключитьХронометражНеМеняяПодсказку = Новый Структура("Подсказка");
	УчетВремени.ПереключитьХронометражСервер(
		ПараметрыОповещения,
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ТекущееДействиеЗадачи,
		ВидыРабот,
		ПереключитьХронометражНеМеняяПодсказку,
		Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Команда(Команда)
	
	Если СтрНачинаетсяС(Команда.Имя, РаботаСЗадачамиКлиентСервер.ПрефиксИмениКомандыРезультата()) Тогда
		
		ИдентификаторРезультата = РаботаСЗадачамиКлиентСервер.ИдентификаторПоИмениКоманды(Команда.Имя);
		РезультатДействияЗадачи =
			РаботаСЗадачамиВызовСервера.РезультатДействияЗадачиПоИдентификатору(ИдентификаторРезультата);
		ВыполнитьДействиеЗадачиНаКлиентеВФорме(РезультатДействияЗадачи);
		
	ИначеЕсли СтрНачинаетсяС(Команда.Имя, РаботаСЗадачамиКлиентСервер.ПрефиксИмениКомандыШаблоны()) Тогда
		
		ИдентификаторШаблона = РаботаСЗадачамиКлиентСервер.ИдентификаторПоИмениКоманды(Команда.Имя);
		ШаблонДляВыполнения =
			РаботаСЗадачамиВызовСервера.ШаблонДляВыполненияПоИдентификатору(ИдентификаторШаблона);
		ВыполнитьДействиеЗадачиПоШаблону(ШаблонДляВыполнения);
		
	Иначе
		
		РаботаСЗадачамиКлиент.ВыполнитьПодключаемуюКоманду(
			Команда,
			ТекущееДействиеЗадачи,
			ДанныеЖизненногоЦикла,
			УникальныйИдентификатор,
			ПредыдущийАдресФайла);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Нажатие(Элемент, СтандартнаяОбработка)
	
	РаботаСЗадачамиКлиент.ОбработатьНажатиеЖизненногоЦикла(
		Элемент,
		ДанныеЖизненногоЦикла,
		СтандартнаяОбработка,
		УникальныйИдентификатор,
		ПредыдущийАдресФайла,
		ТекущееДействиеЗадачи);
	
КонецПроцедуры

&НаКлиенте
Функция ПредложитьСохранитьЗанятыеФайлы()
	
	Если Не ЕстьЗанятыеФайлы() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МассивЗахваченныхФайлов = РаботаСФайламиВызовСервера.ПолучитьСписокЗанятыхФайлов(ТекущаяЗадача);
	
	СписокЗанятыеWordФайлы = РаботаСФайламиКлиент.ПолучитьЗанятыеWordФайлы(
		ТекущаяЗадача,
		УникальныйИдентификатор,
		МассивЗахваченныхФайлов);
	
	Если СписокЗанятыеWordФайлы.Количество() = 0 Тогда
		
		ДелопроизводствоКлиент.ПоместитьИзмененияФайлов(
			ТекущаяЗадача,
			УникальныйИдентификатор,
			МассивЗахваченныхФайлов);
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СтрокаФайлов = "";
	Для Каждого ИмяРасширение Из СписокЗанятыеWordФайлы Цикл
		Если Не ПустаяСтрока(СтрокаФайлов) Тогда
			СтрокаФайлов = СтрокаФайлов + Символы.ВК;
		КонецЕсли;	
		СтрокаФайлов = СтрокаФайлов + ИмяРасширение;
	КонецЦикла;	
	
	Если СписокЗанятыеWordФайлы.Количество() > 1 Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Чтобы с файлами могли работать другие пользователи, закройте файлы:
			| 
			|%1.'"),
			СтрокаФайлов);
	Иначе
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Чтобы с файлом могли работать другие пользователи, закройте файл:
			| 
			|%1.'"),
			СтрокаФайлов);
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ПредложитьСохранитьЗанятыеФайлыПослеВопроса", ЭтотОбъект);
	ПоказатьПредупреждение(Обработчик, ТекстСообщения);
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ПредложитьСохранитьЗанятыеФайлыПослеВопроса(ПараметрыВыполнения) Экспорт
	
	Если Открыта() Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПредложитьСохранитьЗанятыеФайлыРезультата()
	
	Если Не ЕстьЗанятыеФайлыРезультата() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МассивЗахваченныхФайлов = РаботаСФайламиВызовСервера.ПолучитьСписокЗанятыхФайлов(ТекущееДействиеЗадачи);
	
	СписокЗанятыеWordФайлы = РаботаСФайламиКлиент.ПолучитьЗанятыеWordФайлы(
		ТекущееДействиеЗадачи,
		УникальныйИдентификатор,
		МассивЗахваченныхФайлов);
	
	Если СписокЗанятыеWordФайлы.Количество() = 0 Тогда
		
		ДелопроизводствоКлиент.ПоместитьИзмененияФайлов(
			ТекущееДействиеЗадачи,
			УникальныйИдентификатор,
			МассивЗахваченныхФайлов);
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СтрокаФайлов = "";
	Для Каждого ИмяРасширение Из СписокЗанятыеWordФайлы Цикл
		Если Не ПустаяСтрока(СтрокаФайлов) Тогда
			СтрокаФайлов = СтрокаФайлов + Символы.ВК;
		КонецЕсли;	
		СтрокаФайлов = СтрокаФайлов + ИмяРасширение;
	КонецЦикла;	
	
	Если СписокЗанятыеWordФайлы.Количество() > 1 Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Чтобы с файлами могли работать другие пользователи, закройте файлы:
			| 
			|%1.'"),
			СтрокаФайлов);
	Иначе
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Чтобы с файлом могли работать другие пользователи, закройте файл:
			| 
			|%1.'"),
			СтрокаФайлов);
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ПредложитьСохранитьЗанятыеФайлыРезультатаПослеВопроса", ЭтотОбъект);
	ПоказатьПредупреждение(Обработчик, ТекстСообщения);
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ПредложитьСохранитьЗанятыеФайлыРезультатаПослеВопроса(ПараметрыВыполнения) Экспорт
	
	Если Открыта() Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьФайлРезультатаСтроки(ДанныеСтроки)
	
	Если ДанныеСтроки = Неопределено Тогда 
		Возврат;
	КонецЕсли;
			
	КомандыРаботыСФайламиКлиент.Редактировать(ДанныеСтроки.Приложение);
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатДействияТекстомПослеВыбораШаблонаТекста(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатДействияТекстом = ШаблоныТекстовВызовСервера.ТекстШаблона(Результат);
	РезультатСохранения = РаботаСЗадачамиКлиент.СохранитьРезультатДействия(
		ТекущееДействиеЗадачи,
		РезультатДействияТекстом,
		ТекущаяВерсияДанныхДействияЗадачи,
		Истина,
		Истина,
		ЭтотОбъект);
	
	ТекущаяВерсияДанныхДействияЗадачи = РезультатСохранения.НоваяВерсияДанных;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействиеЗадачиПослеВыбораШаблонаТекста(ВыбраннаяСтрока, ДополнительныеПараметры) Экспорт
	
	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьДействиеЗадачиПоШаблону(ВыбраннаяСтрока.Значение);
	
КонецПроцедуры

&НаСервере
Функция СохранитьДополнительныеРеквизиты()
	
	Результат = РаботаСЗадачамиКлиентСервер.НовыйРезультатСохраненияЗадачи();

	Если Не ОбщегоНазначенияДокументооборот.ВерсияДанныхАктуальна(
		ТекущийИсточникДействия, ТекущаяВерсияДанныхИсточникаЗадачи) Тогда
		
		Результат.Успешно = Ложь;
		Результат.ВерсииДанныхРазличаются = Истина;
		Возврат Результат;
		
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
	
		ТекущийИсточникДействияОбъект = ТекущийИсточникДействия.ПолучитьОбъект();
		
		УправлениеСвойствами.ПеренестиЗначенияИзРеквизитовФормыВОбъект(
			ЭтотОбъект,
			ТекущийИсточникДействияОбъект);
		
		ТекущийИсточникДействияОбъект.ДополнительныеСвойства.Вставить("ОтключитьОбновлениеЗадач", Истина);
		
		ТекущийИсточникДействияОбъект.Записать();
		
		ИнтеграцияЗадач.ОбновитьДействиеЗадачиПоЗадачеПроцесса(ТекущийИсточникДействия);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;

	ЗначениеВРеквизитФормы(ТекущийИсточникДействияОбъект, "ТекущийИсточникДействияДанные");
	
	ТекущаяВерсияДанныхИсточникаЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ТекущийИсточникДействия,
		"ВерсияДанных");
	ТекущаяВерсияДанныхДействияЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ТекущееДействиеЗадачи,
		"ВерсияДанных");
	
	Модифицированность = Ложь;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура УстановитьДоступностьКомандПриложений()
	
	ЭтоФайл = Ложь;
	ЭтоЗадача = Ложь;
	ЭтоЗаполняемоеПриложение = Ложь;
	ЭтоДругоеПриложение = Ложь;
	ЭтоРольФайла = Ложь;
	ЭтоФайлПриложения = Ложь;
	
	ДоступноИнтерактивноеИзменениеФайлов = Ложь;
	
	РедактироватьДоступность = Истина;
	ЗакончитьРедактированиеДоступность = Истина;
	ЗаполняемоеПриложениеУказано = Ложь;
	
	ТекущиеДанные = Элементы.ДеревоПриложений.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если ТипЗнч(ТекущиеДанные.Приложение) = Тип("СправочникСсылка.Файлы") Тогда
			
			Если ТекущиеДанные.РедактируетДругойПользователь
				Или ТекущиеДанные.ПодписанЭП Тогда
				РедактироватьДоступность = Ложь;
			КонецЕсли;
			
			Если Не ТекущиеДанные.РедактируетТекущийПользователь
				Или ТекущиеДанные.ПодписанЭП Тогда
				ЗакончитьРедактированиеДоступность = Ложь;
			КонецЕсли;
			
		Иначе
			
			РедактироватьДоступность = Ложь;
			ЗакончитьРедактированиеДоступность = Ложь;
			
		КонецЕсли;
		
		ЭтоФайл = ЗначениеЗаполнено(ТекущиеДанные.Приложение)
			И ТипЗнч(ТекущиеДанные.Приложение) = Тип("СправочникСсылка.Файлы");
		ЭтоДругоеПриложение = ЗначениеЗаполнено(ТекущиеДанные.Приложение)
			И ТипЗнч(ТекущиеДанные.Приложение) <> Тип("СправочникСсылка.Файлы");
		ЭтоЗадача =
			ТекущиеДанные.ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Задача");
		ЭтоЗаполняемоеПриложение =
			ТекущиеДанные.РольПредмета = ПредопределенноеЗначение("Перечисление.РолиПредметов.Заполняемый");
		ЭтоРольФайла =
			ТекущиеДанные.ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.РольФайла");
		ЭтоФайлПриложения =
			ТекущиеДанные.ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Файл");
		
		ЗаполняемоеПриложениеУказано =
			ТекущиеДанные.РольПредмета = ПредопределенноеЗначение("Перечисление.РолиПредметов.Заполняемый")
			И ЗначениеЗаполнено(ТекущиеДанные.Приложение);
		
		Если ТекущиеДанные.ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Файл") Тогда
			
			ДанныеРодителя = ТекущиеДанные.ПолучитьРодителя();
			Если ДанныеРодителя <> Неопределено
				И ДанныеРодителя.ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.РольФайла") Тогда
				ДанныеРодителя = ДанныеРодителя.ПолучитьРодителя();
			КонецЕсли;
			
			ДоступноИнтерактивноеИзменениеФайлов = ДанныеРодителя <> Неопределено
				И ЗначениеЗаполнено(ДанныеРодителя.Приложение)
				И ОбщегоНазначенияДокументооборотКлиентСервер.ДоступноИнтерактивноеИзменениеФайлов(
					ДанныеРодителя.Приложение);
			
		ИначеЕсли ТекущиеДанные.ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.РольФайла") Тогда
			
			ДанныеРодителя = ТекущиеДанные.ПолучитьРодителя();
			ДоступноИнтерактивноеИзменениеФайлов = ЗначениеЗаполнено(ДанныеРодителя.Приложение)
				И ОбщегоНазначенияДокументооборотКлиентСервер.ДоступноИнтерактивноеИзменениеФайлов(
					ДанныеРодителя.Приложение);
			
		ИначеЕсли ТекущиеДанные.ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Приложение") Тогда
			
			ДоступноИнтерактивноеИзменениеФайлов = ЗначениеЗаполнено(ТекущиеДанные.Приложение)
				И ОбщегоНазначенияДокументооборотКлиентСервер.ДоступноИнтерактивноеИзменениеФайлов(
					ТекущиеДанные.Приложение);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ДеревоПриложенийКонтекстноеМенюСохранитьКак.Доступность = ЭтоФайл;
	Элементы.ДеревоПриложенийКонтекстноеМенюОткрытьПриложение.Доступность = ЭтоФайл;
	Элементы.ДеревоПриложенийКонтекстноеМенюРедактировать.Доступность =
		РедактироватьДоступность;
	Элементы.ДеревоПриложенийКонтекстноеМенюЗакончитьРедактирование.Доступность =
		ЗакончитьРедактированиеДоступность;
	Элементы.ДеревоПриложенийКонтекстноеМенюОсвободить.Доступность =
		ЗакончитьРедактированиеДоступность;
	Элементы.ДеревоПриложенийКонтекстноеМенюОбновитьИзФайлаНаДиске.Доступность = ЭтоФайл;
	
	Если ЭтоЗаполняемоеПриложение Тогда
		Элементы.ДеревоПриложенийКонтекстноеМенюФайлыДобавить.Доступность =
			Не ЗаполняемоеПриложениеУказано;
		Элементы.ДеревоПриложенийКонтекстноеМенюФайлыУдалить.Доступность =
			ЗаполняемоеПриложениеУказано;
	Иначе
		Элементы.ДеревоПриложенийКонтекстноеМенюФайлыДобавить.Доступность = Истина;
		Элементы.ДеревоПриложенийКонтекстноеМенюФайлыУдалить.Доступность = Истина;
	КонецЕсли;
	
	Элементы.ДеревоПриложенийКонтекстноеМенюФайлыДобавить.Видимость =
		ЭтоЗаполняемоеПриложение
		Или (ЭтоДругоеПриложение И ДоступноИнтерактивноеИзменениеФайлов)
		Или (ЭтоРольФайла И ДоступноИнтерактивноеИзменениеФайлов)
		Или (ЭтоФайлПриложения И ДоступноИнтерактивноеИзменениеФайлов);
		
	Элементы.ДеревоПриложенийКонтекстноеМенюФайлыВставитьКартинкуИзБуфера.Видимость =
		ЭтоТонкийWindowsКлиент
		И ((ЭтоДругоеПриложение И ДоступноИнтерактивноеИзменениеФайлов)
			Или (ЭтоРольФайла И ДоступноИнтерактивноеИзменениеФайлов)
			Или (ЭтоФайлПриложения И ДоступноИнтерактивноеИзменениеФайлов));
			
	Если ЭтоМобильныйКлиент Тогда
		Элементы.ДеревоПриложенийКонтекстноеМенюФайлыВставитьКартинкуИзБуфера.Видимость = Ложь;
	КонецЕсли;
			
	Элементы.ДеревоПриложенийКонтекстноеМенюОткрытьКарточку.Видимость =
		ЭтоФайл Или ЭтоДругоеПриложение Или ЭтоЗадача;
	Элементы.ДеревоПриложенийКонтекстноеМенюОткрытьПриложение.Видимость = ЭтоФайл;
	Элементы.ДеревоПриложенийКонтекстноеМенюРедактировать.Видимость = ЭтоФайл;
	Элементы.ДеревоПриложенийКонтекстноеМенюЗакончитьРедактирование.Видимость = ЭтоФайл;
	Элементы.ДеревоПриложенийКонтекстноеМенюОсвободить.Видимость = ЭтоФайл;
	Элементы.ДеревоПриложенийКонтекстноеМенюОбновитьИзФайлаНаДиске.Видимость = ЭтоФайл;
	Элементы.ДеревоПриложенийКонтекстноеМенюФайлыУдалить.Видимость =
		ЭтоЗаполняемоеПриложение
		Или (ЭтоФайлПриложения И ДоступноИнтерактивноеИзменениеФайлов);
	Элементы.ДеревоПриложенийКонтекстноеМенюСохранитьКак.Видимость = ЭтоФайл;
	Элементы.ДеревоПриложенийКонтекстноеМенюКопироватьВБуферОбмена.Видимость =
		ЭтоФайл Или ЭтоДругоеПриложение;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандПриложенийРезультата()
	
	ТекущиеДанные = Элементы.ПриложенияРезультата.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ЭтоФайл = Ложь;
	
	Если ТипЗнч(ТекущиеДанные.Приложение) = Тип("СправочникСсылка.Файлы") Тогда
		
		ЭтоФайл = Истина;
		
		Элементы.ПриложенияРезультатаКонтекстноеМенюРедактироватьФайлРезультата.Доступность =
			Не ЗначениеЗаполнено(ТекущиеДанные.Редактирует)
			И ПриложенияРезультатаИзменятьСоставСтрок;
			
		Элементы.ПриложенияРезультатаКонтекстноеМенюЗакончитьРедактированиеФайлаРезультата.Доступность =
			ТекущиеДанные.РедактируетТекущийПользователь
			И ПриложенияРезультатаИзменятьСоставСтрок;
		
		Элементы.ПриложенияРезультатаКонтекстноеМенюОсвободитьПриложениеРезультата.Доступность =
			ТекущиеДанные.РедактируетТекущийПользователь
			И ПриложенияРезультатаИзменятьСоставСтрок;
			
		Элементы.ПриложенияРезультатаКонтекстноеМенюОбновитьИзФайлаНаДискеФайлРезультата.Доступность =
			ПриложенияРезультатаИзменятьСоставСтрок;
		
	КонецЕсли;
	
	Элементы.ПриложенияРезультатаКонтекстноеМенюОткрытьПриложениеРезультата.Видимость = ЭтоФайл;
	Элементы.ПриложенияРезультатаКонтекстноеМенюРедактироватьФайлРезультата.Видимость = ЭтоФайл;
	Элементы.ПриложенияРезультатаКонтекстноеМенюУдалить.Доступность = ПриложенияРезультатаИзменятьСоставСтрок;
	Элементы.ПриложенияРезультатаКонтекстноеМенюЗакончитьРедактированиеФайлаРезультата.Видимость = ЭтоФайл;
	Элементы.ПриложенияРезультатаКонтекстноеМенюОсвободитьПриложениеРезультата.Видимость = ЭтоФайл;
	Элементы.ПриложенияРезультатаКонтекстноеМенюОбновитьИзФайлаНаДискеФайлРезультата.Видимость = ЭтоФайл;
	Элементы.ПриложенияРезультатаКонтекстноеМенюСохранитьКакФайлРезультата.Видимость = ЭтоФайл;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействиеЗадачиПоШаблону(ШаблонДляВыполнения)
	
	ОтключитьОбработчикОжидания("ВзятьВРаботуСВыборомИсполнителя");
	ДействиеДляОтложенногоВзятияВРаботу = Неопределено;
	
	Если Не ЗначениеЗаполнено(ШаблонДляВыполнения) Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Не указан шаблон для выполнения %1 (%2).'"),
			ШаблонДляВыполнения,
			ТипЗнч(ШаблонДляВыполнения));
	КонецЕсли;
	
	ДанныеШаблона = ШаблоныТекстовВызовСервера.ДанныеШаблона(ШаблонДляВыполнения);
	РезультатСохранения = РаботаСЗадачамиКлиент.СохранитьРезультатДействия(
		ТекущееДействиеЗадачи,
		ДанныеШаблона.ТекстШаблона,
		ТекущаяВерсияДанныхДействияЗадачи,
		Ложь,
		Ложь,
		ЭтотОбъект);
	
	ТекущаяВерсияДанныхДействияЗадачи = РезультатСохранения.НоваяВерсияДанных;
	
	Если Не РезультатСохранения.ВерсииДанныхРазличаются Тогда
		ВыполнитьДействиеЗадачиНаКлиентеВФорме(ДанныеШаблона.РезультатДействия);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКакФайлРезультатаСтроки(ДанныеСтроки)
	
	Если ДанныеСтроки = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущаяСсылка = ДанныеСтроки.Приложение;
	Если ТипЗнч(ТекущаяСсылка) = Тип("СправочникСсылка.Файлы") Тогда
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляСохранения(ТекущаяСсылка, Неопределено, УникальныйИдентификатор);
		КомандыРаботыСФайламиКлиент.СохранитьКак(ДанныеФайла, УникальныйИдентификатор);
	Иначе
		ПоказатьПредупреждение(,НСтр("ru = 'Выберите файл.'"));
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства 

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	Если Не ЗначениеЗаполнено(ТекущийИсточникДействия) Или ТипЗнч(ТекущийИсточникДействия) <> Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущийИсточникДействияОбъект = ТекущийИсточникДействия.ПолучитьОбъект();
	ЗначениеВРеквизитФормы(ТекущийИсточникДействияОбъект, "ТекущийИсточникДействияДанные");
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(
		ЭтотОбъект,
		ТекущийИсточникДействияДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	Если Не ЗначениеЗаполнено(ТекущийИсточникДействия) Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(
		ЭтотОбъект,
		ТекущийИсточникДействияДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)

	Если Не ЗначениеЗаполнено(ТекущийИсточникДействия) Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьЗависимостиДополнительныхРеквизитов();
	Результат = СохранитьДополнительныеРеквизиты();
	
	Если Результат.ВерсииДанныхРазличаются Тогда
		
		Сообщение = НСтр("ru = 'Не удалось сохранить изменения. Возможно, задача была выполнена или изменена другим сотрудником.'");
		ОбновитьНаКлиенте();
		ПоказатьПредупреждение(, Сообщение);
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Функция РольФайлаИПриложение(ДанныеСтроки)
	
	Приложение = Неопределено;
	РольФайла = Неопределено;
	Если ДанныеСтроки.ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Файл") Тогда
		
		ДанныеРодителя = ДанныеСтроки.ПолучитьРодителя();
		Если ДанныеРодителя <> Неопределено
			И ДанныеРодителя.ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.РольФайла") Тогда
			РольФайла = ДанныеРодителя.РольФайла;
			ДанныеРодителя = ДанныеРодителя.ПолучитьРодителя();
		КонецЕсли;
		
		Если ДанныеРодителя <> Неопределено Тогда
			Приложение = ДанныеРодителя.Приложение;
		КонецЕсли;
		
	ИначеЕсли ДанныеСтроки.ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.РольФайла") Тогда
		
		РольФайла = ДанныеСтроки.РольФайла;
		ДанныеРодителя = ДанныеСтроки.ПолучитьРодителя();
		
		Если ДанныеРодителя <> Неопределено Тогда
			Приложение = ДанныеРодителя.Приложение;
		КонецЕсли;
		
	ИначеЕсли ДанныеСтроки.ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Приложение") Тогда
		
		Приложение = ДанныеСтроки.Приложение;
		
		ПодчиненныеЭлементыПрилложения = ДанныеСтроки.ПолучитьЭлементы();
		Если ПодчиненныеЭлементыПрилложения.Количество() > 0 Тогда
			
			ПервыйПодчиненныйЭлемент = ПодчиненныеЭлементыПрилложения[0];
			Если ПервыйПодчиненныйЭлемент.ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.РольФайла") Тогда
				РольФайла = ПервыйПодчиненныйЭлемент.РольФайла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	РольФайлаИПриложение = Новый Структура("Приложение, РольФайла", Приложение, РольФайла);
	
	Возврат РольФайлаИПриложение;
	
КонецФункции

&НаКлиенте
Процедура ВзятьВРаботуСВыборомИсполнителя()
	
	Если Не ЗначениеЗаполнено(ДействиеДляОтложенногоВзятияВРаботу) Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСЗадачамиКлиент.ВзятьВРаботуСВыборомИсполнителя(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДействиеДляОтложенногоВзятияВРаботу),
		ЭтотОбъект);
	ДействиеДляОтложенногоВзятияВРаботу = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатДействияТекстомКнопкаВыбораНажатиеПродолжение()
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"РезультатДействияТекстомПослеВыбораШаблонаТекста",
		ЭтотОбъект);
	
	РаботаСЗадачамиКлиент.ВыбратьРезультатДействияТекстом(
		ТекущееДействиеЗадачи,
		ОписаниеОповещения);
	
КонецПроцедуры

#Область РаспознаваниеРечи

&НаСервере
Процедура РаспознаваниеРечи_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекущиеПараметры = ПараметрыРаспознаванияРечи.ТекущиеПараметры(ЭтотОбъект);
	
	РаспознаваниеРечи_ПараметрыРаспознавания = ТекущиеПараметры;
	РаспознаваниеРечи_РаспознаваниеДоступно = ПараметрыРаспознаванияРечи.РаспознаваниеДоступно(ТекущиеПараметры);
	
	Элементы.ГруппаРаспознаваниеРечиТекст.Видимость = РаспознаваниеРечи_РаспознаваниеДоступно;
	Элементы.РаспознаваниеРечи.Видимость = РаспознаваниеРечи_РаспознаваниеДоступно;
	Элементы.РезультатДействияТекстом.Высота = ?(Элементы.РаспознаваниеРечи.Видимость, 5, 4);
	
	РаспознаваниеРечи_РаспознаваниеФразыЗавершено = Истина;
	
	//
	
	Константы.ОбщаяГрамматикаРаботыСРечью.УстановитьГрамматикуСеанса();
	
КонецПроцедуры

&НаКлиенте
Процедура РаспознаваниеРечи_НачатьРаспознавание()
	
	ТекущиеПараметры = РаспознаваниеРечи_ПараметрыРаспознавания;
	ПараметрыМодели = ПараметрыРаспознаванияРечиКлиент.ПараметрыМодели(ТекущиеПараметры);
	ВариантИспользования = ПараметрыРаспознаванияРечиКлиент.ВариантИспользования(ТекущиеПараметры);
	ПараметрыРаспознавания = ПараметрыРаспознаванияРечиКлиент.ПараметрыПотоковогоРаспознаванияРечи(ТекущиеПараметры,
		Новый ОписаниеОповещения("ПриОстановкеАудиозаписи", ЭтотОбъект));
	
	Элемент = Элементы.РезультатДействияТекстом;
	
	Контекст = Новый Структура;
	Контекст.Вставить("Форма", ЭтотОбъект);
	Контекст.Вставить("Элемент", Элемент);
	Контекст.Вставить("ИмяРеквизита", "РезультатДействияТекстом");
	
	Попытка
		РаботаСРечьюБМОКлиент.НачатьПотоковоеРаспознавание(
			УникальныйИдентификатор,
			Новый ОписаниеОповещения(
				"ПриПолученииРезультатаРаспознавания", ЭтотОбъект, Контекст,
				"ПриОбработкеОшибкиРаспознавания", ЭтотОбъект),
			ПараметрыМодели,
			ВариантИспользования,
			ПараметрыРаспознавания
		);
		
		РаспознаваниеРечи_ВыполняетсяРаспознавание = Истина;
		РаспознаваниеРечи_ВремяНачалаРаспознавания = ТекущаяУниверсальнаяДатаВМиллисекундах();
		
	Исключение
		ПриОбработкеОшибкиРаспознавания(ИнформацияОбОшибке(), Истина, Контекст);
	КонецПопытки;
	
	РаспознаваниеРечи_ИзменитьСостояниеФормы();
	ТекущийЭлемент = Элементы.РезультатДействияТекстом;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспознаваниеРечи_ИзменитьСостояниеФормы()
	
	Если РаспознаваниеРечи_ВыполняетсяРаспознавание Тогда
		
		Элементы.РаспознаваниеРечиТекст.Картинка = БиблиотекаКартинок.КрасныйМикрофон;
		Элементы.РаспознаваниеРечи.Картинка = БиблиотекаКартинок.КрасныйМикрофон;
		
		Если РаспознаваниеРечи_РаспознаваниеФразыЗавершено Тогда
			//@skip-check new-color
			Элементы.РаспознаваниеРечиТекст.ЦветФона = Новый Цвет(255, 204, 0);
			//@skip-check new-color
			Элементы.РаспознаваниеРечи.ЦветФона = Новый Цвет(255, 204, 0);
		Иначе
			//@skip-check new-color
			Элементы.РаспознаваниеРечиТекст.ЦветФона = Новый Цвет(225, 154, 0);
			//@skip-check new-color
			Элементы.РаспознаваниеРечи.ЦветФона = Новый Цвет(225, 154, 0);
		КонецЕсли;
		
	Иначе
		
		Элементы.РаспознаваниеРечиТекст.Картинка = БиблиотекаКартинок.ЧерныйМикрофон;
		Элементы.РаспознаваниеРечи.Картинка = БиблиотекаКартинок.ЧерныйМикрофон;
		
		Элементы.РаспознаваниеРечиТекст.ЦветФона = Новый Цвет;
		Элементы.РаспознаваниеРечи.ЦветФона = Новый Цвет;
		
	КонецЕсли;
	
	Элементы.ГруппаРаспознаваниеРечиТекст.Видимость = РаспознаваниеРечи_РаспознаваниеДоступно И РаботаСРечьюБМОКлиент.ПоддерживаетсяПотоковоеРаспознавание();
	Элементы.РаспознаваниеРечи.Видимость  = РаспознаваниеРечи_РаспознаваниеДоступно И РаботаСРечьюБМОКлиент.ПоддерживаетсяПотоковоеРаспознавание();
	Элементы.РезультатДействияТекстом.Высота = ?(Элементы.РаспознаваниеРечи.Видимость, 5, 4);
	
	Элементы.РезультатДействияТекстом.Доступность     = РаспознаваниеРечи_РаспознаваниеФразыЗавершено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПолученииРезультатаРаспознавания(РезультатРаспознавания, ПродолжитьРаспознавание, Контекст) Экспорт 
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	ПоляВводаКлиент.ВставитьРезультатРаспознаванияПоКурсору(
		Контекст.Форма,
		Контекст.Элемент,
		Контекст.ИмяРеквизита,
		РезультатРаспознавания
	);
	
	ВремяКонца = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	РаботаСРечьюЖурналированиеКлиент.ДобавитьРезультатРаспознавания(
		УникальныйИдентификатор,
		РезультатРаспознавания,
		ВремяНачала,
		ВремяКонца
	);
	
	РаспознаваниеРечи_РаспознаваниеФразыЗавершено = РезультатРаспознавания.РаспознаваниеФразыЗавершено;
	РаспознаваниеРечи_ИзменитьСостояниеФормы();
	ТекущийЭлемент = Элементы.РезультатДействияТекстом;
	
	Если РаспознаваниеРечи_РаспознаваниеФразыЗавершено Тогда
		
		СохранитьРезультатДействияОтложенно(10, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОбработкеОшибкиРаспознавания(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	РаботаСРечьюЖурналированиеКлиент.ДобавитьИсключение(УникальныйИдентификатор, ИнформацияОбОшибке);
	
	ОбработкаОшибок.ПоказатьИнформациюОбОшибке(ИнформацияОбОшибке);
	
	РаспознаваниеРечи_РаспознаваниеФразыЗавершено = Истина;
	РаспознаваниеРечи_ИзменитьСостояниеФормы();
	ТекущийЭлемент = Элементы.РезультатДействияТекстом;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОстановкеАудиозаписи(РезультатАудиозаписи, Контекст) Экспорт 
	
	РаспознаваниеРечи_ВыполняетсяРаспознавание = Ложь;
	РаспознаваниеРечи_РаспознаваниеФразыЗавершено = Истина;
	РаспознаваниеРечи_ИзменитьСостояниеФормы();
	ТекущийЭлемент = Элементы.РезультатДействияТекстом;
	
	ВремяКонца = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	ТекущиеПараметры = РаспознаваниеРечи_ПараметрыРаспознавания;
	ПараметрыМодели = ПараметрыРаспознаванияРечиКлиент.ПараметрыМодели(ТекущиеПараметры);
	ВариантИспользования = ПараметрыРаспознаванияРечиКлиент.ВариантИспользования(ТекущиеПараметры);
	
	РаботаСРечьюЖурналированиеКлиент.ДобавитьАудио(
		УникальныйИдентификатор,
		РезультатАудиозаписи,
		ПараметрыМодели,
		ВариантИспользования,
		РаспознаваниеРечи_ВремяНачалаРаспознавания,
		ВремяКонца
	);
	
	Если РаспознаваниеРечи_ПерезапускРаспознавания Тогда
		РаспознаваниеРечи_НачатьРаспознавание();
		РаспознаваниеРечи_ПерезапускРаспознавания = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореПараметровРаспознаванияРечи(Результат, Контекст) Экспорт
	
	РаспознаваниеРечи_ПараметрыРаспознавания = Результат;
	РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
	РаспознаваниеРечи_ПерезапускРаспознавания = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_МобильныйКлиент

&НаСервере
Процедура МК_НастроитьЭлементыФормы()
	
	// Общее.
	СворачиваниеЭлементовПоВажности = СворачиваниеЭлементовФормыПоВажности.НеИспользовать;
	ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
	
	Элементы.ГруппаОбъектИзДругойСистемы.ЦветФона = ЦветаСтиля.МК_ЦветФонаГруппы;
	Элементы.ГруппаОбъектИзДругойСистемы.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	
	Элементы.ГруппаПриложенияОтступКоманд.Видимость = Ложь;
	Элементы.ГруппаСоисполнителиОтступКоманд.Видимость = Ложь;
	Элементы.ГруппаИсторияОтступКоманд.Видимость = Ложь;
	Элементы.ГруппаИнструкцияОтступКоманд.Видимость = Ложь;
	Элементы.ГруппаОбзорПриложенияОтступКоманд.Видимость = Ложь;
	Элементы.КонтейнерКоманднойПанелиОтступ.Видимость = Ложь;
	Элементы.СтраницаОбзорФайла.Видимость = Ложь;
	Элементы.ДобавитьКартинкуИзБуфераКОтчету.Видимость = Ложь;
	Элементы.ГруппаРезультатДействияТекстомГраницаВерх.Видимость = Ложь;
	Элементы.ГруппаРезультатДействияТекстомГраницаНиз.Видимость = Ложь;
	Элементы.РезультатДействияТекстомГраницаЛево.Видимость = Ложь;
	Элементы.РезультатДействияТекстомГраницаПраво.Видимость = Ложь;
	
	// Страницы.
	Элементы.МК_ЗаголовокСтраниц.Видимость = Истина;
	Элементы.СтраницыПросмотра.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	
	// Команды переключения страниц.
	Элементы.МК_ЗаголовокСтраниц.Видимость = Истина;
	МК.ОформитьКнопкуФильтра(Элементы.МК_КнопкаСтраницаИнформация, Истина);
	МК.ОформитьКнопкуФильтра(Элементы.МК_КнопкаСтраницаИстория, Истина);
	МК.ОформитьКнопкуФильтра(Элементы.МК_КнопкаСтраницаИнструкция, Истина);
	МК.ОформитьКнопкуФильтра(Элементы.МК_КнопкаСтраницаСоисполнители, Истина);
	МК.ОформитьКнопкуФильтра(Элементы.МК_КнопкаСтраницаПодзадачи, Истина);
	
	МК_ПереключитьНаОсновнуюСтраницу(ЭтотОбъект);

	// Страница "Основное".
	Элементы.СтраницаОсновное.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	МК_КлиентСервер.АдаптироватьHtmlПодЭкранМобильногоПриНеобходимости(ОписаниеHTMLЗадачи);
	
	// Приложения.
	Элементы.МК_ГруппаПриложения.Видимость = Истина;
	Элементы.ДеревоПриложений.Видимость = Ложь;
	Элементы.ДеревоПриложенийПредставлениеПриложения.Шрифт = ШрифтыСтиля.МелкийШрифтТекста;
	Элементы.Переместить(Элементы.ДеревоПриложений, Элементы.МК_ГруппаПриложения);
	
	Элементы.ДеревоПриложений.РастягиватьПоГоризонтали = Истина;
	Элементы.ДеревоПриложений.Ширина = 0;
	
	Элементы.ДеревоПриложений.ИспользованиеТекущейСтроки =
		ИспользованиеТекущейСтрокиТаблицы.ОтображениеВыделения;
		
	Элементы.Переместить(
		Элементы.ДеревоПриложенийКонтекстноеМенюФайлыДобавить,
		Элементы.МК_ЗаголовокДеревоПриложений,
		Элементы.МК_ДеревоПриложенийНадпись);
	
	МК.ОформитьКнопкуФильтра(Элементы.ДеревоПриложенийКонтекстноеМенюФайлыДобавить, Ложь);
	
	Элементы.ДеревоПриложенийКонтекстноеМенюФайлыВставитьКартинкуИзБуфера.Видимость = Ложь;
	
	МК_НастроитьПоказатьСкрытьДеревоПриложений(ЭтотОбъект);
	
	// Страница "История".
	Элементы.СтраницаИстория.ЦветФона = ЦветаСтиля.МК_ЦветФонаГруппы;
	Элементы.ГруппаИсторияОтступ.ЦветФона = ЦветаСтиля.МК_ЦветФонаГруппы;
	Элементы.СтраницаЖизненныйЦиклПрокрутка.ЦветФона = ЦветаСтиля.МК_ЦветФонаГруппы;
	Элементы.ГруппаЖизненныйЦикл.ЦветФона = ЦветаСтиля.МК_ЦветФонаГруппы;
	МК.ОформитьКнопкуФильтра(Элементы.ИсторияВыполнения, Истина);
	
	// Страница "Подзадачи".
	Элементы.СтраницаПодзадачи.Заголовок = "";
	Элементы.Переместить(Элементы.Подзадачи, Элементы.СтраницаПодзадачи);
	Элементы.СтраницаПодзадачи.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	Элементы.ГруппаЗаголовокПодзадач.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	Элементы.ГруппаЗаголовокПодзадач.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Полуторный;
	Элементы.ПодзадачиПредставление.Шрифт = ШрифтыСтиля.МелкийШрифтТекста;
	Элементы.ПодзадачиЕстьПриложения.Видимость = Ложь;
	
	// Страница "Соисполниетели".
	Элементы.СоисполнителиПредставление.Шрифт = ШрифтыСтиля.МелкийШрифтТекста;
	Элементы.СоисполнителиЕстьПриложения.Видимость = Ложь;
	
	МК.ОформитьКнопкуФильтра(Элементы.СоздатьПодзадачу);
	Элементы.СоздатьПодзадачу.Картинка = БиблиотекаКартинок.СоздатьЭлементСписка;
	
	МК.ОформитьКнопкуФильтра(Элементы.ВзятьОтчетОбИсполненииИПриложения);	
	МК.ОформитьКнопкуФильтра(Элементы.ВернутьНаДоработку);
	
	// Страница "Инструкция".
	МК_КлиентСервер.АдаптироватьHtmlПодЭкранМобильногоПриНеобходимости(Инструкция);
	
	// Страница "Доп. реквизиты".
	Элементы.СтраницаДополнительныеРеквизиты.ЦветФона = ЦветаСтиля.МК_ЦветФонаГруппы;
	
	// Область выполнения.
	Элементы.Переместить(Элементы.ГруппаРезультатИПриложения, Элементы.МК_ПанельКомандВыполнения);
	Элементы.Переместить(Элементы.ГруппаКомандыДляВыполнения, Элементы.МК_ПанельКомандВыполнения);
	
	Элементы.ГруппаСтраницыИОбластьВыполнения.ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
	
	Элементы.Переместить(Элементы.РезультатДействияТекстомКнопкаВыбора, Элементы.МК_Дополнительно);
	Элементы.МК_ЗаполнитьПоШаблону.Видимость = Элементы.РезультатДействияТекстомКнопкаВыбора.Видимость;
	МК.ОформитьКнопкуФильтра(Элементы.МК_ЗаполнитьПоШаблону, Истина);
		
	МК.ОформитьКнопкуФильтра(Элементы.ДобавитьПриложениеКОтчету);
	Элементы.ДобавитьПриложениеКОтчету.Картинка = БиблиотекаКартинок.СоздатьЭлементСписка;
	
	МК.ОформитьКнопкуФильтра(Элементы.ДобавитьФайлКОтчету);
	Элементы.ДобавитьФайлКОтчету.Картинка = БиблиотекаКартинок.МК_КомандаВложениеФайл;

	// Сделаем ком. панель результата сверху.
	Элементы.ГруппаРезультатДействияТекстом.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	Элементы.ГруппаКомандыПриложенийРезультата.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	Элементы.ГруппаПриложенияРезультата.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	Элементы.ГруппаРезультатДействияТекстомКоманднаяПанель.Группировка = 
		ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	Элементы.ГруппаРезультатДействияТекстомКоманднаяПанель.ЦветФона = WebЦвета.Белый;
	Элементы.Переместить(Элементы.ГруппаРезультатДействияТекстомГраницы, Элементы.ГруппаРезультатДействияТекстом);
	
	// Добавим отступ между командами.
	Элементы.ГруппаРезультатДействияТекстомКоманднаяПанель.ГоризонтальныйИнтервал = 
		ИнтервалМеждуЭлементамиФормы.Одинарный;
	Элементы.МК_ОтступКомандРезультатДействияТекстом.Видимость = Истина;
	
	Элементы.РезультатДействияТекстом.Высота = 2;
	Элементы.РезультатДействияТекстом.МаксимальнаяВысота = 3;
	
	// Приложения результата.
	Элементы.МК_ГруппаПриложенияРезультата.Видимость = Истина;
	Элементы.ПриложенияРезультата.Ширина = 0;
	Элементы.ПриложенияРезультата.РастягиватьПоГоризонтали = Истина;
	Элементы.ПриложенияРезультата.АвтоМаксимальнаяШирина = Ложь;
	Элементы.ПриложенияРезультата.Видимость = Ложь;
	Элементы.ПриложенияРезультатаПриложение.Шрифт = ШрифтыСтиля.МелкийШрифтТекста;
	Элементы.ПриложенияРезультата.Шапка = Ложь;
	Элементы.Переместить(Элементы.ПриложенияРезультата, Элементы.МК_ГруппаПриложенияРезультата);
	Элементы.СтрокиПриложенияРезультата.Видимость = Ложь;
	
	Элементы.Переместить(Элементы.ДобавитьФайлКОтчету,
		Элементы.МК_ЗаголовокПриложенияРезультата,
		Элементы.МК_ПриложенияРезультатаНадпись);

	Элементы.Переместить(Элементы.ДобавитьПриложениеКОтчету,
		Элементы.МК_ЗаголовокПриложенияРезультата,
		Элементы.МК_ПриложенияРезультатаНадпись);
	
	МК.ОформитьКнопкуФильтра(Элементы.ДобавитьФайлКОтчету, Ложь);
	МК.ОформитьКнопкуФильтра(Элементы.ДобавитьПриложениеКОтчету, Ложь);
	
	МК_НастроитьПоказатьСкрытьПриложенияРезультата(ЭтотОбъект);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура МК_НастроитьПоказатьСкрытьПриложенияРезультата(Форма)
	
	КоличествоПриложений = Форма.ПриложенияРезультата.Количество();
	
	Если КоличествоПриложений = 0 Тогда
		Форма.Элементы.ПриложенияРезультата.Видимость = Ложь;
	КонецЕсли;
	
	Форма.Элементы.МК_ПриложенияРезультатаНадпись.Заголовок = СтрШаблон(
		НСтр("ru = 'Приложения результата (%1)'"),
		Формат(КоличествоПриложений, "ЧН=0; ЧГ="));

	МК_КлиентСервер.ОформитьКнопкуСворачиваемойГруппы(Форма.МК_ЭлементыСтиля,
		Форма.Элементы.МК_ПоказатьСкрытьПриложенияРезультата,
		Форма.Элементы.ПриложенияРезультата.Видимость);
	
	МК_КлиентСервер.УстановитьНовуюВысотуДополнительнойТаблицы(Форма.Элементы.ПриложенияРезультата,
		КоличествоПриложений);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура МК_НастроитьПоказатьСкрытьДеревоПриложений(Форма)
	
	КоличествоПриложений = Форма.ДеревоПриложений.ПолучитьЭлементы().Количество();
	
	Если КоличествоПриложений = 0 Тогда
		Форма.Элементы.ДеревоПриложений.Видимость = Ложь;
	КонецЕсли;
	
	Форма.Элементы.МК_ДеревоПриложенийНадпись.Заголовок = 
		СтрШаблон(
			НСтр("ru = 'Приложения задачи (%1)'"),
			Формат(КоличествоПриложений, "ЧН=0; ЧГ="));

	МК_КлиентСервер.ОформитьКнопкуСворачиваемойГруппы(Форма.МК_ЭлементыСтиля,
		Форма.Элементы.МК_ПоказатьСкрытьДеревоПриложений,
		Форма.Элементы.ДеревоПриложений.Видимость);

	МК_КлиентСервер.УстановитьНовуюВысотуДополнительнойТаблицы(Форма.Элементы.ДеревоПриложений,
		КоличествоПриложений);

КонецПроцедуры

&НаСервере
Процедура МК_ОбновитьКнопкиВыполнения()
	
	МК.ОформитьКнопкуЗадачСПоложительнымВыполнением(Элементы.ВыбратьШаблонДляВыполненияЗадачи);
	МК.ОформитьКнопкуЗадачСПоложительнымВыполнением(Элементы.ОтменитьВыполнение);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура МК_СброситьОформлениеПереключателейСтраниц(Форма)
	
	МК_КлиентСервер.ОформитьДополнительнуюКнопкуПоСостоянию(Форма.МК_ЭлементыСтиля,
		Форма.Элементы.МК_КнопкаСтраницаИнформация,
		Ложь);
	
	МК_КлиентСервер.ОформитьДополнительнуюКнопкуПоСостоянию(Форма.МК_ЭлементыСтиля,
		Форма.Элементы.МК_КнопкаСтраницаИстория,
		Ложь);
	
	МК_КлиентСервер.ОформитьДополнительнуюКнопкуПоСостоянию(Форма.МК_ЭлементыСтиля,
		Форма.Элементы.МК_КнопкаСтраницаИнструкция,
		Ложь);
	
	МК_КлиентСервер.ОформитьДополнительнуюКнопкуПоСостоянию(Форма.МК_ЭлементыСтиля,
		Форма.Элементы.МК_КнопкаСтраницаСоисполнители,
		Ложь);
		
	МК_КлиентСервер.ОформитьДополнительнуюКнопкуПоСостоянию(Форма.МК_ЭлементыСтиля,
		Форма.Элементы.МК_КнопкаСтраницаПодзадачи,
		Ложь);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура МК_ПереключитьНаОсновнуюСтраницу(Форма)
	
	Форма.Элементы.СтраницыПросмотра.ТекущаяСтраница = Форма.Элементы.СтраницаОсновное;
	
	МК_СброситьОформлениеПереключателейСтраниц(Форма);
	
	МК_КлиентСервер.ОформитьДополнительнуюКнопкуПоСостоянию(Форма.МК_ЭлементыСтиля,
		Форма.Элементы.МК_КнопкаСтраницаИнформация,
		Истина);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура МК_ПереключитьНаСтраницуИстория(Форма)
	
	Форма.Элементы.СтраницыПросмотра.ТекущаяСтраница = Форма.Элементы.СтраницаИстория;
	
	МК_СброситьОформлениеПереключателейСтраниц(Форма);
	
	МК_КлиентСервер.ОформитьДополнительнуюКнопкуПоСостоянию(Форма.МК_ЭлементыСтиля,
		Форма.Элементы.МК_КнопкаСтраницаИстория,
		Истина);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура МК_ПереключитьНаСтраницуИнструкция(Форма)
	
	Форма.Элементы.СтраницыПросмотра.ТекущаяСтраница = Форма.Элементы.СтраницаИнструкция;
	
	МК_СброситьОформлениеПереключателейСтраниц(Форма);
	
	МК_КлиентСервер.ОформитьДополнительнуюКнопкуПоСостоянию(Форма.МК_ЭлементыСтиля,
		Форма.Элементы.МК_КнопкаСтраницаИнструкция,
		Истина);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура МК_ПереключитьНаСтраницуПодзадачи(Форма)
	
	Форма.Элементы.СтраницыПросмотра.ТекущаяСтраница = Форма.Элементы.СтраницаПодзадачи;
	
	МК_СброситьОформлениеПереключателейСтраниц(Форма);
	
	МК_КлиентСервер.ОформитьДополнительнуюКнопкуПоСостоянию(Форма.МК_ЭлементыСтиля,
		Форма.Элементы.МК_КнопкаСтраницаПодзадачи,
		Истина);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура МК_ПереключитьНаСтраницуСоисполнители(Форма)
	
	Форма.Элементы.СтраницыПросмотра.ТекущаяСтраница = Форма.Элементы.СтраницаСоисполнители;
	
	МК_СброситьОформлениеПереключателейСтраниц(Форма);
	
	МК_КлиентСервер.ОформитьДополнительнуюКнопкуПоСостоянию(Форма.МК_ЭлементыСтиля,
		Форма.Элементы.МК_КнопкаСтраницаСоисполнители,
		Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьКомандМасштаба(Расширение)
	
	Если ОбзорФайловКлиентСервер.ЭтоКартинка(Расширение) Или ОбзорФайловКлиентСервер.ЭтоPDF(Расширение) Тогда
		
		Если МасштабироватьPDFИКартинки Тогда
			
			Элементы.НастоящийРазмер.Видимость = Истина;
			Элементы.ПоШиринеОкна.Видимость = Ложь;
			
		Иначе
				
			Элементы.НастоящийРазмер.Видимость = Ложь;
			Элементы.ПоШиринеОкна.Видимость = Истина;
			
		КонецЕсли;
	
	Иначе
			
		Элементы.НастоящийРазмер.Видимость = Ложь;
		Элементы.ПоШиринеОкна.Видимость = Ложь;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СохранитьРезультатДействияОтложенно(Интервал, РазрешитьВыборИсполнителя)
	
	НужноСохранитьРезультатДействия = Истина;
	ДействиеДляСохранения = ТекущееДействиеЗадачи;
	РезультатДляСохранения = РезультатДействияТекстом;
	ВерсияДанныхДляСохранения = ТекущаяВерсияДанныхДействияЗадачи;
	РазрешитьВыборИсполнителяДляСохранения = РазрешитьВыборИсполнителя;
	ПодключитьОбработчикОжидания("СохранитьРезультатДействия", Интервал, Истина);
	
КонецПроцедуры

&НаКлиенте
Функция СохранитьРезультатДействия()
	
	ОтключитьОбработчикОжидания("СохранитьРезультатДействия");
	
	// В случае запуска обработчика ожидания, когда уже сохранили, сохранять не нужно повторно.
	Если Не НужноСохранитьРезультатДействия Тогда
		Возврат Истина;
	КонецЕсли;
	
	НужноСохранитьРезультатДействия = Ложь;
	
	РезультатСохранения = РаботаСЗадачамиКлиент.СохранитьРезультатДействия(
		ДействиеДляСохранения,
		РезультатДляСохранения,
		ВерсияДанныхДляСохранения,
		Истина,
		Ложь,
		ЭтотОбъект);
	
	Если ДействиеДляСохранения = ТекущееДействиеЗадачи Тогда
		ТекущаяВерсияДанныхДействияЗадачи = РезультатСохранения.НоваяВерсияДанных;
	КонецЕсли;
	
	Если РазрешитьВыборИсполнителяДляСохранения И РезультатСохранения.НужноВыбратьФактическогоИсполнителя Тогда
		ДействиеДляОтложенногоВзятияВРаботу = ТекущееДействиеЗадачи;
		ПодключитьОбработчикОжидания("ВзятьВРаботуСВыборомИсполнителя", 0.1, Истина);
	КонецЕсли;
	
	ДействиеДляСохранения = ПредопределенноеЗначение("Документ.ДействиеЗадачи.ПустаяСсылка");
	РезультатДляСохранения = "";
	ВерсияДанныхДляСохранения = "";
	РазрешитьВыборИсполнителяДляСохранения = Ложь;
	
	Возврат РезультатСохранения.Успешно;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_НагрузочноеТестирование

// Выполняет согласование в "Действие задачи" путем имитации нажатия на первый вариант
// 
// Возвращаемое значение:
//  Булево - Всегда Истина
&НаКлиенте
Функция НТ_ВыполнитьДействиеЗадачиВариант1() Экспорт
	
	ДействиеВыполнено = Ложь;
	
	Для Каждого Элемент Из Элементы.ГруппаКомандыДляВыполнения.ПодчиненныеЭлементы Цикл
		
		Если Не Элемент.Видимость Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеКомандыВыполнения = Неопределено;
		
		Для Каждого ОчередныеДанныеКоманды Из ДанныеКомандВыполнения Цикл
			Если Элемент.Имя = ОчередныеДанныеКоманды.ИмяЭлемента Тогда
				ДанныеКомандыВыполнения = ОчередныеДанныеКоманды;
			КонецЕсли;
		КонецЦикла;
		
		Если ДанныеКомандыВыполнения = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяКоманды = ДанныеКомандыВыполнения.ИмяКоманды;
		Если Не СтрНачинаетсяС(ИмяКоманды, РаботаСЗадачамиКлиентСервер.ПрефиксИмениКомандыРезультата()) Тогда
			Продолжить;
		КонецЕсли;
		
		ИдентификаторРезультата = РаботаСЗадачамиКлиентСервер.ИдентификаторПоИмениКоманды(ИмяКоманды);
		РезультатДействияЗадачи =
			РаботаСЗадачамиВызовСервера.РезультатДействияЗадачиПоИдентификатору(ИдентификаторРезультата);
		ВыполнитьДействиеЗадачиНаКлиентеВФорме(РезультатДействияЗадачи);
		
		ДействиеВыполнено = Истина;
		Прервать;
		
	КонецЦикла;
	
	Возврат ДействиеВыполнено;
	
КонецФункции

// Нужен для вызова после программного заполнения комментария согласования, для корректной записи этого комментария
// 
// Возвращаемое значение:
//  Булево - Всегда Истина
&НаКлиенте
Функция НТ_РезультатДействияТекстомПриИзменении() Экспорт
	
	РезультатДействияТекстомПриИзменении(Неопределено);  //@skip-check invocation-form-event-handler
	Возврат Истина;
	
КонецФункции

#КонецОбласти

&НаСервере
Процедура ВывестиPDFДокументНаСервере()
	
	СведенияОДокументеPDF = РаботаСPDFПовтИсп.НовыеСведенияОPDFДокументеНаФорме();
	СведенияОДокументеPDF.ИмяРодителяКоманды = "ГруппаОбзорФайлаКомандыВертикально";	
	
	РаботаСPDF.ВывестиPDFДокументНаФорму(ЭтотОбъект, СведенияОДокументеPDF);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_МасштабПлюс(Команда)
	
	Элементы["ДокументPdfПоле"].Масштаб = Элементы["ДокументPdfПоле"].Масштаб + 10;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_МасштабМинус(Команда)                                 
	
	Если Элементы["ДокументPdfПоле"].Масштаб <= 10 Тогда
		Возврат;
	КонецЕсли;	
	
	Элементы["ДокументPdfПоле"].Масштаб = Элементы["ДокументPdfПоле"].Масштаб - 10;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПоворотЛево(Команда)
	
	Элементы["ДокументPdfПоле"].Ориентация = Элементы["ДокументPdfПоле"].Ориентация - 90;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПоворотПраво(Команда)
	
	Элементы["ДокументPdfПоле"].Ориентация = Элементы["ДокументPdfПоле"].Ориентация + 90;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПревьюДокументаЭДО()
	
	ТекущиеДанные = Элементы.ДеревоПриложений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Если ТекущиеДанные.ТипСтроки <> ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.ДокументЭДО") Тогда
		Возврат;
	КонецЕсли;    
	
	ДанныеВизуализации = ОбменЭДОДокументооборотВызовСервера.ДанныеВизуализации(ТекущиеДанные.ДокументЭДО);
	СостояниеЭДО = ДанныеВизуализации.Состояние;
	
	Если ДанныеВизуализации.ТабличныйДокументСформирован Тогда  
		
		Если ТипЗнч(ДанныеВизуализации.ТабличныйДокумент) = Тип("ТабличныйДокумент") Тогда
			
			ТабличныйДокументЭДО = ДанныеВизуализации.ТабличныйДокумент;  
			Элементы.ГруппаЭДОСтраницы.ТекущаяСтраница = Элементы.ГруппаЭДОТабличный; 
			Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаЭДО; // только если формализованный
		
		ИначеЕсли ТипЗнч(ДанныеВизуализации.ТабличныйДокумент) = Тип("Строка") Тогда // html 
			
			Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
			ОписаниеHTMLФайла = ДанныеВизуализации.ТабличныйДокумент;  
			
		КонецЕсли;
	
	Иначе	         
		
		ТабличныйДокументЭДО = Новый ТабличныйДокумент;
		
		Если ДанныеВизуализации.Свойство("ДвоичныеДанные") Тогда    
			// тут предпросмотр                      
			
			Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
			
			ДвоичныеДанныеФайла  = ДанныеВизуализации.ДвоичныеДанные;
			
			ПараметрыПолученияПредставления = ОбзорФайловКлиентСервер.ПараметрыПолученияПредставления();
					
			СистемнаяИнформация = Новый СистемнаяИнформация();
			ИдентификаторКлиента = СистемнаяИнформация.ИдентификаторКлиента;
			
			ПараметрыПолученияПредставления.ТребуетсяСоздатьВизуализациюЭП = Ложь;
			ПараметрыПолученияПредставления.МаксимальноеЧислоСтраницДляПредпросмотра = 10;
			ПараметрыПолученияПредставления.ПредпросмотрУрезан = Ложь;
			ПараметрыПолученияПредставления.УникальныйИдентификатор = УникальныйИдентификатор;
			ПараметрыПолученияПредставления.Расширение = ДанныеВизуализации.ПрисоединенныйФайлРасширение;
			ПараметрыПолученияПредставления.ИдентификаторКлиента = ИдентификаторКлиента;
			ПараметрыПолученияПредставления.ПоддерживаемыеТипы = ОбзорФайловКлиентСервер.ПоддерживаемыеТипыПредпросмотра();
			ПараметрыПолученияПредставления.МасштабироватьPDFИКартинки = МасштабироватьPDFИКартинки;
			ПараметрыПолученияПредставления.ЭтоСлужебноеСообщение = Ложь;          
			ПараметрыПолученияПредставления.ИспользоватьLibreOffice = Ложь;
			
			ПараметрыПолученияПредставления.Вставить("ДвоичныеДанные", ДвоичныеДанныеФайла);
			
			РеквизитыФайла = Новый Структура;
			РеквизитыФайла.Вставить("ТекущаяВерсияРасширение", ДанныеВизуализации.ПрисоединенныйФайлРасширение);
			РеквизитыФайла.Вставить("Зашифрован", Ложь);
			РеквизитыФайла.Вставить("ТекущаяВерсияРазмер", ДвоичныеДанныеФайла.Размер());
			РеквизитыФайла.Вставить("Наименование", ДанныеВизуализации.ПрисоединенныйФайлПредставление);
			ДанныеФайла = Неопределено;
			ПредпросмотрУрезан = Ложь;
			ДокументPDF = Неопределено;
			
			ДанныеВизуализации = ОбзорФайловКлиент.СформироватьHTMLПредставление(
				ПараметрыПолученияПредставления,
				РеквизитыФайла,
				ДанныеФайла,
				ПредпросмотрУрезан,
				ДокументPDF);
			Если ТипЗнч(ДанныеВизуализации) = Тип("Строка") Тогда
				ОписаниеHTMLФайла = ДанныеВизуализации;
			Иначе
				ОписаниеHTMLФайла = ОбзорОбъектовКлиентСервер.ПустойHTML();
			КонецЕсли;
				
			Если ДокументPDF = Неопределено Тогда
				Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
			Иначе
				Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаPdf;
				//@skip-check bsl-legacy-check-string-literal
				ЭтотОбъект["ДокументPdfРеквизит"] = ДокументPDF;
				Элементы.ДокументPdfПоле.НомерТекущейСтраницы = 1;
			КонецЕсли;
				
		Иначе	
			
			ОписаниеHTMLФайла = ОбзорФайловКлиентСервер.HTMLПредставлениеНеПоддерживаемыйДокументЭДО();
			Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;

		КонецЕсли;
		
	КонецЕсли;
	
	ТекущийДокументЭДО = ТекущиеДанные.ДокументЭДО;
	
	Если ЭтоМобильныйКлиент Тогда
		МК_КлиентСервер.АдаптироватьHtmlПодЭкранМобильногоПриНеобходимости(ОписаниеHTMLФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПревьюФайла()
	
	ПоказатьОбзорТекущегоФайла();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОбзорТекущегоФайла()

	ТекущиеДанные = Элементы.ДеревоПриложений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	ТекущийФайл = ТекущиеДанные.Приложение;
	РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
	
	Если ТекущиеДанные.ТипСтроки <> ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Файл") Тогда
		Возврат;
	КонецЕсли;
	
	Если РедактируетТекущийПользователь Тогда
		 
		ОписаниеHTMLФайла = ОбзорФайловКлиентСервер.HTMLПредставлениеПриРедактировании();
		Элементы.ГруппаПредпросмотрУрезан.Видимость = Ложь;
		Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
		Элементы.ГруппаОбзорФайлаКомандыВертикально.Видимость = Ложь;
		Элементы.ГруппаОбзорФайлаОтступКоманд.Видимость = Истина;
		
		УстановитьВидимостьКомандМасштаба("");
		
	Иначе 
		
		Если ЗначениеЗаполнено(ТекущийФайл) Тогда
			
			ДокументPDF = Неопределено;
			
			ПараметрыHTMLПредставление = ОбзорФайловКлиентСервер.СтруктураПараметровHTMLПредставлениеФайла();
			ПараметрыHTMLПредставление.МаксимальноеЧислоСтраницДляПредпросмотра = МаксимальноеЧислоСтраницДляПредпросмотра;
			ПараметрыHTMLПредставление.Расширение = ТекущиеДанные.Расширение;
			ПараметрыHTMLПредставление.Размер = ТекущиеДанные.ТекущаяВерсияРазмер;
			ПараметрыHTMLПредставление.УникальныйИдентификатор = УникальныйИдентификатор;
			
			ДанныеОбзора = ОбзорФайловКлиент.HTMLПредставлениеФайла(
				ТекущийФайл,
				ПараметрыHTMLПредставление,
				ДокументPDF);
			
			ОбзорФайловКлиент.ЗаполнитьРеквизитыОбзора(ДанныеОбзора, ОписаниеHTMLФайла);
			
			Элементы.ГруппаПредпросмотрУрезан.Видимость = ПараметрыHTMLПредставление.ПредпросмотрУрезан;
			МасштабироватьPDFИКартинки = ПараметрыHTMLПредставление.МасштабироватьPDFИКартинки;
			
			УстановитьВидимостьКомандМасштаба(ТекущиеДанные.Расширение);
			
			НомерПорции = 1;
			ВсегоПорцийПредпросмотра = ПараметрыHTMLПредставление.ВсегоПорцийПредпросмотра;
			ОбновитьКнопкиДинамическогоСпискаКлиент();
			
			Если ДокументPDF = Неопределено Тогда
				Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
				Элементы.ГруппаОбзорФайлаКомандыВертикально.Видимость = Ложь;
				Элементы.ГруппаОбзорФайлаОтступКоманд.Видимость = Истина;
				
			Иначе
				Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаPdf;
				//@skip-check bsl-legacy-check-string-literal
				ЭтотОбъект["ДокументPdfРеквизит"] = ДокументPDF;
				Элементы["ДокументPdfПоле"].НомерТекущейСтраницы = 1;
				
				Элементы.ГруппаОбзорФайлаКомандыВертикально.Видимость = Истина;
				Элементы.ГруппаОбзорФайлаОтступКоманд.Видимость = Ложь;
				
			КонецЕсли;
			
		Иначе
			ОписаниеHTMLФайла = РаботаС_HTMLКлиентСервер.ПустойHTML();
			Элементы.ГруппаПредпросмотрУрезан.Видимость = Ложь;
			Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
			Элементы.ГруппаОбзорФайлаКомандыВертикально.Видимость = Ложь;
			Элементы.ГруппаОбзорФайлаОтступКоманд.Видимость = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоМобильныйКлиент Тогда
		МК_КлиентСервер.АдаптироватьHtmlПодЭкранМобильногоПриНеобходимости(ОписаниеHTMLФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ПослеПолучитьФайлВерсииВРабочийКаталог(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат.ФайлПолучен Тогда
		
		ПолноеИмяПеретаскиваемогоФайла = Результат.ПолноеИмяФайла;
		
		Файл = Новый Файл(ПолноеИмяПеретаскиваемогоФайла);
		Если Ждать Файл.СуществуетАсинх() Тогда
			Файл.УстановитьТолькоЧтениеАсинх(Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаРезультата(Приложение)
	
	Если ТипЗнч(Приложение) <> Тип("СправочникСсылка.Файлы") Тогда
		ПоказатьЗначение(, Приложение);
		Возврат;
	КонецЕсли;	
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(Приложение, 
		Неопределено, УникальныйИдентификатор, Неопределено, ПредыдущийАдресФайла);
		
	#Если ВебКлиент Тогда
			
		РаботаСФайламиКлиент.ОткрытьФайлСОповещением(Неопределено, 
			ДанныеФайла, УникальныйИдентификатор); 
			
		Возврат;
	#КонецЕсли	
	
	Если ПриложенияРезультатаИзменятьСоставСтрок Тогда
		
		Если ЗначениеЗаполнено(ДанныеФайла.Редактирует)
			И Не ДанныеФайла.РедактируетТекущийПользователь Тогда
			
			ТекстВопроса =
				СтрШаблон(
					НСтр("ru = 'Файл ""%1"" уже занят пользователем ""%2"".
						|Открыть его в режиме только для чтения ?'"),
					ДанныеФайла.ПолноеНаименованиеВерсии,
					Строка(ДанныеФайла.Редактирует));
					
			ПараметрыОбработчика = Новый Структура;
			ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
					
			ОбработчикВопроса = Новый ОписаниеОповещения("ПослеВопросаФайлРезультатаЗанятДругим", 
				ЭтотОбъект, ПараметрыОбработчика);
					
			ПоказатьВопрос(ОбработчикВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Возврат;
			
		КонецЕсли;
		
		КомандыРаботыСФайламиКлиент.Редактировать(Приложение);
		
	Иначе
		
		РаботаСФайламиКлиент.ОткрытьФайлСОповещением(
			Неопределено,
			ДанныеФайла,
			УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаФайлРезультатаЗанятДругим(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат; // ничего не делаем
	КонецЕсли;
	
	РаботаСФайламиКлиент.ОткрытьФайлСОповещением(Неопределено, 
		ПараметрыВыполнения.ДанныеФайла, УникальныйИдентификатор); 
	
КонецПроцедуры	

&НаКлиенте
Процедура ФайлыРезультатаОбновитьИзФайлаНаДискеСтроку(ДанныеСтроки)
	
	Если ДанныеСтроки = Неопределено
		Или ДанныеСтроки.Приложение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Приложение = ДанныеСтроки.Приложение;
	
	Если ТипЗнч(Приложение) = Тип("СправочникСсылка.Файлы") Тогда
		
		Обработчик = Новый ОписаниеОповещения("ОбновитьВОбработкеОповещения", ЭтотОбъект, Новый Структура);
		
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(Приложение);
		
		РаботаСФайламиКлиент.ОбновитьИзФайлаНаДиске(
			Обработчик,
			ДанныеФайла,
			УникальныйИдентификатор);
		
	Иначе
		
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите файл.'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОсвободитьПриложениеРезультатаСтроки(ДанныеСтроки)
	
	Если ДанныеСтроки = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыОсвобожденияФайла = РаботаСФайламиКлиент.ПараметрыОсвобожденияФайла(
		Неопределено, 
		ДанныеСтроки.Приложение);
	ПараметрыОсвобожденияФайла.ХранитьВерсии = Ложь;
	ПараметрыОсвобожденияФайла.РедактируетТекущийПользователь = ДанныеСтроки.РедактируетТекущийПользователь;
	ПараметрыОсвобожденияФайла.Редактирует = ДанныеСтроки.Редактирует;
	ПараметрыОсвобожденияФайла.УникальныйИдентификатор = УникальныйИдентификатор;
	РаботаСФайламиКлиент.ОсвободитьФайлСОповещением(ПараметрыОсвобожденияФайла);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКомандыВыполнения()
	
	РодительКомандВыполнения = Элементы.ГруппаКомандыДляВыполнения;
	ВставитьПеред = Элементы.ВыбратьШаблонДляВыполненияЗадачи;
	
	РаботаСЗадачами.ОбновитьКомандыВыполнения(
		ЭтотОбъект,
		ДанныеКомандВыполнения,
		РодительКомандВыполнения,
		ВставитьПеред);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьКнопкиПорционногоПредпросмотра()
	
	ИмяРодителяКоманды = "ГруппаСтраницыКнопкиПеремотки";
	ОбзорФайловСервер.СоздатьКнопкиПорционногоПредпросмотра(ЭтотОбъект, ИмяРодителяКоманды);
	
КонецПроцедуры	

&НаСервере
Процедура ОбновитьКнопкиДинамическогоСписка()
	
	ОбзорФайловКлиентСервер.ОбновитьКнопкиДинамическогоСписка(
		ЭтотОбъект,
		НомерПорции,
		ВсегоПорцийПредпросмотра);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКнопкиДинамическогоСпискаКлиент()
	
	ОбзорФайловКлиентСервер.ОбновитьКнопкиДинамическогоСписка(
		ЭтотОбъект,
		НомерПорции,
		ВсегоПорцийПредпросмотра);
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницаВыборЗавершение(НоваяСтраница, ДополнительныеПараметры) Экспорт
	
	ЧастьВыбор(НоваяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура ЧастьВыбор(НоваяСтраница)
	
	Если НоваяСтраница = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НомерПорции = НоваяСтраница;
	
	ТекущиеДанные = Элементы.ДеревоПриложений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено 
		Или ТекущиеДанные.ТипСтроки <> ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Файл") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийФайл = ТекущиеДанные.Приложение;
	
	ДокументPDF = Неопределено;
	
	ПараметрыHTMLПредставление = ОбзорФайловКлиентСервер.СтруктураПараметровHTMLПредставлениеФайла();    
	ПараметрыHTMLПредставление.МаксимальноеЧислоСтраницДляПредпросмотра = МаксимальноеЧислоСтраницДляПредпросмотра;
	ПараметрыHTMLПредставление.Расширение = ТекущиеДанные.Расширение;
	ПараметрыHTMLПредставление.Размер = ТекущиеДанные.ТекущаяВерсияРазмер;
	ПараметрыHTMLПредставление.УникальныйИдентификатор = УникальныйИдентификатор;
	
	ПараметрыHTMLПредставление.НомерПорции = НомерПорции - 1; // номера для пользователя - с 1, в СУБД - с 0
	
	ДанныеОбзора = ОбзорФайловКлиент.HTMLПредставлениеФайла(
		ТекущийФайл,
		ПараметрыHTMLПредставление,
		ДокументPDF);
	
	ОбзорФайловКлиент.ЗаполнитьРеквизитыОбзора(ДанныеОбзора, ОписаниеHTMLФайла);
	
	Элементы.ГруппаПредпросмотрУрезан.Видимость = ПараметрыHTMLПредставление.ПредпросмотрУрезан;
	МасштабироватьPDFИКартинки = ПараметрыHTMLПредставление.МасштабироватьPDFИКартинки;
	УстановитьВидимостьКомандМасштаба(ТекущиеДанные.Расширение);
	ТекущиеДанные.ПредпросмотрЕстьВБазе = Истина; 
	
	ВсегоПорцийПредпросмотра = ПараметрыHTMLПредставление.ВсегоПорцийПредпросмотра;
	
	Если ДокументPDF = Неопределено Тогда
		Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
	Иначе
		Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаPdf;
		//@skip-check bsl-legacy-check-string-literal
		ЭтотОбъект["ДокументPdfРеквизит"] = ДокументPDF;
		Элементы.ДокументPdfПоле.НомерТекущейСтраницы = 1;
	КонецЕсли;     
	
	ОбновитьКнопкиДинамическогоСпискаКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредупредитьОЗаполненииДополнительныхРеквизитов()
	
	СтрокаДополнительныеРеквизиты = РаботаСЗадачамиКлиентСервер.НайтиСтрокуДереваПриложений(
		ДеревоПриложений,
		ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.ДополнительныеРеквизиты"));
	Если СтрокаДополнительныеРеквизиты <> Неопределено Тогда
		Элементы.ДеревоПриложений.ТекущаяСтрока = СтрокаДополнительныеРеквизиты.ПолучитьИдентификатор();
		ТекущаяСтрокаДереваПриложений = Элементы.ДеревоПриложений.ТекущаяСтрока;
	КонецЕсли;
	
	Элементы.СтраницыПросмотра.ТекущаяСтраница = Элементы.СтраницаДополнительныеРеквизиты;
	
	// Разделение как в списке на различные вызов не требуется, т.к. данные уже заполнены при открытии формы.
	ПредупредитьОЗаполненииДополнительныхРеквизитовНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПредупредитьОЗаполненииДополнительныхРеквизитовНаСервере()
	
	ОбновитьЭлементыДополнительныхРеквизитов();
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(
		ЭтотОбъект,
		Ложь,
		Новый Массив,
		ТекущийИсточникДействияДанные);
	
КонецПроцедуры

&НаКлиенте
Функция ЕстьПриложение(Приложение)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Приложение", Приложение);
	НайденнаяСтрока = ОбщегоНазначенияДокументооборотКлиентСервер.НайтиСтрокуДерева(
		ДеревоПриложений,
		СтруктураОтбора);
	
	ОбъектЕстьВДеревеПриложений = НайденнаяСтрока <> Неопределено;
	
	Возврат ОбъектЕстьВДеревеПриложений;
	
КонецФункции

#КонецОбласти
