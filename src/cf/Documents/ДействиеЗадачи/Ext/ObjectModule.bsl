#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает трудозатраты по действию задачи в часах.
// 
// Возвращаемое значение:
//  Число - Трудозатраты в часах.
//
Функция Трудозатраты() Экспорт
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат 0;
	КонецЕсли;
	
	ИсточникиТрудозатрат = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ссылка);
	
	ТрудозатратыСекунд = УчетВремени.ФактическиеТрудозатратыПоИсточникам(ИсточникиТрудозатрат);
	ТрудозатратыЧасов = ТрудозатратыСекунд / 3600;
	
	Возврат ТрудозатратыЧасов;
	
КонецФункции

// Возвращает описание задачи в формате HTML.
//
// Параметры:
//  ТекущееДействиеЗадачи - ДокументСсылка.ДействиеЗадачи, Неопределено - Текущее действие задачи.
// 
// Возвращаемое значение:
//  Строка - Описание HTML.
//
Функция ОписаниеHTML(ТекущееДействиеЗадачи = Неопределено) Экспорт
	
	ЗадачаОбъект = Задача.ПолучитьОбъект();
	
	Возврат ЗадачаОбъект.ОписаниеHTML(Ссылка, Истина);
	
КонецФункции

// Возвращает описание задачи в формате простого текста.
// 
// Возвращаемое значение:
//  Строка - Описание в формате простого текста.
//
Функция ОписаниеПростойТекст() Экспорт
	
	ЗадачаОбъект = Задача.ПолучитьОбъект();
	
	Возврат ЗадачаОбъект.ОписаниеПростойТекст(Ссылка);
	
КонецФункции

// Возвращает срок действия задачи.
// 
// Возвращаемое значение:
//  Дата - Срок.
//
Функция Срок() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СрокЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задача, "Срок");
	
	Возврат Документы.ДействиеЗадачи.Срок(ЕстьОсобыйСрок, ОсобыйСрок, СрокЗадачи);
	
КонецФункции

// Устанавливает описание.
//
// Параметры:
//  НовоеОписание - Строка - Описание.
//
Процедура УстановитьОписание(НовоеОписание) Экспорт
	
	ОсобоеОписание = НовоеОписание;
	
	НовоеОписаниеФорматированное = Новый ФорматированныйДокумент;
	НовоеОписаниеФорматированное.Добавить(НовоеОписание, Тип("ТекстФорматированногоДокумента"));
	ОсобоеОписаниеФорматированное = Новый ХранилищеЗначения(НовоеОписаниеФорматированное);
	
КонецПроцедуры

// Устанавливает форматированное описание.
//
// Параметры:
//  НовоеОписаниеФорматированное - ФорматированныйДокумент - Форматированное описание.
//
Процедура УстановитьОписаниеФорматированное(НовоеОписаниеФорматированное) Экспорт
	
	ОсобоеОписаниеФорматированное = Новый ХранилищеЗначения(НовоеОписаниеФорматированное);
	
	НовоеОписание = НовоеОписаниеФорматированное.ПолучитьТекст();
	ОсобоеОписание = НовоеОписание;
	
КонецПроцедуры

// Устанавливает состояние действия задачи.
// 
// Параметры:
//  НовоеСостояниеУчастникаЗадачи - СправочникСсылка.СостоянияУчастниковЗадач - Новое состояние.
//  НовоеКтоОтметил - СправочникСсылка.Сотрудники - Кто отметил в программе.
//  ОбновитьЗадачуПоСостоянию - Булево - Необходимо обновить задачу по состоянию.
//
Процедура УстановитьСостояние(НовоеСостояниеУчастникаЗадачи, НовоеКтоОтметил, ОбновитьЗадачуПоСостоянию) Экспорт
	
	СостояниеУчастникаЗадачи = НовоеСостояниеУчастникаЗадачи;
	
	КешНСИЗадач = РаботаСЗадачамиПовтИсп.КешНСИЗадач();
	РеквизитыСостоянияВидСостояния = КешНСИЗадач.ВидыСостоянийУчастниковЗадач[СостояниеУчастникаЗадачи];
	РеквизитыСостоянияРезультатДействия = КешНСИЗадач.РезультатыСостоянийУчастниковЗадач[СостояниеУчастникаЗадачи];
	
	ЭтоОтмененноеДействие = Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоОтмененноеДействие(
		РеквизитыСостоянияВидСостояния);
	
	ЭтоНачатоеДействие = Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоНачатоеДействие(
		РеквизитыСостоянияВидСостояния);
	Если ЭтоОтмененноеДействие Тогда
		// Не требуется изменений.
	ИначеЕсли ЭтоНачатоеДействие И Не ЗначениеЗаполнено(ДатаНачала) Тогда
		ДатаНачала = ТекущаяДатаСеанса();
	ИначеЕсли Не ЭтоНачатоеДействие И ЗначениеЗаполнено(ДатаНачала) Тогда
		ДатаНачала = Дата(1, 1, 1);
	КонецЕсли;
	
	ЭтоВыполненноеДействие = Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоВыполненноеДействие(
		РеквизитыСостоянияВидСостояния);
	ЭтоОжидающееПроверкиДействие = Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоОжидающееПроверкиДействие(
		РеквизитыСостоянияВидСостояния);
	Если ЭтоОтмененноеДействие Тогда
		// Не требуется изменений.
	ИначеЕсли ЭтоВыполненноеДействие Или ЭтоОжидающееПроверкиДействие Тогда
		
		Если Не ЗначениеЗаполнено(ДатаВыполнения) Тогда
			ДатаВыполнения = ТекущаяДатаСеанса();
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(КтоОтметил) Тогда
			КтоОтметил = НовоеКтоОтметил;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ФактическийИсполнитель) Тогда
			
			Если ДополнительныеСвойства.Свойство("ЗакрытьЗадачу")
				И ДополнительныеСвойства.ЗакрытьЗадачу Тогда
				ФактическийИсполнитель =
					Справочники.ФактическиеИсполнители.НайтиСоздатьФактическогоИсполнителя(
						Исполнитель,
						Исполнитель,
						Исполнитель,
						КтоОтметил);
			КонецЕсли;
		
		КонецЕсли;
		
	Иначе
		
		ДатаВыполнения = Дата(1, 1, 1);
		КтоОтметил = Справочники.Сотрудники.ПустаяСсылка();
		ФактическийИсполнитель = Справочники.ФактическиеИсполнители.ПустаяСсылка();
		
	КонецЕсли;
	
	РезультатДействия = РеквизитыСостоянияРезультатДействия;
	
	Если ОбновитьЗадачуПоСостоянию Тогда
		ДополнительныеСвойства.Вставить("ОбновитьЗадачуПоСостоянию");
	КонецЕсли;
	
КонецПроцедуры

// Отмечает направление на исполнение действия задачи.
//
// Параметры:
//  ВидЗадачи - СправочникСсылка.ВидыЗадач. 
//  ДатаСозданияЗадачи- Дата.
//
Процедура ОтметитьНаправлениеНаИсполнение(ВидЗадачи, ДатаСозданияЗадачи) Экспорт
	
	ДанныеВидаЗадачи = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(ВидЗадачи);
	
	Дата = ДатаСозданияЗадачи;
	
	ФактическийИсполнитель =
		Справочники.ФактическиеИсполнители.ПустаяСсылка();
		
	УстановитьСостояние(
		ДанныеВидаЗадачи.СостояниеУчастниковНовая,
		Сотрудники.ОсновнойСотрудник(),
		Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	// Вид действия.
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ВидДействия") Тогда
		ВидДействия = ДанныеЗаполнения.ВидДействия;
	КонецЕсли;
	
	// Вид участника.
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ВидУчастника") Тогда
		ВидУчастника = ДанныеЗаполнения.ВидУчастника;
	КонецЕсли;
	
	// Дата.
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("Дата") Тогда
		Дата = ДанныеЗаполнения.Дата;
	ИначеЕсли Не ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	// Дата выполнения.
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ДатаВыполнения") Тогда
		ДатаВыполнения = ДанныеЗаполнения.ДатаВыполнения;
	КонецЕсли;
	
	// Дата начала.
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ДатаНачала") Тогда
		ДатаНачала = ДанныеЗаполнения.ДатаНачала;
	КонецЕсли;
	
	// Особый заголовок.
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ОсобыйЗаголовок") Тогда
		ОсобыйЗаголовок = ДанныеЗаполнения.ОсобыйЗаголовок;
	КонецЕсли;
	
	// Задача.
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("Задача") Тогда
		Задача = ДанныеЗаполнения.Задача;
	КонецЕсли;
	
	// Особый автор.
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ОсобыйАвтор") Тогда
		ОсобыйАвтор = ДанныеЗаполнения.ОсобыйАвтор;
	КонецЕсли;
	
	// Особый срок.
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ОсобыйСрок") Тогда
		ЕстьОсобыйСрок = ДанныеЗаполнения.ОсобыйСрок <> Неопределено;
		ОсобыйСрок = ДанныеЗаполнения.ОсобыйСрок;
	КонецЕсли;
	
	// Исполнитель.
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ИсточникДанных") Тогда
		ИсточникДанных = ДанныеЗаполнения.ИсточникДанных;
	КонецЕсли;
	
	// Исполнитель.
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("Исполнитель") Тогда
		Исполнитель = ДанныеЗаполнения.Исполнитель;
	КонецЕсли;
	
	// Источник.
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("Источник") Тогда
		Источник = ДанныеЗаполнения.Источник;
	КонецЕсли;
	
	// Пометка удаления.
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ПометкаУдаления") Тогда
		ПометкаУдаления = ДанныеЗаполнения.ПометкаУдаления;
	КонецЕсли;
	
	// Кто отметил.
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("КтоОтметил") Тогда
		КтоОтметил = ДанныеЗаполнения.КтоОтметил;
	КонецЕсли;
	
	// Результат действия.
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("РезультатДействия") Тогда
		РезультатДействия = ДанныеЗаполнения.РезультатДействия;
	КонецЕсли;
	
	// Результат действия текстом.
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("РезультатДействияТекстом") Тогда
		РезультатДействияТекстом = ДанныеЗаполнения.РезультатДействияТекстом;
	КонецЕсли;
	
	// Состояние участника задачи.
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("СостояниеУчастникаЗадачи") Тогда
		СостояниеУчастникаЗадачи = ДанныеЗаполнения.СостояниеУчастникаЗадачи;
	КонецЕсли;
	
	// Флаг.
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("Флаг") Тогда
		Флаг = ДанныеЗаполнения.Флаг;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Источник) И ТипЗнч(Источник) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		ФактическийИсполнитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Источник, "ФактическийИсполнитель");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияДокументооборот.УстановитьДополнительноеСвойствоЭтоНовый(ЭтотОбъект);
	ОбщегоНазначенияДокументооборот.УстановитьДополнительноеСвойствоПредыдущиеЗначенияРеквизитов(ЭтотОбъект);
	ИнтеграцияЗадач.ИнициализироватьКонтекстИзмененияЗадачиДействияЗадачи(ЭтотОбъект);
	
	ЕстьПриложения = Приложения.Количество() > 0;
	МоиДокументыСобытия.ДобавлениеВМоиДокументыПередЗаписьюПередЗаписью(ЭтотОбъект, Отказ);
	
	ВерсияОбновления = 1;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоНовый = ДополнительныеСвойства.ЭтоНовый;
	ПредыдущиеЗначенияРеквизитов = ДополнительныеСвойства.ПредыдущиеЗначенияРеквизитов;
	
	УстановленаПометкаУдаления =
		ПометкаУдаления = Истина
		И ОбщегоНазначенияДокументооборот.ИзменилосьЗначениеРеквизитов(ЭтотОбъект, "ПометкаУдаления");
	Если УстановленаПометкаУдаления Тогда
		
		Для Каждого Подзадача Из Документы.ДействиеЗадачи.НайтиПодзадачи(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ссылка)) Цикл
			
			ПодазадачаОбъект = Подзадача.ПолучитьОбъект();
			ПодазадачаОбъект.УстановитьПометкуУдаления(Истина);
			
		КонецЦикла;
		
		ПротоколированиеРаботыСотрудников.ЗаписатьПометкуУдаления(Ссылка, ПометкаУдаления);
		
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ОбновитьЗадачуПоСостоянию") Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Если ДополнительныеСвойства.Свойство("ДействияДляВозврата") Тогда
			ДействияДляВозврата = ДополнительныеСвойства.ДействияДляВозврата;
		Иначе
			ДействияДляВозврата = Новый Массив;
		КонецЕсли;
		
		Документы.Задача.ОбновитьЗадачуПоСостояниюДействия(
			Задача,
			ЭтотОбъект,
			ДействияДляВозврата,
			Ложь);
		
		УстановитьПривилегированныйРежим(Ложь);
		
		ДополнительныеСвойства.Удалить("ОбновитьЗадачуПоСостоянию");
		
	КонецЕсли;
	
	ОбработатьДетекторыБизнесСобытий();
	ИнтеграцияЗадач.ОбработатьИзменениеРеквизитовДействияЗадачи(ЭтотОбъект);
	
	Если Не ДополнительныеСвойства.Свойство("НаправитьНаИсполнение")
		И ОбщегоНазначенияДокументооборот.ИзменилосьЗначениеРеквизитов(
			ЭтотОбъект, "СостояниеУчастникаЗадачи") Тогда
		
		Если Не ДополнительныеСвойства.Свойство("ОбновлениеПоИсточнику")
			Или ДополнительныеСвойства.ОбновлениеПоИсточнику = Ложь Тогда
			РегистрыСведений.ОчередьОбновленияКэширующихДанных.Добавить(
				Метаданные.Справочники.Контроль.ПолноеИмя(),
				Метаданные().ПолноеИмя(),
				Ссылка);
		КонецЕсли;
		
		РаботаСЗадачами.ОбработатьИзменениеСостоянияДействияЗадачи(ЭтотОбъект);
		
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ЭтоНовый") И ДополнительныеСвойства.ЭтоНовый
		Или ОбщегоНазначенияДокументооборот.ИзменилосьЗначениеРеквизитов(ЭтотОбъект, "Исполнитель") Тогда
		
		// Запишем непосредственного исполнителя
		Если ЗначениеЗаполнено(Исполнитель) Тогда
			
			Набор = РегистрыСведений.ВсеИсполнителиДействийЗадач.СоздатьНаборЗаписей();
			
			Набор.Отбор.ДействиеЗадачи.Установить(Ссылка);
			Набор.Отбор.Исполнитель.Установить(Исполнитель);
			Набор.Отбор.Основание.Установить(Справочники.ЗамещающиеИПомощники.ПустаяСсылка());
			
			Запись = Набор.Добавить();
			Запись.ДействиеЗадачи = Ссылка;
			Запись.Исполнитель = Исполнитель;
			
			Набор.ДополнительныеСвойства.Вставить("ПропуститьОпределениеЗависимыхПрав", Истина);
			УстановитьПривилегированныйРежим(Истина);
			Набор.Записать();
			УстановитьПривилегированныйРежим(Ложь);
			
		КонецЕсли;
		
		// Дополним исполнителей замещающими
		КэшДанных = Новый Структура;
		КэшДанных.Вставить("ДанныеДействияЗадачи", ЭтотОбъект);
		Если ДополнительныеСвойства.Свойство("ДанныеЗадачи") Тогда
			КэшДанных.Вставить("ДанныеЗадачи", ДополнительныеСвойства.ДанныеЗадачи);
		КонецЕсли;
		ЗамещающиеИПомощники.ЗаписатьДоступЗамещающихПоДействиюЗадачи(Ссылка, КэшДанных);
		
	КонецЕсли;
	
	Если Не ДополнительныеСвойства.Свойство("НаправитьНаИсполнение") Тогда
		
		// При направлении на исполнение права не проверяем - они уже были проверены в рамках задачи.
		
		// Права на приложения проверяются и расширяются не перед записью, а при записи,
		// т.к. часть прав приложений зависит от самой задачи - пока нового исполнителя нет в задачи,
		// у него нет и прав на приложения.
		РасширитьРабочиеГруппыПриложений();
		
	КонецЕсли;
	
	ИзменилсяОсобыйСрок =
		ОбщегоНазначенияДокументооборот.ИзменилосьЗначениеРеквизитов(ЭтотОбъект, "ОсобыйСрок");
	Если Не ЭтоНовый 
		И ЗначениеЗаполнено(ПредыдущиеЗначенияРеквизитов.СостояниеУчастникаЗадачи)
		И ИзменилсяОсобыйСрок Тогда
		
		КонтекстПереносаСрока = РегистрыСведений.ИсторияЗадач.КонтекстПереносаСрока();
		КонтекстПереносаСрока.СтарыйСрок = ПредыдущиеЗначенияРеквизитов.ОсобыйСрок;
		КонтекстПереносаСрока.НовыйСрок = ОсобыйСрок;
		
		Если ДополнительныеСвойства.Свойство("ПеренесСрок") Тогда
			ПеренесСрок = ДополнительныеСвойства.ПеренесСрок;
		Иначе
			ПеренесСрок = ПользователиДокументооборот.ОлицетворяемыйПользователь();
		КонецЕсли;
		
		РегистрыСведений.ИсторияЗадач.Добавить(
			Задача,
			Ссылка,
			ТекущаяДатаСеанса(),
			Справочники.СобытияЗадач.ПеренесенСрок,
			КонтекстПереносаСрока,
			ПеренесСрок);
		
		ДополнительныеСвойства.Вставить("ПеренесенСрокЗарегистрировано", Истина);
		
	КонецЕсли;
	
	КэшДанных = Новый Структура;
	КэшДанных.Вставить("ДанныеДействияЗадачи", ЭтотОбъект);
	Если ДополнительныеСвойства.Свойство("ДанныеЗадачи") Тогда
		КэшДанных.Вставить("ДанныеЗадачи", ДополнительныеСвойства.ДанныеЗадачи);
	КонецЕсли;
	РегистрыСведений.РеестрЗадачПоИсполнителям.ОбновитьПоДействиюЗадачи(Ссылка, КэшДанных);
	ДополнительныеСвойства.Вставить("РеестрыДействияЗадачи", КэшДанных.РеестрыДействияЗадачи);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	КэшируемыеРеквизитыДействия = РегистрыНакопления.КоличествоЗадачПоИсполнителям.КэшируемыеРеквизитыДействий();
	ОбщегоНазначенияДокументооборот.ДополнитьОтслеживаемыеРеквизиты(
		КэшируемыеРеквизитыДействия,
		РегистрыСведений.РеестрЗадачПоИсполнителям.КэшируемыеРеквизитыДействий());
	РеквизитыДействия = Новый Структура(КэшируемыеРеквизитыДействия);
	ЗаполнитьЗначенияСвойств(РеквизитыДействия, ЭтотОбъект, КэшируемыеРеквизитыДействия);
	
	// Количество задач.
	Движения.КоличествоЗадачПоИсполнителям.Записывать = Истина;
	КэшДанных = Новый Структура;
	КэшДанных.Вставить("ДанныеДействияЗадачи", ЭтотОбъект);
	Если ДополнительныеСвойства.Свойство("ДанныеЗадачи") Тогда
		КэшДанных.Вставить("ДанныеЗадачи", ДополнительныеСвойства.ДанныеЗадачи);
	КонецЕсли;
	Если ДополнительныеСвойства.Свойство("РеестрыДействияЗадачи") Тогда
		РеестрыЗадачи = ДополнительныеСвойства.РеестрыДействияЗадачи;
	Иначе
		РеестрыЗадачи = Справочники.РеестрыЗадач.РеестрыДействияЗадачи(Ссылка, КэшДанных);
	КонецЕсли;
	ДанныеРеестра = РегистрыНакопления.КоличествоЗадачПоИсполнителям.ДанныеРеестра(Ссылка, КэшДанных);
	Для Каждого РеестрЗадачи Из РеестрыЗадачи Цикл
		Движение = Движения.КоличествоЗадачПоИсполнителям.Добавить();
		Движение.РеестрЗадач = РеестрЗадачи;
		ЗаполнитьЗначенияСвойств(Движение, ДанныеРеестра);
	КонецЦикла;
	
	МоиДокументыСобытия.ДобавлениеВМоиДокументыПриПроведении(ЭтотОбъект, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Обрабатывает детекторы бизнес-событий при записи.
//
Процедура ОбработатьДетекторыБизнесСобытий()
	
	КонтекстИзмененияРеквизитов = ДополнительныеСвойства.КонтекстИзмененияРеквизитов;
	ЗарегистрированныеБизнесСобытия = КонтекстИзмененияРеквизитов.ПроизошедшиеБизнесСобытия;
	
	СтароеСостояние = ДополнительныеСвойства.ПредыдущиеЗначенияРеквизитов.СостояниеУчастникаЗадачи;
	НовоеСостояние = СостояниеУчастникаЗадачи;
	
	ВидСтарогоСостояния = РаботаСЗадачамиПовтИсп.ВидСостоянияУчастниковЗадач(СтароеСостояние);
	ВидНовогоСостояния = РаботаСЗадачамиПовтИсп.ВидСостоянияУчастниковЗадач(НовоеСостояние);
	
	БылИсполнитель = ДополнительныеСвойства.ПредыдущиеЗначенияРеквизитов.Исполнитель;
	
	ЭтоВзятиеВРаботуРолевойЗадачи =
		Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоНовоеДействие(ВидСтарогоСостояния)
		И Не Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоНовоеДействие(ВидНовогоСостояния)
		И ТипЗнч(БылИсполнитель) = Тип("СправочникСсылка.ПолныеРоли")
		И ТипЗнч(Исполнитель) <> Тип("СправочникСсылка.ПолныеРоли");
	
	ОбнаруженаПеренаправленнаяЗадача =
		Не ЭтоВзятиеВРаботуРолевойЗадачи
		И Исполнитель <> БылИсполнитель
		И ЗначениеЗаполнено(СтароеСостояние)
		И Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоОжидаемоеДействие(ВидНовогоСостояния);
	Если ОбнаруженаПеренаправленнаяЗадача Тогда
		
		ПараметрыСобытия = Новый Структура("БылИсполнитель, СталИсполнитель");
		ПараметрыСобытия.БылИсполнитель = БылИсполнитель;
		ПараметрыСобытия.СталИсполнитель = Исполнитель;
		
		// тут формируем КонтекстСобытия (XML)
		ИнформацияДляЗаписиXML = Новый ЗаписьXML;
		ИнформацияДляЗаписиXML.УстановитьСтроку();
		
		НовыйСериализаторXDTO = Новый СериализаторXDTO(ФабрикаXDTO);
		НовыйСериализаторXDTO.ЗаписатьXML(
			ИнформацияДляЗаписиXML,
			ПараметрыСобытия,
			НазначениеТипаXML.Явное);
		
		СтрокаXML = ИнформацияДляЗаписиXML.Закрыть(); 
		КонтекстСобытия = Новый ХранилищеЗначения(СтрокаXML);
		
		БизнесСобытияВызовСервера.ЗарегистрироватьСобытие(
			Ссылка,
			Справочники.ВидыБизнесСобытий.ПеренаправлениеЗадачи,
			КонтекстСобытия);
		ЗарегистрированныеБизнесСобытия.Добавить(Справочники.ВидыБизнесСобытий.ПеренаправлениеЗадачи);
		
	КонецЕсли;
	
	ОбнаруженоИзменениеСостояния =
		Не Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоОжидаемоеДействие(ВидСтарогоСостояния)
		И Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоОжидаемоеДействие(ВидНовогоСостояния);
	
	ОбнаруженаНоваяЗадача = ОбнаруженоИзменениеСостояния Или ОбнаруженаПеренаправленнаяЗадача;
	Если ОбнаруженаНоваяЗадача Тогда
		БизнесСобытияВызовСервера.ЗарегистрироватьСобытие(
			Ссылка,
			Справочники.ВидыБизнесСобытий.НоваяЗадача);
		ЗарегистрированныеБизнесСобытия.Добавить(Справочники.ВидыБизнесСобытий.НоваяЗадача);
	КонецЕсли;
	
	ОбнаруженаОтменаЗадачи =
		Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоОжидаемоеДействие(ВидСтарогоСостояния)
		И Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоОтмененноеДействие(ВидНовогоСостояния);
	Если ОбнаруженаОтменаЗадачи Тогда
		БизнесСобытияВызовСервера.ЗарегистрироватьСобытие(
			Ссылка,
			Справочники.ВидыБизнесСобытий.ОтменаЗадачи);
		ЗарегистрированныеБизнесСобытия.Добавить(Справочники.ВидыБизнесСобытий.ОтменаЗадачи);
	КонецЕсли;
	
	ОбнаруженоВыполнениеЗадачи =
		(Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоОжидаемоеДействие(ВидСтарогоСостояния)
			Или СтароеСостояние = Справочники.СостоянияУчастниковЗадач.ВОчереди)
		И (Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоВыполненноеДействие(ВидНовогоСостояния)
			Или Перечисления.ВидыСостоянийЗадач.ЭтоОжидающаяПроверкиЗадача(ВидНовогоСостояния))
		И Не НовоеСостояние = Справочники.СостоянияУчастниковЗадач.ВОчереди;
	Если ОбнаруженоВыполнениеЗадачи Тогда
		БизнесСобытияВызовСервера.ЗарегистрироватьСобытие(
			Ссылка,
			Справочники.ВидыБизнесСобытий.ВыполнениеЗадачи);
		ЗарегистрированныеБизнесСобытия.Добавить(Справочники.ВидыБизнесСобытий.ВыполнениеЗадачи);
	КонецЕсли;
	
	ОбнаруженоОткладываниеЗадачи =
		Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоОжидаемоеДействие(ВидСтарогоСостояния)
		И Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоОтложенноеДействие(ВидНовогоСостояния);
	Если ОбнаруженоОткладываниеЗадачи Тогда
		БизнесСобытияВызовСервера.ЗарегистрироватьСобытие(
			Ссылка,
			Справочники.ВидыБизнесСобытий.ОткладываниеЗадачи);
		ЗарегистрированныеБизнесСобытия.Добавить(Справочники.ВидыБизнесСобытий.ОткладываниеЗадачи);
	КонецЕсли;
	
КонецПроцедуры

// Обновляет рабочие группы приложений.
//
Процедура РасширитьРабочиеГруппыПриложений()
	
	ПредыдущиеЗначенияРеквизитов = ДополнительныеСвойства.ПредыдущиеЗначенияРеквизитов;
	
	Если ПометкаУдаления
		Или Не ОбщегоНазначенияДокументооборот.ИзменилосьЗначениеРеквизитов(
			ЭтотОбъект,
			"Исполнитель, Приложения") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	РеквизитыЗадачи =
		ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Задача, "Автор, Участники, Источник, Приложения");
	РеквизитыЗадачи.Участники = РеквизитыЗадачи.Участники.Выгрузить();
	РеквизитыЗадачи.Приложения = РеквизитыЗадачи.Приложения.Выгрузить();
	
	// Права ставим в том числе на все остальные приложения к отчетам об исполнении.
	ВсеДругиеДействияЗадачи = Новый Массив;
	Для Каждого СтрокаУчастника Из РеквизитыЗадачи.Участники Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаУчастника.ДействиеУчастника)
			Или СтрокаУчастника.ДействиеУчастника = Ссылка Тогда
			Продолжить;
		КонецЕсли;
		
		ВсеДругиеДействияЗадачи.Добавить(СтрокаУчастника.ДействиеУчастника);
		
	КонецЦикла;
	
	РеквизитыДействийЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		ВсеДругиеДействияЗадачи,
		"Исполнитель, Приложения");
	
	ПриложенияДействийЗадачи = Новый Массив;
	Для Каждого ДействиеЗадачи Из ВсеДругиеДействияЗадачи Цикл
		
		РеквизитыДействияЗадачи = РеквизитыДействийЗадачи[ДействиеЗадачи];
		Если РеквизитыДействияЗадачи = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПриложенияДействияЗадачи =
			РеквизитыДействияЗадачи.Приложения.Выгрузить().ВыгрузитьКолонку("Приложение");
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			ПриложенияДействийЗадачи,
			ПриложенияДействияЗадачи);
		
	КонецЦикла;
	
	// Права ставим в том числе на все приложения к задаче.
	ПриложенияЗадачи = РеквизитыЗадачи.Приложения.ВыгрузитьКолонку("Приложение");
	
	// На новые приложения предоставим права всем участникам.
	СтарыеПриложения = ПредыдущиеЗначенияРеквизитов.Приложения.ВыгрузитьКолонку("Приложение");
	
	КоличествоЭлементов = СтарыеПриложения.Количество();
	Для Индекс = 1 По КоличествоЭлементов Цикл
		
		ОбратныйИндекс = КоличествоЭлементов - Индекс;
		ЭлементМассива = СтарыеПриложения[ОбратныйИндекс];
		Если Не РаботаСЗадачамиКлиентСервер.ЭтоПриложениеБезПрав(ЭлементМассива) Тогда
			Продолжить;
		КонецЕсли;
		
		СтарыеПриложения.Удалить(ОбратныйИндекс);
		
	КонецЦикла;
	
	РаботаСЗадачами.ИсключитьФайлыЗадач(СтарыеПриложения);
	
	НовыеПриложения = Приложения.ВыгрузитьКолонку("Приложение");
	
	КоличествоЭлементов = НовыеПриложения.Количество();
	Для Индекс = 1 По КоличествоЭлементов Цикл
		
		ОбратныйИндекс = КоличествоЭлементов - Индекс;
		ЭлементМассива = НовыеПриложения[ОбратныйИндекс];
		Если Не РаботаСЗадачамиКлиентСервер.ЭтоПриложениеБезПрав(ЭлементМассива) Тогда
			Продолжить;
		КонецЕсли;
		
		НовыеПриложения.Удалить(ОбратныйИндекс);
		
	КонецЦикла;
	
	РаботаСЗадачами.ИсключитьФайлыЗадач(НовыеПриложения);
	
	ДобавленныеПриложения = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
		НовыеПриложения,
		СтарыеПриложения);
	
	ВсеПриложения = Приложения.ВыгрузитьКолонку("Приложение");
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ВсеПриложения,
		ПриложенияДействийЗадачи);
	Если Не ЗначениеЗаполнено(РеквизитыЗадачи.Источник) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			ВсеПриложения,
			ПриложенияЗадачи);
	КонецЕсли;
	
	КоличествоЭлементов = ВсеПриложения.Количество();
	Для Индекс = 1 По КоличествоЭлементов Цикл
		
		ОбратныйИндекс = КоличествоЭлементов - Индекс;
		ЭлементМассива = ВсеПриложения[ОбратныйИндекс];
		Если Не РаботаСЗадачамиКлиентСервер.ЭтоПриложениеБезПрав(ЭлементМассива) Тогда
			Продолжить;
		КонецЕсли;
		
		ВсеПриложения.Удалить(ОбратныйИндекс);
		
	КонецЦикла;
	
	РаботаСЗадачами.ИсключитьФайлыЗадач(ВсеПриложения);
	
	// Права предоставим в том числе всем участникам, кому задача перенаправлена.
	ИсполнителиДействий = Новый Массив;
	Для Каждого ДействиеЗадачи Из ВсеДругиеДействияЗадачи Цикл
		
		РеквизитыДействияЗадачи = РеквизитыДействийЗадачи[ДействиеЗадачи];
		Если РеквизитыДействияЗадачи = Неопределено
			Или Не ЗначениеЗаполнено(РеквизитыДействияЗадачи.Исполнитель)
			Или ИсполнителиДействий.Найти(РеквизитыДействияЗадачи.Исполнитель) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИсполнителиДействий.Добавить(РеквизитыДействияЗадачи.Исполнитель);
		
	КонецЦикла;
	
	// Права предоставим в том числе всем участникам задачи.
	УчастникиЗадачи = РеквизитыЗадачи.Участники.ВыгрузитьКолонку("Участник");
	УчастникиЗадачи.Добавить(РеквизитыЗадачи.Автор);
	
	// Новым участникам предоставим права на все приложения.
	СтарыеУчастникиРГ =
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПредыдущиеЗначенияРеквизитов.Исполнитель);
	НовыеУчастникиРГ = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Исполнитель);
	
	ДобавленныеУчастникиРГ = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
		НовыеУчастникиРГ,
		СтарыеУчастникиРГ);
	
	ВсеУчастникиРГ = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Исполнитель);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ВсеУчастникиРГ,
		ИсполнителиДействий);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ВсеУчастникиРГ,
		УчастникиЗадачи);
	
	ОбщегоНазначенияДокументооборотКлиентСервер.УдалитьПустыеЗначения(ДобавленныеПриложения);
	ОбщегоНазначенияДокументооборотКлиентСервер.УдалитьПустыеЗначения(ВсеУчастникиРГ);
	ОбщегоНазначенияДокументооборотКлиентСервер.УдалитьПустыеЗначения(ВсеПриложения);
	ОбщегоНазначенияДокументооборотКлиентСервер.УдалитьПустыеЗначения(ДобавленныеУчастникиРГ);
	
	ДобавленныеПриложенияСПравомИзменения = Новый Массив;
	ДобавленныеПриложенияБезПраваИзменения = Новый Массив;
	
	// Проверяем корневую задачу - предоставляет ли возможность наследовать право изменения.
	КорневаяЗадача = РаботаСЗадачами.КорневаяЗадача(Задача);
	Если ЗначениеЗаполнено(КорневаяЗадача) Тогда
		ИсточникКорневойЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КорневаяЗадача, "Источник");
	Иначе
		ИсточникКорневойЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задача, "Источник");
	КонецЕсли;
	
	РазрешитьУчастникамИзменятьПредмет = Неопределено;
	Если ЗначениеЗаполнено(ИсточникКорневойЗадачи) Тогда
		
		ДействиеПоПроцессу = РаботаСПроцессамиПоДействиям.ДействиеПоПроцессу(ИсточникКорневойЗадачи);
		Если ЗначениеЗаполнено(ДействиеПоПроцессу) Тогда
			
			ВидДействияОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДействиеПоПроцессу, "ВидДействия");
			РазрешитьУчастникамИзменятьПредмет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				ВидДействияОбработки,
				"РазрешитьУчастникамИзменятьПредмет");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого ДобавленноеПриложение Из ДобавленныеПриложения Цикл
		
		// Проверяем права автора задачи - предоставляет ли возможность.
		Если РазрешитьУчастникамИзменятьПредмет <> Неопределено 
			И ПриложенияЗадачи.Найти(ДобавленноеПриложение) <> Неопределено Тогда
			
			Если РазрешитьУчастникамИзменятьПредмет Тогда
				
				ДобавленныеПриложенияСПравомИзменения.Добавить(ДобавленноеПриложение);
				
			Иначе
				
				ДобавленныеПриложенияБезПраваИзменения.Добавить(ДобавленноеПриложение);
				
			КонецЕсли;
			
		ИначеЕсли РазрешитьУчастникамИзменятьПредмет = Неопределено 
			И ПриложенияЗадачи.Найти(ДобавленноеПриложение) <> Неопределено Тогда
			
			Если ТипЗнч(РеквизитыЗадачи.Автор) = Тип("СправочникСсылка.Сотрудники") Тогда
				
				ПраваСотрудникаПоОбъекту = ДокументооборотПраваДоступа.ПраваСотрудникаПоОбъекту(
					ДобавленноеПриложение,
					РеквизитыЗадачи.Автор);
				Если ПраваСотрудникаПоОбъекту.Изменение Тогда
					
					ДобавленныеПриложенияСПравомИзменения.Добавить(ДобавленноеПриложение);
					
				Иначе
					
					ДобавленныеПриложенияБезПраваИзменения.Добавить(ДобавленноеПриложение);
					
				КонецЕсли;
				
			Иначе
				
				ДобавленныеПриложенияСПравомИзменения.Добавить(ДобавленноеПриложение);
				
			КонецЕсли;
			
		ИначеЕсли ПриложенияЗадачи.Найти(ДобавленноеПриложение) = Неопределено Тогда
			
			ДобавленныеПриложенияБезПраваИзменения.Добавить(ДобавленноеПриложение);
			
		Иначе
			
			ВызватьИсключение НСтр("ru = 'Неожиданное состояние приложения.'");
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДобавленныеПриложенияСПравомИзменения.Количество() > 0 Тогда
		
		РаботаСРабочимиГруппами.РасширитьРабочуюГруппуПредметов(
			ДобавленныеПриложенияСПравомИзменения,
			ВсеУчастникиРГ,
			Истина,
			Ссылка);
		
		РаботаСЗадачами.ПроверитьПраваНаПриложения(
			ДобавленныеПриложенияСПравомИзменения,
			ВсеУчастникиРГ);
		
	КонецЕсли;
	
	Если ДобавленныеПриложенияБезПраваИзменения.Количество() > 0 Тогда
		
		РаботаСРабочимиГруппами.РасширитьРабочуюГруппуПредметов(
			ДобавленныеПриложенияБезПраваИзменения,
			ВсеУчастникиРГ,
			Ложь,
			Ссылка);
		
		РаботаСЗадачами.ПроверитьПраваНаПриложения(
			ДобавленныеПриложенияБезПраваИзменения,
			ВсеУчастникиРГ);
		
	КонецЕсли;
	
	Если ДобавленныеУчастникиРГ.Количество() > 0 Тогда
		
		ВсеПриложенияСПравомИзменения = Новый Массив;
		ВсеПриложенияБезПраваИзменения = Новый Массив;
		Для Каждого ОчередноеПриложение Из ВсеПриложения Цикл
			
			// Проверяем права автора задачи - предоставляет ли возможность.
			Если РазрешитьУчастникамИзменятьПредмет <> Неопределено 
				И ПриложенияЗадачи.Найти(ОчередноеПриложение) <> Неопределено Тогда
				
				Если РазрешитьУчастникамИзменятьПредмет Тогда
					
					ВсеПриложенияСПравомИзменения.Добавить(ОчередноеПриложение);
					
				Иначе
					
					ВсеПриложенияБезПраваИзменения.Добавить(ОчередноеПриложение);
					
				КонецЕсли;
				
			ИначеЕсли РазрешитьУчастникамИзменятьПредмет = Неопределено 
				И ПриложенияЗадачи.Найти(ОчередноеПриложение) <> Неопределено Тогда
				
				Если ТипЗнч(РеквизитыЗадачи.Автор) = Тип("СправочникСсылка.Сотрудники") Тогда
					
					ПраваСотрудникаПоОбъекту = ДокументооборотПраваДоступа.ПраваСотрудникаПоОбъекту(
						ОчередноеПриложение,
						РеквизитыЗадачи.Автор);
					Если ПраваСотрудникаПоОбъекту.Изменение Тогда
						
						ВсеПриложенияСПравомИзменения.Добавить(ОчередноеПриложение);
						
					Иначе
						
						ВсеПриложенияБезПраваИзменения.Добавить(ОчередноеПриложение);
						
					КонецЕсли;
					
				Иначе
					
					ВсеПриложенияСПравомИзменения.Добавить(ОчередноеПриложение);
					
				КонецЕсли;
				
			ИначеЕсли ПриложенияЗадачи.Найти(ОчередноеПриложение) = Неопределено Тогда
				
				ВсеПриложенияБезПраваИзменения.Добавить(ОчередноеПриложение);
				
			Иначе
				
				ВызватьИсключение НСтр("ru = 'Неожиданное состояние приложения.'");
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ВсеПриложенияСПравомИзменения.Количество() > 0 Тогда
			
			НеобработанныеПриложенияСПравомИзменения = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
				ВсеПриложенияСПравомИзменения,
				ДобавленныеПриложенияСПравомИзменения);
			РаботаСРабочимиГруппами.РасширитьРабочуюГруппуПредметов(
				НеобработанныеПриложенияСПравомИзменения,
				ДобавленныеУчастникиРГ,
				Истина,
				Ссылка);
			
			РаботаСЗадачами.ПроверитьПраваНаПриложения(
				НеобработанныеПриложенияСПравомИзменения,
				ДобавленныеУчастникиРГ);
			
		КонецЕсли;
		
		Если ВсеПриложенияБезПраваИзменения.Количество() > 0 Тогда
			
			НеобработанныеПриложенияБезПраваИзменения = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
				ВсеПриложенияБезПраваИзменения,
				ДобавленныеПриложенияБезПраваИзменения);
			РаботаСРабочимиГруппами.РасширитьРабочуюГруппуПредметов(
				НеобработанныеПриложенияБезПраваИзменения,
				ДобавленныеУчастникиРГ,
				Ложь,
				Ссылка);
			
			РаботаСЗадачами.ПроверитьПраваНаПриложения(
				НеобработанныеПриложенияБезПраваИзменения,
				ДобавленныеУчастникиРГ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли