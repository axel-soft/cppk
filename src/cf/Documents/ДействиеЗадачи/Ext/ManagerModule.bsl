#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает активные действия по задаче.
//
// Параметры:
//  Задача - ДокументСсылка.Задача - Задача.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Данные активных действий по задаче.
//
Функция АктивныеДействияПоЗадаче(Задача) Экспорт
	
	Возврат АктивныеДействияПоЗадачам(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Задача));
	
КонецФункции

// Возвращает активные действия по задачам.
//
// Параметры:
//  МассивЗадач - Массив из ДокументСсылка.Задача - Задачи.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Данные активных действий по задаче.
//
Функция АктивныеДействияПоЗадачам(Знач МассивЗадач) Экспорт
	
	МассивЗадачНовый = Новый Массив;
	
	Если МассивЗадач.Количество() <> 0 Тогда
		РеквизитыЗадач = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивЗадач, "Источник");
	КонецЕсли;
	
	Для Каждого Задача Из МассивЗадач Цикл
		Источник = РеквизитыЗадач[Задача];
		Если Источник = Неопределено Или ТипЗнч(Источник) <> Тип("СправочникСсылка.ДействияОзнакомления") Тогда
			МассивЗадачНовый.Добавить(Задача);
		КонецЕсли;	
	КонецЦикла;	

	Если МассивЗадачНовый.Количество() = 0 Тогда
		
		АктивныеДействияПоЗадачам = Новый ТаблицаЗначений;
		АктивныеДействияПоЗадачам.Колонки.Добавить("ВидДействия");
		АктивныеДействияПоЗадачам.Колонки.Добавить("ДатаНачала");
		АктивныеДействияПоЗадачам.Колонки.Добавить("Исполнитель");
		АктивныеДействияПоЗадачам.Колонки.Добавить("СостояниеУчастникаЗадачи");
		АктивныеДействияПоЗадачам.Колонки.Добавить("РезультатДействия");
		АктивныеДействияПоЗадачам.Колонки.Добавить("ДействиеЗадачи");
		АктивныеДействияПоЗадачам.Колонки.Добавить("ОсобыйАвтор");
		АктивныеДействияПоЗадачам.Колонки.Добавить("ОсобыйСрок");
		АктивныеДействияПоЗадачам.Колонки.Добавить("ОсобыйЗаголовок");
		АктивныеДействияПоЗадачам.Колонки.Добавить("ВидУчастника");
		АктивныеДействияПоЗадачам.Колонки.Добавить("ДатаВыполнения");
		АктивныеДействияПоЗадачам.Колонки.Добавить("Задача");
		АктивныеДействияПоЗадачам.Колонки.Добавить("ЕстьПриложения");
		АктивныеДействияПоЗадачам.Колонки.Добавить("РезультатДействияТекстом");
		АктивныеДействияПоЗадачам.Колонки.Добавить("Источник");
		АктивныеДействияПоЗадачам.Колонки.Добавить("Представление");
		АктивныеДействияПоЗадачам.Колонки.Добавить("Дата");
		АктивныеДействияПоЗадачам.Колонки.Добавить("ФактическийИсполнитель");
		
		Возврат АктивныеДействияПоЗадачам;
		
	КонецЕсли;      
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДействиеЗадачи.ВидДействия КАК ВидДействия,
		|	ДействиеЗадачи.ДатаНачала КАК ДатаНачала,
		|	ДействиеЗадачи.Исполнитель КАК Исполнитель,
		|	ДействиеЗадачи.СостояниеУчастникаЗадачи КАК СостояниеУчастникаЗадачи,
		|	ДействиеЗадачи.РезультатДействия КАК РезультатДействия,
		|	ДействиеЗадачи.Ссылка КАК ДействиеЗадачи,
		|	ДействиеЗадачи.ОсобыйАвтор КАК ОсобыйАвтор,
		|	ДействиеЗадачи.ОсобыйСрок КАК ОсобыйСрок,
		|	ДействиеЗадачи.ОсобыйЗаголовок КАК ОсобыйЗаголовок,
		|	ДействиеЗадачи.ВидУчастника КАК ВидУчастника,
		|	ДействиеЗадачи.ДатаВыполнения КАК ДатаВыполнения,
		|	ДействиеЗадачи.Задача КАК Задача,
		|	ДействиеЗадачи.ЕстьПриложения КАК ЕстьПриложения,
		|	ДействиеЗадачи.РезультатДействияТекстом КАК РезультатДействияТекстом,
		|	ДействиеЗадачи.Источник КАК Источник,
		|	ДействиеЗадачи.Представление КАК Представление,
		|	ДействиеЗадачи.Дата КАК Дата,
		|	ДействиеЗадачи.ФактическийИсполнитель КАК ФактическийИсполнитель
		|ИЗ
		|	Документ.ДействиеЗадачи КАК ДействиеЗадачи
		|ГДЕ
		|	ДействиеЗадачи.Задача В (&МассивЗадач)
		|	И ДействиеЗадачи.Проведен = ИСТИНА
		|	И НЕ ДействиеЗадачи.Задача.Источник ССЫЛКА Справочник.ДействияОзнакомления
		|	И ДействиеЗадачи.ПометкаУдаления = ЛОЖЬ");
	
	Запрос.УстановитьПараметр("МассивЗадач", МассивЗадачНовый);
	
	АктивныеДействияПоЗадачам = Запрос.Выполнить().Выгрузить();
	
	Возврат АктивныеДействияПоЗадачам;
	
КонецФункции

// Определяет автора действия.
//
// Параметры:
//  ОсобыйАвтор - ОпределяемыйТип.УчастникЗадач - Особый автор действия.
//  АвторЗадачи - ОпределяемыйТип.УчастникЗадач - Автор задачи.
// 
// Возвращаемое значение:
//  ОпределяемыйТип.УчастникЗадач - Автор действия.
//
Функция Автор(ОсобыйАвтор, АвторЗадачи) Экспорт
	
	Возврат ?(ЗначениеЗаполнено(ОсобыйАвтор), ОсобыйАвтор, АвторЗадачи);
	
КонецФункции

// Формирует структуру данных заполнения.
// 
// Возвращаемое значение:
//  Структура:
//   * ВидДействия - СправочникСсылка.ВидыДействийЗадач
//   * Дата - Дата
//   * ДатаВыполнения - Дата
//   * ДатаНачала - Дата
//   * ОсобыйЗаголовок - Строка
//   * Задача - ДокументСсылка.Задача
//   * ОсобыйАвтор - ОпределяемыйТип.УчастникЗадач
//                 - Неопределено
//   * ОсобыйСрок - Дата
//                - Неопределено
//   * Источник - ОпределяемыйТип.ИсточникЗадач
//              - Неопределено
//   * ИсточникДанных - СправочникСсылка.ИсточникиДанных
//   * Исполнитель - ОпределяемыйТип.УчастникЗадач
//                 - Неопределено
//   * КтоОтметил - СправочникСсылка.Сотрудники
//   * ПометкаУдаления - Булево
//   * РезультатДействия - СправочникСсылка.РезультатыДействийЗадач
//   * РезультатДействияТекстом - Строка
//   * СостояниеУчастникаЗадачи - СправочникСсылка.СостоянияУчастниковЗадач
//   * Флаг - ПеречислениеСсылка.ФлагиОбъектов
//
Функция ДанныеЗаполнения() Экспорт
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("ВидДействия", Справочники.ВидыДействийЗадач.ПустаяСсылка());
	ДанныеЗаполнения.Вставить("Дата", Дата(1, 1, 1));
	ДанныеЗаполнения.Вставить("ДатаВыполнения", Дата(1, 1, 1));
	ДанныеЗаполнения.Вставить("ДатаНачала", Дата(1, 1, 1));
	ДанныеЗаполнения.Вставить("ОсобыйЗаголовок", "");
	ДанныеЗаполнения.Вставить("ОсобыйАвтор", Неопределено);
	ДанныеЗаполнения.Вставить("Задача", Документы.Задача.ПустаяСсылка());
	ДанныеЗаполнения.Вставить("ОсобыйСрок", Неопределено);
	ДанныеЗаполнения.Вставить("ИсточникДанных", Справочники.ИсточникиДанных.ПустаяСсылка());
	ДанныеЗаполнения.Вставить("Исполнитель", Неопределено);
	ДанныеЗаполнения.Вставить("Источник", Неопределено);
	ДанныеЗаполнения.Вставить("КтоОтметил", Справочники.Сотрудники.ПустаяСсылка());
	ДанныеЗаполнения.Вставить("РезультатДействияТекстом", "");
	ДанныеЗаполнения.Вставить("РезультатДействия", Справочники.РезультатыДействийЗадач.ПустаяСсылка());
	ДанныеЗаполнения.Вставить("СостояниеУчастникаЗадачи", Справочники.СостоянияУчастниковЗадач.ПустаяСсылка());
	ДанныеЗаполнения.Вставить("Флаг", Перечисления.ФлагиОбъектов.ПустаяСсылка());
	ДанныеЗаполнения.Вставить("ПометкаУдаления", Ложь);
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

// Рассчитывает дату начала задачи по данным действий задачи.
//
// Параметры:
//  Задача - ДокументСсылка.Задача - Задача.
// 
// Возвращаемое значение:
//  Дата - Дата начала задачи.
//
Функция ДатаНачалаЗадачи(Задача) Экспорт
	
	ДатаНачалаЗадачи = Дата(1, 1, 1);
	Для Каждого ДанныеДействия Из АктивныеДействияПоЗадаче(Задача) Цикл
		
		Если Не ЗначениеЗаполнено(ДанныеДействия.ДатаНачала) Тогда
			Продолжить;
		КонецЕсли;
		
		ДатаНачалаЗадачи = ?(Не ЗначениеЗаполнено(ДатаНачалаЗадачи),
			ДанныеДействия.ДатаНачала,
			Мин(ДатаНачалаЗадачи, ДанныеДействия.ДатаНачала));
		
	КонецЦикла;
	
	Возврат ДатаНачалаЗадачи;
	
КонецФункции

// Определяет, активно ли действие.
//
// Параметры:
//  Действие - ДокументСсылка.ДействиеЗадачи - Действие.
// 
// Возвращаемое значение:
//  Булево - Действие активно.
//
Функция ДействиеАктивно(Действие) Экспорт
	
	Если Не ЗначениеЗаполнено(Действие) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РеквизитыДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Действие, "Проведен, ПометкаУдаления");
	
	Возврат РеквизитыДействия.Проведен И Не РеквизитыДействия.ПометкаУдаления;
	
КонецФункции

// Рассчитывает заголовок действия задачи.
//
// Параметры:
//  ВидДействия - СправочникСсылка.ВидыДействийЗадач - Вид действия.
//  ОсобыйЗаголовокДействия - Строка - Особый заголовок действия задачи.
//  ЗаголовокЗадачи - Строка - Заголовок задачи.
// 
// Возвращаемое значение:
//  Строка - Заголовок действия задачи.
//
Функция ЗаголовокДействияЗадачи(ВидДействия, ОсобыйЗаголовокДействия, ЗаголовокЗадачи) Экспорт
	
	Если ЗначениеЗаполнено(ОсобыйЗаголовокДействия) Тогда
		Возврат ОсобыйЗаголовокДействия;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВидДействия) Тогда
		Возврат ЗаголовокЗадачи;
	КонецЕсли;
	
	ШаблонЗаголовка = РаботаСЗадачамиПовтИсп.ШаблонЗаголовкаДействияЗадачи(ВидДействия);
	Если Не ЗначениеЗаполнено(ШаблонЗаголовка) Тогда
		Возврат ЗаголовокЗадачи;
	КонецЕсли;
	
	Возврат СтрШаблон(ШаблонЗаголовка, ЗаголовокЗадачи);
	
КонецФункции

// Определяет исполнитель задачи, который былы до взятия в работу.
// 
// Параметры:
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи.
// 
// Возвращаемое значение:
//  ОпределяемыйТип.УчастникЗадач - Исполнитель задачи, который был до взятия задачи в работу.
//
Функция ИсходныйИсполнитель(ДействиеЗадачи) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИсходныйИсполнитель = Метаданные.ОпределяемыеТипы.УчастникЗадач.Тип.ПривестиЗначение();
	Если Не ЗначениеЗаполнено(ДействиеЗадачи) Тогда
		Возврат ИсходныйИсполнитель;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗадачаУчастники.Участник КАК ИсходныйИсполнитель
		|ИЗ
		|	Документ.Задача.Участники КАК ЗадачаУчастники
		|ГДЕ
		|	ЗадачаУчастники.ДействиеУчастника = &ДействиеЗадачи");
	
	Запрос.УстановитьПараметр("ДействиеЗадачи", ДействиеЗадачи);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ИсходныйИсполнитель = Выборка.ИсходныйИсполнитель;
	КонецЕсли;
	
	Возврат ИсходныйИсполнитель;
	
КонецФункции

// Ищет действия исполнителя по задаче.
//
// Параметры:
//  Задача - ДокументСсылка.Задача - Задача.
//  Исполнитель - ОпределяемыйТип.УчастникЗадач - Исполнитель.
// 
// Возвращаемое значение:
//  Массив из ДокументСсылка.ДействиеЗадачи - Найденные действия по задаче.
//
Функция НайтиДействияИсполнителя(Задача, Исполнитель) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДействиеЗадачи.Ссылка КАК ДействиеЗадачи
		|ИЗ
		|	Документ.ДействиеЗадачи КАК ДействиеЗадачи
		|ГДЕ
		|	ДействиеЗадачи.Задача = &Задача
		|	И ДействиеЗадачи.Исполнитель = &Исполнитель
		|	И ДействиеЗадачи.ПометкаУдаления = ЛОЖЬ");
	
	Запрос.УстановитьПараметр("Задача", Задача);
	Запрос.УстановитьПараметр("Исполнитель", Исполнитель);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ДействиеЗадачи");
	
КонецФункции

// Ищет подзадачи по действие задачи.
//
// Параметры:
//  ДействияЗадач - Массив Из ДокументСсылка.ДействиеЗадачи - Действия задача, по которым необходимо найти подзадачи.
// 
// Возвращаемое значение:
//  Массив из ДокументСсылка.Задача - Найденные подзадачи.
//
Функция НайтиПодзадачи(ДействияЗадач) Экспорт
	
	Если ДействияЗадач.Количество() = 0 Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Задача.Ссылка КАК Подзадача
		|ИЗ
		|	Документ.Задача КАК Задача
		|ГДЕ
		|	Задача.ВышестоящееДействие В(&ДействияЗадач)
		|	И Задача.ПометкаУдаления = ЛОЖЬ");
	
	Запрос.УстановитьПараметр("ДействияЗадач", ДействияЗадач);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подзадача");
	
КонецФункции

// Ищет действия по задаче.
//
// Параметры:
//  Задача - ДокументСсылка.Задача.
//  ВключаяПомеченныеНаУдаление - Булево.
// 
// Возвращаемое значение:
//  Массив из ДокументСсылка.ДействиеЗадачи - Найденные действия по задаче.
//
Функция НайтиПоЗадаче(Задача, ВключаяПомеченныеНаУдаление = Ложь) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДействиеЗадачи.Ссылка КАК ДействиеЗадачи
		|ИЗ
		|	Документ.ДействиеЗадачи КАК ДействиеЗадачи
		|ГДЕ
		|	ДействиеЗадачи.Задача = &Задача
		|	И ДействиеЗадачи.ПометкаУдаления = ЛОЖЬ");
	
	Запрос.УстановитьПараметр("Задача", Задача);
	
	Если ВключаяПомеченныеНаУдаление Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ДействиеЗадачи.ПометкаУдаления = ЛОЖЬ", "");
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ДействиеЗадачи");
	
КонецФункции

// Ищет действие задачи по источнику.
//
// Параметры:
//  ИсточникДействия - ОпределяемыйТип.ИсточникДействийЗадач.
// 
// Возвращаемое значение:
//  ДокументСсылка.ДействиеЗадачи - Найденная задача.
//
Функция НайтиПоИсточнику(ИсточникДействия) Экспорт
	
	Если Не ЗначениеЗаполнено(ИсточникДействия) Тогда
		Возврат ПустаяСсылка();
	КонецЕсли;
	
	ИсточникиДействийЗадач = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИсточникДействия);
	ДействияПоИсточникам = НайтиПоИсточникам(ИсточникиДействийЗадач);
	ДействиеПоИсточнику = ДействияПоИсточникам[ИсточникДействия];
	Если ДействиеПоИсточнику = Неопределено Тогда
		ДействиеПоИсточнику = ПустаяСсылка();
	КонецЕсли;
	
	Возврат ДействиеПоИсточнику;
	
КонецФункции

// Ищет действия задачи по источникам.
//
// Параметры:
//  ИсточникиДействийЗадач - Массив из ОпределяемыйТип.ИсточникДействийЗадач.
// 
// Возвращаемое значение:
//  Соответствие из КлючИЗначение:
//   * Ключ - ОпределяемыйТип.ИсточникДействийЗадач
//   * Значение - ДокументСсылка.ДействиеЗадачи
//
Функция НайтиПоИсточникам(ИсточникиДействийЗадач) Экспорт
	
	ДействияПоИсточникам = Новый Соответствие;
	Для Каждого ИсточникДействия Из ИсточникиДействийЗадач Цикл
		
		Если Не РаботаСЗадачами.ЭтоИсточникДействийЗадач(ИсточникДействия) Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = '%1 (%2) не является источником действий задач.'"),
				ИсточникДействия,
				ТипЗнч(ИсточникДействия));
		Конецесли;
		
		ДействияПоИсточникам.Вставить(ИсточникДействия, ПустаяСсылка());
		
	КонецЦикла;
	
	Если ИсточникиДействийЗадач.Количество() = 0 Тогда
		Возврат ДействияПоИсточникам;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДействиеЗадачи.Ссылка КАК ДействиеЗадачиПоИсточнику,
		|	ДействиеЗадачи.Источник КАК Источник
		|ИЗ
		|	Документ.ДействиеЗадачи КАК ДействиеЗадачи
		|ГДЕ
		|	ДействиеЗадачи.Источник В(&ИсточникиДействийЗадач)
		|	И ДействиеЗадачи.ПометкаУдаления = ЛОЖЬ");
	
	Запрос.УстановитьПараметр("ИсточникиДействийЗадач", ИсточникиДействийЗадач);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДействияПоИсточникам.Вставить(Выборка.Источник, Выборка.ДействиеЗадачиПоИсточнику);
	КонецЦикла;
	
	Возврат ДействияПоИсточникам;
	
КонецФункции

// Возвращает отслеживаемые реквизиты для дополнительного свойства ПредыдущиеЗначенияРеквизитов.
//
// Возвращаемое значение:
//  Строка - Отслеживаемые реквизиты.
//
Функция ОтслеживаемыеРеквизиты() Экспорт
	
	ОтслеживаемыеРеквизиты =
		"Исполнитель, ОсобыйАвтор, ОсобыйСрок, СостояниеУчастникаЗадачи, ПометкаУдаления, Приложения";
	
	ОбщегоНазначенияДокументооборот.ДополнитьОтслеживаемыеРеквизиты(
		ОтслеживаемыеРеквизиты,
		ВажныеРеквизиты());
	
	Возврат ОтслеживаемыеРеквизиты;
	
КонецФункции

// Возвращает важные отслеживаемые реквизиты для дополнительного свойства ПредыдущиеЗначенияРеквизитов.
//
// Возвращаемое значение:
//  Строка - Важные отслеживаемые реквизиты.
//
Функция ВажныеРеквизиты() Экспорт
	
	Возврат "ОсобыйЗаголовок, ОсобоеОписание, ОсобыйСрок, Приложения";
	
КонецФункции

// Возвращает важные отслеживаемые реквизиты и их представления.
//
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение - Важные отслеживаемые реквизиты:
//   * Ключ - Строка
//   * Значение - Строка
//
Функция ВажныеРеквизитыПредставления() Экспорт
	
	Реквизиты = Метаданные.Документы.ДействиеЗадачи.Реквизиты;
	ТабличныеЧасти = Метаданные.Документы.ДействиеЗадачи.ТабличныеЧасти;
	
	ВажныеРеквизиты = ВажныеРеквизиты();
	СоответствиеРеквизитов = Новый Соответствие();
	Для Каждого ВажныйРеквизитИмя Из СтрРазделить(ВажныеРеквизиты, ",") Цикл
		ВажныйРеквизитИмя = СокрЛП(ВажныйРеквизитИмя);
		Реквизит = Неопределено;
		ТабличнаяЧасть = Неопределено;
		Реквизит = Реквизиты.Найти(ВажныйРеквизитИмя);
		Если Реквизит = Неопределено Тогда
			ТабличнаяЧасть = ТабличныеЧасти.Найти(ВажныйРеквизитИмя);
			Если ТабличнаяЧасть <> Неопределено Тогда
				СоответствиеРеквизитов.Вставить(ВажныйРеквизитИмя, ТабличнаяЧасть.Синоним);
			КонецЕсли;
		Иначе
			СоответствиеРеквизитов.Вставить(ВажныйРеквизитИмя, Реквизит.Синоним);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СоответствиеРеквизитов;
	
КонецФункции

// Контекст изменения реквизитов.
// 
// Возвращаемое значение:
//  см. РегистрыСведений.ИсторияЗадач.НовыйИзмененияДействия
//
Функция КонтекстИзмененияРеквизитов() Экспорт
	
	Возврат РегистрыСведений.ИсторияЗадач.НовыйИзмененияДействия();
	
КонецФункции

// Определяет ожидающие выполнения действия задач.
// 
// Параметры:
// 	МассивЗадач - Массив из ДокументСсылка.Задача.
// 	
// Возвращаемое значение:
// 	Массив из ДокументСсылка.ДействиеЗадачи.
// 	
Функция ОжидающиеВыполненияДействияЗадач(МассивЗадач) Экспорт
	
	ОжидающиеВыполненияДействия = Новый Массив;
	Если МассивЗадач.Количество() = 0 Тогда
		Возврат ОжидающиеВыполненияДействия;
	КонецЕсли;
	
	СостоянияОжидаетВыполнения = Справочники.СостоянияУчастниковЗадач.СостоянияОжидаетВыполнения();
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДействиеЗадачи.Ссылка КАК ДействиеЗадачи
		|ИЗ
		|	Документ.ДействиеЗадачи КАК ДействиеЗадачи
		|ГДЕ
		|	ДействиеЗадачи.Задача В (&МассивЗадач)
		|	И ДействиеЗадачи.СостояниеУчастникаЗадачи В (&СостоянияОжидаетВыполнения)");
	
	Запрос.УстановитьПараметр("МассивЗадач", МассивЗадач);
	Запрос.УстановитьПараметр("СостоянияОжидаетВыполнения", СостоянияОжидаетВыполнения);
	
	ОжидающиеВыполненияДействия = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ДействиеЗадачи");
	
	Возврат ОжидающиеВыполненияДействия;
	
КонецФункции

// Определяет ожидающие выполнения и начатые действия задач.
// 
// Параметры:
// 	МассивЗадач - Массив из ДокументСсылка.Задача.
// 	
// Возвращаемое значение:
// 	Массив из ДокументСсылка.ДействиеЗадачи.
// 	
Функция НачатыеИлиОжидаемыеДействияЗадач(МассивЗадач) Экспорт
	
	НачатыеИлиОжидаемыеДействия = Новый Массив;
	Если МассивЗадач.Количество() = 0 Тогда
		Возврат НачатыеИлиОжидаемыеДействия;
	КонецЕсли;
	
	СостоянияНачатоеИлиОжидаемоеДействие = Справочники.СостоянияУчастниковЗадач.СостоянияНачатоеИлиОжидаемоеДействие();
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДействиеЗадачи.Ссылка КАК ДействиеЗадачи
		|ИЗ
		|	Документ.ДействиеЗадачи КАК ДействиеЗадачи
		|ГДЕ
		|	ДействиеЗадачи.Задача В (&МассивЗадач)
		|	И ДействиеЗадачи.СостояниеУчастникаЗадачи В (&СостоянияНачатоеИлиОжидаемоеДействие)
		|	И ДействиеЗадачи.ПометкаУдаления = ЛОЖЬ");
	
	Запрос.УстановитьПараметр("МассивЗадач", МассивЗадач);
	Запрос.УстановитьПараметр("СостоянияНачатоеИлиОжидаемоеДействие", СостоянияНачатоеИлиОжидаемоеДействие);
	
	НачатыеИлиОжидаемыеДействия = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ДействиеЗадачи");
	
	Возврат НачатыеИлиОжидаемыеДействия;
	
КонецФункции

// Ищет подзадачи по действие задачи.
//
// Параметры:
//  ДействияЗадач - Массив Из ДокументСсылка.ДействиеЗадачи - Действия задача, по которым необходимо найти подзадачи.
// 
// Возвращаемое значение:
//  Соответствие.
//   * Ключ - ДокументСсылка.ДействиеЗадачи - Действие.
//   * Значение - Массив из ДокументСсылка.Задача - Найденные подзадачи.
//
Функция ПодзадачиПоДействиям(ДействияЗадач) Экспорт
	
	ПодзадачиПоДействиям = Новый Соответствие;
	Если ДействияЗадач.Количество() = 0 Тогда
		Возврат ПодзадачиПоДействиям;
	КонецЕсли;
	
	Для Каждого ДействиеЗадачи Из ДействияЗадач Цикл
		ПодзадачиПоДействиям[ДействиеЗадачи] = Новый Массив;
	КонецЦикла;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Задача.Ссылка КАК Подзадача,
		|	Задача.ВышестоящееДействие КАК ВышестоящееДействие
		|ИЗ
		|	Документ.Задача КАК Задача
		|ГДЕ
		|	Задача.ВышестоящееДействие В (&ДействияЗадач)
		|	И Задача.ПометкаУдаления = ЛОЖЬ");
	
	Запрос.УстановитьПараметр("ДействияЗадач", ДействияЗадач);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПодзадачиПоДействию = ПодзадачиПоДействиям[Выборка.ВышестоящееДействие];
		ПодзадачиПоДействию.Добавить(Выборка.Подзадача);
	КонецЦикла;
	
	Возврат ПодзадачиПоДействиям;
	
КонецФункции

// Определяет, просрочено ли действие.
//
// Параметры:
//  Срок - Дата - Срок действия.
//  СостояниеУчастникаЗадачи - СправочникСсылка.СостоянияУчастниковЗадач - Состояние участника задачи.
//  ДатаВыполнения - Дата - Дата выполнения.
// 
// Возвращаемое значение:
//  Булево - Действие просрочено.
//
Функция Просрочено(Срок, СостояниеУчастникаЗадачи, ДатаВыполнения) Экспорт
	
	ВидСостоянияУчастниковЗадач = РаботаСЗадачамиПовтИсп.ВидСостоянияУчастниковЗадач(СостояниеУчастникаЗадачи);
	Если Не ЗначениеЗаполнено(Срок) Тогда
		
		Возврат Ложь;
		
	ИначеЕсли Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоВыполненноеДействие(ВидСостоянияУчастниковЗадач)
		Или Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоОжидающееПроверкиДействие(ВидСостоянияУчастниковЗадач) Тогда
		
		Возврат ДатаВыполнения > Срок;
		
	ИначеЕсли Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоОжидаемоеДействие(ВидСостоянияУчастниковЗадач) Тогда
		
		Возврат ТекущаяДатаСеанса() > Срок;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

// Делает действие задачи неактивным.
//
// Параметры:
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи - Действие задачи.
//
Процедура СделатьНеактивным(ДействиеЗадачи) Экспорт
	
	ДействиеЗадачиОбъект = ДействиеЗадачи.ПолучитьОбъект();
	Если Не ДействиеЗадачиОбъект.Проведен Тогда
		Возврат;
	КонецЕсли;
	
	ДействиеЗадачиОбъект.ДатаВыполнения = Дата(1, 1, 1);
	ДействиеЗадачиОбъект.ДатаНачала = Дата(1, 1, 1);
	ДействиеЗадачиОбъект.КтоОтметил = Справочники.Сотрудники.ПустаяСсылка();
	ДействиеЗадачиОбъект.РезультатДействия = Справочники.РезультатыДействийЗадач.ПустаяСсылка();
	ДействиеЗадачиОбъект.РезультатДействияТекстом = "";
	ДействиеЗадачиОбъект.СостояниеУчастникаЗадачи = Справочники.СостоянияУчастниковЗадач.ПустаяСсылка();
	
	ДействиеЗадачиОбъект.Приложения.Очистить();
	
	ДействиеЗадачиОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	
КонецПроцедуры

// Определяет срок действия.
//
// Параметры:
//  ЕстьОсобыйСрок - Булево - Есть особый срок.
//  ОсобыйСрок - Дата - Особый срок действия.
//  СрокЗадачи - Дата - Срок задачи.
// 
// Возвращаемое значение:
//  Дата - Срок действия.
//
Функция Срок(ЕстьОсобыйСрок, ОсобыйСрок, СрокЗадачи) Экспорт
	
	Возврат ?(ЕстьОсобыйСрок, ОсобыйСрок, СрокЗадачи);
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

#Область ОбновлениеКэширующихДанных

// Обрабатывает обновление кэширующих данных.
// 
// Параметры:
//  Выборка - ВыборкаИзРезультатаЗапроса - Выборка из очереди обновления кэширующих данных:
//   * ОтметкаВремени - ОпределяемыйТип.ОтметкаВремени.
//   * ЗависимыйОбъектМетаданных - СправочникСсылка.ИдентификаторыОбъектовМетаданных.
//   * ВлияющийОбъектМетаданных - СправочникСсылка.ИдентификаторыОбъектовМетаданных.
//   * КлючВлияющихДанных - ЛюбаяСсылка.
//   * Автор - СправочникСсылка.Пользователи.
//   * ЗагрузкаОбработанныхДанныхИзДругойСистемы - Булево.
//   * ИзмененияВлияющихДанных - ХранилищеЗначения.
//   * Попыток - Число.
//   * ДатаКОбработке - Дата.
// 
Процедура ОбновитьКэширующиеДанные(Выборка) Экспорт
	
	Если ТипЗнч(Выборка.КлючВлияющихДанных) = Тип("ДокументСсылка.Задача") Тогда
		
		ОбновитьКэширующиеДанныеПоЗадаче(Выборка.КлючВлияющихДанных);
		
	ИначеЕсли ТипЗнч(Выборка.КлючВлияющихДанных) = Тип("ДокументСсылка.ДействиеЗадачи") Тогда
		
		ОбновитьКэширующиеДанныеПоДействиюЗадачи(Выборка.КлючВлияющихДанных);
		
	ИначеЕсли ТипЗнч(Выборка.КлючВлияющихДанных) = Тип("СправочникСсылка.ПолныеРоли") Тогда
		
		ОбновитьКэширующиеДанныеПоРоли(Выборка);
		
	ИначеЕсли ТипЗнч(Выборка.КлючВлияющихДанных) = Тип("СправочникСсылка.Сотрудники") Тогда
		
		ОбновитьКэширующиеДанныеПоСотруднику(Выборка);
		
	ИначеЕсли ТипЗнч(Выборка.КлючВлияющихДанных) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
		
		ОбновитьКэширующиеДанныеПоСтруктуреПредпирятия(Выборка);
		
	ИначеЕсли ТипЗнч(Выборка.КлючВлияющихДанных) = Тип("СправочникСсылка.ЗамещающиеИПомощники") Тогда
		
		ОбновитьКэширующиеДанныеПоЗамещающимИПомощникам(Выборка);
		
	ИначеЕсли ТипЗнч(Выборка.КлючВлияющихДанных) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		НеПисатьВИсторию = Ложь;
		АвторИзменения = Неопределено;
		
		ИзмененияВлияющихДанных = Выборка.ИзмененияВлияющихДанных.Получить();
		Если ТипЗнч(ИзмененияВлияющихДанных) = Тип("Структура") Тогда
			
			Если ИзмененияВлияющихДанных.Свойство("НеПисатьВИсторию") Тогда
				НеПисатьВИсторию = ИзмененияВлияющихДанных.НеПисатьВИсторию;
			КонецЕсли;
			
			Если ИзмененияВлияющихДанных.Свойство("АвторИзменения") Тогда
				АвторИзменения = ИзмененияВлияющихДанных.АвторИзменения;
			КонецЕсли;
			
		КонецЕсли;
		
		ИнтеграцияЗадач.ОбновитьДействиеЗадачиПоЗадачеПроцесса(
			Выборка.КлючВлияющихДанных,
			НеПисатьВИсторию,
			АвторИзменения);
		
	ИначеЕсли РаботаСБизнесПроцессами.ЭтоБизнесПроцессСсылка(Выборка.КлючВлияющихДанных) Тогда
		
		НеПисатьВИсторию = Ложь;
		АвторИзменения = Неопределено;
		
		ИзмененияВлияющихДанных = Выборка.ИзмененияВлияющихДанных.Получить();
		Если ТипЗнч(ИзмененияВлияющихДанных) = Тип("Структура") Тогда
			
			Если ИзмененияВлияющихДанных.Свойство("НеПисатьВИсторию") Тогда
				НеПисатьВИсторию = ИзмененияВлияющихДанных.НеПисатьВИсторию;
			КонецЕсли;
			
			Если ИзмененияВлияющихДанных.Свойство("АвторИзменения") Тогда
				АвторИзменения = ИзмененияВлияющихДанных.АвторИзменения;
			КонецЕсли;
			
		КонецЕсли;
		
		ИнтеграцияЗадач.ОбновитьДействияЗадачиПоПроцессу(
			Выборка.КлючВлияющихДанных,
			НеПисатьВИсторию,
			АвторИзменения);
		
	КонецЕсли;
	
КонецПроцедуры

// Обновить кэширующие данные по задаче.
// 
// Параметры:
//  Задача - ДокументСсылка.Задача
// 
Процедура ОбновитьКэширующиеДанныеПоЗадаче(Задача) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ДействиеЗадачи.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.ДействиеЗадачи КАК ДействиеЗадачи
			|ГДЕ
			|	ДействиеЗадачи.Задача = &Задача");
		Запрос.УстановитьПараметр("Задача", Задача);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ОбновитьКэширующиеДанныеПоДействиюЗадачи(ВыборкаДетальныеЗаписи.Ссылка);
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ПраваДоступа

// Возвращает строку, содержащую перечисление полей доступа через запятую
// Это перечисление используется в дальнейшем для передачи в метод
// ОбщегоНазначения.ЗначенияРеквизитовОбъекта()
// 
// Возвращаемое значение:
//  Строка - Получить поля доступа
Функция ПолучитьПоляДоступа() Экспорт
	
	Возврат 
		"Ссылка,
		|Задача,
		|Исполнитель,
		|ОсобыйАвтор,
		|ЕстьПриложения";
	
КонецФункции

// Проверяет наличие метода.
// 
// Возвращаемое значение:
//  Булево - Есть метод заполнить дескрипторы объекта
Функция ЕстьМетодЗаполнитьДескрипторыОбъекта() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Проверяет наличие метода.
// 
// Возвращаемое значение:
//  Булево - Есть метод права сотрудников по объектам
Функция ЕстьМетодПраваСотрудниковПоОбъектам() Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Заполняет переданную таблицу дескрипторов объекта.
// 
// Параметры:
//  ОбъектДоступа - ДокументОбъект.ДействиеЗадачи - Объект доступа
//  ТаблицаДескрипторов - ТаблицаЗначений - См. РегистрыСведений.ДескрипторыДляОбъектов
//  ПротоколРасчетаПрав - Неопределено - Протокол расчета прав
Процедура ЗаполнитьДескрипторыОбъекта(ОбъектДоступа, ТаблицаДескрипторов, ПротоколРасчетаПрав = Неопределено) Экспорт

	РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектДоступа.Задача, "Автор, Источник");
	
	// Если к отчету о выполнении приложены файлы, нужно дать остальным участникам доступ к ним через это действие 
	Если ОбъектДоступа.ЕстьПриложения Тогда
		// Унаследуем дескрипторы от вышестоящей Задачи, чтобы дать доступ всем соисполнителям
		ДокументооборотПраваДоступа.ЗаполнитьДескрипторыОбъектаОтВладельца(
			ОбъектДоступа, ТаблицаДескрипторов, ОбъектДоступа.Задача);
	КонецЕсли;
	
	// Право изменения дают только эти дескрипторы.
	ДокументооборотПраваДоступа.ДобавитьИндивидуальныйДескриптор(
		ОбъектДоступа, ТаблицаДескрипторов, ОбъектДоступа.ОсобыйАвтор, Истина);
		
	// Автор задачи
	ДокументооборотПраваДоступа.ДобавитьИндивидуальныйДескриптор(
		ОбъектДоступа, ТаблицаДескрипторов, РеквизитыЗадачи.Автор, Истина);
	
	// Непосредственный исполнитель
	ДокументооборотПраваДоступа.ДобавитьИндивидуальныйДескриптор(
		ОбъектДоступа, ТаблицаДескрипторов, ОбъектДоступа.Исполнитель, Истина);
	
	// Все исполнители.
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВсеИсполнителиДействийЗадач.Исполнитель КАК Исполнитель
		|ИЗ
		|	РегистрСведений.ВсеИсполнителиДействийЗадач КАК ВсеИсполнителиДействийЗадач
		|ГДЕ
		|	ВсеИсполнителиДействийЗадач.ДействиеЗадачи = &ДействиеЗадачи");
	Запрос.УстановитьПараметр("ДействиеЗадачи", ОбъектДоступа.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокументооборотПраваДоступа.ДобавитьИндивидуальныйДескриптор(
			ОбъектДоступа, ТаблицаДескрипторов, Выборка.Исполнитель, Истина);
	КонецЦикла;
	
	// Контролеры.
	ДействиеПоПроцессу = Неопределено;
	Если РаботаСБизнесПроцессами.ЭтоБизнесПроцессСсылка(РеквизитыЗадачи.Источник) Тогда
		ДействиеПоПроцессу = РаботаСПроцессамиПоДействиям.ДействиеПоПроцессу(РеквизитыЗадачи.Источник);
	ИначеЕсли ТипЗнч(РеквизитыЗадачи.Источник) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		ЗадачаПроцесса = РеквизитыЗадачи.Источник; // ЗадачаСсылка.ЗадачаИсполнителя
		БизнесПроцесс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗадачаПроцесса, "БизнесПроцесс");
		ДействиеПоПроцессу = РаботаСПроцессамиПоДействиям.ДействиеПоПроцессу(БизнесПроцесс);
	КонецЕсли;
	Если ЗначениеЗаполнено(ДействиеПоПроцессу) Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Контроль.Контролер
			|ИЗ
			|	Справочник.Контроль КАК Контроль
			|ГДЕ
			|	Контроль.Предмет = &Действие
			|	И Контроль.ПометкаУдаления = ЛОЖЬ");
		Запрос.УстановитьПараметр("Действие", ДействиеПоПроцессу);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ДокументооборотПраваДоступа.ДобавитьИндивидуальныйДескриптор(
				ОбъектДоступа, ТаблицаДескрипторов, Выборка.Контролер, Ложь);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	ИнтеграцияЗадач.ОбработатьПолучениеФормы(
		ВидФормы,
		Параметры,
		ВыбраннаяФорма,
		ДополнительнаяИнформация,
		СтандартнаяОбработка);
	Если Не СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидФормы = "ФормаОбъекта"
		И Параметры.Свойство("Ключ")
		И ЗначениеЗаполнено(Параметры.Ключ) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если Не ОбщегоНазначения.СсылкаСуществует(Параметры.Ключ) Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Не удалось перейти по ссылке ""%1"" по причине: Неверно задана навигационная ссылка.'"),
				ПолучитьНавигационнуюСсылку(Параметры.Ключ));
		КонецЕсли;
		
		РеквизитыДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Параметры.Ключ,
			"Задача, ПометкаУдаления");
		Если РеквизитыДействия.ПометкаУдаления Тогда
			Параметры.Ключ = РеквизитыДействия.Задача;
			Документы.Задача.ОбработкаПолученияФормы(
				ВидФормы,
				Параметры,
				ВыбраннаяФорма,
				ДополнительнаяИнформация,
				СтандартнаяОбработка);
			Возврат;
		КонецЕсли;
		
		ВыбраннаяФорма = Метаданные.Документы.ДействиеЗадачи.Формы.ФормаЭлемента;
		
		ИсторияРаботыПользователя.Добавить(Параметры.Ключ);
		
	ИначеЕсли ВидФормы = "ФормаВыбора" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Параметры.Вставить("КлючНазначенияИспользования", "ВыборДействияЗадачи");
		
		ВыбраннаяФорма = Метаданные.Документы.Задача.Формы.Задачи;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Поля.Добавить("ВидДействия");
	Поля.Добавить("ОсобыйЗаголовок");
	Поля.Добавить("Задача");
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УстановитьПривилегированныйРежим(Истина);
	ПредставлениеЗадачи = Строка(Данные.Задача); 
	УстановитьПривилегированныйРежим(Ложь);
	
	Представление = ЗаголовокДействияЗадачи(
		Данные.ВидДействия,
		Данные.ОсобыйЗаголовок,
		ПредставлениеЗадачи);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Обновить кэширующие данные по действию задачи.
// 
// Параметры:
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи
// 
Процедура ОбновитьКэширующиеДанныеПоДействиюЗадачи(ДействиеЗадачи)
	
	НачатьТранзакцию();
	Попытка
		
		РегистрыСведений.РеестрЗадачПоИсполнителям.ОбновитьПоДействиюЗадачи(ДействиеЗадачи);
		РегистрыНакопления.КоличествоЗадачПоИсполнителям.ОбновитьПоДействиюЗадачи(ДействиеЗадачи);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Обновить кэширующие данные по роли.
// 
// Параметры:
//  Выборка - ВыборкаИзРезультатаЗапроса.
// 
Процедура ОбновитьКэширующиеДанныеПоРоли(Выборка)
	
	Если Не Выборка.Долгое Тогда
		ИзмененияВлияющихДанных = Выборка.ИзмененияВлияющихДанных.Получить();
		РегистрыСведений.ОчередьОбновленияКэширующихДанных.Добавить(
			Выборка.ЗависимыйОбъектМетаданных,
			Выборка.ВлияющийОбъектМетаданных,
			Выборка.КлючВлияющихДанных,
			ИзмененияВлияющихДанных,
			Истина);
		Возврат;
	КонецЕсли;
	
	Роль = Выборка.КлючВлияющихДанных; // СправочникСсылка.ПолныеРоли
	
	ДатаКОбработке = Выборка.ДатаКОбработке;
	Если Не ЗначениеЗаполнено(ДатаКОбработке) Тогда
		ДатаКОбработке = ТекущаяДатаСеанса();
	КонецЕсли;
	
	НомерЦикла = 0;
	ДатаЦикла = ДатаКОбработке;
	
	ЕстьДанныеКОбработке = Истина;
	Пока ЕстьДанныеКОбработке Цикл
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1000
			|	ДействиеЗадачи.Ссылка КАК Ссылка,
			|	ДействиеЗадачи.Дата КАК Дата
			|ИЗ
			|	Документ.ДействиеЗадачи КАК ДействиеЗадачи
			|ГДЕ
			|	ДействиеЗадачи.Исполнитель = &Роль
			|	И ДействиеЗадачи.Дата <= &ДатаКОбработке
			|
			|УПОРЯДОЧИТЬ ПО
			|	ДействиеЗадачи.Дата УБЫВ");
		
		Запрос.УстановитьПараметр("Роль", Роль);
		Запрос.УстановитьПараметр("ДатаКОбработке", ДатаКОбработке);
		
		//@skip-check query-in-loop
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			ЕстьДанныеКОбработке = Истина;
			
			НачатьТранзакцию();
			Попытка
				
				ОбновитьКэширующиеДанныеПоДействиюЗадачи(ВыборкаДетальныеЗаписи.Ссылка);
				
				Если ВыборкаДетальныеЗаписи.Дата <> ДатаКОбработке Тогда
					ДатаКОбработке = ВыборкаДетальныеЗаписи.Дата;
					РегистрыСведений.ОчередьОбновленияКэширующихДанных.ОбновитьДатуКОбработке(
						Выборка.ОтметкаВремени,
						Выборка.ЗависимыйОбъектМетаданных,
						Выборка.ВлияющийОбъектМетаданных,
						Выборка.КлючВлияющихДанных,
						ДатаКОбработке);
				КонецЕсли;
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				ОтменитьТранзакцию();
				ВызватьИсключение;
			КонецПопытки;
			
		КонецЦикла;
		
		ЕстьДанныеКОбработке = ВыборкаДетальныеЗаписи.Количество() = 1000;
		Если ЕстьДанныеКОбработке И ДатаЦикла = ДатаКОбработке Тогда
			ВызватьИсключение НСтр("ru = 'Обнаружено зацикливание.'");
		КонецЕсли;
		
		ДатаЦикла = ДатаКОбработке;
		НомерЦикла = НомерЦикла + 1;
		Если НомерЦикла > 10000 Тогда
			ВызватьИсключение НСтр("ru = 'Обнаружено зацикливание.'");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Обновить кэширующие данные по сотруднику.
// 
// Параметры:
//  Выборка - ВыборкаИзРезультатаЗапроса.
// 
Процедура ОбновитьКэширующиеДанныеПоСотруднику(Выборка)
	
	Если Не Выборка.Долгое Тогда
		ИзмененияВлияющихДанных = Выборка.ИзмененияВлияющихДанных.Получить();
		РегистрыСведений.ОчередьОбновленияКэширующихДанных.Добавить(
			Выборка.ЗависимыйОбъектМетаданных,
			Выборка.ВлияющийОбъектМетаданных,
			Выборка.КлючВлияющихДанных,
			ИзмененияВлияющихДанных,
			Истина);
		Возврат;
	КонецЕсли;
	
	Сотрудник = Выборка.КлючВлияющихДанных; // СправочникСсылка.Сотрудники
	ИзмененияВлияющихДанных = Выборка.ИзмененияВлияющихДанных.Получить();
	
	ДатаКОбработке = Выборка.ДатаКОбработке;
	Если Не ЗначениеЗаполнено(ДатаКОбработке) Тогда
		ДатаКОбработке = ТекущаяДатаСеанса();
	КонецЕсли;
	
	НомерЦикла = 0;
	ДатаЦикла = ДатаКОбработке;
	
	ЕстьДанныеКОбработке = Истина;
	Пока ЕстьДанныеКОбработке Цикл
		
		Если ИзмененияВлияющихДанных.ВариантОбновления = "ОсобыйАвтор" Тогда
			
			Запрос = Новый Запрос(
				"ВЫБРАТЬ ПЕРВЫЕ 1000
				|	ДействиеЗадачи.Ссылка КАК Ссылка,
				|	ДействиеЗадачи.Дата КАК Дата
				|ИЗ
				|	Документ.ДействиеЗадачи КАК ДействиеЗадачи
				|ГДЕ
				|	ДействиеЗадачи.ОсобыйАвтор = &Сотрудник
				|	И ДействиеЗадачи.Дата <= &ДатаКОбработке
				|
				|УПОРЯДОЧИТЬ ПО
				|	ДействиеЗадачи.Дата УБЫВ");
				
		ИначеЕсли ИзмененияВлияющихДанных.ВариантОбновления = "Исполнитель" Тогда
			
			Запрос = Новый Запрос(
				"ВЫБРАТЬ ПЕРВЫЕ 1000
				|	ДействиеЗадачи.Ссылка КАК Ссылка,
				|	ДействиеЗадачи.Дата КАК Дата
				|ИЗ
				|	Документ.ДействиеЗадачи КАК ДействиеЗадачи
				|ГДЕ
				|	ДействиеЗадачи.Исполнитель = &Сотрудник
				|	И ДействиеЗадачи.Дата <= &ДатаКОбработке
				|
				|УПОРЯДОЧИТЬ ПО
				|	ДействиеЗадачи.Дата УБЫВ");
				
		Иначе
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Неизвестный вариант обновления %1.'"),
				ИзмененияВлияющихДанных.ВариантОбновления);
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
		Запрос.УстановитьПараметр("ДатаКОбработке", ДатаКОбработке);
		
		//@skip-check query-in-loop
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			ЕстьДанныеКОбработке = Истина;
			
			НачатьТранзакцию();
			Попытка
				
				ОбновитьКэширующиеДанныеПоДействиюЗадачи(ВыборкаДетальныеЗаписи.Ссылка);
				
				Если ВыборкаДетальныеЗаписи.Дата <> ДатаКОбработке Тогда
					ДатаКОбработке = ВыборкаДетальныеЗаписи.Дата;
					РегистрыСведений.ОчередьОбновленияКэширующихДанных.ОбновитьДатуКОбработке(
						Выборка.ОтметкаВремени,
						Выборка.ЗависимыйОбъектМетаданных,
						Выборка.ВлияющийОбъектМетаданных,
						Выборка.КлючВлияющихДанных,
						ДатаКОбработке);
				КонецЕсли;
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				ОтменитьТранзакцию();
				ВызватьИсключение;
			КонецПопытки;
			
		КонецЦикла;
		
		ЕстьДанныеКОбработке = ВыборкаДетальныеЗаписи.Количество() = 1000;
		Если ЕстьДанныеКОбработке И ДатаЦикла = ДатаКОбработке Тогда
			ВызватьИсключение НСтр("ru = 'Обнаружено зацикливание.'");
		КонецЕсли;
		
		ДатаЦикла = ДатаКОбработке;
		НомерЦикла = НомерЦикла + 1;
		Если НомерЦикла > 10000 Тогда
			ВызватьИсключение НСтр("ru = 'Обнаружено зацикливание.'");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Обновить кэширующие данные по структуре предприятия.
// 
// Параметры:
//  Выборка - ВыборкаИзРезультатаЗапроса.
// 
Процедура ОбновитьКэширующиеДанныеПоСтруктуреПредпирятия(Выборка)
	
	Подразделение = Выборка.КлючВлияющихДанных; // СправочникСсылка.СтруктураПредприятия
	
	СотрудникиПодразделения = Сотрудники.СотрудникиПодразделения(Подразделение);
	РолиПодразделения = РегистрыСведений.ИсполнителиРолей.РолиИсполнителей(СотрудникиПодразделения);
	
	НачатьТранзакцию();
	Попытка
		
		Для Каждого СотрудникПодразделения Из СотрудникиПодразделения Цикл
			
			ИзмененияВлияющихДанных = ОбновлениеКэширующихДанных.НовыеИзмененияВлияющихДанных();
			ИзмененияВлияющихДанных.ВариантОбновления = "Исполнитель";
			РегистрыСведений.ОчередьОбновленияКэширующихДанных.Добавить(
				"Документ.ДействиеЗадачи",
				"Документ.ДействиеЗадачи",
				СотрудникПодразделения,
				ИзмененияВлияющихДанных);
			
		КонецЦикла;
		
		Для Каждого РольПодразделения Из РолиПодразделения Цикл
			
			РегистрыСведений.ОчередьОбновленияКэширующихДанных.Добавить(
				"Документ.ДействиеЗадачи",
				"Документ.ДействиеЗадачи",
				РольПодразделения);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Обновить кэширующие данные по замещающему или помощнику.
// 
// Параметры:
//  Выборка - ВыборкаИзРезультатаЗапроса.
// 
Процедура ОбновитьКэширующиеДанныеПоЗамещающимИПомощникам(Выборка)
	
	ЗатронутыеСотрудники = Новый Массив;
	
	ИзмененияВлияющихДанных = Выборка.ИзмененияВлияющихДанных.Получить();
	Если ИзмененияВлияющихДанных <> Неопределено Тогда
		
		ПредыдущиеЗначенияРеквизитов = ИзмененияВлияющихДанных.ПредыдущиеЗначенияРеквизитов;
		НовыеЗначенияРеквизитов = ИзмененияВлияющихДанных.НовыеЗначенияРеквизитов;
		
		Если ЗначениеЗаполнено(НовыеЗначенияРеквизитов.Сотрудник) Тогда
			ЗатронутыеСотрудники.Добавить(НовыеЗначенияРеквизитов.Сотрудник);
		КонецЕсли;
		Если ЗначениеЗаполнено(ПредыдущиеЗначенияРеквизитов.Сотрудник)
			И ПредыдущиеЗначенияРеквизитов.Сотрудник <> НовыеЗначенияРеквизитов.Сотрудник Тогда
			ЗатронутыеСотрудники.Добавить(ПредыдущиеЗначенияРеквизитов.Сотрудник);
		КонецЕсли;
		
		ИзменилсяСотрудник =
			ПредыдущиеЗначенияРеквизитов.Сотрудник <> НовыеЗначенияРеквизитов.Сотрудник;
		
		ИзменилсяЗамещающий =
			ПредыдущиеЗначенияРеквизитов.Замещающий <> НовыеЗначенияРеквизитов.Замещающий;
		
		ИзменилосьДействует =
			ПредыдущиеЗначенияРеквизитов.Действует <> НовыеЗначенияРеквизитов.Действует;
		
		БылиВсеОбласти =
			ПредыдущиеЗначенияРеквизитов.ВопросыЗамещения.Найти(
				Справочники.ОбластиЗамещения.ВсеОбласти, "Область") <> Неопределено;
		БылаОбластьЗадачиПросмотр =
			ПредыдущиеЗначенияРеквизитов.ВопросыЗамещения.Найти(
				Справочники.ОбластиЗамещения.ЗадачиПросмотр, "Область") <> Неопределено;
		БылаОбластьЗадачи =
			ПредыдущиеЗначенияРеквизитов.ВопросыЗамещения.Найти(
				Справочники.ОбластиЗамещения.Задачи, "Область") <> Неопределено;
		ПредыдущееЗначениеЕстьОбласть =
			БылиВсеОбласти Или БылаОбластьЗадачиПросмотр Или БылаОбластьЗадачи;
		
		ЕстьВсеОбласти =
			НовыеЗначенияРеквизитов.ВопросыЗамещения.Найти(
				Справочники.ОбластиЗамещения.ВсеОбласти, "Область") <> Неопределено;
		ЕстьОбластьЗадачиПросмотр =
			НовыеЗначенияРеквизитов.ВопросыЗамещения.Найти(
				Справочники.ОбластиЗамещения.ЗадачиПросмотр, "Область") <> Неопределено;
		ЕстьОбластьЗадачи =
			НовыеЗначенияРеквизитов.ВопросыЗамещения.Найти(
				Справочники.ОбластиЗамещения.Задачи, "Область") <> Неопределено;
		НовоеЗначениеЕстьОбласть =
			ЕстьВсеОбласти Или ЕстьОбластьЗадачиПросмотр Или ЕстьОбластьЗадачи;
			
		ИзмениласьОбласть =
			ПредыдущееЗначениеЕстьОбласть <> НовоеЗначениеЕстьОбласть;
		
		ЕстьИзменения = 
			ИзменилосьДействует
			Или (НовыеЗначенияРеквизитов.Действует
				И (ИзменилсяСотрудник Или ИзменилсяЗамещающий Или ИзмениласьОбласть));
		
		Если Не ЕстьИзменения Тогда
			Возврат;
		КонецЕсли;
		
	Иначе
		
		ЗамещающийИлиПомощник = Выборка.КлючВлияющихДанных; // СправочникСсылка.ЗамещающиеИПомощники
		
		ЗатронутыйСотрудник =
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗамещающийИлиПомощник, "Сотрудник");
		Если ЗначениеЗаполнено(ЗатронутыйСотрудник) Тогда
			ЗатронутыеСотрудники.Добавить(ЗатронутыйСотрудник);
		КонецЕсли;
		
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Для Каждого ЗатронутыйСотрудник Из ЗатронутыеСотрудники Цикл
			
			ИзмененияВлияющихДанных = ОбновлениеКэширующихДанных.НовыеИзмененияВлияющихДанных();
			ИзмененияВлияющихДанных.ВариантОбновления = "Исполнитель";
			РегистрыСведений.ОчередьОбновленияКэширующихДанных.Добавить(
				"Документ.ДействиеЗадачи",
				"Документ.ДействиеЗадачи",
				ЗатронутыйСотрудник,
				ИзмененияВлияющихДанных);
			
			ИзмененияВлияющихДанных = ОбновлениеКэширующихДанных.НовыеИзмененияВлияющихДанных();
			ИзмененияВлияющихДанных.ВариантОбновления = "ОсобыйАвтор";
			РегистрыСведений.ОчередьОбновленияКэширующихДанных.Добавить(
				"Документ.ДействиеЗадачи",
				"Документ.ДействиеЗадачи",
				ЗатронутыйСотрудник,
				ИзмененияВлияющихДанных);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
		
КонецПроцедуры

// Определяет идентификаторы в источнике по источнику.
// 
// Параметры:
//  Источник - ОпределяемыйТип.ИсточникДействийЗадач
//
// Возвращаемое значение:
//  Массив из УникальныйИдентификатор
//
Функция ИдентификаторыВИсточнике(Источник) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИдентификаторыВИсточнике = Новый Массив;
	
	Если Не ЗначениеЗаполнено(Источник) Тогда
		Возврат ИдентификаторыВИсточнике;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДействиеЗадачи.ИдентификаторВИсточнике КАК ИдентификаторВИсточнике
		|ИЗ
		|	Документ.ДействиеЗадачи КАК ДействиеЗадачи
		|ГДЕ
		|	ДействиеЗадачи.Источник = &Источник");
	
	Запрос.УстановитьПараметр("Источник", Источник);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ИдентификаторыВИсточнике.Добавить(ВыборкаДетальныеЗаписи.ИдентификаторВИсточнике);
	КонецЦикла;
	
	Возврат ИдентификаторыВИсточнике;
	
КонецФункции

// Определяет источники по идентификатору в источнике.
// 
// Параметры:
//  ИдентификаторВИсточнике - УникальныйИдентификатор
//
// Возвращаемое значение:
//  Массив из ОпределяемыйТип.ИсточникДействийЗадач
//
Функция ИсточникиПоИдентификатору(ИдентификаторВИсточнике) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИсточникиПоИдентификатору = Новый Массив;
	
	Если Не ЗначениеЗаполнено(ИдентификаторВИсточнике) Тогда
		Возврат ИсточникиПоИдентификатору;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДействиеЗадачи.Источник КАК Источник
		|ИЗ
		|	Документ.ДействиеЗадачи КАК ДействиеЗадачи
		|ГДЕ
		|	ДействиеЗадачи.ИдентификаторВИсточнике = &ИдентификаторВИсточнике");
	
	Запрос.УстановитьПараметр("ИдентификаторВИсточнике", ИдентификаторВИсточнике);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ИсточникиПоИдентификатору.Добавить(ВыборкаДетальныеЗаписи.Источник);
	КонецЦикла;
	
	Возврат ИсточникиПоИдентификатору;
	
КонецФункции

#КонецОбласти

#КонецЕсли