#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УчитыватьИерархиюПодразделений = Истина;
	
	// Отбора по дате отсутствия.
	УстановитьОтборДатаОтсутствия();
	
	// Отображать удаленные - при первом открытии формы нужно не отображать удаленные.
	УстановитьОтборПоказыватьУдаленные();
	
	// Отбор по подразделению
	УстановитьОтборПодразделение();
	
	УстановитьОтборПричина();
	
	УстановитьОтборУдаленнаяРабота();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаКоманднаяПанель;
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	Элементы.Список.РежимВыбора = Параметры.РежимВыбора;
	
	ЭтоМобильныйКлиент = ПараметрыСеанса.ЭтоМобильныйКлиент;
	ЭтоМобильноеУстройствоСБольшимЭкраном = МК_КлиентСервер.ЭтоМобильныйСБольшимЭкраном();
	Если ЭтоМобильныйКлиент Тогда
		МК_ЭлементыСтиля = МК_ПовтИсп.ЭлементыСтиля();
		МК_НастроитьЭлементыФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Отсутствие" И Параметр.Ссылка = ТекущееОтсутствие Тогда
		ОбновитьОтсутствие();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	// Отбора по дате отсутствия.
	УстановитьОтборДатаОтсутствия();
	
	// Отображать удаленные
	УстановитьОтборПоказыватьУдаленные();
	
	// Отбор по подразделению
	УстановитьОтборПодразделение();
	
	УстановитьОтборПричина();
	
	УстановитьОтборУдаленнаяРабота();
	
	Если ЭтоМобильныйКлиент Тогда
		МК_КлиентСервер.ОформитьПроизвольныйЭлементПоСостоянию(МК_ЭлементыСтиля,
			Элементы.МК_ОтборПодразделение,
			ЗначениеЗаполнено(ОтборПодразделение));
		
		МК_КлиентСервер.ОформитьПроизвольныйЭлементПоСостоянию(МК_ЭлементыСтиля,
			Элементы.МК_ОтборПричина,
			ЗначениеЗаполнено(ОтборПричина));
	Иначе
		ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(
			Элементы.ВариантОтбора, ВариантОтбора, "ЗаДень");
		ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(
			Элементы.ОтборПодразделение, ОтборПодразделение);
		ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(
			Элементы.ОтборПричина, ОтборПричина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПараметровЭкрана()

	ЭтоМобильноеУстройствоСБольшимЭкраном = МК_КлиентСервер.ЭтоМобильныйСБольшимЭкраном();
	ПриИзмененииПараметровЭкранаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЭтоМобильныйКлиент Тогда
		Элементы.Список.Обновить();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборДатаОтсутствияПриИзменении(Элемент)
	
	УстановитьОтборДатаОтсутствия();
	
	Если ЭтоМобильныйКлиент И ЭтоМобильноеУстройствоСБольшимЭкраном Тогда
		Элементы.Список.Обновить();
		ТекущееОтсутствие = Элементы.Список.ТекущаяСтрока;
		ОбновитьОтсутствие();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолноеОписаниеОтсутствияПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВстроеннаяПочтаКлиент.ОткрытьСсылку(ДанныеСобытия.Href, ДанныеСобытия.Element, , Элемент.Документ);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантОтбораПриИзменении(Элемент)
	
	УстановитьОтборДатаОтсутствия();
	
	Если ЭтоМобильныйКлиент Тогда
		ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(
			Элементы.МК_ВариантОтбора,
			ВариантОтбора,
			"ЗаДень");
	Иначе
		ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(
			Элементы.ВариантОтбора,
			ВариантОтбора,
			"ЗаДень");
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ОтборУдаленнаяРаботаПриИзменении(Элемент)
	
	УстановитьОтборУдаленнаяРабота();

	Если Не ЭтоМобильныйКлиент Тогда
		ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(
			Элементы.ОтборУдаленнаяРабота,
			ОтборУдаленнаяРабота,
			"Все");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПричинаПриИзменении(Элемент)
	
	УстановитьОтборПричина();
	
	Если Не ЭтоМобильныйКлиент Тогда
		ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(
			Элементы.ОтборПричина,
			ОтборПричина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПодразделениеПриИзменении(Элемент)
	
	УстановитьОтборПодразделение();

	Если Не ЭтоМобильныйКлиент Тогда
		ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элементы.ОтборПодразделение,
				ОтборПодразделение);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОтборДатаОтсутствияПриВыводеПериода(Элемент, ОформлениеПериода)
	
	ОбщегоНазначенияДокументооборотКлиент.ПриВыводеПериода(Элемент, ОформлениеПериода);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено
		Или ТипЗнч(Элемент.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		ТекущееОтсутствие = Неопределено;
	ИначеЕсли Элемент.ТекущиеДанные.Ссылка <> ТекущееОтсутствие Тогда
		ТекущееОтсутствие = Элемент.ТекущиеДанные.Ссылка;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОбновитьОтсутствие", 0.2, Истина);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Копирование Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	ОтсутствияКлиент.СоздатьОтсутствие(ОтборДатаОтсутствия, Неопределено, Элементы.Список);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	Для Каждого КлючИЗначение Из Строки Цикл
		
		ДанныеСтроки = КлючИЗначение.Значение.Данные;
		
		// Период строкой
		Если ДанныеСтроки.Свойство("ПериодСтрокой") Тогда
			ДанныеСтроки.ПериодСтрокой = Отсутствия.МестныйПериодСтрокой(
				ДанныеСтроки.ДатаНачала,
				ДанныеСтроки.ДатаОкончания,
				ДанныеСтроки.ВесьДень);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОбработкаЗапросаОбновления(Элемент)
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УчитыватьИерархиюПодразделений(Команда)
	
	УчитыватьИерархиюПодразделений = Не УчитыватьИерархиюПодразделений;
	УстановитьОтборПодразделение();
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Элементы.Список, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ПоказыватьУдаленные(Команда)
	
	ПоказыватьУдаленные = Не ПоказыватьУдаленные;
	УстановитьОтборПоказыватьУдаленные();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчеты(Команда)
	
	ПараметрыФормы = Новый Структура("Раздел, ЗаголовокФормы, НеОтображатьИерархию, РазделГипперссылка");
	ПараметрыФормы.Раздел = ПредопределенноеЗначение("Перечисление.РазделыОтчетов.ОтсутствияСписок");
	ПараметрыФормы.ЗаголовокФормы = НСтр("ru = 'Отчеты об отсутствиях'");
	ПараметрыФормы.НеОтображатьИерархию = Истина;
	ПараметрыФормы.РазделГипперссылка = НастройкиВариантовОтчетовДокументооборот.ПолучитьРазделОтчетаПоИмени("СовместнаяРабота");
	
	ОткрытьФорму(
		"Обработка.ВсеОтчеты.Форма.ФормаПоКатегориям",
		ПараметрыФормы,
		ЭтотОбъект,
		"ОтсутствияСписок");
	
КонецПроцедуры

&НаКлиенте
Процедура МК_ПоказатьСкрытьФильтры(Команда)

	Элементы.МК_ГруппаФильтры.Видимость = Не Элементы.МК_ГруппаФильтры.Видимость;
	ОформитьКнопкуПоказатьСкрытьОтборы(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура МК_ВариантОтбора(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВариантОтбораПослеВыбора",
		ЭтотОбъект);
		
	СписокВариантовОтбора = Новый СписокЗначений;
	
	СписокВариантовОтбора.Добавить("Все", НСтр("ru='Все отсутствия'"));
	СписокВариантовОтбора.Добавить("ЗаДень", НСтр("ru='За день'"));
	СписокВариантовОтбора.Добавить("ЗаНеделю", НСтр("ru='За неделю'"));
	СписокВариантовОтбора.Добавить("ЗаМесяц", НСтр("ru='За месяц'"));
	СписокВариантовОтбора.Добавить("ЗаГод", НСтр("ru='За год'"));
	
	ПоказатьВыборИзСписка(ОписаниеОповещения, СписокВариантовОтбора, Элементы.МК_ВариантОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура МК_ОчиститьФильтры(Команда)
	
	ОтборПричина = ПредопределенноеЗначение("Справочник.ВидыОтсутствий.ПустаяСсылка");
	УстановитьОтборПричина();
	
	ОтборУдаленнаяРабота = "Все";
	УстановитьОтборУдаленнаяРабота();
	
	ОтборПодразделение = ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка");
	УстановитьОтборПодразделение();

КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьОтборы(Команда)

	Элементы.МК_ГруппаФильтры.Видимость = Ложь;
	ОформитьКнопкуПоказатьСкрытьОтборы(ЭтотОбъект);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьОтборДатаОтсутствия()
	
	Если Не ЗначениеЗаполнено(ВариантОтбора) Тогда
		ВариантОтбора = "ЗаДень";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОтборДатаОтсутствия) Тогда
		ПериодСегодня = Новый СтандартныйПериод(ВариантСтандартногоПериода.Сегодня);
		ОтборДатаОтсутствия = ПериодСегодня.ДатаНачала;
	КонецЕсли;
	
	// Установка отбора в соответствии с вариантом отбора по датам
	Если ВариантОтбора = "Все" Тогда
		
		Заголовок = НСтр("ru = 'Все отсутствия сотрудников'");
		ПараметрНачалоДняОтбора = Список.Параметры.НайтиЗначениеПараметра(
			Новый ПараметрКомпоновкиДанных("НачалоДняОтбора"));
		ПараметрНачалоДняОтбора.Использование = Ложь;
		ПараметрКонецДняОтбора = Список.Параметры.НайтиЗначениеПараметра(
			Новый ПараметрКомпоновкиДанных("КонецДняОтбора"));
		ПараметрКонецДняОтбора.Использование = Ложь;
		Элементы.Список.ТекущаяСтрока = Отсутствия.ПолучитьБлижайшееОтсутствие(
			ОтборДатаОтсутствия, ПоказыватьУдаленные);
			
		Если ЭтоМобильныйКлиент Тогда
			Элементы.МК_ОтборДатаОтсутствияПолеВвода.Видимость = Ложь;
			Элементы.МК_ВариантОтбора.Заголовок =  НСтр("ru='Все отсутствия'");
		КонецЕсли;
			
	ИначеЕсли ВариантОтбора = "ЗаДень" Тогда
		
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Отсутствия за %1 года'"),
			Формат(ОтборДатаОтсутствия, "ДФ='dd MMMM yyyy'"));
		Список.Параметры.УстановитьЗначениеПараметра("НачалоДняОтбора", НачалоДня(ОтборДатаОтсутствия));
		Список.Параметры.УстановитьЗначениеПараметра("КонецДняОтбора", КонецДня(ОтборДатаОтсутствия));
		
		Если ЭтоМобильныйКлиент Тогда
			Элементы.МК_ОтборДатаОтсутствияПолеВвода.Видимость = Истина;
			Элементы.МК_ОтборДатаОтсутствияПолеВвода.ФорматРедактирования = НСтр("ru='ДФ=''dd MMMM yyyy'''");
			Элементы.МК_ВариантОтбора.Заголовок =  НСтр("ru='За день'");
		КонецЕсли;
		
		Элементы.ОтборДатаОтсутствияПолеВвода.ФорматРедактирования =
			НСтр("ru='ДФ=''dd.MM.yyyy'''");
		
	ИначеЕсли ВариантОтбора = "ЗаНеделю" Тогда
		
		НачалоДняОтбора = НачалоНедели(ОтборДатаОтсутствия);
		КонецДняОтбора = КонецНедели(ОтборДатаОтсутствия);
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Отсутствия с %1 по %2'"),
			Формат(НачалоДняОтбора, "ДФ='dd MMMM yyyy'"),
			Формат(КонецДняОтбора, "ДФ='dd MMMM yyyy'"));
		Список.Параметры.УстановитьЗначениеПараметра("НачалоДняОтбора", НачалоДняОтбора);
		Список.Параметры.УстановитьЗначениеПараметра("КонецДняОтбора", КонецДняОтбора);
		
		Если ЭтоМобильныйКлиент Тогда
			Элементы.МК_ОтборДатаОтсутствияПолеВвода.Видимость = Истина;
			Элементы.МК_ОтборДатаОтсутствияПолеВвода.ФорматРедактирования = НСтр("ru='ДФ=''dd MMMM yyyy'''");
			Элементы.МК_ВариантОтбора.Заголовок =  НСтр("ru='За неделю'");
		КонецЕсли;
		
		Элементы.ОтборДатаОтсутствияПолеВвода.ФорматРедактирования =
			НСтр("ru='ДФ=''dd.MM.yyyy'''");
		
	ИначеЕсли ВариантОтбора = "ЗаМесяц" Тогда
		
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Отсутствия за %1 года'"),
			НРег(Формат(ОтборДатаОтсутствия, "ДФ='MMMM yyyy'")));
		Список.Параметры.УстановитьЗначениеПараметра("НачалоДняОтбора", НачалоМесяца(ОтборДатаОтсутствия));
		Список.Параметры.УстановитьЗначениеПараметра("КонецДняОтбора", КонецМесяца(ОтборДатаОтсутствия));
		
		Если ЭтоМобильныйКлиент Тогда
			Элементы.МК_ОтборДатаОтсутствияПолеВвода.Видимость = Истина;
			Элементы.МК_ОтборДатаОтсутствияПолеВвода.ФорматРедактирования = НСтр("ru='ДФ=''MM.yyyy'''");
			Элементы.МК_ВариантОтбора.Заголовок =  НСтр("ru='За месяц'");
		КонецЕсли;
		
		Элементы.ОтборДатаОтсутствияПолеВвода.ФорматРедактирования =
			НСтр("ru='ДФ=''MM.yyyy'''");
		
	ИначеЕсли ВариантОтбора = "ЗаГод" Тогда
		
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Отсутствия за %1 год'"),
			НРег(Формат(ОтборДатаОтсутствия, "ДФ='yyyy'")));
		Список.Параметры.УстановитьЗначениеПараметра("НачалоДняОтбора", НачалоГода(ОтборДатаОтсутствия));
		Список.Параметры.УстановитьЗначениеПараметра("КонецДняОтбора", КонецГода(ОтборДатаОтсутствия));
		
		Если ЭтоМобильныйКлиент Тогда
			Элементы.МК_ОтборДатаОтсутствияПолеВвода.Видимость = Истина;
			Элементы.МК_ОтборДатаОтсутствияПолеВвода.ФорматРедактирования = НСтр("ru='ДФ=''yyyy'''");
			Элементы.МК_ВариантОтбора.Заголовок =  НСтр("ru='За год'");
		КонецЕсли;
		
		Элементы.ОтборДатаОтсутствияПолеВвода.ФорматРедактирования =
			НСтр("ru='ДФ=''yyyy'''");
		
	КонецЕсли;
	
	ОбновитьВидимостьОтборДатаОтсутствия();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьОтборДатаОтсутствия()
	
	Элементы.ОтборДатаОтсутствия.Видимость = ВариантОтбора <> "Все"
		И Не ПараметрыСеанса.ЭтоМобильныйКлиент;
	Элементы.ОтборДатаОтсутствияПолеВвода.Видимость = Элементы.ОтборДатаОтсутствия.Видимость;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПодразделение()
	
	ПараметрПодразделение = Список.Параметры.НайтиЗначениеПараметра(
		Новый ПараметрКомпоновкиДанных("Подразделение"));
	ПараметрПодразделение.Использование = Ложь;
	
	ПараметрПодразделениеВИерархии = Список.Параметры.НайтиЗначениеПараметра(
		Новый ПараметрКомпоновкиДанных("ПодразделениеВИерархии"));
	ПараметрПодразделениеВИерархии.Использование = Ложь;
	
	Элементы.УчитыватьИерархиюПодразделений.Пометка = УчитыватьИерархиюПодразделений;
	
	Если ЗначениеЗаполнено(ОтборПодразделение) И УчитыватьИерархиюПодразделений = Ложь Тогда
		Список.Параметры.УстановитьЗначениеПараметра("Подразделение", ОтборПодразделение);
	ИначеЕсли ЗначениеЗаполнено(ОтборПодразделение) И УчитыватьИерархиюПодразделений = Истина Тогда
		Список.Параметры.УстановитьЗначениеПараметра("ПодразделениеВИерархии", ОтборПодразделение);
	КонецЕсли;
	
	Если ЭтоМобильныйКлиент Тогда
		МК_КлиентСервер.ОформитьПроизвольныйЭлементПоСостоянию(МК_ЭлементыСтиля,
			Элементы.МК_ОтборПодразделение,
			ЗначениеЗаполнено(ОтборПодразделение));
		Элементы.МК_ОтборПодразделение.КнопкаОчистки = ЗначениеЗаполнено(ОтборПодразделение);
		ОформитьКнопкуПоказатьСкрытьОтборы(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПричина()
	
	ПараметрПричина = Список.Параметры.НайтиЗначениеПараметра(
		Новый ПараметрКомпоновкиДанных("ВидОтсутствия"));
	ПараметрПричина.Использование = Ложь;
	
	ЭтоУдаленнаяРабота = Ложь;
	Если ЗначениеЗаполнено(ОтборПричина) Тогда
		Список.Параметры.УстановитьЗначениеПараметра("ВидОтсутствия", ОтборПричина);
		ЭтоУдаленнаяРабота = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОтборПричина, "ЭтоУдаленнаяРабота");
	КонецЕсли;

	Если ЭтоМобильныйКлиент Тогда
		МК_КлиентСервер.ОформитьПроизвольныйЭлементПоСостоянию(МК_ЭлементыСтиля,
			Элементы.МК_ОтборПричина,
			ЗначениеЗаполнено(ОтборПричина));
		Элементы.МК_ОтборПричина.КнопкаОчистки = ЗначениеЗаполнено(ОтборПричина);
		ОформитьКнопкуПоказатьСкрытьОтборы(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоказыватьУдаленные()
	
	Параметр = Список.Параметры.НайтиЗначениеПараметра(
		Новый ПараметрКомпоновкиДанных("ОтборПоказыватьУдаленные"));
	Параметр.Использование = Ложь;
	
	Элементы.ФормаПоказыватьУдаленные.Пометка = ПоказыватьУдаленные;
	
	Если Не ПоказыватьУдаленные Тогда
		Список.Параметры.УстановитьЗначениеПараметра("ОтборПоказыватьУдаленные", Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтсутствие()
	
	Если Не ЗначениеЗаполнено(ТекущееОтсутствие) Тогда
		ПолноеОписаниеОтсутствия = ОтсутствияКлиентСервер.ПолучитьПустоеHTMLПредставление();
		Возврат;
	КонецЕсли;
	
	ОбновитьДанныеОтсутствия(ТекущееОтсутствие, ПолноеОписаниеОтсутствия);
	
	Если ЭтоМобильныйКлиент Тогда
		МК_КлиентСервер.АдаптироватьHtmlПодЭкранМобильногоПриНеобходимости(ПолноеОписаниеОтсутствия);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьДанныеОтсутствия(Отсутствие, ПолноеОписаниеОтсутствия)
	
	ПолноеОписаниеОтсутствия = Документы.Отсутствие.ПолучитьПредставлениеHTML(Отсутствие);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборУдаленнаяРабота()
	
	Если Не ЗначениеЗаполнено(ОтборУдаленнаяРабота) Тогда
		ОтборУдаленнаяРабота = "Все";
	КонецЕсли;
	
	ПараметрыВыбораПричины = Новый Массив;
	ПараметрыВыбораПричины.Добавить(Новый ПараметрВыбора("Отбор.ПометкаУдаления", Ложь));
	
	Если ОтборУдаленнаяРабота = "Все" Тогда
		
		ПараметрНачалоДняОтбора = Список.Параметры.НайтиЗначениеПараметра(
			Новый ПараметрКомпоновкиДанных("ВидыОтсутствия"));
		ПараметрНачалоДняОтбора.Использование = Ложь;
		
	ИначеЕсли ОтборУдаленнаяРабота = "ТолькоРаботающиеУдаленно" Тогда
		
		Список.Параметры.УстановитьЗначениеПараметра(
			"ВидыОтсутствия",
			Справочники.ВидыОтсутствий.ВидыУдаленнойРаботы());
		ПараметрыВыбораПричины.Добавить(Новый ПараметрВыбора("Отбор.ЭтоУдаленнаяРабота", Истина));
		
		Если ЗначениеЗаполнено(ОтборПричина) Тогда
			ЭтоУдаленнаяРабота = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОтборПричина, "ЭтоУдаленнаяРабота");
			Если Не ЭтоУдаленнаяРабота Тогда
				ОтборПричина = Неопределено;
				УстановитьОтборПричина();
				ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элементы.ОтборПричина, ОтборПричина);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ОтборУдаленнаяРабота = "ТолькоНеРаботающиеУдаленно" Тогда
		
		Список.Параметры.УстановитьЗначениеПараметра(
			"ВидыОтсутствия",
			Справочники.ВидыОтсутствий.ВидыОбычногоОтсутствия());
		ПараметрыВыбораПричины.Добавить(Новый ПараметрВыбора("Отбор.ЭтоУдаленнаяРабота", Ложь));
		
		Если ЗначениеЗаполнено(ОтборПричина) Тогда
			ЭтоУдаленнаяРабота = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОтборПричина, "ЭтоУдаленнаяРабота");
			Если ЭтоУдаленнаяРабота Тогда
				ОтборПричина = Неопределено;
				УстановитьОтборПричина();
				ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элементы.ОтборПричина, ОтборПричина);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ОтборПричина.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораПричины);
	
	Если ЭтоМобильныйКлиент Тогда
		МК_КлиентСервер.ОформитьПроизвольныйЭлементПоСостоянию(МК_ЭлементыСтиля,
			Элементы.МК_ОтборУдаленнаяРабота,
			ОтборУдаленнаяРабота <> "Все");
		Элементы.МК_ОтборУдаленнаяРабота.КнопкаОчистки = ОтборУдаленнаяРабота <> "Все";
		ОформитьКнопкуПоказатьСкрытьОтборы(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

#Область СлужебныеПроцедурыИФункции_МобильныйКлиент

&НаСервере
Процедура МК_НастроитьЭлементыФормы()

	СворачиваниеЭлементовПоВажности = СворачиваниеЭлементовФормыПоВажности.НеИспользовать;
	ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Половинный;
	
	Элементы.МК.Видимость = Истина;
	
	//Командная панель.
	Элементы.ГруппаКоманднаяПанель.Видимость = Ложь;
	СоставКоманднойПанелиНаМобильномУстройстве.Добавить(Элементы.МК_КоманднаяПанель);
	
	Элементы.Переместить(Элементы.ФормаОткрытьОтчеты, Элементы.МК_КоманднаяПанель);
	Элементы.Переместить(Элементы.ФормаГруппаНастройки, Элементы.МК_КоманднаяПанель);
	Элементы.ФормаОткрытьОтчеты.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю;
	Элементы.Переместить(Элементы.ПодменюПечать, Элементы.Список.КонтекстноеМеню);
	
	// Фильтры.
	Элементы.ГруппаБыстрыеОтборы.Видимость = Ложь;
	Элементы.МК_ГруппаФильтры.Видимость = Ложь;

	МК_КлиентСервер.ОформитьКнопкуСворачиваемойГруппы(МК_ЭлементыСтиля,
		Элементы.МК_ЗакрытьОтборы,
		Истина,
		Истина);
	
	// Список.
	Элементы.Список.Шрифт = ШрифтыСтиля.МелкийШрифтТекста;
	Элементы.Список.Шапка = Ложь;
	Элементы.Список.ПоложениеСтрокиПоиска = ПоложениеСтрокиПоиска.ПотянутьСверху;
	
	Элементы.МК_ГруппаКолонок.Видимость = Истина;
	Элементы.Переместить(Элементы.Список, Элементы.МК_ГруппаСписок, Элементы.МК_НижняяПанель);
	Элементы.Переместить(Элементы.Сотрудник, Элементы.МК_ГруппаКолонок);
	Элементы.Переместить(Элементы.ПериодСтрокой, Элементы.МК_ГруппаКолонок);
	
	Элементы.ВидОтсутствия.ЦветТекста = ЦветаСтиля.МК_ЦветАвтораИсполнителя;

	Элементы.Переместить(Элементы.ГруппаКомментарий, Элементы.МК_ГруппаКолонок);
	Элементы.Ссылка.Видимость = Ложь;
	Элементы.ГруппаПериодСтрокой.Видимость = Ложь;
	
	// Акцентная кнопка.
	МК.ПреобразоватьКнопкуВАкцентную(ЭтотОбъект,
		МК_ЭлементыСтиля,
		Элементы.ФормаСоздать,
		Элементы.МК_НижняяПанель);

	// Предпросмотр.
	ОбновитьВидимостьОтборДатаОтсутствия();
	Элементы.ГруппаДополнительныеДанные.Ширина = 20;
	Элементы.ГруппаДополнительныеДанные.ЦветФона = ЦветаСтиля.МК_ЦветФонаГруппы ;
	МК_КлиентСервер.АдаптироватьHtmlПодЭкранМобильногоПриНеобходимости(ПолноеОписаниеОтсутствия);
	
	Элементы.Переместить(Элементы.ГруппаДополнительныеДанные,
		Элементы.МК_ГруппаДополнительныеДанные,
		Элементы.МК_Открыть);
	
	Элементы.МК_Открыть.РастягиватьПоГоризонтали = Истина;
	
	ПриИзмененииПараметровЭкранаНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ВариантОтбораПослеВыбора(ВыбранноеЗначение, Параметр) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВариантОтбора = ВыбранноеЗначение.Значение;
	Элементы.МК_ВариантОтбора.Заголовок = ВыбранноеЗначение.Представление;
	
	УстановитьОтборДатаОтсутствия();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПараметровЭкранаНаСервере()
	
	Элементы.МК_ГруппаДополнительныеДанные.Видимость = ЭтоМобильноеУстройствоСБольшимЭкраном;

	Элементы.МК_ГруппаСписокИДополнительныеДанные.Группировка =
		ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяЕслиВозможно;

	Если ЭтоМобильноеУстройствоСБольшимЭкраном Тогда
		Элементы.Список.ИспользованиеТекущейСтроки =
			ИспользованиеТекущейСтрокиТаблицы.ОтображениеВыделения;
		РодительФильтров = Элементы.ГруппаФильтрыИДопДанные;
		ЭлементСнизуФильтров = Элементы.МК_ГруппаДополнительныеДанные;
	Иначе
		Элементы.Список.ИспользованиеТекущейСтроки = ИспользованиеТекущейСтрокиТаблицы.Выбор;
		РодительФильтров = Элементы.МК_ГруппаСписок;
		ЭлементСнизуФильтров = Элементы.МК_НижняяПанель;
	КонецЕсли;
	
	Если Элементы.МК_ГруппаФильтры.Родитель <> РодительФильтров Тогда
		Элементы.Переместить(Элементы.МК_ГруппаФильтры, РодительФильтров, ЭлементСнизуФильтров);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОформитьКнопкуПоказатьСкрытьОтборы(Форма)
	
	ЕстьОтбор = Ложь;
	Если ЗначениеЗаполнено(Форма.ОтборПодразделение)
		Или ЗначениеЗаполнено(Форма.ОтборПричина)
		Или Форма.ОтборУдаленнаяРабота <> "Все" Тогда
		ЕстьОтбор = Истина;
	КонецЕсли;
	
	Форма.Элементы.МК_ПоказатьСкрытьФильтры.ЦветФона = ?(ЕстьОтбор,
		Форма.МК_ЭлементыСтиля.ЦветАктивнойДополнительнойКнопки,
		Форма.МК_ЭлементыСтиля.ЦветДополнительнойКнопки);
	
	Форма.Элементы.МК_ОчиститьФильтры.Доступность = ЕстьОтбор;
	
	Форма.Элементы.МК_ПоказатьСкрытьФильтры.Видимость =
		Не Форма.Элементы.МК_ГруппаФильтры.Видимость;

КонецПроцедуры
	
#КонецОбласти

#КонецОбласти
