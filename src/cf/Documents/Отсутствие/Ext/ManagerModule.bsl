#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Поля.Добавить("Сотрудник");
	Поля.Добавить("ВидОтсутствия");
	Поля.Добавить("ДатаНачала");
	Поля.Добавить("ДатаОкончания");
	Поля.Добавить("ВесьДень");
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Представление = ОтсутствияКлиентСервер.СформироватьПредставлениеОтсутствия(Данные, Истина);
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Карточка
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.Отсутствие";
	КомандаПечати.Идентификатор = "Карточка";
	КомандаПечати.Представление = НСтр("ru = 'Карточка отсутствия'");
	
КонецПроцедуры

// Процедура формирования печатной формы.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Карточка") Тогда
		
		// Формируем табличный документ и добавляем его в коллекцию печатных форм
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"Карточка", "Карточка отсутствия", ПечатьКарточки(МассивОбъектов, ОбъектыПечати, ПараметрыПечати),
			, "Документ.Отсутствие.ПФ_MXL_Карточка");
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует печатную форму карточки записи календаря.
//
Функция ПечатьКарточки(МассивОбъектов, ОбъектыПечати, ПараметрыПечати) Экспорт
	
	// Создаем табличный документ и устанавливаем имя параметров печати.
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПараметрыПечати_Карточка";
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	// Получение областей макета.
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.Отсутствие.ПФ_MXL_Карточка");
	ОбластьЗаголовокОтчета = Макет.ПолучитьОбласть("ЗаголовокОтчета");
	ОбластьДанныеОтсутствия = Макет.ПолучитьОбласть("ДанныеОтсутствия");
	ОбластьАвтор = Макет.ПолучитьОбласть("Автор");
	ОбластьЗаголовокЗаместители = Макет.ПолучитьОбласть("ЗаголовокЗаместители");
	ОбластьСтрокаЗаместитель = Макет.ПолучитьОбласть("СтрокаЗаместитель");
	ОбластьКомментарий = Макет.ПолучитьОбласть("Комментарий");
	
	// Получаем запросом необходимые данные.
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Отсутствие.Ссылка КАК Ссылка,
		|	Отсутствие.Сотрудник КАК Сотрудник,
		|	Отсутствие.ВидОтсутствия КАК ВидОтсутствия,
		|	Отсутствие.ДатаНачала КАК ДатаНачала,
		|	Отсутствие.ДатаОкончания КАК ДатаОкончания,
		|	Отсутствие.ВесьДень КАК ВесьДень,
		|	Отсутствие.Дата КАК Дата,
		|	Отсутствие.Автор КАК Автор,
		|	Отсутствие.Комментарий КАК Комментарий
		|ИЗ
		|	Документ.Отсутствие КАК Отсутствие
		|ГДЕ
		|	Отсутствие.Ссылка В(&МассивОбъектов)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаНачала";
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	ПервыйДокумент = Истина;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ЗаполнитьЗначенияСвойств(ОбластьЗаголовокОтчета.Параметры, Выборка);
		ТабличныйДокумент.Вывести(ОбластьЗаголовокОтчета);
		
		// Вывод основных реквизитов.
		ЗаполнитьЗначенияСвойств(ОбластьДанныеОтсутствия.Параметры, Выборка);
		ОбластьДанныеОтсутствия.Параметры.КогдаОтсутствует = 
			ОтсутствияКлиентСервер.СформироватьДатыОтсутствия(
				Выборка.ДатаНачала, Выборка.ДатаОкончания, Выборка.ВесьДень, Истина, Ложь, Ложь);
		ТабличныйДокумент.Вывести(ОбластьДанныеОтсутствия);
		
		// Вывод автора записи, если он отличается от сотрудника.
		Если Выборка.Автор <> Выборка.Сотрудник Тогда
			ОбластьАвтор.Параметры.Автор = Выборка.Автор;
			ТабличныйДокумент.Вывести(ОбластьАвтор);
		КонецЕсли;
		
		// Вывод заместителей.
		ВыборкаЗаместителей = Отсутствия.ВыборкаЗамещающихПоОтсутствию(Выборка.Ссылка);
		Если ВыборкаЗаместителей.Количество() > 0 Тогда
			ТабличныйДокумент.Вывести(ОбластьЗаголовокЗаместители);
			НомерСтроки = 0;
			Пока ВыборкаЗаместителей.Следующий() Цикл
				НомерСтроки = НомерСтроки + 1;
				ОбластьСтрокаЗаместитель.Параметры.НомерСтроки = НомерСтроки;
				ЗаполнитьЗначенияСвойств(ОбластьСтрокаЗаместитель.Параметры, ВыборкаЗаместителей);
				ТабличныйДокумент.Вывести(ОбластьСтрокаЗаместитель);
			КонецЦикла;
		КонецЕсли;
		
		// Вывод комментария.
		Если ЗначениеЗаполнено(Выборка.Комментарий) Тогда
			ОбластьКомментарий.Параметры.Комментарий = Выборка.Комментарий;
			ТабличныйДокумент.Вывести(ОбластьКомментарий);
		КонецЕсли;
		
		// В табличном документе зададим имя области в которую был 
		// выведен объект. Нужно для возможности печати по-комплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Выборка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

// Данные календаря по предмету.
// 
// Параметры:
//  Отсутствие - ДокументСсылка.Отсутствие.
// 
// Возвращаемое значение:
//  Массив из Структура - Данные календаря по предмету. См. РаботаСРабочимКалендаремСервер.НовыйДанныеЗаписиКалендаряПоПредмету().
//
Функция ДанныеКалендаряПоПредмету(Отсутствие) Экспорт
	
	ДанныеКалендаряПоПредмету = Новый Массив;
	
	РеквизитыОтсутствия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Отсутствие,
		"ВесьДень, ПометкаУдаления, ДатаНачала, ДатаОкончания, ВидОтсутствия, Комментарий, Сотрудник");
	
	Если РеквизитыОтсутствия.ПометкаУдаления
		Или Не ЗначениеЗаполнено(РеквизитыОтсутствия.ДатаНачала)
		Или Не ЗначениеЗаполнено(РеквизитыОтсутствия.ДатаОкончания)
		Или Не ЗначениеЗаполнено(РеквизитыОтсутствия.Сотрудник) Тогда
		Возврат ДанныеКалендаряПоПредмету;
	КонецЕсли;
	
	ДанныеЗаписиКалендаряПоПредмету =
		РаботаСРабочимКалендаремСервер.НовыйДанныеЗаписиКалендаряПоПредмету();
	ДанныеЗаписиКалендаряПоПредмету.Предмет = Отсутствие;
	ДанныеЗаписиКалендаряПоПредмету.Сотрудник = РеквизитыОтсутствия.Сотрудник;
	ДанныеЗаписиКалендаряПоПредмету.ДатаНачала = РеквизитыОтсутствия.ДатаНачала;
	ДанныеЗаписиКалендаряПоПредмету.ДатаОкончания = РеквизитыОтсутствия.ДатаОкончания;
	ДанныеЗаписиКалендаряПоПредмету.ВесьДень = РеквизитыОтсутствия.ВесьДень;
	ДанныеЗаписиКалендаряПоПредмету.ПодключатьНапоминаниеАвтоматически = Ложь;
	ДанныеЗаписиКалендаряПоПредмету.ОповещатьОбИзменении = Ложь;
	
	ДанныеЗаписиКалендаряПоПредмету.Состояние =
		Перечисления.СостоянияЗаписейРабочегоКалендаря.Принято;
	
	ОписаниеЗаписиКалендаря = Новый Массив;
	ОписаниеЗаписиКалендаря.Добавить(СокрЛП(РеквизитыОтсутствия.ВидОтсутствия));
	ОписаниеЗаписиКалендаря.Добавить(СокрЛП(РеквизитыОтсутствия.Комментарий));
	ДанныеЗаписиКалендаряПоПредмету.Описание = СтрСоединить(ОписаниеЗаписиКалендаря, Символы.ПС);
	
	ДанныеКалендаряПоПредмету.Добавить(ДанныеЗаписиКалендаряПоПредмету);
	
	Возврат ДанныеКалендаряПоПредмету;
	
КонецФункции

// Возвращает полное HTML представление отсутствия.
//
// Параметры:
//  Отсутствие - СправочникСсылка.Отсутствие - Отсутствие, по которому формируется представление.
//
// Возвращаемое значение:
//  Строка - HTML представление отсутствия.
//
Функция ПолучитьПредставлениеHTML(Отсутствие) Экспорт
	
	Если Не ЗначениеЗаполнено(Отсутствие) Тогда
		Возврат ОтсутствияКлиентСервер.ПолучитьПустоеHTMLПредставление();
	КонецЕсли;
	
	РеквизитыОтсутствия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Отсутствие,
		"ВидОтсутствия, ВидОтсутствия.Наименование,Сотрудник, ДатаНачала, ДатаОкончания,
		|ВесьДень, Комментарий");
	Если Не ЗначениеЗаполнено(РеквизитыОтсутствия) Тогда
		Возврат ОтсутствияКлиентСервер.ПолучитьПустоеHTMLПредставление();
	КонецЕсли;
	
	// Начало формирования HTML
	ПредставлениеHTML =
		"<html><head><style type=""text/css"">
		|	body {
		|		overflow:    auto;
		|		margin-top:  12px;
		|		margin-left: 10px;
		|		font-family: Arial;
		|		font-size:   10pt;}
		|</style></head><body>";
	
	// Кто
	ЧасовойПоясСотрудника =
		РаботаСЧасовымиПоясамиПовтИсп.ЧасовойПоясПользователя(РеквизитыОтсутствия.Сотрудник);
	МестныйЧасовойПояс = РаботаСЧасовымиПоясами.МестныйЧасовойПояс();
	ПредставлениеСотрудника = Строка(РеквизитыОтсутствия.Сотрудник);
	Если ЧасовойПоясСотрудника <> МестныйЧасовойПояс Тогда
		ПредставлениеЧасовогоПоясаСотрудника = РаботаСЧасовымиПоясами.ПредставлениеЧасовогоПоясаДО(ЧасовойПоясСотрудника);
		ПредставлениеСотрудника = ПредставлениеСотрудника + " " + ПредставлениеЧасовогоПоясаСотрудника
	КонецЕсли;
	ДобавитьРеквизит(ПредставлениеHTML, НСтр("ru = 'Кто'"), ПредставлениеСотрудника);
	
	// Когда
	МестнаяДатаНачала = ?(РеквизитыОтсутствия.ВесьДень,
		РеквизитыОтсутствия.ДатаНачала,
		РаботаСЧасовымиПоясами.ПривестиКМестномуВремени(РеквизитыОтсутствия.ДатаНачала));
	МестнаяДатаОкончания = ?(РеквизитыОтсутствия.ВесьДень,
		РеквизитыОтсутствия.ДатаОкончания,
		РаботаСЧасовымиПоясами.ПривестиКМестномуВремени(РеквизитыОтсутствия.ДатаОкончания));
	ПредставлениеМестногоЧасовогоПояса = ?(РеквизитыОтсутствия.ВесьДень,
		"",
		РаботаСЧасовымиПоясами.ПредставлениеМестногоЧасовогоПояса());
	ПредставлениеДатыОтсутствия = ОтсутствияКлиентСервер.СформироватьДатыОтсутствия(
		МестнаяДатаНачала,
		МестнаяДатаОкончания,
		РеквизитыОтсутствия.ВесьДень,
		Истина,
		Ложь,
		Ложь);
	Если ЗначениеЗаполнено(ПредставлениеМестногоЧасовогоПояса) Тогда
		ПредставлениеДатыОтсутствия = ПредставлениеДатыОтсутствия + " " + ПредставлениеМестногоЧасовогоПояса;
	КонецЕсли;
	ДобавитьРеквизит(ПредставлениеHTML, НСтр("ru = 'Когда'"), ПредставлениеДатыОтсутствия);
	
	// Причина
	ДобавитьРеквизит(ПредставлениеHTML, НСтр("ru = 'Причина'"), РеквизитыОтсутствия.ВидОтсутствия);
	
	// Заместители
	ВыборкаЗамещающих = Отсутствия.ВыборкаЗамещающихПоОтсутствию(Отсутствие);
	КоличествоЗаместителей = ВыборкаЗамещающих.Количество();
	Если КоличествоЗаместителей <> 0 Тогда
		
		Если КоличествоЗаместителей = 1 Тогда
			ПредставлениеЗамещают = НСтр("ru = 'Заместитель'");
		Иначе
			ПредставлениеЗамещают = НСтр("ru = 'Заместители'");
		КонецЕсли;
		
		ДобавитьРеквизит(ПредставлениеHTML, ПредставлениеЗамещают, ВыборкаЗамещающих);
		
	КонецЕсли;
	
	// Комментарий
	Если ЗначениеЗаполнено(РеквизитыОтсутствия.Комментарий) Тогда
		ПредставлениеHTML = ПредставлениеHTML + "<hr>";
		ТекстHTMLКомментарий = РаботаС_HTML.ПолучитьHTMLИзТекста(РеквизитыОтсутствия.Комментарий, , Истина);
		ДобавитьЗначение(ПредставлениеHTML, ТекстHTMLКомментарий);
	КонецЕсли;
	
	// Окончание формирования HTML
	ПредставлениеHTML = ПредставлениеHTML + "</body></html>";
	
	Возврат ПредставлениеHTML;
	
КонецФункции

// Возвращает отслеживаемые реквизиты для дополнительного свойства ПредыдущиеЗначенияРеквизитов.
//
// Возвращаемое значение:
//  Строка - Отслеживаемые реквизиты.
//
Функция ОтслеживаемыеРеквизиты() Экспорт
	
	ОтслеживаемыеРеквизиты = "ВидОтсутствия, Комментарий, Сотрудник, ДатаНачала, ДатаОкончания, ВесьДень, ПометкаУдаления";
	
	Возврат ОтслеживаемыеРеквизиты;
	
КонецФункции

// Выполняет заполнение рабочего календаря данными отсутствий.
Процедура ЗаполнитьРабочийКалендарь() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Отсутствие.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.Отсутствие КАК Отсутствие");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РаботаСРабочимКалендаремСервер.ОбновитьЗаписиКалендаряПоПредмету(Выборка.Ссылка, Истина);
	КонецЦикла;
	
КонецПроцедуры

// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения. Для изменения.
//       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Включает переданное значение в текст HTML, при необходимость добавляя навигационную ссылку.
//
Процедура ДобавитьЗначение(HTMLТекст, Значение, Цвет = "")
	
	Если ТипЗнч(Значение) = Тип("Строка")
		Или ТипЗнч(Значение) = Тип("Дата")
		Или ТипЗнч(Значение) = Тип("Число")
		Или ТипЗнч(Значение) = Тип("Булево") Тогда
		
		Если ЗначениеЗаполнено(Цвет) Тогда 
			HTMLТекст = HTMLТекст + "<FONT color=#"+Цвет+">" + Значение + "</FONT>";
		Иначе
			HTMLТекст = HTMLТекст + Значение;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Значение) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
		
		ПредставлениеЗаместителей = "";
		Пока Значение.Следующий() Цикл
			ПредставлениеЗаместителя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				"<a href=v8doc:%1>%2</a>",
				ПолучитьНавигационнуюСсылку(Значение.Замещающий),
				Строка(Значение.Замещающий));
			Если ЗначениеЗаполнено(Значение.Комментарий) Тогда
				ПредставлениеЗаместителя = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					"%1 (%2)",
					ПредставлениеЗаместителя,
					Значение.Комментарий);
			КонецЕсли;
			ДобавитьЗначениеКСтрокеЧерезРазделитель(ПредставлениеЗаместителей, ", ", ПредставлениеЗаместителя);
		КонецЦикла;
		
		HTMLТекст = HTMLТекст + ПредставлениеЗаместителей;
		
	ИначеЕсли ТипЗнч(Значение) = Тип("СправочникСсылка.Пользователи") Тогда
		
		ПредставлениеПользователя = СтрШаблон(
			"<a href=v8doc:%1>%2</a>", ПолучитьНавигационнуюСсылку(Значение), Строка(Значение));
		HTMLТекст = HTMLТекст + ПредставлениеПользователя;
		
	Иначе
		
		HTMLТекст = HTMLТекст + Строка(Значение);
		
	КонецЕсли;
	
КонецПроцедуры

// Включает переданный реквизит в текст HTML.
//
Процедура ДобавитьРеквизит(HTMLТекст, Подпись, Значение, Цвет = "")
	
	ДобавитьПодпись(HTMLТекст, Подпись);
	ДобавитьЗначение(HTMLТекст, Значение, Цвет); 
	HTMLТекст = HTMLТекст + "<br>";
	
КонецПроцедуры

// Включает переданную подпись в текст HTML.
//
Процедура ДобавитьПодпись(HTMLТекст, Подпись)
	
	Если ЗначениеЗаполнено(Подпись) Тогда 
		HTMLТекст = HTMLТекст + "<B>";
		HTMLТекст = HTMLТекст + Подпись + ": ";
		HTMLТекст = HTMLТекст + "</B>";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли