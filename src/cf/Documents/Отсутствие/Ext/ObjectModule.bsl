#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	ЗаполнитьДанныеОбИзменении();
	Сотрудник = Автор;
	ВесьДень = Истина;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("ДатаОтсутствия") Тогда
			
			Если ТипЗнч(ДанныеЗаполнения.ДатаОтсутствия) = Тип("Дата")
				И ЗначениеЗаполнено(ДанныеЗаполнения.ДатаОтсутствия) Тогда
				
				ДатаНачала = НачалоДня(ДанныеЗаполнения.ДатаОтсутствия);
				ДатаОкончания = КонецДня(ДанныеЗаполнения.ДатаОтсутствия);
				
			ИначеЕсли ТипЗнч(ДанныеЗаполнения.ДатаОтсутствия) = Тип("Структура")
				И ДанныеЗаполнения.ДатаОтсутствия.Свойство("ДатаНачала")
				И ДанныеЗаполнения.ДатаОтсутствия.ДатаНачала <> Неопределено
				И ДанныеЗаполнения.ДатаОтсутствия.Свойство("ДатаОкончания")
				И ДанныеЗаполнения.ДатаОтсутствия.ДатаОкончания <> Неопределено
				И ДанныеЗаполнения.ДатаОтсутствия.Свойство("ВесьДень")
				И ДанныеЗаполнения.ДатаОтсутствия.ВесьДень <> Неопределено Тогда
				
				ДатаНачала = ДанныеЗаполнения.ДатаОтсутствия.ДатаНачала;
				ДатаОкончания = ДанныеЗаполнения.ДатаОтсутствия.ДатаОкончания;
				ВесьДень = ДанныеЗаполнения.ДатаОтсутствия.ВесьДень;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаНачала) И Не ЗначениеЗаполнено(ДатаОкончания) Тогда
		ПериодЗавтра = Новый СтандартныйПериод(ВариантСтандартногоПериода.Завтра);
		ДатаОтсутствия = ПериодЗавтра.ДатаНачала;
		ДатаНачала = НачалоДня(ДатаОтсутствия);
		ДатаОкончания = КонецДня(ДатаОтсутствия);
	КонецЕсли;
	
	РаботаСРабочимКалендаремКлиентСервер.СкорректироватьДатуНачалаИОкончания(ДатаНачала, ДатаОкончания, ВесьДень);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ДатаНачала >= ДатаОкончания Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Дата окончания должна быть больше даты начала.'"),
			ЭтотОбъект,
			"ДатаОкончания",,
			Отказ);
	КонецЕсли;
	
	Если Не ПометкаУдаления Тогда
		
		ПересекающиесяОтсутствия = Отсутствия.ПолучитьПересекающиесяОтсутствия(
			Ссылка,
			Сотрудник,
			ДатаНачала,
			ДатаОкончания,
			БудуРазбиратьЗадачи);
		
		Если ПересекающиесяОтсутствия.Количество() <> 0 Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Отсутствие пересекается с другими отсутствиями пользователя.'"),
				ЭтотОбъект,
				"ДатаНачала",,
				Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда 
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияДокументооборот.УстановитьДополнительноеСвойствоПредыдущиеЗначенияРеквизитов(ЭтотОбъект);
	Если ОбщегоНазначенияДокументооборот.ИзменилосьЗначениеРеквизитов(ЭтотОбъект, "ПометкаУдаления") Тогда
		ДополнительныеСвойства.Вставить("НужноПометитьНаУдалениеБизнесСобытия", Истина);
	КонецЕсли;
	
	ЗаполнитьДанныеОбИзменении();
	
	// Заполнение периода строкой
	ПериодСтрокой = ОтсутствияКлиентСервер.ПериодСтрокой(ДатаНачала, ДатаОкончания, ВесьДень, "");
	
	ЭтоУдаленнаяРабота = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидОтсутствия, "ЭтоУдаленнаяРабота");
	БудуРазбиратьЗадачи = ЭтоУдаленнаяРабота;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда 
		Возврат;	
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ЭтоНовый") И ДополнительныеСвойства.ЭтоНовый Тогда
		БизнесСобытияВызовСервера.ЗарегистрироватьСобытие(Ссылка, Справочники.ВидыБизнесСобытий.СозданиеОтсутствия);
	Иначе
		БизнесСобытияВызовСервера.ЗарегистрироватьСобытие(Ссылка, Справочники.ВидыБизнесСобытий.ИзменениеОтсутствия);
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("НужноПометитьНаУдалениеБизнесСобытия") Тогда
		БизнесСобытияВызовСервера.ПометитьНаУдалениеСобытияПоИсточнику(Ссылка);
	КонецЕсли;
	
	Если ОбщегоНазначенияДокументооборот.ИзменилосьЗначениеРеквизитов(ЭтотОбъект, "ПометкаУдаления") Тогда
		ПротоколированиеРаботыСотрудников.ЗаписатьПометкуУдаления(Ссылка, ПометкаУдаления);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ОбщегоНазначенияДокументооборот.ИзменилосьЗначениеРеквизитов(
		ЭтотОбъект, "ДатаНачала, ДатаОкончания, ВидОтсутствия, Сотрудник, ПометкаУдаления") Тогда
		// Обновление замещений.
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Ссылка,
			|	ПометкаУдаления
			|ИЗ
			|	Справочник.ЗамещающиеИПомощники
			|ГДЕ
			|	Основание = &Отсутствие
			|	И (Сотрудник <> &Сотрудник
			|		ИЛИ ДатаНачала <> &ДатаНачала
			|		ИЛИ ДатаОкончания <> &ДатаОкончания
			|		ИЛИ ПометкаУдаления <> &ПометкаУдаления
			|		ИЛИ ПометкаУдаления И &ПометкаУдаления И &ПометкаУдаленияИзменена)");
		Запрос.УстановитьПараметр("Отсутствие", Ссылка);
		Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
		Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
		Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
		Запрос.УстановитьПараметр("ПометкаУдаления", ПометкаУдаления);
		ПометкаУдаленияИзменена = ОбщегоНазначенияДокументооборот.ИзменилосьЗначениеРеквизитов(
			ЭтотОбъект, "ПометкаУдаления");
		Запрос.УстановитьПараметр("ПометкаУдаленияИзменена", ПометкаУдаленияИзменена);
		ВыборкаПоЗамещающим = Запрос.Выполнить().Выбрать();
		Пока ВыборкаПоЗамещающим.Следующий() Цикл
			ЗамещениеОбъект = ВыборкаПоЗамещающим.Ссылка.ПолучитьОбъект();
			Если ПометкаУдаления И ПометкаУдаленияИзменена И ВыборкаПоЗамещающим.ПометкаУдаления Тогда
				// При пометке отсутствия помеченные ранее замещения удаляются безвозвратно,
				// а непомеченные помечаются на удаление.
				ЗамещениеОбъект.Удалить();
			Иначе 
				ЗамещениеОбъект.Сотрудник = Сотрудник;
				ЗамещениеОбъект.ДатаНачала = ДатаНачала; 
				ЗамещениеОбъект.ДатаОкончания = ДатаОкончания;
				ЗамещениеОбъект.Основание = Ссылка;
				ЗамещениеОбъект.ПометкаУдаления = ПометкаУдаления;
				ЗамещениеОбъект.Записать();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	РаботаСРабочимКалендаремСервер.ОбновитьЗаписиКалендаряПоПредмету(Ссылка, Истина);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	ЗаполнитьДанныеОбИзменении();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьДанныеОбИзменении()
	
	Если ПараметрыСеанса.ЗагрузкаОбработанныхДанныхИзДругойСистемы Тогда
		Возврат;
	КонецЕсли;
	
	Автор = Сотрудники.ОсновнойСотрудник();
	Дата = ТекущаяДата();
	
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли