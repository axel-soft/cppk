
#Область ОписаниеПеременных

&НаКлиенте
Перем ЭлементыДереваПодзадач;

&НаКлиенте
Перем ЭлементыДереваСоисполнителей;

&НаКлиенте
Перем ЭлементыДереваПриложений;

&НаКлиенте
Перем ТекущаяСтрокаБыстрогоПоиска;

&НаКлиенте
Перем ПолноеИмяПеретаскиваемогоФайла;

&НаКлиенте
Перем ПриложенияРазвернуты;

&НаКлиенте
Перем ТекущаяСтрокаДереваПриложений;

&НаКлиенте
Перем ТекущаяСтрокаСписка;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтоТонкийWindowsКлиент = Не ОбщегоНазначенияДокументооборот.ПриложениеЯвляетсяВебКлиентом()
		И ОбщегоНазначения.ЭтоWindowsКлиент(); 
		
	ПолеPDFРаботаетВВебКлиенте = РаботаСPDFПовтИсп.ПолеPDFРаботаетВВебКлиенте();	
	МаксимальноеЧислоСтраницДляПредпросмотра = ОбзорФайловСервер.МаксимальноеЧислоСтраницДляПредпросмотра();
	
	ОбновитьПараметрыБыстрогоПоиска();
	Если ТипЗнч(Параметры.ФиксированныйПоиск) = Тип("Структура") Тогда
		Для Каждого КлючИЗначение Из Параметры.ФиксированныйПоиск Цикл
			ПараметрФиксированногоПоиска = КлючИЗначение.Ключ;
			ЗначениеФиксированногоПоиска = КлючИЗначение.Значение;
			УстановитьФиксированныйПоиск(ПараметрФиксированногоПоиска, ЗначениеФиксированногоПоиска);
		КонецЦикла;
	КонецЕсли;
	ОбработатьКлючНазначенияИспользования();
	
	ОбновитьОтображениеКарточкиЗадачи();
	
	ПриложениеЯвляетсяВебКлиентом = ОбщегоНазначенияДокументооборот.ПриложениеЯвляетсяВебКлиентом();
	Если ПриложениеЯвляетсяВебКлиентом Тогда
		Элементы.ДобавитьКартинкуИзБуфераКОтчету.Видимость = Ложь;
	КонецЕсли;
	
	ИспользоватьПредпросмотрФайловОбщая = ПолучитьФункциональнуюОпцию("ИспользоватьПредпросмотрФайлов");
	ИспользоватьПредпросмотрФайловЛичная =
		ХранилищеОбщихНастроек.Загрузить(
			"НастройкиРаботыСДокументами",
			"ИспользоватьПредпросмотрФайлов");
	Если ИспользоватьПредпросмотрФайловЛичная = Неопределено Тогда
		ИспользоватьПредпросмотрФайловЛичная = Истина;
	КонецЕсли;			
	ИспользоватьПредпросмотрФайлов = 
		ИспользоватьПредпросмотрФайловОбщая 
		И ИспользоватьПредпросмотрФайловЛичная
		И Не ЭтоМобильныйКлиент;
	ДоступенПредросмотрФайлов =
		ИспользоватьПредпросмотрФайлов
		И Не (ЕстьГруппировки И ПоказыватьДеревоГруппировок);
	
	РаботаСЗадачами.УстановитьУсловноеОформлениеПодзадач(УсловноеОформление);
	
	// Учет трудозатрат
	ПереключитьХронометражНеМеняяПодсказку = Новый Структура("Подсказка");
	УчетВремени.ПроинициализироватьПараметрыУчетаВремени(
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ОпцияИспользоватьУчетВремени,
		Неопределено,
		ВидыРабот,
		СпособУказанияВремени,
		ПереключитьХронометражНеМеняяПодсказку,
		Элементы.ПереключитьХронометраж,
		Элементы.УказатьТрудозатраты);
	
	НастройкиАвтообновления = Автообновление.ПолучитьНастройкиАвтообновленияФормы(ЭтотОбъект);
	Элементы.ФормаАвтообновление.Видимость = Истина;
	
	РаботаСБыстрымПоиском.УстановитьУсловноеОформление(
		УсловноеОформление,
		Элементы.БыстрыйПоиск,
		Элементы.БыстрыйПоискЗначение);
	
	РаботаСЗадачами.УстановитьУсловноеОформлениеДереваПриложений(УсловноеОформление);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Задачи.ЗадачаИсполнителя.СоздатьЗадачу());
	ДополнительныеПараметры.Вставить("ПроизвольныйОбъект", Истина);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", Элементы.СтраницаДополнительныеРеквизиты.Имя);
	ТекущийКлючНазначенияИспользования = КлючНазначенияИспользования;
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	КлючНазначенияИспользования = ТекущийКлючНазначенияИспользования;
	
	ОбновитьПредставлениеБыстрогоПоиска();
	
	ОбновитьДеревоЗадач();
	
	Если ЗначениеЗаполнено(КлючНазначенияИспользования) Тогда
		НастройкиФормы = ОбщегоНазначения.ХранилищеСистемныхНастроекЗагрузить(
			ИмяФормы + "/" + КлючНазначенияИспользования + "/ТекущиеДанные",
			"");
	Иначе
		НастройкиФормы = ОбщегоНазначения.ХранилищеСистемныхНастроекЗагрузить(
			ИмяФормы + "/ТекущиеДанные",
			"");
	КонецЕсли;
	
	Если НастройкиФормы = Неопределено Тогда
		ОбработатьЗагруженныеНастройки(НастройкиФормы);
	КонецЕсли;
	
	Элементы.ПриложенияРезультатаИндексКартинки1.Рамка =
		Новый Рамка(ТипРамкиЭлементаУправления.БезРамки, 1);
	Элементы.ПриложенияРезультатаИндексКартинки2.Рамка =
		Новый Рамка(ТипРамкиЭлементаУправления.БезРамки, 1);
	Элементы.ПриложенияРезультатаИндексКартинки3.Рамка =
		Новый Рамка(ТипРамкиЭлементаУправления.БезРамки, 1);
	
	МассивКолонок = Новый Массив;
	МассивКолонок.Добавить("АвторСтрокой");
	МассивКолонок.Добавить("ДействиеЗадачи");
	МассивКолонок.Добавить("ЕстьПодзадачи");
	МассивКолонок.Добавить("Заголовок");
	МассивКолонок.Добавить("ИндексКартинкиКонтроля");
	МассивКолонок.Добавить("ИндексКартинкиПриоритета");
	МассивКолонок.Добавить("ИндексКартинкиСостояния");
	МассивКолонок.Добавить("ИндексКартинкиФлага");
	МассивКолонок.Добавить("ИсполнительСтрокой");
	МассивКолонок.Добавить("МК_Заголовок");
	МассивКолонок.Добавить("ПустаяСтрока");
	МассивКолонок.Добавить("Трудоемкость");
	//@skip-check bsl-legacy-check-dynamic-feature-access
	СписокДействияЗадач.УстановитьОграниченияИспользованияВПорядке(МассивКолонок);
	
	МассивКолонок = Новый Массив;
	МассивКолонок.Добавить("ЕстьПодзадачи");
	МассивКолонок.Добавить("Заголовок");
	МассивКолонок.Добавить("Задача");
	МассивКолонок.Добавить("ИндексКартинкиКонтроля");
	МассивКолонок.Добавить("ИндексКартинкиПриоритета");
	МассивКолонок.Добавить("ИндексКартинкиСостояния");
	МассивКолонок.Добавить("ИндексКартинкиФлага");
	МассивКолонок.Добавить("Исполнители");
	МассивКолонок.Добавить("МК_Заголовок");
	//@skip-check bsl-legacy-check-dynamic-feature-access
	СписокЗадач.УстановитьОграниченияИспользованияВПорядке(МассивКолонок);
	
	ОписаниеТиповПриложенийОтчетов =
		Метаданные.Документы.ДействиеЗадачи.ТабличныеЧасти.Приложения.Реквизиты.Приложение.Тип;
	ОписаниеТиповВладельцевФайлов =
		Метаданные.ОпределяемыеТипы.ВладелецФайлов.Тип;
	
	// РаспознаваниеРечи
	РаспознаваниеРечи_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	// Конец РаспознаваниеРечи
	
	ПоказыватьPdfСредствами1С = РаботаСФайламиСлужебныйПовтИсп.ПоказыватьPdfСредствами1С();
	
	ФорматСрока = РаботаСЗадачами.ФорматСрока();
	
	Элементы.СписокДействияЗадачДата.Формат = ФорматСрока;
	Элементы.СписокДействияЗадачСрок.Формат = ФорматСрока;
	Элементы.СписокЗадачДата.Формат = ФорматСрока;
	Элементы.СписокЗадачСрок.Формат = ФорматСрока;

	ЭтоВебКлиент = ОбщегоНазначения.ЭтоВебКлиент();
	ЭтоТонкийКлиент = ОбщегоНазначенияДокументооборот.ЭтоТонкийКлиент();
	
	// Pdf
	Если ЭтоТонкийКлиент Или (ЭтоВебКлиент И ПолеPDFРаботаетВВебКлиенте) Тогда
		Если ПоказыватьPdfСредствами1С Тогда
			ВывестиPDFДокументНаСервере();
		КонецЕсли;
	КонецЕсли;
	//Конец Pdf
	
	НастройкиДействий.НастроитьУсловноеОформлениеДействий(УсловноеОформление);
	
	ВестиУчетПоПроектам = ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам");
	
	СоздатьКнопкиПорционногоПредпросмотра();

	ВсегоПорцийПредпросмотра = 1;
	НомерПорции = 1;
	ОбновитьКнопкиДинамическогоСписка();
	
	ЭтоМобильныйКлиент = ПараметрыСеанса.ЭтоМобильныйКлиент;
	ЭтоМобильноеУстройствоСБольшимЭкраном = Ложь;
	
	Если ЭтоМобильныйКлиент Тогда
		МК_НастроитьЭлементыФормы();
	КонецЕсли;
	
	ОбновитьКомандыВыполнения();
	
	Если ЗначениеЗаполнено(Параметры.ЗаголовокФормы) Тогда
		Заголовок = Параметры.ЗаголовокФормы;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьАвтообновлениеФормы();
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// РаспознаваниеРечи
	РаспознаваниеРечи_ИзменитьСостояниеФормы();
	// Конец РаспознаваниеРечи
	
	//Мобильный клиент
	Если ЭтоМобильныйКлиент Тогда
		Если ЭтоМобильноеУстройствоСБольшимЭкраном Тогда
			Элементы.СписокДействияЗадач.Обновить();
			Элементы.СписокЗадач.Обновить();
		КонецЕсли;
	КонецЕсли;
	//Конец МобильныйКлиент
	
	ПодключитьОбработчикОжидания("ПроверитьИзменениеВыделения", 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПовторномОткрытии()
	
	ОбновитьНаКлиенте();

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияДокументооборотКлиент.ПередЗакрытием(
			Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, Модифицированность) Тогда
		
		Если НужноСохранитьРезультатДействия Тогда
			Отказ = Истина;
			ТекстПредупреждения = НСтр("ru = 'Данные были изменены. Все изменения будут потеряны.'");
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	// РаспознаваниеРечи
	РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
	РаботаСРечьюЖурналированиеКлиент.ОчиститьЖурнал(УникальныйИдентификатор);
	// Конец РаспознаваниеРечи
	
	Если НужноСохранитьРезультатДействия Тогда
		СохранитьРезультатДействия();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ПеретаскиваниеФайловЗавершено" И ЭтоПриложениеТекущейЗадачи(Параметр) Тогда
		ОбновитьНаКлиентеОтложенно();
	КонецЕсли;
	
	Если ИмяСобытия = "ПереименованиеФайловЗавершено" И ЭтоПриложениеТекущейЗадачи(Параметр) Тогда
		ОбновитьНаКлиентеОтложенно();
	КонецЕсли;
	
	Если ИмяСобытия = "ФайлыДокументаПомеченыНаУдаление" И ЭтоПриложениеТекущейЗадачи(Параметр) Тогда
		ОбновитьНаКлиентеОтложенно();
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Задача" Или ИмяСобытия = "Запись_ДействиеЗадачи" Тогда
		ОбновитьНаКлиентеОтложенно();
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ШаблоныТекстов" Тогда
		ОбновитьКомандыВыполнения();
		ОбновитьНаКлиентеОтложенно();
	КонецЕсли;
	
	Если ИмяСобытия = "ВыполнитьПереход_Задача" Тогда
		ВыполнитьПереход(Источник);
	КонецЕсли;
	
	Если ИмяСобытия = "ИмпортФайловЗавершен"
		И ТипЗнч(Источник) = Тип("Структура")
		И Источник.ВладелецФайлов = ТекущаяЗадачаИлиДействие Тогда
		
		ДобавитьМассивФайлов(Источник.МассивСсылокФайлов);
		
	ИначеЕсли ИмяСобытия = "ИмпортФайловЗавершен"
		И ТипЗнч(Источник) = Тип("Структура")
		И ЕстьПриложение(Источник.ВладелецФайлов) Тогда
		
		ОбновитьОбластьПросмотраОтложенно();
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Файл"
		И (Параметр.Событие = "ДанныеФайлаИзменены"
			Или Параметр.Событие = "СозданФайл") Тогда
		
		Если ТипЗнч(Параметр) = Тип("Структура")
			И Параметр.Свойство("Владелец")
			И Параметр.Свойство("Файл")
			И ЗначениеЗаполнено(Параметр.Владелец)  Тогда
			
			ВладелецФайла = Параметр.Владелец;
			ФайлСсылка = Параметр.Файл;
			
		Иначе
			
			ВладелецФайла = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Источник, "ВладелецФайла");
			ФайлСсылка = Источник;
			
		КонецЕсли;
		
		ТекущийФайл = Неопределено;
		ТекущиеДанные = Элементы.ДеревоПриложений.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			ТекущийФайл = ТекущиеДанные.Приложение;
		КонецЕсли;
		
		Если ВладелецФайла = ТекущаяЗадачаИлиДействие
			Или ЭтоПриложениеТекущейЗадачи(ВладелецФайла)
			Или ФайлСсылка = ТекущийФайл Тогда
			
			Если НужноСохранитьРезультатДействия Тогда
				СохранитьРезультатДействия();
			КонецЕсли;
			ОбновитьОбластьПросмотраОтложенно();
			
			ТекущиеДанные = Элементы.ДеревоПриложений.ТекущиеДанные;         
			
			Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.Приложение) 
				И ТипЗнч(ТекущиеДанные.Приложение) = Тип("СправочникСсылка.Файлы")  Тогда
				
				ТекущийФайл = ТекущиеДанные.Приложение;
				ФайлРедактируется = ТекущиеДанные.РедактируетТекущийПользователь;
				
				Если (ФайлСсылка = ТекущийФайл) И ФайлРедактируется Тогда
					
					ОписаниеHTMLФайла = ОбзорФайловКлиентСервер.HTMLПредставлениеПриРедактировании();
					Элементы.ГруппаПредпросмотрУрезан.Видимость = Ложь;
					Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
					Элементы.ГруппаОбзорФайлаКомандыВертикально.Видимость = Ложь;
					Элементы.ГруппаОбзорФайлаОтступКоманд.Видимость = Истина;
					Элементы.ПереключениеСтраниц.Видимость = Ложь;
					
				Иначе
					
					ДокументPDF = Неопределено;
					
					ПараметрыHTMLПредставление = ОбзорФайловКлиентСервер.СтруктураПараметровHTMLПредставлениеФайла();
					ПараметрыHTMLПредставление.МаксимальноеЧислоСтраницДляПредпросмотра = МаксимальноеЧислоСтраницДляПредпросмотра;
					ПараметрыHTMLПредставление.Расширение = ТекущиеДанные.Расширение;
					ПараметрыHTMLПредставление.Размер = ТекущиеДанные.ТекущаяВерсияРазмер;
					ПараметрыHTMLПредставление.УникальныйИдентификатор = УникальныйИдентификатор;
					
					ДанныеОбзора = ОбзорФайловКлиент.HTMLПредставлениеФайла(
						ТекущийФайл,
						ПараметрыHTMLПредставление,
						ДокументPDF);
					
					ОбзорФайловКлиент.ЗаполнитьРеквизитыОбзора(ДанныеОбзора, ОписаниеHTMLФайла);
					
					Элементы.ГруппаПредпросмотрУрезан.Видимость = ПараметрыHTMLПредставление.ПредпросмотрУрезан;
					МасштабироватьPDFИКартинки = ПараметрыHTMLПредставление.МасштабироватьPDFИКартинки;
					
					УстановитьВидимостьКомандМасштаба(ТекущиеДанные.Расширение);
					
					Если ДокументPDF = Неопределено Или ЭтоМобильныйКлиент Тогда
						Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
						Элементы.ГруппаОбзорФайлаКомандыВертикально.Видимость = Ложь;
						Элементы.ГруппаОбзорФайлаОтступКоманд.Видимость = Истина;
						
					Иначе
						Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаPdf;
						
						//@skip-check bsl-legacy-check-string-literal
						ЭтотОбъект["ДокументPdfРеквизит"] = ДокументPDF;
						Элементы["ДокументPdfПоле"].НомерТекущейСтраницы = 1;
						
						Элементы.ГруппаОбзорФайлаКомандыВертикально.Видимость = Истина;
						Элементы.ГруппаОбзорФайлаОтступКоманд.Видимость = Ложь;
						
					КонецЕсли;
					
				КонецЕсли;
					
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененыНастройкиЗадач" Тогда
		ЗапомнитьЭлементы();
		ПрочитатьПерсональныеНастройки();
		ОбновитьНаКлиентеОтложенно();
		РазвернутьНовыеЭлементы();
		
		Если ЭтоМобильныйКлиент Тогда
			МК_НастроитьЭлементыФормы();
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяСобытия = "ЗаписьКонтроля"
		И (ТипЗнч(Параметр.Предмет) = Тип("ДокументСсылка.Задача")
			Или ТипЗнч(Параметр.Предмет) = Тип("ДокументСсылка.ДействиеЗадачи")) Тогда
		ОбновитьНаКлиентеОтложенно();
	КонецЕсли;
	
	Если ИмяСобытия = "ЗадачаИзмениласьПередПопыткойИсполненияИлиИзменения"
		И Параметр = УникальныйИдентификатор Тогда
		
		Сообщение = НСтр("ru = 'Не удалось выполнить задачу. Возможно, задача была выполнена или изменена другим сотрудником. Отображение данных задач обновлено.'");
		ПоказатьПредупреждение(, Сообщение);
		ОбновитьНаКлиентеОтложенно();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущийИсточникДействия) И ТипЗнч(ТекущийИсточникДействия) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
	
		// СтандартныеПодсистемы.Свойства 
		Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
			ОбновитьЭлементыДополнительныхРеквизитов();
			УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
		КонецЕсли;
		// Конец СтандартныеПодсистемы.Свойства

	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Сотрудники"
		И Элементы.ДеревоПриложений.ТекущиеДанные <> Неопределено
		И Элементы.ДеревоПриложений.ТекущиеДанные.Приложение = Источник Тогда
		ОбновитьОбзорПриложенияКлиент();
	КонецЕсли;
	
	Если (ИмяСобытия = "Запись_ДействияИсполнения"
			Или ИмяСобытия = "Запись_ДействияОзнакомления"
			Или ИмяСобытия = "Запись_ДействияПодписания"
			Или ИмяСобытия = "Запись_ДействияРегистрации"
			Или ИмяСобытия = "Запись_ДействияСогласования"
			Или ИмяСобытия = "Запись_ДействияУтверждения")
		И Источник = ДействиеОбработки Тогда
		ОбновитьНаКлиентеОтложенно();
	КонецЕсли;
	
	Если ИмяСобытия = "ПредупредитьОЗаполненииДополнительныхРеквизитов" И Параметр = УникальныйИдентификатор Тогда
		ПредупредитьОЗаполненииДополнительныхРеквизитов();
	КонецЕсли;
	
	Если ИмяСобытия = "ФайлИзменен" И (ЕстьПриложение(Параметр.Файл) Или ЕстьПриложение(Параметр.Владелец)) Тогда
		ОбновитьОбластьПросмотраОтложенно();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ОбработатьЗагруженныеНастройки(Настройки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПараметровЭкрана()
	
	Если ЭтоМобильныйКлиент Тогда
		ЭтоМобильноеУстройствоСБольшимЭкраном = Ложь;
		МК_НастроитьОбластьПредпросмотра();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПолученияНавигационнойСсылки(Ключ, Представление, ПолученнаяНавигационнаяСсылка, СтандартнаяОбработка)
	
	Если Ключ = "Задача" Тогда
		
		ПолученнаяНавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ТекущаяЗадача);
		
	ИначеЕсли Ключ = "ДействиеЗадачи" Тогда
		
		ПолученнаяНавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ТекущаяЗадачаИлиДействие);
		
	ИначеЕсли Ключ = "Список" Тогда
		
		ПолученнаяНавигационнаяСсылка = НавигационнаяСсылка;
		
	Иначе
		
		ВызватьИсключение СтрШаблон("%1 ""%2""", НСтр("ru = 'Неизвестный ключ'"), Ключ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПолученияСпискаНавигационныхСсылок(СписокНавигационыхСсылок, КлючПоУмолчанию)
	
	КлючФормаАвтора = "Задача";
	Если ЗначениеЗаполнено(ТекущаяЗадача) Тогда
		ПредставлениеФормаАвтора = СтрШаблон("%1 (%2)", Строка(ТекущаяЗадача), НСтр("ru = 'форма автора'"));
		СписокНавигационыхСсылок.Добавить(КлючФормаАвтора, ПредставлениеФормаАвтора);
	КонецЕсли;
	
	КлючФормаИсполнителя = "ДействиеЗадачи";
	Если ЗначениеЗаполнено(ТекущаяЗадачаИлиДействие)
		И ТипЗнч(ТекущаяЗадачаИлиДействие) = Тип("ДокументСсылка.ДействиеЗадачи") Тогда
		ПредставлениеФормаИсполнителя = СтрШаблон("%1 (%2)", Строка(ТекущаяЗадача), НСтр("ru = 'форма исполнителя'"));
		СписокНавигационыхСсылок.Добавить(КлючФормаИсполнителя, ПредставлениеФормаИсполнителя);
	КонецЕсли;
	
	КлючСписок = "Список";
	СписокНавигационыхСсылок.Добавить(КлючСписок, Заголовок);
	
	КлючПоУмолчанию = КлючСписок;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОписаниеHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	Если СтрНайти(ДанныеСобытия.Href, "OpenForEdit") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТекущиеДанные = Элементы.ДеревоПриложений.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			
			ТекущиФайл = ТекущиеДанные.Приложение;
			РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
			
			Если Не РедактируетТекущийПользователь 
				Или ДанныеСобытия.Anchor = Неопределено Тогда
			
				Возврат;
			
			КонецЕсли;
			
			КомандыРаботыСФайламиКлиент.Редактировать(ТекущиФайл);
			
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли СтрНайти(ДанныеСобытия.Href, "OpenForView") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТекущиеДанные = Элементы.ДеревоПриложений.ТекущиеДанные;

		Если ТекущиеДанные <> Неопределено Тогда
			
			ТекущиФайл = ТекущиеДанные.Приложение;
		
			Если ДанныеСобытия.Anchor = Неопределено Тогда
			
				Возврат;
			
			КонецЕсли;
		
			РаботаСФайламиКлиент.ОткрытьФайлДокумента(ТекущиФайл, ЭтотОбъект);
			
		КонецЕсли;
		
		Возврат;
		
	ИначеЕсли СтрНайти(ДанныеСобытия.Href, "ShowCoperformers") > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Для Каждого СтрокаДерева Из ДеревоПриложений.ПолучитьЭлементы() Цикл
			
			Для Каждого СтрокаВетви Из СтрокаДерева.ПолучитьЭлементы() Цикл
				
				Если СтрокаВетви.ТипСтроки <> ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Соисполнители") Тогда
					Продолжить;
				КонецЕсли;
				
				Если ЭтоМобильныйКлиент Тогда
					Элементы.СтраницыПросмотра.ТекущаяСтраница = Элементы.СтраницаСоисполнители;
				Иначе
					Элементы.ДеревоПриложений.ТекущаяСтрока = СтрокаВетви.ПолучитьИдентификатор();
				КонецЕсли;
				
				Прервать;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Возврат;
		
	ИначеЕсли СтрНайти(ДанныеСобытия.Href, "CreatePreview") Тогда
		
		ТекущиеДанные = Элементы.ДеревоПриложений.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда   
			
			ТекущийФайл = ТекущиеДанные.Приложение;
		
			ДокументPDF = Неопределено;
			
			ПараметрыHTMLПредставление = ОбзорФайловКлиентСервер.СтруктураПараметровHTMLПредставлениеФайла();
			ПараметрыHTMLПредставление.МаксимальноеЧислоСтраницДляПредпросмотра = МаксимальноеЧислоСтраницДляПредпросмотра;
			ПараметрыHTMLПредставление.Расширение = ТекущиеДанные.Расширение;
			ПараметрыHTMLПредставление.Размер = ТекущиеДанные.ТекущаяВерсияРазмер;
			ПараметрыHTMLПредставление.УникальныйИдентификатор = УникальныйИдентификатор;
			ПараметрыHTMLПредставление.ИгнорироватьМаксРазмер = Истина;
			
			ДанныеОбзора = ОбзорФайловКлиент.HTMLПредставлениеФайла(
				ТекущийФайл,
				ПараметрыHTMLПредставление,
				ДокументPDF);
			
			ОбзорФайловКлиент.ЗаполнитьРеквизитыОбзора(ДанныеОбзора, ОписаниеHTMLФайла);
			
			Элементы.ГруппаПредпросмотрУрезан.Видимость = ПараметрыHTMLПредставление.ПредпросмотрУрезан;
			МасштабироватьPDFИКартинки = ПараметрыHTMLПредставление.МасштабироватьPDFИКартинки;
			
		КонецЕсли;
		
		Возврат;
		
	ИначеЕсли СтрНайти(ДанныеСобытия.Href, "OpenEDI") Тогда
		
		Если ЗначениеЗаполнено(ТекущийДокументЭДО) Тогда
			ПоказатьЗначение(, ТекущийДокументЭДО);
		КонецЕсли;	
		
		Возврат;
		
	КонецЕсли; 
	
	РаботаС_HTMLКлиент.ОткрытьСсылку(Элемент, ДанныеСобытия, СтандартнаяОбработка, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеHTMLПриложенияПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	РаботаС_HTMLКлиент.ОткрытьСсылку(Элемент, ДанныеСобытия, СтандартнаяОбработка, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеHTMLФайлаПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	Если СтрНайти(ДанныеСобытия.Href, "OpenForEdit") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТекущиеДанные = Элементы.ДеревоПриложений.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			
			ТекущиФайл = ТекущиеДанные.Приложение;
			РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
			
			Если Не РедактируетТекущийПользователь 
				Или ДанныеСобытия.Anchor = Неопределено Тогда
			
				Возврат;
			
			КонецЕсли;
			
			КомандыРаботыСФайламиКлиент.Редактировать(ТекущиФайл);
			
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли СтрНайти(ДанныеСобытия.Href, "OpenForView") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТекущиеДанные = Элементы.ДеревоПриложений.ТекущиеДанные;

		Если ТекущиеДанные <> Неопределено Тогда
			
			ТекущиФайл = ТекущиеДанные.Приложение;
		
			Если ДанныеСобытия.Anchor = Неопределено Тогда
			
				Возврат;
			
			КонецЕсли;
		
			РаботаСФайламиКлиент.ОткрытьФайлДокумента(ТекущиФайл, ЭтотОбъект);
			
		КонецЕсли;
		
		Возврат;
		
	ИначеЕсли СтрНайти(ДанныеСобытия.Href, "ShowCoperformers") > 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Для Каждого СтрокаДерева Из ДеревоПриложений.ПолучитьЭлементы() Цикл
			
			Для Каждого СтрокаВетви Из СтрокаДерева.ПолучитьЭлементы() Цикл
				
				Если СтрокаВетви.ТипСтроки <> ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Соисполнители") Тогда
					Продолжить;
				КонецЕсли;
				
				Если ЭтоМобильныйКлиент Тогда
					Элементы.СтраницыПросмотра.ТекущаяСтраница = Элементы.СтраницаСоисполнители;
				Иначе
					Элементы.ДеревоПриложений.ТекущаяСтрока = СтрокаВетви.ПолучитьИдентификатор();
				КонецЕсли;
				
				Прервать;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Возврат;
		
	ИначеЕсли СтрНайти(ДанныеСобытия.Href, "CreatePreview") Тогда
		
		ТекущиеДанные = Элементы.ДеревоПриложений.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			
			ТекущийФайл = ТекущиеДанные.Приложение;
		
			ДокументPDF = Неопределено;
			
			ПараметрыHTMLПредставление = ОбзорФайловКлиентСервер.СтруктураПараметровHTMLПредставлениеФайла();
			ПараметрыHTMLПредставление.МаксимальноеЧислоСтраницДляПредпросмотра = МаксимальноеЧислоСтраницДляПредпросмотра;
			ПараметрыHTMLПредставление.Расширение = ТекущиеДанные.Расширение;
			ПараметрыHTMLПредставление.Размер = ТекущиеДанные.ТекущаяВерсияРазмер;
			ПараметрыHTMLПредставление.УникальныйИдентификатор = УникальныйИдентификатор;
			ПараметрыHTMLПредставление.ИгнорироватьМаксРазмер = Истина;
			
			ДанныеОбзора = ОбзорФайловКлиент.HTMLПредставлениеФайла(
				ТекущийФайл,
				ПараметрыHTMLПредставление,
				ДокументPDF);
			
			ОбзорФайловКлиент.ЗаполнитьРеквизитыОбзора(ДанныеОбзора, ОписаниеHTMLФайла);
			
			Элементы.ГруппаПредпросмотрУрезан.Видимость = ПараметрыHTMLПредставление.ПредпросмотрУрезан;
			МасштабироватьPDFИКартинки = ПараметрыHTMLПредставление.МасштабироватьPDFИКартинки;
			
		КонецЕсли;
		
		Возврат;
		
	ИначеЕсли СтрНайти(ДанныеСобытия.Href, "OpenEDI") Тогда
		
		Если ЗначениеЗаполнено(ТекущийДокументЭДО) Тогда
			ПоказатьЗначение(, ТекущийДокументЭДО);
		КонецЕсли;	
		
		Возврат;
		
	КонецЕсли; 
	
	РаботаС_HTMLКлиент.ОткрытьСсылку(Элемент, ДанныеСобытия, СтандартнаяОбработка, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатДействияТекстомПриИзменении(Элемент)
	
	СохранитьРезультатДействияОтложенно(0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатДействияТекстомКнопкаВыбораНажатие(Элемент)
	
	РезультатДействияТекстомКнопкаВыбораНажатиеПродолжение();
	
КонецПроцедуры

&НаКлиенте
Процедура МК_БыстрыйПоискСостояниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = СпискиВыбораБыстрогоПоиска["Состояние"];
	
КонецПроцедуры

&НаКлиенте
Процедура МК_БыстрыйПоискСостояниеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	МК_ОбработатьВыборБыстрыйПоискСостояние(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура МК_БыстрыйПоискСостояниеПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(МК_Состояние) Тогда
		//Очищаем отбор
		МК_ОбработатьВыборБыстрыйПоискСостояние(МК_Состояние);
	КонецЕсли;
	
	МК_КлиентСервер.ОформитьПроизвольныйЭлементПоСостоянию(МК_ЭлементыСтиля,
		Элементы.МК_ФильтрыСостояние,
		ЗначениеЗаполнено(МК_Состояние));
	Элементы.МК_ФильтрыСостояние.КнопкаОчистки = ЗначениеЗаполнено(МК_Состояние);
	
	БыстрыйПоискПриИзмененииНаКлиенте();

КонецПроцедуры

&НаКлиенте
Процедура МК_БыстрыйПоискВидДействияПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(МК_ВидДействия) Тогда
		//Очищаем отбор
		МК_ОбработатьВыборБыстрыйПоискВидДействия(МК_ВидДействия);
	КонецЕсли;
	
	МК_КлиентСервер.ОформитьПроизвольныйЭлементПоСостоянию(МК_ЭлементыСтиля,
		Элементы.МК_ФильтрыВидДействия,
		ЗначениеЗаполнено(МК_ВидДействия));
	Элементы.МК_ФильтрыВидДействия.КнопкаОчистки = ЗначениеЗаполнено(МК_ВидДействия);
	
	БыстрыйПоискПриИзмененииНаКлиенте();

КонецПроцедуры

&НаКлиенте
Процедура МК_БыстрыйПоискВидДействияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.СтраницыСписка.ТекущаяСтраница = Элементы.СтраницаСписокДействияЗадач Тогда
		ДанныеВыбора = СпискиВыбораБыстрогоПоиска["ВидДействияЗадачи"];
	ИначеЕсли Элементы.СтраницыСписка.ТекущаяСтраница = Элементы.СтраницаСписокЗадач Тогда
		ДанныеВыбора = СпискиВыбораБыстрогоПоиска["ВидЗадачи"];
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МК_БыстрыйПоискВидДействияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	МК_ОбработатьВыборБыстрыйПоискВидДействия(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура МК_ИсполнительПриИзменении(Элемент)
	
	ПараметрыОтбора = Новый Структура("Параметр", "Исполнитель");
	НайденныеСтроки = БыстрыйПоиск.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Строка = НайденныеСтроки[0]; 
	Иначе
		Строка = БыстрыйПоиск.Добавить();
		Строка.Параметр = "Исполнитель"; 
	КонецЕсли;
	
	Строка.ПредставлениеПараметра = НСтр("ru = 'Исполнитель:'");
	Строка.Тип = "СправочникСсылка.Сотрудники";
	Строка.Значение = МК_Исполнитель;
	Строка.Сортировка = Строка.ПредставлениеПараметра;
	
	БыстрыйПоиск.Сортировать("Сортировка");
	
	МК_КлиентСервер.ОформитьПроизвольныйЭлементПоСостоянию(МК_ЭлементыСтиля,
		Элементы.МК_ФильтрыИсполнитель,
		ЗначениеЗаполнено(МК_Исполнитель));
	Элементы.МК_ФильтрыИсполнитель.КнопкаОчистки = ЗначениеЗаполнено(МК_Исполнитель);
	
	БыстрыйПоискПриИзмененииНаКлиенте();

КонецПроцедуры

&НаКлиенте
Процедура МК_БыстрыйПоискАвторПриИзменении(Элемент)
	
	ПараметрыОтбора = Новый Структура("Параметр", "Автор");
	НайденныеСтроки = БыстрыйПоиск.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Строка = НайденныеСтроки[0]; 
	Иначе
		Строка = БыстрыйПоиск.Добавить();
		Строка.Параметр = "Автор"; 
	КонецЕсли;
	
	Строка.ПредставлениеПараметра = НСтр("ru = 'Автор:'");
	Строка.Тип = "СправочникСсылка.Сотрудники";
	Строка.Значение = МК_Автор;
	Строка.Сортировка = Строка.ПредставлениеПараметра;
	
	БыстрыйПоиск.Сортировать("Сортировка");
	
	МК_КлиентСервер.ОформитьПроизвольныйЭлементПоСостоянию(МК_ЭлементыСтиля,
		Элементы.МК_ФильтрыАвтор,
		ЗначениеЗаполнено(МК_Автор));
	Элементы.МК_ФильтрыАвтор.КнопкаОчистки = ЗначениеЗаполнено(МК_Автор);

	БыстрыйПоискПриИзмененииНаКлиенте();
			
КонецПроцедуры

&НаКлиенте
Процедура МК_БыстрыйПоискПериодПриИзменении(Элемент)
	
	ПараметрыОтбора = Новый Структура("Параметр", "ДатаС");
	НайденныеСтроки = БыстрыйПоиск.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Строка = НайденныеСтроки[0]; 
	Иначе
		Строка = БыстрыйПоиск.Добавить();
		Строка.Параметр = "ДатаС"; 
	КонецЕсли;	
	
	Строка.ПредставлениеПараметра = НСтр("ru = 'Дата с:'");
	Строка.Тип = "Дата";
	Строка.Значение = МК_Период.ДатаНачала;
	
	ПараметрыОтбора = Новый Структура("Параметр", "ДатаПо");
	НайденныеСтроки = БыстрыйПоиск.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Строка = НайденныеСтроки[0]; 
	Иначе
		Строка = БыстрыйПоиск.Добавить();
		Строка.Параметр = "ДатаПо"; 
	КонецЕсли;	
	
	Строка.ПредставлениеПараметра = НСтр("ru = 'Дата по:'");
	Строка.Тип = "Дата";
	Строка.Значение = МК_Период.ДатаОкончания;
	
	МК_КлиентСервер.ОформитьПроизвольныйЭлементПоСостоянию(МК_ЭлементыСтиля,
		Элементы.МК_ФильтрыПериод,
		ЗначениеЗаполнено(МК_Период));
	Элементы.МК_ФильтрыПериод.КнопкаОчистки = ЗначениеЗаполнено(МК_Период);

	БыстрыйПоискПриИзмененииНаКлиенте();

КонецПроцедуры

&НаКлиенте
Процедура МК_БыстрыйПоискПроектПриИзменении(Элемент)

	ПараметрыОтбора = Новый Структура("Параметр", "Проект");
	НайденныеСтроки = БыстрыйПоиск.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Строка = НайденныеСтроки[0]; 
	Иначе
		Строка = БыстрыйПоиск.Добавить();
		Строка.Параметр = "Проект"; 
	КонецЕсли;	
	
	Строка.ПредставлениеПараметра = НСтр("ru = 'Проект:'");
	Строка.Тип = "СправочникСсылка.Проекты";
	Строка.Значение = МК_Проект;
	Строка.Сортировка = Строка.ПредставлениеПараметра;
	
	БыстрыйПоиск.Сортировать("Сортировка");
	
	МК_КлиентСервер.ОформитьПроизвольныйЭлементПоСостоянию(МК_ЭлементыСтиля,
		Элементы.МК_ФильтрыПроекты,
		ЗначениеЗаполнено(МК_Проект));
	Элементы.МК_ФильтрыПроекты.КнопкаОчистки = ЗначениеЗаполнено(МК_Проект);
	
	БыстрыйПоискПриИзмененииНаКлиенте();

КонецПроцедуры

&НаКлиенте
Процедура МК_БыстрыйПоискФлагПриИзменении(Элемент)
	
	ПараметрыОтбора = Новый Структура("Параметр", "Флаг");
	НайденныеСтроки = БыстрыйПоиск.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Строка = НайденныеСтроки[0]; 
	Иначе
		Строка = БыстрыйПоиск.Добавить();
		Строка.Параметр = "Флаг"; 
	КонецЕсли;	
	
	Строка.ПредставлениеПараметра = НСтр("ru = 'Флаг:'");
	Строка.Тип = "ПеречислениеСсылка.ФлагиОбъектов";
	Строка.Значение = МК_Флаг;
	Строка.Сортировка = Строка.ПредставлениеПараметра;
	
	БыстрыйПоиск.Сортировать("Сортировка");
	
	МК_КлиентСервер.ОформитьПроизвольныйЭлементПоСостоянию(МК_ЭлементыСтиля,
		Элементы.МК_ФильтрыФлаг,
		ЗначениеЗаполнено(МК_Флаг));
	Элементы.МК_ФильтрыФлаг.КнопкаОчистки = ЗначениеЗаполнено(МК_Флаг);
	
	БыстрыйПоискПриИзмененииНаКлиенте();

КонецПроцедуры

&НаКлиенте
Процедура ПриложенияРезультатаИндексКартинки1Нажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = ПриложенияРезультата[0];
	
	ВыборФайла(ДанныеСтроки.Приложение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриложенияРезультатаИндексКартинки2Нажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = ПриложенияРезультата[1];
	
	ВыборФайла(ДанныеСтроки.Приложение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриложенияРезультатаИндексКартинки3Нажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = ПриложенияРезультата[2];
	
	ВыборФайла(ДанныеСтроки.Приложение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриложенияРезультатаПриложение1Нажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = ПриложенияРезультата[0];
	
	ВыборФайла(ДанныеСтроки.Приложение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриложенияРезультатаПриложение2Нажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = ПриложенияРезультата[1];
	
	ВыборФайла(ДанныеСтроки.Приложение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриложенияРезультатаПриложение3Нажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = ПриложенияРезультата[2];
	
	ВыборФайла(ДанныеСтроки.Приложение);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнструкцияПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСИнструкциямиКлиент.ОткрытьСсылку(
		ДанныеСобытия.Href,
		ДанныеСобытия.Element,
		Элемент.Документ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеHTMLФайлаПередПечатью(Элемент, ДиалогПечати, Отказ)
	
	Если ИспользоватьПредпросмотрФайлов И ЗначениеЗаполнено(ТекущийФайл) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(, НСтр("ru = 'Откройте файл в приложении и там выполните команду печати'"));
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийВариантГруппировкиПриИзменении(Элемент)

	СтарыеГруппировки = ТекущиеГруппировки();
	ПриИзмененииВариантаГруппировки();
	ВосстановитьСтрокуДереваГруппировок(СтарыеГруппировки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительныйВариантГруппировкиПриИзменении(Элемент)
	
	СтарыеГруппировки = ТекущиеГруппировки();
	ПриИзмененииВариантаГруппировки();
	ВосстановитьСтрокуДереваГруппировок(СтарыеГруппировки);
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаДобавитьДопГруппировкуНажатие(Элемент)
	
	СписокВыбораГруппировки = Новый СписокЗначений();
	ВозможныеДопГруппировки = ДополнительныеВарианыГруппировки(ТекущийВариантГруппировки, ВестиУчетПоПроектам);
	Для Каждого ВариантГруппировки Из ВозможныеДопГруппировки Цикл
		СписокВыбораГруппировки.Добавить(ВариантГруппировки, ВариантГруппировки);
	КонецЦикла;
	
	ОповещениеОВыборе = Новый ОписаниеОповещения("ОбработатьВыборВариантаДопГруппировки", ЭтотОбъект);
	
	ПоказатьВыборИзСписка(ОповещениеОВыборе, СписокВыбораГруппировки, Элементы.КартинкаДобавитьДопГруппировку);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыБыстрыйПоиск

&НаКлиенте
Процедура БыстрыйПоискПриИзменении(Элемент)
	
	БыстрыйПоискПриИзмененииНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйПоискПриАктивизацииСтроки(Элемент)
	
	РаботаСБыстрымПоискомКлиент.БыстрыйПоискПриАктивизацииСтроки(
		Элементы.БыстрыйПоиск,
		Элементы.БыстрыйПоискЗначение,
		ТекущаяСтрокаБыстрогоПоиска,
		СпискиВыбораБыстрогоПоиска);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйПоискЗначениеОчистка(Элемент, СтандартнаяОбработка)
	
	РаботаСБыстрымПоискомКлиент.БыстрыйПоискЗначениеОчистка(
		ЭтотОбъект,
		Элементы.БыстрыйПоиск,
		Элемент,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйПоискЗначениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСБыстрымПоискомКлиент.БыстрыйПоискЗначениеОбработкаВыбора(
		ЭтотОбъект,
		Элементы.БыстрыйПоиск,
		Элемент,
		ВыбранноеЗначение,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйПоискЗначениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСБыстрымПоискомКлиент.БыстрыйПоискЗначениеАвтоПодбор(
		ЭтотОбъект,
		Элементы.БыстрыйПоиск,
		Элемент,
		Текст,
		ДанныеВыбора,
		ПараметрыПолученияДанных,
		Ожидание,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйПоискЗначениеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	РаботаСБыстрымПоискомКлиент.БыстрыйПоискЗначениеОкончаниеВводаТекста(
		ЭтотОбъект,
		Элементы.БыстрыйПоиск,
		Элемент,
		Текст,
		ДанныеВыбора,
		ПараметрыПолученияДанных,
		СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйПоискЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСБыстрымПоискомКлиент.БыстрыйПоискЗначениеНачалоВыбора(
		ЭтотОбъект,
		Элементы.БыстрыйПоиск,
		Элемент,
		ДанныеВыбора,
		СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыГруппировки

&НаКлиенте
Процедура ГруппировкиПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Группировки.ТекущиеДанные;
	
	НоваяГруппировка = ПредопределенноеЗначение("Справочник.ГруппировкиЗадач.ПустаяСсылка");
	НоваяДополнительнаяГруппировка = ПредопределенноеЗначение("Справочник.ГруппировкиЗадач.ПустаяСсылка");
	
	Если ТекущиеДанные <> Неопределено Тогда
		НоваяГруппировка = ГруппировкаПоУИД(ТекущиеДанные.ГруппировкаУИД);
		НоваяДополнительнаяГруппировка = ГруппировкаПоУИД(ТекущиеДанные.ДополнительнаяГруппировкаУИД);
	Иначе
		Возврат;
	КонецЕсли;
	
	Если НоваяГруппировка = ТекущаяГруппировка
		И НоваяДополнительнаяГруппировка = ТекущаяДополнительнаяГруппировка Тогда
			
		Возврат;
	КонецЕсли;
	
	ТекущаяГруппировка = НоваяГруппировка;
	ТекущаяДополнительнаяГруппировка = НоваяДополнительнаяГруппировка;
	
	ПодключитьОбработчикОжидания("УстановитьПараметрыГруппировки", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкиПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.Группировки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеДляПоказа = ЗначениеГруппировкиДляПоказа(
		ТекущиеДанные.ГруппировкаУИД,
		ТекущиеДанные.ДополнительнаяГруппировкаУИД);
	Если Не ЗначениеЗаполнено(ЗначениеДляПоказа) Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, ЗначениеДляПоказа);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПодзадачи

&НаКлиенте
Процедура ПодзадачиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	РаботаСЗадачамиКлиент.ПодзадачиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодзадачиПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		ТекущаяПодзадачаИлиДействие = Неопределено;
		Элементы.ВзятьОтчетОбИсполненииИПриложения.Доступность = Ложь;
		Элементы.ПодзадачиКонтекстноеМенюВзятьОтчетОбИсполненииИПриложения.Доступность =
			Элементы.ВзятьОтчетОбИсполненииИПриложения.Доступность;
		Элементы.ВернутьНаДоработку.Доступность = Ложь;
		Возврат;
	КонецЕсли;
	
	// Наследует доступность создания подзадачи и накладывает дополнительные условия.
	ТекущаяПодзадачаИлиДействие =
		?(ЗначениеЗаполнено(ТекущиеДанные.ДействиеЗадачи),
			ТекущиеДанные.ДействиеЗадачи,
			ТекущиеДанные.Задача); 
	Элементы.ВзятьОтчетОбИсполненииИПриложения.Доступность =
		Элементы.ДокументЗадачаСоздатьПодзадачу.Доступность
		И ТекущиеДанные.ЭтоПервыйУровень
		И (ЗначениеЗаполнено(ТекущиеДанные.РезультатДействияТекстом)
			Или ТекущиеДанные.ЕстьПриложения
			Или Не ЗначениеЗаполнено(ТекущиеДанные.ДействиеЗадачи))
		И Элементы.ГруппаРезультатДействияТекстом.Видимость
		И Элементы.РезультатДействияТекстом.Видимость
		И Элементы.РезультатДействияТекстом.Доступность;
	Элементы.ПодзадачиКонтекстноеМенюВзятьОтчетОбИсполненииИПриложения.Доступность =
		Элементы.ВзятьОтчетОбИсполненииИПриложения.Доступность;
	Элементы.ВернутьНаДоработку.Доступность =
		Элементы.ДокументЗадачаСоздатьПодзадачу.Доступность
		И ТекущиеДанные.ЭтоПервыйУровень
		И ТекущиеДанные.ВозможенВозвратНаДоработку;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоЗадач

&НаКлиенте
Процедура ДеревоЗадачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	РаботаСЗадачамиКлиент.ПодзадачиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗадачПриАктивизацииСтроки(Элемент)
	
	ОбработатьАктивизациюСтроки();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоПриложений

&НаКлиенте
Процедура ДеревоПриложенийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элемент.ДанныеСтроки(ВыбраннаяСтрока);
	
	Если ДанныеСтроки <> Неопределено Тогда
		
		Если ДанныеСтроки.РольПредмета = ПредопределенноеЗначение("Перечисление.РолиПредметов.Заполняемый")
			И Не ЗначениеЗаполнено(ДанныеСтроки.Приложение)
			И ЗначениеЗаполнено(ДанныеСтроки.ИмяПредмета) Тогда
			
			РаботаСЗадачамиКлиент.ДобавитьПриложениеЗадачи(
				ТекущаяЗадачаИлиДействие,
				ДанныеСтроки.ИмяПредмета,
				ДанныеСтроки.Приложение);
			
		ИначеЕсли ТипЗнч(ДанныеСтроки.Приложение) = Тип("СправочникСсылка.Файлы") Тогда

			Если ОсобаяОбработкаОткрытияФайлов Тогда
			
				ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(
					ДанныеСтроки.Приложение, 
					Неопределено, 
					УникальныйИдентификатор, 
					Неопределено, 
					ПредыдущийАдресФайла);
				
				Если ИнтеграцияЗадачКлиент.ДеревоПриложенийВыбор(
					ДанныеСтроки.Приложение, ДанныеФайла, УникальныйИдентификатор, ТекущаяЗадачаИлиДействие) Тогда
					Возврат;
				КонецЕсли;
				
			КонецЕсли;		
			
			РаботаСФайламиКлиент.ОткрытьФайлДокумента(ДанныеСтроки.Приложение, ЭтотОбъект);
			
		ИначеЕсли ЗначениеЗаполнено(ДанныеСтроки.Приложение) Тогда
				
			РаботаСЗадачамиКлиент.ПоказатьПриложение(ДанныеСтроки.Приложение);
			
		ИначеЕсли ДанныеСтроки.ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Задача") Тогда
			
			ПоказатьЗначение(, ТекущаяЗадача);
			
		ИначеЕсли ЗначениеЗаполнено(ДанныеСтроки.ДокументЭДО) Тогда

			ПоказатьЗначение(, ДанныеСтроки.ДокументЭДО);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриложенийПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ДанныеСтроки = Элементы.ДеревоПриложений.ТекущиеДанные;
	
	Если ДанныеСтроки <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(ДанныеСтроки.Приложение) Тогда
				
			РаботаСЗадачамиКлиент.ПоказатьПриложение(ДанныеСтроки.Приложение);
			
		ИначеЕсли ДанныеСтроки.ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Задача") Тогда
			
			ПоказатьЗначение(, ТекущаяЗадача);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриложенийПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКомандПриложений();
	
	ТекущиеДанные = Элементы.ДеревоПриложений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НоваяТекущаяСтрока = Элементы.ДеревоПриложений.ТекущаяСтрока;
	Если ТекущаяСтрокаДереваПриложений = НоваяТекущаяСтрока Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрокаДереваПриложений = НоваяТекущаяСтрока;
	
	Если ИспользоватьПредпросмотрФайлов
		И ТекущиеДанные.ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Файл") Тогда
		
		Элементы.СтраницыПросмотра.ТекущаяСтраница = Элементы.СтраницаОбзорФайла;
		
		Если ОбзорФайловКлиент.ЭтоФайлСДолгойОбработкой(ТекущиеДанные.Расширение)
			И Не ТекущиеДанные.ПредпросмотрЕстьВБазе Тогда
			ОписаниеHTMLФайла = ОбзорФайловКлиент.HTMLПредставлениеСДолгойОбработкой();
			Элементы.ГруппаПредпросмотрУрезан.Видимость = Ложь;
			Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
			Элементы.ГруппаОбзорФайлаКомандыВертикально.Видимость = Ложь;
			Элементы.ГруппаОбзорФайлаОтступКоманд.Видимость = Истина;
			Элементы.ПереключениеСтраниц.Видимость = Ложь;
			
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("ОбновитьПревьюФайла", 0.2, Истина);
		
	ИначеЕсли ИспользоватьПредпросмотрФайлов
		И ТекущиеДанные.ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.ДокументЭДО") Тогда
		
		Элементы.СтраницыПросмотра.ТекущаяСтраница = Элементы.СтраницаОбзорФайла; // та же страница
		
		ПодключитьОбработчикОжидания("ОбновитьПревьюДокументаЭДО", 0.2, Истина);
		
	ИначеЕсли ТекущиеДанные.ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.ДополнительныеРеквизиты") Тогда
		
		ПодключитьОбработчикОжидания("ОбновитьДополнительныеРеквизитыКлиент", 0.2, Истина);
		
	ИначеЕсли ТекущиеДанные.ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Инструкция") Тогда
		
		ПодключитьОбработчикОжидания("ОбновитьИнструкциюКлиент", 0.2, Истина);
		
	ИначеЕсли ТекущиеДанные.ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.ИсторияВыполнения") Тогда
		
		ПодключитьОбработчикОжидания("ОбновитьЖизненныйЦиклКлиент", 0.2, Истина);
		
	ИначеЕсли ТекущиеДанные.ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Подзадачи") Тогда
		
		ПодключитьОбработчикОжидания("ОбновитьПодзадачиКлиент", 0.2, Истина);
		
	ИначеЕсли ТекущиеДанные.ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Соисполнители") Тогда
		
		ПодключитьОбработчикОжидания("ОбновитьСоисполнителейКлиент", 0.2, Истина);
		
	ИначеЕсли ТекущиеДанные.ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Приложение") Тогда
		
		ПодключитьОбработчикОжидания("ОбновитьОбзорПриложенияКлиент", 0.2, Истина);
		
	Иначе
		
		Элементы.СтраницыПросмотра.ТекущаяСтраница = Элементы.СтраницаОсновное;
		
		Если ЭтоМобильныйКлиент Тогда 
			МК_КлиентСервер.АдаптироватьHtmlПодЭкранМобильногоПриНеобходимости(ОписаниеHTMLЗадачи);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриложенийНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	#Если Не ВебКлиент Тогда
		
		КоличествоВыделенныхВложений = Элементы.ДеревоПриложений.ВыделенныеСтроки.Количество();
		
		Если КоличествоВыделенныхВложений = 0 Тогда
			
			Возврат;
			
		ИначеЕсли КоличествоВыделенныхВложений = 1 Тогда
			
			ФайлСсылка = Элементы.ДеревоПриложений.ТекущиеДанные.Приложение;
			Если ТипЗнч(ФайлСсылка) <> Тип("СправочникСсылка.Файлы") Тогда
				
				МассивОбъектов = Новый Массив;
				МассивОбъектов.Добавить(ФайлСсылка);
				ПараметрыПеретаскивания.Значение = МассивОбъектов;
				
				Возврат;
				
			КонецЕсли;
				
			ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(ФайлСсылка);
			
			ПолноеИмяПеретаскиваемогоФайла = "";
			
			Обработчик = Новый ОписаниеОповещения("ПослеПолучитьФайлВерсииВРабочийКаталог", ЭтотОбъект);
			РаботаСФайламиКлиент.ПолучитьФайлВерсииВРабочийКаталог(Обработчик, 
			ДанныеФайла, ПолноеИмяПеретаскиваемогоФайла, УникальныйИдентификатор);
			
			Если ЗначениеЗаполнено(ПолноеИмяПеретаскиваемогоФайла) Тогда
				Файл = Новый Файл(ПолноеИмяПеретаскиваемогоФайла);
				ПараметрыПеретаскивания.Значение = Файл;
			Иначе
				Выполнение = Ложь;
			КонецЕсли;
			
		Иначе // более одного выделено
			
			МассивОбъектов = Новый Массив;
			Для каждого ВыделеннаяСтрока Из Элементы.ДеревоПриложений.ВыделенныеСтроки Цикл
				ДанныеСтроки = ДеревоПриложений.НайтиПоИдентификатору(ВыделеннаяСтрока);
				Если ДанныеСтроки.ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Приложение")
					Или ДанныеСтроки.ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Файл") Тогда
					МассивОбъектов.Добавить(ДанныеСтроки.Приложение);
				КонецЕсли;
			КонецЦикла;
			Если МассивОбъектов.Количество() = 0 Тогда
				Возврат;
			КонецЕсли;
			
			ПараметрыПеретаскивания.Значение = МассивОбъектов;
			
		КонецЕсли;
		
	#Иначе
		Выполнение = Ложь;
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриложенийПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	ЗначениеПеретаскивания = Новый Массив;
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		ЗначениеПеретаскивания = ПараметрыПеретаскивания.Значение;
	Иначе
		ЗначениеПеретаскивания.Добавить(ПараметрыПеретаскивания.Значение);
	КонецЕсли;
	
	ДанныеСтроки = Элемент.ДанныеСтроки(Строка);
	Если ДанныеСтроки <> Неопределено Тогда
		ТипСтроки = ДанныеСтроки.ТипСтроки;
	Иначе
		ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.ПустаяСсылка");
	КонецЕсли;
	
	Для Каждого ЭлементПеретаскивания Из ЗначениеПеретаскивания Цикл
		
		Если ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Приложение")
			Или ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.РольФайла")
			Или ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Файл") Тогда
			
			ДанныеСтрокиПриложения = Неопределено;
			ДанныеСтрокиРолиФайла = Неопределено;
			Если ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Приложение") Тогда
				
				ДанныеСтрокиПриложения = ДанныеСтроки;
				
			ИначеЕсли ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.РольФайла") Тогда
				
				ДанныеСтрокиРолиФайла = ДанныеСтроки;
				ДанныеСтрокиПриложения = ДанныеСтрокиРолиФайла.ПолучитьРодителя();
				Если ДанныеСтрокиПриложения = Неопределено
					Или ДанныеСтрокиПриложения.ТипСтроки <> ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Приложение") Тогда
					
					Продолжить;
					
				КонецЕсли;
				
			ИначеЕсли ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Файл") Тогда
				
				ДанныеСтрокиРодителя = ДанныеСтроки.ПолучитьРодителя();
				Если ДанныеСтрокиРодителя <> Неопределено
					И ДанныеСтрокиРодителя.ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.РольФайла") Тогда
					
					ДанныеСтрокиРолиФайла = ДанныеСтрокиРодителя;
					ДанныеСтрокиПриложения = ДанныеСтрокиРолиФайла.ПолучитьРодителя();
					Если ДанныеСтрокиПриложения = Неопределено
						Или ДанныеСтрокиПриложения.ТипСтроки <> ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Приложение") Тогда
						
						Продолжить;
						
					КонецЕсли;
					
				ИначеЕсли ДанныеСтрокиРодителя <> Неопределено
					И ДанныеСтрокиРодителя.ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Приложение") Тогда
					
					ДанныеСтрокиПриложения = ДанныеСтрокиРодителя;
					
				Иначе
					
					Продолжить;
					
				КонецЕсли;
				
			Иначе
				
				Продолжить;
				
			КонецЕсли;
			
			// Перетаскивание к приложению.
			ТипЭлементаПеретаскивания = ТипЗнч(ЭлементПеретаскивания);
			ТипПриложения = ТипЗнч(ДанныеСтрокиПриложения.Приложение);
			Если ТипЭлементаПеретаскивания = Тип("Файл")
				И ОписаниеТиповВладельцевФайлов.СодержитТип(ТипПриложения) Тогда
				Продолжить;
			КонецЕсли;
			
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
			ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
			
		Иначе
			
			// Перетаскивание к отчету об исполнении.
			ТипЭлементаПеретаскивания = ТипЗнч(ЭлементПеретаскивания);
			Если ТипЭлементаПеретаскивания = Тип("Файл")
				Или ОписаниеТиповПриложенийОтчетов.СодержитТип(ТипЭлементаПеретаскивания) Тогда
				Продолжить;
			КонецЕсли;
			
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
			ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриложенийПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элемент.ДанныеСтроки(Строка);
	Если ДанныеСтроки <> Неопределено Тогда
		ТипСтроки = ДанныеСтроки.ТипСтроки;
	Иначе
		ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.ПустаяСсылка");
	КонецЕсли;
	
	Если ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Приложение")
		Или ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.РольФайла")
		Или ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Файл") Тогда
		
		РольФайлаИПриложение = РольФайлаИПриложение(ДанныеСтроки);
		
		// Перетаскивание к приложению.
		ТипПриложения = ТипЗнч(РольФайлаИПриложение.Приложение);
		Если Не ОписаниеТиповВладельцевФайлов.СодержитТип(ТипПриложения) Тогда
			Возврат;
		КонецЕсли;
		
		ЗначениеПеретаскивания = Новый Массив;
		Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл")
			Или (ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив")
				И ПараметрыПеретаскивания.Значение.Количество() >= 1
				И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("Файл")) Тогда
			
			ОбщегоНазначенияДокументооборотКлиент.ПеретаскиваниеФайлов(
				ЭтотОбъект,
				РольФайлаИПриложение.Приложение,
				РольФайлаИПриложение.РольФайла,
				ПараметрыПеретаскивания);
			
		КонецЕсли;
		
	Иначе
		
		// Перетаскивание к отчету об исполнении.
		Если Не ПриложенияРезультатаИзменятьСоставСтрок Тогда 
			Возврат;
		КонецЕсли;
		
		ЗначениеПеретаскивания = Новый Массив;
		Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл")
			Или (ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив")
				И ПараметрыПеретаскивания.Значение.Количество() >= 1
				И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("Файл")) Тогда
			
			ЗначениеПеретаскивания = 
				РаботаСФайламиКлиент.ОбработкаПеретаскиванияВЛинейныйСписок(
					ПараметрыПеретаскивания,
					ТекущаяЗадачаИлиДействие,
					ЭтотОбъект,
					Истина);
			
		ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				ЗначениеПеретаскивания,
				ПараметрыПеретаскивания.Значение);
				
		Иначе
			
			ЗначениеПеретаскивания.Добавить(ПараметрыПеретаскивания.Значение);
			
		КонецЕсли;
		
		Контекст = Новый Структура("ДействиеЗадачи, ФормаВладелец", ТекущаяЗадачаИлиДействие, ЭтотОбъект);
		РаботаСЗадачамиКлиент.ЗавершитьДобавлениеПриложенияКОтчету(
			ЗначениеПеретаскивания,
			Контекст);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПриложенияРезультата

&НаКлиенте
Процедура ПриложенияРезультатаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элемент.ДанныеСтроки(ВыбраннаяСтрока);
	
	Если ДанныеСтроки <> Неопределено Тогда
		ВыборФайла(ДанныеСтроки.Приложение);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриложенияРезультатаПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКомандПриложенийРезультата();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриложенияРезультатаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриложенияРезультатаПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.ПриложенияРезультата.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РаботаСЗадачамиКлиент.ПоказатьПриложение(ТекущиеДанные.Приложение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриложенияРезультатаПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	Если Не ПриложенияРезультатаИзменятьСоставСтрок Тогда
		Возврат;
	КонецЕсли;
	
	МассивПриложений = Новый Массив;
	
	Для Каждого ВыбраннаяСтрока Из Элементы.ПриложенияРезультата.ВыделенныеСтроки Цикл
		
		ДанныеСтроки = ПриложенияРезультата.НайтиПоИдентификатору(ВыбраннаяСтрока);
			
		МассивПриложений.Добавить(ДанныеСтроки.Приложение);
		
	КонецЦикла;
	
	РаботаСЗадачамиКлиент.УдалитьПриложенияРезультата(ТекущаяЗадачаИлиДействие, МассивПриложений);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриложенияРезультатаНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	#Если Не ВебКлиент Тогда
		
		КоличествоВыделенныхВложений = Элементы.ПриложенияРезультата.ВыделенныеСтроки.Количество();
		
		Если КоличествоВыделенныхВложений = 0 Тогда
			
			Возврат;
			
		ИначеЕсли КоличествоВыделенныхВложений = 1 Тогда
			
			ФайлСсылка = Элементы.ПриложенияРезультата.ТекущиеДанные.Приложение;
			Если ТипЗнч(ФайлСсылка) <> Тип("СправочникСсылка.Файлы") Тогда
				
				МассивОбъектов = Новый Массив;
				МассивОбъектов.Добавить(ФайлСсылка);
				ПараметрыПеретаскивания.Значение = МассивОбъектов;
				
				Возврат;
				
			КонецЕсли;
				
			ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(ФайлСсылка);
			
			ПолноеИмяПеретаскиваемогоФайла = "";
			
			Обработчик = Новый ОписаниеОповещения("ПослеПолучитьФайлВерсииВРабочийКаталог", ЭтотОбъект);
			РаботаСФайламиКлиент.ПолучитьФайлВерсииВРабочийКаталог(Обработчик, 
			ДанныеФайла, ПолноеИмяПеретаскиваемогоФайла, УникальныйИдентификатор);
			
			Если ЗначениеЗаполнено(ПолноеИмяПеретаскиваемогоФайла) Тогда
				Файл = Новый Файл(ПолноеИмяПеретаскиваемогоФайла);
				ПараметрыПеретаскивания.Значение = Файл;
			Иначе
				Выполнение = Ложь;
			КонецЕсли;
			
		Иначе // более одного выделено
			
			МассивОбъектов = Новый Массив;
			Для каждого ВыделеннаяСтрока Из Элементы.ПриложенияРезультата.ВыделенныеСтроки Цикл
				ДанныеСтроки = ПриложенияРезультата.НайтиПоИдентификатору(ВыделеннаяСтрока);
				МассивОбъектов.Добавить(ДанныеСтроки.Приложение);
			КонецЦикла;
			Если МассивОбъектов.Количество() = 0 Тогда
				Возврат;
			КонецЕсли;
			
			ПараметрыПеретаскивания.Значение = МассивОбъектов;
			
		КонецЕсли;
		
	#Иначе
		Выполнение = Ложь;
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПриложенияРезультатаПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	ЗначениеПеретаскивания = Новый Массив;
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		ЗначениеПеретаскивания = ПараметрыПеретаскивания.Значение;
	Иначе
		ЗначениеПеретаскивания.Добавить(ПараметрыПеретаскивания.Значение);
	КонецЕсли;
	
	Для Каждого ЭлементПеретаскивания Из ЗначениеПеретаскивания Цикл
		
		ТипЭлементаПеретаскивания = ТипЗнч(ЭлементПеретаскивания);
		Если ТипЭлементаПеретаскивания = Тип("Файл")
			Или ОписаниеТиповПриложенийОтчетов.СодержитТип(ТипЭлементаПеретаскивания) Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриложенияРезультатаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ПриложенияРезультатаИзменятьСоставСтрок Тогда 
		Возврат;
	КонецЕсли;
	
	ЗначениеПеретаскивания = Новый Массив;
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл")
		Или (ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив")
			И ПараметрыПеретаскивания.Значение.Количество() >= 1
			И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("Файл")) Тогда
		
		ЗначениеПеретаскивания = 
			РаботаСФайламиКлиент.ОбработкаПеретаскиванияВЛинейныйСписок(
				ПараметрыПеретаскивания,
				ТекущаяЗадачаИлиДействие,
				ЭтотОбъект,
				Истина);
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			ЗначениеПеретаскивания,
			ПараметрыПеретаскивания.Значение);
			
	Иначе
		
		ЗначениеПеретаскивания.Добавить(ПараметрыПеретаскивания.Значение);
		
	КонецЕсли;
	
	
	Контекст = Новый Структура("ДействиеЗадачи, ФормаВладелец", ТекущаяЗадачаИлиДействие, ЭтотОбъект);
	РаботаСЗадачамиКлиент.ЗавершитьДобавлениеПриложенияКОтчету(
		ЗначениеПеретаскивания,
		Контекст);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСоисполнители

&НаКлиенте
Процедура СоисполнителиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДанныеСтроки = Элемент.ДанныеСтроки(ВыбраннаяСтрока);
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеСтроки.ДействиеЗадачи) Тогда
		СтандартнаяОбработка = Ложь;
		РаботаСЗадачамиКлиент.ОткрытьКарточкуИсполнителяЗадачи(ДанныеСтроки.ДействиеЗадачи);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокЗадач

&НаКлиенте
Процедура СписокЗадачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ЭтоМобильныйКлиент Тогда
		Если Не РежимВыбора И ЭтоМобильноеУстройствоСБольшимЭкраном Тогда
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Элемент.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимВыбора Тогда
		
		СтандартнаяОбработка = Ложь;
		ОбработатьВыбор();
	
	ИначеЕсли Поле = Элементы.СписокДействияЗадачИндексКартинкиФлага Тогда
		
		ТекущиеДанные = Элементы.СписокЗадач.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		РаботаСЗадачамиКлиент.ПереключитьФлаг(ТекущиеДанные.Задача);
		
	Иначе
		
		ТекущиеДанные = Элементы.СписокЗадач.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		РаботаСЗадачамиКлиент.ОткрытьКарточкуАвтораЗадачи(ТекущиеДанные.Задача);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗадачПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСЗадачамиКлиент.ОткрытьКарточкуАвтораЗадачи(ТекущиеДанные.Задача);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗадачПриАктивизацииСтроки(Элемент)
	
	ОбработатьАктивизациюСтроки();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокЗадачПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Подготовка дополнительных данных.
	ЗадачиСтрок = Новый Массив;
	Для Каждого КлючИЗначение Из Строки Цикл
		
		ДанныеСтроки = КлючИЗначение.Значение.Данные;
		
		// Исполнители.
		Если ДанныеСтроки.Свойство("Исполнители")
			И ЗначениеЗаполнено(ДанныеСтроки.Задача)Тогда
			ЗадачиСтрок.Добавить(ДанныеСтроки.Задача);
		КонецЕсли;
		
	КонецЦикла;
	
	ПредставлениеИсполнителейЗадач = РаботаСЗадачами.ПредставлениеИсполнителейЗадач(ЗадачиСтрок);
	
	// Заполнение данных строк.
	Для Каждого КлючИЗначение Из Строки Цикл
		
		ДанныеСтроки = КлючИЗначение.Значение.Данные;
		
		// Исполнители.
		Если ДанныеСтроки.Свойство("Исполнители") Тогда
			ДанныеСтроки.Исполнители = ПредставлениеИсполнителейЗадач[ДанныеСтроки.Задача];
		КонецЕсли;
		
		// Индекс картинки состояния.
		Если ДанныеСтроки.Свойство("ИндексКартинкиСостояния") Тогда
			
			Если ЗначениеЗаполнено(ДанныеСтроки.РезультатЗадачи) Тогда
				
				ХарактерРезультата =
					РаботаСЗадачамиПовтИсп.ХарактерРезультата(ДанныеСтроки.РезультатЗадачи);
				ДанныеСтроки.ИндексКартинкиСостояния =
					Перечисления.ХарактерыРезультатов.ИндексКартинкиСостояния(ХарактерРезультата);
				
			Иначе
				
				ДанныеСтроки.ИндексКартинкиСостояния =
					Перечисления.ВидыСостоянийЗадач.ИндексКартинкиСостояния(
						ДанныеСтроки.ВидСостоянияЗадачи);
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Индекс картинки контроля.
		Если ДанныеСтроки.Свойство("ИндексКартинкиКонтроля") Тогда
			
			ДанныеСтроки.ИндексКартинкиКонтроля = Контроль.ИндексКартинкиКонтроля(
				ДанныеСтроки.СостояниеКонтроля,
				ДанныеСтроки.КонтрольныйСрок,
				ДанныеСтроки.КонтрольныйСрокОбщий);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЗадачОбработкаЗапросаОбновления()
	
	Элементы.СписокЗадач.Обновить();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокДействияЗадач

&НаКлиенте
Процедура СписокДействияЗадачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если ЭтоМобильныйКлиент Тогда
		Если Не РежимВыбора 
			И ЭтоМобильноеУстройствоСБольшимЭкраном 
			И Не ОтображениеКарточкиЗадачи = ПредопределенноеЗначение("Перечисление.ВариантыОтображенияОбластиЧтения.НеОтображать") Тогда
			
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Элемент.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.СписокДействияЗадач.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если РежимВыбора Тогда
		
		ОбработатьВыбор();
		
	ИначеЕсли Поле = Элементы.СписокДействияЗадачИндексКартинкиФлага Тогда
		
		РаботаСЗадачамиКлиент.ПереключитьФлаг(ТекущиеДанные.ДействиеЗадачи);
		
	Иначе
		
		РаботаСЗадачамиКлиент.ОткрытьКарточкуИсполнителяЗадачи(ТекущиеДанные.ДействиеЗадачи);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДействияЗадачПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСЗадачамиКлиент.ОткрытьКарточкуИсполнителяЗадачи(ТекущиеДанные.ДействиеЗадачи);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДействияЗадачПриАктивизацииСтроки(Элемент)
	
	ОбработатьАктивизациюСтроки();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокДействияЗадачПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОтображениеКарточкиЗадачи = Настройки.ДополнительныеСвойства.ОтображениеКарточкиЗадачи;
	
	ДанныеДействий = Новый Массив;
	ЗадачиСтрок = Новый Массив;
	ДействияЗадачСтрок = Новый Массив;
	Для Каждого КлючИЗначение Из Строки Цикл
		ДанныеСтроки = КлючИЗначение.Значение.Данные;
		ЗадачиСтрок.Добавить(ДанныеСтроки.Задача);
		ДействияЗадачСтрок.Добавить(ДанныеСтроки.ДействиеЗадачи);
		Если ДанныеСтроки.Свойство("ИсполнительСтрокой") Тогда
			ДанныеДействия = Новый Структура;
			ДанныеДействия.Вставить("ДействиеЗадачи", ДанныеСтроки.ДействиеЗадачи);
			ДанныеДействия.Вставить("Участник", ДанныеСтроки.Исполнитель);
			ДанныеДействия.Вставить("ЕстьЗамещающие", ДанныеСтроки.ЕстьЗамещающие);
			// В списке не отображаем фактического исполнителя.
			ДанныеДействия.Вставить("ФактическийИсполнитель", Справочники.ФактическиеИсполнители.ПустаяСсылка());
			ДанныеДействий.Добавить(ДанныеДействия);
		КонецЕсли;
	КонецЦикла;
	
	ПредставленияИсполнителей =
		РаботаСЗадачами.ПредставленияИсполнителейДействийЗадач(ДанныеДействий, Ложь);
	
	// Заполнение данных строк.
	ФамилияИнициалыФизЛиц = Новый Соответствие;
	Для Каждого КлючИЗначение Из Строки Цикл
		
		ДанныеСтроки = КлючИЗначение.Значение.Данные;
		
		// Автор.
		Если ДанныеСтроки.Свойство("АвторСтрокой") Тогда
			
			Если ФамилияИнициалыФизЛиц[ДанныеСтроки.Автор] = Неопределено Тогда
				ФамилияИнициалыФизЛиц[ДанныеСтроки.Автор] = РаботаСЗадачамиПовтИсп.ПредставлениеУчастника(ДанныеСтроки.Автор);
			КонецЕсли;
			
			ДанныеСтроки.АвторСтрокой = ФамилияИнициалыФизЛиц[ДанныеСтроки.Автор];
			
		КонецЕсли;
		
		// Заголовок.
		Если ДанныеСтроки.Свойство("Заголовок") Тогда
			
			Если ЗначениеЗаполнено(ДанныеСтроки.ОписаниеПоступившихОбновлений) Тогда
				
				Если ОтображениеКарточкиЗадачи = Перечисления.ВариантыОтображенияОбластиЧтения.Справа Тогда
					ДанныеСтроки.Заголовок =
						ДанныеСтроки.Заголовок
						+ Символы.ПС
						+ ДанныеСтроки.ОписаниеПоступившихОбновлений;
				Иначе
					ДанныеСтроки.Заголовок =
						ДанныеСтроки.Заголовок
						+ ", "
						+ ДанныеСтроки.ОписаниеПоступившихОбновлений;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Исполнитель.
		Если ДанныеСтроки.Свойство("ИсполнительСтрокой") Тогда
			ДанныеСтроки.ИсполнительСтрокой = ПредставленияИсполнителей[ДанныеСтроки.ДействиеЗадачи];
		КонецЕсли;
		
		// Трудоемкость.
		Если ДанныеСтроки.Свойство("Трудоемкость")
			И ЗначениеЗаполнено(ДанныеСтроки.ТрудоемкостьОт)
			И ЗначениеЗаполнено(ДанныеСтроки.ТрудоемкостьДо) Тогда
			ДанныеСтроки.Трудоемкость = СтрШаблон(
				"%1-%2",
				ДанныеСтроки.ТрудоемкостьОт,
				ДанныеСтроки.ТрудоемкостьДо);
		КонецЕсли;
		
		// Индекс картинки состояния.
		Если ДанныеСтроки.Свойство("ИндексКартинкиСостояния") Тогда
			
			Если ЗначениеЗаполнено(ДанныеСтроки.РезультатДействия) Тогда
				
				ХарактерРезультата = РаботаСЗадачамиПовтИсп.ХарактерРезультата(ДанныеСтроки.РезультатДействия);
				ДанныеСтроки.ИндексКартинкиСостояния =
					Перечисления.ХарактерыРезультатов.ИндексКартинкиСостояния(ХарактерРезультата);
				
			Иначе
				
				ДанныеСтроки.ИндексКартинкиСостояния = 
					Перечисления.ВидыСостоянийУчастниковЗадач.ИндексКартинкиСостояния(
						ДанныеСтроки.ВидСостоянияУчастниковЗадач);
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Индекс картинки контроля.
		Если ДанныеСтроки.Свойство("ИндексКартинкиКонтроля") Тогда
			
			ДанныеСтроки.ИндексКартинкиКонтроля = Контроль.ИндексКартинкиКонтроля(
				ДанныеСтроки.СостояниеКонтроля,
				ДанныеСтроки.КонтрольныйСрок,
				ДанныеСтроки.КонтрольныйСрокОбщий);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДействияЗадачОбработкаЗапросаОбновления()
	
	Элементы.СписокДействияЗадач.Обновить();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура МК_ЗакрытьФильтры(Команда)

	Элементы.МК_Фильтры.Видимость = Ложь;
	МК_ОбновитьОтображениеКнопкиФильтра(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура МК_ПоказатьСкрытьПриложенияРезультата(Команда)
	
	Элементы.ПриложенияРезультата.Видимость = Не Элементы.ПриложенияРезультата.Видимость;
	МК_ПоказатьСкрытьПриложенияРезультатаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура МК_Сгруппировать(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"МК_СгруппироватьПослеВыбора",
		ЭтотОбъект);
		
	Список = Новый СписокЗначений;
	Список.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыГруппировкиЗадач.ПоАвтору"));
	Список.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыГруппировкиЗадач.ПоВидуЗадачи"));
	Список.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыГруппировкиЗадач.ПоИсполнителю"));
	Список.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыГруппировкиЗадач.ПоПриложениюБезГрупп"));
	Список.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыГруппировкиЗадач.ПоПриложениюПоГруппам"));
	Список.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыГруппировкиЗадач.ПоПроекту"));
	Список.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыГруппировкиЗадач.ПоФлагу"));
	Список.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыГруппировкиЗадач.БезГруппировки"));
	
	ПоказатьВыборИзСписка(ОписаниеОповещения, Список, Элементы.МК_Сгруппировать);

КонецПроцедуры

&НаКлиенте
Процедура Автообновление(Команда)
	
	УстановитьПараметрыАвтообновленияФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура БезГруппировки(Команда)
	
	БезГруппировкиПродолжение();
	
КонецПроцедуры

&НаКлиенте
Процедура БыстрыйПоиск(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("БыстрыйПоиск", БыстрыйПоиск);
	ПараметрыОткрытия.Вставить("СпискиВыбораБыстрогоПоиска", СпискиВыбораБыстрогоПоиска);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("БыстрыйПоиск", БыстрыйПоиск);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("НастроитьБыстрыйПоискЗавершение", ЭтотОбъект, ПараметрыОбработчика);
	
	ОткрытьФорму("ОбщаяФорма.БыстрыйПоиск",
		ПараметрыОткрытия,,,,,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура Выбрать(Команда)
	
	Если Не РежимВыбора Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьВыбор();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьШаблонДляВыполненияЗадачи(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВыполнитьДействиеЗадачиПослеВыбораШаблонаТекста",
		ЭтотОбъект);
	
	ПоказатьВыборИзМеню(
		ОписаниеОповещения,
		ШаблоныДляВыбора,
		Элементы.ВыбратьШаблонДляВыполненияЗадачи);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактированиеФайлаРезультата(Команда)
	
	ДанныеСтроки = Элементы.ПриложенияРезультата.ТекущиеДанные;
	
	ЗакончитьРедактированиеФайлаРезультатаСтроки(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактированиеФайлаРезультата1(Команда)
	
	ДанныеСтроки = ПриложенияРезультата[0];
	
	ЗакончитьРедактированиеФайлаРезультатаСтроки(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактированиеФайлаРезультата2(Команда)
	
	ДанныеСтроки = ПриложенияРезультата[1];
	
	ЗакончитьРедактированиеФайлаРезультатаСтроки(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактированиеФайлаРезультата3(Команда)
	
	ДанныеСтроки = ПриложенияРезультата[2];
	
	ЗакончитьРедактированиеФайлаРезультатаСтроки(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсвободитьПриложениеРезультата(Команда)
	
	ДанныеСтроки = Элементы.ПриложенияРезультата.ТекущиеДанные;
	
	ОсвободитьПриложениеРезультатаСтроки(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсвободитьПриложениеРезультата1(Команда)
	
	ДанныеСтроки = ПриложенияРезультата[0];
	
	ОсвободитьПриложениеРезультатаСтроки(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсвободитьПриложениеРезультата2(Команда)
	
	ДанныеСтроки = ПриложенияРезультата[1];
	
	ОсвободитьПриложениеРезультатаСтроки(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсвободитьПриложениеРезультата3(Команда)
	
	ДанныеСтроки = ПриложенияРезультата[2];
	
	ОсвободитьПриложениеРезультатаСтроки(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыРезультатаОбновитьИзФайлаНаДиске(Команда)
	
	ДанныеСтроки = Элементы.ПриложенияРезультата.ТекущиеДанные;
	
	ФайлыРезультатаОбновитьИзФайлаНаДискеСтроку(ДанныеСтроки)
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыРезультатаОбновитьИзФайлаНаДиске1(Команда)
	
	ДанныеСтроки = ПриложенияРезультата[0];
	
	ФайлыРезультатаОбновитьИзФайлаНаДискеСтроку(ДанныеСтроки)
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыРезультатаОбновитьИзФайлаНаДиске2(Команда)
	
	ДанныеСтроки = ПриложенияРезультата[1];
	
	ФайлыРезультатаОбновитьИзФайлаНаДискеСтроку(ДанныеСтроки)
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыРезультатаОбновитьИзФайлаНаДиске3(Команда)
	
	ДанныеСтроки = ПриложенияРезультата[2];
	
	ФайлыРезультатаОбновитьИзФайлаНаДискеСтроку(ДанныеСтроки)
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПриложение(Команда)
	
	ТекущиеДанные = Элементы.ДеревоПриложений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РаботаСЗадачамиКлиент.ПросмотретьПриложение(
		ТекущиеДанные.Приложение,
		УникальныйИдентификатор,
		ПредыдущийАдресФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуПриложенияРезультата(Команда)
	
	ДанныеСтроки = Элементы.ПриложенияРезультата.ТекущиеДанные;
	
	ОткрытьКарточкуПриложенияРезультатаСтроки(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуПриложенияРезультата1(Команда)
	
	ДанныеСтроки = ПриложенияРезультата[0];
	
	ОткрытьКарточкуПриложенияРезультатаСтроки(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуПриложенияРезультата2(Команда)
	
	ДанныеСтроки = ПриложенияРезультата[1];
	
	ОткрытьКарточкуПриложенияРезультатаСтроки(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуПриложенияРезультата3(Команда)
	
	ДанныеСтроки = ПриложенияРезультата[2];
	
	ОткрытьКарточкуПриложенияРезультатаСтроки(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПриложениеРезультата(Команда)
	
	ДанныеСтроки = Элементы.ПриложенияРезультата.ТекущиеДанные;
	
	ОткрытьПриложениеРезультатаСтроки(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПриложениеРезультата1(Команда)
	
	ДанныеСтроки = ПриложенияРезультата[0];
	
	ОткрытьПриложениеРезультатаСтроки(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПриложениеРезультата2(Команда)
	
	ДанныеСтроки = ПриложенияРезультата[1];
	
	ОткрытьПриложениеРезультатаСтроки(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПриложениеРезультата3(Команда)
	
	ДанныеСтроки = ПриложенияРезультата[2];
	
	ОткрытьПриложениеРезультатаСтроки(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьХронометраж(Команда)
	
	Если Не ЗначениеЗаполнено(ТекущаяЗадачаИлиДействие) Тогда
		Возврат;
	КонецЕсли;
	
	НуженДиалог = УчетВремениКлиент.НуженДиалогДляХронометража(
		ВключенХронометраж, 
		ДатаНачалаХронометража,
		ВидыРабот);
	Если Не НуженДиалог Тогда
		
		ПараметрыОповещения = Неопределено;
		Если ЗначениеЗаполнено(ТекущаяЗадачаИлиДействие) Тогда
			
			ПараметрыУчетаВремени = УчетВремениКлиентСервер.НовыйПараметрыУчетаВремени();
			ПараметрыУчетаВремени.ДатаНачалаХронометража = ДатаНачалаХронометража;
			ПараметрыУчетаВремени.ДатаКонцаХронометража = ДатаКонцаХронометража;
			ПараметрыУчетаВремени.ВключенХронометраж = ВключенХронометраж;
			ПараметрыУчетаВремени.ВидыРабот = ВидыРабот;
			
			РезультатПереключенияХронометража = УчетВремениВызовСервера.ПереключитьХронометраж(
				ТекущаяЗадачаИлиДействие,
				ПараметрыУчетаВремени);
			ПараметрыОповещения = РезультатПереключенияХронометража.ПараметрыОповещения;
			НовыеПараметрыУчетаВремени = РезультатПереключенияХронометража.ПараметрыУчетаВремени;
			
			ДатаНачалаХронометража = НовыеПараметрыУчетаВремени.ДатаНачалаХронометража;
			ДатаКонцаХронометража = НовыеПараметрыУчетаВремени.ДатаКонцаХронометража;
			ВключенХронометраж = НовыеПараметрыУчетаВремени.ВключенХронометраж;
			ВидыРабот = НовыеПараметрыУчетаВремени.ВидыРабот;
			Элементы.ПереключитьХронометраж.Пометка = НовыеПараметрыУчетаВремени.ЭлементПереключитьХронометражПометка;
			
		КонецЕсли;
		
		УчетВремениКлиент.ПоказатьОповещение(
			ПараметрыОповещения,
			ВключенХронометраж,
			ТекущаяЗадачаИлиДействие);
		
		Возврат;
		
	КонецЕсли;
	
	ДлительностьРаботы = УчетВремениКлиент.ПолучитьДлительностьРаботы(ДатаНачалаХронометража);
	
	ОписаниеРаботы = СтрШаблон(
		НСтр("ru = 'Работа над задачей ""%1""'"),
		ТекущаяЗадачаИлиДействие);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаОтчета", ОбщегоНазначенияКлиент.ДатаСеанса());
	ПараметрыФормы.Вставить("ВидыРабот", ВидыРабот);
	ПараметрыФормы.Вставить("ОписаниеРаботы", ОписаниеРаботы);
	ПараметрыФормы.Вставить("ДлительностьРаботы", ДлительностьРаботы);
	ПараметрыФормы.Вставить("НачалоРаботы", ДатаНачалаХронометража);
	ПараметрыФормы.Вставить("Объект", ТекущаяЗадачаИлиДействие);
	ПараметрыФормы.Вставить("СпособУказанияВремени", СпособУказанияВремени);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПереключитьХронометражПродолжение",
		ЭтотОбъект,
		Новый Структура("Объект, ПараметрыОповещения", ТекущаяЗадачаИлиДействие, ПараметрыОповещения));
	
	ОткрытьФорму(
		"РегистрСведений.ФактическиеТрудозатраты.Форма.ФормаДобавленияРаботы",
		ПараметрыФормы,,,,,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьУдаленные(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючНазначенияИспользования", "УдаленныеЗадачи");
	
	ОткрытьФорму("Документ.Задача.Форма.ФормаСписка", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьВыполненные(Команда)
	
	ПоказыватьВыполненные = Не ПоказыватьВыполненные;
	ПоказыватьВыполненныеНаСервере();
	ОбновитьНаКлиентеОтложенно();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриложенияРезультатаУдалитьСтроку1(Команда)
	
	МассивПриложений = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
		ПриложенияРезультата[0].Приложение);
	
	РаботаСЗадачамиКлиент.УдалитьПриложенияРезультата(ТекущаяЗадачаИлиДействие, МассивПриложений);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриложенияРезультатаУдалитьСтроку2(Команда)
	
	МассивПриложений = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
		ПриложенияРезультата[1].Приложение);
	
	РаботаСЗадачамиКлиент.УдалитьПриложенияРезультата(ТекущаяЗадачаИлиДействие, МассивПриложений);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриложенияРезультатаУдалитьСтроку3(Команда)
	
	МассивПриложений = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
		ПриложенияРезультата[2].Приложение);
	
	РаботаСЗадачамиКлиент.УдалитьПриложенияРезультата(ТекущаяЗадачаИлиДействие, МассивПриложений);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьФайлРезультата(Команда)
	
	ДанныеСтроки = Элементы.ПриложенияРезультата.ТекущиеДанные;
	
	РедактироватьФайлРезультатаСтроки(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьФайлРезультата1(Команда)
	
	ДанныеСтроки = ПриложенияРезультата[0];
	
	РедактироватьФайлРезультатаСтроки(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьФайлРезультата2(Команда)
	
	ДанныеСтроки = ПриложенияРезультата[1];
	
	РедактироватьФайлРезультатаСтроки(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьФайлРезультата3(Команда)
	
	ДанныеСтроки = ПриложенияРезультата[2];
	
	РедактироватьФайлРезультатаСтроки(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьОтбор(Команда)
	
	ЗапомнитьЭлементы();
	СброситьОтборНаСервере();
	РазвернутьНовыеЭлементы();
	
	Если ЭтоМобильныйКлиент Тогда
		МК_СброситьФильтры();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоАвтору(Команда)
	
	СгруппироватьПоАвторуПродолжение();
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоВидуЗадачи(Команда)
	
	СгруппироватьПоВидуЗадачиПродолжение();
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоИсполнителю(Команда)
	
	СгруппироватьПоИсполнителюПродолжение();
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоПриложениюБезГрупп(Команда)
	
	СгруппироватьПоПриложениюБезГруппПродолжение();
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоПриложениюПоГруппам(Команда)
	
	СгруппироватьПоПриложениюПоГруппамПродолжение();
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоПроекту(Команда)
	
	СгруппироватьПоПроектуПродолжение();
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоФлагу(Команда)
	
	СгруппироватьПоФлагуПродолжение();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовуюЗадачу(Команда)
	
	ОснованиеДляСоздания =
		?(ЗначениеЗаполнено(ОтборПоПриложению),
			ОтборПоПриложению,
			ТекущаяГруппировка);
	
	ЭтоДействительныйСотрудник = ЭтоДействительныйСотрудник(ОснованиеДляСоздания);		
	
	Если Не ЭтоДействительныйСотрудник Тогда
		ПараметрыОповещения = Новый Структура;
		ПараметрыОповещения.Вставить("ОснованиеДляСоздания", ОснованиеДляСоздания);
		Оповещение = Новый ОписаниеОповещения("ПослеВопросаОСозданииЗадачиНаНедействительногоСотрудника",
			ЭтотОбъект, ПараметрыОповещения);
		ТекстВопроса = НСтр("ru = 'Вы выбрали недействительного сотрудника. Продолжить?'");
		КнопкиВопроса = Новый СписокЗначений;
		КнопкиВопроса.Добавить(КодВозвратаДиалога.Да);
		КнопкиВопроса.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Нет'"));
		ПоказатьВопрос(Оповещение, ТекстВопроса, КнопкиВопроса);
		Возврат;
	КонецЕсли;
	
	СоздатьНовуюЗадачу_Продолжить(ОснованиеДляСоздания);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКакФайлРезультата(Команда)
	
	Если Элементы.ПриложенияРезультата.ВыделенныеСтроки.Количество() > 1 Тогда
		
		СписокФайловДляВыгрузки = Новый СписокЗначений;
		Для Каждого ВыбраннаяСтрока Из Элементы.ПриложенияРезультата.ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.ПриложенияРезультата.ДанныеСтроки(ВыбраннаяСтрока);
			Если ТипЗнч(ДанныеСтроки.Приложение) = Тип("СправочникСсылка.Файлы") Тогда
				СписокФайловДляВыгрузки.Добавить(ДанныеСтроки.Приложение);
			КонецЕсли;
		КонецЦикла;
		
		Если СписокФайловДляВыгрузки.Количество() > 1 Тогда
			РаботаСФайламиКлиент.СохранитьФайлыКак(СписокФайловДляВыгрузки, УникальныйИдентификатор);
		ИначеЕсли СписокФайловДляВыгрузки.Количество() = 1 Тогда
			ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляСохранения(СписокФайловДляВыгрузки[0].Значение, Неопределено, УникальныйИдентификатор);
			КомандыРаботыСФайламиКлиент.СохранитьКак(ДанныеФайла, УникальныйИдентификатор);
		Иначе
			ПоказатьПредупреждение(,НСтр("ru = 'Выберите файл.'"));
		КонецЕсли;
		
	Иначе
		
		ДанныеСтроки = Элементы.ПриложенияРезультата.ТекущиеДанные;
		
		СохранитьКакФайлРезультатаСтроки(ДанныеСтроки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКакФайлРезультата1(Команда)
	
	ДанныеСтроки = ПриложенияРезультата[0];
	
	СохранитьКакФайлРезультатаСтроки(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКакФайлРезультата2(Команда)
	
	ДанныеСтроки = ПриложенияРезультата[1];
	
	СохранитьКакФайлРезультатаСтроки(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКакФайлРезультата3(Команда)
	
	ДанныеСтроки = ПриложенияРезультата[2];
	
	СохранитьКакФайлРезультатаСтроки(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьТрудозатраты(Команда)
	
	Если Не ЗначениеЗаполнено(ТекущаяЗадачаИлиДействие) Тогда
		Возврат;
	КонецЕсли;
	
	УчетВремениКлиент.ДобавитьВОтчетКлиент(
		ОбщегоНазначенияКлиент.ДатаСеанса(),
		ВключенХронометраж,
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВидыРабот,
		ТекущаяЗадачаИлиДействие,
		СпособУказанияВремени,
		Элементы.ПереключитьХронометраж,
		Ложь,
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыОткрытьКарточку(Команда)
	
	ДанныеСтроки = Элементы.ДеревоПриложений.ТекущиеДанные;
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеСтроки.ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Задача") Тогда
		ПоказатьЗначение(, ТекущаяЗадача);
	Иначе
		РаботаСЗадачамиКлиент.ПоказатьПриложение(ДанныеСтроки.Приложение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыВставитьКартинкуИзБуфера(Команда)
	
	ДанныеСтроки = Элементы.ДеревоПриложений.ТекущиеДанные;
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РольФайлаИПриложение = РольФайлаИПриложение(ДанныеСтроки);
	
	ОбщегоНазначенияДокументооборотКлиент.ДобавитьФайл(
		ЭтотОбъект,
		РольФайлаИПриложение.Приложение,
		РольФайлаИПриложение.РольФайла,
		Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыДобавить(Команда)
	
	ДанныеСтроки = Элементы.ДеревоПриложений.ТекущиеДанные;
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеСтроки.РольПредмета = ПредопределенноеЗначение("Перечисление.РолиПредметов.Заполняемый")
		И Не ЗначениеЗаполнено(ДанныеСтроки.Приложение)
		И ЗначениеЗаполнено(ДанныеСтроки.ИмяПредмета) Тогда
		
		РаботаСЗадачамиКлиент.ДобавитьПриложениеЗадачи(
			ТекущаяЗадачаИлиДействие,
			ДанныеСтроки.ИмяПредмета,
			ДанныеСтроки.Приложение);
		
	Иначе
		
		РольФайлаИПриложение = РольФайлаИПриложение(ДанныеСтроки);
		
		ОбщегоНазначенияДокументооборотКлиент.ДобавитьФайл(
			ЭтотОбъект,
			РольФайлаИПриложение.Приложение,
			РольФайлаИПриложение.РольФайла,
			Ложь);
		
	КонецЕсли;
	
	Если ЭтоМобильныйКлиент Тогда
		МК_ОбработатьПоказСкрытиеДереваПриложений(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыУдалить(Команда)
	
	ДанныеСтроки = Элементы.ДеревоПриложений.ТекущиеДанные;
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеСтроки.РольПредмета = ПредопределенноеЗначение("Перечисление.РолиПредметов.Заполняемый")
		И ЗначениеЗаполнено(ДанныеСтроки.Приложение)
		И ЗначениеЗаполнено(ДанныеСтроки.ИмяПредмета) Тогда
		
		РаботаСЗадачамиКлиент.УдалитьПриложениеЗадачи(
			ТекущаяЗадачаИлиДействие,
			ДанныеСтроки.ИмяПредмета);
		
	ИначеЕсли ДанныеСтроки.ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Файл") Тогда
		
		ОбщегоНазначенияДокументооборотКлиент.УдалитьФайл(ДанныеСтроки.Приложение);
		
	КонецЕсли;
	
	Если ЭтоМобильныйКлиент Тогда
		МК_ОбработатьПоказСкрытиеДереваПриложений(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыРедактировать(Команда)
	
	Если Элементы.ДеревоПриложений.ТекущиеДанные.Приложение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Элементы.ДеревоПриложений.ТекущиеДанные.Приложение) = Тип("СправочникСсылка.Файлы") Тогда
		
		Обработчик = Новый ОписаниеОповещения("ОбновитьВОбработкеОповещения", ЭтотОбъект, Новый Структура);
		
		РаботаСФайламиКлиент.РедактироватьФайлПоСсылке(
			Обработчик,
			Элементы.ДеревоПриложений.ТекущиеДанные.Приложение);
		
	Иначе
		
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите файл.'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыСохранитьКак(Команда)
	
	Если Элементы.ДеревоПриложений.ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущаяСсылка = Элементы.ДеревоПриложений.ТекущиеДанные.Приложение;
	Если Элементы.ДеревоПриложений.ВыделенныеСтроки.Количество() > 1 Тогда
		СписокФайловДляВыгрузки = Новый СписокЗначений;
		Для Каждого ВыбраннаяСтрока Из Элементы.ДеревоПриложений.ВыделенныеСтроки Цикл
			ДанныеСтроки = Элементы.ДеревоПриложений.ДанныеСтроки(ВыбраннаяСтрока);
			Если ТипЗнч(ДанныеСтроки.Приложение) = Тип("СправочникСсылка.Файлы") Тогда
				СписокФайловДляВыгрузки.Добавить(ДанныеСтроки.Приложение);
			КонецЕсли;
		КонецЦикла;
		
		Если СписокФайловДляВыгрузки.Количество() > 1 Тогда
			РаботаСФайламиКлиент.СохранитьФайлыКак(СписокФайловДляВыгрузки, УникальныйИдентификатор);
		ИначеЕсли СписокФайловДляВыгрузки.Количество() = 1 Тогда
			ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляСохранения(СписокФайловДляВыгрузки[0].Значение, Неопределено, УникальныйИдентификатор);
			КомандыРаботыСФайламиКлиент.СохранитьКак(ДанныеФайла, УникальныйИдентификатор);
		Иначе
			ПоказатьПредупреждение(,НСтр("ru = 'Выберите файл.'"));
		КонецЕсли;
	Иначе
		Если ТипЗнч(ТекущаяСсылка) = Тип("СправочникСсылка.Файлы") Тогда
			ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляСохранения(ТекущаяСсылка, Неопределено, УникальныйИдентификатор);
			КомандыРаботыСФайламиКлиент.СохранитьКак(ДанныеФайла, УникальныйИдентификатор);
		Иначе
			ПоказатьПредупреждение(,НСтр("ru = 'Выберите файл.'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыЗакончитьРедактирование(Команда)
	
	Если Элементы.ДеревоПриложений.ТекущиеДанные.Приложение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Элементы.ДеревоПриложений.ТекущиеДанные.Приложение) = Тип("СправочникСсылка.Файлы") Тогда
		
		Обработчик = Новый ОписаниеОповещения("ОбновитьВОбработкеОповещения", ЭтотОбъект, Новый Структура);
		
		ПараметрыОбновленияФайла = РаботаСФайламиКлиент.ПараметрыОбновленияФайла(
			Обработчик,
			Элементы.ДеревоПриложений.ТекущиеДанные.Приложение,
			УникальныйИдентификатор);
		ПараметрыОбновленияФайла.ХранитьВерсии = Элементы.ДеревоПриложений.ТекущиеДанные.ХранитьВерсии;
		ПараметрыОбновленияФайла.РедактируетТекущийПользователь = Элементы.ДеревоПриложений.ТекущиеДанные.РедактируетТекущийПользователь;
		ПараметрыОбновленияФайла.Редактирует = Элементы.ДеревоПриложений.ТекущиеДанные.Редактирует;
		РаботаСФайламиКлиент.ЗакончитьРедактированиеСОповещением(ПараметрыОбновленияФайла);
		
	Иначе
		
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите файл.'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Освободить(Команда)
	
	Если Элементы.ДеревоПриложений.ТекущиеДанные.Приложение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Элементы.ДеревоПриложений.ТекущиеДанные.Приложение) = Тип("СправочникСсылка.Файлы") Тогда
		
		Обработчик = Новый ОписаниеОповещения("ОбновитьВОбработкеОповещения", ЭтотОбъект, Новый Структура);
		
		ПараметрыОсвобожденияФайла = РаботаСФайламиКлиент.ПараметрыОсвобожденияФайла(
			Обработчик,
			Элементы.ДеревоПриложений.ТекущиеДанные.Приложение);
		ПараметрыОсвобожденияФайла.ХранитьВерсии = Элементы.ДеревоПриложений.ТекущиеДанные.ХранитьВерсии;
		ПараметрыОсвобожденияФайла.РедактируетТекущийПользователь = Элементы.ДеревоПриложений.ТекущиеДанные.РедактируетТекущийПользователь;
		ПараметрыОсвобожденияФайла.Редактирует = Элементы.ДеревоПриложений.ТекущиеДанные.Редактирует;
		ПараметрыОсвобожденияФайла.УникальныйИдентификатор = УникальныйИдентификатор;
		РаботаСФайламиКлиент.ОсвободитьФайлСОповещением(ПараметрыОсвобожденияФайла);
		
	Иначе
		
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите файл.'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыОбновитьИзФайлаНаДиске(Команда)
	
	Если Элементы.ДеревоПриложений.ТекущиеДанные.Приложение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Элементы.ДеревоПриложений.ТекущиеДанные.Приложение) = Тип("СправочникСсылка.Файлы") Тогда
		
		Обработчик = Новый ОписаниеОповещения("ОбновитьВОбработкеОповещения", ЭтотОбъект, Новый Структура);
		
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(Элементы.ДеревоПриложений.ТекущиеДанные.Приложение);
		
		РаботаСФайламиКлиент.ОбновитьИзФайлаНаДиске(
			Обработчик,
			ДанныеФайла,
			УникальныйИдентификатор);
		
	Иначе
		
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите файл.'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВыполнение(Команда)
	
	РаботаСЗадачамиКлиент.ОтменитьВыполнение(
		ТекущаяЗадачаИлиДействие,
		ВерсияДанныхТекущегоДействияЗадачи);
	
КонецПроцедуры

&НаКлиенте
Процедура МК_СтраницаПодзадачи(Команда)
	
	МК_ПереключитьНаСтраницу(ЭтотОбъект, Элементы.СтраницаПодзадачи, Элементы.МК_КнопкаСтраницаПодзадачи);
	
КонецПроцедуры

&НаКлиенте
Процедура МК_СтраницаСоисполнители(Команда)
	
	МК_ПереключитьНаСтраницу(ЭтотОбъект, Элементы.СтраницаСоисполнители, Элементы.МК_КнопкаСтраницаСоисполнители);

КонецПроцедуры

&НаКлиенте
Процедура МК_СтраницаРезультат(Команда)
	
	МК_ПереключитьНаСтраницу(ЭтотОбъект, Элементы.МК_СтраницаРезультат, Элементы.МК_КнопкаСтраницаРезультат);

КонецПроцедуры

&НаКлиенте
Процедура МК_СтраницаИстория(Команда)
	
	МК_ПереключитьНаСтраницу(ЭтотОбъект, Элементы.СтраницаИстория, Элементы.МК_КнопкаСтраницаИстория);

КонецПроцедуры

&НаКлиенте
Процедура МК_СтраницаИнформация(Команда)
	
	МК_ПереключитьНаСтраницу(ЭтотОбъект, Элементы.СтраницаОсновное, Элементы.МК_КнопкаСтраницаИнформация);

КонецПроцедуры

&НаКлиенте
Процедура МК_ЗаполнитьПоШаблону(Команда)
	
	РезультатДействияТекстомКнопкаВыбораНажатиеПродолжение();
	
КонецПроцедуры

&НаКлиенте
Процедура МК_ПоказатьСкрытьДеревоПриложений(Команда)
	
	Элементы.ДеревоПриложений.Видимость = Не Элементы.ДеревоПриложений.Видимость;
	МК_ОбработатьПоказСкрытиеДереваПриложений(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура МК_СписокСортироватьПоНаименованию(Команда)
	
	ПереключитьСортировку(СписокСортироватьПо, СписокНаправлениеСортировки, "Заголовок");
	СортироватьСписокЗадачПоКолонке("Заголовок", ЭтотОбъект);
	СортироватьСписокДействияЗадачПоКолонке("Заголовок", ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура МК_СписокСортироватьПоИсполнителю(Команда)
	
	ПереключитьСортировку(СписокСортироватьПо, СписокНаправлениеСортировки, "Исполнители");
	СортироватьСписокЗадачПоКолонке("Исполнители", ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура МК_СписокСортироватьПоСостоянию(Команда)
	
	ПереключитьСортировку(СписокСортироватьПо, СписокНаправлениеСортировки, "СостояниеЗадачи");
	СортироватьСписокЗадачПоКолонке("СостояниеЗадачи", ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура МК_СписокСортироватьПоДатеСоздания(Команда)
	
	ПереключитьСортировку(СписокСортироватьПо, СписокНаправлениеСортировки, "Дата");
	СортироватьСписокЗадачПоКолонке("Дата", ЭтотОбъект);
	СортироватьСписокДействияЗадачПоКолонке("Дата", ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура МК_СписокСортироватьПоСрокуИсполнения(Команда)
	
	ПереключитьСортировку(СписокСортироватьПо, СписокНаправлениеСортировки, "Срок");
	СортироватьСписокЗадачПоКолонке("Срок", ЭтотОбъект);
	СортироватьСписокДействияЗадачПоКолонке("Срок", ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура МК_СписокДействияСортироватьПоИсполнителю(Команда)
	
	ПереключитьСортировку(СписокСортироватьПо, СписокНаправлениеСортировки, "ИсполнительСтрокой");
	СортироватьСписокДействияЗадачПоКолонке("ИсполнительСтрокой", ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура МК_СписокСортироватьПоСостояниеУчастникаЗадачи(Команда)
	
	ПереключитьСортировку(СписокСортироватьПо, СписокНаправлениеСортировки, "СостояниеУчастникаЗадачи");
	СортироватьСписокДействияЗадачПоКолонке("СостояниеУчастникаЗадачи", ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура МК_ПоказатьСкрытьФильтры(Команда)
	
	Элементы.МК_Фильтры.Видимость = Не Элементы.МК_Фильтры.Видимость;
	МК_ОбновитьОтображениеКнопкиФильтра(ЭтотОбъект);
		
КонецПроцедуры

&НаКлиенте
Процедура МК_ЗадачиОтборНевыполненные(Команда)
	
	Элементы.МК_ЗадачиОтборНевыполненные.Пометка = Не Элементы.МК_ЗадачиОтборНевыполненные.Пометка;
	
	Если Элементы.МК_ЗадачиОтборНевыполненные.Пометка Тогда
		МК_Состояние = ПредопределенноеЗначение("Перечисление.ОтборыПоСтатусуЗадач.НеВыполненные");
	Иначе 
		МК_Состояние = ПредопределенноеЗначение("Перечисление.ОтборыПоСтатусуЗадач.Все");
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура("Параметр", "Состояние");
	НайденныеСтроки = БыстрыйПоиск.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Строка = НайденныеСтроки[0]; 
	Иначе
		Строка = БыстрыйПоиск.Добавить();
		Строка.Параметр = "Состояние"; 
	КонецЕсли;
	
	Строка.ПредставлениеПараметра = НСтр("ru = 'Состояние:'");
	Строка.Тип = "ПеречислениеСсылка.ОтборыПоСтатусуЗадач, СправочникСсылка.СостоянияЗадач";
	Строка.Значение = МК_Состояние;
	Строка.Сортировка = Строка.ПредставлениеПараметра;
	
	БыстрыйПоиск.Сортировать("Сортировка");
	ОбщегоНазначенияДокументооборотКлиентСервер.ПоказатьСкрытьКнопкуОчисткиОтбора(Элементы.МК_ФильтрыСостояние, МК_Состояние);
	БыстрыйПоискПриИзмененииНаКлиенте();
	
	МК_КлиентСервер.ОформитьКнопкуФильтра(МК_ЭлементыСтиля,
		Элементы.МК_ЗадачиОтборНевыполненные, Ложь,
		Элементы.МК_ЗадачиОтборНевыполненные.Пометка);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредпросмотр(Команда)
	
	Если Не ИспользоватьПредпросмотрФайлов Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ДеревоПриложений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено 
		Или ТекущиеДанные.ТипСтроки <> ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Файл") Тогда
		Возврат;
	КонецЕсли;
		
	ТекущийФайл = ТекущиеДанные.Приложение;
	РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
	
	Если ТипЗнч(ТекущийФайл) = Тип("СправочникСсылка.Файлы") 
		И Не РедактируетТекущийПользователь Тогда
		
		ДокументPDF = Неопределено;
		
		ПараметрыHTMLПредставление = ОбзорФайловКлиентСервер.СтруктураПараметровHTMLПредставлениеФайла();
		ПараметрыHTMLПредставление.МаксимальноеЧислоСтраницДляПредпросмотра = МаксимальноеЧислоСтраницДляПредпросмотра;
		ПараметрыHTMLПредставление.Расширение = ТекущиеДанные.Расширение;
		ПараметрыHTMLПредставление.Размер = ТекущиеДанные.ТекущаяВерсияРазмер;
		ПараметрыHTMLПредставление.УникальныйИдентификатор = УникальныйИдентификатор; 
		ПараметрыHTMLПредставление.ОбновитьПредставление = Истина;
		
		ДанныеОбзора = ОбзорФайловКлиент.HTMLПредставлениеФайла(
			ТекущийФайл,
			ПараметрыHTMLПредставление,
			ДокументPDF);
		
		ОбзорФайловКлиент.ЗаполнитьРеквизитыОбзора(ДанныеОбзора, ОписаниеHTMLФайла); 
		
		Элементы.ГруппаПредпросмотрУрезан.Видимость = ПараметрыHTMLПредставление.ПредпросмотрУрезан;
		
		МасштабироватьPDFИКартинки = ПараметрыHTMLПредставление.МасштабироватьPDFИКартинки;
		
		УстановитьВидимостьКомандМасштаба(ТекущиеДанные.Расширение);
		
		НомерПорции = 1;
		ВсегоПорцийПредпросмотра = ПараметрыHTMLПредставление.ВсегоПорцийПредпросмотра;
		ОбновитьКнопкиДинамическогоСпискаКлиент();
		
		Если ДокументPDF = Неопределено Или ЭтоМобильныйКлиент Тогда
			Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
			Элементы.ГруппаОбзорФайлаКомандыВертикально.Видимость = Ложь;
			Элементы.ГруппаОбзорФайлаОтступКоманд.Видимость = Истина;
			
		Иначе
			Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаPdf;
			//@skip-check bsl-legacy-check-string-literal
			ЭтотОбъект["ДокументPdfРеквизит"] = ДокументPDF;
			Элементы["ДокументPdfПоле"].НомерТекущейСтраницы = 1;
			
			Элементы.ГруппаОбзорФайлаКомандыВертикально.Видимость = Истина;
			Элементы.ГруппаОбзорФайлаОтступКоманд.Видимость = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьДеревоГруппировок(Команда)
	
	ПоказыватьДеревоГруппировок = Не ПоказыватьДеревоГруппировок;
	НастроитьЭлементыПоРучномуПоказуДереваГруппировок();
	
КонецПроцедуры

&НаКлиенте
Процедура НастоящийРазмер(Команда)
	
	Если Не ИспользоватьПредпросмотрФайлов Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ДеревоПриложений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено 
		Или ТекущиеДанные.ТипСтроки <> ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Файл") Тогда
		Возврат;
	КонецЕсли;
		
	ТекущийФайл = ТекущиеДанные.Приложение;
	РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
	
	Если ТипЗнч(ТекущийФайл) = Тип("СправочникСсылка.Файлы") 
		И Не РедактируетТекущийПользователь Тогда
		
		ДокументPDF = Неопределено;
		
		ПараметрыHTMLПредставление = ОбзорФайловКлиентСервер.СтруктураПараметровHTMLПредставлениеФайла();
		ПараметрыHTMLПредставление.МаксимальноеЧислоСтраницДляПредпросмотра = МаксимальноеЧислоСтраницДляПредпросмотра;
		ПараметрыHTMLПредставление.Расширение = ТекущиеДанные.Расширение;
		ПараметрыHTMLПредставление.Размер = ТекущиеДанные.ТекущаяВерсияРазмер;
		ПараметрыHTMLПредставление.УникальныйИдентификатор = УникальныйИдентификатор; 
		ПараметрыHTMLПредставление.МасштабироватьPDFИКартинки = Ложь;   
		МасштабироватьPDFИКартинки = Ложь;
		
		ДанныеОбзора = ОбзорФайловКлиент.HTMLПредставлениеФайла(
			ТекущийФайл,
			ПараметрыHTMLПредставление,
			ДокументPDF);
		
		ОбзорФайловКлиент.ЗаполнитьРеквизитыОбзора(ДанныеОбзора, ОписаниеHTMLФайла);
		
		МасштабироватьPDFИКартинки = ПараметрыHTMLПредставление.МасштабироватьPDFИКартинки;
		Элементы.ГруппаПредпросмотрУрезан.Видимость = Ложь;
		
		УстановитьВидимостьКомандМасштаба(ТекущиеДанные.Расширение);

		Если ДокументPDF = Неопределено Или ЭтоМобильныйКлиент Тогда
			Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
			Элементы.ГруппаОбзорФайлаКомандыВертикально.Видимость = Ложь;
			Элементы.ГруппаОбзорФайлаОтступКоманд.Видимость = Истина;
			
		Иначе
			Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаPdf;
			//@skip-check bsl-legacy-check-string-literal
			ЭтотОбъект["ДокументPdfРеквизит"] = ДокументPDF;
			Элементы["ДокументPdfПоле"].НомерТекущейСтраницы = 1;
			
			Элементы.ГруппаОбзорФайлаКомандыВертикально.Видимость = Истина;
			Элементы.ГруппаОбзорФайлаОтступКоманд.Видимость = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоШиринеОкна(Команда)
	
	Если Не ИспользоватьПредпросмотрФайлов Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ДеревоПриложений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено 
		Или ТекущиеДанные.ТипСтроки <> ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Файл") Тогда
		Возврат;
	КонецЕсли;
		
	ТекущийФайл = ТекущиеДанные.Приложение;
	РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
	
	Если ТипЗнч(ТекущийФайл) = Тип("СправочникСсылка.Файлы") 
		И Не РедактируетТекущийПользователь Тогда    
		
		ДокументPDF = Неопределено;
		
		ПараметрыHTMLПредставление = ОбзорФайловКлиентСервер.СтруктураПараметровHTMLПредставлениеФайла();
		ПараметрыHTMLПредставление.МаксимальноеЧислоСтраницДляПредпросмотра = МаксимальноеЧислоСтраницДляПредпросмотра;
		ПараметрыHTMLПредставление.Расширение = ТекущиеДанные.Расширение;
		ПараметрыHTMLПредставление.Размер = ТекущиеДанные.ТекущаяВерсияРазмер;
		ПараметрыHTMLПредставление.УникальныйИдентификатор = УникальныйИдентификатор; 
		ПараметрыHTMLПредставление.МасштабироватьPDFИКартинки = Истина;
		МасштабироватьPDFИКартинки = Истина;
		
		ДанныеОбзора = ОбзорФайловКлиент.HTMLПредставлениеФайла(
			ТекущийФайл,
			ПараметрыHTMLПредставление,
			ДокументPDF);
		
		ОбзорФайловКлиент.ЗаполнитьРеквизитыОбзора(ДанныеОбзора, ОписаниеHTMLФайла);
		
		МасштабироватьPDFИКартинки = ПараметрыHTMLПредставление.МасштабироватьPDFИКартинки;
		Элементы.ГруппаПредпросмотрУрезан.Видимость = Ложь;
		
		УстановитьВидимостьКомандМасштаба(ТекущиеДанные.Расширение);
		
		Если ДокументPDF = Неопределено Или ЭтоМобильныйКлиент Тогда
			Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
			Элементы.ГруппаОбзорФайлаКомандыВертикально.Видимость = Ложь;
			Элементы.ГруппаОбзорФайлаОтступКоманд.Видимость = Истина;
			
		Иначе
			Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаPdf;
			//@skip-check bsl-legacy-check-string-literal
			ЭтотОбъект["ДокументPdfРеквизит"] = ДокументPDF;
			Элементы["ДокументPdfПоле"].НомерТекущейСтраницы = 1;
			
			Элементы.ГруппаОбзорФайлаКомандыВертикально.Видимость = Истина;
			Элементы.ГруппаОбзорФайлаОтступКоманд.Видимость = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура Пожаловаться(Команда)
	
	РаботаСРечьюЖурналированиеКлиент.СформироватьПисьмо(УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьФильтр(Команда)
	
	СброситьОтборНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура РаспознаваниеРечи(Команда)
	
	Если РаспознаваниеРечи_ВыполняетсяРаспознавание Тогда
		РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
		Если НужноСохранитьРезультатДействия Тогда
			СохранитьРезультатДействия();
		КонецЕсли;
	Иначе
		РаспознаваниеРечи_НачатьРаспознавание();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыРаспознавания(Команда)
	
	ТекущиеПараметры = РаспознаваниеРечи_ПараметрыРаспознавания;
	ПараметрыРаспознаванияРечиКлиент.ПоказатьВыборПараметровРаспознаванияРечи(ЭтотОбъект, ТекущиеПараметры, 
		Новый ОписаниеОповещения("ПриВыбореПараметровРаспознаванияРечи", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	НомерПорции = НомерПорции - 1;
	ЧастьВыбор(НомерПорции);
	
КонецПроцедуры

&НаКлиенте
Процедура Вперед(Команда)
	
	НомерПорции = НомерПорции + 1;
	ЧастьВыбор(НомерПорции);
	
КонецПроцедуры       

&НаКлиенте
Процедура Страница1(Команда)
	
	СтраницаВыбор(Команда);
	
КонецПроцедуры	

&НаКлиенте
Процедура Страница2(Команда)      
	
	СтраницаВыбор(Команда);
	
КонецПроцедуры	

&НаКлиенте
Процедура Страница3(Команда)
	
	СтраницаВыбор(Команда);
	
КонецПроцедуры	

&НаКлиенте
Процедура Страница4(Команда)
	
	СтраницаВыбор(Команда);
	
КонецПроцедуры	

&НаКлиенте         
Процедура Страница5(Команда)
	
	СтраницаВыбор(Команда);
	
КонецПроцедуры	      

&НаКлиенте
Процедура Страница6(Команда)
	
	СтраницаВыбор(Команда);
	
КонецПроцедуры	  

&НаКлиенте
Процедура Страница7(Команда)
	
	СтраницаВыбор(Команда);
	
КонецПроцедуры	 

&НаКлиенте
Процедура Страница8(Команда)
	
	СтраницаВыбор(Команда);
	
КонецПроцедуры	   

&НаКлиенте
Процедура Страница9(Команда)
	
	СтраницаВыбор(Команда);
	
КонецПроцедуры	

&НаКлиенте
Процедура СтраницаВыбор(Команда)
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("СтраницаВыборЗавершение", ЭтотОбъект);
	ОбзорФайловКлиент.ВыбратьСтраницуДинамическогоСписка(
		ЭтотОбъект,
		Команда,
		НомерПорции,
		ВсегоПорцийПредпросмотра,
		ОповещениеОЗавершении);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ЭтоДействительныйСотрудник(Основание)
	
	Результат = Истина;
	
	Если ТипЗнч(Основание) = Тип("СправочникСсылка.ГруппировкиЗадач") Тогда
		Результат = ЭтоДействительныйСотрудникНаСервере(Основание);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоДействительныйСотрудникНаСервере(Основание)
	
	Результат = Истина;
	
	РеквизитыГруппировки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				Основание,
				"Проект, Исполнитель, ИсполнительРазыменован");
	
	// Нас интересует только сценарий в котором выбрана группировка по сотруднику.
	Если Не ЗначениеЗаполнено(РеквизитыГруппировки.Проект) И ЗначениеЗаполнено(РеквизитыГруппировки.Исполнитель)
		И ТипЗнч(РеквизитыГруппировки.Исполнитель) = Тип("СправочникСсылка.Сотрудники") Тогда
		Результат = Сотрудники.ЭтоДействительныйСотрудник(РеквизитыГруппировки.Исполнитель);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПослеВопросаОСозданииЗадачиНаНедействительногоСотрудника(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Если ДополнительныеПараметры.Свойство("ОснованиеДляСоздания") Тогда
			СоздатьНовуюЗадачу_Продолжить(ДополнительныеПараметры.ОснованиеДляСоздания);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовуюЗадачу_Продолжить(ОснованиеДляСоздания)
	
	РаботаСЗадачамиКлиент.СоздатьЗадачу(ОснованиеДляСоздания);
	
КонецПроцедуры

&НаКлиенте
Функция ЭтоПриложениеТекущейЗадачи(Приложение)
	
	ЭтоПриложениеТекущейЗадачи = Ложь;
	
	Для Каждого СтрокаДерева Из ДеревоПриложений.ПолучитьЭлементы() Цикл
		
		Если СтрокаДерева.ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Приложение")
			И СтрокаДерева.Приложение = Приложение Тогда
			ЭтоПриложениеТекущейЗадачи = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЭтоПриложениеТекущейЗадачи;
	
КонецФункции

&НаКлиенте
Процедура БыстрыйПоискПриИзмененииНаКлиенте() Экспорт
	
	ЗапомнитьЭлементы();
	БыстрыйПоискПриИзмененииНаСервере();
	РазвернутьНовыеЭлементы();
	
	Если ЭтоМобильныйКлиент Тогда
		МК_ОбновитьОтображениеКнопкиФильтра(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура БыстрыйПоискПриИзмененииНаСервере()
	
	СохранитьБыстрыйПоиск();
	
	УстановитьПараметрыГруппировкиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайла(Приложение)
	
	Если ТипЗнч(Приложение) <> Тип("СправочникСсылка.Файлы") Тогда
		ПоказатьЗначение(, Приложение);
		Возврат;
	КонецЕсли;	
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(
		Приложение,
		Неопределено,
		УникальныйИдентификатор,
		Неопределено,
		ПредыдущийАдресФайла);
		
	#Если ВебКлиент Тогда
			
		РаботаСФайламиКлиент.ОткрытьФайлСОповещением(Неопределено, 
			ДанныеФайла, УникальныйИдентификатор); 
			
		Возврат;
	#КонецЕсли	
		
	Если ПриложенияРезультатаИзменятьСоставСтрок Тогда
		
		Если ЗначениеЗаполнено(ДанныеФайла.Редактирует)
			И Не ДанныеФайла.РедактируетТекущийПользователь Тогда
			
			ТекстВопроса =
				СтрШаблон(
					НСтр("ru = 'Файл ""%1"" уже занят пользователем ""%2"".
						|Открыть его в режиме только для чтения ?'"),
					ДанныеФайла.ПолноеНаименованиеВерсии,
					Строка(ДанныеФайла.Редактирует));
					
			ПараметрыОбработчика = Новый Структура;
			ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
					
			ОбработчикВопроса = Новый ОписаниеОповещения("ПослеВопросаФайлЗанятДругим", 
				ЭтотОбъект, ПараметрыОбработчика);
					
			ПоказатьВопрос(ОбработчикВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Возврат;
			
		КонецЕсли;
		
		КомандыРаботыСФайламиКлиент.Редактировать(Приложение);
		
	Иначе
		
		РаботаСФайламиКлиент.ОткрытьФайлСОповещением(
			Неопределено,
			ДанныеФайла,
			УникальныйИдентификатор);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействиеЗадачиНаКлиентеВФорме(РезультатДействия)
	
	ОценкаПроизводительностиКлиент.ЗамерВремени("ДействиеЗадачиВыполнениеИзСпискаЗадачиМне");
	
	ОтключитьОбработчикОжидания("ВзятьВРаботуСВыборомИсполнителя");
	ДействиеДляОтложенногоВзятияВРаботу = Неопределено;
	
	// РаспознаваниеРечи
	РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
	РаботаСРечьюЖурналированиеКлиент.ОчиститьЖурнал(УникальныйИдентификатор);
	// Конец РаспознаваниеРечи
	
	Если НужноСохранитьРезультатДействия Тогда
		РезультатДействияСохранен = СохранитьРезультатДействия();
		Если Не РезультатДействияСохранен Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СписокЗанятыеWordФайлы = Новый Массив;
	МассивЗахваченныхФайлов = Новый Массив;
	Если ЕстьЗанятыеФайлы() Тогда
		МассивЗахваченныхФайлов = РаботаСФайламиВызовСервера.ПолучитьСписокЗанятыхФайлов(ТекущаяЗадачаИлиДействие);
		
		СписокЗанятыеWordФайлы = РаботаСФайламиКлиент.ПолучитьЗанятыеWordФайлы(
			ТекущаяЗадачаИлиДействие, УникальныйИдентификатор, 
			МассивЗахваченныхФайлов);
	КонецЕсли;	
	
	Если СписокЗанятыеWordФайлы.Количество() <> 0 Тогда
			
		СтрокаФайлов = "";	
		Для Каждого ИмяРасширение Из СписокЗанятыеWordФайлы Цикл
			Если Не ПустаяСтрока(СтрокаФайлов) Тогда
				СтрокаФайлов = СтрокаФайлов + Символы.ВК;
			КонецЕсли;	
			СтрокаФайлов = СтрокаФайлов + ИмяРасширение;
		КонецЦикла;	
		
		Если СписокЗанятыеWordФайлы.Количество() > 1 Тогда
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Чтобы с файлами могли работать другие пользователи, закройте файлы:  
				| 
				|%1.'"),
				СтрокаФайлов);
		Иначе	
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Чтобы с файлом могли работать другие пользователи, закройте файл:  
				| 
				|%1.'"),
				СтрокаФайлов);
			
		КонецЕсли;	
			
		Обработчик = Новый ОписаниеОповещения("ПослеВопросаФайлыЗанятыWordПередЗакрытием", 
			ЭтотОбъект, Новый Структура("РезультатДействия", РезультатДействия));
		ПоказатьПредупреждение(Обработчик, ТекстСообщения);
		
		Возврат;
			
	КонецЕсли;	
	
	ДелопроизводствоКлиент.ПоместитьИзмененияФайлов(ТекущаяЗадачаИлиДействие, УникальныйИдентификатор, 
		МассивЗахваченныхФайлов);

	ВерсииДанныхЗадач = Новый Соответствие;
	ВерсииДанныхЗадач.Вставить(ТекущаяЗадачаИлиДействие, ВерсияДанныхТекущегоДействияЗадачи);
	
	РаботаСЗадачамиКлиент.ВыполнитьДействиеЗадачи(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущаяЗадачаИлиДействие),
		РезультатДействия,
		ЭтотОбъект,
		ВерсииДанныхЗадач);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаФайлыЗанятыWordПередЗакрытием(ПараметрыВыполнения) Экспорт
	
	ВыполнитьДействиеЗадачиНаКлиентеВФорме(ПараметрыВыполнения.РезультатДействия);
	
КонецПроцедуры

&НаСервере
Функция ДанныеГруппировки()
	
	ДанныеГруппировки = Новый Структура;
	ДанныеГруппировки.Вставить("Группировка", Справочники.ГруппировкиЗадач.ПустаяСсылка());
	ДанныеГруппировки.Вставить("ДополнительнаяГруппировка", Справочники.ГруппировкиЗадач.ПустаяСсылка());
	ДанныеГруппировки.Вставить("Количество", 0);
	ДанныеГруппировки.Вставить("Представление", "");
	
	РодительГруппировки = Новый Структура;
	РодительГруппировки.Вставить("Группировка", Справочники.ГруппировкиЗадач.ПустаяСсылка());
	РодительГруппировки.Вставить("ДополнительнаяГруппировка", Справочники.ГруппировкиЗадач.ПустаяСсылка());
	ДанныеГруппировки.Вставить("Родитель", РодительГруппировки);
	
	ДанныеГруппировки.Вставить("ИндексКартинки", -1);
	ДанныеГруппировки.Вставить("Порядок", "");
	ДанныеГруппировки.Вставить("ОтображатьПустую", Ложь);
	ДанныеГруппировки.Вставить("ВыделятьЖирным", Ложь);
	ДанныеГруппировки.Вставить("ВыделятьСерым", Ложь);
	ДанныеГруппировки.Вставить("ВыделятьСиним", Ложь);
	
	Возврат ДанныеГруппировки;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьМассивФайлов(МассивСсылокФайлов)
	
	ДобавитьФайлыВПриложенияРезультата(ТекущаяЗадачаИлиДействие, МассивСсылокФайлов);
	
	ОбновитьОбластьПросмотраОтложенно();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДобавитьФайлыВПриложенияРезультата(Действие, МассивСсылокФайлов)
	
	ДействиеОбъект = Действие.ПолучитьОбъект();
	
	Для Каждого Файл Из МассивСсылокФайлов Цикл
		
		Если ДействиеОбъект.Приложения.Найти(Файл, "Приложение") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаПриложения = ДействиеОбъект.Приложения.Добавить();
		СтрокаПриложения.Приложение = Файл;
		
	КонецЦикла;
	
	Если ДействиеОбъект.Модифицированность() Тогда
		ДействиеОбъект.Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЕстьЗанятыеФайлы()
	
	#Если ВебКлиент Тогда
		Возврат Ложь;
	#КонецЕсли	
	
	Для Каждого Стр Из ПриложенияРезультата Цикл 
		
		Если Стр.РедактируетТекущийПользователь Тогда
			Возврат Истина;
		КонецЕсли;	
		
	КонецЦикла;	
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ДанныеИтогов()
	
	ОсноваЗаголовка = Метаданные.Документы.Задача.ПредставлениеСписка;
	
	ДанныеИтогов = Новый Структура;
	ДанныеИтогов.Вставить("Заголовок", ОсноваЗаголовка);
	ДанныеИтогов.Вставить("Количество", 0);
	
	Если ОтключитьОтображениеИтогов Тогда
		Возврат ДанныеИтогов;
	КонецЕсли;
	
	ИтогиСписка = ИтогиСписка();
	Если ИтогиСписка.Всего = 0 Тогда
		Возврат ДанныеИтогов;
	КонецЕсли;
	
	ДанныеИтогов.Заголовок = СтрШаблон("%1 (%2)", ОсноваЗаголовка, ИтогиСписка.ОписаниеИтогов);
	ДанныеИтогов.Количество = ИтогиСписка.Всего;
	
	Возврат ДанныеИтогов;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьГруппировкуЗадачиМне(ДанныеГруппировок)
	
	ПараметрыОтбораИтоговПоИсполнителям = ПараметрыОтбораИтоговПоИсполнителям();
	
	// Задачи мне.
	ЗадачиМнеИтоги = РегистрыНакопления.КоличествоЗадачПоИсполнителям.ЗадачиРеестраИтоги(ПараметрыОтбораИтоговПоИсполнителям);
	
	ДанныеГруппировки = ДанныеГруппировки();
	ДанныеГруппировки.Группировка = Справочники.ГруппировкиЗадач.ЗадачиМне;
	ДанныеГруппировки.Представление = Строка(ДанныеГруппировки.Группировка);
	ДанныеГруппировки.ИндексКартинки = -1;
	ДанныеГруппировки.Порядок = ДанныеГруппировки.Представление;
	ДанныеГруппировки.ОтображатьПустую = Истина;
	
	Если СтрНачинаетсяС(КлючНазначенияИспользования, "ЗадачиМнеНеНачатые") Тогда
		ДанныеГруппировки.Количество = ЗадачиМнеИтоги.Новых;
	ИначеЕсли СтрНачинаетсяС(КлючНазначенияИспользования, "ЗадачиМнеПросроченные")
		Или СтрНачинаетсяС(КлючНазначенияИспользования, "ЗадачиМнеПросроченоБезОзнакомления") Тогда
		ДанныеГруппировки.Количество = ЗадачиМнеИтоги.Просроченных;
	Иначе
		Если ДоступенПоказВыполненных И ПоказыватьВыполненные Тогда
			ДанныеГруппировки.Количество = ЗадачиМнеИтоги.Всего;
		ИначеЕсли КлючНазначенияИспользования = "ЗадачиМнеВСрокБезОзнакомления" Тогда
			ДанныеГруппировки.Количество = ЗадачиМнеИтоги.ВСрок;
		ИначеЕсли КлючНазначенияИспользования = "ЗадачиМнеИстекаетБезОзнакомления" Тогда
			ДанныеГруппировки.Количество = ЗадачиМнеИтоги.Истекающих;
		ИначеЕсли КлючНазначенияИспользования = "ЗадачиМнеПоступилиОбновления" Тогда
			ДанныеГруппировки.Количество = ЗадачиМнеИтоги.ПоступилиОбновления;
		Иначе
			ДанныеГруппировки.Количество = ЗадачиМнеИтоги.ОжидающихВыполнения;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеГруппировок.Добавить(ДанныеГруппировки);
	
	КлючДляГруппировки = "ЗадачиМне";
	Если СтрНачинаетсяС(КлючНазначенияИспользования, "ЗадачиМне") Тогда
		КлючДляГруппировки = КлючНазначенияИспользования;
	КонецЕсли;
	
	Если ТекущийВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.БезГруппировки Тогда
		
		// Группировка не требуется.
		
	ИначеЕсли ТекущийВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоАвтору Тогда
		
		ЗаполнитьГруппировкиПоАвтору(
			ДанныеГруппировок,
			КлючДляГруппировки,
			Справочники.ГруппировкиЗадач.ЗадачиМне,
			ПараметрыОтбораИтоговПоИсполнителям);
		
	ИначеЕсли ТекущийВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоВидуЗадачи Тогда
		
		ЗаполнитьГруппировкиПоВидуЗадачи(
			ДанныеГруппировок,
			КлючДляГруппировки,
			Справочники.ГруппировкиЗадач.ЗадачиМне,
			ПараметрыОтбораИтоговПоИсполнителям);
		
	ИначеЕсли ТекущийВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоИсполнителю Тогда
		
		ЗаполнитьГруппировкиПоИсполнителю(
			ДанныеГруппировок,
			КлючДляГруппировки,
			Справочники.ГруппировкиЗадач.ЗадачиМне,
			ПараметрыОтбораИтоговПоИсполнителям);
		
	ИначеЕсли ТекущийВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоПриложениюБезГрупп Тогда
		
		ЗаполнитьГруппировкиПоПриложениюБезГрупп(
			ДанныеГруппировок,
			КлючДляГруппировки,
			Справочники.ГруппировкиЗадач.ЗадачиМне,
			ПараметрыОтбораИтоговПоИсполнителям);
		
	ИначеЕсли ТекущийВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоПриложениюПоГруппам Тогда
		
		ЗаполнитьГруппировкиПоПриложениюПоГруппам(
			ДанныеГруппировок,
			КлючДляГруппировки,
			Справочники.ГруппировкиЗадач.ЗадачиМне,
			ПараметрыОтбораИтоговПоИсполнителям);
		
	ИначеЕсли ТекущийВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоПроекту Тогда
		
		ЗаполнитьГруппировкиПоПроекту(
			ДанныеГруппировок,
			КлючДляГруппировки,
			Справочники.ГруппировкиЗадач.ЗадачиМне,
			ПараметрыОтбораИтоговПоИсполнителям);
		
	ИначеЕсли ТекущийВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоФлагу Тогда
		
		ЗаполнитьГруппировкиПоФлагу(
			ДанныеГруппировок,
			КлючДляГруппировки,
			Справочники.ГруппировкиЗадач.ЗадачиМне,
			ПараметрыОтбораИтоговПоИсполнителям);
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестный вариант группировки %1'"),
			ТекущийВариантГруппировки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьГруппировкуЗадачиОтМеня(ДанныеГруппировок)
	
	ОтображатьПоАвторам = ОтображатьПоАвторам();
	
	// Задачи от меня.
	Если ОтображатьПоАвторам Тогда
		
		ПараметрыОтбораИтогов = ПараметрыОтбораИтоговПоАвторам();
		
		ЗадачиОтМеняИтоги =
			РегистрыНакопления.КоличествоЗадачПоАвторам.ЗадачиРеестраИтоги(
				ПараметрыОтбораИтогов);
		
		ДанныеГруппировки = ДанныеГруппировки();
		ДанныеГруппировки.Группировка = Справочники.ГруппировкиЗадач.ЗадачиОтМеня;
		ДанныеГруппировки.Количество = 0;
		ДанныеГруппировки.Представление = Строка(ДанныеГруппировки.Группировка);
		ДанныеГруппировки.ИндексКартинки = -1;
		ДанныеГруппировки.Порядок = ДанныеГруппировки.Представление;
		ДанныеГруппировки.ОтображатьПустую = Истина;
		Если СтрНачинаетсяС(КлючНазначенияИспользования, "ЗадачиОтМеняНеНачатые") Тогда
			ДанныеГруппировки.Количество = ЗадачиОтМеняИтоги.Новых;
		ИначеЕсли СтрНачинаетсяС(КлючНазначенияИспользования, "ЗадачиОтМеняПросроченные") Тогда
			ДанныеГруппировки.Количество = ЗадачиОтМеняИтоги.Просроченных;
		ИначеЕсли СтрНачинаетсяС(КлючНазначенияИспользования, "ЗадачиОтМеняЧерновики") Тогда
			ДанныеГруппировки.Количество = ЗадачиОтМеняИтоги.Черновиков;
		Иначе
			Если ДоступенПоказВыполненных И ПоказыватьВыполненные Тогда
				ДанныеГруппировки.Количество = ЗадачиОтМеняИтоги.Всего;
			Иначе
				ДанныеГруппировки.Количество = ЗадачиОтМеняИтоги.ОжидающихВыполнения;
			КонецЕсли;
		КонецЕсли;
		
		ДанныеГруппировок.Добавить(ДанныеГруппировки);
		
	Иначе
		
		ПараметрыОтбораИтогов = ПараметрыОтбораИтоговПоИсполнителям();
		
		ЗадачиОтМеняИтоги =
			РегистрыНакопления.КоличествоЗадачПоИсполнителям.ЗадачиРеестраИтоги(
				ПараметрыОтбораИтогов);
		
		ДанныеГруппировки = ДанныеГруппировки();
		ДанныеГруппировки.Группировка = Справочники.ГруппировкиЗадач.ЗадачиОтМеняПоИсполнителям;
		ДанныеГруппировки.Количество = 0;
		ДанныеГруппировки.Представление = НСтр("ru = 'По исполнителям'");
		ДанныеГруппировки.ИндексКартинки = -1;
		ДанныеГруппировки.Порядок = ДанныеГруппировки.Представление;
		ДанныеГруппировки.ОтображатьПустую = Истина;
		Если СтрНачинаетсяС(КлючНазначенияИспользования, "ЗадачиОтМеняНеНачатые") Тогда
			ДанныеГруппировки.Количество = ЗадачиОтМеняИтоги.Новых;
		ИначеЕсли СтрНачинаетсяС(КлючНазначенияИспользования, "ЗадачиОтМеняПросроченные") Тогда
			ДанныеГруппировки.Количество = ЗадачиОтМеняИтоги.Просроченных;
		Иначе
			Если ДоступенПоказВыполненных И ПоказыватьВыполненные Тогда
				ДанныеГруппировки.Количество = ЗадачиОтМеняИтоги.Всего;
			Иначе
				ДанныеГруппировки.Количество = ЗадачиОтМеняИтоги.ОжидающихВыполнения;
			КонецЕсли;
		КонецЕсли;
		
		ДанныеГруппировок.Добавить(ДанныеГруппировки);
		
	КонецЕсли;
	
	КлючДляГруппировки = "ЗадачиОтМеня";
	Если СтрНачинаетсяС(КлючНазначенияИспользования, "ЗадачиОтМеня") Тогда
		КлючДляГруппировки = КлючНазначенияИспользования;
	КонецЕсли;
	
	Если ТекущийВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.БезГруппировки Тогда
		
		// Группировка не требуется.
		
	ИначеЕсли ТекущийВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоАвтору Тогда
		
		ЗаполнитьГруппировкиПоАвтору(
			ДанныеГруппировок,
			КлючДляГруппировки,
			ДанныеГруппировки.Группировка,
			ПараметрыОтбораИтогов);
		
	ИначеЕсли ТекущийВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоВидуЗадачи Тогда
		
		ЗаполнитьГруппировкиПоВидуЗадачи(
			ДанныеГруппировок,
			КлючДляГруппировки,
			ДанныеГруппировки.Группировка,
			ПараметрыОтбораИтогов);
		
	ИначеЕсли ТекущийВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоИсполнителю Тогда
		
		ПараметрыОтбораИтогов = ПараметрыОтбораИтоговПоИсполнителям();
		
		ЗаполнитьГруппировкиПоИсполнителю(
			ДанныеГруппировок,
			КлючДляГруппировки,
			ДанныеГруппировки.Группировка,
			ПараметрыОтбораИтогов);
		
	ИначеЕсли ТекущийВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоПриложениюБезГрупп Тогда
		
		ЗаполнитьГруппировкиПоПриложениюБезГрупп(
			ДанныеГруппировок,
			КлючДляГруппировки,
			ДанныеГруппировки.Группировка,
			ПараметрыОтбораИтогов);
		
	ИначеЕсли ТекущийВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоПриложениюПоГруппам Тогда
		
		ЗаполнитьГруппировкиПоПриложениюПоГруппам(
			ДанныеГруппировок,
			КлючДляГруппировки,
			ДанныеГруппировки.Группировка,
			ПараметрыОтбораИтогов);
		
	ИначеЕсли ТекущийВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоПроекту Тогда
		
		ЗаполнитьГруппировкиПоПроекту(
			ДанныеГруппировок,
			КлючДляГруппировки,
			ДанныеГруппировки.Группировка,
			ПараметрыОтбораИтогов);
		
	ИначеЕсли ТекущийВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоФлагу Тогда
		
		ЗаполнитьГруппировкиПоФлагу(
			ДанныеГруппировок,
			КлючДляГруппировки,
			ДанныеГруппировки.Группировка,
			ПараметрыОтбораИтогов);
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестный вариант группировки %1'"),
			ТекущийВариантГруппировки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьГруппировкуЗадачиПодчиненных(ДанныеГруппировок)
	
	// Для руководителя отображаем задачи подчиненных.
	ИерархияПодчиненныхПодразделений = Неопределено;
	ПодразделенияПодчиненных = РаботаСПользователями.ПодразделенияПодчиненных(
		Пользователи.ТекущийПользователь(),
		Ложь,
		ИерархияПодчиненныхПодразделений);
	Если ИерархияПодчиненныхПодразделений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИерархияПодчиненныхПодразделений.Индексы.Добавить("ПодчиненноеПодразделение, Руководитель");
	
	ПодчиненныеСотрудники = ПодразделенияПодчиненных.ВыгрузитьКолонку("Подчиненный");
	ИсключенияИзПодчиненных = РаботаСЗадачами.ИсключенияИзПодчиненных();
	ПодчиненныеСотрудники = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
		ПодчиненныеСотрудники,
		ИсключенияИзПодчиненных);
	ПодчиненныеИсполнителиБезЗамещаемых = РаботаСЗадачами.ИсполнителиЗадачПоСотрудникам(
		ПодчиненныеСотрудники, Ложь);
	
	РеквизитыПодчиненных = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		ПодчиненныеСотрудники,
		"ПометкаУдаления, Действует");
	
	ПараметрыОтбораИтоговПоИсполнителям = ПараметрыОтбораИтоговПоИсполнителям();
	
	ЗадачиОтделаИтоги =
		РегистрыНакопления.КоличествоЗадачПоИсполнителям.ЗадачиРеестраИтоги(ПараметрыОтбораИтоговПоИсполнителям);
	
	// Задачи подчиненных.
	ДанныеГруппировки = ДанныеГруппировки();
	ДанныеГруппировки.Группировка = Справочники.ГруппировкиЗадач.ЗадачиПодчиненных;
	ДанныеГруппировки.Представление = Строка(ДанныеГруппировки.Группировка);
	ДанныеГруппировки.ИндексКартинки = -1;
	ДанныеГруппировки.Порядок = ДанныеГруппировки.Представление;
	ДанныеГруппировки.ОтображатьПустую = Истина;
	
	Если СтрНачинаетсяС(КлючНазначенияИспользования, "ЗадачиПодчиненныхНеНачатые") Тогда
		ДанныеГруппировки.Количество = ЗадачиОтделаИтоги.Новых;
	ИначеЕсли СтрНачинаетсяС(КлючНазначенияИспользования, "ЗадачиПодчиненныхПросроченные") Тогда
		ДанныеГруппировки.Количество = ЗадачиОтделаИтоги.Просроченных;
	Иначе
		Если ДоступенПоказВыполненных И ПоказыватьВыполненные Тогда
			ДанныеГруппировки.Количество = ЗадачиОтделаИтоги.Всего;
		Иначе
			ДанныеГруппировки.Количество = ЗадачиОтделаИтоги.ОжидающихВыполнения;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеГруппировок.Добавить(ДанныеГруппировки);
	
	КлючДляГруппировки = "ЗадачиПодчиненных";
	Если СтрНачинаетсяС(КлючНазначенияИспользования, "ЗадачиПодчиненных") Тогда
		КлючДляГруппировки = КлючНазначенияИспользования;
	КонецЕсли;
	
	Если ТекущийВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.БезГруппировки Тогда
		
		// Единственное подразделение не отображаем - сразу в группировка "Задачи подчиненных" выводим.
		ЕстьУзлыПодразделений = Ложь;
		ГруппировкиПодразделений = Новый Соответствие;
		ДанныеГруппировокПодразделений = Новый Соответствие;
		Если ИерархияПодчиненныхПодразделений.Количество() > 1 Тогда
			
			// Подразделения.
			ЕстьУзлыПодразделений = Истина;
			
			ПодчиненныеПодразделения =
				ИерархияПодчиненныхПодразделений.ВыгрузитьКолонку("ПодчиненноеПодразделение");
			
			ГруппировкиПоИсполнителям = Справочники.ГруппировкиЗадач.ГруппировкиПоИсполнителям(
				Справочники.ГруппировкиЗадач.ЗадачиПодчиненных,
				ПодчиненныеПодразделения,
				Ложь);
			
			Для Каждого СтрокаИерархии Из ИерархияПодчиненныхПодразделений Цикл
				
				ГруппировкаПоИсполнителю = ГруппировкиПоИсполнителям[СтрокаИерархии.ПодчиненноеПодразделение];
				
				ДанныеГруппировки = ДанныеГруппировки();
				ДанныеГруппировки.Группировка = ГруппировкаПоИсполнителю.Группировка;
				ДанныеГруппировки.Количество = 0;
				ДанныеГруппировки.Представление = ГруппировкаПоИсполнителю.Представление;
				ДанныеГруппировки.ИндексКартинки = 0;
				ДанныеГруппировки.Порядок = СтрШаблон("1/%1", ДанныеГруппировки.Представление);
				ДанныеГруппировки.ОтображатьПустую = Истина;
				
				ЭтоКорневойУзел = Не ЗначениеЗаполнено(СтрокаИерархии.ВышестоящееПодразделение)
					Или ПодчиненныеПодразделения.Найти(СтрокаИерархии.ВышестоящееПодразделение) = Неопределено;
				Если ЭтоКорневойУзел Тогда
					ДанныеГруппировки.Родитель.Группировка = Справочники.ГруппировкиЗадач.ЗадачиПодчиненных;
				Иначе
					ДанныеГруппировки.Родитель.Группировка = ГруппировкиПодразделений[СтрокаИерархии.ВышестоящееПодразделение];
				КонецЕсли;
				
				ДанныеГруппировок.Добавить(ДанныеГруппировки);
				
				ГруппировкиПодразделений.Вставить(
					СтрокаИерархии.ПодчиненноеПодразделение,
					ДанныеГруппировки.Группировка);
				
				ДанныеГруппировокПодразделений[ДанныеГруппировки.Группировка] = ДанныеГруппировки;
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Подчиненные.
		ЗадачиИсполнителейИтогиПоИсполнителям =
			РегистрыНакопления.КоличествоЗадачПоИсполнителям.ЗадачиРеестраИтогиПоИзмерениям(
				ПараметрыОтбораИтоговПоИсполнителям,
				"Исполнитель");
		
		ЭтоИсключениеИзПодчиненных = Новый Соответствие;
		Для Каждого ИсключениеИзПодчиненных Из ИсключенияИзПодчиненных Цикл
			
			ЭтоИсключениеИзПодчиненных.Вставить(ИсключениеИзПодчиненных, Истина);
			
		КонецЦикла;
		
		РолиСтрок = Новый Массив;
		ПодразделенияРолей = Новый Соответствие;
		СотрудникиРолейВПодразделениях = Новый Соответствие;
		Для Каждого ДанныеПодчиненного Из ПодразделенияПодчиненных Цикл
			
			Если ЭтоИсключениеИзПодчиненных.Получить(ДанныеПодчиненного.Подчиненный) = Истина Тогда
				Продолжить;
			КонецЕсли;
			
			ИсполнителиПодчиненного =
				ПодчиненныеИсполнителиБезЗамещаемых[ДанныеПодчиненного.Подчиненный];
			Для Каждого ПодчиненныйИсполнитель Из ИсполнителиПодчиненного Цикл
				
				Если ТипЗнч(ПодчиненныйИсполнитель) <> Тип("СправочникСсылка.ПолныеРоли") Тогда
					Продолжить;
				КонецЕсли;
				
				Если РолиСтрок.Найти(ПодчиненныйИсполнитель) = Неопределено Тогда
					РолиСтрок.Добавить(ПодчиненныйИсполнитель);
				КонецЕсли;
				
				Если ПодразделенияРолей[ПодчиненныйИсполнитель] = Неопределено Тогда
					ПодразделенияРолей[ПодчиненныйИсполнитель] = Новый Массив;
				КонецЕсли;
				ПодразделенияРоли = ПодразделенияРолей[ПодчиненныйИсполнитель];
				
				Если ПодразделенияРоли.Найти(ДанныеПодчиненного.Подразделение) = Неопределено Тогда
					ПодразделенияРоли.Добавить(ДанныеПодчиненного.Подразделение);
				КонецЕсли;
				
				Если СотрудникиРолейВПодразделениях[ДанныеПодчиненного.Подразделение] = Неопределено Тогда
					СотрудникиРолейВПодразделениях[ДанныеПодчиненного.Подразделение] = Новый Соответствие;
				КонецЕсли;
				СотрудникиРолейВПодразделении = СотрудникиРолейВПодразделениях[ДанныеПодчиненного.Подразделение];
				
				Если СотрудникиРолейВПодразделении[ПодчиненныйИсполнитель] = Неопределено Тогда
					СотрудникиРолейВПодразделении[ПодчиненныйИсполнитель] = Новый Массив;
				КонецЕсли;
				СотрудникиРолиВПодразделении = СотрудникиРолейВПодразделении[ПодчиненныйИсполнитель];
				
				Если СотрудникиРолиВПодразделении.Найти(ДанныеПодчиненного.Подчиненный) = Неопределено Тогда
					СотрудникиРолиВПодразделении.Добавить(ДанныеПодчиненного.Подчиненный);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		СотрудникиСтрок = Новый Массив;
		Для Каждого ДанныеПодчиненного Из ПодразделенияПодчиненных Цикл
			
			Если ЭтоИсключениеИзПодчиненных.Получить(ДанныеПодчиненного.Подчиненный) = Истина Тогда
				Продолжить;
			КонецЕсли;
			
			СотрудникиСтрок.Добавить(ДанныеПодчиненного.Подчиненный);
			
		КонецЦикла;
		
		ОписанияТекущихОтсутствийСотрудников =
			Отсутствия.ПолучитьОписанияТекущихОтсутствийСотрудников(СотрудникиСтрок);
		
		СотрудникиИРолиСтрок = Новый Массив;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СотрудникиИРолиСтрок, СотрудникиСтрок);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СотрудникиИРолиСтрок, РолиСтрок);
		
		ГруппировкиПоИсполнителям = Справочники.ГруппировкиЗадач.ГруппировкиПоИсполнителям(
			Справочники.ГруппировкиЗадач.ЗадачиПодчиненных,
			СотрудникиИРолиСтрок,
			Истина);
		
		Для Каждого ДанныеПодчиненного Из ПодразделенияПодчиненных Цикл
			
			Если ЭтоИсключениеИзПодчиненных.Получить(ДанныеПодчиненного.Подчиненный) = Истина Тогда
				Продолжить;
			КонецЕсли;
			
			ГруппировкаПоИсполнителю = ГруппировкиПоИсполнителям[ДанныеПодчиненного.Подчиненный];
			
			ДанныеГруппировки = ДанныеГруппировки();
			ДанныеГруппировки.Группировка = ГруппировкаПоИсполнителю.Группировка;
			ДанныеГруппировки.Представление = ГруппировкаПоИсполнителю.Представление;
			ДанныеГруппировки.ОтображатьПустую = Истина;
			
			ЕстьОтсутствие = Ложь;
			ОписаниеОтсутствия = ОписанияТекущихОтсутствийСотрудников[ДанныеПодчиненного.Подчиненный];
			ЕстьОтсутствие = ЕстьОтсутствие Или ОписаниеОтсутствия <> Неопределено;
			ДанныеГруппировки.ИндексКартинки = ?(ЕстьОтсутствие, 9, 1);
			
			Если ЕстьУзлыПодразделений Тогда
				ДанныеГруппировки.Родитель.Группировка = ГруппировкиПодразделений[ДанныеПодчиненного.Подразделение];
			Иначе
				ДанныеГруппировки.Родитель.Группировка = Справочники.ГруппировкиЗадач.ЗадачиПодчиненных;
			КонецЕсли;
			
			ПараметрыОтбораРуководителя = Новый Структура("ПодчиненноеПодразделение, Руководитель",
				ДанныеПодчиненного.Подразделение,
				ДанныеПодчиненного.Подчиненный);
			НайденныеСтроки = ИерархияПодчиненныхПодразделений.НайтиСтроки(ПараметрыОтбораРуководителя);
			ЭтоРуководитель = НайденныеСтроки.Количество() > 0 ;
			
			ДанныеГруппировки.ВыделятьЖирным = ЭтоРуководитель;
			Если ЭтоРуководитель Тогда
				ДанныеГруппировки.Порядок = СтрШаблон("2/%1", ДанныеГруппировки.Представление);
			Иначе
				ДанныеГруппировки.Порядок = СтрШаблон("4/%1", ДанныеГруппировки.Представление);
			КонецЕсли;
			
			ДанныеГруппировки.Количество = 0;
			
			ИтогиПодчиненногоИсполнителя = ЗадачиИсполнителейИтогиПоИсполнителям.Найти(
				ДанныеПодчиненного.Подчиненный, "Исполнитель");
			Если ИтогиПодчиненногоИсполнителя <> Неопределено Тогда
				Если СтрНачинаетсяС(КлючНазначенияИспользования, "ЗадачиПодчиненныхНеНачатые") Тогда
					ДанныеГруппировки.Количество =
						ДанныеГруппировки.Количество + ИтогиПодчиненногоИсполнителя.Новых;
				ИначеЕсли СтрНачинаетсяС(КлючНазначенияИспользования, "ЗадачиПодчиненныхПросроченные") Тогда
					ДанныеГруппировки.Количество =
						ДанныеГруппировки.Количество + ИтогиПодчиненногоИсполнителя.Просроченных;
				Иначе
					Если ДоступенПоказВыполненных И ПоказыватьВыполненные Тогда
						ДанныеГруппировки.Количество =
							ДанныеГруппировки.Количество + ИтогиПодчиненногоИсполнителя.Всего;
					Иначе
						ДанныеГруппировки.Количество =
							ДанныеГруппировки.Количество + ИтогиПодчиненногоИсполнителя.ОжидающихВыполнения;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			// Недействительных подчиненных отображаем только если на них есть задачи.
			РеквизитыПодчиненного = РеквизитыПодчиненных[ДанныеПодчиненного.Подчиненный];
			ПодчиненныйДействует = РеквизитыПодчиненного <> Неопределено
				И Не РеквизитыПодчиненного.ПометкаУдаления
				И РеквизитыПодчиненного.Действует;
			Если Не ПодчиненныйДействует И ДанныеГруппировки.Количество = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеГруппировок.Добавить(ДанныеГруппировки);
			
			ДанныеГруппировкиПодразделения =
				ДанныеГруппировокПодразделений[ДанныеГруппировки.Родитель.Группировка];
			Если ДанныеГруппировкиПодразделения <> Неопределено Тогда
				ДанныеГруппировкиПодразделения.Количество =
					ДанныеГруппировкиПодразделения.Количество + ДанныеГруппировки.Количество;
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого ПодчиненнаяРоль Из РолиСтрок Цикл
			
			ГруппировкаПоИсполнителю = ГруппировкиПоИсполнителям[ПодчиненнаяРоль];
			
			ПодразделенияРоли = ПодразделенияРолей[ПодчиненнаяРоль];
			
			Для Каждого ПодразделениеРоли Из ПодразделенияРоли Цикл
				
				ДанныеГруппировки = ДанныеГруппировки();
				ДанныеГруппировки.Группировка = ГруппировкаПоИсполнителю.Группировка;
				ДанныеГруппировки.Представление = ГруппировкаПоИсполнителю.Представление;
				ДанныеГруппировки.ОтображатьПустую = Истина;
				
				ЕстьПрисутствие = Ложь;
				ЕстьОтсутствие = Ложь;
				СотрудникиРолейВПодразделении = СотрудникиРолейВПодразделениях[ПодразделениеРоли];
				СотрудникиРолиВПодразделении = СотрудникиРолейВПодразделении[ПодчиненнаяРоль];
				Для Каждого СотрудникРоли Из СотрудникиРолиВПодразделении Цикл
					ОписаниеОтсутствия = ОписанияТекущихОтсутствийСотрудников[СотрудникРоли];
					ЕстьОтсутствие = ЕстьОтсутствие Или ОписаниеОтсутствия <> Неопределено;
					ЕстьПрисутствие = ЕстьПрисутствие Или ОписаниеОтсутствия = Неопределено;
				КонецЦикла;
				ДанныеГруппировки.ИндексКартинки = ?(ЕстьОтсутствие И Не ЕстьПрисутствие, 11, 10);
				
				Если ЕстьУзлыПодразделений Тогда
					ДанныеГруппировки.Родитель.Группировка = ГруппировкиПодразделений[ПодразделениеРоли];
				Иначе
					ДанныеГруппировки.Родитель.Группировка = Справочники.ГруппировкиЗадач.ЗадачиПодчиненных;
				КонецЕсли;
				
				ДанныеГруппировки.ВыделятьСиним = Истина;
				ДанныеГруппировки.Порядок = СтрШаблон("3/%1", ДанныеГруппировки.Представление);
				
				ДанныеГруппировки.Количество = 0;
				
				ИтогиПодчиненногоИсполнителя = ЗадачиИсполнителейИтогиПоИсполнителям.Найти(
					ПодчиненнаяРоль, "Исполнитель");
				Если ИтогиПодчиненногоИсполнителя <> Неопределено Тогда
					Если СтрНачинаетсяС(КлючНазначенияИспользования, "ЗадачиПодчиненныхНеНачатые") Тогда
						ДанныеГруппировки.Количество =
							ДанныеГруппировки.Количество + ИтогиПодчиненногоИсполнителя.Новых;
					ИначеЕсли СтрНачинаетсяС(КлючНазначенияИспользования, "ЗадачиПодчиненныхПросроченные") Тогда
						ДанныеГруппировки.Количество =
							ДанныеГруппировки.Количество + ИтогиПодчиненногоИсполнителя.Просроченных;
					Иначе
						Если ДоступенПоказВыполненных И ПоказыватьВыполненные Тогда
							ДанныеГруппировки.Количество =
								ДанныеГруппировки.Количество + ИтогиПодчиненногоИсполнителя.Всего;
						Иначе
							ДанныеГруппировки.Количество =
								ДанныеГруппировки.Количество + ИтогиПодчиненногоИсполнителя.ОжидающихВыполнения;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				ДанныеГруппировок.Добавить(ДанныеГруппировки);
				
				ДанныеГруппировкиПодразделения =
					ДанныеГруппировокПодразделений[ДанныеГруппировки.Родитель.Группировка];
				Если ДанныеГруппировкиПодразделения <> Неопределено Тогда
					ДанныеГруппировкиПодразделения.Количество =
						ДанныеГруппировкиПодразделения.Количество + ДанныеГруппировки.Количество;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	ИначеЕсли ТекущийВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоАвтору Тогда
		
		ЗаполнитьГруппировкиПоАвтору(
			ДанныеГруппировок,
			КлючДляГруппировки,
			Справочники.ГруппировкиЗадач.ЗадачиПодчиненных,
			ПараметрыОтбораИтоговПоИсполнителям);
		
	ИначеЕсли ТекущийВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоВидуЗадачи Тогда
		
		ЗаполнитьГруппировкиПоВидуЗадачи(
			ДанныеГруппировок,
			КлючДляГруппировки,
			Справочники.ГруппировкиЗадач.ЗадачиПодчиненных,
			ПараметрыОтбораИтоговПоИсполнителям);
		
	ИначеЕсли ТекущийВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоИсполнителю Тогда
		
		ЗаполнитьГруппировкиПоИсполнителю(
			ДанныеГруппировок,
			КлючДляГруппировки,
			Справочники.ГруппировкиЗадач.ЗадачиПодчиненных,
			ПараметрыОтбораИтоговПоИсполнителям);
		
	ИначеЕсли ТекущийВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоПриложениюБезГрупп Тогда
		
		ЗаполнитьГруппировкиПоПриложениюБезГрупп(
			ДанныеГруппировок,
			КлючДляГруппировки,
			Справочники.ГруппировкиЗадач.ЗадачиПодчиненных,
			ПараметрыОтбораИтоговПоИсполнителям);
		
	ИначеЕсли ТекущийВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоПриложениюПоГруппам Тогда
		
		ЗаполнитьГруппировкиПоПриложениюПоГруппам(
			ДанныеГруппировок,
			КлючДляГруппировки,
			Справочники.ГруппировкиЗадач.ЗадачиПодчиненных,
			ПараметрыОтбораИтоговПоИсполнителям);
		
	ИначеЕсли ТекущийВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоПроекту Тогда
		
		ЗаполнитьГруппировкиПоПроекту(
			ДанныеГруппировок,
			КлючДляГруппировки,
			Справочники.ГруппировкиЗадач.ЗадачиПодчиненных,
			ПараметрыОтбораИтоговПоИсполнителям);
		
	ИначеЕсли ТекущийВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоФлагу Тогда
		
		ЗаполнитьГруппировкиПоФлагу(
			ДанныеГруппировок,
			КлючДляГруппировки,
			Справочники.ГруппировкиЗадач.ЗадачиПодчиненных,
			ПараметрыОтбораИтоговПоИсполнителям);
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестный вариант группировки %1'"),
			ТекущийВариантГруппировки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьГруппировкуЗадачиПоПроектам(ДанныеГруппировок)
	
	// Для руководителя отображаем задачи проектов.
	АктивныеПроектыРуководителя = РаботаСПроектами.АктивныеПроектыРуководителей(
		Сотрудники.ТекущийПользовательИСотрудники());
	Если АктивныеПроектыРуководителя.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОтображатьПоАвторам = ОтображатьПоАвторам();
	
	КлючДляГруппировкиПоАвторам = "ЗадачиПоПроектамПоАвторам";
	КлючДляГруппировкаПоИсполнителям = "ЗадачиПоПроектамПоИсполнителям";
	
	// Задачи по проектам (по авторам).
	Если ОтображатьПоАвторам Тогда
		
		ПараметрыОтбораИтоговПоАвторам = ПараметрыОтбораИтоговПоАвторам();
		
		ЗадачиПоПроектамИтогиПоАвторам = РегистрыНакопления.КоличествоЗадачПоАвторам.ЗадачиРеестраИтоги(
			ПараметрыОтбораИтоговПоАвторам);
		
		ДанныеГруппировки = ДанныеГруппировки();
		ДанныеГруппировки.Группировка = Справочники.ГруппировкиЗадач.ЗадачиПоПроектамПоАвторам;
		ДанныеГруппировки.Представление = НСтр("ru = 'По авторам'");
		ДанныеГруппировки.ИндексКартинки = -1;
		ДанныеГруппировки.Порядок = ДанныеГруппировки.Представление;
		ДанныеГруппировки.ОтображатьПустую = Истина;
		
		Если ДоступенПоказВыполненных И ПоказыватьВыполненные Тогда
			ДанныеГруппировки.Количество = ЗадачиПоПроектамИтогиПоАвторам.Всего;
		Иначе
			ДанныеГруппировки.Количество = ЗадачиПоПроектамИтогиПоАвторам.ОжидающихВыполнения;
		КонецЕсли;
		
		ДанныеГруппировок.Добавить(ДанныеГруппировки);
		
	КонецЕсли;
	
	// Задачи по проектам (по исполнителям).
	ПараметрыОтбораПоИсполнителям = ПараметрыОтбораИтоговПоИсполнителям();
	
	ЗадачиПоПроектамИтогиПоИсполнителям = РегистрыНакопления.КоличествоЗадачПоИсполнителям.ЗадачиРеестраИтоги(
		ПараметрыОтбораПоИсполнителям);
	
	ДанныеГруппировки = ДанныеГруппировки();
	ДанныеГруппировки.Группировка = Справочники.ГруппировкиЗадач.ЗадачиПоПроектамПоИсполнителям;
	ДанныеГруппировки.Представление = НСтр("ru = 'По исполнителям'");
	ДанныеГруппировки.ИндексКартинки = -1;
	ДанныеГруппировки.Порядок = ДанныеГруппировки.Представление;
	ДанныеГруппировки.ОтображатьПустую = Истина;
	
	Если ДоступенПоказВыполненных И ПоказыватьВыполненные Тогда
		ДанныеГруппировки.Количество = ЗадачиПоПроектамИтогиПоИсполнителям.Всего;
	Иначе
		ДанныеГруппировки.Количество = ЗадачиПоПроектамИтогиПоИсполнителям.ОжидающихВыполнения;
	КонецЕсли;
	
	ДанныеГруппировок.Добавить(ДанныеГруппировки);
	
	Если ТекущийВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.БезГруппировки Тогда
		
		Если ОтображатьПоАвторам Тогда
			
			ЗадачиАвторовИтогиПоПроектам =
				РегистрыНакопления.КоличествоЗадачПоАвторам.ЗадачиРеестраИтогиПоИзмерениям(
					ПараметрыОтбораИтоговПоАвторам,
					"Проект");
			ЗадачиАвторовИтогиПоПроектам.Индексы.Добавить("Проект");
			
			Для Каждого АктивныйПроект Из АктивныеПроектыРуководителя Цикл
				
				// Проект.
				ДанныеГруппировкиПроекта = ДанныеГруппировки();
				ДанныеГруппировкиПроекта.Группировка = Справочники.ГруппировкиЗадач.ГруппировкаПоПроекту(
					Справочники.ГруппировкиЗадач.ЗадачиПоПроектамПоАвторам,
					АктивныйПроект);
				ДанныеГруппировкиПроекта.Представление = Строка(ДанныеГруппировкиПроекта.Группировка);
				ДанныеГруппировкиПроекта.ИндексКартинки = -1;
				ДанныеГруппировкиПроекта.Порядок = ДанныеГруппировкиПроекта.Представление;
				ДанныеГруппировкиПроекта.ОтображатьПустую = Истина;
				ДанныеГруппировкиПроекта.Родитель.Группировка = Справочники.ГруппировкиЗадач.ЗадачиПоПроектамПоАвторам;
				ДанныеГруппировкиПроекта.Количество = 0;
				
				ЗадачиПоПроектуИтоги = ЗадачиАвторовИтогиПоПроектам.Найти(АктивныйПроект, "Проект");
				Если ЗадачиПоПроектуИтоги <> Неопределено Тогда
					Если ДоступенПоказВыполненных И ПоказыватьВыполненные Тогда
						ДанныеГруппировкиПроекта.Количество = ЗадачиПоПроектуИтоги.Всего;
					Иначе
						ДанныеГруппировкиПроекта.Количество = ЗадачиПоПроектуИтоги.ОжидающихВыполнения;
					КонецЕсли;
				КонецЕсли;
				
				ДанныеГруппировок.Добавить(ДанныеГруппировкиПроекта);
				
			КонецЦикла;
			
		КонецЕсли;
		
		ЗадачиИсполнителейПоПроектам =
			РегистрыНакопления.КоличествоЗадачПоИсполнителям.ЗадачиРеестраИтогиПоИзмерениям(
				ПараметрыОтбораИтоговПоАвторам,
				"Проект");
		ЗадачиИсполнителейПоПроектам.Индексы.Добавить("Проект");
		
		ЗадачиИсполнителейПоПроектамИИсполнителям =
			РегистрыНакопления.КоличествоЗадачПоИсполнителям.ЗадачиРеестраИтогиПоИзмерениям(
				ПараметрыОтбораПоИсполнителям,
				"Проект, Исполнитель");
		
		Для Каждого АктивныйПроект Из АктивныеПроектыРуководителя Цикл
			
			// Проект.
			ДанныеГруппировкиПроекта = ДанныеГруппировки();
			ДанныеГруппировкиПроекта.Группировка = Справочники.ГруппировкиЗадач.ГруппировкаПоПроекту(
				Справочники.ГруппировкиЗадач.ЗадачиПоПроектамПоИсполнителям,
				АктивныйПроект);
			ДанныеГруппировкиПроекта.Представление = Строка(ДанныеГруппировкиПроекта.Группировка);
			ДанныеГруппировкиПроекта.ИндексКартинки = -1;
			ДанныеГруппировкиПроекта.Порядок = ДанныеГруппировкиПроекта.Представление;
			ДанныеГруппировкиПроекта.ОтображатьПустую = Истина;
			ДанныеГруппировкиПроекта.Родитель.Группировка = Справочники.ГруппировкиЗадач.ЗадачиПоПроектамПоИсполнителям;
			ДанныеГруппировкиПроекта.Количество = 0;
			
			ЗадачиПоПроектуИтоги = ЗадачиИсполнителейПоПроектам.Найти(АктивныйПроект, "Проект");
			Если ЗадачиПоПроектуИтоги <> Неопределено Тогда
				Если ДоступенПоказВыполненных И ПоказыватьВыполненные Тогда
					ДанныеГруппировкиПроекта.Количество = ЗадачиПоПроектуИтоги.Всего;
				Иначе
					ДанныеГруппировкиПроекта.Количество = ЗадачиПоПроектуИтоги.ОжидающихВыполнения;
				КонецЕсли;
			КонецЕсли;
			
			ДанныеГруппировок.Добавить(ДанныеГруппировкиПроекта);
			
			// Исполнители по проекту.
			ИтогиИсполнителейПроекта = ЗадачиИсполнителейПоПроектамИИсполнителям.НайтиСтроки(
				Новый Структура("Проект", АктивныйПроект));
			Для Каждого ИтогиИсполнителяПроекта Из ИтогиИсполнителейПроекта Цикл
				
				ДанныеГруппировки = ДанныеГруппировки();
				ДанныеГруппировки.Группировка = Справочники.ГруппировкиЗадач.ГруппировкаПоИсполнителю(
					ДанныеГруппировкиПроекта.Группировка,
					ИтогиИсполнителяПроекта.Исполнитель,
					Истина);
				ДанныеГруппировки.Представление = Строка(ДанныеГруппировки.Группировка);
				ДанныеГруппировки.ИндексКартинки = -1;
				ДанныеГруппировки.ОтображатьПустую = Ложь;
				ДанныеГруппировки.Родитель.Группировка = ДанныеГруппировкиПроекта.Группировка;
				
				ПрефиксГруппировки = "";
				Если ТипЗнч(ИтогиИсполнителяПроекта.Исполнитель) = Тип("СправочникСсылка.Сотрудники")
					Или ТипЗнч(ИтогиИсполнителяПроекта.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
					ПрефиксГруппировки = "1";
				ИначеЕсли ТипЗнч(ИтогиИсполнителяПроекта.Исполнитель) = Тип("СправочникСсылка.ПолныеРоли") Тогда
					ПрефиксГруппировки = "2";
				КонецЕсли;
				ДанныеГруппировки.Порядок = СтрШаблон("%1_%2",
					ПрефиксГруппировки,
					ДанныеГруппировки.Представление);
				
				Если ДоступенПоказВыполненных И ПоказыватьВыполненные Тогда
					ДанныеГруппировки.Количество = ИтогиИсполнителяПроекта.Всего;
				Иначе
					ДанныеГруппировки.Количество = ИтогиИсполнителяПроекта.ОжидающихВыполнения;
				КонецЕсли;
				
				ДанныеГруппировок.Добавить(ДанныеГруппировки);
				
			КонецЦикла;
			
		КонецЦикла;
		
	ИначеЕсли ТекущийВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоАвтору Тогда
		
		Если ОтображатьПоАвторам Тогда
			ЗаполнитьГруппировкиПоАвтору(
				ДанныеГруппировок,
				КлючДляГруппировкиПоАвторам,
				Справочники.ГруппировкиЗадач.ЗадачиПоПроектамПоАвторам,
				ПараметрыОтбораИтоговПоАвторам);
		КонецЕсли;
		
		ЗаполнитьГруппировкиПоАвтору(
			ДанныеГруппировок,
			КлючДляГруппировкаПоИсполнителям,
			Справочники.ГруппировкиЗадач.ЗадачиПоПроектамПоИсполнителям,
			ПараметрыОтбораПоИсполнителям);
		
	ИначеЕсли ТекущийВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоВидуЗадачи Тогда
		
		Если ОтображатьПоАвторам Тогда
			ЗаполнитьГруппировкиПоВидуЗадачи(
				ДанныеГруппировок,
				КлючДляГруппировкиПоАвторам,
				Справочники.ГруппировкиЗадач.ЗадачиПоПроектамПоАвторам,
				ПараметрыОтбораИтоговПоАвторам);
		КонецЕсли;
		
		ЗаполнитьГруппировкиПоВидуЗадачи(
			ДанныеГруппировок,
			КлючДляГруппировкаПоИсполнителям,
			Справочники.ГруппировкиЗадач.ЗадачиПоПроектамПоИсполнителям,
			ПараметрыОтбораПоИсполнителям);
		
	ИначеЕсли ТекущийВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоИсполнителю Тогда
		
		Если ОтображатьПоАвторам Тогда
			ЗаполнитьГруппировкиПоИсполнителю(
				ДанныеГруппировок,
				КлючДляГруппировкиПоАвторам,
				Справочники.ГруппировкиЗадач.ЗадачиПоПроектамПоАвторам,
				ПараметрыОтбораИтоговПоАвторам);
		КонецЕсли;
		
		ЗаполнитьГруппировкиПоИсполнителю(
			ДанныеГруппировок,
			КлючДляГруппировкаПоИсполнителям,
			Справочники.ГруппировкиЗадач.ЗадачиПоПроектамПоИсполнителям,
			ПараметрыОтбораПоИсполнителям);
		
	ИначеЕсли ТекущийВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоПриложениюБезГрупп Тогда
		
		Если ОтображатьПоАвторам Тогда
			ЗаполнитьГруппировкиПоПриложениюБезГрупп(
				ДанныеГруппировок,
				КлючДляГруппировкиПоАвторам,
				Справочники.ГруппировкиЗадач.ЗадачиПоПроектамПоАвторам,
				ПараметрыОтбораИтоговПоАвторам);
		КонецЕсли;
		
		ЗаполнитьГруппировкиПоПриложениюБезГрупп(
			ДанныеГруппировок,
			КлючДляГруппировкаПоИсполнителям,
			Справочники.ГруппировкиЗадач.ЗадачиПоПроектамПоИсполнителям,
			ПараметрыОтбораПоИсполнителям);
		
	ИначеЕсли ТекущийВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоПриложениюПоГруппам Тогда
		
		Если ОтображатьПоАвторам Тогда
			ЗаполнитьГруппировкиПоПриложениюПоГруппам(
				ДанныеГруппировок,
				КлючДляГруппировкиПоАвторам,
				Справочники.ГруппировкиЗадач.ЗадачиПоПроектамПоАвторам,
				ПараметрыОтбораИтоговПоАвторам);
		КонецЕсли;
		
		ЗаполнитьГруппировкиПоПриложениюПоГруппам(
			ДанныеГруппировок,
			КлючДляГруппировкаПоИсполнителям,
			Справочники.ГруппировкиЗадач.ЗадачиПоПроектамПоИсполнителям,
			ПараметрыОтбораПоИсполнителям);
		
	ИначеЕсли ТекущийВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоПроекту Тогда
		
		Если ОтображатьПоАвторам Тогда
			ЗаполнитьГруппировкиПоПроекту(
				ДанныеГруппировок,
				КлючДляГруппировкиПоАвторам,
				Справочники.ГруппировкиЗадач.ЗадачиПоПроектамПоАвторам,
				ПараметрыОтбораИтоговПоАвторам);
		КонецЕсли;
		
		ЗаполнитьГруппировкиПоПроекту(
			ДанныеГруппировок,
			КлючДляГруппировкаПоИсполнителям,
			Справочники.ГруппировкиЗадач.ЗадачиПоПроектамПоИсполнителям,
			ПараметрыОтбораПоИсполнителям);
		
	ИначеЕсли ТекущийВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоФлагу Тогда
		
		Если ОтображатьПоАвторам Тогда
			ЗаполнитьГруппировкиПоФлагу(
				ДанныеГруппировок,
				КлючДляГруппировкиПоАвторам,
				Справочники.ГруппировкиЗадач.ЗадачиПоПроектамПоАвторам,
				ПараметрыОтбораИтоговПоАвторам);
		КонецЕсли;
		
		ЗаполнитьГруппировкиПоФлагу(
			ДанныеГруппировок,
			КлючДляГруппировкаПоИсполнителям,
			Справочники.ГруппировкиЗадач.ЗадачиПоПроектамПоИсполнителям,
			ПараметрыОтбораПоИсполнителям);
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестный вариант группировки %1'"),
			ТекущийВариантГруппировки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьГруппировкуВсеЗадачи(ДанныеГруппировок)
	
	ОтображатьПоАвторам = ОтображатьПоАвторам();
	
	ПараметрыОтбораИтоговПоАвторам = ПараметрыОтбораИтоговПоАвторам();
	
	КлючДляГруппировкиПоАвторам = "ВсеЗадачиПоАвторам";
	КлючДляГруппировкаПоИсполнителям = "ВсеЗадачиПоИсполнителям";
	
	// Все задачи (по авторам).
	Если ОтображатьПоАвторам Тогда
		
		ДанныеГруппировки = ДанныеГруппировки();
		ДанныеГруппировки.Группировка = Справочники.ГруппировкиЗадач.ВсеЗадачиПоАвторам;
		ДанныеГруппировки.Количество = 0;
		ДанныеГруппировки.Представление = Строка(ДанныеГруппировки.Группировка);
		ДанныеГруппировки.ИндексКартинки = -1;
		ДанныеГруппировки.Порядок = ДанныеГруппировки.Представление;
		ДанныеГруппировки.ОтображатьПустую = Истина;
		
		ДанныеГруппировок.Добавить(ДанныеГруппировки);
		
	КонецЕсли;
	
	// Все задачи (по исполнителям).
	ДанныеГруппировки = ДанныеГруппировки();
	ДанныеГруппировки.Группировка = Справочники.ГруппировкиЗадач.ВсеЗадачиПоИсполнителям;
	ДанныеГруппировки.Количество = 0;
	ДанныеГруппировки.Представление = Строка(ДанныеГруппировки.Группировка);
	ДанныеГруппировки.ИндексКартинки = -1;
	ДанныеГруппировки.Порядок = ДанныеГруппировки.Представление;
	ДанныеГруппировки.ОтображатьПустую = Истина;
	
	ДанныеГруппировок.Добавить(ДанныеГруппировки);
	
	Если ТекущийВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.БезГруппировки Тогда
		
		// Дополнительные группировки не требуются.
		
	ИначеЕсли ТекущийВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоАвтору Тогда
		
		Если ОтображатьПоАвторам Тогда
			ЗаполнитьГруппировкиПоАвтору(
				ДанныеГруппировок,
				КлючДляГруппировкиПоАвторам,
				Справочники.ГруппировкиЗадач.ВсеЗадачиПоАвторам,
				ПараметрыОтбораИтоговПоАвторам);
		КонецЕсли;
		
		ЗаполнитьГруппировкиПоАвтору(
			ДанныеГруппировок,
			КлючДляГруппировкаПоИсполнителям,
			Справочники.ГруппировкиЗадач.ВсеЗадачиПоИсполнителям,
			ПараметрыОтбораИтоговПоАвторам);
		
	ИначеЕсли ТекущийВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоВидуЗадачи Тогда
		
		Если ОтображатьПоАвторам Тогда
			ЗаполнитьГруппировкиПоВидуЗадачи(
				ДанныеГруппировок,
				КлючДляГруппировкиПоАвторам,
				Справочники.ГруппировкиЗадач.ВсеЗадачиПоАвторам,
				ПараметрыОтбораИтоговПоАвторам);
		КонецЕсли;
		
		ЗаполнитьГруппировкиПоВидуЗадачи(
			ДанныеГруппировок,
			КлючДляГруппировкаПоИсполнителям,
			Справочники.ГруппировкиЗадач.ВсеЗадачиПоИсполнителям,
			ПараметрыОтбораИтоговПоАвторам);
		
	ИначеЕсли ТекущийВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоИсполнителю Тогда
		
		Если ОтображатьПоАвторам Тогда
			ЗаполнитьГруппировкиПоИсполнителю(
				ДанныеГруппировок,
				КлючДляГруппировкиПоАвторам,
				Справочники.ГруппировкиЗадач.ВсеЗадачиПоАвторам,
				ПараметрыОтбораИтоговПоАвторам);
		КонецЕсли;
		
		ЗаполнитьГруппировкиПоИсполнителю(
			ДанныеГруппировок,
			КлючДляГруппировкаПоИсполнителям,
			Справочники.ГруппировкиЗадач.ВсеЗадачиПоИсполнителям,
			ПараметрыОтбораИтоговПоАвторам);
		
	ИначеЕсли ТекущийВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоПриложениюБезГрупп Тогда
		
		Если ОтображатьПоАвторам Тогда
			ЗаполнитьГруппировкиПоПриложениюБезГрупп(
				ДанныеГруппировок,
				КлючДляГруппировкиПоАвторам,
				Справочники.ГруппировкиЗадач.ВсеЗадачиПоАвторам,
				ПараметрыОтбораИтоговПоАвторам);
		КонецЕсли;
		
		ЗаполнитьГруппировкиПоПриложениюБезГрупп(
			ДанныеГруппировок,
			КлючДляГруппировкаПоИсполнителям,
			Справочники.ГруппировкиЗадач.ВсеЗадачиПоИсполнителям,
			ПараметрыОтбораИтоговПоАвторам);
		
	ИначеЕсли ТекущийВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоПриложениюПоГруппам Тогда
		
		Если ОтображатьПоАвторам Тогда
			ЗаполнитьГруппировкиПоПриложениюПоГруппам(
				ДанныеГруппировок,
				КлючДляГруппировкиПоАвторам,
				Справочники.ГруппировкиЗадач.ВсеЗадачиПоАвторам,
				ПараметрыОтбораИтоговПоАвторам);
		КонецЕсли;
		
		ЗаполнитьГруппировкиПоПриложениюПоГруппам(
			ДанныеГруппировок,
			КлючДляГруппировкаПоИсполнителям,
			Справочники.ГруппировкиЗадач.ВсеЗадачиПоИсполнителям,
			ПараметрыОтбораИтоговПоАвторам);
		
	ИначеЕсли ТекущийВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоПроекту Тогда
		
		Если ОтображатьПоАвторам Тогда
			ЗаполнитьГруппировкиПоПроекту(
				ДанныеГруппировок,
				КлючДляГруппировкиПоАвторам,
				Справочники.ГруппировкиЗадач.ВсеЗадачиПоАвторам,
				ПараметрыОтбораИтоговПоАвторам);
		КонецЕсли;
		
		ЗаполнитьГруппировкиПоПроекту(
			ДанныеГруппировок,
			КлючДляГруппировкаПоИсполнителям,
			Справочники.ГруппировкиЗадач.ВсеЗадачиПоИсполнителям,
			ПараметрыОтбораИтоговПоАвторам);
		
	ИначеЕсли ТекущийВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоФлагу Тогда
		
		Если ОтображатьПоАвторам Тогда
			ЗаполнитьГруппировкиПоФлагу(
				ДанныеГруппировок,
				КлючДляГруппировкиПоАвторам,
				Справочники.ГруппировкиЗадач.ВсеЗадачиПоАвторам,
				ПараметрыОтбораИтоговПоАвторам);
		КонецЕсли;
		
		ЗаполнитьГруппировкиПоФлагу(
			ДанныеГруппировок,
			КлючДляГруппировкаПоИсполнителям,
			Справочники.ГруппировкиЗадач.ВсеЗадачиПоИсполнителям,
			ПараметрыОтбораИтоговПоАвторам);
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестный вариант группировки %1'"),
			ТекущийВариантГруппировки);
		
	КонецЕсли;
	
КонецПроцедуры

#Область ЗаполнениеГруппировок

&НаСервере
Процедура ЗаполнитьГруппировкиПоАвтору(ДанныеГруппировок, КлючНазначения, Раздел,
		ПараметрыОтбораИтогов, ОсновнаяГруппировка = Неопределено)
	
	ЭтоОсновнаяГруппировка = Не ЗначениеЗаполнено(ОсновнаяГруппировка);
	
	ЗадачиИтогиПоАвторам =
		ЗадачиИтогиПоАвторам(ПараметрыОтбораИтогов, КлючНазначения);
	
	Для Каждого ЗадачиИтогиПоАвтору Из ЗадачиИтогиПоАвторам Цикл
		
		ДанныеГруппировки = ДанныеГруппировки();
		
		УстанавливаемаяГруппировка = Справочники.ГруппировкиЗадач.ГруппировкаПоАвтору(
			Раздел,
			ЗадачиИтогиПоАвтору.Автор);
		
		Если ЭтоОсновнаяГруппировка Тогда
			ДанныеГруппировки.Группировка = УстанавливаемаяГруппировка;
			ДанныеГруппировки.Представление = Строка(ДанныеГруппировки.Группировка);
			ДанныеГруппировки.Родитель.Группировка = Раздел;
		Иначе
			ДанныеГруппировки.Группировка = ОсновнаяГруппировка;
			ДанныеГруппировки.ДополнительнаяГруппировка = УстанавливаемаяГруппировка;
			ДанныеГруппировки.Представление = Строка(ДанныеГруппировки.ДополнительнаяГруппировка);
			ДанныеГруппировки.Родитель.Группировка = ОсновнаяГруппировка;
		КонецЕсли;
		
		ДанныеГруппировки.Порядок = ДанныеГруппировки.Представление;
		ДанныеГруппировки.ИндексКартинки = -1;
		ДанныеГруппировки.ОтображатьПустую = ОтображатьПустуюГруппировки(КлючНазначения);
		
		ДанныеГруппировки.Количество = КоличествоГруппировки(ЗадачиИтогиПоАвтору, КлючНазначения);
		
		ДанныеГруппировок.Добавить(ДанныеГруппировки);
		
		Если ЭтоОсновнаяГруппировка Тогда
			ЗаполнитьДополнительныеГруппировки(ДанныеГруппировок, КлючНазначения,
				Раздел, ПараметрыОтбораИтогов, ДанныеГруппировки.Группировка);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗадачиИтогиПоАвторам(ПараметрыОтбораИтогов, КлючНазначения)
	
	Если СтрНачинаетсяС(КлючНазначения, "ЗадачиМне") Тогда
		
		ЗадачиИтогиПоАвторам =
			РегистрыНакопления.КоличествоЗадачПоИсполнителям.ЗадачиРеестраИтогиПоИзмерениям(
				ПараметрыОтбораИтогов,
				"Автор");
		
	ИначеЕсли СтрНачинаетсяС(КлючНазначения, "ЗадачиОтМеня") Тогда
		
		Если ПараметрыОтбораИтогов.Свойство("Исполнитель")
			И ПараметрыОтбораИтогов.Исполнитель <> Неопределено Тогда
			
			ЗадачиИтогиПоАвторам =
				РегистрыНакопления.КоличествоЗадачПоИсполнителям.ЗадачиРеестраИтогиПоИзмерениям(
					ПараметрыОтбораИтогов,
					"Автор");
			
		Иначе
			
			ЗадачиИтогиПоАвторам =
				РегистрыНакопления.КоличествоЗадачПоАвторам.ЗадачиРеестраИтогиПоИзмерениям(
					ПараметрыОтбораИтогов,
					"Автор");
			
		КонецЕсли;
		
	ИначеЕсли СтрНачинаетсяС(КлючНазначения, "ЗадачиПодчиненных") Тогда
		
		ЗадачиИтогиПоАвторам =
			РегистрыНакопления.КоличествоЗадачПоИсполнителям.ЗадачиРеестраИтогиПоИзмерениям(
				ПараметрыОтбораИтогов,
				"Автор");
		
	ИначеЕсли СтрНачинаетсяС(КлючНазначения, "ЗадачиПоПроектамПоАвторам") Тогда
		
		ЗадачиИтогиПоАвторам =
			РегистрыНакопления.КоличествоЗадачПоАвторам.ЗадачиРеестраИтогиПоИзмерениям(
				ПараметрыОтбораИтогов,
				"Автор");
		
	ИначеЕсли СтрНачинаетсяС(КлючНазначения, "ЗадачиПоПроектамПоИсполнителям") Тогда
		
		ЗадачиИтогиПоАвторам =
			РегистрыНакопления.КоличествоЗадачПоИсполнителям.ЗадачиРеестраИтогиПоИзмерениям(
				ПараметрыОтбораИтогов,
				"Автор");
		
	ИначеЕсли СтрНачинаетсяС(КлючНазначения, "ВсеЗадачиПоАвторам") Тогда
		
		ЗадачиИтогиПоАвторам =
			РегистрыНакопления.КоличествоЗадачПоАвторам.ЗадачиРеестраИтогиПоИзмерениям(
				ПараметрыОтбораИтогов,
				"Автор");
		
	ИначеЕсли СтрНачинаетсяС(КлючНазначения, "ВсеЗадачиПоИсполнителям") Тогда
		
		ЗадачиИтогиПоАвторам =
			РегистрыНакопления.КоличествоЗадачПоИсполнителям.ЗадачиРеестраИтогиПоИзмерениям(
				ПараметрыОтбораИтогов,
				"Автор");
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Недопустимый ключ назначения использования %1.'"),
			КлючНазначения);
		
	КонецЕсли;
	
	Возврат ЗадачиИтогиПоАвторам;
	
КонецФункции

&НаСервере
Функция КоличествоГруппировки(ЗадачиИтоги, КлючНазначения)
	
	Если СтрНачинаетсяС(КлючНазначения, "ЗадачиМне") Тогда
		
		Если СтрНачинаетсяС(КлючНазначения, "ЗадачиМнеНеНачатые") Тогда
			Возврат ЗадачиИтоги.Новых;
		ИначеЕсли СтрНачинаетсяС(КлючНазначения, "ЗадачиМнеПросроченные")
			Или СтрНачинаетсяС(КлючНазначения, "ЗадачиМнеПросроченоБезОзнакомления") Тогда
			Возврат ЗадачиИтоги.Просроченных;
		Иначе
			Если ДоступенПоказВыполненных И ПоказыватьВыполненные Тогда
				Возврат ЗадачиИтоги.Всего;
			ИначеЕсли КлючНазначенияИспользования = "ЗадачиМнеВСрокБезОзнакомления" Тогда
				Возврат ЗадачиИтоги.ВСрок;
			ИначеЕсли КлючНазначенияИспользования = "ЗадачиМнеИстекаетБезОзнакомления" Тогда
				Возврат ЗадачиИтоги.Истекающих;
			ИначеЕсли КлючНазначенияИспользования = "ЗадачиМнеПоступилиОбновления" Тогда
				Возврат ЗадачиИтоги.ПоступилиОбновления;
			Иначе
				Возврат ЗадачиИтоги.ОжидающихВыполнения;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли СтрНачинаетсяС(КлючНазначения, "ЗадачиОтМеня") Тогда
		
		Если СтрНачинаетсяС(КлючНазначения, "ЗадачиОтМеняНеНачатые") Тогда
			Возврат ЗадачиИтоги.Новых;
		ИначеЕсли СтрНачинаетсяС(КлючНазначения, "ЗадачиОтМеняПросроченные") Тогда
			Возврат ЗадачиИтоги.Просроченных;
		ИначеЕсли СтрНачинаетсяС(КлючНазначения, "ЗадачиОтМеняЧерновики") Тогда
			Возврат ЗадачиИтоги.Черновиков;
		Иначе
			Если ДоступенПоказВыполненных И ПоказыватьВыполненные Тогда
				Возврат ЗадачиИтоги.Всего;
			Иначе
				Возврат ЗадачиИтоги.ОжидающихВыполнения;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли СтрНачинаетсяС(КлючНазначения, "ЗадачиПодчиненных") Тогда
		
		Если СтрНачинаетсяС(КлючНазначения, "ЗадачиПодчиненныхНеНачатые") Тогда
			Возврат ЗадачиИтоги.Новых;
		ИначеЕсли СтрНачинаетсяС(КлючНазначения, "ЗадачиПодчиненныхПросроченные") Тогда
			Возврат ЗадачиИтоги.Просроченных;
		Иначе
			Если ДоступенПоказВыполненных И ПоказыватьВыполненные Тогда
				Возврат ЗадачиИтоги.Всего;
			Иначе
				Возврат ЗадачиИтоги.ОжидающихВыполнения;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли СтрНачинаетсяС(КлючНазначения, "ЗадачиПоПроектам") Тогда
		
		Если ДоступенПоказВыполненных И ПоказыватьВыполненные Тогда
			Возврат ЗадачиИтоги.Всего;
		Иначе
			Возврат ЗадачиИтоги.ОжидающихВыполнения;
		КонецЕсли;
		
	ИначеЕсли СтрНачинаетсяС(КлючНазначения, "ВсеЗадачиПоАвторам") Тогда
		
		Возврат 0;
		
	ИначеЕсли СтрНачинаетсяС(КлючНазначения, "ВсеЗадачиПоИсполнителям") Тогда
		
		Возврат 0;
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Недопустимый ключ назначения использования %1.'"),
			КлючНазначения);
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ОтображатьПустуюГруппировки(КлючНазначения)
	
	Если СтрНачинаетсяС(КлючНазначения, "ВсеЗадачиПоАвторам")
		Или СтрНачинаетсяС(КлючНазначения, "ВсеЗадачиПоИсполнителям") Тогда
		
		ОтображатьПустуюГруппировки = Истина;
		
	Иначе
		
		ОтображатьПустуюГруппировки = Ложь;
		
	КонецЕсли;
	
	Возврат ОтображатьПустуюГруппировки;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьГруппировкиПоВидуЗадачи(ДанныеГруппировок, КлючНазначения, Раздел,
		ПараметрыОтбораИтогов, ОсновнаяГруппировка = Неопределено)
	
	ЭтоОсновнаяГруппировка = Не ЗначениеЗаполнено(ОсновнаяГруппировка);
	
	ЗадачиИтогиПоВидамДействий =
		ЗадачиИтогиПоВидамДействий(ПараметрыОтбораИтогов, КлючНазначения);
		
	Для Каждого ЗадачиИтогиПоВиду Из ЗадачиИтогиПоВидамДействий Цикл
		
		ДанныеГруппировки = ДанныеГруппировки();
		
		УстанавливаемаяГруппировка = ГруппировкаПоВидуДействия(
			Раздел,
			ЗадачиИтогиПоВиду,
			КлючНазначения);
		
		Если ЭтоОсновнаяГруппировка Тогда
			ДанныеГруппировки.Группировка = УстанавливаемаяГруппировка;
			ДанныеГруппировки.Представление = Строка(ДанныеГруппировки.Группировка);
			ДанныеГруппировки.Родитель.Группировка = Раздел;
		Иначе
			ДанныеГруппировки.Группировка = ОсновнаяГруппировка;
			ДанныеГруппировки.ДополнительнаяГруппировка = УстанавливаемаяГруппировка;
			ДанныеГруппировки.Представление = Строка(ДанныеГруппировки.ДополнительнаяГруппировка);
			ДанныеГруппировки.Родитель.Группировка = ОсновнаяГруппировка;
		КонецЕсли;
		
		ДанныеГруппировки.Порядок = ДанныеГруппировки.Представление;
		ДанныеГруппировки.ИндексКартинки = -1;
		ДанныеГруппировки.ОтображатьПустую = ОтображатьПустуюГруппировки(КлючНазначения);
		
		ДанныеГруппировки.Количество =
			КоличествоГруппировки(ЗадачиИтогиПоВиду, КлючНазначения);
		
		ДанныеГруппировок.Добавить(ДанныеГруппировки);
		
		Если ЭтоОсновнаяГруппировка Тогда
			ЗаполнитьДополнительныеГруппировки(ДанныеГруппировок, КлючНазначения,
				Раздел, ПараметрыОтбораИтогов, ДанныеГруппировки.Группировка);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗадачиИтогиПоВидамДействий(ПараметрыОтбораИтогов, КлючНазначения)
	
	Если СтрНачинаетсяС(КлючНазначения, "ЗадачиМне") Тогда
		
		ЗадачиИтогиПоВидамДействий =
			РегистрыНакопления.КоличествоЗадачПоИсполнителям.ЗадачиРеестраИтогиПоИзмерениям(
				ПараметрыОтбораИтогов,
				"ВидДействия");
		
	ИначеЕсли СтрНачинаетсяС(КлючНазначения, "ЗадачиОтМеня") Тогда
		
		Если ПараметрыОтбораИтогов.Свойство("Исполнитель")
			И ПараметрыОтбораИтогов.Исполнитель <> Неопределено Тогда
			
			ЗадачиИтогиПоВидамДействий =
				РегистрыНакопления.КоличествоЗадачПоИсполнителям.ЗадачиРеестраИтогиПоИзмерениям(
					ПараметрыОтбораИтогов,
					"ВидДействия");
				
		Иначе
			
			ЗадачиИтогиПоВидамДействий =
				РегистрыНакопления.КоличествоЗадачПоАвторам.ЗадачиРеестраИтогиПоИзмерениям(
					ПараметрыОтбораИтогов,
					"ВидЗадачи");
			
		КонецЕсли;
		
	ИначеЕсли СтрНачинаетсяС(КлючНазначения, "ЗадачиПодчиненных") Тогда
		
		ЗадачиИтогиПоВидамДействий =
			РегистрыНакопления.КоличествоЗадачПоИсполнителям.ЗадачиРеестраИтогиПоИзмерениям(
				ПараметрыОтбораИтогов,
				"ВидДействия");
		
	ИначеЕсли СтрНачинаетсяС(КлючНазначения, "ЗадачиПоПроектамПоАвторам") Тогда
		
		ЗадачиИтогиПоВидамДействий =
			РегистрыНакопления.КоличествоЗадачПоАвторам.ЗадачиРеестраИтогиПоИзмерениям(
				ПараметрыОтбораИтогов,
				"ВидЗадачи");
		
	ИначеЕсли СтрНачинаетсяС(КлючНазначения, "ЗадачиПоПроектамПоИсполнителям") Тогда
		
		ЗадачиИтогиПоВидамДействий =
			РегистрыНакопления.КоличествоЗадачПоИсполнителям.ЗадачиРеестраИтогиПоИзмерениям(
				ПараметрыОтбораИтогов,
				"ВидДействия");
		
	ИначеЕсли СтрНачинаетсяС(КлючНазначения, "ВсеЗадачиПоАвторам") Тогда
		
		ЗадачиИтогиПоВидамДействий =
			РегистрыНакопления.КоличествоЗадачПоАвторам.ЗадачиРеестраИтогиПоИзмерениям(
				ПараметрыОтбораИтогов,
				"ВидЗадачи");
		
	ИначеЕсли СтрНачинаетсяС(КлючНазначения, "ВсеЗадачиПоИсполнителям") Тогда
		
		ЗадачиИтогиПоВидамДействий =
			РегистрыНакопления.КоличествоЗадачПоИсполнителям.ЗадачиРеестраИтогиПоИзмерениям(
				ПараметрыОтбораИтогов,
				"ВидДействия");
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Недопустимый ключ назначения использования %1.'"),
			КлючНазначения);
		
	КонецЕсли;
	
	Возврат ЗадачиИтогиПоВидамДействий;
	
КонецФункции

&НаСервере
Функция ГруппировкаПоВидуДействия(Родитель, ЗадачиИтогиПоВиду, КлючНазначения)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЗадачиИтогиПоВиду, "ВидДействия") Тогда
		
		Возврат Справочники.ГруппировкиЗадач.ГруппировкаПоВидуДействия(
			Родитель,
			ЗадачиИтогиПоВиду.ВидДействия);
		
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЗадачиИтогиПоВиду, "ВидЗадачи") Тогда
		
		Возврат Справочники.ГруппировкиЗадач.ГруппировкаПоВидуЗадачи(
			Родитель,
			ЗадачиИтогиПоВиду.ВидЗадачи);
		
	Иначе
		
		ВызватьИсключение НСтр("ru = 'Неизвестная группировка по виду действия.'");
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьГруппировкиПоИсполнителю(ДанныеГруппировок, КлючНазначения, Раздел,
		ПараметрыОтбораИтогов, ОсновнаяГруппировка = Неопределено)
	
	ЭтоОсновнаяГруппировка = Не ЗначениеЗаполнено(ОсновнаяГруппировка);
	
	ЗадачиИтогиПоИсполнителям =
		РегистрыНакопления.КоличествоЗадачПоИсполнителям.ЗадачиРеестраИтогиПоИзмерениям(
			ПараметрыОтбораИтогов,
			"Исполнитель");
	
	Для Каждого ЗадачиИтогиПоИсполнителю Из ЗадачиИтогиПоИсполнителям Цикл
		
		ДанныеГруппировки = ДанныеГруппировки();
		
		УстанавливаемаяГруппировка = Справочники.ГруппировкиЗадач.ГруппировкаПоИсполнителю(
			Раздел,
			ЗадачиИтогиПоИсполнителю.Исполнитель,
			Истина);
		
		Если ЭтоОсновнаяГруппировка Тогда
			ДанныеГруппировки.Группировка = УстанавливаемаяГруппировка;
			ДанныеГруппировки.Представление = Строка(ДанныеГруппировки.Группировка);
			ДанныеГруппировки.Родитель.Группировка = Раздел;
		Иначе
			ДанныеГруппировки.Группировка = ОсновнаяГруппировка;
			ДанныеГруппировки.ДополнительнаяГруппировка = УстанавливаемаяГруппировка;
			ДанныеГруппировки.Представление = Строка(ДанныеГруппировки.ДополнительнаяГруппировка);
			ДанныеГруппировки.Родитель.Группировка = ОсновнаяГруппировка;
		КонецЕсли;
		
		ПрефиксГруппировки = "";
		Если ТипЗнч(ЗадачиИтогиПоИсполнителю.Исполнитель) = Тип("СправочникСсылка.Сотрудники")
			Или ТипЗнч(ЗадачиИтогиПоИсполнителю.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
			
			ПрефиксГруппировки = "1";
		ИначеЕсли ТипЗнч(ЗадачиИтогиПоИсполнителю.Исполнитель) = Тип("СправочникСсылка.ПолныеРоли") Тогда
			ПрефиксГруппировки = "2";
		КонецЕсли;
		
		ДанныеГруппировки.Порядок = СтрШаблон("%1_%2", ПрефиксГруппировки, ДанныеГруппировки.Представление);
		ДанныеГруппировки.ИндексКартинки = -1;
		ДанныеГруппировки.ОтображатьПустую = ОтображатьПустуюГруппировки(КлючНазначения);
		
		ДанныеГруппировки.Количество = КоличествоГруппировки(ЗадачиИтогиПоИсполнителю, КлючНазначения);
		
		ДанныеГруппировок.Добавить(ДанныеГруппировки);
		
		Если ЭтоОсновнаяГруппировка Тогда
			ЗаполнитьДополнительныеГруппировки(ДанныеГруппировок, КлючНазначения,
				Раздел, ПараметрыОтбораИтогов, ДанныеГруппировки.Группировка);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьГруппировкиПоПриложениюБезГрупп(ДанныеГруппировок, КлючНазначения, Раздел,
		ПараметрыОтбораИтогов, ОсновнаяГруппировка = Неопределено)
	
	ЭтоОсновнаяГруппировка = Не ЗначениеЗаполнено(ОсновнаяГруппировка);
	
	ЗадачиИтогиПоПриложениям =
		ЗадачиИтогиПоПриложениям(ПараметрыОтбораИтогов, КлючНазначения);
	
	ИменаКолонокГруппировкиИтогов = ИменаКолонокГруппировкиИтогов(КлючНазначения);
	
	ЗадачиИтогиПоТипамПриложений = ЗадачиИтогиПоПриложениям.Скопировать();
	ЗадачиИтогиПоТипамПриложений.Свернуть("ТипПриложения", ИменаКолонокГруппировкиИтогов);
	
	Для Каждого ЗадачиИтогиПоТипуПриложения Из ЗадачиИтогиПоТипамПриложений Цикл
		
		ДанныеГруппировки = ДанныеГруппировки();
		
		УстанавливаемаяГруппировка = Справочники.ГруппировкиЗадач.ГруппировкаПоТипуПриложения(
			Раздел,
			ЗадачиИтогиПоТипуПриложения.ТипПриложения);
		
		Если ЭтоОсновнаяГруппировка Тогда
			ДанныеГруппировки.Группировка = УстанавливаемаяГруппировка;
			ДанныеГруппировки.Представление = Строка(ДанныеГруппировки.Группировка);
			ДанныеГруппировки.Родитель.Группировка = Раздел;
		Иначе
			ДанныеГруппировки.Группировка = ОсновнаяГруппировка;
			ДанныеГруппировки.ДополнительнаяГруппировка = УстанавливаемаяГруппировка;
			ДанныеГруппировки.Представление = Строка(ДанныеГруппировки.ДополнительнаяГруппировка);
			ДанныеГруппировки.Родитель.Группировка = ОсновнаяГруппировка;
		КонецЕсли;
		
		ДанныеГруппировки.Порядок = ДанныеГруппировки.Представление;
		ДанныеГруппировки.ИндексКартинки = -1;
		ДанныеГруппировки.ОтображатьПустую = ОтображатьПустуюГруппировки(КлючНазначения);
		
		ДанныеГруппировки.Количество =
			КоличествоГруппировки(ЗадачиИтогиПоТипуПриложения, КлючНазначения);
		
		ДанныеГруппировок.Добавить(ДанныеГруппировки);
		
		Если ЭтоОсновнаяГруппировка Тогда
			ГруппировкаПоТипуПриложеня = ДанныеГруппировки.Группировка;
		Иначе
			ГруппировкаПоТипуПриложеня = ДанныеГруппировки.ДополнительнаяГруппировка;
		КонецЕсли;
		
		КоличествоДочернихВидов = 0;
		
		ЗадачиИтогиПоВидамПриложений =
			ЗадачиИтогиПоПриложениям.НайтиСтроки(
				Новый Структура(
					"ТипПриложения",
					ЗадачиИтогиПоТипуПриложения.ТипПриложения));
		Для Каждого ЗадачиИтогиПоВидуПриложения Из ЗадачиИтогиПоВидамПриложений Цикл
			
			Если Не ЗначениеЗаполнено(ЗадачиИтогиПоВидуПриложения.ВидПриложения) Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеГруппировки = ДанныеГруппировки();
			
			УстанавливаемаяГруппировка = Справочники.ГруппировкиЗадач.ГруппировкаПоВидуПриложения(
				Раздел,
				ЗадачиИтогиПоВидуПриложения.ВидПриложения);
			
			Если ЭтоОсновнаяГруппировка Тогда
				ДанныеГруппировки.Группировка = УстанавливаемаяГруппировка;
				ДанныеГруппировки.Представление = Строка(ДанныеГруппировки.Группировка);
				ДанныеГруппировки.Родитель.Группировка = ГруппировкаПоТипуПриложеня;
			Иначе
				ДанныеГруппировки.Группировка = ОсновнаяГруппировка;
				ДанныеГруппировки.ДополнительнаяГруппировка = УстанавливаемаяГруппировка;
				ДанныеГруппировки.Представление = Строка(ДанныеГруппировки.ДополнительнаяГруппировка);
				ДанныеГруппировки.Родитель.Группировка = ОсновнаяГруппировка;
				ДанныеГруппировки.Родитель.ДополнительнаяГруппировка = ГруппировкаПоТипуПриложеня
			КонецЕсли;
			
			ДанныеГруппировки.Порядок = ДанныеГруппировки.Представление;
			ДанныеГруппировки.ИндексКартинки = -1;
			ДанныеГруппировки.ОтображатьПустую = ОтображатьПустуюГруппировки(КлючНазначения);
			
			ДанныеГруппировки.Количество =
				КоличествоГруппировки(ЗадачиИтогиПоВидуПриложения, КлючНазначения);
			
			ДанныеГруппировок.Добавить(ДанныеГруппировки);
			
			Если ЭтоОсновнаяГруппировка Тогда
				ЗаполнитьДополнительныеГруппировки(ДанныеГруппировок, КлючНазначения,
					Раздел, ПараметрыОтбораИтогов, ДанныеГруппировки.Группировка);
			КонецЕсли;
			
			КоличествоДочернихВидов = КоличествоДочернихВидов + 1;
			
		КонецЦикла;
		
		Если КоличествоДочернихВидов = 0 И ЭтоОсновнаяГруппировка Тогда
			ЗаполнитьДополнительныеГруппировки(ДанныеГруппировок, КлючНазначения,
				Раздел, ПараметрыОтбораИтогов, ГруппировкаПоТипуПриложеня);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗадачиИтогиПоПриложениям(ПараметрыОтбораИтогов, КлючНазначения)
	
	Если СтрНачинаетсяС(КлючНазначения, "ЗадачиМне") Тогда
		
		ЗадачиИтогиПоПриложениям =
			РегистрыНакопления.КоличествоЗадачПоИсполнителям.ЗадачиРеестраИтогиПоИзмерениям(
				ПараметрыОтбораИтогов,
				"ТипПриложения, ВидПриложения");
		
	ИначеЕсли СтрНачинаетсяС(КлючНазначения, "ЗадачиОтМеня") Тогда
		
		Если ПараметрыОтбораИтогов.Свойство("Исполнитель")
			И ПараметрыОтбораИтогов.Исполнитель <> Неопределено Тогда
			
			ЗадачиИтогиПоПриложениям =
				РегистрыНакопления.КоличествоЗадачПоИсполнителям.ЗадачиРеестраИтогиПоИзмерениям(
					ПараметрыОтбораИтогов,
					"ТипПриложения, ВидПриложения");
			
		Иначе
			
			ЗадачиИтогиПоПриложениям =
				РегистрыНакопления.КоличествоЗадачПоАвторам.ЗадачиРеестраИтогиПоИзмерениям(
					ПараметрыОтбораИтогов,
					"ТипПриложения, ВидПриложения");
			
		КонецЕсли;
		
	ИначеЕсли СтрНачинаетсяС(КлючНазначения, "ЗадачиПодчиненных") Тогда
		
		ЗадачиИтогиПоПриложениям =
			РегистрыНакопления.КоличествоЗадачПоИсполнителям.ЗадачиРеестраИтогиПоИзмерениям(
				ПараметрыОтбораИтогов,
				"ТипПриложения, ВидПриложения");
		
	ИначеЕсли СтрНачинаетсяС(КлючНазначения, "ЗадачиПоПроектамПоАвторам") Тогда
		
		ЗадачиИтогиПоПриложениям =
			РегистрыНакопления.КоличествоЗадачПоАвторам.ЗадачиРеестраИтогиПоИзмерениям(
				ПараметрыОтбораИтогов,
				"ТипПриложения, ВидПриложения");
		
	ИначеЕсли СтрНачинаетсяС(КлючНазначения, "ЗадачиПоПроектамПоИсполнителям") Тогда
		
		ЗадачиИтогиПоПриложениям =
			РегистрыНакопления.КоличествоЗадачПоИсполнителям.ЗадачиРеестраИтогиПоИзмерениям(
				ПараметрыОтбораИтогов,
				"ТипПриложения, ВидПриложения");
		
	ИначеЕсли СтрНачинаетсяС(КлючНазначения, "ВсеЗадачиПоАвторам") Тогда
		
		ЗадачиИтогиПоПриложениям =
			РегистрыНакопления.КоличествоЗадачПоАвторам.ЗадачиРеестраИтогиПоИзмерениям(
				ПараметрыОтбораИтогов,
				"ТипПриложения, ВидПриложения");
		
	ИначеЕсли СтрНачинаетсяС(КлючНазначения, "ВсеЗадачиПоИсполнителям") Тогда
		
		ЗадачиИтогиПоПриложениям =
			РегистрыНакопления.КоличествоЗадачПоИсполнителям.ЗадачиРеестраИтогиПоИзмерениям(
				ПараметрыОтбораИтогов,
				"ТипПриложения, ВидПриложения");
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Недопустимый ключ назначения использования %1.'"),
			КлючНазначения);
		
	КонецЕсли;
	
	Возврат ЗадачиИтогиПоПриложениям;
	
КонецФункции

&НаСервере
Функция ИменаКолонокГруппировкиИтогов(КлючНазначения)
	
	Если СтрНачинаетсяС(КлючНазначения, "ЗадачиМне") Тогда
		ИменаКолонокГруппировкиИтогов =
			"Новых, Просроченных, Всего, ОжидающихВыполнения, ПоступилиОбновления, ВСрок, Истекающих";
	Иначе
		ИменаКолонокГруппировкиИтогов = "Новых, Просроченных, Всего, ОжидающихВыполнения";
	КонецЕсли;
	
	Возврат ИменаКолонокГруппировкиИтогов;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьГруппировкиПоПриложениюПоГруппам(ДанныеГруппировок, КлючНазначения, Раздел,
		ПараметрыОтбораИтогов, ОсновнаяГруппировка = Неопределено)
	
	ЭтоОсновнаяГруппировка = Не ЗначениеЗаполнено(ОсновнаяГруппировка);
	
	ЗадачиИтогиПоПриложениям =
		ЗадачиИтогиПоПриложениям(ПараметрыОтбораИтогов, КлючНазначения);
	
	ИменаКолонокГруппировкиИтогов = ИменаКолонокГруппировкиИтогов(КлючНазначения);
	
	ЗадачиИтогиПоТипамПриложений = ЗадачиИтогиПоПриложениям.Скопировать();
	ЗадачиИтогиПоТипамПриложений.Свернуть("ТипПриложения", ИменаКолонокГруппировкиИтогов);
	
	Для Каждого ЗадачиИтогиПоТипуПриложения Из ЗадачиИтогиПоТипамПриложений Цикл
		
		ДанныеГруппировки = ДанныеГруппировки();
		
		УстанавливаемаяГруппировка = Справочники.ГруппировкиЗадач.ГруппировкаПоТипуПриложения(
			Раздел,
			ЗадачиИтогиПоТипуПриложения.ТипПриложения);
		
		Если ЭтоОсновнаяГруппировка Тогда
			ДанныеГруппировки.Группировка = УстанавливаемаяГруппировка;
			ДанныеГруппировки.Представление = Строка(ДанныеГруппировки.Группировка);
			ДанныеГруппировки.Родитель.Группировка = Раздел;
		Иначе
			ДанныеГруппировки.Группировка = ОсновнаяГруппировка;
			ДанныеГруппировки.ДополнительнаяГруппировка = УстанавливаемаяГруппировка;
			ДанныеГруппировки.Представление = Строка(ДанныеГруппировки.ДополнительнаяГруппировка);
			ДанныеГруппировки.Родитель.Группировка = ОсновнаяГруппировка;
		КонецЕсли;
		
		ДанныеГруппировки.Порядок = ДанныеГруппировки.Представление;
		ДанныеГруппировки.ИндексКартинки = -1;
		ДанныеГруппировки.ОтображатьПустую = ОтображатьПустуюГруппировки(КлючНазначения);
		
		ДанныеГруппировки.Количество =
			КоличествоГруппировки(ЗадачиИтогиПоТипуПриложения, КлючНазначения);
		
		ДанныеГруппировок.Добавить(ДанныеГруппировки);
		
		Если ЭтоОсновнаяГруппировка Тогда
			ГруппировкаПоТипуПриложеня = ДанныеГруппировки.Группировка;
		Иначе
			ГруппировкаПоТипуПриложеня = ДанныеГруппировки.ДополнительнаяГруппировка;
		КонецЕсли;
		
		ЗадачиИтогиПоВидамПриложений =
			ЗадачиИтогиПоПриложениям.НайтиСтроки(
				Новый Структура(
					"ТипПриложения",
					ЗадачиИтогиПоТипуПриложения.ТипПриложения));
		
		ВидыПриложенийТекущегоУровня = Новый Массив;
		Для Каждого ЗадачиИтогиПоВидуПриложения Из ЗадачиИтогиПоВидамПриложений Цикл
			
			Если Не ЗначениеЗаполнено(ЗадачиИтогиПоВидуПриложения.ВидПриложения) Тогда
				Продолжить;
			КонецЕсли;
			
			ВидыПриложенийТекущегоУровня.Добавить(ЗадачиИтогиПоВидуПриложения.ВидПриложения);
			
		КонецЦикла;
		
		Если ВидыПриложенийТекущегоУровня.Количество() = 0 И ЭтоОсновнаяГруппировка Тогда
			ЗаполнитьДополнительныеГруппировки(ДанныеГруппировок, КлючНазначения,
				Раздел, ПараметрыОтбораИтогов, ДанныеГруппировки.Группировка);
		КонецЕсли;
		
		Если ВидыПриложенийТекущегоУровня.Количество() > 0
			И Не ВидыПриложенийТекущегоУровня[0].Метаданные().Иерархический Тогда
			ВидыПриложенийТекущегоУровня.Очистить();
		КонецЕсли;
		
		ОбработанныеВидыПриложений = Новый Массив;
		ИерархияВидовПриложений = Новый Соответствие;
		Пока ВидыПриложенийТекущегоУровня.Количество() > 0 Цикл
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				ОбработанныеВидыПриложений,
				ВидыПриложенийТекущегоУровня);
			
			РеквизитыВидовПриложений = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
				ВидыПриложенийТекущегоУровня,
				"Родитель, ПометкаУдаления");
				
				ВидыПриложенийТекущегоУровня.Очистить();
			
			Для Каждого КлючИЗначение Из РеквизитыВидовПриложений Цикл
				
				ВидПриложения = КлючИЗначение.Ключ;
				РеквизитыВидаПриложения = КлючИЗначение.Значение;
				
				Если РеквизитыВидаПриложения.ПометкаУдаления
					Или Не ЗначениеЗаполнено(РеквизитыВидаПриложения.Родитель) Тогда
					Продолжить;
				КонецЕсли;
				
				ИерархияВидовПриложений.Вставить(ВидПриложения, РеквизитыВидаПриложения.Родитель);
				
				Если ОбработанныеВидыПриложений.Найти(РеквизитыВидаПриложения.Родитель) = Неопределено
					Или ВидыПриложенийТекущегоУровня.Найти(РеквизитыВидаПриложения.Родитель) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ВидыПриложенийТекущегоУровня.Добавить(РеквизитыВидаПриложения.Родитель);
				
			КонецЦикла;
			
		КонецЦикла;
		
		ДанныеГруппировокИерархии = Новый Соответствие;
		Для Каждого ЗадачиИтогиПоВидуПриложения Из ЗадачиИтогиПоВидамПриложений Цикл
			
			Если Не ЗначениеЗаполнено(ЗадачиИтогиПоВидуПриложения.ВидПриложения) Тогда
				Продолжить;
			КонецЕсли;
			
			КоличествоЗадачВида = КоличествоГруппировки(ЗадачиИтогиПоВидуПриложения, КлючНазначения);
			
			ВсеРодителиСверхуВниз = Новый Массив;
			ТекущийРодитель = ИерархияВидовПриложений[ЗадачиИтогиПоВидуПриложения.ВидПриложения];
			Пока ЗначениеЗаполнено(ТекущийРодитель) Цикл
				
				ВсеРодителиСверхуВниз.Вставить(0, ТекущийРодитель);
				ТекущийРодитель = ИерархияВидовПриложений[ТекущийРодитель];
				
			КонецЦикла;
			
			Для Каждого ТекущийРодитель Из ВсеРодителиСверхуВниз Цикл
				
				ДанныеГруппировкиРодителя = ДанныеГруппировокИерархии[ТекущийРодитель];
				Если ДанныеГруппировкиРодителя = Неопределено Тогда
					
					ДанныеГруппировкиРодителя = ДанныеГруппировки();
					
					УстанавливаемаяГруппировка = Справочники.ГруппировкиЗадач.ГруппировкаПоВидуПриложения(
						Раздел,
						ТекущийРодитель);
					
					Если ЭтоОсновнаяГруппировка Тогда
						ДанныеГруппировкиРодителя.Группировка = УстанавливаемаяГруппировка;
						ДанныеГруппировкиРодителя.Представление = Строка(ДанныеГруппировкиРодителя.Группировка);
					Иначе
						ДанныеГруппировкиРодителя.Группировка = ОсновнаяГруппировка;
						ДанныеГруппировкиРодителя.ДополнительнаяГруппировка = УстанавливаемаяГруппировка;
						ДанныеГруппировкиРодителя.Представление = Строка(ДанныеГруппировкиРодителя.ДополнительнаяГруппировка);
						ДанныеГруппировкиРодителя.Родитель.Группировка = ОсновнаяГруппировка;
					КонецЕсли;
					
					ДанныеГруппировкиРодителя.Порядок = ДанныеГруппировкиРодителя.Представление;
					ДанныеГруппировкиРодителя.ИндексКартинки = -1;
					ДанныеГруппировкиРодителя.ОтображатьПустую = ОтображатьПустуюГруппировки(КлючНазначения);
					ДанныеГруппировкиРодителя.Количество = 0;
					
					СледующийРодитель = ИерархияВидовПриложений[ТекущийРодитель];
					Если ЭтоОсновнаяГруппировка Тогда
						Если ЗначениеЗаполнено(СледующийРодитель) Тогда
							ДанныеГруппировкиРодителя.Родитель.Группировка =
								Справочники.ГруппировкиЗадач.ГруппировкаПоВидуПриложения(
									Раздел,
									СледующийРодитель);
						Иначе
							ДанныеГруппировкиРодителя.Родитель.Группировка = ГруппировкаПоТипуПриложеня;
						КонецЕсли;
					Иначе
						Если ЗначениеЗаполнено(СледующийРодитель) Тогда
							ДанныеГруппировкиРодителя.Родитель.ДополнительнаяГруппировка =
								Справочники.ГруппировкиЗадач.ГруппировкаПоВидуПриложения(
									Раздел,
									СледующийРодитель);
						Иначе
							ДанныеГруппировкиРодителя.Родитель.ДополнительнаяГруппировка = ГруппировкаПоТипуПриложеня;
						КонецЕсли;
					КонецЕсли;
					
					ДанныеГруппировок.Добавить(ДанныеГруппировкиРодителя);
					
					ДанныеГруппировокИерархии.Вставить(ТекущийРодитель, ДанныеГруппировкиРодителя);
					
				КонецЕсли;
				
				ДанныеГруппировкиРодителя.Количество = ДанныеГруппировкиРодителя.Количество + КоличествоЗадачВида;
				
				ТекущийРодитель = ИерархияВидовПриложений[ТекущийРодитель];
				
			КонецЦикла;
			
			ДанныеГруппировки = ДанныеГруппировки();
			
			УстанавливаемаяГруппировка = Справочники.ГруппировкиЗадач.ГруппировкаПоВидуПриложения(
				Раздел,
				ЗадачиИтогиПоВидуПриложения.ВидПриложения);
			
			Если ЭтоОсновнаяГруппировка Тогда
				ДанныеГруппировки.Группировка = УстанавливаемаяГруппировка;
				ДанныеГруппировки.Представление = Строка(ДанныеГруппировки.Группировка);
			Иначе
				ДанныеГруппировки.Группировка = ОсновнаяГруппировка;
				ДанныеГруппировки.ДополнительнаяГруппировка = УстанавливаемаяГруппировка;
				ДанныеГруппировки.Представление = Строка(ДанныеГруппировки.ДополнительнаяГруппировка);
				ДанныеГруппировки.Родитель.Группировка = ОсновнаяГруппировка;
			КонецЕсли;
			
			ДанныеГруппировки.Порядок = ДанныеГруппировки.Представление;
			ДанныеГруппировки.ИндексКартинки = -1;
			ДанныеГруппировки.ОтображатьПустую = ОтображатьПустуюГруппировки(КлючНазначения);
			ДанныеГруппировки.Количество = КоличествоЗадачВида;
			
			СледующийРодитель = ИерархияВидовПриложений[ЗадачиИтогиПоВидуПриложения.ВидПриложения];
			Если ЭтоОсновнаяГруппировка Тогда
				Если ЗначениеЗаполнено(СледующийРодитель) Тогда
					ДанныеГруппировки.Родитель.Группировка =
						Справочники.ГруппировкиЗадач.ГруппировкаПоВидуПриложения(
							Раздел,
							СледующийРодитель);
				Иначе
					ДанныеГруппировки.Родитель.Группировка = ГруппировкаПоТипуПриложеня;
				КонецЕсли;
			Иначе
				Если ЗначениеЗаполнено(СледующийРодитель) Тогда
					ДанныеГруппировки.Родитель.ДополнительнаяГруппировка =
						Справочники.ГруппировкиЗадач.ГруппировкаПоВидуПриложения(
							Раздел,
							СледующийРодитель);
				Иначе
					ДанныеГруппировки.Родитель.ДополнительнаяГруппировка = ГруппировкаПоТипуПриложеня;
				КонецЕсли;
			КонецЕсли;
			
			ДанныеГруппировок.Добавить(ДанныеГруппировки);
			
			Если ЭтоОсновнаяГруппировка Тогда
				ЗаполнитьДополнительныеГруппировки(ДанныеГруппировок, КлючНазначения,
					Раздел, ПараметрыОтбораИтогов, ДанныеГруппировки.Группировка);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьГруппировкиПоПроекту(ДанныеГруппировок, КлючНазначения, Раздел,
		ПараметрыОтбораИтогов, ОсновнаяГруппировка = Неопределено)
	
	ЭтоОсновнаяГруппировка = Не ЗначениеЗаполнено(ОсновнаяГруппировка);
	
	ЗадачиИтогиПоПроектам =
		ЗадачиИтогиПоПроектам(ПараметрыОтбораИтогов, КлючНазначения);
	
	Для Каждого ЗадачиИтогиПоПроекту Из ЗадачиИтогиПоПроектам Цикл
		
		ДанныеГруппировки = ДанныеГруппировки();
		
		УстанавливаемаяГруппировка = Справочники.ГруппировкиЗадач.ГруппировкаПоПроекту(
			Раздел,
			ЗадачиИтогиПоПроекту.Проект);
		
		Если ЭтоОсновнаяГруппировка Тогда
			ДанныеГруппировки.Группировка = УстанавливаемаяГруппировка;
			ДанныеГруппировки.Представление = Строка(ДанныеГруппировки.Группировка);
			ДанныеГруппировки.Родитель.Группировка = Раздел;
		Иначе
			ДанныеГруппировки.Группировка = ОсновнаяГруппировка;
			ДанныеГруппировки.ДополнительнаяГруппировка = УстанавливаемаяГруппировка;
			ДанныеГруппировки.Представление = Строка(ДанныеГруппировки.ДополнительнаяГруппировка);
			ДанныеГруппировки.Родитель.Группировка = ОсновнаяГруппировка;
		КонецЕсли;
		
		ДанныеГруппировки.Порядок = ДанныеГруппировки.Представление;
		ДанныеГруппировки.ИндексКартинки = -1;
		ДанныеГруппировки.ОтображатьПустую = ОтображатьПустуюГруппировки(КлючНазначения);
		
		ДанныеГруппировки.Количество = КоличествоГруппировки(ЗадачиИтогиПоПроекту, КлючНазначения);
		
		ДанныеГруппировок.Добавить(ДанныеГруппировки);
		
		Если ЭтоОсновнаяГруппировка Тогда
			ЗаполнитьДополнительныеГруппировки(ДанныеГруппировок, КлючНазначения,
				Раздел, ПараметрыОтбораИтогов, ДанныеГруппировки.Группировка);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗадачиИтогиПоПроектам(ПараметрыОтбораИтогов, КлючНазначения)
	
	Если СтрНачинаетсяС(КлючНазначения, "ЗадачиМне") Тогда
		
		ЗадачиИтогиПоПроектам =
			РегистрыНакопления.КоличествоЗадачПоИсполнителям.ЗадачиРеестраИтогиПоИзмерениям(
				ПараметрыОтбораИтогов,
				"Проект");
		
	ИначеЕсли СтрНачинаетсяС(КлючНазначения, "ЗадачиОтМеня") Тогда
		
		Если ПараметрыОтбораИтогов.Свойство("Исполнитель")
			И ПараметрыОтбораИтогов.Исполнитель <> Неопределено Тогда
			
			ЗадачиИтогиПоПроектам =
				РегистрыНакопления.КоличествоЗадачПоИсполнителям.ЗадачиРеестраИтогиПоИзмерениям(
					ПараметрыОтбораИтогов,
					"Проект");
			
		Иначе
			
			ЗадачиИтогиПоПроектам =
				РегистрыНакопления.КоличествоЗадачПоАвторам.ЗадачиРеестраИтогиПоИзмерениям(
					ПараметрыОтбораИтогов,
					"Проект");
			
		КонецЕсли;
		
	ИначеЕсли СтрНачинаетсяС(КлючНазначения, "ЗадачиПодчиненных") Тогда
		
		ЗадачиИтогиПоПроектам =
			РегистрыНакопления.КоличествоЗадачПоИсполнителям.ЗадачиРеестраИтогиПоИзмерениям(
				ПараметрыОтбораИтогов,
				"Проект");
		
	ИначеЕсли СтрНачинаетсяС(КлючНазначения, "ЗадачиПоПроектамПоАвторам") Тогда
		
		ЗадачиИтогиПоПроектам =
			РегистрыНакопления.КоличествоЗадачПоАвторам.ЗадачиРеестраИтогиПоИзмерениям(
				ПараметрыОтбораИтогов,
				"Проект");
		
	ИначеЕсли СтрНачинаетсяС(КлючНазначения, "ЗадачиПоПроектамПоИсполнителям") Тогда
		
		ЗадачиИтогиПоПроектам =
			РегистрыНакопления.КоличествоЗадачПоИсполнителям.ЗадачиРеестраИтогиПоИзмерениям(
				ПараметрыОтбораИтогов,
				"Проект");
		
	ИначеЕсли СтрНачинаетсяС(КлючНазначения, "ВсеЗадачиПоАвторам") Тогда
		
		ЗадачиИтогиПоПроектам =
			РегистрыНакопления.КоличествоЗадачПоАвторам.ЗадачиРеестраИтогиПоИзмерениям(
				ПараметрыОтбораИтогов,
				"Проект");
		
	ИначеЕсли СтрНачинаетсяС(КлючНазначения, "ВсеЗадачиПоИсполнителям") Тогда
		
		ЗадачиИтогиПоПроектам =
			РегистрыНакопления.КоличествоЗадачПоИсполнителям.ЗадачиРеестраИтогиПоИзмерениям(
				ПараметрыОтбораИтогов,
				"Проект");
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Недопустимый ключ назначения использования %1.'"),
			КлючНазначения);
		
	КонецЕсли;
	
	Возврат ЗадачиИтогиПоПроектам;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьГруппировкиПоФлагу(ДанныеГруппировок, КлючНазначения, Раздел,
		ПараметрыОтбораИтогов, ОсновнаяГруппировка = Неопределено)
	
	ЭтоОсновнаяГруппировка = Не ЗначениеЗаполнено(ОсновнаяГруппировка);
	
	ЗадачиИтогиПоФлагам =
		ЗадачиИтогиПоФлагам(ПараметрыОтбораИтогов, КлючНазначения);
	
	Для Каждого ЗадачиИтогиПоФлагу Из ЗадачиИтогиПоФлагам Цикл
		
		ДанныеГруппировки = ДанныеГруппировки();
		
		УстанавливаемаяГруппировка = Справочники.ГруппировкиЗадач.ГруппировкаПоФлагу(
			Раздел,
			ЗадачиИтогиПоФлагу.Флаг);
		
		Если ЭтоОсновнаяГруппировка Тогда
			ДанныеГруппировки.Группировка = УстанавливаемаяГруппировка;
			ДанныеГруппировки.Представление = Строка(ДанныеГруппировки.Группировка);
			ДанныеГруппировки.Родитель.Группировка = Раздел;
		Иначе
			ДанныеГруппировки.Группировка = ОсновнаяГруппировка;
			ДанныеГруппировки.ДополнительнаяГруппировка = УстанавливаемаяГруппировка;
			ДанныеГруппировки.Представление = Строка(ДанныеГруппировки.ДополнительнаяГруппировка);
			ДанныеГруппировки.Родитель.Группировка = ОсновнаяГруппировка;
		КонецЕсли;
		
		ДанныеГруппировки.Порядок = ДанныеГруппировки.Представление;
		ДанныеГруппировки.ИндексКартинки =
			Перечисления.ФлагиОбъектов.ИндексКартинкиГруппировки(ЗадачиИтогиПоФлагу.Флаг);
		ДанныеГруппировки.ОтображатьПустую = ОтображатьПустуюГруппировки(КлючНазначения);
		
		ДанныеГруппировки.Количество = КоличествоГруппировки(ЗадачиИтогиПоФлагу, КлючНазначения);
		
		ДанныеГруппировок.Добавить(ДанныеГруппировки);
		
		Если ЭтоОсновнаяГруппировка Тогда
			ЗаполнитьДополнительныеГруппировки(ДанныеГруппировок, КлючНазначения,
				Раздел, ПараметрыОтбораИтогов, ДанныеГруппировки.Группировка);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЗадачиИтогиПоФлагам(ПараметрыОтбораИтогов, КлючНазначения)
	
	Если СтрНачинаетсяС(КлючНазначения, "ЗадачиМне") Тогда
		
		ЗадачиИтогиПоФлагам =
			РегистрыНакопления.КоличествоЗадачПоИсполнителям.ЗадачиРеестраИтогиПоИзмерениям(
				ПараметрыОтбораИтогов,
				"Флаг");
		
	ИначеЕсли СтрНачинаетсяС(КлючНазначения, "ЗадачиОтМеня") Тогда
		
		Если ПараметрыОтбораИтогов.Свойство("Исполнитель")
			И ПараметрыОтбораИтогов.Исполнитель <> Неопределено Тогда
			
			ЗадачиИтогиПоФлагам =
				РегистрыНакопления.КоличествоЗадачПоИсполнителям.ЗадачиРеестраИтогиПоИзмерениям(
					ПараметрыОтбораИтогов,
					"Флаг");
			
		Иначе
			
			ЗадачиИтогиПоФлагам =
				РегистрыНакопления.КоличествоЗадачПоАвторам.ЗадачиРеестраИтогиПоИзмерениям(
					ПараметрыОтбораИтогов,
					"Флаг");
			
		КонецЕсли;
		
	ИначеЕсли СтрНачинаетсяС(КлючНазначения, "ЗадачиПодчиненных") Тогда
		
		ЗадачиИтогиПоФлагам =
			РегистрыНакопления.КоличествоЗадачПоИсполнителям.ЗадачиРеестраИтогиПоИзмерениям(
				ПараметрыОтбораИтогов,
				"Флаг");
		
	ИначеЕсли СтрНачинаетсяС(КлючНазначения, "ЗадачиПоПроектамПоАвторам") Тогда
		
		ЗадачиИтогиПоФлагам =
			РегистрыНакопления.КоличествоЗадачПоАвторам.ЗадачиРеестраИтогиПоИзмерениям(
				ПараметрыОтбораИтогов,
				"Флаг");
		
	ИначеЕсли СтрНачинаетсяС(КлючНазначения, "ЗадачиПоПроектамПоИсполнителям") Тогда
		
		ЗадачиИтогиПоФлагам =
			РегистрыНакопления.КоличествоЗадачПоИсполнителям.ЗадачиРеестраИтогиПоИзмерениям(
				ПараметрыОтбораИтогов,
				"Флаг");
		
	ИначеЕсли СтрНачинаетсяС(КлючНазначения, "ВсеЗадачиПоАвторам") Тогда
		
		ЗадачиИтогиПоФлагам =
			РегистрыНакопления.КоличествоЗадачПоАвторам.ЗадачиРеестраИтогиПоИзмерениям(
				ПараметрыОтбораИтогов,
				"Флаг");
		
	ИначеЕсли СтрНачинаетсяС(КлючНазначения, "ВсеЗадачиПоИсполнителям") Тогда
		
		ЗадачиИтогиПоФлагам =
			РегистрыНакопления.КоличествоЗадачПоИсполнителям.ЗадачиРеестраИтогиПоИзмерениям(
				ПараметрыОтбораИтогов,
				"Флаг");
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Недопустимый ключ назначения использования %1.'"),
			КлючНазначения);
		
	КонецЕсли;
	
	Возврат ЗадачиИтогиПоФлагам;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДополнительныеГруппировки(ДанныеГруппировок, КлючНазначения, Раздел,
	ПараметрыОтбораИтогов, ОсновнаяГруппировка)
	
	Если Не ЗначениеЗаполнено(ОсновнаяГруппировка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДополнительныйВариантГруппировки) Тогда
		Возврат;
	КонецЕсли;
	
	ОбщиеПараметрыОтбораИтогов = ОбщиеПараметрыОтбораИтогов();
	ЗаполнитьЗначенияСвойств(ОбщиеПараметрыОтбораИтогов, ПараметрыОтбораИтогов);
	
	ПараметрыОтбораОсновнойГруппировки =
		ЗначимыеПараметрыОтбораПоГруппировке(ОсновнаяГруппировка, ТекущийВариантГруппировки);
	ЗаполнитьЗначенияСвойств(ОбщиеПараметрыОтбораИтогов, ПараметрыОтбораОсновнойГруппировки);
	
	Если ДополнительныйВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоАвтору Тогда
		
		ЗаполнитьГруппировкиПоАвтору(ДанныеГруппировок, КлючНазначения,
			Раздел, ОбщиеПараметрыОтбораИтогов, ОсновнаяГруппировка);
		
	ИначеЕсли ДополнительныйВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоВидуЗадачи Тогда
		
		ЗаполнитьГруппировкиПоВидуЗадачи(ДанныеГруппировок, КлючНазначения,
			Раздел, ОбщиеПараметрыОтбораИтогов, ОсновнаяГруппировка);
		
	ИначеЕсли ДополнительныйВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоИсполнителю Тогда
		
		ЗаполнитьГруппировкиПоИсполнителю(ДанныеГруппировок, КлючНазначения,
			Раздел, ОбщиеПараметрыОтбораИтогов, ОсновнаяГруппировка);
		
	ИначеЕсли ДополнительныйВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоПриложениюБезГрупп Тогда
		
		ЗаполнитьГруппировкиПоПриложениюБезГрупп(ДанныеГруппировок, КлючНазначения,
			Раздел, ОбщиеПараметрыОтбораИтогов, ОсновнаяГруппировка);
		
	ИначеЕсли ДополнительныйВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоПриложениюПоГруппам Тогда
		
		ЗаполнитьГруппировкиПоПриложениюПоГруппам(ДанныеГруппировок, КлючНазначения,
			Раздел, ОбщиеПараметрыОтбораИтогов, ОсновнаяГруппировка);
		
	ИначеЕсли ДополнительныйВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоПроекту Тогда
		
		ЗаполнитьГруппировкиПоПроекту(ДанныеГруппировок, КлючНазначения,
			Раздел, ОбщиеПараметрыОтбораИтогов, ОсновнаяГруппировка);
		
	ИначеЕсли ДополнительныйВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоФлагу Тогда
		
		ЗаполнитьГруппировкиПоФлагу(ДанныеГруппировок, КлючНазначения,
			Раздел, ОбщиеПараметрыОтбораИтогов, ОсновнаяГруппировка);
		
	Иначе
		
		// Ничего делать не надо
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбщиеПараметрыОтбораИтогов()
	
	ПараметрыОтбораДействийЗадач =
		РегистрыНакопления.КоличествоЗадачПоИсполнителям.НовыеПараметрыОтбора();
	ПараметрыОтбораЗадач =
		РегистрыНакопления.КоличествоЗадачПоАвторам.НовыеПараметрыОтбора();
	
	ОбщиеПараметрыОтбораИтогов = Новый Структура;
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ОбщиеПараметрыОтбораИтогов, ПараметрыОтбораЗадач, Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ОбщиеПараметрыОтбораИтогов, ПараметрыОтбораДействийЗадач, Истина);
	
	Возврат ОбщиеПараметрыОтбораИтогов;
	
КонецФункции

#КонецОбласти

&НаСервере
Функция ИтогиСписка()
	
	ИтогиСписка = Новый Структура;
	ИтогиСписка.Вставить("ОписаниеИтогов", "");
	ИтогиСписка.Вставить("НеНачато", 0);
	ИтогиСписка.Вставить("Просрочено", 0);
	ИтогиСписка.Вставить("Всего", 0);
	
	Если Не ЗначениеЗаполнено(ТекущаяГруппировка) Тогда
		Возврат ИтогиСписка;
	КонецЕсли;
	
	МассивИтогиСписка = Новый Массив;
	
	ПараметрыОтбораСписка = ПараметрыОтбораСписка();
	Если Не ПараметрыОтбораСписка.ОтображатьИтоги Тогда
		Возврат ИтогиСписка;
	Конецесли;
	
	Если ПараметрыОтбораСписка.ТипОтбора = Перечисления.ТипыОтбораГруппировокЗадач.ДействияЗадач Тогда
		
		ДанныеИтогов =
			РегистрыНакопления.КоличествоЗадачПоИсполнителям.ЗадачиРеестраИтоги(
				ПараметрыОтбораСписка);
		
	ИначеЕсли ПараметрыОтбораСписка.ТипОтбора = Перечисления.ТипыОтбораГруппировокЗадач.Задачи Тогда
		
		ДанныеИтогов =
			РегистрыНакопления.КоличествоЗадачПоАвторам.ЗадачиРеестраИтоги(
				ПараметрыОтбораСписка);
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестный тип отбора %1'"),
			ТекущаяГруппировка);
		
	КонецЕсли;
	
	ШаблонСчетчика = "%1: %2";
	
	ИтогиСписка.НеНачато = ДанныеИтогов.Новых;
	Если ЗначениеЗаполнено(ДанныеИтогов.Новых)
		И (ПараметрыОтбораСписка.Состояние = Перечисления.ОтборыПоСтатусуЗадач.НеВыполненные
			Или ПараметрыОтбораСписка.Состояние = Справочники.СостоянияЗадач.Новая
			Или ПараметрыОтбораСписка.Состояние = Перечисления.ОтборыПоСтатусуЗадач.НеНачатые
			Или ПараметрыОтбораСписка.Состояние = Перечисления.ОтборыПоСтатусуЗадач.Все) Тогда
		
		ПредставлениеСчетчика = НСтр("ru = 'Не начато'");
		ЗначениеСчетчика = Формат(ДанныеИтогов.Новых, "ЧН=0");
		
		ТекстСчетчика = СтрШаблон(
			ШаблонСчетчика,
			ПредставлениеСчетчика,
			ЗначениеСчетчика);
		
		МассивИтогиСписка.Добавить(ТекстСчетчика);
		
	КонецЕсли;
	
	ИтогиСписка.Просрочено = ДанныеИтогов.Просроченных;
	Если ЗначениеЗаполнено(ДанныеИтогов.Просроченных)
		И (ПараметрыОтбораСписка.Состояние = Перечисления.ОтборыПоСтатусуЗадач.НеВыполненные
			Или ПараметрыОтбораСписка.Состояние = Справочники.СостоянияЗадач.Новая
			Или ПараметрыОтбораСписка.Состояние = Перечисления.ОтборыПоСтатусуЗадач.Просроченные
			Или ПараметрыОтбораСписка.Состояние = Перечисления.ОтборыПоСтатусуЗадач.Все) Тогда
		
		ПредставлениеСчетчика = НСтр("ru = 'Просрочено'");
		ЗначениеСчетчика = Формат(ДанныеИтогов.Просроченных, "ЧН=0");
		
		ТекстСчетчика = СтрШаблон(
			ШаблонСчетчика,
			ПредставлениеСчетчика,
			ЗначениеСчетчика);
		
		МассивИтогиСписка.Добавить(ТекстСчетчика);
		
	КонецЕсли;
	
	Если ПараметрыОтбораСписка.Состояние = Перечисления.ОтборыПоСтатусуЗадач.НеВыполненные Тогда
		
		ИтогиСписка.Всего = ДанныеИтогов.ОжидающихВыполнения;
		
	ИначеЕсли ПараметрыОтбораСписка.Состояние = Перечисления.ОтборыПоСтатусуЗадач.НеНачатые Тогда
		
		ИтогиСписка.Всего = ДанныеИтогов.Новых;
		
	ИначеЕсли ПараметрыОтбораСписка.Состояние = Перечисления.ОтборыПоСтатусуЗадач.ПоступилиОбновления Тогда
		
		ИтогиСписка.Всего = ДанныеИтогов.ПоступилиОбновления;
		
	ИначеЕсли ПараметрыОтбораСписка.Состояние = Перечисления.ОтборыПоСтатусуЗадач.Просроченные Тогда
		
		ИтогиСписка.Всего = ДанныеИтогов.Просроченных;
		
	ИначеЕсли ПараметрыОтбораСписка.Состояние = Перечисления.ОтборыПоСтатусуЗадач.Все Тогда
		
		ИтогиСписка.Всего = ДанныеИтогов.Всего;
		
	ИначеЕсли ПараметрыОтбораСписка.Состояние = Перечисления.ОтборыПоСтатусуЗадач.ВСрок Тогда
		
		ИтогиСписка.Всего = ДанныеИтогов.ВСрок;
		
	ИначеЕсли ПараметрыОтбораСписка.Состояние = Перечисления.ОтборыПоСтатусуЗадач.Истекающие Тогда
		
		ИтогиСписка.Всего = ДанныеИтогов.Истекающих;
		
	ИначеЕсли ПараметрыОтбораСписка.Состояние = Справочники.СостоянияЗадач.Черновик Тогда
		
		ИтогиСписка.Всего = ДанныеИтогов.Черновиков;
		
	ИначеЕсли ПараметрыОтбораСписка.Состояние = Справочники.СостоянияЗадач.Новая Тогда
		
		ИтогиСписка.Всего = ДанныеИтогов.ОжидающихВыполнения - ДанныеИтогов.ВРаботе;
		
	ИначеЕсли ПараметрыОтбораСписка.Состояние = Справочники.СостоянияЗадач.ВРаботе Тогда
		
		ИтогиСписка.Всего = ДанныеИтогов.ВРаботе;
		
	ИначеЕсли ПараметрыОтбораСписка.Состояние = Справочники.СостоянияЗадач.НаПроверке Тогда
		
		ИтогиСписка.Всего = ДанныеИтогов.ОжидающихПроверки;
		
	ИначеЕсли ПараметрыОтбораСписка.Состояние = Справочники.СостоянияЗадач.Закрыта Тогда
		
		ИтогиСписка.Всего = ДанныеИтогов.Выполненных;
		
	КонецЕсли;
	
	ПредставлениеСчетчика = НСтр("ru = 'Всего'");
	ЗначениеСчетчика = Формат(ИтогиСписка.Всего, "ЧН=0");
	
	ТекстСчетчика = СтрШаблон(
		ШаблонСчетчика,
		ПредставлениеСчетчика,
		ЗначениеСчетчика);
	
	МассивИтогиСписка.Добавить(ТекстСчетчика);
	
	ИтогиСписка.ОписаниеИтогов = СтрСоединить(МассивИтогиСписка, " / ");
	
	Возврат ИтогиСписка;
	
КонецФункции

&НаКлиенте
Процедура УстановитьПараметрыГруппировки()
	
	СтарыеГруппировки = ТекущиеГруппировки();
	ЗапомнитьЭлементы();
	ОчиститьПараметрыБыстрогоПоискаПоТекущимГруппировкам();
	УстановитьПараметрыГруппировкиНаСервере();
	РазвернутьНовыеЭлементы();
	ВосстановитьСтрокуДереваГруппировок(СтарыеГруппировки);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыГруппировкиНаСервере()
	
	Если РежимДерева Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбораСписка = ПараметрыОтбораСписка();
	
	СписокДействияЗадач.Параметры.УстановитьЗначениеПараметра("РеестрЗадач", ПараметрыОтбораСписка.РеестрЗадач);
	СписокЗадач.Параметры.УстановитьЗначениеПараметра("РеестрЗадач", ПараметрыОтбораСписка.РеестрЗадач);
	
	Если ПараметрыОтбораСписка.ТипОтбора = Перечисления.ТипыОтбораГруппировокЗадач.Задачи Тогда
		Элементы.СтраницыСписка.ТекущаяСтраница = Элементы.СтраницаСписокЗадач;
	ИначеЕсли ПараметрыОтбораСписка.ТипОтбора = Перечисления.ТипыОтбораГруппировокЗадач.ДействияЗадач
		И Не РежимДерева Тогда
		Элементы.СтраницыСписка.ТекущаяСтраница = Элементы.СтраницаСписокДействияЗадач;
	КонецЕсли;
	
	Элементы.ФормаСтрокаПоискаВСпискеЗадач.Видимость =
		(ПараметрыОтбораСписка.ТипОтбора = Перечисления.ТипыОтбораГруппировокЗадач.Задачи);
	Элементы.ФормаНастройкаСпискаЗадач.Видимость =
		(ПараметрыОтбораСписка.ТипОтбора = Перечисления.ТипыОтбораГруппировокЗадач.Задачи);
	Элементы.ВывестиСписокЗадачПоАвторам.Видимость =
		(ПараметрыОтбораСписка.ТипОтбора = Перечисления.ТипыОтбораГруппировокЗадач.Задачи);
	Элементы.ФормаСтрокаПоискаВСпискеДействийЗадач.Видимость =
		(ПараметрыОтбораСписка.ТипОтбора = Перечисления.ТипыОтбораГруппировокЗадач.ДействияЗадач);
	Элементы.ФормаНастройкаСпискаДействийЗадач.Видимость =
		(ПараметрыОтбораСписка.ТипОтбора = Перечисления.ТипыОтбораГруппировокЗадач.ДействияЗадач);
	Элементы.ВывестиСписокЗадачПоИсполнителям.Видимость =
		(ПараметрыОтбораСписка.ТипОтбора = Перечисления.ТипыОтбораГруппировокЗадач.ДействияЗадач);
	Элементы.КоманднаяПанельСписокЗадач.Видимость =
		Элементы.СтраницыСписка.ТекущаяСтраница = Элементы.СтраницаСписокЗадач;
	Элементы.ФормаДокументЗадачаПеренаправить.Видимость =
		Элементы.СтраницыСписка.ТекущаяСтраница = Элементы.СтраницаСписокЗадач;
	Элементы.КоманднаяПанельСписокДействий.Видимость =
		Элементы.СтраницыСписка.ТекущаяСтраница = Элементы.СтраницаСписокДействияЗадач;
	Элементы.ФормаДокументДействиеЗадачиПеренаправить.Видимость =
		Элементы.СтраницыСписка.ТекущаяСтраница = Элементы.СтраницаСписокДействияЗадач;
	Элементы.ФормаДокументДействиеЗадачиОтменитьВзятиеВРаботу.Видимость =
		Элементы.СтраницыСписка.ТекущаяСтраница = Элементы.СтраницаСписокДействияЗадач;
	Элементы.ВзятьВРаботу.Видимость =
		Элементы.СтраницыСписка.ТекущаяСтраница = Элементы.СтраницаСписокДействияЗадач
		Или Элементы.СтраницыСписка.ТекущаяСтраница = Элементы.СтраницаДеревоЗадач;
	Если Элементы.СтраницыСписка.ТекущаяСтраница = Элементы.СтраницаСписокЗадач Тогда
		СпискиВыбораБыстрогоПоиска["ВидДействия"] = СпискиВыбораБыстрогоПоиска["ВидЗадачи"]; 
	ИначеЕсли Элементы.СтраницыСписка.ТекущаяСтраница = Элементы.СтраницаСписокДействияЗадач Тогда
		СпискиВыбораБыстрогоПоиска["ВидДействия"] = СпискиВыбораБыстрогоПоиска["ВидДействияЗадачи"];
	КонецЕсли;
	
	Элементы.СписокДействияЗадачКомпоновщикНастроекПользовательскиеНастройки.Видимость =
		Элементы.СтраницыСписка.ТекущаяСтраница = Элементы.СтраницаСписокДействияЗадач;
	Элементы.СписокЗадачКомпоновщикЗадачНастроекПользовательскиеНастройки.Видимость =
		Элементы.СтраницыСписка.ТекущаяСтраница = Элементы.СтраницаСписокЗадач;
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокДействияЗадач,
		"Задача");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокДействияЗадач,
		"ОжидаетВыполнения");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокДействияЗадач,
		"Новое");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокДействияЗадач,
		"ПросроченоИОжидаетВыполнения");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокДействияЗадач,
		"ПоступилиОбновления");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокДействияЗадач,
		"ВРаботе");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокДействияЗадач,
		"Истекает");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокДействияЗадач,
		"ВСрок");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокДействияЗадач,
		"ОжидаетПроверки");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокДействияЗадач,
		"Выполнено");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокДействияЗадач,
		"ВидСостоянияУчастниковЗадач");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокЗадач,
		"ОжидаетВыполнения");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокЗадач,
		"Задача");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокЗадач,
		"Новая");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокЗадач,
		"ПросроченаИОжидаетВыполнения");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокЗадач,
		"ВРаботе");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокЗадач,
		"ВСрок");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокЗадач,
		"Истекает");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокЗадач,
		"ОжидаетПроверки");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокЗадач,
		"Выполнена");
		
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокЗадач,
		"ЭтоЧерновик");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокДействияЗадач,
		"ЭтоЧерновик");
		
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокЗадач,
		"ВидСостоянияЗадачи");
	
	ПредставлениеГруппаНоваяИлиВРаботе = ПредставлениеГруппаНоваяИлиВРаботе();
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокДействияЗадач,
		"",
		ПредставлениеГруппаНоваяИлиВРаботе);
		
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокДействияЗадач,
		"",
		"Все условия по ИЛИ");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокЗадач,
		"",
		"Все условия по ИЛИ");
		
	Если ПараметрыОтбораСписка.Состояние <> Неопределено Тогда
		
		Если ПараметрыОтбораСписка.Состояние = Перечисления.ОтборыПоСтатусуЗадач.НеВыполненные Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				СписокДействияЗадач,
				"ОжидаетВыполнения",
				Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				СписокЗадач,
				"ОжидаетВыполнения",
				Истина);
			
		ИначеЕсли ПараметрыОтбораСписка.Состояние = Перечисления.ОтборыПоСтатусуЗадач.НеНачатые
			Или ПараметрыОтбораСписка.Состояние = Справочники.СостоянияЗадач.Новая Тогда
			
			ГруппаНоваяИлиВРаботе = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
				СписокДействияЗадач.Отбор.Элементы,
				ПредставлениеГруппаНоваяИлиВРаботе,
				ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
			
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
				ГруппаНоваяИлиВРаботе,
				"Новое",
				ВидСравненияКомпоновкиДанных.Равно,
				Истина,
				НСтр("ru = 'Новая или в работе - Новая'"),
				Истина);
			
			ПредставлениеГруппаВРаботе = ПредставлениеГруппаВРаботе();
			ГруппаВРаботе = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
				ГруппаНоваяИлиВРаботе,
				ПредставлениеГруппаВРаботе,
				ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
			
			ПоказыватьВзятуюВРаботуТекущуюЗадачу =
				ЗначениеЗаполнено(ТекущаяЗадачаИлиДействие)
				И ТипЗнч(ТекущаяЗадачаИлиДействие) = Тип("ДокументСсылка.ДействиеЗадачи");
			ПредставлениеОтбораВРаботе = ПредставлениеОтбораВРаботе();
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
				ГруппаВРаботе,
				"ВРаботе",
				ВидСравненияКомпоновкиДанных.Равно,
				Истина,
				ПредставлениеОтбораВРаботе,
				ПоказыватьВзятуюВРаботуТекущуюЗадачу);
			ПредставлениеОтбораДействиеЗадачи = ПредставлениеОтбораДействиеЗадачи();
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
				ГруппаВРаботе,
				"ДействиеЗадачи",
				ВидСравненияКомпоновкиДанных.Равно,
				ТекущаяЗадачаИлиДействие,
				ПредставлениеОтбораДействиеЗадачи,
				ПоказыватьВзятуюВРаботуТекущуюЗадачу);
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				СписокЗадач,
				"Новая",
				Истина);
			
		ИначеЕсли ПараметрыОтбораСписка.Состояние = Перечисления.ОтборыПоСтатусуЗадач.ПоступилиОбновления Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				СписокДействияЗадач,
				"ПоступилиОбновления",
				Истина);
			
		ИначеЕсли ПараметрыОтбораСписка.Состояние = Перечисления.ОтборыПоСтатусуЗадач.Просроченные Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				СписокДействияЗадач,
				"ПросроченоИОжидаетВыполнения",
				Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				СписокЗадач,
				"ПросроченаИОжидаетВыполнения",
				Истина);
			
		ИначеЕсли ПараметрыОтбораСписка.Состояние = Справочники.СостоянияЗадач.ВРаботе Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				СписокДействияЗадач,
				"ВРаботе",
				Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				СписокЗадач,
				"ВРаботе",
				Истина);
			
		ИначеЕсли ПараметрыОтбораСписка.Состояние = Перечисления.ОтборыПоСтатусуЗадач.ВСрок Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				СписокДействияЗадач,
				"ВСрок",
				Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				СписокЗадач,
				"ВСрок",
				Истина);
			
		ИначеЕсли ПараметрыОтбораСписка.Состояние = Перечисления.ОтборыПоСтатусуЗадач.Истекающие Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				СписокДействияЗадач,
				"Истекает",
				Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				СписокЗадач,
				"Истекает",
				Истина);
			
		ИначеЕсли ПараметрыОтбораСписка.Состояние = Справочники.СостоянияЗадач.НаПроверке Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				СписокДействияЗадач,
				"ОжидаетПроверки",
				Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				СписокЗадач,
				"ОжидаетПроверки",
				Истина);
			
		ИначеЕсли ПараметрыОтбораСписка.Состояние = Справочники.СостоянияЗадач.Закрыта Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				СписокДействияЗадач,
				"Выполнено",
				Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				СписокЗадач,
				"Выполнена",
				Истина);
			
		ИначеЕсли ПараметрыОтбораСписка.Состояние = Справочники.СостоянияЗадач.Отменена Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				СписокДействияЗадач,
				"ВидСостоянияУчастниковЗадач",
				Перечисления.ВидыСостоянийУчастниковЗадач.Отменена);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				СписокЗадач,
				"ВидСостоянияЗадачи",
				Перечисления.ВидыСостоянийЗадач.Отменена);
			
		ИначеЕсли ПараметрыОтбораСписка.Состояние = Справочники.СостоянияЗадач.Черновик Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				СписокЗадач,
				"ЭтоЧерновик",
				Истина);

			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				СписокДействияЗадач,
				"ЭтоЧерновик",
				Истина);
			
		ИначеЕсли ПараметрыОтбораСписка.Состояние = Перечисления.ОтборыПоСтатусуЗадач.Все Тогда
			
			// Без отбора по состоянию
			
		ИначеЕсли ТипЗнч(ПараметрыОтбораСписка.Состояние) = Тип("СписокЗначений") Тогда
			
			Если ПараметрыОтбораСписка.Состояние.Количество() <> 0 Тогда
			
				ГруппаИЛИСписокДействияЗадач = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
					СписокДействияЗадач.Отбор.Элементы,
					"Все условия по ИЛИ",
					ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);	

				ГруппаИЛИСписокЗадач = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
					СписокЗадач.Отбор.Элементы,
					"Все условия по ИЛИ",
					ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли); 
					
				Для Каждого ЗначениеСтр Из ПараметрыОтбораСписка.Состояние Цикл
						
					Состояние = ЗначениеСтр.Значение;
					
					Если Состояние = Перечисления.ОтборыПоСтатусуЗадач.НеВыполненные Тогда     
						
						ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
							ГруппаИЛИСписокДействияЗадач,
							"ОжидаетВыполнения",
							ВидСравненияКомпоновкиДанных.Равно,
							Истина,,
							Истина,
							РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);		

						ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
							ГруппаИЛИСписокДействияЗадач,
							"ОжидаетПроверки",
							ВидСравненияКомпоновкиДанных.Равно,
							Истина,,
							Истина,
							РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);		

						ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
							ГруппаИЛИСписокЗадач,
							"ОжидаетВыполнения",
							ВидСравненияКомпоновкиДанных.Равно,
							Истина,,
							Истина,
							РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);		
							
					ИначеЕсли Состояние = Перечисления.ОтборыПоСтатусуЗадач.НеНачатые
						Или Состояние = Справочники.СостоянияЗадач.Новая Тогда     	                

						ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
							ГруппаИЛИСписокДействияЗадач,
							"Новое",
							ВидСравненияКомпоновкиДанных.Равно,
							Истина,,
							Истина,
							РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);		

						ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
							ГруппаИЛИСписокЗадач,
							"Новая",
							ВидСравненияКомпоновкиДанных.Равно,
							Истина,,
							Истина,
							РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);		
							
					ИначеЕсли Состояние = Перечисления.ОтборыПоСтатусуЗадач.ПоступилиОбновления	Тогда

						ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
							ГруппаИЛИСписокДействияЗадач,
							"ПоступилиОбновления",
							ВидСравненияКомпоновкиДанных.Равно,
							Истина,,
							Истина,
							РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);		
							
					ИначеЕсли Состояние = Перечисления.ОтборыПоСтатусуЗадач.Просроченные Тогда
						
						ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
							ГруппаИЛИСписокДействияЗадач,
							"ПросроченоИОжидаетВыполнения",
							ВидСравненияКомпоновкиДанных.Равно,
							Истина,,
							Истина,
							РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);		

						ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
							ГруппаИЛИСписокЗадач,
							"ПросроченаИОжидаетВыполнения",
							ВидСравненияКомпоновкиДанных.Равно,
							Истина,,
							Истина,
							РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);		
						
					ИначеЕсли Состояние = Справочники.СостоянияЗадач.ВРаботе Тогда

						ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
							ГруппаИЛИСписокДействияЗадач,
							"ВРаботе",
							ВидСравненияКомпоновкиДанных.Равно,
							Истина,,
							Истина,
							РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);		

						ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
							ГруппаИЛИСписокЗадач,
							"ВРаботе",
							ВидСравненияКомпоновкиДанных.Равно,
							Истина,,
							Истина,
							РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);		
						
					ИначеЕсли Состояние = Перечисления.ОтборыПоСтатусуЗадач.ВСрок Тогда
						
						ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
							ГруппаИЛИСписокДействияЗадач,
							"ВСрок",
							ВидСравненияКомпоновкиДанных.Равно,
							Истина,,
							Истина,
							РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);		

						ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
							ГруппаИЛИСписокЗадач,
							"ВСрок",
							ВидСравненияКомпоновкиДанных.Равно,
							Истина,,
							Истина,
							РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);		
						
					ИначеЕсли Состояние = Перечисления.ОтборыПоСтатусуЗадач.Истекающие Тогда
						
						ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
							ГруппаИЛИСписокДействияЗадач,
							"Истекает",
							ВидСравненияКомпоновкиДанных.Равно,
							Истина,,
							Истина,
							РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);		

						ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
							ГруппаИЛИСписокЗадач,
							"Истекает",
							ВидСравненияКомпоновкиДанных.Равно,
							Истина,,
							Истина,
							РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);		
						
					ИначеЕсли Состояние = Справочники.СостоянияЗадач.НаПроверке Тогда
						
						ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
							ГруппаИЛИСписокДействияЗадач,
							"ОжидаетПроверки",
							ВидСравненияКомпоновкиДанных.Равно,
							Истина,,
							Истина,
							РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);		

						ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
							ГруппаИЛИСписокЗадач,
							"ОжидаетПроверки",
							ВидСравненияКомпоновкиДанных.Равно,
							Истина,,
							Истина,
							РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);		
						
					ИначеЕсли Состояние = Справочники.СостоянияЗадач.Закрыта Тогда
						
						ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
							ГруппаИЛИСписокДействияЗадач,
							"Выполнено",
							ВидСравненияКомпоновкиДанных.Равно,
							Истина,,
							Истина,
							РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);		

						ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
							ГруппаИЛИСписокЗадач,
							"Выполнена",
							ВидСравненияКомпоновкиДанных.Равно,
							Истина,,
							Истина,
							РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);		
						
					ИначеЕсли Состояние = Справочники.СостоянияЗадач.Отменена Тогда
						
						ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
							ГруппаИЛИСписокДействияЗадач,
							"ВидСостоянияУчастниковЗадач",
							ВидСравненияКомпоновкиДанных.Равно,
							Перечисления.ВидыСостоянийУчастниковЗадач.Отменена,,
							Истина,
							РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);		

						ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
							ГруппаИЛИСписокЗадач,
							"ВидСостоянияЗадачи",
							ВидСравненияКомпоновкиДанных.Равно,
							Перечисления.ВидыСостоянийЗадач.Отменена,,
							Истина,
							РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);		
						
					ИначеЕсли Состояние = Справочники.СостоянияЗадач.Черновик Тогда
						
						ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
							ГруппаИЛИСписокЗадач,
							"ЭтоЧерновик",
							ВидСравненияКомпоновкиДанных.Равно,
							Истина,,
							Истина,
							РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);		
						
						ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
							ГруппаИЛИСписокДействияЗадач,
							"ЭтоЧерновик",
							ВидСравненияКомпоновкиДанных.Равно,
							Истина,,
							Истина,
							РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);		
						
					КонецЕсли;	
					
				КонецЦикла;	
					
			КонецЕсли;	
			
		Иначе
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Неизвестный отбор по состоянию %1'"),
				ПараметрыОтбораСписка.Состояние);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокДействияЗадач,
		"Автор");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокЗадач,
		"Автор");
	Если ПараметрыОтбораСписка.Автор <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			СписокДействияЗадач,
			"Автор",
			ПараметрыОтбораСписка.Автор);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			СписокЗадач,
			"Автор",
			ПараметрыОтбораСписка.Автор);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокЗадач,
		"ВидЗадачи");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокДействияЗадач,
		"ВидЗадачи");
	Если ПараметрыОтбораСписка.ВидЗадачи <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			СписокЗадач,
			"ВидЗадачи",
			ПараметрыОтбораСписка.ВидЗадачи);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			СписокДействияЗадач,
			"ВидЗадачи",
			ПараметрыОтбораСписка.ВидЗадачи);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокДействияЗадач,
		"ВидДействия");
	Если ПараметрыОтбораСписка.ВидДействия <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			СписокДействияЗадач,
			"ВидДействия",
			ПараметрыОтбораСписка.ВидДействия);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокДействияЗадач,
		"ВидПриложения");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокЗадач,
		"ВидПриложения");
	Если ПараметрыОтбораСписка.ВидПриложения <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			СписокДействияЗадач,
			"ВидПриложения",
			ПараметрыОтбораСписка.ВидПриложения);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			СписокЗадач,
			"ВидПриложения",
			ПараметрыОтбораСписка.ВидПриложения);
	КонецЕсли;
	
	// УстановитьЭлементОтбораДинамическогоСписка может некорректно работать при указании то 1 элемент, то массива.
	// Нужна предварительная очистка.
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокДействияЗадач, "Исполнитель");
	Если ПараметрыОтбораСписка.Исполнитель <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			СписокДействияЗадач,
			"Исполнитель",
			ПараметрыОтбораСписка.Исполнитель);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокДействияЗадач,
		"ДатаОкончанияУчета");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокЗадач,
		"ДатаОкончанияУчета");
	Если ПараметрыОтбораСписка.ДатаС <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			СписокДействияЗадач,
			"ДатаОкончанияУчета",
			НачалоДня(ПараметрыОтбораСписка.ДатаС),
			ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			СписокЗадач,
			"ДатаОкончанияУчета",
			НачалоДня(ПараметрыОтбораСписка.ДатаС),
			ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокДействияЗадач,
		"ДатаНачалаУчета");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокЗадач,
		"ДатаНачалаУчета");
	Если ПараметрыОтбораСписка.ДатаПо <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			СписокДействияЗадач,
			"ДатаНачалаУчета",
			КонецДня(ПараметрыОтбораСписка.ДатаПо),
			ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			СписокЗадач,
			"ДатаНачалаУчета",
			КонецДня(ПараметрыОтбораСписка.ДатаПо),
			ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокДействияЗадач,
		"Проект");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокЗадач,
		"Проект");
	Если ПараметрыОтбораСписка.Проект <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			СписокДействияЗадач,
			"Проект",
			ПараметрыОтбораСписка.Проект);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			СписокЗадач,
			"Проект",
			ПараметрыОтбораСписка.Проект);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокДействияЗадач,
		"ТипПриложения");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокЗадач,
		"ТипПриложения");
	Если ПараметрыОтбораСписка.ТипПриложения <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			СписокДействияЗадач,
			"ТипПриложения",
			ПараметрыОтбораСписка.ТипПриложения);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			СписокЗадач,
			"ТипПриложения",
			ПараметрыОтбораСписка.ТипПриложения);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокДействияЗадач,
		"Флаг");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокЗадач,
		"Флаг");
	Если ПараметрыОтбораСписка.Флаг <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			СписокДействияЗадач,
			"Флаг",
			ПараметрыОтбораСписка.Флаг);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			СписокЗадач,
			"Флаг",
			ПараметрыОтбораСписка.Флаг);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборПоПриложению) Тогда
		ВызватьИсключение НСтр("ru = 'Отбор по приложению не поддерживаются в списке.'");
	КонецЕсли;
	
	ОбновитьИтоги();
	ОбновитьЭлементыСтрокиГруппировок();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьБыстрыйПоискЗавершение(НовыйБыстрыйПоиск, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(НовыйБыстрыйПоиск) <> Тип("ДанныеФормыКоллекция") Тогда
		Возврат;
	КонецЕсли;
	
	БыстрыйПоиск.Очистить();
	Для Каждого НоваяСтрокаПоиска Из НовыйБыстрыйПоиск Цикл
		СтрокаБыстрыйПоиск = БыстрыйПоиск.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаБыстрыйПоиск, НоваяСтрокаПоиска);
	КонецЦикла;
	
	БыстрыйПоискПриИзмененииНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВОбработкеОповещения(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьНаКлиенте();
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ДанныеФайла")
		И ТипЗнч(ДополнительныеПараметры.ДанныеФайла) = Тип("Структура")
		И ДополнительныеПараметры.ДанныеФайла.Свойство("РедактируетТекущийПользователь") 
		И ДополнительныеПараметры.ДанныеФайла.РедактируетТекущийПользователь Тогда
		ПоказатьОбзорТекущегоФайла();
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьГруппировки()
	
	ДанныеГруппировок = Новый Массив;
	
	Если СтрНачинаетсяС(КлючНазначенияИспользования, "ЗадачиМне") Тогда
		
		Если РаботаСЗадачами.ДоступныЗадачиМне() Тогда
			
			Если ТекущийВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.БезГруппировки Тогда
				
				ТекущаяГруппировка = Справочники.ГруппировкиЗадач.ЗадачиМне;
				УстановитьПараметрыГруппировкиНаСервере();
				
				Если ЭтоМобильныйКлиент Тогда
					МК_ПереключитьНаСписокДействияЗадач();
				КонецЕсли;
				
			Иначе
				
				ЗаполнитьГруппировкуЗадачиМне(ДанныеГруппировок);

			КонецЕсли;
			
		Иначе
			
			УстановитьРежимНетДанных(НСтр("ru = 'Нет сотрудников, на имя которых вы можете получать задачи.'"));
			
		КонецЕсли;
		
	ИначеЕсли СтрНачинаетсяС(КлючНазначенияИспользования, "ЗадачиОтМеня") Тогда
		
		Если РаботаСЗадачами.ДоступныЗадачиОтМеня() Тогда
			
			Если ТекущийВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.БезГруппировки Тогда
				
				ТекущаяГруппировка = Справочники.ГруппировкиЗадач.ЗадачиОтМеня;
				УстановитьПараметрыГруппировкиНаСервере();
				
				Если ЭтоМобильныйКлиент Тогда
					МК_ПереключитьНаСписокДействияЗадач();
				КонецЕсли;
				
			Иначе
				
				ЗаполнитьГруппировкуЗадачиОтМеня(ДанныеГруппировок);
				
			КонецЕсли;
			
		Иначе
			
			УстановитьРежимНетДанных(НСтр("ru = 'Нет сотрудников, от имени которых вы можете ставить задачи.'"));
			
		КонецЕсли;
		
	ИначеЕсли СтрНачинаетсяС(КлючНазначенияИспользования, "ЗадачиПодчиненных") Тогда
		
		Если ЭтоМобильныйКлиент Тогда
			МК_ПереключитьНаСписокДействияЗадач();
		КонецЕсли;
		
		Если РаботаСЗадачами.ДоступныЗадачиПодчиненных() Тогда
			ЗаполнитьГруппировкуЗадачиПодчиненных(ДанныеГруппировок);
		Иначе
			УстановитьРежимНетДанных(НСтр("ru = 'Нет подразделений, у которых вы являетесь руководителем.'"));
		КонецЕсли;
		
	ИначеЕсли СтрНачинаетсяС(КлючНазначенияИспользования, "ЗадачиПоПриложению") Тогда
		
		ТекущаяГруппировка = Справочники.ГруппировкиЗадач.ВсеЗадачиПоИсполнителям;
		УстановитьПараметрыГруппировкиНаСервере();
		
	ИначеЕсли СтрНачинаетсяС(КлючНазначенияИспользования, "ЗадачиПоПроектам") Тогда
		
		Если РаботаСЗадачами.ДоступныЗадачиПоПроектам() Тогда
			ЗаполнитьГруппировкуЗадачиПоПроектам(ДанныеГруппировок);
		Иначе
			УстановитьРежимНетДанных(НСтр("ru = 'Нет активных проектов, у которых вы являетесь руководителем.'"));
		КонецЕсли;
		
	ИначеЕсли СтрНачинаетсяС(КлючНазначенияИспользования, "ВсеЗадачи")
		Или СтрНачинаетсяС(КлючНазначенияИспользования, "Выбор")  Тогда
			
		Если ЭтоМобильныйКлиент Тогда
			МК_ПереключитьНаСписокЗадач();
		КонецЕсли;
		
		ЗаполнитьГруппировкуВсеЗадачи(ДанныеГруппировок);
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестный ключ назначения использования %1.'"),
			КлючНазначенияИспользования);
		
	КонецЕсли;
	
	// Дополним данные группировок данным о недействительных исполнителях.
	ВсеГруппировки = Новый Массив;
	Для Каждого ДанныеГруппировки Из ДанныеГруппировок Цикл
		
		Если Не ЗначениеЗаполнено(ДанныеГруппировки.Группировка) Тогда
			Продолжить;
		КонецЕсли;
			
		ВсеГруппировки.Добавить(ДанныеГруппировки.Группировка);
		
	КонецЦикла;
	
	Если ВсеГруппировки.Количество() > 0 Тогда
		
		РеквизитыГруппировок = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
			ВсеГруппировки,
			"Исполнитель");
		
		ВсеИсполнителиСотрудники = Новый Массив;
		Для Каждого КлючИЗначение Из РеквизитыГруппировок Цикл
			
			РеквизитыГруппировки = КлючИЗначение.Значение;
			
			Если Не ЗначениеЗаполнено(РеквизитыГруппировки.Исполнитель)
				Или Не ТипЗнч(РеквизитыГруппировки.Исполнитель) = Тип("СправочникСсылка.Сотрудники") Тогда
				Продолжить;
			КонецЕсли;
			
			ВсеИсполнителиСотрудники.Добавить(РеквизитыГруппировки.Исполнитель);
			
		КонецЦикла;
		
		Если ВсеИсполнителиСотрудники.Количество() > 0 Тогда
			
			РеквизитыИсполнителей = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
				ВсеИсполнителиСотрудники,
				"Действует");
			
			Для Каждого ДанныеГруппировки Из ДанныеГруппировок Цикл
				
				Если Не ЗначениеЗаполнено(ДанныеГруппировки.Группировка) Тогда
					Продолжить;
				КонецЕсли;
					
				РеквизитыГруппировки = РеквизитыГруппировок[ДанныеГруппировки.Группировка];
				Если Не ЗначениеЗаполнено(РеквизитыГруппировки.Исполнитель)
					Или Не ТипЗнч(РеквизитыГруппировки.Исполнитель) = Тип("СправочникСсылка.Сотрудники") Тогда
					Продолжить;
				КонецЕсли;
				
				РеквизитыИсполнителя =
					РеквизитыИсполнителей[РеквизитыГруппировки.Исполнитель];
				Если РеквизитыИсполнителя <> Неопределено И РеквизитыИсполнителя.Действует Тогда
					Продолжить;
				КонецЕсли;
				
				ДанныеГруппировки.ВыделятьСерым = Истина;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Добавление и изменение.
	КоллекцииЭлементовПоГруппировкам = Новый Соответствие;
	ЗаписатьКоллекциюЭлементовГруппировок(
		КоллекцииЭлементовПоГруппировкам,
		УникальныйИдентификаторПустой(),
		УникальныйИдентификаторПустой(),
		Группировки.ПолучитьЭлементы());
	
	ИндексПоГруппировкам = Новый Соответствие;
	ЭлементыКИндексированию = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Группировки);
	Пока ЭлементыКИндексированию.Количество() > 0 Цикл
		
		ЭлементКИндексированию = ЭлементыКИндексированию[0];
		ЭлементыКИндексированию.Удалить(0);
		
		Для Каждого ВложенныйЭлемент Из ЭлементКИндексированию.ПолучитьЭлементы() Цикл
			
			ЭлементыКИндексированию.Добавить(ВложенныйЭлемент);
			КлючГруппировок = СтроковыйКлючПарыГруппировок(
				ВложенныйЭлемент.ГруппировкаУИД,
				ВложенныйЭлемент.ДополнительнаяГруппировкаУИД);
			ИндексПоГруппировкам.Вставить(КлючГруппировок, ВложенныйЭлемент);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ВостребованныеГруппировки = Новый Соответствие;
	Для Каждого ДанныеГруппировки Из ДанныеГруппировок Цикл
		
		ЭлементыГруппировок = КоллекцияЭлементовПоГруппировкам(
			КоллекцииЭлементовПоГруппировкам,
			ДанныеГруппировки.Родитель.Группировка.УникальныйИдентификатор(),
			ДанныеГруппировки.Родитель.ДополнительнаяГруппировка.УникальныйИдентификатор());
		
		Если ЭлементыГруппировок = Неопределено Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Нарушен порядок группировок - не найдены элементы группировки по %1'"),
				ДанныеГруппировки.Родитель);
		КонецЕсли;
		
		КлючГруппировок = СтроковыйКлючПарыГруппировок(
			ДанныеГруппировки.Группировка.УникальныйИдентификатор(),
			ДанныеГруппировки.ДополнительнаяГруппировка.УникальныйИдентификатор());
		
		СтрокаГруппировки = ИндексПоГруппировкам.Получить(КлючГруппировок);
		Если СтрокаГруппировки = Неопределено Тогда
			
			СтрокаГруппировки = ЭлементыГруппировок.Добавить();
			СтрокаГруппировки.ГруппировкаУИД =
				ДанныеГруппировки.Группировка.УникальныйИдентификатор();
			СтрокаГруппировки.ДополнительнаяГруппировкаУИД =
				ДанныеГруппировки.ДополнительнаяГруппировка.УникальныйИдентификатор();
			
			ИндексПоГруппировкам.Вставить(КлючГруппировок, СтрокаГруппировки);
			
		КонецЕсли;
		
		Если СтрокаГруппировки.Количество <> ДанныеГруппировки.Количество Тогда
			СтрокаГруппировки.Количество = ДанныеГруппировки.Количество;
		КонецЕсли;
		Если СтрокаГруппировки.Представление <> ДанныеГруппировки.Представление Тогда
			СтрокаГруппировки.Представление = ДанныеГруппировки.Представление;
		КонецЕсли;
		Если СтрокаГруппировки.ИндексКартинки <> ДанныеГруппировки.ИндексКартинки Тогда
			СтрокаГруппировки.ИндексКартинки = ДанныеГруппировки.ИндексКартинки;
		КонецЕсли;
		Если СтрокаГруппировки.Порядок <> ДанныеГруппировки.Порядок Тогда
			СтрокаГруппировки.Порядок = ДанныеГруппировки.Порядок;
		КонецЕсли;
		Если СтрокаГруппировки.ОтображатьПустую <> ДанныеГруппировки.ОтображатьПустую Тогда
			СтрокаГруппировки.ОтображатьПустую = ДанныеГруппировки.ОтображатьПустую;
		КонецЕсли;
		Если СтрокаГруппировки.ВыделятьЖирным <> ДанныеГруппировки.ВыделятьЖирным Тогда
			СтрокаГруппировки.ВыделятьЖирным = ДанныеГруппировки.ВыделятьЖирным;
		КонецЕсли;
		Если СтрокаГруппировки.ВыделятьСерым <> ДанныеГруппировки.ВыделятьСерым Тогда
			СтрокаГруппировки.ВыделятьСерым = ДанныеГруппировки.ВыделятьСерым;
		КонецЕсли;
		Если СтрокаГруппировки.ВыделятьСиним <> ДанныеГруппировки.ВыделятьСиним Тогда
			СтрокаГруппировки.ВыделятьСиним = ДанныеГруппировки.ВыделятьСиним;
		КонецЕсли;
		
		ВостребованныеГруппировки.Вставить(КлючГруппировок, Истина);
		
		ЗаписатьКоллекциюЭлементовГруппировок(
			КоллекцииЭлементовПоГруппировкам,
			СтрокаГруппировки.ГруппировкаУИД,
			СтрокаГруппировки.ДополнительнаяГруппировкаУИД,
			СтрокаГруппировки.ПолучитьЭлементы());
		
	КонецЦикла;
	
	УдалитьНенужныеСтрокиГруппировок(КоллекцииЭлементовПоГруппировкам, ВостребованныеГруппировки);
	
	СортироватьЭлементыГруппировок(КоллекцииЭлементовПоГруппировкам);
	
	// Видимость.
	ЕстьГруппировки = Группировки.ПолучитьЭлементы().Количество() > 0;
	
	Элементы.ПоказыватьДеревоГруппировок.Видимость = ЕстьГруппировки;
	Элементы.ГруппаГруппировка.Видимость = ПоказыватьДеревоГруппировок И ЕстьГруппировки;
	
	Если Не ЭтоМобильныйКлиент Тогда
		Элементы.ФормаБыстрыйПоиск.Видимость = БыстрыйПоискДоступен;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СтроковыйКлючПарыГруппировок(ГруппировкаУИД, ДополнительнаяГруппировкаУИД)
	
	Возврат СтрШаблон("%1_%2", ГруппировкаУИД, ДополнительнаяГруппировкаУИД);
	
КонецФункции

&НаСервере
Процедура ЗаписатьКоллекциюЭлементовГруппировок(КоллекцииЭлементовПоГруппировкам,
	ОсновнаяГруппировкаУИД, ДополнительнаяГруппировкаУИД, КоллекцияЭлементов)
	
	Если КоллекцииЭлементовПоГруппировкам[ОсновнаяГруппировкаУИД] = Неопределено Тогда
		КоллекцииЭлементовПоГруппировкам[ОсновнаяГруппировкаУИД] = Новый Соответствие;
	КонецЕсли;
	КоллекцииПоОсновнойГруппировке = КоллекцииЭлементовПоГруппировкам[ОсновнаяГруппировкаУИД];
	
	КоллекцииПоОсновнойГруппировке.Вставить(ДополнительнаяГруппировкаУИД, КоллекцияЭлементов);
	
КонецПроцедуры

&НаСервере
Функция КоллекцияЭлементовПоГруппировкам(КоллекцииЭлементовПоГруппировкам,
	ОсновнаяГруппировка, ДополнительнаяГруппировка)
	
	КоллекцииПоОсновнойГруппировке = КоллекцииЭлементовПоГруппировкам.Получить(ОсновнаяГруппировка);
	
	Если ТипЗнч(КоллекцииПоОсновнойГруппировке) <> Тип("Соответствие") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат КоллекцииПоОсновнойГруппировке.Получить(ДополнительнаяГруппировка);
	
КонецФункции

&НаСервере
Процедура УдалитьНенужныеСтрокиГруппировок(КоллекцииЭлементовПоГруппировкам, ВостребованныеГруппировки)
	
	Для Каждого Элемент Из КоллекцииЭлементовПоГруппировкам Цикл
		
		КоллекцииЭлементовДополнительныхГруппировок = Элемент.Значение;
		
		Для Каждого ДочернийЭлемент Из КоллекцииЭлементовДополнительныхГруппировок Цикл
			
			КоллекцияСтрок = ДочернийЭлемент.Значение;
			
			Индекс = 0;
			Пока Индекс < КоллекцияСтрок.Количество() Цикл
				
				Строка = КоллекцияСтрок[Индекс];
				
				КлючГруппировок = СтроковыйКлючПарыГруппировок(
					Строка.ГруппировкаУИД,
					Строка.ДополнительнаяГруппировкаУИД);
				СтрокаВостребованна = (ВостребованныеГруппировки.Получить(КлючГруппировок) = Истина);
				
				ОтображатьПустуюСтроку = Не Строка.ОтображатьПустую И Строка.Количество = 0;
				
				Если Не СтрокаВостребованна Или ОтображатьПустуюСтроку Тогда
					
					// Для группировок второго уровня, которые удаляем из дерева, текущую строку
					// переместим на один уровень выше.
					ЭтоТекущаяГруппировкиВторогоУровня =
						Элементы.Группировки.ТекущаяСтрока = Строка.ПолучитьИдентификатор()
						И ЗначениеЗаполнено(Строка.ДополнительнаяГруппировкаУИД);
					Если ЭтоТекущаяГруппировкиВторогоУровня Тогда
						
							СтруктураОтбора = Новый Структура;
							СтруктураОтбора.Вставить("ГруппировкаУИД",
								Строка.ГруппировкаУИД);
							СтруктураОтбора.Вставить("ДополнительнаяГруппировкаУИД",
								УникальныйИдентификаторПустой());
							НайденныеГруппировки =
								ОбщегоНазначенияДокументооборотКлиентСервер.НайтиСтрокиДерева(
									Группировки,
									СтруктураОтбора);
							Для Каждого НайденнаяСтрока Из НайденныеГруппировки Цикл
								Элементы.Группировки.ТекущаяСтрока =
									НайденнаяСтрока.ПолучитьИдентификатор();
							КонецЦикла;
							
					КонецЕсли;
					
					КоллекцияСтрок.Удалить(Строка);
					
				Иначе
					Индекс = Индекс + 1;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СортироватьЭлементыГруппировок(КоллекцииЭлементовПоГруппировкам)
	
	Для Каждого Элемент Из КоллекцииЭлементовПоГруппировкам Цикл
		
		КоллекцииЭлементовДополнительныхГруппировок = Элемент.Значение;
		
		Для Каждого ДочернийЭлемент Из КоллекцииЭлементовДополнительныхГруппировок Цикл
			
			КоллекцияСтрок = ДочернийЭлемент.Значение;
			
			СписокСортировки = Новый СписокЗначений;
			Для Каждого ЭлементГруппировки Из КоллекцияСтрок Цикл
				СписокСортировки.Добавить(ЭлементГруппировки.ПолучитьИдентификатор(), ЭлементГруппировки.Порядок);
			КонецЦикла;
			СписокСортировки.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
			
			ИндексСортировки = 0;
			Для Каждого ЭлементСортировки Из СписокСортировки Цикл
				
				ИдентификаторЭлемента = ЭлементСортировки.Значение;
				
				ЭлементГруппировки = Группировки.НайтиПоИдентификатору(ИдентификаторЭлемента);
				ИндексЭлемента = КоллекцияСтрок.Индекс(ЭлементГруппировки);
				
				КоллекцияСтрок.Сдвинуть(ИндексЭлемента, ИндексСортировки - ИндексЭлемента);
				
				ИндексСортировки = ИндексСортировки + 1;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРежимНетДанных(ПочемуНетДанных)
	
	ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиФормы.Нет;
	Элементы.СтраницыЕстьНетДанных.ТекущаяСтраница = Элементы.СтраницаНетДанных;
	Элементы.ДекорацияНетДанных.Заголовок = ПочемуНетДанных;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоЗадач()
	
	Если Не РежимДерева Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОтборПоПриложению) Тогда
		ВызватьИсключение
			НСтр("ru = 'Режим дерева поддерживается только при отборе по приложению.'");
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Сформируем вспомогательные данные.
	ЗадачиПоПриложению = РаботаСЗадачами.ЗадачиПоПриложению(ОтборПоПриложению);
	
	АктивныеДействияПоЗадачам =
		Документы.ДействиеЗадачи.АктивныеДействияПоЗадачам(ЗадачиПоПриложению);
	ЭтоПросроченныеИОжидающиеВыполненияЗадачи =
		РегистрыСведений.РеестрЗадачПоАвторам.ЭтоПросроченныеИОжидающиеВыполненияЗадачи(
			ЗадачиПоПриложению);
	ЭтоОжидающиеПроверкиЗадачи =
		РегистрыСведений.РеестрЗадачПоАвторам.ЭтоОжидающиеПроверкиЗадачи(ЗадачиПоПриложению);
	РеквизитыЗадач = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		ЗадачиПоПриложению,
		"Автор, Номер, ВышестоящаяЗадача, ВышестоящееДействие, ДатаСоздания,
		|Заголовок, СостояниеЗадачи, РезультатЗадачи, Срок, Участники");
	
	ПодзадачиПоДействиям = Новый Соответствие;
	Для Каждого ЗадачаПоПриложению Из ЗадачиПоПриложению Цикл
			
		РеквизитыЗадачи = РеквизитыЗадач[ЗадачаПоПриложению];
		
		//@skip-check bsl-legacy-check-expression-type
		РеквизитыЗадачи.Участники = РеквизитыЗадачи.Участники.Выгрузить();
		
		Если ЗначениеЗаполнено(РеквизитыЗадачи.ВышестоящееДействие) Тогда
			
			Если ПодзадачиПоДействиям[РеквизитыЗадачи.ВышестоящееДействие] = Неопределено Тогда
				ПодзадачиПоДействиям[РеквизитыЗадачи.ВышестоящееДействие] = Новый Массив;
			КонецЕсли; 
			
			ПодзадачиПоДействию = ПодзадачиПоДействиям[РеквизитыЗадачи.ВышестоящееДействие];
			ПодзадачиПоДействию.Добавить(ЗадачаПоПриложению);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПраваСотрудниковПоОбъектам = ДокументооборотПраваДоступа.ПраваСотрудниковПоОбъектам(
		ЗадачиПоПриложению,
		Истина,
		ПараметрыСеанса.СотрудникиПользователя);
	
	ПраваЧтенияПоЗадачам = Новый Соответствие;
	
	Для Каждого СтрокаПрав Из ПраваСотрудниковПоОбъектам Цикл
		
		Если ПраваЧтенияПоЗадачам[СтрокаПрав.ОбъектДоступа] = Неопределено Тогда
			ПраваЧтенияПоЗадачам[СтрокаПрав.ОбъектДоступа] = Ложь;
		КонецЕсли;
		
		ПраваЧтенияПоЗадачам[СтрокаПрав.ОбъектДоступа] =
			ПраваЧтенияПоЗадачам[СтрокаПрав.ОбъектДоступа] Или СтрокаПрав.Чтение;
		
	КонецЦикла;
	
	ТекстОписаниеСкрыто = НСтр("ru = 'Описание скрыто'");
	
	// Обработаем каждый уровень дерева.
	ДействияТекущегоУровня = Новый Массив;
	ЭтоПервыйУровень = Истина;
	Пока ДействияТекущегоУровня.Количество() > 0 Или ЭтоПервыйУровень Цикл
		
		// Определим задачи текущего уровня.
		ЗадачиТекущегоУровня = Новый Массив;
		
		Для Каждого ЗадачаПоПриложению Из ЗадачиПоПриложению Цикл
			
			РеквизитыЗадачи = РеквизитыЗадач[ЗадачаПоПриложению];
			
			ЗаполненоВышестоящееДействие = ЗначениеЗаполнено(РеквизитыЗадачи.ВышестоящееДействие);
			ЕстьВышестоящаяЗадача =
				ЗадачиПоПриложению.Найти(РеквизитыЗадачи.ВышестоящаяЗадача) <> Неопределено;
			ЕстьВышестоящееДействиеВИерархии = ЗаполненоВышестоящееДействие И ЕстьВышестоящаяЗадача;
			
			ЭтоПодзадачаТекущегоУровня =
				ДействияТекущегоУровня.Найти(РеквизитыЗадачи.ВышестоящееДействие) <> Неопределено;
			
			Если ЭтоПервыйУровень И Не ЕстьВышестоящееДействиеВИерархии Тогда
				
				ЗадачиТекущегоУровня.Добавить(ЗадачаПоПриложению);
				
			ИначеЕсли Не ЭтоПервыйУровень И ЭтоПодзадачаТекущегоУровня Тогда
				
				ЗадачиТекущегоУровня.Добавить(ЗадачаПоПриложению);
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Сформируем данные задач
		ВышестоящиеДействияТекущегоУровня = Новый Массив;
		
		ДанныеЗадач = Новый ТаблицаЗначений;
		ДанныеЗадач.Колонки.Добавить("Задача");
		ДанныеЗадач.Колонки.Добавить("Заголовок");
		ДанныеЗадач.Колонки.Добавить("ВышестоящаяЗадача");
		ДанныеЗадач.Колонки.Добавить("ВышестоящееДействие");
		ДанныеЗадач.Колонки.Добавить("СостояниеЗадачи");
		ДанныеЗадач.Колонки.Добавить("РезультатЗадачи");
		ДанныеЗадач.Колонки.Добавить("ДатаСоздания");
		ДанныеЗадач.Колонки.Добавить("Срок");
		ДанныеЗадач.Колонки.Добавить("ПросроченаИОжидаетВыполнения");
		ДанныеЗадач.Колонки.Добавить("Представление");
		
		Для Каждого ЗадачаТекущегоУровня Из ЗадачиТекущегоУровня Цикл
			
			РеквизитыЗадачи = РеквизитыЗадач[ЗадачаТекущегоУровня];
			
			СтрокаДанныеПодзадачи = ДанныеЗадач.Добавить();
			СтрокаДанныеПодзадачи.Задача = ЗадачаТекущегоУровня;
			СтрокаДанныеПодзадачи.Заголовок = РеквизитыЗадачи.Заголовок;
			СтрокаДанныеПодзадачи.ВышестоящаяЗадача = РеквизитыЗадачи.ВышестоящаяЗадача;
			СтрокаДанныеПодзадачи.ВышестоящееДействие = РеквизитыЗадачи.ВышестоящееДействие;
			СтрокаДанныеПодзадачи.СостояниеЗадачи = РеквизитыЗадачи.СостояниеЗадачи;
			СтрокаДанныеПодзадачи.РезультатЗадачи = РеквизитыЗадачи.РезультатЗадачи;
			СтрокаДанныеПодзадачи.Срок = РеквизитыЗадачи.Срок;
			СтрокаДанныеПодзадачи.ДатаСоздания = РеквизитыЗадачи.ДатаСоздания;
			СтрокаДанныеПодзадачи.ПросроченаИОжидаетВыполнения =
				ЭтоПросроченныеИОжидающиеВыполненияЗадачи[ЗадачаТекущегоУровня];
			
			ПредставлениеЗаголовка =
				?(ПраваЧтенияПоЗадачам[ЗадачаТекущегоУровня] = Истина,
					РеквизитыЗадачи.Заголовок,
					ТекстОписаниеСкрыто);
			ПредставлениеНомера = Документы.Задача.ПредставлениеНомера(РеквизитыЗадачи.Номер);
			
			Если ЭтоПервыйУровень Тогда
				
				Если ЗначениеЗаполнено(РеквизитыЗадачи.Срок) Тогда
					СтрокаДанныеПодзадачи.Представление = СтрШаблон(
						НСтр("ru = '%1 № %2 от %3 до %4'"),
						ПредставлениеЗаголовка,
						ПредставлениеНомера,
						РаботаСЗадачамиПовтИсп.ПредставлениеУчастника(РеквизитыЗадачи.Автор),
						Формат(РеквизитыЗадачи.Срок, Метаданные.Документы.Задача.Реквизиты.Срок));
				Иначе
					СтрокаДанныеПодзадачи.Представление = СтрШаблон(
						НСтр("ru = '%1 № %2 от %3'"),
						ПредставлениеЗаголовка,
						ПредставлениеНомера,
						РаботаСЗадачамиПовтИсп.ПредставлениеУчастника(РеквизитыЗадачи.Автор));
				КонецЕсли;
			
			Иначе
				
				СтрокаДанныеПодзадачи.Представление = ПредставлениеЗаголовка;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РеквизитыЗадачи.ВышестоящееДействие) Тогда
				ВышестоящиеДействияТекущегоУровня.Добавить(РеквизитыЗадачи.ВышестоящееДействие);
			КонецЕсли;
			
		КонецЦикла;
		
		ДанныеЗадач.Сортировать("ДатаСоздания Убыв");
		ДанныеЗадач.Индексы.Добавить("Задача");
		
		ВышестоящиеДействияТекущегоУровня =
			ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВышестоящиеДействияТекущегоУровня);
		
		// Определим количество действий по задачам.
		КоличествоДействийПоЗадачам = 
			РаботаСЗадачами.КоличествоДействийПоЗадачам(
				АктивныеДействияПоЗадачам,
				ЗадачиТекущегоУровня,
				РеквизитыЗадач,
				ЭтоОжидающиеПроверкиЗадачи);
		
		// Сформируем данные действий задач
		ДанныеДействийПодзадач = Новый ТаблицаЗначений;
		ДанныеДействийПодзадач.Колонки.Добавить("Задача");
		ДанныеДействийПодзадач.Колонки.Добавить("ДействиеЗадачи");
		ДанныеДействийПодзадач.Колонки.Добавить("ЕстьПриложения");
		ДанныеДействийПодзадач.Колонки.Добавить("Участник");
		ДанныеДействийПодзадач.Колонки.Добавить("СостояниеУчастникаЗадачи");
		ДанныеДействийПодзадач.Колонки.Добавить("РезультатДействияТекстом");
		ДанныеДействийПодзадач.Колонки.Добавить("ЭтоОтветственный");
		ДанныеДействийПодзадач.Колонки.Добавить("ЭтоПроверяющий");
		ДанныеДействийПодзадач.Колонки.Добавить("ВышестоящееДействие");
		ДанныеДействийПодзадач.Колонки.Добавить("Представление");
		
		ДействияСледующегоУровня = Новый Массив;
		Для Каждого СтрокаДействия Из АктивныеДействияПоЗадачам Цикл
			
			Если ЗадачиТекущегоУровня.Найти(СтрокаДействия.Задача) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			РеквизитыЗадачи = РеквизитыЗадач[СтрокаДействия.Задача];
			Если РеквизитыЗадачи = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаУчастника = РеквизитыЗадачи.Участники.Найти(
				СтрокаДействия.ДействиеЗадачи,
				"ДействиеУчастника");
			Если СтрокаУчастника = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ЭтоОжидающаяПроверкиЗадача = ЭтоОжидающиеПроверкиЗадачи[СтрокаДействия.Задача];
			Если Не ЭтоОжидающаяПроверкиЗадача
				И РаботаСЗадачамиПовтИсп.ЭтоПроверяющий(СтрокаУчастника.ВидУчастника) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаДанныеДействия = ДанныеДействийПодзадач.Добавить();
			СтрокаДанныеДействия.Задача = СтрокаДействия.Задача;
			СтрокаДанныеДействия.ДействиеЗадачи = СтрокаДействия.ДействиеЗадачи;
			СтрокаДанныеДействия.ЕстьПриложения = СтрокаДействия.ЕстьПриложения;
			СтрокаДанныеДействия.Участник = СтрокаДействия.Исполнитель;
			СтрокаДанныеДействия.СостояниеУчастникаЗадачи = СтрокаДействия.СостояниеУчастникаЗадачи;
			СтрокаДанныеДействия.РезультатДействияТекстом = СтрокаДействия.РезультатДействияТекстом;
			СтрокаДанныеДействия.ЭтоОтветственный =
				РаботаСЗадачамиПовтИсп.ЭтоОтветственный(СтрокаУчастника.ВидУчастника);
			СтрокаДанныеДействия.ЭтоПроверяющий =
				РаботаСЗадачамиПовтИсп.ЭтоПроверяющий(СтрокаУчастника.ВидУчастника);
			СтрокаДанныеДействия.ВышестоящееДействие = РеквизитыЗадачи.ВышестоящееДействие;
			СтрокаДанныеДействия.Представление = РаботаСЗадачами.ПредставлениеДействияВДереве(
				СтрокаДанныеДействия,
				КоличествоДействийПоЗадачам[СтрокаДанныеДействия.Задача],
				ПраваЧтенияПоЗадачам[СтрокаДанныеДействия.Задача] = Истина,
				СтрокаУчастника.ВидУчастника,
				СтрокаДействия.ФактическийИсполнитель);
		
			ДействияСледующегоУровня.Добавить(СтрокаДействия.ДействиеЗадачи);
			
		КонецЦикла;
		
		ДанныеДействийПодзадач.Сортировать("ЭтоОтветственный Убыв, ЭтоПроверяющий, Участник");
		ДанныеДействийПодзадач.Индексы.Добавить("ДействиеЗадачи");
		
		// Обновим отображение в дереве.
		Если ЭтоПервыйУровень Тогда
			
			РаботаСЗадачами.ОбновитьПодзадачиУзла(
				ДеревоЗадач.ПолучитьЭлементы(),
				ДанныеЗадач,
				ДанныеДействийПодзадач,
				ЭтоПервыйУровень,
				Ложь);
			
		Иначе
			
			УзлыДействий = Новый Соответствие;
			
			УзлыКОбработке = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДеревоЗадач);
			Пока УзлыКОбработке.Количество() > 0 Цикл
				
				УзелКОбработке = УзлыКОбработке.Получить(0);
				УзлыКОбработке.Удалить(0);
				
				Для Каждого ОчереднойУзел Из УзелКОбработке.ПолучитьЭлементы() Цикл
					
					Если ЗначениеЗаполнено(ОчереднойУзел.ДействиеЗадачи) Тогда
						УзлыДействий.Вставить(ОчереднойУзел.ДействиеЗадачи, ОчереднойУзел);
					КонецЕсли;
					
					УзлыКОбработке.Добавить(ОчереднойУзел);
					
				КонецЦикла;
				
			КонецЦикла;
			
			Для Каждого ВышестоящееДействие Из ВышестоящиеДействияТекущегоУровня Цикл
				
				УзелВышестоящегоДействия = УзлыДействий[ВышестоящееДействие];
				Если УзелВышестоящегоДействия = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ДанныеПодзадачУзла = ДанныеЗадач.Скопировать(
					Новый Структура("ВышестоящееДействие", ВышестоящееДействие));
				ДанныеДействийПодзадачУзла = ДанныеДействийПодзадач.Скопировать(
					Новый Структура("ВышестоящееДействие", ВышестоящееДействие));
				
				РаботаСЗадачами.ОбновитьПодзадачиУзла(
					УзелВышестоящегоДействия.ПолучитьЭлементы(),
					ДанныеПодзадачУзла,
					ДанныеДействийПодзадачУзла,
					ЭтоПервыйУровень);
					
			КонецЦикла;
			
		КонецЕсли;
		
		// Подготовим следующую итерацию.
		ДействияТекущегоУровня = ДействияСледующегоУровня;
		ЭтоПервыйУровень = Ложь;
		
	КонецЦикла;
	
	// Обновим заголовок.
	КоличествоЗадач = ЗадачиПоПриложению.Количество();
	
	ЭтоОжидающиеВыполненияЗадачи = РаботаСЗадачами.ЭтоОжидающиеВыполненияЗадачи(ЗадачиПоПриложению);
	
	КоличествоОжидающихВыполненияЗадач = 0;
	Для Каждого Задача Из ЗадачиПоПриложению Цикл
		
		ЭтоОжидающаяВыполненияЗадача = ЭтоОжидающиеВыполненияЗадачи[Задача];
		Если ЭтоОжидающаяВыполненияЗадача Тогда
			КоличествоОжидающихВыполненияЗадач = КоличествоОжидающихВыполненияЗадач + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(КоличествоОжидающихВыполненияЗадач) Тогда
		Элементы.ДеревоЗадачПредставление.Заголовок =
			СтрШаблон(
				НСтр("ru = '%1 (Выполняется: %2, Всего: %3)'"),
				Метаданные.Документы.Задача.Команды.ЗадачиПоПриложению.Синоним,
				Формат(КоличествоОжидающихВыполненияЗадач, "ЧН=0;"),
				Формат(КоличествоЗадач, "ЧН=0;"));
	Иначе
		Элементы.ДеревоЗадачПредставление.Заголовок =
			СтрШаблон(
				НСтр("ru = '%1 (Всего: %2)'"),
				Метаданные.Документы.Задача.Команды.ЗадачиПоПриложению.Синоним,
				Формат(КоличествоЗадач, "ЧН=0;"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИтоги()
	
	Если РежимДерева Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеИтогов = ДанныеИтогов();
	
	Элементы.СписокЗадачЗаголовок.Заголовок = ДанныеИтогов.Заголовок;
	Элементы.СписокДействияЗадачЗаголовок.Заголовок = ДанныеИтогов.Заголовок;
	
	Если Не ЕстьНеФиксированныйБыстрыйПоиск() Тогда
		
		СчётчикиИзменились = Ложь;
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ГруппировкаУИД",
			ТекущаяГруппировка.УникальныйИдентификатор());
		СтруктураОтбора.Вставить("ДополнительнаяГруппировкаУИД",
			ТекущаяДополнительнаяГруппировка.УникальныйИдентификатор());
		НайденныеГруппировки =
			ОбщегоНазначенияДокументооборотКлиентСервер.НайтиСтрокиДерева(
				Группировки,
				СтруктураОтбора);
		Для Каждого СтрокаГруппировки Из НайденныеГруппировки Цикл
			Если СтрокаГруппировки.Количество <> ДанныеИтогов.Количество Тогда
				СчётчикиИзменились = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если СчётчикиИзменились Тогда
			ОбновитьГруппировки();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНаКлиентеОтложенно()
	
	ПодключитьОбработчикОжидания("ОбновитьНаКлиенте", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНаКлиенте()
	
	Если Не ВводДоступен() Тогда
		ПодключитьОбработчикОжидания("ОбновитьНаКлиенте", 1, Истина);
		Возврат;
	КонецЕсли;
	
	// Перед обновлением.
	ЗапомнитьЭлементы();
	
	// Обновление списка и установка новой текущей строки - для корректного перехода к следующей строке,
	// когда задача уходит из списка, а не сброса на первую строку.
	Если Элементы.СтраницыСписка.ТекущаяСтраница = Элементы.СтраницаСписокДействияЗадач Тогда
		
		Элементы.СписокДействияЗадач.Обновить();
		ОбработатьАктивизациюСтроки();
		
	ИначеЕсли Элементы.СтраницыСписка.ТекущаяСтраница = Элементы.СтраницаСписокЗадач Тогда
		
		Элементы.СписокЗадач.Обновить();
		ОбработатьАктивизациюСтроки();
		
	ИначеЕсли Элементы.СтраницыСписка.ТекущаяСтраница = Элементы.СтраницаДеревоЗадач Тогда
		
		ОбновитьДеревоЗадач();
		ОбработатьАктивизациюСтроки();
		
	КонецЕсли;
	
	Если НужноСохранитьРезультатДействия Тогда
		СохранитьРезультатДействия();
	КонецЕсли;
	
	// Обновление.
	ОбновитьНаСервере();
	ОбновитьОбластьПросмотраОтложенно();
	
	// После обновления.
	РазвернутьНовыеЭлементы();
	
	УстановитьДоступностьКомандПриложений();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНаСервере()
	
	ОбновитьГруппировки();
	ОбновитьИтоги();
	ОбновитьЭлементыСтрокиГруппировок();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОбластьПросмотраОтложенно()
	
	ПодключитьОбработчикОжидания("ОбновитьОбластьПросмотра", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОбластьПросмотра()
	
	Если Не ВводДоступен() Тогда
		ПодключитьОбработчикОжидания("ОбновитьОбластьПросмотра", 1, Истина);
		Возврат;
	КонецЕсли;
	
	ОбновитьОбластьПросмотраНемедленно();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОбластьПросмотраНемедленно()
	
	Если НужноСохранитьРезультатДействия Тогда
		СохранитьРезультатДействия();
	КонецЕсли;
	
	Попытка
		
		КлючевыеОперации = "ЗадачиМнеОбновитьОбластьПросмотра";
		ОценкаПроизводительностиКлиент.ЗамерВремени(КлючевыеОперации);
		
		ЗапомнитьЭлементы();
		ОбновитьОбластьПросмотраНаКлиенте();
		РазвернутьНовыеЭлементы();
		
		Если ПриложенияРазвернуты <> Истина И МК_ДеревоПриложенийВидимо() Тогда
			РаботаСЗадачамиКлиент.ДеревоПриложенийРазвернуть(
				ДеревоПриложений,
				Элементы.ДеревоПриложений);
			ПриложенияРазвернуты = Истина;
		КонецЕсли;
		
		УстановитьДоступностьКомандПриложений();
		
	Исключение
		Элементы.СтраницыЗадачаОднаНесколькоНет.ТекущаяСтраница = Элементы.СтраницаОшибка;
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОбластьПросмотраНаКлиенте()
	
	// Определим текущую строку и выделенные строки.
	Элемент = Неопределено;
	НоваяЗадачаИлиДействие = Неопределено;
	ВыделенныеЗадачи = Новый Массив;
	ВыделенныеДействияЗадач = Новый Массив;
	НовоеКоличестоВыделенныхСтрок = 0;
	Если Элементы.СтраницыСписка.ТекущаяСтраница = Элементы.СтраницаСписокДействияЗадач Тогда
		
		Элемент = Элементы.СписокДействияЗадач;
		
		Если Элементы.СписокДействияЗадач.ТекущиеДанные <> Неопределено
			И ТипЗнч(Элементы.СписокДействияЗадач.ТекущаяСтрока) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			НоваяЗадачаИлиДействие = Элементы.СписокДействияЗадач.ТекущиеДанные.ДействиеЗадачи;
		КонецЕсли;
		
		Для Каждого ВыделеннаяСтрока Из Элементы.СписокДействияЗадач.ВыделенныеСтроки Цикл
			Если ТипЗнч(ВыделеннаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
				Продолжить;
			КонецЕсли;
			НовоеКоличестоВыделенныхСтрок = НовоеКоличестоВыделенныхСтрок + 1;
			ДанныеСтроки = Элементы.СписокДействияЗадач.ДанныеСтроки(ВыделеннаяСтрока);
			Если ДанныеСтроки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ВыделенныеДействияЗадач.Добавить(ДанныеСтроки.ДействиеЗадачи);
		КонецЦикла;
		
	ИначеЕсли Элементы.СтраницыСписка.ТекущаяСтраница = Элементы.СтраницаСписокЗадач Тогда
		
		Элемент = Элементы.СписокЗадач;
		
		Если Элементы.СписокЗадач.ТекущиеДанные <> Неопределено
			И ТипЗнч(Элементы.СписокЗадач.ТекущаяСтрока) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
			НоваяЗадачаИлиДействие = Элементы.СписокЗадач.ТекущиеДанные.Задача;
		КонецЕсли;
		
		Для Каждого ВыделеннаяСтрока Из Элементы.СписокЗадач.ВыделенныеСтроки Цикл
			Если ТипЗнч(ВыделеннаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
				Продолжить;
			КонецЕсли;
			НовоеКоличестоВыделенныхСтрок = НовоеКоличестоВыделенныхСтрок + 1;
			ДанныеСтроки = Элементы.СписокЗадач.ДанныеСтроки(ВыделеннаяСтрока);
			Если ДанныеСтроки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ВыделенныеЗадачи.Добавить(ДанныеСтроки.Задача);
		КонецЦикла;
		
	ИначеЕсли Элементы.СтраницыСписка.ТекущаяСтраница = Элементы.СтраницаДеревоЗадач Тогда
		
		Элемент = Элементы.ДеревоЗадач;
		
		Если Элементы.ДеревоЗадач.ТекущаяСтрока <> Неопределено Тогда
			ДанныеСтроки = ДеревоЗадач.НайтиПоИдентификатору(Элементы.ДеревоЗадач.ТекущаяСтрока);
			Если ДанныеСтроки <> Неопределено Тогда
				Если ЗначениеЗаполнено(ДанныеСтроки.ДействиеЗадачи) Тогда
					НоваяЗадачаИлиДействие = ДанныеСтроки.ДействиеЗадачи;
				Иначе
					НоваяЗадачаИлиДействие = ДанныеСтроки.Задача;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого ВыделеннаяСтрока Из Элементы.ДеревоЗадач.ВыделенныеСтроки Цикл
			ДанныеСтроки = ДеревоЗадач.НайтиПоИдентификатору(ВыделеннаяСтрока);
			Если ДанныеСтроки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			НовоеКоличестоВыделенныхСтрок = НовоеКоличестоВыделенныхСтрок + 1;
			Если ЗначениеЗаполнено(ДанныеСтроки.ДействиеЗадачи) Тогда
				ВыделенныеДействияЗадач.Добавить(ДанныеСтроки.ДействиеЗадачи);
			Иначе
				ВыделенныеЗадачи.Добавить(ДанныеСтроки.Задача);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// Сформируем параметры области просмотра.
	ПараметрыОбластиПросмотра = Новый Структура;
	ПараметрыОбластиПросмотра.Вставить("НоваяЗадачаИлиДействие", НоваяЗадачаИлиДействие);
	ПараметрыОбластиПросмотра.Вставить("ВыделенныеЗадачи", ВыделенныеЗадачи);
	ПараметрыОбластиПросмотра.Вставить("ВыделенныеДействияЗадач", ВыделенныеДействияЗадач);
	ПараметрыОбластиПросмотра.Вставить("НовоеКоличестоВыделенныхСтрок", НовоеКоличестоВыделенныхСтрок);
	ПараметрыОбластиПросмотра.Вставить("ОтображениеКарточкиЗадачи", ОтображениеКарточкиЗадачи);
	ПараметрыОбластиПросмотра.Вставить("ВидноДеревоПодзадач",
		Элементы.СтраницыПросмотра.ТекущаяСтраница = Элементы.СтраницаПодзадачи);
	ПараметрыОбластиПросмотра.Вставить("ВидноДеревоСоисполнителей",
		Элементы.СтраницыПросмотра.ТекущаяСтраница = Элементы.СтраницаСоисполнители);
	ПараметрыОбластиПросмотра.Вставить("ВидноИнструкцию",
		Элементы.СтраницыПросмотра.ТекущаяСтраница = Элементы.СтраницаИнструкция);
	ПараметрыОбластиПросмотра.Вставить("ВидноОбзорПриложения",
		Элементы.СтраницыПросмотра.ТекущаяСтраница = Элементы.СтраницаОбзорПриложения);
	ПараметрыОбластиПросмотра.Вставить("ТекущееПриложение", ТекущееПриложение());
	ПараметрыОбластиПросмотра.Вставить("ИдентификаторФормы", УникальныйИдентификатор);
	
	// Получим данные области просмотра.
	ДанныеОбластиПросмотра = ДанныеОбластиПросмотра(ПараметрыОбластиПросмотра);
	
	// При смене задачи сбрасываем строку обзора.
	Если ТекущаяЗадачаИлиДействие <> ДанныеОбластиПросмотра.ТекущаяЗадачаИлиДействие Тогда
		Для Каждого СтрокаДерева Из ДеревоПриложений.ПолучитьЭлементы() Цикл
			ЭтоСтрокаЗадача =
				СтрокаДерева.ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Задача");
			Если Не ЭтоСтрокаЗадача Тогда
				Продолжить;
			КонецЕсли;
			Элементы.ДеревоПриложений.ТекущаяСтрока = СтрокаДерева.ПолучитьИдентификатор();
			Элементы.СтраницыПросмотра.ТекущаяСтраница = Элементы.СтраницаОсновное;
			Прервать;
		КонецЦикла;
	КонецЕсли;
	
	// Разберём данные области просмотра.
	ТекущаяЗадача = ДанныеОбластиПросмотра.ТекущаяЗадача;
	ТекущаяЗадачаИлиДействие = ДанныеОбластиПросмотра.ТекущаяЗадачаИлиДействие;
	Объект = ДанныеОбластиПросмотра.Объект; // Временно, для работы учета трудозатрат.
	КоличествоВыделенныхСтрок = ДанныеОбластиПросмотра.КоличествоВыделенныхСтрок;
	ПараметрыУчетаВремени = ДанныеОбластиПросмотра.ПараметрыУчетаВремени;
	ОписаниеHTMLЗадачи = ДанныеОбластиПросмотра.ОписаниеHTMLЗадачи;
	
	// Если прав нет, то сбросим выделение, текущую строку оставим, чтобы не прыгало.
	Если ДанныеОбластиПросмотра.ЕстьОбъектыБезПрав И Элемент <> Неопределено Тогда
		Элемент.ВыделенныеСтроки.Очистить();
	КонецЕсли;
	
	// Страницы обзора (нет / один / несколько).
	Если КоличествоВыделенныхСтрок = 0 Тогда
		Элементы.СтраницыЗадачаОднаНесколькоНет.ТекущаяСтраница = Элементы.СтраницаНетЗадач;
	ИначеЕсли КоличествоВыделенныхСтрок = 1 Тогда
		Элементы.СтраницыЗадачаОднаНесколькоНет.ТекущаяСтраница = Элементы.СтраницаОднаЗадача;
	ИначеЕсли КоличествоВыделенныхСтрок > 1 Тогда
		Элементы.СтраницыЗадачаОднаНесколькоНет.ТекущаяСтраница = Элементы.СтраницаНесколькоЗадач;
	КонецЕсли;
	
	// Учет времени.
	ДатаНачалаХронометража = ПараметрыУчетаВремени.ДатаНачалаХронометража;
	ДатаКонцаХронометража = ПараметрыУчетаВремени.ДатаКонцаХронометража;
	ВключенХронометраж = ПараметрыУчетаВремени.ВключенХронометраж;
	ОпцияИспользоватьУчетВремени = ПараметрыУчетаВремени.ОпцияИспользоватьУчетВремени;
	ВидыРабот = ПараметрыУчетаВремени.ВидыРабот;
	СпособУказанияВремени = ПараметрыУчетаВремени.СпособУказанияВремени;
	Элементы.ПереключитьХронометраж.Пометка = ПараметрыУчетаВремени.ЭлементПереключитьХронометражПометка;
	
	// Доступность команд.
	Элементы.СписокЗадачЗакрыть.Доступность = ДанныеОбластиПросмотра.ЗакрытьДоступность;
	Элементы.СписокЗадачВернутьНаДоработку.Доступность = ДанныеОбластиПросмотра.ВернутьНаДоработкуДоступность;
	Элементы.СписокЗадачОтменить.Доступность = ДанныеОбластиПросмотра.ОтменитьДоступность;
	
	// Обновление отбора списка.
	ПредставлениеГруппаНоваяИлиВРаботе = ПредставлениеГруппаНоваяИлиВРаботе();
	ГруппаНоваяИлиВРаботе =
		ОбщегоНазначенияКлиентСервер.НайтиЭлементОтбораПоПредставлению(
			СписокДействияЗадач.Отбор.Элементы,
			ПредставлениеГруппаНоваяИлиВРаботе);
	Если ГруппаНоваяИлиВРаботе <> Неопределено Тогда
		ПредставлениеГруппаВРаботе = ПредставлениеГруппаВРаботе();
		ГруппаВРаботе = ОбщегоНазначенияКлиентСервер.НайтиЭлементОтбораПоПредставлению(
				ГруппаНоваяИлиВРаботе.Элементы,
				ПредставлениеГруппаВРаботе);
		Если ГруппаВРаботе <> Неопределено Тогда
			ПоказыватьВзятуюВРаботуТекущуюЗадачу =
				ЗначениеЗаполнено(ТекущаяЗадачаИлиДействие)
				И ТипЗнч(ТекущаяЗадачаИлиДействие) = Тип("ДокументСсылка.ДействиеЗадачи");
			ПредставлениеОтбораВРаботе = ПредставлениеОтбораВРаботе();
			ОбщегоНазначенияКлиентСервер.ИзменитьЭлементыОтбора(
				ГруппаВРаботе,
				"ВРаботе",
				ПредставлениеОтбораВРаботе,
				Истина,
				ВидСравненияКомпоновкиДанных.Равно,
				ПоказыватьВзятуюВРаботуТекущуюЗадачу);
			ПредставлениеОтбораДействиеЗадачи = ПредставлениеОтбораДействиеЗадачи();
			ОбщегоНазначенияКлиентСервер.ИзменитьЭлементыОтбора(
				ГруппаВРаботе,
				"ДействиеЗадачи",
				ПредставлениеОтбораДействиеЗадачи,
				ТекущаяЗадачаИлиДействие,
				ВидСравненияКомпоновкиДанных.Равно,
				ПоказыватьВзятуюВРаботуТекущуюЗадачу);
		КонецЕсли;
	КонецЕсли;
	
	// Сброс обзора файла.
	Элементы.ГруппаПредпросмотрУрезан.Видимость = Ложь;
	Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
	Элементы.ГруппаОбзорФайлаКомандыВертикально.Видимость = Ложь;
	Элементы.ГруппаОбзорФайлаОтступКоманд.Видимость = Истина;
	Если Не ДанныеОбластиПросмотра.ЭтоОбзорОднойЗадачи Тогда
		ОписаниеHTMLФайла = РаботаС_HTMLКлиентСервер.ПустойHTML();
	КонецЕсли;
	
	// Сброс обзора приложений.
	Если Не ДанныеОбластиПросмотра.ЭтоОбзорОднойЗадачи Тогда
		СтрокиДереваПриложений = ДеревоПриложений.ПолучитьЭлементы();
		СтрокиДереваПриложений.Очистить();
	КонецЕсли;
	
	// Дерево приложений.
	РаботаСЗадачамиКлиентСервер.ОбновитьДеревоПриложений(
		ДеревоПриложений,
		Элементы.ДеревоПриложений,
		ДанныеОбластиПросмотра.ДанныеДереваПриложений);
	
	// Область действия.
	ОбновитьОбластьДействия(ДанныеОбластиПросмотра.ДанныеОбластиДействия);
	
	// Команды выполнения.
	РаботаСЗадачамиКлиентСервер.ОбновитьКомандыВыполнения(
		Элементы,
		ДанныеКомандВыполнения,
		ДанныеОбластиПросмотра.ДанныеОбластиДействия.ДанныеВариантовВыполненияЗадачи);
	
	// Дерево подзадач.
	Если ДанныеОбластиПросмотра.ДанныеДереваПодзадач <> Неопределено Тогда
		ОбновитьПодзадачиПоДанным(ДанныеОбластиПросмотра.ДанныеДереваПодзадач);
	КонецЕсли;
	
	// Дерево соисполнителей.
	Если ДанныеОбластиПросмотра.ДанныеДереваСоисполнителей <> Неопределено Тогда
		ОбновитьСоисполнителейПоДанным(ДанныеОбластиПросмотра.ДанныеДереваСоисполнителей);
	КонецЕсли;
	
	// Инструкция.
	Если ДанныеОбластиПросмотра.Инструкция <> Неопределено Тогда
		ОбновитьИнструкциюПоДанным(ДанныеОбластиПросмотра.Инструкция);
	КонецЕсли;
	
	// Обзор приложения.
	Если ДанныеОбластиПросмотра.ДанныеОбзораОбъекта <> Неопределено Тогда
		ОбновитьОбзорПриложенияПоДанным(ДанныеОбластиПросмотра.ДанныеОбзораОбъекта);
	КонецЕсли;
	
	// Остальные области.
	Если Элементы.СтраницыПросмотра.ТекущаяСтраница = Элементы.СтраницаИстория Тогда
		ОбновитьЖизненныйЦикл();
	ИначеЕсли Элементы.СтраницыПросмотра.ТекущаяСтраница = Элементы.СтраницаДополнительныеРеквизиты Тогда
		ОбновитьДополнительныеРеквизиты();
	КонецЕсли;
	
	// Особенности мобильного клиента.
	Если ЭтоМобильныйКлиент Тогда
		МК_ОбработатьПоказСкрытиеДереваПриложений(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеОбластиПросмотра(ПараметрыОбластиПросмотра)
	
	// Разберём параметры области просмотра.
	НоваяЗадачаИлиДействие = ПараметрыОбластиПросмотра.НоваяЗадачаИлиДействие;
	ВыделенныеЗадачи = ПараметрыОбластиПросмотра.ВыделенныеЗадачи;
	ВыделенныеДействияЗадач = ПараметрыОбластиПросмотра.ВыделенныеДействияЗадач;
	НовоеКоличестоВыделенныхСтрок = ПараметрыОбластиПросмотра.НовоеКоличестоВыделенныхСтрок;
	ОтображениеКарточкиЗадачи = ПараметрыОбластиПросмотра.ОтображениеКарточкиЗадачи;
	ВидноДеревоПодзадач = ПараметрыОбластиПросмотра.ВидноДеревоПодзадач;
	ВидноДеревоСоисполнителей = ПараметрыОбластиПросмотра.ВидноДеревоСоисполнителей;
	ВидноИнструкцию = ПараметрыОбластиПросмотра.ВидноИнструкцию;
	ВидноОбзорПриложения = ПараметрыОбластиПросмотра.ВидноОбзорПриложения;
	ТекущееПриложение = ПараметрыОбластиПросмотра.ТекущееПриложение;
	ИдентификаторФормы = ПараметрыОбластиПросмотра.ИдентификаторФормы;
	
	// Проверим, что есть права на текущую и выделенные строки.
	ЕстьОбъектыБезПрав = Ложь;
	ОбъектыДляПроверкиПрав = Новый Массив;
	Если ЗначениеЗаполнено(НоваяЗадачаИлиДействие) Тогда
		ОбъектыДляПроверкиПрав.Добавить(НоваяЗадачаИлиДействие);
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОбъектыДляПроверкиПрав, ВыделенныеЗадачи, Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОбъектыДляПроверкиПрав, ВыделенныеДействияЗадач, Истина);
	ПользователиДляПроверкиПрав = Новый Массив;
	ПользователиДляПроверкиПрав.Добавить(Пользователи.ТекущийПользователь());
	ПраваПоОбъектам = ДокументооборотПраваДоступа.ПраваПользователейПоОбъектам(
		ОбъектыДляПроверкиПрав,
		Истина,
		ПользователиДляПроверкиПрав);
	Для Каждого ОбъектДляПроверкиПрав Из ОбъектыДляПроверкиПрав Цикл
		
		ПраваПоОбъекту = ПраваПоОбъектам.Найти(ОбъектДляПроверкиПрав, "ОбъектДоступа");
		Если ПраваПоОбъекту = Неопределено Или Не ПраваПоОбъекту.Чтение Тогда
			ЕстьОбъектыБезПрав = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	// Если прав нет, то сбросим выделение, текущую строку оставим, чтобы не прыгало.
	Если ЕстьОбъектыБезПрав Тогда
		НоваяЗадачаИлиДействие = Неопределено;
		ВыделенныеЗадачи.Очистить();
		ВыделенныеДействияЗадач.Очистить();
		НовоеКоличестоВыделенныхСтрок = 0;
	КонецЕсли;
	
	// Права проверли, строим обзор только задач или действий задач на которые есть права.
	УстановитьПривилегированныйРежим(Истина);
	
	// Если текущая строка не выделена, то текущей строкой считаем первую выделенную строку.
	Если ВыделенныеЗадачи.Количество() > 0 И ВыделенныеДействияЗадач.Количество() > 0 Тогда
		
		ТекущаяЗадачаИлиДействиеВыделена =
			ЗначениеЗаполнено(НоваяЗадачаИлиДействие)
			И (ВыделенныеЗадачи.Найти(НоваяЗадачаИлиДействие) <> Неопределено
				Или ВыделенныеДействияЗадач.Найти(НоваяЗадачаИлиДействие) <> Неопределено);
		
		Если Не ТекущаяЗадачаИлиДействиеВыделена Тогда
			
			Если ВыделенныеДействияЗадач.Количество() > 0 Тогда
				НоваяЗадачаИлиДействие = ВыделенныеДействияЗадач[0];
			ИначеЕсли ВыделенныеЗадачи.Количество() > 0 Тогда
				НоваяЗадачаИлиДействие = ВыделенныеЗадачи[0];
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Сформируем кэш области просмотра.
	КэшОбластиПросмотра = КэшиНаВремяВызова.ИнициализироватьКэшЗадачаОбластьПросмотра(НоваяЗадачаИлиДействие);
	НоваяЗадача = КэшОбластиПросмотра.Задача;
	Если КэшОбластиПросмотра.РеквизитыДействияЗадачи <> Неопределено Тогда
		ТекущееДействиеЗадачи = КэшОбластиПросмотра.ДействиеЗадачи;
		ТекущееДействиеЗадачиИсполнитель = КэшОбластиПросмотра.РеквизитыДействияЗадачи.Исполнитель;
	Иначе
		ТекущееДействиеЗадачи = Неопределено;
		ТекущееДействиеЗадачиИсполнитель = "";
	КонецЕсли;
	
	// Учет времени.
	ПараметрыУчетаВремени = УчетВремени.ПараметрыУчетаВремени(НоваяЗадачаИлиДействие);
	
	// Доступность команд.
	ДанныеДоступностиКоманд = РаботаСЗадачами.ДанныеДоступностиКомандЗадач(ВыделенныеЗадачи);
	
	ДанныеДоступностиКоманды = ДанныеДоступностиКоманд[Метаданные.Документы.Задача.Команды.Закрыть];
	ЗакрытьДоступность = ДанныеДоступностиКоманды.Доступность;
	
	ДанныеДоступностиКоманды = ДанныеДоступностиКоманд[Метаданные.Документы.Задача.Команды.ВернутьНаДоработку];
	ВернутьНаДоработкуДоступность = ДанныеДоступностиКоманды.Доступность;
	
	ДанныеДоступностиКоманды = ДанныеДоступностиКоманд[Метаданные.Документы.Задача.Команды.Отменить];
	ОтменитьДоступность = ДанныеДоступностиКоманды.Доступность;
	
	// Область обзора.
	ЭтоОбзорОднойЗадачи =
		НовоеКоличестоВыделенныхСтрок = 1
		И ОтображениеКарточкиЗадачи <> Перечисления.ВариантыОтображенияОбластиЧтения.НеОтображать;
	
	// Описание HTML задачи.
	Если ЭтоОбзорОднойЗадачи И КэшОбластиПросмотра.ЗадачаОбъект <> Неопределено Тогда
		ОписаниеHTMLЗадачи = КэшОбластиПросмотра.ЗадачаОбъект.ОписаниеHTML(ТекущееДействиеЗадачи, Ложь);
		Если ПараметрыСеанса.ЭтоМобильныйКлиент Тогда
			МК_КлиентСервер.АдаптироватьHtmlПодЭкранМобильногоПриНеобходимости(ОписаниеHTMLЗадачи);
		КонецЕсли;
	Иначе
		ОписаниеHTMLЗадачи = РаботаС_HTMLКлиентСервер.ПустойHTML();
	КонецЕсли;
	
	// Протоколирование просмотра.
	Если ЗначениеЗаполнено(ТекущееДействиеЗадачиИсполнитель) Тогда		
		Описание = СтрШаблон(
			НСтр("ru = 'Просмотр задачи участника %1'"),
			ТекущееДействиеЗадачиИсполнитель);
	Иначе
		Описание = НСтр("ru = 'Просмотр задачи'");
	КонецЕсли;	
	ПротоколированиеРаботыСотрудников.ЗаписатьОткрытие(НоваяЗадача, Описание);
	
	// Приложения.
	ДанныеДереваПриложений = РаботаСЗадачами.ДанныеДереваПриложений(НоваяЗадача, ТекущееДействиеЗадачи);
	
	// Область действия.
	МаксимальнаяДлинаОбщая = 430;
	ДанныеОбластиДействия = РаботаСЗадачами.ДанныеОбластиДействия(
		ТекущееДействиеЗадачи,
		ВыделенныеДействияЗадач,
		НоваяЗадача,
		МаксимальнаяДлинаОбщая);
	
	// Дерево подзадач.
	Если ВидноДеревоПодзадач Тогда
		ДанныеДереваПодзадач = РаботаСЗадачами.ДанныеДереваПодзадач(НоваяЗадача, ТекущееДействиеЗадачи);
	Иначе
		ДанныеДереваПодзадач = Неопределено;
	КонецЕсли;
	
	// Дерево соисполнителей.
	Если ВидноДеревоСоисполнителей Тогда
		ДанныеДереваСоисполнителей = РаботаСЗадачами.ДанныеДереваСоисполнителей(НоваяЗадача, ТекущееДействиеЗадачи);
	Иначе
		ДанныеДереваСоисполнителей = Неопределено;
	КонецЕсли;
	
	// Инструкция.
	Если ВидноИнструкцию Тогда
		Инструкция = РаботаСЗадачамиВызовСервера.ОписаниеHTMLИнструкции(ТекущееДействиеЗадачи);
	Иначе
		Инструкция =  Неопределено;
	КонецЕсли;
	
	// Обзор приложения.
	Если ВидноОбзорПриложения Тогда
		ДанныеОбзораОбъекта = ОбзорОбъектов.ДанныеОбзораОбъекта(ТекущееПриложение, ИдентификаторФормы);
	Иначе
		ДанныеОбзораОбъекта = Неопределено;
	КонецЕсли;
	
	// Сформируем данные области просмотра.
	ДанныеОбластиПросмотра = Новый Структура;
	ДанныеОбластиПросмотра.Вставить("ЕстьОбъектыБезПрав", ЕстьОбъектыБезПрав);
	ДанныеОбластиПросмотра.Вставить("ТекущаяЗадача", НоваяЗадача);
	ДанныеОбластиПросмотра.Вставить("ТекущаяЗадачаИлиДействие", НоваяЗадачаИлиДействие);
	ДанныеОбластиПросмотра.Вставить("Объект", Строка(НоваяЗадачаИлиДействие));
	ДанныеОбластиПросмотра.Вставить("КоличествоВыделенныхСтрок", НовоеКоличестоВыделенныхСтрок);
	ДанныеОбластиПросмотра.Вставить("ПараметрыУчетаВремени", ПараметрыУчетаВремени);
	ДанныеОбластиПросмотра.Вставить("ЗакрытьДоступность", ЗакрытьДоступность);
	ДанныеОбластиПросмотра.Вставить("ВернутьНаДоработкуДоступность", ВернутьНаДоработкуДоступность);
	ДанныеОбластиПросмотра.Вставить("ОтменитьДоступность", ОтменитьДоступность);
	ДанныеОбластиПросмотра.Вставить("ОписаниеHTMLЗадачи", ОписаниеHTMLЗадачи);
	ДанныеОбластиПросмотра.Вставить("ЭтоОбзорОднойЗадачи", ЭтоОбзорОднойЗадачи);
	ДанныеОбластиПросмотра.Вставить("ДанныеДереваПриложений", ДанныеДереваПриложений);
	ДанныеОбластиПросмотра.Вставить("ДанныеОбластиДействия", ДанныеОбластиДействия);
	ДанныеОбластиПросмотра.Вставить("ДанныеДереваПодзадач", ДанныеДереваПодзадач);
	ДанныеОбластиПросмотра.Вставить("ДанныеДереваСоисполнителей", ДанныеДереваСоисполнителей);
	ДанныеОбластиПросмотра.Вставить("Инструкция", Инструкция);
	ДанныеОбластиПросмотра.Вставить("ДанныеОбзораОбъекта", ДанныеОбзораОбъекта);
	
	Возврат ДанныеОбластиПросмотра;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьОбластьДействия(ДанныеОбластиДействия)
	
	ОбластьДействия = РаботаСЗадачамиКлиентСервер.НоваяОбластьДействия();
	ОбластьДействия.РезультатДействияТекстом = Элементы.РезультатДействияТекстом;
	ОбластьДействия.РезультатДействияТекстомКнопкаВыбора = Элементы.РезультатДействияТекстомКнопкаВыбора;
	ОбластьДействия.ПриложенияРезультата = Элементы.ПриложенияРезультата;
	ОбластьДействия.ГруппаКомандыПриложенийРезультата = Элементы.ГруппаКомандыПриложенийРезультата;
	ОбластьДействия.ВыбратьШаблонДляВыполненияЗадачи = Элементы.ВыбратьШаблонДляВыполненияЗадачи;
	ОбластьДействия.ОтменитьВыполнение = Элементы.ОтменитьВыполнение;
	ОбластьДействия.ГруппаИнформацияПроОтрицательные = Элементы.ГруппаИнформацияПроОтрицательные;
	ОбластьДействия.ВзятьВРаботу = Элементы.ВзятьВРаботу;
	ОбластьДействия.ОтменитьВзятиеВРаботу = Элементы.ФормаДокументДействиеЗадачиОтменитьВзятиеВРаботу;
	ОбластьДействия.МаксимальнаяДлинаОбщая = 430;
	ОбластьДействия.ПодменюФлаги = Элементы.СписокДействияПодменюФлаги;
	ОбластьДействия.Перенаправить = Элементы.ФормаДокументДействиеЗадачиПеренаправить;
	ОбластьДействия.ДокументЗадачаСоздатьПодзадачу = Элементы.ФормаСоздатьНаОснованииПодзадачу;
	ОбластьДействия.СоздатьПодзадачу = Элементы.ДокументЗадачаСоздатьПодзадачу;
	ОбластьДействия.ФормаДобавитьУчастников = Элементы.ФормаДобавитьУчастников;
	ОбластьДействия.КомандаДобавитьУчастников = Элементы.КомандаДобавитьУчастников;
	ОбластьДействия.ГруппаОбъектИзДругойСистемы = Элементы.ГруппаОбъектИзДругойСистемы;
	ОбластьДействия.СогласоватьПереносСрока = Элементы.ФормаЗадачаЗадачаИсполнителяСогласоватьПереносСрока;
	ОбластьДействия.СтрокаПриложенияРезультата1 =
		Элементы.СтрокаПриложенияРезультата1;
	ОбластьДействия.ПриложенияРезультатаПриложение1 =
		Элементы.ПриложенияРезультатаПриложение1;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиОткрытьПриложениеРезультата1 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюКартинкиОткрытьПриложениеРезультата1;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиУдалить1 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюКартинкиУдалить1;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиРедактироватьФайлРезультата1 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюКартинкиРедактироватьФайлРезультата1;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиЗакончитьРедактированиеФайла1 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюКартинкиЗакончитьРедактированиеФайла1;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиОсвободитьПриложениеРезультата1 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюКартинкиОсвободитьПриложениеРезультата1;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиОбновитьИзФайлаНаДискеФайлРезультата1 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюКартинкиОбновитьИзФайлаНаДискеФайлРезультата1;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиСохранитьКакФайлРезультата1 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюКартинкиСохранитьКакФайлРезультата1;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОткрытьПриложениеРезультата1 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОткрытьПриложениеРезультата1;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаУдалить1 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюЗаголовкаУдалить1;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаРедактироватьФайлРезультата1 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюЗаголовкаРедактироватьФайлРезультата1;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаЗакончитьРедактированиеФайла1 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюЗаголовкаЗакончитьРедактированиеФайла1;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОсвободитьПриложениеРезультата1 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОсвободитьПриложениеРезультата1;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОбновитьИзФайлаНаДискеФайл1 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОбновитьИзФайлаНаДискеФайл1;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаСохранитьКакФайлРезультата1 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюЗаголовкаСохранитьКакФайлРезультата1;
	ОбластьДействия.СтрокаПриложенияРезультата2 =
		Элементы.СтрокаПриложенияРезультата2;
	ОбластьДействия.ПриложенияРезультатаПриложение2 =
		Элементы.ПриложенияРезультатаПриложение2;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиОткрытьПриложениеРезультата2 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюКартинкиОткрытьПриложениеРезультата2;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиУдалить2 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюКартинкиУдалить2;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиРедактироватьФайлРезультата2 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюКартинкиРедактироватьФайлРезультата2;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиЗакончитьРедактированиеФайла2 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюКартинкиЗакончитьРедактированиеФайла2;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиОсвободитьПриложениеРезультата2 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюКартинкиОсвободитьПриложениеРезультата2;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиОбновитьИзФайлаНаДискеФайлРезультата2 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюКартинкиОбновитьИзФайлаНаДискеФайлРезультата2;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиСохранитьКакФайлРезультата2 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюКартинкиСохранитьКакФайлРезультата2;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОткрытьПриложениеРезультата2 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОткрытьПриложениеРезультата2;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаУдалить2 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюЗаголовкаУдалить2;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаРедактироватьФайлРезультата2 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюЗаголовкаРедактироватьФайлРезультата2;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаЗакончитьРедактированиеФайла2 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюЗаголовкаЗакончитьРедактированиеФайла2;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОсвободитьПриложениеРезультата2 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОсвободитьПриложениеРезультата2;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОбновитьИзФайлаНаДискеФайл2 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОбновитьИзФайлаНаДискеФайл2;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаСохранитьКакФайлРезультата2 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюЗаголовкаСохранитьКакФайлРезультата2;
	ОбластьДействия.СтрокаПриложенияРезультата3 =
		Элементы.СтрокаПриложенияРезультата3;
	ОбластьДействия.ПриложенияРезультатаПриложение3 =
		Элементы.ПриложенияРезультатаПриложение3;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиОткрытьПриложениеРезультата3 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюКартинкиОткрытьПриложениеРезультата3;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиУдалить3 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюКартинкиУдалить3;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиРедактироватьФайлРезультата3 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюКартинкиРедактироватьФайлРезультата3;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиЗакончитьРедактированиеФайла3 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюКартинкиЗакончитьРедактированиеФайла3;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиОсвободитьПриложениеРезультата3 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюКартинкиОсвободитьПриложениеРезультата3;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиОбновитьИзФайлаНаДискеФайлРезультата3 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюКартинкиОбновитьИзФайлаНаДискеФайлРезультата3;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюКартинкиСохранитьКакФайлРезультата3 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюКартинкиСохранитьКакФайлРезультата3;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОткрытьПриложениеРезультата3 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОткрытьПриложениеРезультата3;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаУдалить3 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюЗаголовкаУдалить3;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаРедактироватьФайлРезультата3 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюЗаголовкаРедактироватьФайлРезультата3;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаЗакончитьРедактированиеФайла3 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюЗаголовкаЗакончитьРедактированиеФайла3;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОсвободитьПриложениеРезультата3 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОсвободитьПриложениеРезультата3;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОбновитьИзФайлаНаДискеФайл3 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюЗаголовкаОбновитьИзФайлаНаДискеФайл3;
	ОбластьДействия.ПриложенияРезультатаКонтекстноеМенюЗаголовкаСохранитьКакФайлРезультата3 =
		Элементы.ПриложенияРезультатаКонтекстноеМенюЗаголовкаСохранитьКакФайлРезультата3;
	
	ЗначенияРеквизитовОбласти = РаботаСЗадачамиКлиентСервер.ОбновитьОбластьДействия(
		ОбластьДействия,
		ДанныеОбластиДействия);
	РезультатДействияТекстом = ЗначенияРеквизитовОбласти.РезультатДействияТекстом;
	ПриложенияРезультата.Очистить();
	Для Каждого СтруктураПриложения Из ЗначенияРеквизитовОбласти.ПриложенияРезультата Цикл
		СтрокаПриложения = ПриложенияРезультата.Добавить();
		СтрокаПриложения.Приложение = СтруктураПриложения.Приложение;
		СтрокаПриложения.ИндексКартинки = СтруктураПриложения.ИндексКартинки;
		СтрокаПриложения.РедактируетТекущийПользователь = СтруктураПриложения.РедактируетТекущийПользователь;
		СтрокаПриложения.Редактирует = СтруктураПриложения.Редактирует;
	КонецЦикла;
	ДанныеГрупповыхДействий.ЗагрузитьЗначения(ЗначенияРеквизитовОбласти.ДанныеГрупповыхДействий);
	ДействиеОбработки = ЗначенияРеквизитовОбласти.ДействиеОбработки;
	ВерсияДанныхТекущегоДействияЗадачи = ЗначенияРеквизитовОбласти.ВерсияДанных;
	ТекущийИсточникДействия = ЗначенияРеквизитовОбласти.ТекущийИсточникДействия;
	
	ШаблоныДляВыбора.Очистить();
	Для Каждого СтрокаШаблона Из ЗначенияРеквизитовОбласти.ШаблоныДляВыбора Цикл
		ШаблоныДляВыбора.Добавить(СтрокаШаблона.Значение, СтрокаШаблона.Представление);
	КонецЦикла;
	
	ОсобаяОбработкаОткрытияФайлов = ЗначенияРеквизитовОбласти.ОсобаяОбработкаОткрытияФайлов;
	ПриложенияРезультатаИзменятьСоставСтрок = ЗначенияРеквизитовОбласти.ПриложенияРезультатаИзменятьСоставСтрок;
	
	Элементы.ГруппаРезультатДействияТекстом.Видимость = Элементы.РезультатДействияТекстом.Видимость;
	
	Если ЭтоМобильныйКлиент Тогда
		
		Элементы.МК_СтраницаРезультат.Видимость = Элементы.ГруппаРезультатДействияТекстом.Видимость;
		Элементы.МК_КнопкаСтраницаРезультат.Видимость = Элементы.ГруппаРезультатДействияТекстом.Видимость;
		
		МК_ПоказатьСкрытьПриложенияРезультатаНаСервере();
		
		Элементы.МК_ЗаполнитьПоШаблону.Видимость = Элементы.РезультатДействияТекстомКнопкаВыбора.Видимость;
		МК_ОбновитьКнопкиВыполнения();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДополнительныеРеквизитыКлиент()
	
	ТекущиеДанные = Элементы.ДеревоПриложений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено
		Или ТекущиеДанные.ТипСтроки <> ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.ДополнительныеРеквизиты") Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьДополнительныеРеквизиты();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДополнительныеРеквизиты()
	
	Если Не ЗначениеЗаполнено(ТекущийИсточникДействия)
		Или ТипЗнч(ТекущийИсточникДействия) <> Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СвойстваОбъекта = УправлениеСвойствами.СвойстваОбъекта(ТекущийИсточникДействия);
	Если СвойстваОбъекта.Количество() > 0 Тогда
		
		ТекущийИсточникДействияОбъект = ТекущийИсточникДействия.ПолучитьОбъект();
		ЗначениеВРеквизитФормы(ТекущийИсточникДействияОбъект, "ТекущийИсточникДействияДанные");
		
		ТекущийКлючНазначенияИспользования = КлючНазначенияИспользования;
		УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(
			ЭтотОбъект,
			ТекущийИсточникДействияДанные);
		КлючНазначенияИспользования = ТекущийКлючНазначенияИспользования;
		
		ВерсияДанныхТекущейЗадачи = ТекущийИсточникДействияОбъект.ВерсияДанных;
		
	КонецЕсли;
	
	Элементы.СтраницыПросмотра.ТекущаяСтраница = Элементы.СтраницаДополнительныеРеквизиты;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтображениеКарточкиЗадачи()
	
	Если СтрНачинаетсяС(КлючНазначенияИспользования, "Выбор") Тогда
		ОтображениеКарточкиЗадачи = Перечисления.ВариантыОтображенияОбластиЧтения.НеОтображать;
	Иначе
		ОтображениеКарточкиЗадачи =
			РаботаСЗадачами.ПолучитьПерсональнуюНастройку("ОтображениеКарточкиЗадачи");
	КонецЕсли;
	СписокДействияЗадач.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить(
		"ОтображениеКарточкиЗадачи",
		ОтображениеКарточкиЗадачи);
	
	Если ОтображениеКарточкиЗадачи = Перечисления.ВариантыОтображенияОбластиЧтения.Справа Тогда
		
		Элементы.КонтейнерКоманднойПанелиОтступ.Видимость = Истина;
		
		Элементы.ГруппаСписок.РастягиватьПоГоризонтали = Ложь;
		
		Элементы.ОбластьПросмотра.Видимость = Истина;
		
		Если ЭтоМобильныйКлиент Тогда
			Элементы.ОбластьПросмотра.Видимость = ЭтоМобильноеУстройствоСБольшимЭкраном;
		КонецЕсли;
		
		Элементы.СписокДействияЗадачАвторСтрокой.РастягиватьПоГоризонтали = Истина;
		
		Элементы.СписокДействияЗадачГруппаЦентральнаяКолонка.Группировка =
			ГруппировкаКолонок.Вертикальная;
		
		Элементы.СписокДействияЗадачГруппаПриоритетСостояние.Группировка =
			ГруппировкаКолонок.Вертикальная;
		
		Элементы.СписокДействияЗадачЗаголовок.Высота = 2;
		
		Элементы.Переместить(
			Элементы.СписокДействияЗадачИндексКартинкиПриоритета, 
			Элементы.СписокДействияЗадачГруппаВтораяСтрока);
		Элементы.Переместить(
			Элементы.СписокДействияЗадачИндексКартинкиСостояния,
			Элементы.СписокДействияЗадачГруппаВтораяСтрока);
		
		Элементы.Переместить(
			Элементы.СписокДействияЗадачЕстьПодзадачи,
			Элементы.СписокДействияЗадачГруппаВтораяСтрока);
		Элементы.Переместить(
			Элементы.СписокДействияЗадачИндексКартинкиКонтроля,
			Элементы.СписокДействияЗадачГруппаВтораяСтрока);
		Элементы.Переместить(
			Элементы.СписокДействияЗадачИндексКартинкиФлага,
			Элементы.СписокДействияЗадачГруппаВтораяСтрока);
		
		Элементы.Переместить(
			Элементы.СписокДействияЗадачАвторСтрокой,
			Элементы.СписокДействияЗадачГруппаТретьяСтрока);
		Элементы.Переместить(
			Элементы.СписокДействияЗадачИсполнительСтрокой,
			Элементы.СписокДействияЗадачГруппаТретьяСтрока);
		
		Элементы.СписокЗадачЗаголовок.Высота = 2;
		
		Элементы.СписокЗадачИсполнители.Ширина = 20;
		
		Элементы.Переместить(
			Элементы.СписокЗадачИсполнители,
			Элементы.СписокЗадачГруппаТретьяСтрока);
		
		Элементы.Переместить(
			Элементы.СписокЗадачИндексКартинкиПриоритета,
			Элементы.СписокЗадачГруппаВтораяСтрока);
		Элементы.Переместить(
			Элементы.СписокЗадачИндексКартинкиСостояния,
			Элементы.СписокЗадачГруппаВтораяСтрока);
		
		Элементы.Переместить(
			Элементы.СписокЗадачЕстьПодзадачи,
			Элементы.СписокЗадачГруппаВтораяСтрока);
		Элементы.Переместить(
			Элементы.СписокЗадачИндексКартинкиКонтроля,
			Элементы.СписокЗадачГруппаВтораяСтрока);
			
		Элементы.Переместить(
			Элементы.СписокЗадачИндексКартинкиФлага,
			Элементы.СписокЗадачГруппаВтораяСтрока);
		
		Элементы.СписокЗадачГруппаПриоритетСостояние.Группировка =
			ГруппировкаКолонок.Вертикальная;
		
		Элементы.СписокЗадачГруппаЦентральнаяКолонка.Группировка =
			ГруппировкаКолонок.Вертикальная;
		
		Элементы.СписокЗадачГруппаПодзадачиКонтроль.Группировка =
			ГруппировкаКолонок.Вертикальная;
		
		Элементы.СписокЗадачИсполнители.РастягиватьПоГоризонтали = Истина;
		
	Иначе
		Элементы.ГруппаСписок.РастягиватьПоГоризонтали = Истина;
		
		Если Не ЭтоМобильныйКлиент Тогда
			
			Элементы.КонтейнерКоманднойПанелиОтступ.Видимость = Ложь;
			
			Элементы.ГруппаСписок.РастягиватьПоГоризонтали = Истина;
			
			Элементы.ОбластьПросмотра.Видимость = Ложь;
			
			Элементы.СписокДействияЗадачАвторСтрокой.РастягиватьПоГоризонтали = Ложь;
			
			Элементы.СписокДействияЗадачГруппаЦентральнаяКолонка.Группировка =
				ГруппировкаКолонок.Горизонтальная;
			
			Элементы.СписокДействияЗадачГруппаПриоритетСостояние.Группировка =
				ГруппировкаКолонок.Горизонтальная;
			
			Элементы.СписокДействияЗадачЗаголовок.Высота = 1;
			
			Элементы.Переместить(
				Элементы.СписокДействияЗадачИндексКартинкиПриоритета, 
				Элементы.СписокДействияЗадачГруппаПриоритетСостояние);
			Элементы.Переместить(
				Элементы.СписокДействияЗадачИндексКартинкиСостояния, 
				Элементы.СписокДействияЗадачГруппаПриоритетСостояние);
			
			Элементы.Переместить(
				Элементы.СписокДействияЗадачЕстьПодзадачи, 
				Элементы.СписокДействияЗадач);
			Элементы.Переместить(
				Элементы.СписокДействияЗадачИндексКартинкиКонтроля, 
				Элементы.СписокДействияЗадач);
			Элементы.Переместить(
				Элементы.СписокДействияЗадачИндексКартинкиФлага, 
				Элементы.СписокДействияЗадач);
			
			Элементы.Переместить(
				Элементы.СписокДействияЗадачАвторСтрокой,
				Элементы.СписокДействияЗадачГруппаВтораяСтрока);
			Элементы.Переместить(
				Элементы.СписокДействияЗадачИсполнительСтрокой,
				Элементы.СписокДействияЗадачГруппаВтораяСтрока);
			
			Элементы.СписокЗадачЗаголовок.Высота = 1;
			
			Элементы.СписокЗадачИсполнители.Ширина = 30;
			
			Элементы.Переместить(
				Элементы.СписокЗадачИсполнители,
				Элементы.СписокЗадачГруппаВтораяСтрока,
				Элементы.СписокЗадачДата);
			
			Элементы.Переместить(
				Элементы.СписокЗадачИндексКартинкиПриоритета, 
				Элементы.СписокЗадачГруппаПриоритетСостояние);
			Элементы.Переместить(
				Элементы.СписокЗадачИндексКартинкиСостояния, 
				Элементы.СписокЗадачГруппаПриоритетСостояние);
				
			Элементы.Переместить(
				Элементы.СписокЗадачЕстьПодзадачи, 
				Элементы.СписокЗадачГруппаПодзадачиКонтроль);
			Элементы.Переместить(
				Элементы.СписокЗадачИндексКартинкиКонтроля, 
				Элементы.СписокЗадачГруппаПодзадачиКонтроль);
			
			Элементы.Переместить(
				Элементы.СписокЗадачИндексКартинкиФлага, 
				Элементы.СписокЗадач);
			
			Элементы.СписокЗадачГруппаПриоритетСостояние.Группировка =
				ГруппировкаКолонок.Горизонтальная;
				
			Элементы.СписокЗадачГруппаЦентральнаяКолонка.Группировка =
				ГруппировкаКолонок.Горизонтальная;
				
			Элементы.СписокЗадачГруппаПодзадачиКонтроль.Группировка =
				ГруппировкаКолонок.Горизонтальная;
			
			Элементы.СписокЗадачИсполнители.РастягиватьПоГоризонтали = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьИтоги();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПараметрыБыстрогоПоиска()
	
	// Настройка быстрого поиска.
	БыстрыйПоиск.Очистить();
	
	НоваяСтрока = БыстрыйПоиск.Добавить();
	НоваяСтрока.Параметр = "Состояние";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Состояние:'");
	НоваяСтрока.Тип = "ПеречислениеСсылка.ОтборыПоСтатусуЗадач, СправочникСсылка.СостоянияЗадач";
	НоваяСтрока.ЗначениеПоУмолчанию = "";
	НоваяСтрока.Значение = НоваяСтрока.ЗначениеПоУмолчанию;
	НоваяСтрока.Сортировка = НоваяСтрока.ПредставлениеПараметра;
	
	НоваяСтрока = БыстрыйПоиск.Добавить();
	НоваяСтрока.Параметр = "Автор";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Автор:'");
	НоваяСтрока.Тип = "СправочникСсылка.Сотрудники";
	НоваяСтрока.ЗначениеПоУмолчанию = Справочники.Сотрудники.ПустаяСсылка();
	НоваяСтрока.Значение = НоваяСтрока.ЗначениеПоУмолчанию;
	НоваяСтрока.Сортировка = НоваяСтрока.ПредставлениеПараметра;
	
	НоваяСтрока = БыстрыйПоиск.Добавить();
	НоваяСтрока.Параметр = "ВидДействия";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Вид задачи:'");
	НоваяСтрока.Тип = "СправочникСсылка.ВидыЗадач, СправочникСсылка.ВидыДействийЗадач";
	НоваяСтрока.ЗначениеПоУмолчанию = Справочники.ВидыЗадач.ПустаяСсылка();
	НоваяСтрока.Значение = НоваяСтрока.ЗначениеПоУмолчанию;
	НоваяСтрока.Сортировка = НоваяСтрока.ПредставлениеПараметра;
	
	НоваяСтрока = БыстрыйПоиск.Добавить();
	НоваяСтрока.Параметр = "ВидПриложения";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Приложение:'");
	НоваяСтрока.Тип =
		"СправочникСсылка.ВидыДокументов, СправочникСсылка.ВидыМероприятий, СправочникСсылка.ВидыПроектов";
	НоваяСтрока.ЗначениеПоУмолчанию = Справочники.ВидыДокументов.ПустаяСсылка();
	НоваяСтрока.Значение = НоваяСтрока.ЗначениеПоУмолчанию;
	НоваяСтрока.Сортировка = НоваяСтрока.ПредставлениеПараметра;
	
	НоваяСтрока = БыстрыйПоиск.Добавить();
	НоваяСтрока.Параметр = "ДатаС";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Дата с:'");
	НоваяСтрока.Тип = "Дата";
	НоваяСтрока.ЗначениеПоУмолчанию = Дата(1,1,1);
	НоваяСтрока.Значение = НоваяСтрока.ЗначениеПоУмолчанию;
	НоваяСтрока.Сортировка = НСтр("ru = 'Дата'") + "1";
	
	НоваяСтрока = БыстрыйПоиск.Добавить();
	НоваяСтрока.Параметр = "ДатаПо";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Дата по:'");
	НоваяСтрока.Тип = "Дата";
	НоваяСтрока.ЗначениеПоУмолчанию = Дата(1,1,1);
	НоваяСтрока.Значение = НоваяСтрока.ЗначениеПоУмолчанию;
	НоваяСтрока.Сортировка = НСтр("ru = 'Дата'") + "2";
	
	НоваяСтрока = БыстрыйПоиск.Добавить();
	НоваяСтрока.Параметр = "Исполнитель";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Исполнитель:'");
	НоваяСтрока.Тип = "СправочникСсылка.Сотрудники";
	НоваяСтрока.ЗначениеПоУмолчанию = Справочники.Сотрудники.ПустаяСсылка();
	НоваяСтрока.Значение = НоваяСтрока.ЗначениеПоУмолчанию;
	НоваяСтрока.Сортировка = НоваяСтрока.ПредставлениеПараметра;
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда
		НоваяСтрока = БыстрыйПоиск.Добавить();
		НоваяСтрока.Параметр = "Проект";
		НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Проект:'");
		НоваяСтрока.Тип = "СправочникСсылка.Проекты";
		НоваяСтрока.ЗначениеПоУмолчанию = Справочники.Проекты.ПустаяСсылка();
		НоваяСтрока.Значение = НоваяСтрока.ЗначениеПоУмолчанию;
		НоваяСтрока.Сортировка = НоваяСтрока.ПредставлениеПараметра;
	КонецЕсли;
	
	НоваяСтрока = БыстрыйПоиск.Добавить();
	НоваяСтрока.Параметр = "Флаг";
	НоваяСтрока.ПредставлениеПараметра = НСтр("ru = 'Флаг:'");
	НоваяСтрока.Тип = "ПеречислениеСсылка.ФлагиОбъектов";
	НоваяСтрока.ЗначениеПоУмолчанию = Перечисления.ФлагиОбъектов.ПустаяСсылка();
	НоваяСтрока.Значение = НоваяСтрока.ЗначениеПоУмолчанию;
	НоваяСтрока.Сортировка = НоваяСтрока.ПредставлениеПараметра;
	
	БыстрыйПоиск.Сортировать("Сортировка");
	
	// Списки выбора быстрого поиска.
	СпискиВыбораБыстрогоПоиска = Новый Структура;
	
	СписокВыбораСостояний = Новый СписокЗначений;
	СписокВыбораСостояний = СписокВыбораСостоянийНаСервере();
	
	СпискиВыбораБыстрогоПоиска.Вставить("Состояние", СписокВыбораСостояний);
	
	СписокВыбораФлагов = Новый СписокЗначений;
	Для Каждого Флаг Из Перечисления.ФлагиОбъектов Цикл
		
		СписокВыбораФлагов.Добавить(
			Флаг,
			Строка(Флаг),,
			Перечисления.ФлагиОбъектов.КартинкаФлага(Флаг));
		
	КонецЦикла;
	
	СпискиВыбораБыстрогоПоиска.Вставить("Флаг", СписокВыбораФлагов);
	
	СписокВыбораВидовЗадач = Новый СписокЗначений;
	СписокВыбораВидовДействий = Новый СписокЗначений;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВидыЗадач.Ссылка КАК ВидЗадачи,
		|	ВидыЗадач.Представление КАК ВидЗадачиПредставление,
		|	ВидыЗадачВидыДействий.ВидДействия КАК ВидДействия,
		|	ПРЕДСТАВЛЕНИЕ(ВидыЗадачВидыДействий.ВидДействия) КАК ВидДействияПредставление
		|ИЗ
		|	Справочник.ВидыЗадач.ВидыДействий КАК ВидыЗадачВидыДействий
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыЗадач КАК ВидыЗадач
		|		ПО ВидыЗадачВидыДействий.Ссылка = ВидыЗадач.Ссылка
		|ГДЕ
		|	ВидыЗадач.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидЗадачи,
		|	ВидДействия");
	
	ОбработанныеВидыЗадач = Новый Соответствие;
	ОбработанныеВидыДействий = Новый Соответствие;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ОбработанныеВидыЗадач[Выборка.ВидЗадачи] <> Истина Тогда
			
			СписокВыбораВидовЗадач.Добавить(
				Выборка.ВидЗадачи,
				Строка(Выборка.ВидЗадачиПредставление));
			
			ОбработанныеВидыЗадач[Выборка.ВидЗадачи] = Истина;
			
		КонецЕсли;
		
		Если ОбработанныеВидыДействий[Выборка.ВидДействия] <> Истина Тогда
			
			СписокВыбораВидовДействий.Добавить(
				Выборка.ВидДействия,
				Строка(Выборка.ВидДействияПредставление));
			
			ОбработанныеВидыДействий[Выборка.ВидДействия] = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СписокВыбораВидовЗадач.СортироватьПоПредставлению();
	СпискиВыбораБыстрогоПоиска.Вставить("ВидЗадачи", СписокВыбораВидовЗадач);
	
	СписокВыбораВидовДействий.СортироватьПоПредставлению();
	СпискиВыбораБыстрогоПоиска.Вставить("ВидДействияЗадачи", СписокВыбораВидовДействий);
	
	СпискиВыбораБыстрогоПоиска.Вставить("ВидДействия", СписокВыбораВидовДействий);
	
	// Предыдущие значения быстрого поиска.
	НастройкиОтбора = РаботаСЗадачами.ПолучитьПерсональнуюНастройку(
		"БыстрыйПоиск" + КлючНазначенияИспользования);
		
	Для Каждого Элемент Из НастройкиОтбора Цикл
		
		Если Не ЗначениеЗаполнено(Элемент.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(Элемент) = Тип("Структура") Тогда
			
			Если ТипЗнч(Элемент.Значение) <> Тип("СписокЗначений") Тогда
				СписокВыбора = Неопределено;
				СпискиВыбораБыстрогоПоиска.Свойство(Элемент.Параметр, СписокВыбора);
				Если СписокВыбора <> Неопределено
					И СписокВыбора.НайтиПоЗначению(Элемент.Значение) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			Для Каждого Строка Из БыстрыйПоиск Цикл
				
				Если Строка.Фиксированный Тогда
					Продолжить;
				КонецЕсли;
				
				Если Строка.Параметр = Элемент.Параметр Тогда
					
					Если ТипЗнч(Элемент.Значение) = Тип("СписокЗначений") Тогда                    
						Строка.Значение = Элемент.Значение;
					Иначе	
					
						ОписаниеТипаПараметра = Новый ОписаниеТипов(Строка.Тип);
						Строка.Значение = ОписаниеТипаПараметра.ПривестиЗначение(Элемент.Значение);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СпискиВыбораБыстрогоПоискаКэш = ОбщегоНазначения.СкопироватьРекурсивно(СпискиВыбораБыстрогоПоиска);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьСпискиВыбораБыстрогоПоиска(ПараметрыОтбораСписка)
	
	СпискиВыбораБыстрогоПоиска = ОбщегоНазначения.СкопироватьРекурсивно(СпискиВыбораБыстрогоПоискаКэш);
	Если ПараметрыОтбораСписка.ТипОтбора = Перечисления.ТипыОтбораГруппировокЗадач.Задачи Тогда
		СпискиВыбораБыстрогоПоиска.ВидДействия = СпискиВыбораБыстрогоПоиска.ВидЗадачи;
	Иначе
		СпискиВыбораБыстрогоПоиска.ВидДействия = СпискиВыбораБыстрогоПоиска.ВидДействияЗадачи;
	КонецЕсли;
	
	УстановитьФиксированныеСпискиОтборовПоВидуФормы(ПараметрыОтбораСписка);
	УстановитьФиксированныеСпискиОтборовПоГруппировкам(ПараметрыОтбораСписка);
	
	ОбновитьПредставлениеБыстрогоПоиска();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФиксированныеСпискиОтборовПоВидуФормы(ПараметрыОтбораСписка)
	
	Если СтрНачинаетсяС(КлючНазначенияИспользования, "ЗадачиМне")
		Или СтрНачинаетсяС(КлючНазначенияИспользования, "ЗадачиПодчиненных") Тогда
		
		ЗаполнитьСписокВыбораБыстрогоПоиска(ТипБыстрогоПоискаИсполнитель(), ПараметрыОтбораСписка.Исполнитель);
		ЗаполнитьСписокВыбораБыстрогоПоиска(ТипБыстрогоПоискаСостояние(), ПараметрыОтбораСписка.Состояние);
		
	ИначеЕсли СтрНачинаетсяС(КлючНазначенияИспользования, "ЗадачиОтМеня") Тогда
		
		ЗаполнитьСписокВыбораБыстрогоПоиска(ТипБыстрогоПоискаАвтор(), ПараметрыОтбораСписка.Автор);
		ЗаполнитьСписокВыбораБыстрогоПоиска(ТипБыстрогоПоискаСостояние(), ПараметрыОтбораСписка.Состояние);
		
	Иначе
		
		Если ЗначениеЗаполнено(ТекущаяГруппировка) Тогда
			ПроектТекущейГруппировки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяГруппировка, "Проект");
		Иначе
			ПроектТекущейГруппировки = Справочники.Проекты.ПустаяСсылка();
		КонецЕсли;
		
		Если СтрНачинаетсяС(КлючНазначенияИспользования, "ЗадачиПоПроектам")
			Или ЗначениеЗаполнено(ПроектТекущейГруппировки) Тогда
			
			Если ЗначениеЗаполнено(ПроектТекущейГруппировки)
				И ТипЗнч(ПроектТекущейГруппировки) <> Тип("ПеречислениеСсылка.ОтборыПоПроектамЗадач") Тогда
				
				ПроектОтбор = ПроектТекущейГруппировки;
			Иначе
				ПроектОтбор = ПараметрыОтбораСписка.Проект;
			КонецЕсли;
			
			ЗаполнитьСписокВыбораБыстрогоПоиска(ТипБыстрогоПоискаПроект(), ПроектОтбор);
			ЗаполнитьСписокВыбораБыстрогоПоиска(ТипБыстрогоПоискаИсполнитель(), ПараметрыОтбораСписка.Исполнитель);
			ЗаполнитьСписокВыбораБыстрогоПоиска(ТипБыстрогоПоискаСостояние(), ПараметрыОтбораСписка.Состояние);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФиксированныеСпискиОтборовПоГруппировкам(ПараметрыОтбораСписка)
	
	Если ТекущийВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоАвтору
		Или ДополнительныйВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоАвтору Тогда
		
		ЗаполнитьСписокВыбораБыстрогоПоиска(ТипБыстрогоПоискаАвтор(), ПараметрыОтбораСписка.Автор);
		
	КонецЕсли;
		
	Если ТекущийВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоВидуЗадачи
		Или ДополнительныйВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоВидуЗадачи Тогда
		
		КлючВидДействияЗадачи = ?(ЗначениеЗаполнено(ПараметрыОтбораСписка.ВидДействия),
			ТипБыстрогоПоискаВидДействия(),
			ТипБыстрогоПоискаВидЗадачи());
		ВидДействияЗадачи = ?(ЗначениеЗаполнено(ПараметрыОтбораСписка.ВидДействия),
			ПараметрыОтбораСписка.ВидДействия,
			ПараметрыОтбораСписка.ВидЗадачи);
		
		ЗаполнитьСписокВыбораБыстрогоПоиска(КлючВидДействияЗадачи, ВидДействияЗадачи);
		
	КонецЕсли;
		
	Если ТекущийВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоИсполнителю
		Или ДополнительныйВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоИсполнителю Тогда
		
		ЗаполнитьСписокВыбораБыстрогоПоиска(ТипБыстрогоПоискаИсполнитель(), ПараметрыОтбораСписка.Исполнитель);
		
	КонецЕсли;
		
	Если ТекущийВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоПроекту
		Или ДополнительныйВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоПроекту Тогда
		
		ЗаполнитьСписокВыбораБыстрогоПоиска(ТипБыстрогоПоискаПроект(), ПараметрыОтбораСписка.Проект);
		
	КонецЕсли;
		
	Если ТекущийВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоФлагу
		Или ДополнительныйВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоФлагу Тогда
		
		ЗаполнитьСписокВыбораБыстрогоПоиска(ТипБыстрогоПоискаФлаг(), ПараметрыОтбораСписка.Флаг);
		
	КонецЕсли;
	
	Если ТекущийВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоПриложениюБезГрупп
		Или ДополнительныйВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоПриложениюБезГрупп
		Или ТекущийВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоПриложениюПоГруппам
		Или ДополнительныйВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоПриложениюПоГруппам Тогда
		
		Если ПараметрыОтбораСписка.ВидПриложения <> Неопределено Тогда
			ЗаполнитьСписокВыбораБыстрогоПоиска(ТипБыстрогоПоискаВидПриложения(), ПараметрыОтбораСписка.ВидПриложения);
		Иначе
			ЗаполнитьСписокВыбораБыстрогоПоиска(ТипБыстрогоПоискаТипПриложения(), ПараметрыОтбораСписка.ТипПриложения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьПараметрыБыстрогоПоискаПоТекущимГруппировкам()
	
	ОчиститьПараметрБыстрогоПоискаПоТекущейГруппировке(ТекущаяГруппировка, ТекущийВариантГруппировки);
	ОчиститьПараметрБыстрогоПоискаПоТекущейГруппировке(ТекущаяДополнительнаяГруппировка, ДополнительныйВариантГруппировки);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьПараметрБыстрогоПоискаПоТекущейГруппировке(Группировка, ВариантГруппировки)
	
	Если ВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоАвтору Тогда
		
		ОчиститьПараметрБыстрогоПоиска(ТипБыстрогоПоискаАвтор(), Группировка);
		
	ИначеЕсли ВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоВидуЗадачи Тогда
		
		ОчиститьПараметрБыстрогоПоиска(ТипБыстрогоПоискаВидДействия(), Группировка);
		
	ИначеЕсли ВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоИсполнителю Тогда
		
		ОчиститьПараметрБыстрогоПоиска(ТипБыстрогоПоискаИсполнитель(), Группировка);
		
	ИначеЕсли ВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоПроекту Тогда
		
		ОчиститьПараметрБыстрогоПоиска(ТипБыстрогоПоискаПроект(), Группировка);
		
	ИначеЕсли ВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоПриложениюБезГрупп Тогда
		
		ОчиститьПараметрБыстрогоПоиска(ТипБыстрогоПоискаВидПриложения(), Группировка);
		
	ИначеЕсли ВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоПриложениюПоГруппам Тогда
		
		ОчиститьПараметрБыстрогоПоиска(ТипБыстрогоПоискаВидПриложения(), Группировка);
		
	ИначеЕсли ВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоФлагу Тогда
		
		ОчиститьПараметрБыстрогоПоиска(ТипБыстрогоПоискаФлаг(), Группировка);
		
	ИначеЕсли ВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.БезГруппировки Тогда
		
		Если ЗначениеЗаполнено(Группировка) Тогда
			РеквизитыГруупировки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Группировка, "Проект, Исполнитель");
			ПроектГруппировки = РеквизитыГруупировки.Проект;
			ИсполнительГруппировки = РеквизитыГруупировки.Исполнитель;
		Иначе
			ПроектГруппировки = Справочники.Проекты.ПустаяСсылка();
			ИсполнительГруппировки = Справочники.Сотрудники.ПустаяСсылка();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПроектГруппировки) Тогда
			ОчиститьПараметрБыстрогоПоиска(ТипБыстрогоПоискаПроект(), Группировка);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ИсполнительГруппировки) Тогда
			ОчиститьПараметрБыстрогоПоиска(ТипБыстрогоПоискаИсполнитель(), Группировка);
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораБыстрогоПоиска(Ключ, Значение)
	
	Если Значение <> Неопределено Тогда
		
		СписокВыбораБыстрогоПоиска = Новый СписокЗначений();
		
		Если Значение = Перечисления.ОтборыПоСтатусуЗадач.НеВыполненные Тогда
			
			СписокВыбораБыстрогоПоиска.Добавить(Перечисления.ОтборыПоСтатусуЗадач.НеВыполненные);
			СписокВыбораБыстрогоПоиска.Добавить(
				Перечисления.ОтборыПоСтатусуЗадач.НеНачатые,
				Новый ФорматированнаяСтрока(
					Строка(Перечисления.ОтборыПоСтатусуЗадач.НеНачатые),
					ШрифтыСтиля.НеПринятыеКИсполнениюЗадачи));
			СписокВыбораБыстрогоПоиска.Добавить(
				Перечисления.ОтборыПоСтатусуЗадач.Просроченные,
				Новый ФорматированнаяСтрока(
					Строка(Перечисления.ОтборыПоСтатусуЗадач.Просроченные),,
					ЦветаСтиля.ПросроченныеДанныеЦвет));
			
			СписокВыбораБыстрогоПоиска.Добавить(Справочники.СостоянияЗадач.Новая);
			СписокВыбораБыстрогоПоиска.Добавить(Справочники.СостоянияЗадач.ВРаботе);
			СписокВыбораБыстрогоПоиска.Добавить(НСтр("ru = 'Выбрать несколько...'"));
			
			СпискиВыбораБыстрогоПоиска.Вставить(Ключ, СписокВыбораБыстрогоПоиска);
			
			Возврат;
			
		КонецЕсли;
		
		Если ТипЗнч(Значение) = Тип("Массив") Тогда
			
			Для Каждого Элемент Из Значение Цикл
				СписокВыбораБыстрогоПоиска.Добавить(Элемент);
			КонецЦикла;
			
		Иначе
			
			Если Ключ = ТипБыстрогоПоискаФлаг() Тогда 
				
				Если Не ЗначениеЗаполнено(Значение) Тогда
					СписокВыбораБыстрогоПоиска.Добавить(Значение, НСтр("ru = 'Без флага'"));
				Иначе
					СписокВыбораБыстрогоПоиска.Добавить(Значение,,, Перечисления.ФлагиОбъектов.КартинкаФлага(Значение));
				КонецЕсли;
				
			ИначеЕсли Ключ = ТипБыстрогоПоискаПроект() Тогда
				
				Если Не ЗначениеЗаполнено(Значение) Тогда
					СписокВыбораБыстрогоПоиска.Добавить(Значение, НСтр("ru = 'Без проекта'"));
				Иначе
					СписокВыбораБыстрогоПоиска.Добавить(Значение);
				КонецЕсли;
				
			Иначе
				
				СписокВыбораБыстрогоПоиска.Добавить(Значение);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Ключ = ТипБыстрогоПоискаИсполнитель() Или Ключ = ТипБыстрогоПоискаАвтор() Тогда
			СписокВыбораБыстрогоПоиска.СортироватьПоЗначению();
		КонецЕсли;
		
		СпискиВыбораБыстрогоПоиска.Вставить(Ключ, СписокВыбораБыстрогоПоиска);
		
		Если Ключ = ТипБыстрогоПоискаВидДействия() Тогда
			СпискиВыбораБыстрогоПоиска.Вставить(ТипБыстрогоПоискаВидДействияЗадачи(), СписокВыбораБыстрогоПоиска);
		КонецЕсли;
		
		Если Ключ = ТипБыстрогоПоискаВидЗадачи() Тогда
			СпискиВыбораБыстрогоПоиска.Вставить(ТипБыстрогоПоискаВидДействия(), СписокВыбораБыстрогоПоиска);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеБыстрогоПоиска()
	
	ПредставлениеФильтра = "";
	ПредставлениеФильтра = РаботаСБыстрымПоиском.ОбновитьПредставлениеБыстрогоПоиска(
		БыстрыйПоиск,
		Элементы.СброситьОтбор);

	ЕстьБыстрыйПоиск = (Строка(ПредставлениеФильтра) <> "");

	Если ЕстьГруппировки И ПоказыватьДеревоГруппировок Тогда
		
		Если ТекущийВариантГруппировки <> ПредопределенноеЗначение("Перечисление.ВариантыГруппировкиЗадач.БезГруппировки") Тогда
			Элементы.ГруппаПанельФильтра.Видимость = Ложь;
			Возврат;
		КонецЕсли;
			
	КонецЕсли;
	
	Если Не ЭтоМобильныйКлиент Тогда
		
		Если ЕстьБыстрыйПоиск Тогда
			Элементы.ФормаБыстрыйПоиск.Видимость = Ложь;
			Элементы.ГруппаПанельФильтра.Видимость = Истина;
			Элементы.ПредставлениеФильтра.Подсказка = ПредставлениеФильтра;
		Иначе
			Элементы.ФормаБыстрыйПоиск.Видимость = БыстрыйПоискДоступен;
			Элементы.ГруппаПанельФильтра.Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыСтрокиГруппировок()

	УдалитьЭлементыСтрокиГруппировок();
	
	Если ЭтоМобильныйКлиент Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ГруппировкаУИД", ТекущаяГруппировка.УникальныйИдентификатор());
	ПараметрыОтбора.Вставить("ДополнительнаяГруппировкаУИД",
		ТекущаяДополнительнаяГруппировка.УникальныйИдентификатор());
	
	НайденныеСтроки =
		ОбщегоНазначенияДокументооборотКлиентСервер.НайтиСтрокиДерева(Группировки, ПараметрыОтбора);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЭлементовКСозданию = Новый Массив;
	
	СтрокаКОбработке = НайденныеСтроки[0];
	
	Пока СтрокаКОбработке <> Неопределено Цикл
		
		ДанныеЭлемента = ДанныеЭлементаСтрокиГруппировкиКСозданию();
		
		Если СтрокаКОбработке.Количество <> 0 Тогда
			ДанныеЭлемента.Представление =
				СтрШаблон("%1 (%2)", СтрокаКОбработке.Представление, СтрокаКОбработке.Количество);
		Иначе
			ДанныеЭлемента.Представление = СтрокаКОбработке.Представление;
		КонецЕсли;
		ДанныеЭлемента.ГруппировкаУИД = СтрокаКОбработке.ГруппировкаУИД;
		ДанныеЭлемента.ДополнительнаяГруппировкаУИД = СтрокаКОбработке.ДополнительнаяГруппировкаУИД;
		
		ДочерниеЭлементы = СтрокаКОбработке.ПолучитьЭлементы();
		ДанныеЭлемента.ДобавлятьДочерние = ДочерниеЭлементы.Количество() > 0;
		
		ДанныеЭлементовКСозданию.Вставить(0, ДанныеЭлемента);
		
		СтрокаКОбработке = СтрокаКОбработке.ПолучитьРодителя();
		
	КонецЦикла;
	
	СоздатьЭлементыГруппировокВСтроке(ДанныеЭлементовКСозданию);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьЭлементыСтрокиГруппировок()
	
	Пока СписокЭлементовГруппировок.Количество() > 0 Цикл
		
		ИмяЭлемента = СписокЭлементовГруппировок[СписокЭлементовГруппировок.Количество() - 1].Значение;
		
		Элемент = Элементы.Найти(ИмяЭлемента);
		Если Элемент <> Неопределено Тогда
			Элементы.Удалить(Элемент);
		КонецЕсли;
		
		СписокЭлементовГруппировок.Удалить(СписокЭлементовГруппировок.Количество() - 1);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ДанныеЭлементаСтрокиГруппировкиКСозданию()
	
	ДанныеГруппировки = Новый Структура;
	ДанныеГруппировки.Вставить("Представление", "");
	ДанныеГруппировки.Вставить("ДобавлятьДочерние", Ложь);
	ДанныеГруппировки.Вставить("ГруппировкаУИД", УникальныйИдентификаторПустой());
	ДанныеГруппировки.Вставить("ДополнительнаяГруппировкаУИД", УникальныйИдентификаторПустой());
	
	Возврат ДанныеГруппировки;
	
КонецФункции

&НаСервере
Процедура СоздатьЭлементыГруппировокВСтроке(ДанныеЭлементов)
	
	Для Каждого ДанныеЭлемента Из ДанныеЭлементов Цикл
		
		ДобавитьЭлементГруппировки(ДанныеЭлемента);
		
		Если ДанныеЭлемента.ДобавлятьДочерние Тогда
			ДобавитьПодменюДочернихГруппировок(ДанныеЭлемента);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементГруппировки(ДанныеЭлемента)
	
	ГруппировкаУИДСтрокой = СтрЗаменить(ДанныеЭлемента.ГруппировкаУИД, "-", "");
	ДополнительнаяГруппировкаУИДСтрокой =
		СтрЗаменить(ДанныеЭлемента.ДополнительнаяГруппировкаУИД, "-", "");
		
	ИмяЭлемента = СтрШаблон("ОткрытьГруппировку_%1_%2",
		ГруппировкаУИДСтрокой,
		ДополнительнаяГруппировкаУИДСтрокой);
	
	Гиперссылка = СтрШаблон("Group_%1_%2",
		ГруппировкаУИДСтрокой,
		ДополнительнаяГруппировкаУИДСтрокой);
	
	Элемент = Элементы.Добавить(ИмяЭлемента, Тип("ДекорацияФормы"), Элементы.ГруппаНавигацияПоГруппировкам);
	Элемент.Вид = ВидДекорацииФормы.Надпись;
	Элемент.Заголовок = Новый ФорматированнаяСтрока(
		ДанныеЭлемента.Представление, ,
		ЦветаСтиля.ИнформационнаяНадпись, ,
		Гиперссылка);
	Элемент.УстановитьДействие("ОбработкаНавигационнойСсылки", "НавигацияПоГруппировкамОбработкаНавигационнойСсылки");
	Элемент.АвтоМаксимальнаяШирина = Ложь;
	
	СписокЭлементовГруппировок.Добавить(ИмяЭлемента);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПодменюДочернихГруппировок(ДанныеЭлемента)
	
	ГруппировкаУИДСтрокой = СтрЗаменить(ДанныеЭлемента.ГруппировкаУИД, "-", "");
	ДополнительнаяГруппировкаУИДСтрокой =
		СтрЗаменить(ДанныеЭлемента.ДополнительнаяГруппировкаУИД, "-", "");
	
	ИмяЭлемента = СтрШаблон("ДочерниеГруппировки_%1_%2",
		ГруппировкаУИДСтрокой,
		ДополнительнаяГруппировкаУИДСтрокой);
	
	Гиперссылка = СтрШаблон("Subordinate_%1_%2",
		ГруппировкаУИДСтрокой,
		ДополнительнаяГруппировкаУИДСтрокой);
	
	Элемент = Элементы.Добавить(ИмяЭлемента, Тип("ДекорацияФормы"), Элементы.ГруппаНавигацияПоГруппировкам);
	Элемент.Вид = ВидДекорацииФормы.Надпись;
	Элемент.Заголовок = Новый ФорматированнаяСтрока(
		">", ,
		ЦветаСтиля.ИнформационнаяНадпись, ,
		Гиперссылка);
	Элемент.УстановитьДействие("ОбработкаНавигационнойСсылки", "НавигацияПоГруппировкамОбработкаНавигационнойСсылки");
	Элемент.АвтоМаксимальнаяШирина = Ложь;
	
	СписокЭлементовГруппировок.Добавить(ИмяЭлемента);
	
КонецПроцедуры

&НаКлиенте
Процедура НавигацияПоГруппировкамОбработкаНавигационнойСсылки(Элемент, 
	НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если СтрНачинаетсяС(НавигационнаяСсылкаФорматированнойСтроки, "Subordinate_") Тогда
		
		РазделеннаяСсылка = СтрРазделить(НавигационнаяСсылкаФорматированнойСтроки, "_");
		
		ГруппировкаУИДСтрокой = РазделеннаяСсылка[1];
		УИДСтрокой = Сред(ГруппировкаУИДСтрокой, 1, 8)
			+ "-" + Сред(ГруппировкаУИДСтрокой, 9, 4)
			+ "-" + Сред(ГруппировкаУИДСтрокой, 13, 4)
			+ "-" + Сред(ГруппировкаУИДСтрокой, 17, 4)
			+ "-" + Сред(ГруппировкаУИДСтрокой, 21, 12);
		ГруппировкаУИД = Новый УникальныйИдентификатор(УИДСтрокой);
		
		ДополнительнаяГруппировкаУИДСтрокой = РазделеннаяСсылка[2];
		УИДСтрокой = Сред(ДополнительнаяГруппировкаУИДСтрокой, 1, 8)
			+ "-" + Сред(ДополнительнаяГруппировкаУИДСтрокой, 9, 4)
			+ "-" + Сред(ДополнительнаяГруппировкаУИДСтрокой, 13, 4)
			+ "-" + Сред(ДополнительнаяГруппировкаУИДСтрокой, 17, 4)
			+ "-" + Сред(ДополнительнаяГруппировкаУИДСтрокой, 21, 12);
		ДополнительнаяГруппировкаУИД  = Новый УникальныйИдентификатор(УИДСтрокой);
		
		СписокВыбораДочерних = СписокВыбораДочерних(ГруппировкаУИД, ДополнительнаяГруппировкаУИД);
		
		ПараметрыСсылки = Новый Структура;
		
		ПараметрыСсылки.Вставить("ИмяЭлемента", Элемент.Имя);
		ПараметрыСсылки.Вставить("ЭтоГруппировка", Истина);
		ПараметрыСсылки.Вставить("Гиперссылка", НавигационнаяСсылкаФорматированнойСтроки);
		
		Элемент.Заголовок = Новый ФорматированнаяСтрока(
			"v", , , ,
			НавигационнаяСсылкаФорматированнойСтроки);
		
		ОбработчикВыбора = Новый ОписаниеОповещения(
			"ОбработатьВыборГруппировкиСпискаВСтроке", ЭтотОбъект, ПараметрыСсылки);
		
		ПоказатьВыборИзСписка(ОбработчикВыбора, СписокВыбораДочерних, Элемент);
		Возврат;
		
	КонецЕсли;
	
	Если СтрНачинаетсяС(НавигационнаяСсылкаФорматированнойСтроки, "Group_") Тогда
		
		РазделеннаяСсылка = СтрРазделить(НавигационнаяСсылкаФорматированнойСтроки, "_");
		
		ГруппировкаУИДСтрокой = РазделеннаяСсылка[1];
		УИДСтрокой = Сред(ГруппировкаУИДСтрокой, 1, 8)
			+ "-" + Сред(ГруппировкаУИДСтрокой, 9, 4)
			+ "-" + Сред(ГруппировкаУИДСтрокой, 13, 4)
			+ "-" + Сред(ГруппировкаУИДСтрокой, 17, 4)
			+ "-" + Сред(ГруппировкаУИДСтрокой, 21, 12);
		ГруппировкаУИД = Новый УникальныйИдентификатор(УИДСтрокой);
		
		ДополнительнаяГруппировкаУИДСтрокой = РазделеннаяСсылка[2];
		УИДСтрокой = Сред(ДополнительнаяГруппировкаУИДСтрокой, 1, 8)
			+ "-" + Сред(ДополнительнаяГруппировкаУИДСтрокой, 9, 4)
			+ "-" + Сред(ДополнительнаяГруппировкаУИДСтрокой, 13, 4)
			+ "-" + Сред(ДополнительнаяГруппировкаУИДСтрокой, 17, 4)
			+ "-" + Сред(ДополнительнаяГруппировкаУИДСтрокой, 21, 12);
		ДополнительнаяГруппировкаУИД  = Новый УникальныйИдентификатор(УИДСтрокой);
		
		ТекущаяГруппировка = ГруппировкаПоУИД(ГруппировкаУИД);
		ТекущаяДополнительнаяГруппировка = ГруппировкаПоУИД(ДополнительнаяГруппировкаУИД);
		УстановитьПараметрыГруппировки();
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СписокВыбораДочерних(Знач ГруппировкаУИД, Знач ДополнительнаяГруппировкаУИД)
	
	СписокВыбораДочерних = Новый СписокЗначений;
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ГруппировкаУИД", ГруппировкаУИД);
	ПараметрыОтбора.Вставить("ДополнительнаяГруппировкаУИД", ДополнительнаяГруппировкаУИД);
	
	НайденныеСтроки =
		ОбщегоНазначенияДокументооборотКлиентСервер.НайтиСтрокиДерева(Группировки, ПараметрыОтбора);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат СписокВыбораДочерних;
	КонецЕсли;
	
	НайденнаяСтрока = НайденныеСтроки[0];
	ДочерняяСтроки = НайденнаяСтрока.ПолучитьЭлементы();
	
	Для Каждого ДочерняяСтрока Из ДочерняяСтроки Цикл
		
		Если ДочерняяСтрока.Количество <> 0 Тогда
			Представление = СтрШаблон("%1 (%2)", ДочерняяСтрока.Представление, ДочерняяСтрока.Количество);
		Иначе
			Представление = ДочерняяСтрока.Представление;
		КонецЕсли;
		
		ВыбраннаяГруппировка = Новый Структура();
		ВыбраннаяГруппировка.Вставить("ГруппировкаУИД", ДочерняяСтрока.ГруппировкаУИД);
		ВыбраннаяГруппировка.Вставить("ДополнительнаяГруппировкаУИД", ДочерняяСтрока.ДополнительнаяГруппировкаУИД);
		
		СписокВыбораДочерних.Добавить(ВыбраннаяГруппировка, Представление);
		
	КонецЦикла;
	
	Возврат СписокВыбораДочерних;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьВыборГруппировкиСпискаВСтроке(Результат, ДополнительныеПараметры) Экспорт
	
	Элемент = Элементы.Найти(ДополнительныеПараметры.ИмяЭлемента);
	Если Элемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.ЭтоГруппировка = Истина Тогда
		
		Элемент.Заголовок = Новый ФорматированнаяСтрока(
			">", , , ,
			ДополнительныеПараметры.Гиперссылка);
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяГруппировка = ГруппировкаПоУИД(Результат.Значение.ГруппировкаУИД);
	ТекущаяДополнительнаяГруппировка = ГруппировкаПоУИД(Результат.Значение.ДополнительнаяГруппировкаУИД);
	УстановитьПараметрыГруппировки();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборЗначенияГруппировкиНажатиеЗавершение(РезультатФормы, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатФормы)
		И ТипЗнч(РезультатФормы) <> Тип("КодВозвратаДиалога") Тогда
		
		ТекущаяГруппировка = РезультатФормы;
		УстановитьПараметрыГруппировки();
		
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыбор()
	
	ОчередьВыбора = Новый Структура("ВыбранныеЗадачи, ВыбранныеДействияЗадач");
	ОчередьВыбора.ВыбранныеЗадачи = Новый Массив;
	ОчередьВыбора.ВыбранныеДействияЗадач = Новый Массив;
	
	Если Элементы.СтраницыСписка.ТекущаяСтраница = Элементы.СтраницаСписокДействияЗадач Тогда
		
		ВыбранныеСтроки =
			?(Элементы.СписокДействияЗадач.ВыделенныеСтроки.Количество() > 0,
				Элементы.СписокДействияЗадач.ВыделенныеСтроки,
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
					Элементы.СписокДействияЗадач.ТекущаяСтрока));
		
		Для Каждого ВыбраннаяСтрока Из ВыбранныеСтроки Цикл
			
			Если ТипЗнч(ВыбраннаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
				Продолжить;
			КонецЕсли;
			
			ВыбранныеДанные = Элементы.СписокДействияЗадач.ДанныеСтроки(ВыбраннаяСтрока);
			Если ВыбранныеДанные = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ОчередьВыбора.ВыбранныеЗадачи.Добавить(ВыбранныеДанные.Задача);
			ОчередьВыбора.ВыбранныеДействияЗадач.Добавить(ВыбранныеДанные.ДействиеЗадачи);
			
		КонецЦикла;
		
	ИначеЕсли Элементы.СтраницыСписка.ТекущаяСтраница = Элементы.СтраницаСписокЗадач Тогда
		
		ВыбранныеСтроки =
			?(Элементы.СписокЗадач.ВыделенныеСтроки.Количество() > 0,
				Элементы.СписокЗадач.ВыделенныеСтроки,
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
					Элементы.СписокЗадач.ТекущаяСтрока));
		
		Для Каждого ВыбраннаяСтрока Из ВыбранныеСтроки Цикл
			
			Если ТипЗнч(ВыбраннаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
				Продолжить;
			КонецЕсли;
			
			ВыбранныеДанные = Элементы.СписокЗадач.ДанныеСтроки(ВыбраннаяСтрока);
			Если ВыбранныеДанные = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ОчередьВыбора.ВыбранныеЗадачи.Добавить(ВыбранныеДанные.Задача);
			
		КонецЦикла;
		
	КонецЕсли;

	ОбработатьОчередьВыбора(ОчередьВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОчередьВыбора(ОчередьВыбора)
	
	Если ОчередьВыбора.ВыбранныеЗадачи.Количество() = 0
		И ОчередьВыбора.ВыбранныеДействияЗадач.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрНачинаетсяС(КлючНазначенияИспользования, "ВыборЗадачи") Тогда
		
		Для Каждого ВыбраннаяЗадача Из ОчередьВыбора.ВыбранныеЗадачи Цикл
			ОповеститьОВыборе(ВыбраннаяЗадача);
		КонецЦикла;
		
	ИначеЕсли СтрНачинаетсяС(КлючНазначенияИспользования, "ВыборДействияЗадачи")
		И ОчередьВыбора.ВыбранныеДействияЗадач.Количество() > 0 Тогда
		
		Для Каждого ВыбранныеДействияЗадач Из ОчередьВыбора.ВыбранныеДействияЗадач Цикл
			ОповеститьОВыборе(ВыбранныеДействияЗадач);
		КонецЦикла;
		
	ИначеЕсли СтрНачинаетсяС(КлючНазначенияИспользования, "ВыборДействияЗадачи")
		И ОчередьВыбора.ВыбранныеДействияЗадач.Количество() = 0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПослеВыбораДействияЗадачи",
			ЭтотОбъект,
			ОчередьВыбора);
		
		ВыбраннаяЗадача = ОчередьВыбора.ВыбранныеЗадачи[0];
		ОчередьВыбора.ВыбранныеЗадачи.Удалить(0);
		
		РаботаСЗадачамиКлиент.ВыбратьДействиеЗадачи(ВыбраннаяЗадача, ОписаниеОповещения);
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестный ключ назначения использования %1.'"),
			КлючНазначенияИспользования);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораДействияЗадачи(ВыбранныйЭлемент, ОчередьВыбора) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОповеститьОВыборе(ВыбранныйЭлемент.Значение);
	
	ОбработатьОчередьВыбора(ОчередьВыбора);
	
КонецПроцедуры

&НаСервере
Процедура ПоказыватьВыполненныеНаСервере()
	
	Элементы.ПоказыватьВыполненные.Пометка = ПоказыватьВыполненные;
	
	РаботаСЗадачами.УстановитьПерсональнуюНастройку(
		"ПоказыватьВыполненные" + КлючНазначенияИспользования,
		ПоказыватьВыполненные);
	
	Если ТекущаяГруппировка <> Неопределено Тогда
		УстановитьПараметрыГруппировкиНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикАвтообновление()
	
	Если Элементы.РезультатДействияТекстом.ТекстРедактирования <> РезультатДействияТекстом Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(НастройкиАвтообновления) <> Тип("Структура")
		Или (ТипЗнч(НастройкиАвтообновления) = Тип("Структура")
			И Не НастройкиАвтообновления.Автообновление) Тогда
		
		ОтключитьОбработчикОжидания("ОбработчикАвтообновление");
	Иначе
		ОбновитьНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

//@skip-check export-method-in-command-form-module
&НаСервере
Процедура ОтключитьХронометражСервер() Экспорт
	
	Если Не ЗначениеЗаполнено(ТекущаяЗадачаИлиДействие) Тогда
		Возврат;
	КонецЕсли;
	
	ПереключитьХронометражНеМеняяПодсказку = Новый Структура("Подсказка");
	УчетВремени.ОтключитьХронометражСервер(
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ТекущаяЗадачаИлиДействие,
		ПереключитьХронометражНеМеняяПодсказку,
		Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаСервере
Функция ЕстьНеФиксированныйБыстрыйПоиск()
	
	ПараметрыБыстрогоПоиска = ПараметрыБыстрогоПоиска("БезФиксированных");
	
	ЕстьНеФиксированныйБыстрыйПоиск = ПараметрыБыстрогоПоиска.Количество() > 0;
	
	Возврат ЕстьНеФиксированныйБыстрыйПоиск;
	
КонецФункции

&НаСервере
Функция ПараметрыБыстрогоПоиска(ОтборПараметровБыстрогоПоиска)
	
	ПараметрыБыстрогоПоиска = Новый Структура;
	
	Для Каждого ЭлементБыстрогоПоиска Из БыстрыйПоиск Цикл
		
		Если Не ЗначениеЗаполнено(ЭлементБыстрогоПоиска.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОтборПараметровБыстрогоПоиска = "Все" Тогда
			// Все отборы пропускаем, и фиксированные, и не фиксированные.
		ИначеЕсли ОтборПараметровБыстрогоПоиска = "ТолькоФиксированные" Тогда
			Если Не ЭлементБыстрогоПоиска.Фиксированный Тогда
				Продолжить;
			КонецЕсли;
		ИначеЕсли ОтборПараметровБыстрогоПоиска = "БезФиксированных" Тогда
			Если ЭлементБыстрогоПоиска.Фиксированный Тогда
				Продолжить;
			КонецЕсли;
		Иначе
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Неизвестный отбор параметров быстрого поиска ""%1"".'"),
				ОтборПараметровБыстрогоПоиска);
		КонецЕсли;
		
		Если ЭлементБыстрогоПоиска.Параметр = "Состояние" Тогда
			
			ПараметрыБыстрогоПоиска.Вставить("Состояние", ЭлементБыстрогоПоиска.Значение);
			
		ИначеЕсли ЭлементБыстрогоПоиска.Параметр = "Автор" Тогда
			
			ПараметрыБыстрогоПоиска.Вставить("Автор", ЭлементБыстрогоПоиска.Значение);
			
		ИначеЕсли ЭлементБыстрогоПоиска.Параметр = "ВидПриложения" Тогда
			
			ПараметрыБыстрогоПоиска.Вставить("ВидПриложения", ЭлементБыстрогоПоиска.Значение);
			
		ИначеЕсли ЭлементБыстрогоПоиска.Параметр = "ВидДействия" Тогда
			
			Если ТипЗнч(ЭлементБыстрогоПоиска.Значение) = Тип("СправочникСсылка.ВидыЗадач") Тогда
				
				ПараметрыБыстрогоПоиска.Вставить("ВидЗадачи", ЭлементБыстрогоПоиска.Значение);
				
			ИначеЕсли ТипЗнч(ЭлементБыстрогоПоиска.Значение) = Тип("СправочникСсылка.ВидыДействийЗадач") Тогда
				
				ПараметрыБыстрогоПоиска.Вставить("ВидДействия", ЭлементБыстрогоПоиска.Значение);
				
			ИначеЕсли ТипЗнч(ЭлементБыстрогоПоиска.Значение) = Тип("СписокЗначений") Тогда
				
				ПараметрыБыстрогоПоиска.Вставить("ВидДействия", ЭлементБыстрогоПоиска.Значение.ВыгрузитьЗначения());
				
			Иначе
				
				ВызватьИсключение СтрШаблон(
					НСтр("ru = 'Неизвестный тип %1 вида действия %2'"),
					ТипЗнч(ЭлементБыстрогоПоиска.Значение),
					ЭлементБыстрогоПоиска.Параметр);
				
			КонецЕсли;
			
		ИначеЕсли ЭлементБыстрогоПоиска.Параметр = "Исполнитель" Тогда
			
			Исполнитель = ЭлементБыстрогоПоиска.Значение;
			
			ПараметрыБыстрогоПоиска.Вставить("Исполнитель", Исполнитель);
			
		ИначеЕсли ЭлементБыстрогоПоиска.Параметр = "Проект" Тогда
			
			ПараметрыБыстрогоПоиска.Вставить("Проект", ЭлементБыстрогоПоиска.Значение);
			
		ИначеЕсли ЭлементБыстрогоПоиска.Параметр = "ДатаС" Тогда
			
			ПараметрыБыстрогоПоиска.Вставить("ДатаС", ЭлементБыстрогоПоиска.Значение);
			
		ИначеЕсли ЭлементБыстрогоПоиска.Параметр = "ДатаПо" Тогда
			
			ПараметрыБыстрогоПоиска.Вставить("ДатаПо", ЭлементБыстрогоПоиска.Значение);
			
		ИначеЕсли ЭлементБыстрогоПоиска.Параметр = "Флаг" Тогда
			
			ПараметрыБыстрогоПоиска.Вставить("Флаг", ЭлементБыстрогоПоиска.Значение);
			
		Иначе
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Неизвестный параметр быстрого поиска %1'"),
				ЭлементБыстрогоПоиска.Параметр);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПараметрыБыстрогоПоиска;
	
КонецФункции

&НаСервере
Функция ПараметрыОтбораСписка()
	
	ПараметрыОтбораСписка = Новый Структура;
	ПараметрыОтбораСписка.Вставить("ТипОтбора");
	ПараметрыОтбораСписка.Вставить("ВидПриложения");
	ПараметрыОтбораСписка.Вставить("ОтображатьИтоги");
	ПараметрыОтбораСписка.Вставить("Проект");
	ПараметрыОтбораСписка.Вставить("Состояние");
	ПараметрыОтбораСписка.Вставить("Автор");
	ПараметрыОтбораСписка.Вставить("ВидЗадачи");
	ПараметрыОтбораСписка.Вставить("ВидДействия");
	ПараметрыОтбораСписка.Вставить("Исполнитель");
	ПараметрыОтбораСписка.Вставить("РеестрЗадач");
	ПараметрыОтбораСписка.Вставить("ТипПриложения");
	ПараметрыОтбораСписка.Вставить("ДатаС");
	ПараметрыОтбораСписка.Вставить("ДатаПо");
	ПараметрыОтбораСписка.Вставить("Флаг");
	
	Если ЗначениеЗаполнено(ТекущаяДополнительнаяГруппировка) Тогда
		
		ПараметрыОтбораПоДополнительнойГруппировке =
			ЗначимыеПараметрыОтбораПоГруппировке(
				ТекущаяДополнительнаяГруппировка,
				ДополнительныйВариантГруппировки);
		
		ЗаполнитьЗначенияСвойств(ПараметрыОтбораСписка, ПараметрыОтбораПоДополнительнойГруппировке);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущаяГруппировка) Тогда
		
		ПараметрыОтбораПоОсновнойГруппировке =
			ЗначимыеПараметрыОтбораПоГруппировке(
				ТекущаяГруппировка,
				ТекущийВариантГруппировки);
		
		ЗаполнитьЗначенияСвойств(ПараметрыОтбораСписка, ПараметрыОтбораПоОсновнойГруппировке);
		
	КонецЕсли;
	
	ОбработатьСпискиВыбораБыстрогоПоиска(ПараметрыОтбораСписка);
	
	// Быстрый поиск.
	ЗаполнитьЗначенияСвойств(
		ПараметрыОтбораСписка,
		ПараметрыБыстрогоПоиска("Все"));
	
	Если ПараметрыОтбораСписка.ТипОтбора = Перечисления.ТипыОтбораГруппировокЗадач.Задачи
		И (ПараметрыОтбораСписка.Исполнитель <> Неопределено Или ПараметрыОтбораСписка.ВидДействия <> Неопределено) Тогда
		ПараметрыОтбораСписка.ТипОтбора = Перечисления.ТипыОтбораГруппировокЗадач.ДействияЗадач;
	КонецЕсли;
	
	Если ПараметрыОтбораСписка.ДатаС <> Неопределено
		Или ПараметрыОтбораСписка.ДатаПо <> Неопределено Тогда
		ПараметрыОтбораСписка.ОтображатьИтоги = Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыОтбораСписка.РеестрЗадач) Тогда
		ПараметрыОтбораСписка.РеестрЗадач = ТекущийРеестрЗадач;
	КонецЕсли;
	
	Возврат ПараметрыОтбораСписка;
	
КонецФункции

&НаСервере
Функция ПараметрыОтбораИтоговПоИсполнителям()
	
	ПараметрыОтбораИтоговПоИсполнителям = РегистрыНакопления.КоличествоЗадачПоИсполнителям.НовыеПараметрыОтбора();
	ЗаполнитьПараметрыОтбораИтогов(ПараметрыОтбораИтоговПоИсполнителям);
	
	Возврат ПараметрыОтбораИтоговПоИсполнителям;
	
КонецФункции

&НаСервере
Функция ПараметрыОтбораИтоговПоАвторам()
	
	ПараметрыОтбораИтоговПоАвторам = РегистрыНакопления.КоличествоЗадачПоАвторам.НовыеПараметрыОтбора();
	ЗаполнитьПараметрыОтбораИтогов(ПараметрыОтбораИтоговПоАвторам);
	
	Возврат ПараметрыОтбораИтоговПоАвторам;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПараметрыОтбораИтогов(ПараметрыОтбораИтогов)
	
	// Основной отбор всегда по текущему реестру задач.
	ПараметрыОтбораИтогов.РеестрЗадач = ТекущийРеестрЗадач;
	
	// Можно дополнительно настроить фиксированный поиск.
	ПараметрыБыстрогоПоиска = ПараметрыБыстрогоПоиска("ТолькоФиксированные");
	ЗаполнитьЗначенияСвойств(ПараметрыОтбораИтогов, ПараметрыБыстрогоПоиска);
	
КонецПроцедуры

&НаСервере
Функция ЗначимыеПараметрыОтбораПоГруппировке(ГруппировкаОтбора, ВариантГруппировки)
	
	ПараметрыОтбораПоГруппировке = Новый Структура;
	
	РеквизитыГруппировки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ГруппировкаОтбора,
		"Автор, ВидЗадачи, ВидПриложения, БезПроекта, БезФлага, ВидДействия, Исполнитель,
		|ИсполнительРазыменован, Проект, Состояние, ОтображатьИтоги,
		|ТипОтбора, ТипПриложения, Флаг");
	
	Если ЗначениеЗаполнено(РеквизитыГруппировки.Состояние) Тогда
		
		Если РеквизитыГруппировки.Состояние = Перечисления.ОтборыПоСтатусуЗадач.НеВыполненные
			И ДоступенПоказВыполненных
			И ПоказыватьВыполненные Тогда
			
			// Не заполняем отбор, показываем все.
			
		Иначе
			
			ПараметрыОтбораПоГруппировке.Вставить("Состояние", РеквизитыГруппировки.Состояние);
			
		КонецЕсли;
		
	КонецЕсли;
	ПараметрыОтбораПоГруппировке.Вставить("ОтображатьИтоги", РеквизитыГруппировки.ОтображатьИтоги);
	ПараметрыОтбораПоГруппировке.Вставить("ТипОтбора", РеквизитыГруппировки.ТипОтбора);
	
	Если ВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоАвтору
		И РеквизитыГруппировки.Автор <> Перечисления.ОтборыПоУчастникамЗадач.ТекущийПользователь Тогда
		
		Автор = РаботаСЗадачами.РазыменоватьОтборПоУчастнику(
			РеквизитыГруппировки.Автор,
			Истина,
			Ложь);
		
		ПараметрыОтбораПоГруппировке.Вставить("Автор", Автор);
		
	КонецЕсли;
	
	Если ВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоВидуЗадачи Тогда
		
		Если ЗначениеЗаполнено(РеквизитыГруппировки.ВидЗадачи) Тогда
			ПараметрыОтбораПоГруппировке.Вставить("ВидЗадачи", РеквизитыГруппировки.ВидЗадачи);
		КонецЕсли;
		Если ЗначениеЗаполнено(РеквизитыГруппировки.ВидДействия) Тогда
			ПараметрыОтбораПоГруппировке.Вставить("ВидДействия", РеквизитыГруппировки.ВидДействия);
		КонецЕсли;
		
	КонецЕсли;
	
	Если (ВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоИсполнителю
			Или (ВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.БезГруппировки
				И СтрНачинаетсяС(КлючНазначенияИспользования, "ЗадачиПодчиненных"))
			Или (ВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.БезГруппировки
				И СтрНачинаетсяС(КлючНазначенияИспользования, "ЗадачиПоПроектам")))
		И РеквизитыГруппировки.Исполнитель <> Перечисления.ОтборыПоУчастникамЗадач.ТекущийПользователь
		И РеквизитыГруппировки.Исполнитель <> Перечисления.ОтборыПоУчастникамЗадач.Подчиненные Тогда
		
		Если ТипЗнч(РеквизитыГруппировки.Исполнитель) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
			
			ЭтоПодразделениеРуководителя =
				РаботаСЗадачами.ЭтоПодразделениеРуководителя(РеквизитыГруппировки.Исполнитель);
			Если ЭтоПодразделениеРуководителя Тогда
				РеестрЗадачиПодразделения =
					Справочники.РеестрыЗадач.РеестрЗадачиПодразделенияБезРуководителя(
						РеквизитыГруппировки.Исполнитель);
			Иначе
				РеестрЗадачиПодразделения =
					Справочники.РеестрыЗадач.РеестрЗадачиПодразделения(
						РеквизитыГруппировки.Исполнитель);
			КонецЕсли;
			
			ПараметрыОтбораПоГруппировке.Вставить("РеестрЗадач", РеестрЗадачиПодразделения);
			
		Иначе
			
			Исполнитель =
				РаботаСЗадачами.РазыменоватьОтборПоУчастнику(
					РеквизитыГруппировки.Исполнитель,
					РеквизитыГруппировки.ИсполнительРазыменован,
					Ложь);
			
			ПараметрыОтбораПоГруппировке.Вставить("Исполнитель", Исполнитель);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоПриложениюБезГрупп
		Или ВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоПриложениюПоГруппам Тогда
		
		ВидПриложения = РеквизитыГруппировки.ВидПриложения;
		ТипПриложения = РеквизитыГруппировки.ТипПриложения;
		
		//@skip-check bsl-legacy-check-string-literal
		Если Не ЗначениеЗаполнено(ВидПриложения) Тогда
			
			ТипПриложенияДляОтбора = ТипПриложения;
			ВидПриложенияДляОтбора = Неопределено;
			
		ИначеЕсли ВидПриложения.Метаданные().Иерархический
			И ВидПриложения.Метаданные().ВидИерархии =
				Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидПриложения, "ЭтоГруппа") Тогда
			
			ТипПриложенияДляОтбора = Неопределено;
			ВидПриложенияДляОтбора =
				ОбщегоНазначенияДокументооборот.ПодчиненныеЭлементы(
					ВидПриложения);
			
		Иначе
			
			ТипПриложенияДляОтбора = Неопределено;
			ВидПриложенияДляОтбора = ВидПриложения;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТипПриложенияДляОтбора) Тогда
			ПараметрыОтбораПоГруппировке.Вставить("ТипПриложения", ТипПриложенияДляОтбора);
		КонецЕсли;
		Если ЗначениеЗаполнено(ВидПриложенияДляОтбора) Тогда
			ПараметрыОтбораПоГруппировке.Вставить("ВидПриложения", ВидПриложенияДляОтбора);
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтрНачинаетсяС(КлючНазначенияИспользования, "ЗадачиПоПроектам")
		И (ВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоПроекту
			Или ВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.БезГруппировки)
		И РеквизитыГруппировки.Проект <> Перечисления.ОтборыПоПроектамЗадач.АктивныеПроекты Тогда
		
		Если РеквизитыГруппировки.БезПроекта = Истина Тогда
			
			РеестраЗадачиБезПроекта = Справочники.РеестрыЗадач.РеестрЗадачиПроекта(
				Справочники.Проекты.ПустаяСсылка());
			
			ПараметрыОтбораПоГруппировке.Вставить("РеестрЗадач", РеестраЗадачиБезПроекта);
			
		ИначеЕсли ЗначениеЗаполнено(РеквизитыГруппировки.Проект) Тогда
			
			РеестрЗадачиПроекта = Справочники.РеестрыЗадач.РеестрЗадачиПроекта(
				РеквизитыГруппировки.Проект);
			
			ПараметрыОтбораПоГруппировке.Вставить("РеестрЗадач", РеестрЗадачиПроекта);
			
		КонецЕсли;
		
	ИначеЕсли ВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоПроекту
		И РеквизитыГруппировки.Проект <> Перечисления.ОтборыПоПроектамЗадач.АктивныеПроекты Тогда
		
		ПараметрыОтбораПоГруппировке.Вставить("Проект", РеквизитыГруппировки.Проект);
			
	КонецЕсли;
	
	Если ВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоФлагу Тогда
		
		Если ЗначениеЗаполнено(РеквизитыГруппировки.Флаг) Тогда
			
			Флаг = РеквизитыГруппировки.Флаг;
			ПараметрыОтбораПоГруппировке.Вставить("Флаг", Флаг);
			
		ИначеЕсли РеквизитыГруппировки.БезФлага = Истина Тогда
			
			Флаг = Перечисления.ФлагиОбъектов.ПустаяСсылка();
			ПараметрыОтбораПоГруппировке.Вставить("Флаг", Флаг);
			
		Иначе
			
			// Например, группировка "Задачи мне" корневая - не требуется добавлять отбор.
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПараметрыОтбораПоГруппировке;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_Команда(Команда)
	
	Если СтрНачинаетсяС(Команда.Имя, РаботаСЗадачамиКлиентСервер.ПрефиксИмениКомандыРезультата()) Тогда
		
		ИдентификаторРезультата = РаботаСЗадачамиКлиентСервер.ИдентификаторПоИмениКоманды(Команда.Имя);
		РезультатДействияЗадачи =
			РаботаСЗадачамиВызовСервера.РезультатДействияЗадачиПоИдентификатору(ИдентификаторРезультата);
		ВыполнитьДействиеЗадачиНаКлиентеВФорме(РезультатДействияЗадачи);
		
	ИначеЕсли СтрНачинаетсяС(Команда.Имя, РаботаСЗадачамиКлиентСервер.ПрефиксИмениКомандыШаблоны()) Тогда
		
		ИдентификаторШаблона = РаботаСЗадачамиКлиентСервер.ИдентификаторПоИмениКоманды(Команда.Имя);
		ШаблонДляВыполнения =
			РаботаСЗадачамиВызовСервера.ШаблонДляВыполненияПоИдентификатору(ИдентификаторШаблона);
		ВыполнитьДействиеЗадачиПоШаблону(ШаблонДляВыполнения);
		
	ИначеЕсли СтрНачинаетсяС(Команда.Имя, РаботаСЗадачамиКлиентСервер.ПрефиксИмениКомандыГрупповогоРезультата()) Тогда
		
		ИдентификаторРезультата = РаботаСЗадачамиКлиентСервер.ИдентификаторПоИмениКоманды(Команда.Имя);
		РезультатДействияЗадачи =
			РаботаСЗадачамиВызовСервера.РезультатДействияЗадачиПоИдентификатору(ИдентификаторРезультата);
		
		ДанныеГрупповогоДействия = Неопределено;
		Для Каждого ОчередныеДанныеДействия Из ДанныеГрупповыхДействий.ВыгрузитьЗначения() Цикл
			
			Если ОчередныеДанныеДействия.Результат = РезультатДействияЗадачи Тогда
				ДанныеГрупповогоДействия = ОчередныеДанныеДействия;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ДанныеГрупповогоДействия = Неопределено Тогда
			ВызватьИсключение СтрШаблон(НСтр("ru = 'Не найдены данные группвого действия %1'"), Команда.Имя);
		КонецЕсли;
		
		РаботаСЗадачамиКлиент.ВыполнитьДействиеЗадачи(
			ДанныеГрупповогоДействия.Задачи,
			ДанныеГрупповогоДействия.Результат,
			ЭтотОбъект,
			ДанныеГрупповогоДействия.ВерсииДанных);
		
	Иначе
		
		РаботаСЗадачамиКлиент.ВыполнитьПодключаемуюКоманду(
			Команда,
			ТекущаяЗадачаИлиДействие,
			ДанныеЖизненногоЦикла,
			УникальныйИдентификатор,
			ПредыдущийАдресФайла);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Нажатие(Элемент, СтандартнаяОбработка)
	
	РаботаСЗадачамиКлиент.ОбработатьНажатиеЖизненногоЦикла(
		Элемент,
		ДанныеЖизненногоЦикла,
		СтандартнаяОбработка,
		УникальныйИдентификатор,
		ПредыдущийАдресФайла,
		ТекущаяЗадачаИлиДействие);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаФайлЗанятДругим(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат; // ничего не делаем
	КонецЕсли;
	
	РаботаСФайламиКлиент.ОткрытьФайлСОповещением(Неопределено, 
		ПараметрыВыполнения.ДанныеФайла, УникальныйИдентификатор); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборВариантаДопГруппировки(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВозможныеДопГруппировки = ДополнительныеВарианыГруппировки(ТекущийВариантГруппировки, ВестиУчетПоПроектам);
	Если ВозможныеДопГруппировки.Найти(Результат.Значение) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныйВариантГруппировки = Результат.Значение;
	СтарыеГруппировки = ТекущиеГруппировки();
	ПриИзмененииВариантаГруппировки();
	ВосстановитьСтрокуДереваГруппировок(СтарыеГруппировки);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВариантаГруппировки()
	
	ВозможныеДопГруппировки = ДополнительныеВарианыГруппировки(ТекущийВариантГруппировки, ВестиУчетПоПроектам);
	Если ВозможныеДопГруппировки.Найти(ДополнительныйВариантГруппировки) = Неопределено Тогда
		ДополнительныйВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПустаяСсылка();
	КонецЕсли;
	
	КомандыВариантовГруппировки = Новый Соответствие;
	КомандыВариантовГруппировки.Вставить(
		Перечисления.ВариантыГруппировкиЗадач.БезГруппировки,
		Элементы.ФормаБезГруппировки);
	КомандыВариантовГруппировки.Вставить(
		Перечисления.ВариантыГруппировкиЗадач.ПоАвтору,
		Элементы.ФормаСгруппироватьПоАвтору);
	КомандыВариантовГруппировки.Вставить(
		Перечисления.ВариантыГруппировкиЗадач.ПоВидуЗадачи,
		Элементы.ФормаСгруппироватьПоВидуЗадачи);
	КомандыВариантовГруппировки.Вставить(
		Перечисления.ВариантыГруппировкиЗадач.ПоИсполнителю,
		Элементы.ФормаСгруппироватьПоИсполнителю);
	КомандыВариантовГруппировки.Вставить(
		Перечисления.ВариантыГруппировкиЗадач.ПоПриложениюБезГрупп,
		Элементы.ФормаСгруппироватьПоПриложениюБезГрупп);
	КомандыВариантовГруппировки.Вставить(
		Перечисления.ВариантыГруппировкиЗадач.ПоПриложениюПоГруппам,
		Элементы.ФормаСгруппироватьПоПриложениюПоГруппам);
	КомандыВариантовГруппировки.Вставить(
		Перечисления.ВариантыГруппировкиЗадач.ПоПроекту,
		Элементы.ФормаСгруппироватьПоПроекту);
	КомандыВариантовГруппировки.Вставить(
		Перечисления.ВариантыГруппировкиЗадач.ПоФлагу,
		Элементы.ФормаСгруппироватьПоФлагу);
	
	КомандаВариантаГруппировки = КомандыВариантовГруппировки.Получить(ТекущийВариантГруппировки);
	Если КомандаВариантаГруппировки = Неопределено Тогда
		ТекущийВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.БезГруппировки;
		КомандаВариантаГруппировки = КомандыВариантовГруппировки.Получить(ТекущийВариантГруппировки);
	Конецесли;
	
	Для Каждого КлючИЗначение Из КомандыВариантовГруппировки Цикл
		
		ОчереднойВариантГруппировки = КлючИЗначение.Ключ;
		ОчереднаяКомандаВарианта = КлючИЗначение.Значение;
		
		ОчереднаяКомандаВарианта.Пометка = ОчереднойВариантГруппировки = ТекущийВариантГруппировки;
		
	КонецЦикла;
	
	СтараяОсновнаяГруппировка = ТекущаяГруппировка;
	СтараяДополнительнаяГруппировка = ТекущаяДополнительнаяГруппировка;
	
	Группировки.ПолучитьЭлементы().Очистить();
	ОбновитьГруппировки();
	
	ЭлементыГруппировки = Группировки.ПолучитьЭлементы();
	Если ЭлементыГруппировки.Количество() > 0 Тогда
		ТекущаяГруппировка = ГруппировкаПоУИД(ЭлементыГруппировки[0].ГруппировкаУИД);
		ТекущаяДополнительнаяГруппировка = ГруппировкаПоУИД(ЭлементыГруппировки[0].ДополнительнаяГруппировкаУИД);
		Элементы.Группировки.ТекущаяСтрока = ЭлементыГруппировки[0].ПолучитьИдентификатор();
		
		ВосстановитьГруппировки(СтараяОсновнаяГруппировка, СтараяДополнительнаяГруппировка);
		
		УстановитьПараметрыГруппировкиНаСервере();
	Иначе
		Если ЭтоМобильныйКлиент Тогда
			ЕстьГруппировки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьПредставлениеБыстрогоПоиска();
	ОбновитьЭлементыСтрокиГруппировок();

	ОбновитьЭлементыДополнительнойГруппировки();
	НастроитьЭлементыПоРучномуПоказуДереваГруппировок();
	
	Если ЭтоМобильныйКлиент Тогда
		МК_ОбновитьЗаголовокГруппировки(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ГруппировкаПоУИД(ГруппировкаУИД)
	
	ГруппировкаПоУИД = Справочники.ГруппировкиЗадач.ПолучитьСсылку(ГруппировкаУИД);
	
	Возврат ГруппировкаПоУИД;
	
КонецФункции

&НаСервере
Процедура ВосстановитьГруппировки(ОсновнаяГруппировка, ДополнительнаяГруппировка)
	
	НужнаяСтрока = Неопределено;
	ПохожаяСтрока = Неопределено;
	
	СтрокиКПоиску = Новый Массив;
	Для Каждого Строка Из Группировки.ПолучитьЭлементы() Цикл
		СтрокиКПоиску.Добавить(Строка);
	КонецЦикла;
	
	Пока СтрокиКПоиску.Количество() > 0 Цикл
		
		Строка = СтрокиКПоиску[0];
		
		Если Строка.ГруппировкаУИД = ОсновнаяГруппировка.УникальныйИдентификатор()
			И Строка.ДополнительнаяГруппировкаУИД = ДополнительнаяГруппировка.УникальныйИдентификатор() Тогда
			
			НужнаяСтрока = Строка;
			СтрокиКПоиску.Очистить();
			Продолжить;
			
		КонецЕсли;
		
		Если Строка.ГруппировкаУИД = ОсновнаяГруппировка.УникальныйИдентификатор()
			И Не ЗначениеЗаполнено(Строка.ДополнительнаяГруппировкаУИД) Тогда
			
			ПохожаяСтрока = Строка;
		КонецЕсли;
		
		СтрокиКПоиску.Удалить(0);
		
		Для Каждого ВложенныйЭлемент Из Строка.ПолучитьЭлементы() Цикл
			СтрокиКПоиску.Добавить(ВложенныйЭлемент);
		КонецЦикла;
		
	КонецЦикла;
	
	Если НужнаяСтрока <> Неопределено Тогда
		ТекущаяГруппировка =
			Справочники.ГруппировкиЗадач.ПолучитьСсылку(НужнаяСтрока.ГруппировкаУИД);
		ТекущаяДополнительнаяГруппировка =
			Справочники.ГруппировкиЗадач.ПолучитьСсылку(НужнаяСтрока.ДополнительнаяГруппировкаУИД);
		Элементы.Группировки.ТекущаяСтрока = НужнаяСтрока.ПолучитьИдентификатор();
		Возврат;
	КонецЕсли;
	
	Если ПохожаяСтрока <> Неопределено Тогда
		ТекущаяГруппировка =
			Справочники.ГруппировкиЗадач.ПолучитьСсылку(ПохожаяСтрока.ГруппировкаУИД);
		ТекущаяДополнительнаяГруппировка =
			Справочники.ГруппировкиЗадач.ПолучитьСсылку(ПохожаяСтрока.ДополнительнаяГруппировкаУИД);
		Элементы.Группировки.ТекущаяСтрока = ПохожаяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительнойГруппировки()
	
	Элементы.ДополнительныйВариантГруппировки.Видимость = Ложь;
	Элементы.КартинкаДобавитьДопГруппировку.Видимость = Ложь;
	Элементы.ДополнительныйВариантГруппировки.КнопкаОчистки = Ложь;
	Элементы.ДополнительныйВариантГруппировки.СписокВыбора.Очистить();
	
	Если Не ЗначениеЗаполнено(ТекущийВариантГруппировки)
		Или ТекущийВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.БезГруппировки Тогда
		
		Возврат;
	КонецЕсли;
	
	ВозможныеДопГруппировки = ДополнительныеВарианыГруппировки(ТекущийВариантГруппировки, ВестиУчетПоПроектам);
	Для Каждого ВариантГруппировки Из ВозможныеДопГруппировки Цикл
		Элементы.ДополнительныйВариантГруппировки.СписокВыбора.Добавить(
			ВариантГруппировки, ВариантГруппировки);
	КонецЦикла;
	
	ДопГруппировкаНеУказана = Не ЗначениеЗаполнено(ДополнительныйВариантГруппировки)
		Или ДополнительныйВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.БезГруппировки;
	
	Элементы.ДополнительныйВариантГруппировки.Видимость = Не ДопГруппировкаНеУказана;
	Элементы.КартинкаДобавитьДопГруппировку.Видимость = ДопГруппировкаНеУказана;
	Элементы.ДополнительныйВариантГруппировки.КнопкаОчистки = Не ДопГруппировкаНеУказана;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДополнительныеВарианыГруппировки(ВариантГруппировки, ВестиУчетПоПроектам)
	
	ПоАвтору = ПредопределенноеЗначение("Перечисление.ВариантыГруппировкиЗадач.ПоАвтору");
	ПоВидуЗадачи = ПредопределенноеЗначение("Перечисление.ВариантыГруппировкиЗадач.ПоВидуЗадачи");
	ПоИсполнителю = ПредопределенноеЗначение("Перечисление.ВариантыГруппировкиЗадач.ПоИсполнителю");
	ПоПриложениюБезГрупп = ПредопределенноеЗначение("Перечисление.ВариантыГруппировкиЗадач.ПоПриложениюБезГрупп");
	ПоПриложениюПоГруппам = ПредопределенноеЗначение("Перечисление.ВариантыГруппировкиЗадач.ПоПриложениюПоГруппам");
	ПоПроекту = ПредопределенноеЗначение("Перечисление.ВариантыГруппировкиЗадач.ПоПроекту");
	ПоФлагу = ПредопределенноеЗначение("Перечисление.ВариантыГруппировкиЗадач.ПоФлагу");
	
	ДопВариантыГруппировки = Новый Массив;
	
	Если ВариантГруппировки = ПоАвтору Тогда
		
		ДопВариантыГруппировки.Добавить(ПоВидуЗадачи);
		ДопВариантыГруппировки.Добавить(ПоИсполнителю);
		ДопВариантыГруппировки.Добавить(ПоПриложениюБезГрупп);
		ДопВариантыГруппировки.Добавить(ПоПриложениюПоГруппам);
		Если ВестиУчетПоПроектам Тогда
			ДопВариантыГруппировки.Добавить(ПоПроекту);
		КонецЕсли;
		ДопВариантыГруппировки.Добавить(ПоФлагу);
		
	ИначеЕсли ВариантГруппировки = ПоВидуЗадачи Тогда
		
		ДопВариантыГруппировки.Добавить(ПоАвтору);
		ДопВариантыГруппировки.Добавить(ПоИсполнителю);
		ДопВариантыГруппировки.Добавить(ПоПриложениюБезГрупп);
		ДопВариантыГруппировки.Добавить(ПоПриложениюПоГруппам);
		Если ВестиУчетПоПроектам Тогда
			ДопВариантыГруппировки.Добавить(ПоПроекту);
		КонецЕсли;
		ДопВариантыГруппировки.Добавить(ПоФлагу);
		
	ИначеЕсли ВариантГруппировки = ПоИсполнителю Тогда
		
		ДопВариантыГруппировки.Добавить(ПоАвтору);
		ДопВариантыГруппировки.Добавить(ПоВидуЗадачи);
		ДопВариантыГруппировки.Добавить(ПоПриложениюБезГрупп);
		ДопВариантыГруппировки.Добавить(ПоПриложениюПоГруппам);
		Если ВестиУчетПоПроектам Тогда
			ДопВариантыГруппировки.Добавить(ПоПроекту);
		КонецЕсли;
		ДопВариантыГруппировки.Добавить(ПоФлагу);
		
	ИначеЕсли ВариантГруппировки = ПоПриложениюБезГрупп
		Или ВариантГруппировки = ПоПриложениюПоГруппам Тогда
		
		ДопВариантыГруппировки.Добавить(ПоАвтору);
		ДопВариантыГруппировки.Добавить(ПоВидуЗадачи);
		ДопВариантыГруппировки.Добавить(ПоИсполнителю);
		Если ВестиУчетПоПроектам Тогда
			ДопВариантыГруппировки.Добавить(ПоПроекту);
		КонецЕсли;
		ДопВариантыГруппировки.Добавить(ПоФлагу);
		
	ИначеЕсли ВариантГруппировки = ПоПроекту Тогда
		
		ДопВариантыГруппировки.Добавить(ПоАвтору);
		ДопВариантыГруппировки.Добавить(ПоВидуЗадачи);
		ДопВариантыГруппировки.Добавить(ПоИсполнителю);
		ДопВариантыГруппировки.Добавить(ПоПриложениюБезГрупп);
		ДопВариантыГруппировки.Добавить(ПоПриложениюПоГруппам);
		ДопВариантыГруппировки.Добавить(ПоФлагу);
		
	ИначеЕсли ВариантГруппировки = ПоФлагу Тогда
		
		ДопВариантыГруппировки.Добавить(ПоАвтору);
		ДопВариантыГруппировки.Добавить(ПоВидуЗадачи);
		ДопВариантыГруппировки.Добавить(ПоИсполнителю);
		ДопВариантыГруппировки.Добавить(ПоПриложениюБезГрупп);
		ДопВариантыГруппировки.Добавить(ПоПриложениюПоГруппам);
		Если ВестиУчетПоПроектам Тогда
			ДопВариантыГруппировки.Добавить(ПоПроекту);
		КонецЕсли;
		
	Иначе
		
		Возврат ДопВариантыГруппировки;
		
	КонецЕсли;
	
	Возврат ДопВариантыГруппировки;
	
КонецФункции

&НаКлиенте
Процедура РезультатДействияТекстомПослеВыбораШаблонаТекста(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатДействияТекстом = ШаблоныТекстовВызовСервера.ТекстШаблона(Результат);
	РезультатСохранения = РаботаСЗадачамиКлиент.СохранитьРезультатДействия(
		ТекущаяЗадачаИлиДействие,
		РезультатДействияТекстом,
		ВерсияДанныхТекущегоДействияЗадачи,
		Истина,
		Истина,
		ЭтотОбъект);
	
	ВерсияДанныхТекущегоДействияЗадачи = РезультатСохранения.НоваяВерсияДанных;
	
КонецПроцедуры

&НаСервере
Процедура СброситьОтборНаСервере()
	
	РаботаСБыстрымПоиском.СброситьОтборНаСервере(
		БыстрыйПоиск,
		Элементы.СброситьОтбор);
	СохранитьБыстрыйПоиск();
	УстановитьПараметрыГруппировкиНаСервере();
	
	ОбновитьПредставлениеБыстрогоПоиска();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьБыстрыйПоиск()
	
	МассивБыстрыйПоиск = Новый Массив;
	Для Каждого Строка Из БыстрыйПоиск Цикл
		
		Если Строка.Фиксированный Тогда
			Продолжить;
		КонецЕсли;
		
		НастройкаЗначение = Новый Структура("Параметр, Значение", Строка.Параметр, Строка.Значение);
		МассивБыстрыйПоиск.Добавить(НастройкаЗначение);
		
	КонецЦикла;
	
	РаботаСЗадачами.УстановитьПерсональнуюНастройку(
		"БыстрыйПоиск" + КлючНазначенияИспользования,
		МассивБыстрыйПоиск);
	
КонецПроцедуры	

&НаКлиенте
Процедура УстановитьАвтообновлениеФормы()
	
	Если ТипЗнч(НастройкиАвтообновления) = Тип("Структура")
		И НастройкиАвтообновления.Автообновление Тогда
		ПодключитьОбработчикОжидания(
			"ОбработчикАвтообновление", 
			НастройкиАвтообновления.ПериодАвтоОбновления,
			Ложь);
	Иначе
		ОтключитьОбработчикОжидания("ОбработчикАвтообновление");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандПриложенийРезультата()
	
	ТекущиеДанные = Элементы.ПриложенияРезультата.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ЭтоФайл = Ложь;
	
	Если ТипЗнч(ТекущиеДанные.Приложение) = Тип("СправочникСсылка.Файлы") Тогда
		
		ЭтоФайл = Истина;
		
		Элементы.ПриложенияРезультатаКонтекстноеМенюРедактироватьФайлРезультата.Доступность =
			Не ЗначениеЗаполнено(ТекущиеДанные.Редактирует)
			И ПриложенияРезультатаИзменятьСоставСтрок;
			
		Элементы.ПриложенияРезультатаКонтекстноеМенюЗакончитьРедактированиеФайлаРезультата.Доступность =
			ТекущиеДанные.РедактируетТекущийПользователь
			И ПриложенияРезультатаИзменятьСоставСтрок;
		
		Элементы.ПриложенияРезультатаКонтекстноеМенюОсвободитьПриложениеРезультата.Доступность =
			ТекущиеДанные.РедактируетТекущийПользователь
			И ПриложенияРезультатаИзменятьСоставСтрок;
			
		Элементы.ПриложенияРезультатаКонтекстноеМенюФайлыРезультатаОбновитьИзФайлаНаДиске.Доступность =
			ПриложенияРезультатаИзменятьСоставСтрок;
		
	КонецЕсли;
	
	Элементы.ПриложенияРезультатаКонтекстноеМенюОткрытьПриложениеРезультата.Видимость = ЭтоФайл;
	Элементы.ПриложенияРезультатаКонтекстноеМенюРедактироватьФайлРезультата.Видимость = ЭтоФайл;
	Элементы.ПриложенияРезультатаКонтекстноеМенюУдалить.Доступность = ПриложенияРезультатаИзменятьСоставСтрок;
	Элементы.ПриложенияРезультатаКонтекстноеМенюЗакончитьРедактированиеФайлаРезультата.Видимость = ЭтоФайл;
	Элементы.ПриложенияРезультатаКонтекстноеМенюОсвободитьПриложениеРезультата.Видимость = ЭтоФайл;
	Элементы.ПриложенияРезультатаКонтекстноеМенюФайлыРезультатаОбновитьИзФайлаНаДиске.Видимость = ЭтоФайл;
	Элементы.ПриложенияРезультатаКонтекстноеМенюСохранитьКакФайлРезультата.Видимость = ЭтоФайл;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьКлючНазначенияИспользования()
	
	Если КлючНазначенияИспользования = "" Тогда
		КлючНазначенияИспользования = "ЗадачиМне";
	КонецЕсли;
	
	БыстрыйПоискДоступен = Истина;
	ГруппировкиДоступны = Истина;
	ДоступенПоказВыполненных = Ложь;
	
	Если КлючНазначенияИспользования = "ВсеЗадачи" Тогда
		
		Заголовок = Метаданные.Документы.Задача.Команды.ВсеЗадачи.Синоним;
		
		ТекущийРеестрЗадач = Справочники.РеестрыЗадач.ВсеЗадачи;
		
		Элементы.ГруппировкаКоличество.Видимость = Ложь;
		
	ИначеЕсли КлючНазначенияИспользования = "ЗадачиМне" Тогда
		
		Заголовок = Метаданные.Документы.Задача.Команды.ЗадачиМне.Синоним;
		
		ДоступенПоказВыполненных = Истина;
		
		ТекущийРеестрЗадач = Справочники.РеестрыЗадач.РеестрЗадачиМне(
			Пользователи.ТекущийПользователь());
				
	ИначеЕсли КлючНазначенияИспользования = "ЗадачиМнеВСрокБезОзнакомления" Тогда
		
		Заголовок = Метаданные.Документы.Задача.Команды.ЗадачиМнеВСрокБезОзнакомления.Синоним;
		УстановитьФиксированныйПоиск("Состояние", Перечисления.ОтборыПоСтатусуЗадач.ВСрок);
		
		ТекущийРеестрЗадач = Справочники.РеестрыЗадач.РеестрЗадачиМне(
			Пользователи.ТекущийПользователь());
		
	ИначеЕсли КлючНазначенияИспользования = "ЗадачиМнеИстекаетБезОзнакомления" Тогда
		
		Заголовок = Метаданные.Документы.Задача.Команды.ЗадачиМнеИстекаетБезОзнакомления.Синоним;
		УстановитьФиксированныйПоиск("Состояние", Перечисления.ОтборыПоСтатусуЗадач.Истекающие);
		
		ТекущийРеестрЗадач = Справочники.РеестрыЗадач.РеестрЗадачиМне(
			Пользователи.ТекущийПользователь());
		
	ИначеЕсли КлючНазначенияИспользования = "ЗадачиМнеПросроченоБезОзнакомления" Тогда
		
		Заголовок = Метаданные.Документы.Задача.Команды.ЗадачиМнеПросроченоБезОзнакомления.Синоним;
		УстановитьФиксированныйПоиск("Состояние", Перечисления.ОтборыПоСтатусуЗадач.Просроченные);
		
		ТекущийРеестрЗадач = Справочники.РеестрыЗадач.РеестрЗадачиМне(
			Пользователи.ТекущийПользователь());
		
	ИначеЕсли КлючНазначенияИспользования = "ЗадачиМнеДругие" Тогда
		
		Заголовок = Метаданные.Документы.Задача.Команды.ЗадачиМнеДругие.Синоним;
		УстановитьФиксированныйПоиск("ВидДействия", РаботаСЗадачами.ДругиеВидыДействийЗадач());
		
		ДоступенПоказВыполненных = Истина;
		
		ТекущийРеестрЗадач = Справочники.РеестрыЗадач.РеестрЗадачиМне(
			Пользователи.ТекущийПользователь());
		
	ИначеЕсли КлючНазначенияИспользования = "ЗадачиМнеНаИсполнение" Тогда
		
		Заголовок = Метаданные.Документы.Задача.Команды.ЗадачиМнеНаИсполнение.Синоним;
		УстановитьФиксированныйПоиск("ВидДействия", Справочники.ВидыДействийЗадач.Исполнить);
		
		ДоступенПоказВыполненных = Истина;
		
		ТекущийРеестрЗадач = Справочники.РеестрыЗадач.РеестрЗадачиМне(
			Пользователи.ТекущийПользователь());
		
	ИначеЕсли КлючНазначенияИспользования = "ЗадачиМнеНаОзнакомление" Тогда
		
		Заголовок = Метаданные.Документы.Задача.Команды.ЗадачиМнеНаОзнакомление.Синоним;
		УстановитьФиксированныйПоиск("ВидДействия", Справочники.ВидыДействийЗадач.Ознакомиться);
		
		ДоступенПоказВыполненных = Истина;
		
		ТекущийРеестрЗадач = Справочники.РеестрыЗадач.РеестрЗадачиМне(
			Пользователи.ТекущийПользователь());
		
	ИначеЕсли КлючНазначенияИспользования = "ЗадачиМнеНаРассмотрение" Тогда
		
		Заголовок = Метаданные.Документы.Задача.Команды.ЗадачиМнеНаРассмотрение.Синоним;
		УстановитьФиксированныйПоиск("ВидДействия", Справочники.ВидыДействийЗадач.Рассмотреть);
		
		ДоступенПоказВыполненных = Истина;
		
		ТекущийРеестрЗадач = Справочники.РеестрыЗадач.РеестрЗадачиМне(
			Пользователи.ТекущийПользователь());
		
	ИначеЕсли КлючНазначенияИспользования = "ЗадачиМнеНаРегистрацию" Тогда
		
		Заголовок = Метаданные.Документы.Задача.Команды.ЗадачиМнеНаРегистрацию.Синоним;
		УстановитьФиксированныйПоиск("ВидДействия", Справочники.ВидыДействийЗадач.Зарегистрировать);
		
		ДоступенПоказВыполненных = Истина;
		
		ТекущийРеестрЗадач = Справочники.РеестрыЗадач.РеестрЗадачиМне(
			Пользователи.ТекущийПользователь());
		
	ИначеЕсли КлючНазначенияИспользования = "ЗадачиМнеНаСогласование" Тогда
		
		Заголовок = Метаданные.Документы.Задача.Команды.ЗадачиМнеНаСогласование.Синоним;
		УстановитьФиксированныйПоиск("ВидДействия", Справочники.ВидыДействийЗадач.Согласовать);
		
		ДоступенПоказВыполненных = Истина;
		
		ТекущийРеестрЗадач = Справочники.РеестрыЗадач.РеестрЗадачиМне(
			Пользователи.ТекущийПользователь());
		
	ИначеЕсли КлючНазначенияИспользования = "ЗадачиМнеНаУтверждение" Тогда
		
		Заголовок = Метаданные.Документы.Задача.Команды.ЗадачиМнеНаУтверждение.Синоним;
		УстановитьФиксированныйПоиск("ВидДействия", Справочники.ВидыДействийЗадач.Утвердить);
		
		ДоступенПоказВыполненных = Истина;
		
		ТекущийРеестрЗадач = Справочники.РеестрыЗадач.РеестрЗадачиМне(
			Пользователи.ТекущийПользователь());
		
	ИначеЕсли КлючНазначенияИспользования = "ЗадачиМнеНеНачатые" Тогда
		
		Заголовок = Метаданные.Документы.Задача.Команды.ЗадачиМнеНеНачатые.Синоним;
		УстановитьФиксированныйПоиск("Состояние", Перечисления.ОтборыПоСтатусуЗадач.НеНачатые);
		
		ТекущийРеестрЗадач = Справочники.РеестрыЗадач.РеестрЗадачиМне(
			Пользователи.ТекущийПользователь());
		
	ИначеЕсли КлючНазначенияИспользования = "ЗадачиМнеНеНачатыеБезОзнакомления" Тогда
		
		Заголовок = Метаданные.Документы.Задача.Команды.ЗадачиМнеНеНачатыеБезОзнакомления.Синоним;
		УстановитьФиксированныйПоиск("Состояние", Перечисления.ОтборыПоСтатусуЗадач.НеНачатые);
		
		ТекущийРеестрЗадач = Справочники.РеестрыЗадач.РеестрЗадачиМне(
			Пользователи.ТекущийПользователь());
		
	ИначеЕсли КлючНазначенияИспользования = "ЗадачиМнеПоступилиОбновления" Тогда
		
		Заголовок = Метаданные.Документы.Задача.Команды.ЗадачиМнеПоступилиОбновления.Синоним;
		УстановитьФиксированныйПоиск("Состояние", Перечисления.ОтборыПоСтатусуЗадач.ПоступилиОбновления);
		Элементы.ФормаОзнакомитьсяСОбновлением.Видимость = Истина;
		
		ТекущийРеестрЗадач = Справочники.РеестрыЗадач.РеестрЗадачиМне(
			Пользователи.ТекущийПользователь());
		
	ИначеЕсли КлючНазначенияИспользования = "ЗадачиМнеПросроченные" Тогда
		
		Заголовок = Метаданные.Документы.Задача.Команды.ЗадачиМнеПросроченные.Синоним;
		УстановитьФиксированныйПоиск("Состояние", Перечисления.ОтборыПоСтатусуЗадач.Просроченные);
		
		ТекущийРеестрЗадач = Справочники.РеестрыЗадач.РеестрЗадачиМне(
			Пользователи.ТекущийПользователь());
		
	ИначеЕсли КлючНазначенияИспользования = "ЗадачиОтМеня" Тогда
		
		Заголовок = Метаданные.Документы.Задача.Команды.ЗадачиОтМеня.Синоним;
		
		ДоступенПоказВыполненных = Истина;
		
		ТекущийРеестрЗадач = Справочники.РеестрыЗадач.РеестрЗадачиОтМеня(
			Пользователи.ТекущийПользователь());
		
	ИначеЕсли КлючНазначенияИспользования = "ЗадачиОтМеняНеВыполненные" Тогда
		
		Заголовок = Метаданные.Документы.Задача.Команды.ЗадачиОтМеняНеВыполненные.Синоним;
		УстановитьФиксированныйПоиск("Состояние", Перечисления.ОтборыПоСтатусуЗадач.НеВыполненные);
		
		ТекущийРеестрЗадач = Справочники.РеестрыЗадач.РеестрЗадачиОтМеня(
			Пользователи.ТекущийПользователь());
		
	ИначеЕсли КлючНазначенияИспользования = "ЗадачиОтМеняНеНачатые" Тогда
		
		Заголовок = Метаданные.Документы.Задача.Команды.ЗадачиОтМеняНеНачатые.Синоним;
		УстановитьФиксированныйПоиск("Состояние", Перечисления.ОтборыПоСтатусуЗадач.НеНачатые);
		
		ТекущийРеестрЗадач = Справочники.РеестрыЗадач.РеестрЗадачиОтМеня(
			Пользователи.ТекущийПользователь());
		
	ИначеЕсли КлючНазначенияИспользования = "ЗадачиОтМеняПросроченные" Тогда
		
		Заголовок = Метаданные.Документы.Задача.Команды.ЗадачиОтМеняПросроченные.Синоним;
		УстановитьФиксированныйПоиск("Состояние", Перечисления.ОтборыПоСтатусуЗадач.Просроченные);
		
		ТекущийРеестрЗадач = Справочники.РеестрыЗадач.РеестрЗадачиОтМеня(
			Пользователи.ТекущийПользователь());
		
	ИначеЕсли КлючНазначенияИспользования = "ЗадачиОтМеняЧерновики" Тогда
		
		Заголовок = Метаданные.Документы.Задача.Команды.ЗадачиОтМеняЧерновики.Синоним;
		УстановитьФиксированныйПоиск("Состояние", Справочники.СостоянияЗадач.Черновик);
		
		ГруппировкиДоступны = Ложь;
		
		ТекущийРеестрЗадач = Справочники.РеестрыЗадач.РеестрЗадачиОтМеня(
			Пользователи.ТекущийПользователь());
		
	ИначеЕсли КлючНазначенияИспользования = "ЗадачиПодчиненных" Тогда
		
		Заголовок = Метаданные.Документы.Задача.Команды.ЗадачиПодчиненных.Синоним;
		
		ДоступенПоказВыполненных = Истина;
		
		ТекущийРеестрЗадач = Справочники.РеестрыЗадач.РеестрЗадачиПодчиненных(
			Пользователи.ТекущийПользователь());
		
	ИначеЕсли КлючНазначенияИспользования = "ЗадачиПодчиненныхНеНачатые" Тогда
		
		Заголовок = Метаданные.Документы.Задача.Команды.ЗадачиПодчиненныхНеНачатые.Синоним;
		УстановитьФиксированныйПоиск("Состояние", Перечисления.ОтборыПоСтатусуЗадач.НеНачатые);
		
		ТекущийРеестрЗадач = Справочники.РеестрыЗадач.РеестрЗадачиПодчиненных(
			Пользователи.ТекущийПользователь());
		
	ИначеЕсли КлючНазначенияИспользования = "ЗадачиПодчиненныхПросроченные" Тогда
		
		Заголовок = Метаданные.Документы.Задача.Команды.ЗадачиПодчиненныхПросроченные.Синоним;
		УстановитьФиксированныйПоиск("Состояние", Перечисления.ОтборыПоСтатусуЗадач.Просроченные);
		
		ТекущийРеестрЗадач = Справочники.РеестрыЗадач.РеестрЗадачиПодчиненных(
			Пользователи.ТекущийПользователь());
		
	ИначеЕсли КлючНазначенияИспользования = "ЗадачиПоПриложению" Тогда
		
		Заголовок = СтрШаблон(НСтр("ru = 'Задачи по ""%1""'"), Параметры.Приложение);
		ОтборПоПриложению = Параметры.Приложение;
		ОтключитьОтображениеИтогов = Истина;
		
		РежимДерева = Истина;
		
		БыстрыйПоискДоступен = Ложь;
		ГруппировкиДоступны = Ложь;
		
	ИначеЕсли КлючНазначенияИспользования = "ЗадачиПоПроектам" Тогда
		
		Заголовок = Метаданные.Документы.Задача.Команды.ЗадачиПоПроектам.Синоним;
		
		ДоступенПоказВыполненных = Истина;
		
		ТекущийРеестрЗадач = Справочники.РеестрыЗадач.РеестрЗадачиПоПроектам(
			Пользователи.ТекущийПользователь());
		
	ИначеЕсли КлючНазначенияИспользования = "ВыборЗадачи"
		Или КлючНазначенияИспользования = "ВыборДействияЗадачи" Тогда
		
		Заголовок = НСтр("ru = 'Выбор задачи'");
		
		Ширина = 210;
		
		РежимВыбора = Истина;
		Элементы.ГруппаКомандыВыбора.Видимость = Истина;
		Элементы.ГруппаОсновныеКоманды.Видимость = Ложь;
		Элементы.ГруппаДополнительныеКоманды.Видимость = Ложь;
		Элементы.СписокДействияЗадач.Ширина = 0;
		Элементы.СписокЗадач.Ширина = 0;
		Элементы.ДеревоЗадач.Ширина = 0;
		
		Если Параметры.МножественныйВыбор Тогда
			Элементы.СписокЗадач.РежимВыделения = РежимВыделенияТаблицы.Множественный;
			Элементы.СписокДействияЗадач.РежимВыделения = РежимВыделенияТаблицы.Множественный;
		Иначе
			Элементы.СписокЗадач.РежимВыделения = РежимВыделенияТаблицы.Одиночный;
			Элементы.СписокДействияЗадач.РежимВыделения = РежимВыделенияТаблицы.Одиночный;
		КонецЕсли;
		
		ТекущийРеестрЗадач = Справочники.РеестрыЗадач.ВсеЗадачи;
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестный ключ назначения использования %1.'"),
			КлючНазначенияИспользования);
		
	КонецЕсли;
	
	СписокДействияЗадач.Параметры.УстановитьЗначениеПараметра("РеестрЗадач", ТекущийРеестрЗадач);
	СписокЗадач.Параметры.УстановитьЗначениеПараметра("РеестрЗадач", ТекущийРеестрЗадач);
	
	Элементы.ФормаСгруппироватьПо.Видимость = ГруппировкиДоступны;
	Элементы.ГруппаПанельГруппировка.Видимость = ГруппировкиДоступны;
	
	Если Не ЭтоМобильныйКлиент Тогда
		Элементы.ФормаБыстрыйПоиск.Видимость = БыстрыйПоискДоступен;
		Элементы.ГруппаБыстрыйПоиск.Видимость = БыстрыйПоискДоступен;
	КонецЕсли;
	
	Элементы.СтраницаДеревоЗадач.Видимость = РежимДерева;
	Элементы.СтраницаСписокЗадач.Видимость = Не РежимДерева;
	Элементы.СтраницаСписокДействияЗадач.Видимость = Не РежимДерева;
	
	Элементы.ФормаСтрокаПоискаВДеревеЗадач.Видимость = РежимДерева;
	Элементы.ФормаСтрокаПоискаВСпискеЗадач.Видимость = Не РежимДерева;
	Элементы.ФормаСтрокаПоискаВСпискеДействийЗадач.Видимость = Не РежимДерева;
	
	Элементы.ВывестиСписокДереваЗадач.Видимость = РежимДерева;
	Элементы.ВывестиСписокЗадачПоАвторам.Видимость = Не РежимДерева;
	Элементы.ВывестиСписокЗадачПоИсполнителям.Видимость = Не РежимДерева;
	
	Элементы.ФормаСоздатьЗадачуКопированием.Видимость = 
		СтрНачинаетсяС(КлючНазначенияИспользования, "ЗадачиОтМеня")
			Или СтрНачинаетсяС(КлючНазначенияИспользования, "ЗадачиПодчиненных");
	
	ПоказыватьВыполненные = РаботаСЗадачами.ПолучитьПерсональнуюНастройку(
		"ПоказыватьВыполненные" + КлючНазначенияИспользования);
	Элементы.ПоказыватьВыполненные.Видимость = ДоступенПоказВыполненных;
	Элементы.ПоказыватьВыполненные.Пометка = ПоказыватьВыполненные;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыАвтообновленияФормы()
	
	ОписаниеОповещения = 
		Новый ОписаниеОповещения(
			"УстановитьПараметрыАвтообновленияФормыПродолжение",
			ЭтотОбъект);
	
	АвтообновлениеКлиент.УстановитьПараметрыАвтообновленияФормы(
		ЭтотОбъект,
		НастройкиАвтообновления,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыАвтообновленияФормыПродолжение(Результат, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		НастройкиАвтообновления = Результат;
		УстановитьАвтообновлениеФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФиксированныйПоиск(Параметр, Значение)
	
	УстановленФиксированныйПоиск = Ложь;
	Для Каждого Строка Из БыстрыйПоиск Цикл
		
		Если Строка.Параметр <> Параметр Тогда
			Продолжить;
		КонецЕсли;
		
		УстановленФиксированныйПоиск = Истина;
		
		Если ТипЗнч(Значение) = Тип("Массив") Тогда
			Строка.Значение = Новый СписокЗначений();
			Строка.Значение.ЗагрузитьЗначения(Значение);
		Иначе
			Строка.Значение = Значение;			
		КонецЕсли;
		
		Строка.Фиксированный = Истина;
		
		Прервать;
		
	КонецЦикла;
	
	Если Не УстановленФиксированныйПоиск Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Не удалось установить фиксированный поиск: ""%1: %2"".'"),
			Параметр,
			Значение);
	КонецЕсли;
	
	ОбновитьПредставлениеБыстрогоПоиска();
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьПараметрБыстрогоПоиска(Параметр, Группировка)
	
	Для Каждого Строка Из БыстрыйПоиск Цикл
		
		// Ищем нужный поиск, только его обрабатываем в данном вызове.
		ЭтоНужныйПоиск = Строка.Параметр = Параметр;
		Если Не ЭтоНужныйПоиск Тогда
			Продолжить;
		КонецЕсли;
		
		// Фиксированные поиски никогда не очищаем.
		ЭтоФиксированныйПоиск = Строка.Фиксированный;
		Если ЭтоФиксированныйПоиск Тогда
			Продолжить;
		КонецЕсли;
		
		// Если поиск не задан, то его очистка не требуется.
		ЗаданПоиск = ЗначениеЗаполнено(Строка.Значение);
		Если Не ЗаданПоиск Тогда
			Продолжить;
		КонецЕсли;
		
		// Проверим, регулирует ли группировка поиск.
		ГруппировкаРегулируетПоиск =
			ЗначениеЗаполнено(Группировка[Параметр]);
		Если Не ГруппировкаРегулируетПоиск И Параметр = ТипБыстрогоПоискаВидПриложения() Тогда
			// Помимо вида приложения, на поиск может вилять тип приложения.
			ГруппировкаРегулируетПоиск = ЗначениеЗаполнено(Группировка["ТипПриложения"]);
		ИначеЕсли Не ГруппировкаРегулируетПоиск И Параметр = ТипБыстрогоПоискаФлаг() Тогда
			// Помимо флага, на поиск может отсутствие флага явное.
			ГруппировкаРегулируетПоиск = ЗначениеЗаполнено(Группировка["БезФлага"]);
		ИначеЕсли Не ГруппировкаРегулируетПоиск И Параметр = ТипБыстрогоПоискаВидДействия() Тогда
			// Помимо вида действия задачи, на поиск может влиять вид задачи.
			ГруппировкаРегулируетПоиск = ЗначениеЗаполнено(Группировка["ВидЗадачи"]);
		КонецЕсли;
		Если Не ГруппировкаРегулируетПоиск Тогда
			Продолжить;
		КонецЕсли;
		
		// Проверим, подходит ли поиск под группировку.
		ПоискПодходитПодГруппировку =
			Строка.Значение = Группировка[Параметр]
			Или Строка.Значение = Группировка["ВидЗадачи"];
		Если Не ПоискПодходитПодГруппировку
			И Параметр = ТипБыстрогоПоискаВидПриложения()
			И ЗначениеЗаполнено(Группировка[Параметр])
			И Строка.Значение <> Группировка[Параметр]
			И ТипЗнч(Строка.Значение) = Тип("СправочникСсылка.ВидыДокументов")
			И ТипЗнч(Группировка[Параметр]) = Тип("СправочникСсылка.ВидыДокументов") Тогда
			
			// Явно не совпал отбор по группировке и поиск, но, может совпадет по группировке.
			ВидДокументаРодитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Значение, "Родитель");
			Пока ЗначениеЗаполнено(ВидДокументаРодитель) Цикл
				Если ВидДокументаРодитель = Группировка[Параметр] Тогда
					ПоискПодходитПодГруппировку = Истина;
					Прервать;
				КонецЕсли;
				ВидДокументаРодитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидДокументаРодитель, "Родитель");
			КонецЦикла;
			
		ИначеЕсли Не ПоискПодходитПодГруппировку
			И Параметр = ТипБыстрогоПоискаВидПриложения()
			И Не ЗначениеЗаполнено(Группировка[Параметр])
			И ЗначениеЗаполнено(Группировка["ТипПриложения"]) Тогда
			
			// Явно не совпал отбор по группировке и поиск, но, может совпадет по типу группировки.
			Если ТипЗнч(Строка.Значение) = Тип("СправочникСсылка.ВидыДокументов") Тогда
				ТипПриложение = Перечисления.ТипыПриложенийЗадач.Документы;
			ИначеЕсли ТипЗнч(Строка.Значение) = Тип("СправочникСсылка.ВидыМероприятий") Тогда
				ТипПриложение = Перечисления.ТипыПриложенийЗадач.Мероприятия;
			ИначеЕсли ТипЗнч(Строка.Значение) = Тип("СправочникСсылка.ВидыПроектов") Тогда
				ТипПриложение = Перечисления.ТипыПриложенийЗадач.Проекты;
			Иначе
				ТипПриложение = Перечисления.ТипыПриложенийЗадач.ПустаяСсылка();
			КонецЕсли;
			ПоискПодходитПодГруппировку = ТипПриложение = Группировка["ТипПриложения"];
			
		ИначеЕсли Не ПоискПодходитПодГруппировку И Параметр = ТипБыстрогоПоискаВидДействия() Тогда
			// Помимо вида действия задачи, на поиск может влиять вид задачи.
			ПоискПодходитПодГруппировку = Строка.Значение = Группировка["ВидЗадачи"];
		КонецЕсли;
		Если ПоискПодходитПодГруппировку Тогда
			Продолжить;
		КонецЕсли;
		
		// Очистим поиск, заполнив его значением по умолчанию первого подходящего типа.
		ОписаниеТиповСтроки = Новый ОписаниеТипов(Строка.Тип);
		Если ОписаниеТиповСтроки.Типы().Количество() > 1 Тогда
			ОписаниеТиповСтроки = Новый ОписаниеТипов(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
					ОписаниеТиповСтроки.Типы()[0]));
		КонецЕсли;
		Строка.Значение = ОписаниеТиповСтроки.ПривестиЗначение(Неопределено);
		
		Прервать;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ТипБыстрогоПоискаАвтор()
	
	Возврат "Автор";
	
КонецФункции

&НаСервере
Функция ТипБыстрогоПоискаВидДействия()
	
	Возврат "ВидДействия";
	
КонецФункции

&НаСервере
Функция ТипБыстрогоПоискаВидДействияЗадачи()
	
	Возврат "ВидДействияЗадачи";
	
КонецФункции

&НаСервере
Функция ТипБыстрогоПоискаВидЗадачи()
	
	Возврат "ВидЗадачи";
	
КонецФункции

&НаСервере
Функция ТипБыстрогоПоискаИсполнитель()
	
	Возврат "Исполнитель";
	
КонецФункции

&НаСервере
Функция ТипБыстрогоПоискаСостояние()
	
	Возврат "Состояние";
	
КонецФункции

&НаСервере
Функция ТипБыстрогоПоискаПроект()
	
	Возврат "Проект";
	
КонецФункции

&НаСервере
Функция ТипБыстрогоПоискаФлаг()
	
	Возврат "Флаг";

КонецФункции

&НаСервере
Функция ТипБыстрогоПоискаВидПриложения()
	
	Возврат "ВидПриложения";
	
КонецФункции

&НаСервере
Функция ТипБыстрогоПоискаТипПриложения()
	
	Возврат "ТипПриложения";
	
КонецФункции

&НаСервере
Процедура ПрочитатьПерсональныеНастройки()
	
	ОбновитьОтображениеКарточкиЗадачи();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапомнитьЭлементы()
	
	// Подзадачи.
	Если ЭлементыДереваПодзадач = Неопределено Тогда
		ЭлементыДереваПодзадач = Новый Соответствие;
	Иначе
		ЭлементыДереваПодзадач.Очистить();
	КонецЕсли;
	
	Для Каждого ЭлементУзлаДерева Из Подзадачи.ПолучитьЭлементы() Цикл
		
		Если ЗначениеЗаполнено(ЭлементУзлаДерева.ДействиеЗадачи)
			Или ЭлементУзлаДерева.ПолучитьЭлементы().Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЭлементыДереваПодзадач.Вставить(ЭлементУзлаДерева.ПолучитьИдентификатор(), Истина);
		
	КонецЦикла;
	
	// Соисполнители.
	Если ЭлементыДереваСоисполнителей = Неопределено Тогда
		ЭлементыДереваСоисполнителей = Новый Соответствие;
	Иначе
		ЭлементыДереваСоисполнителей.Очистить();
	КонецЕсли;
	
	НаборыКОбработке = Новый Массив;
	НаборыКОбработке.Добавить(Соисполнители.ПолучитьЭлементы());
	Пока НаборыКОбработке.Количество() > 0 Цикл
		
		НаборКОбработке = НаборыКОбработке[0];
		НаборыКОбработке.Удалить(0);
		
		Для Каждого ЭлементУзлаДерева Из НаборКОбработке Цикл
			
			ЭлементыДереваСоисполнителей.Вставить(ЭлементУзлаДерева.ПолучитьИдентификатор(), Истина);
			
			НаборыКОбработке.Добавить(ЭлементУзлаДерева.ПолучитьЭлементы());
			
		КонецЦикла;
		
	КонецЦикла;
	
	ОбщегоНазначенияДокументооборотКлиент.ЗапомнитьЭлементыДерева(
		Соисполнители,
		ЭлементыДереваСоисполнителей);
	ОбщегоНазначенияДокументооборотКлиент.ЗапомнитьЭлементыДерева(
		ДеревоПриложений,
		ЭлементыДереваПриложений);
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьНовыеЭлементы()
	
	Если Элементы.ОбластьПросмотра.Видимость = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	// Подзадачи.
	Для Каждого ЭлементУзлаДерева Из Подзадачи.ПолучитьЭлементы() Цикл
		
		Если ЗначениеЗаполнено(ЭлементУзлаДерева.ДействиеЗадачи)
			Или ЭлементыДереваПодзадач[ЭлементУзлаДерева.ПолучитьИдентификатор()] = Истина
			Или ЭлементУзлаДерева.ПолучитьЭлементы().Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Элементы.Подзадачи.Развернуть(ЭлементУзлаДерева.ПолучитьИдентификатор(), Ложь);
		
	КонецЦикла;
	
	ОбщегоНазначенияДокументооборотКлиент.РазвернутьНовыеЭлементаДерева(
		Соисполнители,
		Элементы.Соисполнители,
		ЭлементыДереваСоисполнителей);
	ОбщегоНазначенияДокументооборотКлиент.РазвернутьНовыеЭлементаДерева(
		ДеревоПриложений,
		Элементы.ДеревоПриложений,
		ЭлементыДереваПриложений);
	
КонецПроцедуры

&НаСервере
Функция СохранитьДополнительныеРеквизиты()
	
	Результат = РаботаСЗадачамиКлиентСервер.НовыйРезультатСохраненияЗадачи();

	Если Не ОбщегоНазначенияДокументооборот.ВерсияДанныхАктуальна(
		ТекущийИсточникДействия, ВерсияДанныхТекущейЗадачи) Тогда
		
		Результат.Успешно = Ложь;
		Результат.ВерсииДанныхРазличаются = Истина;
		Возврат Результат;
		
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка

		ТекущийИсточникДействияОбъект = ТекущийИсточникДействия.ПолучитьОбъект();
		
		УправлениеСвойствами.ПеренестиЗначенияИзРеквизитовФормыВОбъект(
			ЭтотОбъект,
			ТекущийИсточникДействияОбъект);

		ТекущийИсточникДействияОбъект.ДополнительныеСвойства.Вставить("ОтключитьОбновлениеЗадач", Истина);
		
		ТекущийИсточникДействияОбъект.Записать();
		
		ИнтеграцияЗадач.ОбновитьДействиеЗадачиПоЗадачеПроцесса(ТекущийИсточникДействия);

		ЗафиксироватьТранзакцию();

	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;

	ЗначениеВРеквизитФормы(ТекущийИсточникДействияОбъект, "ТекущийИсточникДействияДанные");
	
	ВерсияДанныхТекущейЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ТекущийИсточникДействия,
		"ВерсияДанных");
	ВерсияДанныхТекущегоДействияЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ТекущаяЗадачаИлиДействие,
		"ВерсияДанных");

	Модифицированность = Ложь;
	
	Возврат Результат;
	
КонецФункции

// СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ВыполнитьДействиеЗадачиПослеВыбораШаблонаТекста(ВыбраннаяСтрока, ДополнительныеПараметры) Экспорт
	
	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьДействиеЗадачиПоШаблону(ВыбраннаяСтрока.Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействиеЗадачиПоШаблону(ШаблонДляВыполнения)
	
	ОтключитьОбработчикОжидания("ВзятьВРаботуСВыборомИсполнителя");
	ДействиеДляОтложенногоВзятияВРаботу = Неопределено;
	
	Если Не ЗначениеЗаполнено(ШаблонДляВыполнения) Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Не указан шаблон для выполнения %1 (%2).'"),
			ШаблонДляВыполнения,
			ТипЗнч(ШаблонДляВыполнения));
	КонецЕсли;
	
	ДанныеШаблона = ШаблоныТекстовВызовСервера.ДанныеШаблона(ШаблонДляВыполнения);
	РезультатСохранения = РаботаСЗадачамиКлиент.СохранитьРезультатДействия(
		ТекущаяЗадачаИлиДействие, 
		ДанныеШаблона.ТекстШаблона,
		ВерсияДанныхТекущегоДействияЗадачи,
		Ложь,
		Ложь,
		ЭтотОбъект);
		
	ВерсияДанныхТекущегоДействияЗадачи = РезультатСохранения.НоваяВерсияДанных;
	
	Если Не РезультатСохранения.ВерсииДанныхРазличаются Тогда
		ВыполнитьДействиеЗадачиНаКлиентеВФорме(ДанныеШаблона.РезультатДействия);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	Если Не ЗначениеЗаполнено(ТекущийИсточникДействия) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийИсточникДействияОбъект = ТекущийИсточникДействия.ПолучитьОбъект();
	ЗначениеВРеквизитФормы(ТекущийИсточникДействияОбъект, "ТекущийИсточникДействияДанные");
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(
		ЭтотОбъект,
		ТекущийИсточникДействияДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	
	Если Не ЗначениеЗаполнено(ТекущийИсточникДействия) Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(
		ЭтотОбъект,
		ТекущийИсточникДействияДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	Если Не ЗначениеЗаполнено(ТекущийИсточникДействия) Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьЗависимостиДополнительныхРеквизитов();
	Результат = СохранитьДополнительныеРеквизиты();
	
	Если Результат.ВерсииДанныхРазличаются Тогда
		
		Сообщение = НСтр("ru = 'Не удалось сохранить изменения. Возможно, задача была выполнена или изменена другим сотрудником. Отображение данных задач обновлено.'");
		ОбновитьНаКлиенте();
		ПоказатьПредупреждение(, Сообщение);
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СписокВыбораСостоянийНаСервере()
	
	СписокВыбораСостояний = Новый СписокЗначений;
	
	СписокВыбораСостояний.Добавить(Перечисления.ОтборыПоСтатусуЗадач.НеВыполненные);
	СписокВыбораСостояний.Добавить(
		Перечисления.ОтборыПоСтатусуЗадач.НеНачатые,
		Новый ФорматированнаяСтрока(
			Строка(Перечисления.ОтборыПоСтатусуЗадач.НеНачатые),
			ШрифтыСтиля.НеПринятыеКИсполнениюЗадачи));
			
	СписокВыбораСостояний.Добавить(
		Перечисления.ОтборыПоСтатусуЗадач.Просроченные,
		Новый ФорматированнаяСтрока(
			Строка(Перечисления.ОтборыПоСтатусуЗадач.Просроченные),,
			ЦветаСтиля.ПросроченныеДанныеЦвет));
			
	СписокВыбораСостояний.Добавить(Справочники.СостоянияЗадач.Черновик);
	СписокВыбораСостояний.Добавить(Справочники.СостоянияЗадач.Новая);
	СписокВыбораСостояний.Добавить(Справочники.СостоянияЗадач.ВРаботе);
	СписокВыбораСостояний.Добавить(Справочники.СостоянияЗадач.НаПроверке);
	СписокВыбораСостояний.Добавить(Справочники.СостоянияЗадач.Закрыта);
	СписокВыбораСостояний.Добавить(Справочники.СостоянияЗадач.Отменена);
	
	СписокВыбораСостояний.Добавить(Перечисления.ОтборыПоСтатусуЗадач.Все);
	
	СписокВыбораСостояний.Добавить(НСтр("ru = 'Выбрать несколько...'"));
	
	Возврат СписокВыбораСостояний;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПометкуСортировкиМК(Форма)
	
	// Для списка задач.
	Форма.Элементы.МК_СписокСортироватьПоНаименованию.Пометка = Ложь;
	Форма.Элементы.МК_СписокСортироватьПоНаименованию.Заголовок = НСтр("ru = 'Наименование'");
	
	Форма.Элементы.МК_СписокСортироватьПоИсполнителю.Пометка = Ложь;
	Форма.Элементы.МК_СписокСортироватьПоИсполнителю.Заголовок = НСтр("ru = 'Исполнитель'");
	
	Форма.Элементы.МК_СписокСортироватьПоСостоянию.Пометка = Ложь;
	Форма.Элементы.МК_СписокСортироватьПоСостоянию.Заголовок = НСтр("ru = 'Состояние задачи'");
	
	Форма.Элементы.МК_СписокСортироватьПоДатеСоздания.Пометка = Ложь;
	Форма.Элементы.МК_СписокСортироватьПоДатеСоздания.Заголовок = НСтр("ru = 'Дата создания'");
	
	Форма.Элементы.МК_СписокСортироватьПоСрокуИсполнения.Пометка = Ложь;
	Форма.Элементы.МК_СписокСортироватьПоСрокуИсполнения.Заголовок = НСтр("ru = 'Срок исполнения'");
	
	// Для списка действия задач.
	Форма.Элементы.МК_СписокДействияСортироватьПоИсполнителю.Пометка = Ложь;
	Форма.Элементы.МК_СписокДействияСортироватьПоИсполнителю.Заголовок = НСтр("ru = 'Исполнитель'");
	
	Форма.Элементы.МК_СписокДействияСортироватьПоСостояниюУчастника.Пометка = Ложь;
	Форма.Элементы.МК_СписокДействияСортироватьПоСостояниюУчастника.Заголовок = НСтр("ru = 'Состояние участника'");
	
	// Для списка задач.
	Если Форма.СписокСортироватьПо = "Заголовок" Тогда
		Форма.Элементы.МК_СписокСортироватьПоНаименованию.Пометка = Истина;
		Форма.Элементы.МК_СписокСортироватьПоНаименованию.Заголовок = 
			СтрШаблон("%1 (%2)",
				НСтр("ru = 'Наименование'"),
				Форма.СписокНаправлениеСортировки);
				
	ИначеЕсли Форма.СписокСортироватьПо = "Исполнители" Тогда
		Форма.Элементы.МК_СписокСортироватьПоИсполнителю.Пометка = Истина;
		Форма.Элементы.МК_СписокСортироватьПоИсполнителю.Заголовок = 
			СтрШаблон("%1 (%2)",
				НСтр("ru = 'Исполнитель'"),
				Форма.СписокНаправлениеСортировки);
				
	ИначеЕсли Форма.СписокСортироватьПо = "СостояниеЗадачи" Тогда
		Форма.Элементы.МК_СписокСортироватьПоСостоянию.Пометка = Истина;
		Форма.Элементы.МК_СписокСортироватьПоСостоянию.Заголовок = 
			СтрШаблон("%1 (%2)",
				НСтр("ru = 'Состояние задачи'"),
				Форма.СписокНаправлениеСортировки);
				
	ИначеЕсли Форма.СписокСортироватьПо = "Дата" Тогда
		Форма.Элементы.МК_СписокСортироватьПоДатеСоздания.Пометка = Истина;
		Форма.Элементы.МК_СписокСортироватьПоДатеСоздания.Заголовок = 
			СтрШаблон("%1 (%2)",
				НСтр("ru = 'Дата создания'"),
				Форма.СписокНаправлениеСортировки);
				
	ИначеЕсли Форма.СписокСортироватьПо = "Срок" Тогда
		Форма.Элементы.МК_СписокСортироватьПоСрокуИсполнения.Пометка = Истина;
		Форма.Элементы.МК_СписокСортироватьПоСрокуИсполнения.Заголовок = 
			СтрШаблон("%1 (%2)",
				НСтр("ru = 'Срок исполнения'"),
				Форма.СписокНаправлениеСортировки);
				
	// Для списка действия задач.
	ИначеЕсли Форма.СписокСортироватьПо = "ИсполнительСтрокой" Тогда
		Форма.Элементы.МК_СписокДействияСортироватьПоИсполнителю.Пометка = Истина;
		Форма.Элементы.МК_СписокДействияСортироватьПоИсполнителю.Заголовок = 
			СтрШаблон("%1 (%2)",
				НСтр("ru = 'Исполнитель'"),
				Форма.СписокНаправлениеСортировки);
				
	ИначеЕсли Форма.СписокСортироватьПо = "СостояниеУчастникаЗадачи" Тогда
		Форма.Элементы.МК_СписокДействияСортироватьПоСостояниюУчастника.Пометка = Истина;
		Форма.Элементы.МК_СписокДействияСортироватьПоСостояниюУчастника.Заголовок = 
			СтрШаблон("%1 (%2)",
				НСтр("ru = 'Состояние участника'"),
				Форма.СписокНаправлениеСортировки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПереключитьСортировку(ТекущееЗначениеСортироватьПо, НаправлениеСортировки, ИмяКолонки)
	
	Если ТекущееЗначениеСортироватьПо = ИмяКолонки Тогда
		Если НаправлениеСортировки = "Возр" Тогда
			НаправлениеСортировки = "Убыв";
		Иначе
			НаправлениеСортировки = "Возр";
		КонецЕсли;
	Иначе
		ТекущееЗначениеСортироватьПо = ИмяКолонки;
		НаправлениеСортировки = "Возр";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СортироватьСписокЗадачПоКолонке(ИмяКолонки, Форма)
	
	Форма.СписокЗадач.Порядок.Элементы.Очистить();
	Для Каждого ПользовательскаяНастройка Из Форма.СписокЗадач.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		
		Если ТипЗнч(ПользовательскаяНастройка) <> Тип("ПорядокКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		
		ПользовательскаяНастройка.Элементы.Очистить();
		
		ЭлементПорядка = ПользовательскаяНастройка.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ЭлементПорядка.Использование = Истина;
		ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных(ИмяКолонки);
		ЭлементПорядка.ТипУпорядочивания = ?(Форма.СписокНаправлениеСортировки = "Возр",
			НаправлениеСортировкиКомпоновкиДанных.Возр,
			НаправлениеСортировкиКомпоновкиДанных.Убыв);
		
	КонецЦикла;
	
	УстановитьПометкуСортировкиМК(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СортироватьСписокДействияЗадачПоКолонке(ИмяКолонки, Форма)
	
	Форма.СписокДействияЗадач.Порядок.Элементы.Очистить();
	Для Каждого ПользовательскаяНастройка Из Форма.СписокДействияЗадач.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл
		
		Если ТипЗнч(ПользовательскаяНастройка) <> Тип("ПорядокКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		
		ПользовательскаяНастройка.Элементы.Очистить();
		
		ЭлементПорядка = ПользовательскаяНастройка.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
		ЭлементПорядка.Использование = Истина;
		ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных(ИмяКолонки);
		ЭлементПорядка.ТипУпорядочивания = ?(Форма.СписокНаправлениеСортировки = "Возр",
			НаправлениеСортировкиКомпоновкиДанных.Возр,
			НаправлениеСортировкиКомпоновкиДанных.Убыв);
		
	КонецЦикла;
	
	УстановитьПометкуСортировкиМК(Форма);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура НастроитьЭлементыПоРучномуПоказуДереваГруппировок()
	
	Если Не ЭтоМобильныйКлиент Тогда
		Элементы.ПоказыватьДеревоГруппировок.Видимость = ЕстьГруппировки;
	КонецЕсли;
	
	Если ЕстьГруппировки И ПоказыватьДеревоГруппировок Тогда
		Команды.ПоказыватьДеревоГруппировок.Картинка = БиблиотекаКартинок.СвернутьВсе;
		Команды.ПоказыватьДеревоГруппировок.Подсказка =
			НСтр("ru = 'Скрыть список группировок и панель быстрых отборов'");
		Элементы.ГруппаГруппировка.Видимость = Истина;
	Иначе
		Команды.ПоказыватьДеревоГруппировок.Картинка = БиблиотекаКартинок.РазвернутьВсе;
		Команды.ПоказыватьДеревоГруппировок.Подсказка =
			НСтр("ru = 'Показать список группировок и панель быстрых отборов'");
		Элементы.ГруппаГруппировка.Видимость = Ложь;
	КонецЕсли;
	
	ДоступенПредросмотрФайлов =
		ИспользоватьПредпросмотрФайлов
		И Не (ЕстьГруппировки И ПоказыватьДеревоГруппировок);
	
КонецПроцедуры

&НаКлиенте
Функция ТекущиеГруппировки() Экспорт
	
	ТекущиеГруппировки = Новый Структура;
	ТекущиеГруппировки.Вставить("Группировка", ТекущаяГруппировка);
	ТекущиеГруппировки.Вставить("ДополнительнаяГруппировка", ТекущаяДополнительнаяГруппировка);
	
	Возврат ТекущиеГруппировки;
	
КонецФункции

&НаКлиенте
Процедура ВосстановитьСтрокуДереваГруппировок(СтарыеГруппировки)
	
	ТекущиеДанные = Элементы.Группировки.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если ТекущиеДанные.ГруппировкаУИД = СтарыеГруппировки.Группировка.УникальныйИдентификатор()
			И ТекущиеДанные.ДополнительнаяГруппировкаУИД = СтарыеГруппировки.ДополнительнаяГруппировка.УникальныйИдентификатор() Тогда
			
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	НужнаяСтрока = Неопределено;
	ПохожаяСтрока = Неопределено;
	
	СтрокиКПоиску = Новый Массив;
	Для Каждого Строка Из Группировки.ПолучитьЭлементы() Цикл
		СтрокиКПоиску.Добавить(Строка);
	КонецЦикла;
	
	Пока СтрокиКПоиску.Количество() > 0 Цикл
		
		Строка = СтрокиКПоиску[0];
		
		Если Строка.ГруппировкаУИД = СтарыеГруппировки.Группировка.УникальныйИдентификатор()
			И Строка.ДополнительнаяГруппировкаУИД = СтарыеГруппировки.ДополнительнаяГруппировка.УникальныйИдентификатор() Тогда
			
			НужнаяСтрока = Строка;
			СтрокиКПоиску.Очистить();
			Продолжить;
			
		КонецЕсли;
		
		Если Строка.ГруппировкаУИД = СтарыеГруппировки.Группировка.УникальныйИдентификатор()
			И Не ЗначениеЗаполнено(Строка.ДополнительнаяГруппировкаУИД) Тогда
			
			ПохожаяСтрока = Строка;
		КонецЕсли;
		
		СтрокиКПоиску.Удалить(0);
		
		Для Каждого ВложенныйЭлемент Из Строка.ПолучитьЭлементы() Цикл
			СтрокиКПоиску.Добавить(ВложенныйЭлемент);
		КонецЦикла;
		
	КонецЦикла;
	
	Если НужнаяСтрока <> Неопределено Тогда
		Элементы.Группировки.ТекущаяСтрока = НужнаяСтрока.ПолучитьИдентификатор();
		Возврат;
	КонецЕсли;
	
	Если ПохожаяСтрока <> Неопределено Тогда
		Элементы.Группировки.ТекущаяСтрока = ПохожаяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандПриложений()
	
	ЭтоФайл = Ложь;
	ЭтоЗадача = Ложь;
	ЭтоЗаполняемоеПриложение = Ложь;
	ЭтоДругоеПриложение = Ложь;
	ЭтоРольФайла = Ложь;
	ЭтоФайлПриложения = Ложь;
	
	ТекущаяЗадачаИлиДействиеЕстьДействие = ТипЗнч(ТекущаяЗадачаИлиДействие) = Тип("ДокументСсылка.ДействиеЗадачи"); 
	
	ДоступноИнтерактивноеИзменениеФайлов = Ложь;
	
	РедактироватьДоступность = Истина;
	ЗакончитьРедактированиеДоступность = Истина;
	ЗаполняемоеПриложениеУказано = Ложь;
	
	ТекущиеДанные = Элементы.ДеревоПриложений.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если ТипЗнч(ТекущиеДанные.Приложение) = Тип("СправочникСсылка.Файлы") Тогда
			
			Если ТекущиеДанные.РедактируетДругойПользователь
				Или ТекущиеДанные.ПодписанЭП Тогда
				РедактироватьДоступность = Ложь;
			КонецЕсли;
			
			Если Не ТекущиеДанные.РедактируетТекущийПользователь
				Или ТекущиеДанные.ПодписанЭП Тогда
				ЗакончитьРедактированиеДоступность = Ложь;
			КонецЕсли;
			
		Иначе
			
			РедактироватьДоступность = Ложь;
			ЗакончитьРедактированиеДоступность = Ложь;
			
		КонецЕсли;
		
		ЭтоФайл = ЗначениеЗаполнено(ТекущиеДанные.Приложение)
			И ТипЗнч(ТекущиеДанные.Приложение) = Тип("СправочникСсылка.Файлы");
		ЭтоДругоеПриложение = ЗначениеЗаполнено(ТекущиеДанные.Приложение)
			И ТипЗнч(ТекущиеДанные.Приложение) <> Тип("СправочникСсылка.Файлы");
		ЭтоЗадача =
			ТекущиеДанные.ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Задача");
		ЭтоЗаполняемоеПриложение =
			ТекущиеДанные.РольПредмета = ПредопределенноеЗначение("Перечисление.РолиПредметов.Заполняемый");
		ЭтоРольФайла =
			ТекущиеДанные.ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.РольФайла");
		ЭтоФайлПриложения =
			ТекущиеДанные.ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Файл");
		
		ЗаполняемоеПриложениеУказано =
			ТекущиеДанные.РольПредмета = ПредопределенноеЗначение("Перечисление.РолиПредметов.Заполняемый")
			И ЗначениеЗаполнено(ТекущиеДанные.Приложение);
		
		Если ТекущиеДанные.ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Файл") Тогда
			
			ДанныеРодителя = ТекущиеДанные.ПолучитьРодителя();
			Если ДанныеРодителя <> Неопределено
				И ДанныеРодителя.ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.РольФайла") Тогда
				ДанныеРодителя = ДанныеРодителя.ПолучитьРодителя();
			КонецЕсли;
			
			ДоступноИнтерактивноеИзменениеФайлов = ДанныеРодителя <> Неопределено
				И ЗначениеЗаполнено(ДанныеРодителя.Приложение)
				И ОбщегоНазначенияДокументооборотКлиентСервер.ДоступноИнтерактивноеИзменениеФайлов(
					ДанныеРодителя.Приложение);
			
		ИначеЕсли ТекущиеДанные.ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.РольФайла") Тогда
			
			ДанныеРодителя = ТекущиеДанные.ПолучитьРодителя();
			ДоступноИнтерактивноеИзменениеФайлов = ЗначениеЗаполнено(ДанныеРодителя.Приложение)
				И ОбщегоНазначенияДокументооборотКлиентСервер.ДоступноИнтерактивноеИзменениеФайлов(
					ДанныеРодителя.Приложение);
			
		ИначеЕсли ТекущиеДанные.ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Приложение") Тогда
			
			ДоступноИнтерактивноеИзменениеФайлов = ЗначениеЗаполнено(ТекущиеДанные.Приложение)
				И ОбщегоНазначенияДокументооборотКлиентСервер.ДоступноИнтерактивноеИзменениеФайлов(
					ТекущиеДанные.Приложение);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ДеревоПриложенийКонтекстноеМенюСохранитьКак.Доступность = ЭтоФайл;
	Элементы.ДеревоПриложенийКонтекстноеМенюОткрытьПриложение.Доступность = ЭтоФайл;
	Элементы.ДеревоПриложенийКонтекстноеМенюРедактировать.Доступность =
		РедактироватьДоступность;
	Элементы.ДеревоПриложенийКонтекстноеМенюЗакончитьРедактирование.Доступность =
		ЗакончитьРедактированиеДоступность;
	Элементы.ДеревоПриложенийКонтекстноеМенюОсвободить.Доступность =
		ЗакончитьРедактированиеДоступность;
	Элементы.ДеревоПриложенийКонтекстноеМенюОбновитьИзФайлаНаДиске.Доступность = ЭтоФайл;
	
	Если ЭтоЗаполняемоеПриложение Тогда
		Элементы.ДеревоПриложенийКонтекстноеМенюФайлыДобавить.Доступность =
			Не ЗаполняемоеПриложениеУказано;
		Элементы.ДеревоПриложенийКонтекстноеМенюФайлыУдалить.Доступность =
			ЗаполняемоеПриложениеУказано;
	Иначе
		Элементы.ДеревоПриложенийКонтекстноеМенюФайлыДобавить.Доступность = Истина;
		Элементы.ДеревоПриложенийКонтекстноеМенюФайлыУдалить.Доступность = Истина;
	КонецЕсли;
	
	Элементы.ДеревоПриложенийКонтекстноеМенюФайлыДобавить.Видимость =
		ЭтоЗаполняемоеПриложение
		Или (ЭтоДругоеПриложение И ДоступноИнтерактивноеИзменениеФайлов)
		Или (ЭтоРольФайла И ДоступноИнтерактивноеИзменениеФайлов)
		Или (ЭтоФайлПриложения И ДоступноИнтерактивноеИзменениеФайлов);
	Элементы.ДеревоПриложенийКонтекстноеМенюФайлыВставитьКартинкуИзБуфера.Видимость =
		ЭтоТонкийWindowsКлиент
		И ((ЭтоДругоеПриложение И ДоступноИнтерактивноеИзменениеФайлов)
			Или (ЭтоРольФайла И ДоступноИнтерактивноеИзменениеФайлов)
			Или (ЭтоФайлПриложения И ДоступноИнтерактивноеИзменениеФайлов));
	Элементы.ДеревоПриложенийКонтекстноеМенюОткрытьКарточку.Видимость =
		ЭтоФайл Или ЭтоДругоеПриложение Или ЭтоЗадача;
	Элементы.ДеревоПриложенийКонтекстноеМенюОткрытьПриложение.Видимость = ЭтоФайл;
	Элементы.ДеревоПриложенийКонтекстноеМенюРедактировать.Видимость = ЭтоФайл;
	Элементы.ДеревоПриложенийКонтекстноеМенюЗакончитьРедактирование.Видимость = ЭтоФайл;
	Элементы.ДеревоПриложенийКонтекстноеМенюОсвободить.Видимость = ЭтоФайл;
	Элементы.ДеревоПриложенийКонтекстноеМенюОбновитьИзФайлаНаДиске.Видимость = ЭтоФайл;
	Элементы.ДеревоПриложенийКонтекстноеМенюФайлыУдалить.Видимость =
		ЭтоЗаполняемоеПриложение
		Или (ЭтоФайлПриложения И ДоступноИнтерактивноеИзменениеФайлов);
	Элементы.ДеревоПриложенийКонтекстноеМенюСохранитьКак.Видимость = ЭтоФайл;
	Элементы.ДеревоПриложенийКонтекстноеМенюКопироватьВБуферОбмена.Видимость =
		ЭтоФайл Или ЭтоДругоеПриложение;
		
	Элементы.ФормаБизнесПроцессРешениеВопросовВыполненияЗадачЗадатьВопрос.Доступность =
		ТекущаяЗадачаИлиДействиеЕстьДействие;
	Элементы.ФормаЗадачаЗадачаИсполнителяСогласоватьПереносСрока.Доступность =
		ТекущаяЗадачаИлиДействиеЕстьДействие;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПодзадачиКлиент()
	
	ТекущиеДанные = Элементы.ДеревоПриложений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено
		Или ТекущиеДанные.ТипСтроки <> ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Подзадачи") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущееДействиеЗадачи =
		?(ТипЗнч(ТекущаяЗадачаИлиДействие) = Тип("ДокументСсылка.ДействиеЗадачи"),
			ТекущаяЗадачаИлиДействие,
			ПредопределенноеЗначение("Документ.ДействиеЗадачи.ПустаяСсылка"));
	
	ДанныеДереваПодзадач = РаботаСЗадачамиВызовСервера.ДанныеДереваПодзадач(ТекущаяЗадача, ТекущееДействиеЗадачи);
	ОбновитьПодзадачиПоДанным(ДанныеДереваПодзадач);
	
	Элементы.СтраницыПросмотра.ТекущаяСтраница = Элементы.СтраницаПодзадачи;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПодзадачиПоДанным(ДанныеДереваПодзадач)
	
	РаботаСЗадачамиКлиентСервер.ОбновитьДерево(Подзадачи, Элементы.Подзадачи, ДанныеДереваПодзадач);
	
	Если ЭтоМобильныйКлиент Тогда
		Элементы.МК_КнопкаСтраницаПодзадачи.Видимость = ДанныеДереваПодзадач.Количество() > 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнструкциюКлиент()
	
	ТекущиеДанные = Элементы.ДеревоПриложений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено
		Или ТекущиеДанные.ТипСтроки <> ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Инструкция") Тогда
		Возврат;
	КонецЕсли;
	
	НоваяИнструкция = РаботаСЗадачамиВызовСервера.ОписаниеHTMLИнструкции(ТекущаяЗадачаИлиДействие);
	ОбновитьИнструкциюПоДанным(НоваяИнструкция);
	
	Элементы.СтраницыПросмотра.ТекущаяСтраница = Элементы.СтраницаИнструкция;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнструкциюПоДанным(НоваяИнструкция)
	
	Инструкция = НоваяИнструкция;
	
	Если ЭтоМобильныйКлиент Тогда
		Элементы.СтраницаИнструкция.Видимость = ЗначениеЗаполнено(Инструкция);
		МК_КлиентСервер.АдаптироватьHtmlПодЭкранМобильногоПриНеобходимости(Инструкция);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСоисполнителейКлиент()
	
	ТекущиеДанные = Элементы.ДеревоПриложений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено
		Или ТекущиеДанные.ТипСтроки <> ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Соисполнители") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущееДействиеЗадачи = ?(ТипЗнч(ТекущаяЗадачаИлиДействие) = Тип("ДокументСсылка.ДействиеЗадачи"),
		ТекущаяЗадачаИлиДействие,
		Неопределено);
	
	ДанныеДереваСоисполнителей = РаботаСЗадачамиВызовСервера.ДанныеДереваСоисполнителей(
		ТекущаяЗадача,
		ТекущееДействиеЗадачи);
	ОбновитьСоисполнителейПоДанным(ДанныеДереваСоисполнителей);
	
	Элементы.СтраницыПросмотра.ТекущаяСтраница = Элементы.СтраницаСоисполнители;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСоисполнителейПоДанным(ДанныеДереваСоисполнителей)
	
	РаботаСЗадачамиКлиентСервер.ОбновитьДеревоСоисполнителей(
		Соисполнители,
		Элементы.Соисполнители,
		Элементы.СоисполнителиЕстьПриложения,
		ДанныеДереваСоисполнителей);
	
	Элементы.Соисполнители.Видимость = Соисполнители.ПолучитьЭлементы().Количество() > 0;
	
	Если ЭтоМобильныйКлиент Тогда
		Элементы.МК_КнопкаСтраницаСоисполнители.Видимость = Элементы.Соисполнители.Видимость;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЖизненныйЦиклКлиент()
	
	ТекущиеДанные = Элементы.ДеревоПриложений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено
		Или ТекущиеДанные.ТипСтроки <> ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.ИсторияВыполнения") Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьЖизненныйЦикл();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЖизненныйЦикл()
	
	СхемаЖизненногоЦикла = РаботаСЗадачами.СхемаЖизненногоЦикла(ТекущаяЗадача);
	
	// Обновление жизненного цикла.
	РаботаСЗадачами.ОбновитьЖизненныйЦикл(
		ЭтотОбъект,
		Элементы.ГруппаЖизненныйЦикл,
		Элементы.СтраницаЖизненныйЦиклПрокрутка,
		ДанныеЖизненногоЦикла,
		СхемаЖизненногоЦикла);
	
	Элементы.СтраницыПросмотра.ТекущаяСтраница = Элементы.СтраницаИстория;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОбзорПриложенияКлиент()
	
	ТекущееПриложение = ТекущееПриложение();
	Если Не ЗначениеЗаполнено(ТекущееПриложение) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОбзораОбъекта = ОбзорОбъектовКлиент.ДанныеОбзораОбъекта(
		ТекущееПриложение,
		УникальныйИдентификатор);
	ОбновитьОбзорПриложенияПоДанным(ДанныеОбзораОбъекта);
	
КонецПроцедуры

&НаКлиенте
Функция ТекущееПриложение()
	
	ТекущееПриложение = Неопределено;
	
	ТекущиеДанные = Элементы.ДеревоПриложений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено
		Или ТекущиеДанные.ТипСтроки <> ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Приложение") Тогда
		Возврат ТекущееПриложение;
	КонецЕсли;
	
	ТекущееПриложение = ТекущиеДанные.Приложение;
	
	Возврат ТекущееПриложение;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьОбзорПриложенияПоДанным(ДанныеОбзораОбъекта)
	
	Если ДанныеОбзораОбъекта.ЕстьТекстHTML Тогда
		
		ОписаниеHTMLПриложения = ДанныеОбзораОбъекта.ТекстHTML;
		
		Элементы.СтраницыПросмотра.ТекущаяСтраница = Элементы.СтраницаОбзорПриложения;
		
	Иначе
		
		Элементы.СтраницыПросмотра.ТекущаяСтраница = Элементы.СтраницаОсновное;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуПриложенияРезультатаСтроки(ДанныеСтроки)
	
	Если ДанныеСтроки = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РаботаСЗадачамиКлиент.ПоказатьПриложение(ДанныеСтроки.Приложение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПриложениеРезультатаСтроки(ДанныеСтроки)
	
	Если ДанныеСтроки = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РаботаСЗадачамиКлиент.ПросмотретьПриложение(
		ДанныеСтроки.Приложение,
		УникальныйИдентификатор,
		ПредыдущийАдресФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьФайлРезультатаСтроки(ДанныеСтроки)
	
	Если ДанныеСтроки = Неопределено Тогда 
		Возврат;
	КонецЕсли;
			
	КомандыРаботыСФайламиКлиент.Редактировать(ДанныеСтроки.Приложение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактированиеФайлаРезультатаСтроки(ДанныеСтроки)
	
	Если ДанныеСтроки = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыОбновленияФайла = РаботаСФайламиКлиент.ПараметрыОбновленияФайла(
		Неопределено,
		ДанныеСтроки.Приложение,
		УникальныйИдентификатор);
	ПараметрыОбновленияФайла.ХранитьВерсии = Ложь;
	ПараметрыОбновленияФайла.РедактируетТекущийПользователь =
		ДанныеСтроки.РедактируетТекущийПользователь;
	ПараметрыОбновленияФайла.Редактирует = ДанныеСтроки.Редактирует;
	РаботаСФайламиКлиент.ЗакончитьРедактированиеСОповещением(ПараметрыОбновленияФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсвободитьПриложениеРезультатаСтроки(ДанныеСтроки)
	
	Если ДанныеСтроки = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыОсвобожденияФайла = РаботаСФайламиКлиент.ПараметрыОсвобожденияФайла(
		Неопределено, 
		ДанныеСтроки.Приложение);
	ПараметрыОсвобожденияФайла.ХранитьВерсии = Ложь;
	ПараметрыОсвобожденияФайла.РедактируетТекущийПользователь = ДанныеСтроки.РедактируетТекущийПользователь;
	ПараметрыОсвобожденияФайла.Редактирует = ДанныеСтроки.Редактирует;
	ПараметрыОсвобожденияФайла.УникальныйИдентификатор = УникальныйИдентификатор;
	РаботаСФайламиКлиент.ОсвободитьФайлСОповещением(ПараметрыОсвобожденияФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыРезультатаОбновитьИзФайлаНаДискеСтроку(ДанныеСтроки)
	
	Если ДанныеСтроки = Неопределено
		Или ДанныеСтроки.Приложение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Приложение = ДанныеСтроки.Приложение;
	
	Если ТипЗнч(Приложение) = Тип("СправочникСсылка.Файлы") Тогда
		
		Обработчик = Новый ОписаниеОповещения("ОбновитьВОбработкеОповещения", ЭтотОбъект, Новый Структура);
		
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(Приложение);
		
		РаботаСФайламиКлиент.ОбновитьИзФайлаНаДиске(
			Обработчик,
			ДанныеФайла,
			УникальныйИдентификатор);
		
	Иначе
		
		ПоказатьПредупреждение(, НСтр("ru = 'Выберите файл.'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПоказДереваГруппировокПоУмолчанию()
	
	КлючиНазначенияДляПоказаДерева = Новый Соответствие;
	КлючиНазначенияДляПоказаДерева.Вставить("ВсеЗадачи", Истина);
	КлючиНазначенияДляПоказаДерева.Вставить("ЗадачиПодчиненных", Истина);
	КлючиНазначенияДляПоказаДерева.Вставить("ЗадачиПодчиненныхНеНачатые", Истина);
	КлючиНазначенияДляПоказаДерева.Вставить("ЗадачиПодчиненныхПросроченные", Истина);
	КлючиНазначенияДляПоказаДерева.Вставить("ЗадачиПоПроектам", Истина);
	
	Если КлючиНазначенияДляПоказаДерева[КлючНазначенияИспользования] = Истина Тогда
		ПоказыватьДеревоГруппировок = Истина;
	Иначе
		ПоказыватьДеревоГруппировок = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКакФайлРезультатаСтроки(ДанныеСтроки)
	
	Если ДанныеСтроки = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущаяСсылка = ДанныеСтроки.Приложение;
	Если ТипЗнч(ТекущаяСсылка) = Тип("СправочникСсылка.Файлы") Тогда
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляСохранения(ТекущаяСсылка, Неопределено, УникальныйИдентификатор);
		КомандыРаботыСФайламиКлиент.СохранитьКак(ДанныеФайла, УникальныйИдентификатор);
	Иначе
		ПоказатьПредупреждение(,НСтр("ru = 'Выберите файл.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция РольФайлаИПриложение(ДанныеСтроки)
	
	Приложение = Неопределено;
	РольФайла = Неопределено;
	Если ДанныеСтроки.ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Файл") Тогда
		
		ДанныеРодителя = ДанныеСтроки.ПолучитьРодителя();
		Если ДанныеРодителя <> Неопределено
			И ДанныеРодителя.ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.РольФайла") Тогда
			РольФайла = ДанныеРодителя.РольФайла;
			ДанныеРодителя = ДанныеРодителя.ПолучитьРодителя();
		КонецЕсли;
		
		Если ДанныеРодителя <> Неопределено Тогда
			Приложение = ДанныеРодителя.Приложение;
		КонецЕсли;
		
	ИначеЕсли ДанныеСтроки.ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.РольФайла") Тогда
		
		РольФайла = ДанныеСтроки.РольФайла;
		ДанныеРодителя = ДанныеСтроки.ПолучитьРодителя();
		
		Если ДанныеРодителя <> Неопределено Тогда
			Приложение = ДанныеРодителя.Приложение;
		КонецЕсли;
		
	ИначеЕсли ДанныеСтроки.ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Приложение") Тогда
		
		Приложение = ДанныеСтроки.Приложение;
		
		ПодчиненныеЭлементыПрилложения = ДанныеСтроки.ПолучитьЭлементы();
		Если ПодчиненныеЭлементыПрилложения.Количество() > 0 Тогда
			
			ПервыйПодчиненныйЭлемент = ПодчиненныеЭлементыПрилложения[0];
			Если ПервыйПодчиненныйЭлемент.ТипСтроки = ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.РольФайла") Тогда
				РольФайла = ПервыйПодчиненныйЭлемент.РольФайла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	РольФайлаИПриложение = Новый Структура("Приложение, РольФайла", Приложение, РольФайла);
	
	Возврат РольФайлаИПриложение;
	
КонецФункции

&НаКлиенте
Процедура ВзятьВРаботуСВыборомИсполнителя()
	
	Если Не ЗначениеЗаполнено(ДействиеДляОтложенногоВзятияВРаботу) Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСЗадачамиКлиент.ВзятьВРаботуСВыборомИсполнителя(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДействиеДляОтложенногоВзятияВРаботу),
		ЭтотОбъект);
	ДействиеДляОтложенногоВзятияВРаботу = Неопределено;
	
КонецПроцедуры

#Область РаспознаваниеРечи

&НаСервере
Процедура РаспознаваниеРечи_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекущиеПараметры = ПараметрыРаспознаванияРечи.ТекущиеПараметры(ЭтотОбъект);
	
	РаспознаваниеРечи_ПараметрыРаспознавания = ТекущиеПараметры;
	РаспознаваниеРечи_РаспознаваниеДоступно = ПараметрыРаспознаванияРечи.РаспознаваниеДоступно(ТекущиеПараметры);
	
	Элементы.ГруппаРаспознаваниеРечиТекст.Видимость = РаспознаваниеРечи_РаспознаваниеДоступно;
	Элементы.РаспознаваниеРечи.Видимость = РаспознаваниеРечи_РаспознаваниеДоступно;
	Элементы.РезультатДействияТекстом.Высота = ?(Элементы.РаспознаваниеРечи.Видимость, 5, 4);
	
	РаспознаваниеРечи_РаспознаваниеФразыЗавершено = Истина;
	
	//
	
	Константы.ОбщаяГрамматикаРаботыСРечью.УстановитьГрамматикуСеанса();
	
КонецПроцедуры

&НаКлиенте
Процедура РаспознаваниеРечи_НачатьРаспознавание()
	
	ТекущиеПараметры = РаспознаваниеРечи_ПараметрыРаспознавания;
	ПараметрыМодели = ПараметрыРаспознаванияРечиКлиент.ПараметрыМодели(ТекущиеПараметры);
	ВариантИспользования = ПараметрыРаспознаванияРечиКлиент.ВариантИспользования(ТекущиеПараметры);
	ПараметрыРаспознавания = ПараметрыРаспознаванияРечиКлиент.ПараметрыПотоковогоРаспознаванияРечи(ТекущиеПараметры,
		Новый ОписаниеОповещения("ПриОстановкеАудиозаписи", ЭтотОбъект));
	
	Элемент = Элементы.РезультатДействияТекстом;
	
	Контекст = Новый Структура;
	Контекст.Вставить("Форма", ЭтотОбъект);
	Контекст.Вставить("Элемент", Элемент);
	Контекст.Вставить("ИмяРеквизита", "РезультатДействияТекстом");
	
	Попытка
		РаботаСРечьюБМОКлиент.НачатьПотоковоеРаспознавание(
			УникальныйИдентификатор,
			Новый ОписаниеОповещения(
				"ПриПолученииРезультатаРаспознавания", ЭтотОбъект, Контекст,
				"ПриОбработкеОшибкиРаспознавания", ЭтотОбъект),
			ПараметрыМодели,
			ВариантИспользования,
			ПараметрыРаспознавания
		);
		
		РаспознаваниеРечи_ВыполняетсяРаспознавание = Истина;
		РаспознаваниеРечи_ВремяНачалаРаспознавания = ТекущаяУниверсальнаяДатаВМиллисекундах();
		
	Исключение
		ПриОбработкеОшибкиРаспознавания(ИнформацияОбОшибке(), Истина, Контекст);
	КонецПопытки;
	
	РаспознаваниеРечи_ИзменитьСостояниеФормы();
	ТекущийЭлемент = Элементы.РезультатДействияТекстом;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспознаваниеРечи_ИзменитьСостояниеФормы()
	
	Если РаспознаваниеРечи_ВыполняетсяРаспознавание Тогда
		
		Элементы.РаспознаваниеРечиТекст.Картинка = БиблиотекаКартинок.КрасныйМикрофон;
		Элементы.РаспознаваниеРечи.Картинка = БиблиотекаКартинок.КрасныйМикрофон;
		
		Если РаспознаваниеРечи_РаспознаваниеФразыЗавершено Тогда
			//@skip-check new-color
			Элементы.РаспознаваниеРечиТекст.ЦветФона = Новый Цвет(255, 204, 0);
			//@skip-check new-color
			Элементы.РаспознаваниеРечи.ЦветФона = Новый Цвет(255, 204, 0);
		Иначе
			//@skip-check new-color
			Элементы.РаспознаваниеРечиТекст.ЦветФона = Новый Цвет(225, 154, 0);
			//@skip-check new-color
			Элементы.РаспознаваниеРечи.ЦветФона = Новый Цвет(225, 154, 0);
		КонецЕсли;
		
	Иначе
		
		Элементы.РаспознаваниеРечиТекст.Картинка = БиблиотекаКартинок.ЧерныйМикрофон;
		Элементы.РаспознаваниеРечи.Картинка = БиблиотекаКартинок.ЧерныйМикрофон;
		
		Элементы.РаспознаваниеРечиТекст.ЦветФона = Новый Цвет;
		Элементы.РаспознаваниеРечи.ЦветФона = Новый Цвет;
		
	КонецЕсли;
	
	Элементы.ГруппаРаспознаваниеРечиТекст.Видимость = РаспознаваниеРечи_РаспознаваниеДоступно И РаботаСРечьюБМОКлиент.ПоддерживаетсяПотоковоеРаспознавание();
	Элементы.РаспознаваниеРечи.Видимость  = РаспознаваниеРечи_РаспознаваниеДоступно И РаботаСРечьюБМОКлиент.ПоддерживаетсяПотоковоеРаспознавание();
	Элементы.РезультатДействияТекстом.Высота = ?(Элементы.РаспознаваниеРечи.Видимость, 5, 4);
	
	Элементы.РезультатДействияТекстом.Доступность     = РаспознаваниеРечи_РаспознаваниеФразыЗавершено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПолученииРезультатаРаспознавания(РезультатРаспознавания, ПродолжитьРаспознавание, Контекст) Экспорт 
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	ПоляВводаКлиент.ВставитьРезультатРаспознаванияПоКурсору(
		Контекст.Форма,
		Контекст.Элемент,
		Контекст.ИмяРеквизита,
		РезультатРаспознавания
	);
	
	ВремяКонца = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	РаботаСРечьюЖурналированиеКлиент.ДобавитьРезультатРаспознавания(
		УникальныйИдентификатор,
		РезультатРаспознавания,
		ВремяНачала,
		ВремяКонца
	);
	
	РаспознаваниеРечи_РаспознаваниеФразыЗавершено = РезультатРаспознавания.РаспознаваниеФразыЗавершено;
	РаспознаваниеРечи_ИзменитьСостояниеФормы();
	ТекущийЭлемент = Элементы.РезультатДействияТекстом;
	
	Если РаспознаваниеРечи_РаспознаваниеФразыЗавершено Тогда
		
		СохранитьРезультатДействияОтложенно(10, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОбработкеОшибкиРаспознавания(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	РаботаСРечьюЖурналированиеКлиент.ДобавитьИсключение(УникальныйИдентификатор, ИнформацияОбОшибке);
	
	ОбработкаОшибок.ПоказатьИнформациюОбОшибке(ИнформацияОбОшибке);
	
	РаспознаваниеРечи_РаспознаваниеФразыЗавершено = Истина;
	РаспознаваниеРечи_ИзменитьСостояниеФормы();
	ТекущийЭлемент = Элементы.РезультатДействияТекстом;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОстановкеАудиозаписи(РезультатАудиозаписи, Контекст) Экспорт 
	
	РаспознаваниеРечи_ВыполняетсяРаспознавание = Ложь;
	РаспознаваниеРечи_РаспознаваниеФразыЗавершено = Истина;
	РаспознаваниеРечи_ИзменитьСостояниеФормы();
	ТекущийЭлемент = Элементы.РезультатДействияТекстом;
	
	ВремяКонца = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	ТекущиеПараметры = РаспознаваниеРечи_ПараметрыРаспознавания;
	ПараметрыМодели = ПараметрыРаспознаванияРечиКлиент.ПараметрыМодели(ТекущиеПараметры);
	ВариантИспользования = ПараметрыРаспознаванияРечиКлиент.ВариантИспользования(ТекущиеПараметры);
	
	РаботаСРечьюЖурналированиеКлиент.ДобавитьАудио(
		УникальныйИдентификатор,
		РезультатАудиозаписи,
		ПараметрыМодели,
		ВариантИспользования,
		РаспознаваниеРечи_ВремяНачалаРаспознавания,
		ВремяКонца
	);
	
	Если РаспознаваниеРечи_ПерезапускРаспознавания Тогда
		РаспознаваниеРечи_НачатьРаспознавание();
		РаспознаваниеРечи_ПерезапускРаспознавания = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореПараметровРаспознаванияРечи(Результат, Контекст) Экспорт
	
	РаспознаваниеРечи_ПараметрыРаспознавания = Результат;
	РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
	РаспознаваниеРечи_ПерезапускРаспознавания = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_МобильныйКлиент

&НаСервере
Процедура МК_НастроитьЭлементыФормы()
	
	// Общее.
	МК_ЭлементыСтиля = МК_ПовтИсп.ЭлементыСтиля();
	
	СворачиваниеЭлементовПоВажности = СворачиваниеЭлементовФормыПоВажности.НеИспользовать;
	ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Половинный;
	
	РасположениеВДопПодменю = ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю;
	
	Элементы.ФормаВыбрать.ПоложениеВКоманднойПанели = РасположениеВДопПодменю;
	Элементы.ФормаОзнакомитьсяСОбновлением.ПоложениеВКоманднойПанели = РасположениеВДопПодменю;
	
	Элементы.УказатьТрудозатраты.ПоложениеВКоманднойПанели = РасположениеВДопПодменю;
	Элементы.ПереключитьХронометраж.ПоложениеВКоманднойПанели = РасположениеВДопПодменю;
	
	// Флаги.
	Элементы.СписокЗадачПодменюФлаги.Видимость = Ложь;
	Элементы.СписокДействияПодменюФлаги.Видимость = Ложь;
	
	Элементы.Переместить(Элементы.СписокЗадачГруппаФлаги,
		Элементы.МК_СписокЗадачКонтекстноеМенюГруппаФлаги);
	Элементы.Переместить(Элементы.СписокЗадачОчиститьФлаг,
		Элементы.МК_СписокЗадачКонтекстноеМенюГруппаФлаги);
	Элементы.СписокЗадачФлагОранжевый.Заголовок = НСтр("ru = 'Коричневый'");
	
	Элементы.Переместить(Элементы.СписокДействияГруппаФлаги,
		Элементы.МК_СписокДействияЗадачКонтекстноеМенюГруппаФлаги);
	Элементы.Переместить(Элементы.СписокДействияОчиститьФлаг,
		Элементы.МК_СписокДействияЗадачКонтекстноеМенюГруппаФлаги);
	Элементы.СписокДействияФлагОранжевый.Заголовок = НСтр("ru = 'Коричневый'");
	
	Элементы.ФормаСправочникКонтрольКонтроль.ПоложениеВКоманднойПанели = РасположениеВДопПодменю;
	Элементы.ФормаОтчетСводкаРаботВыполненныеЗадачи.ПоложениеВКоманднойПанели = РасположениеВДопПодменю;
	Элементы.ФормаОтчетСводкаРаботЗадачиВРаботе.ПоложениеВКоманднойПанели = РасположениеВДопПодменю;
	Элементы.ФормаОтчетСводкаРаботЗадачиОтМеня.ПоложениеВКоманднойПанели = РасположениеВДопПодменю;
	Элементы.ФормаОтчетСводкаРаботЗапланированныеЗадачи.ПоложениеВКоманднойПанели = РасположениеВДопПодменю;
	Элементы.ФормаОтчетСводкаРаботОтмененныеЗадачи.ПоложениеВКоманднойПанели = РасположениеВДопПодменю;
	Элементы.ФормаОтчетСводкаРаботСводкаРабот.ПоложениеВКоманднойПанели = РасположениеВДопПодменю;
	Элементы.ФормаОтчетСводкаРаботСправкаОбИсполнительскойДисциплине.ПоложениеВКоманднойПанели = РасположениеВДопПодменю;
	
	Элементы.ФормаДокументЗадачаНастройкиЗадач.ПоложениеВКоманднойПанели = РасположениеВДопПодменю;
	Элементы.ФормаНастройкаСпискаЗадач.ПоложениеВКоманднойПанели = РасположениеВДопПодменю;
	Элементы.ФормаНастройкаСпискаДействийЗадач.ПоложениеВКоманднойПанели = РасположениеВДопПодменю;
	
	// Нет данных.
	Элементы.СтраницаНетДанных.ЦветФона = ЦветаСтиля.МК_ЦветФонаГруппы;
	Элементы.ДекорацияНетДанных.Высота = 0;
	Элементы.ДекорацияНетДанных.РастягиватьПоВертикали = Истина;
	
	// Скроем команды.
	Элементы.ФормаОбновить.Видимость = Ложь;
	Элементы.ФормаБыстрыйПоиск.Видимость = Ложь;
	Элементы.ФормаАвтообновление.Видимость = Ложь;
	Элементы.ФормаСгруппироватьПо.Видимость = Ложь;
	
	// Скроем отступы.
	Элементы.ГруппаПриложенияОтступКоманд.Видимость = Ложь;
	Элементы.ГруппаСоисполнителиОтступКоманд.Видимость = Ложь;
	Элементы.ГруппаИсторияОтступКоманд.Видимость = Ложь;
	Элементы.ГруппаИнструкцияОтступКоманд.Видимость = Ложь;
	Элементы.ГруппаИнструкцияОтступКоманд.Видимость = Ложь;
	Элементы.КонтейнерКоманднойПанелиОтступ.Видимость = Ложь;
	
	Элементы.ТекущийВариантГруппировки.Видимость = Ложь;
	
	Элементы.ПоказыватьДеревоГруппировок.Видимость = Ложь;
	Элементы.ГруппаНавигацияПоГруппировкам.Видимость = Ложь;
	Элементы.ПанельЭлементовГруппировок.Видимость = Ложь;
	Элементы.ГруппаПанельГруппировка.Видимость = Ложь;
	
	Элементы.ГруппаВесьКонтент.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	Элементы.ГруппаГруппировка.РастягиватьПоГоризонтали = Истина;
	
	// "Новая задача".
	Элементы.МК_НижнийБлок.Видимость = Истина;
	Элементы.Переместить(Элементы.ФормаСоздатьНовуюЗадачу, Элементы.МК_НижнийБлок);
	МК.ОформитьАкцентнуюКнопку(Элементы.ФормаСоздатьНовуюЗадачу);
	
	// Верхний блок.
	Элементы.МК_ВерхнийБлок.Видимость = Истина;
	МК.ОформитьКнопкуФильтра(Элементы.МК_ЗадачиОтборНевыполненные, Истина);
	
	МК_ОбновитьЗаголовокГруппировки(ЭтотОбъект);
	
	// Фильтры.
	Элементы.МК_ПоказатьСкрытьФильтры.Видимость = Истина;
	
	МК_КлиентСервер.ОформитьКнопкуСворачиваемойГруппы(МК_ЭлементыСтиля,
		Элементы.МК_ЗакрытьОтборы,
		Истина,
		Истина);
			
	МК_КлиентСервер.ОформитьПроизвольныйЭлементПоСостоянию(МК_ЭлементыСтиля,
		Элементы.МК_ПоказатьСкрытьФильтры,
		Элементы.МК_Фильтры.Видимость);
	
	Элементы.ГруппаБыстрыйПоиск.Видимость = Ложь;
	Элементы.БыстрыйПоискПанель.Видимость = Ложь;
	Элементы.СброситьФильтр.Видимость = Ложь;
	Элементы.ПредставлениеФильтра.Видимость = Ложь;
	
	МК_НастроитьСтрокуФильтра(Элементы.МК_ФильтрыАвтор);
	МК_НастроитьСтрокуФильтра(Элементы.МК_ФильтрыСостояние);
	МК_НастроитьСтрокуФильтра(Элементы.МК_ФильтрыВидДействия);
	МК_НастроитьСтрокуФильтра(Элементы.МК_ФильтрыПериод);
	МК_НастроитьСтрокуФильтра(Элементы.МК_ФильтрыИсполнитель);
	МК_НастроитьСтрокуФильтра(Элементы.МК_ФильтрыПроекты);
	МК_НастроитьСтрокуФильтра(Элементы.МК_ФильтрыФлаг);
	
	МК_ОбновитьФильтры();
	
	// Сортировка.
	Элементы.МК_КомандыСортировкиСписка.Видимость = Истина;

	Если ПустаяСтрока(СписокСортироватьПо) Тогда
		СписокСортироватьПо = "Заголовок";
		СписокНаправлениеСортировки = "Возр";
	КонецЕсли;
	
	ПереключитьСортировку(СписокСортироватьПо, СписокНаправлениеСортировки, СписокСортироватьПо);
	СортироватьСписокЗадачПоКолонке(СписокСортироватьПо, ЭтотОбъект);
	
	МК_ЗаполнитьРеквизитыБыстрогоПоискаИзСохранненых();
	
	// Общее для списков (сделаем 1 раз, чтобы при переключении не тормозило).
	МК_ПодготовитьСписокДействияЗадач();
	МК_ПодготовитьСписокЗадач();
	
	Если ТекущаяГруппировка = Справочники.ГруппировкиЗадач.ВсеЗадачиПоИсполнителям
		Или ТекущаяГруппировка = Справочники.ГруппировкиЗадач.ВсеЗадачиПоАвторам Тогда
		МК_ПереключитьНаСписокЗадач();
	ИначеЕсли ТекущаяГруппировка = Справочники.ГруппировкиЗадач.ЗадачиОтМеня Тогда 
		МК_ПереключитьНаСписокЗадач();
	ИначеЕсли ТекущаяГруппировка = Справочники.ГруппировкиЗадач.ЗадачиПодчиненных Тогда 
		МК_ПереключитьНаСписокДействияЗадач();
	ИначеЕсли ТекущаяГруппировка = Справочники.ГруппировкиЗадач.ЗадачиМне Тогда 
		МК_ПереключитьНаСписокДействияЗадач();
	Иначе
		МК_ПереключитьНаСписокЗадач();
	КонецЕсли;

	МК_НастроитьОбластьПредпросмотра();
	
	Элементы.Переместить(Элементы.Группировки, Элементы.МК_СтраницаГруппировки);
	
КонецПроцедуры

&НаСервере
Процедура МК_ПодготовитьСписокДействияЗадач()
	
	// Общее.
	Элементы.СписокДействияЗадач.Шапка = Ложь;
	Элементы.СписокДействияЗадач.ВертикальныеЛинии = Ложь;
	Элементы.СписокДействияЗадач.ПоложениеСтрокиПоиска = ПоложениеСтрокиПоиска.ПотянутьСверху;
	
	// Колонки.
	Элементы.СписокДействияЗадачДействиеЗадачи.Видимость = Ложь;
	Элементы.СписокДействияЗадачЕстьПодзадачи.Видимость = Ложь;
	Элементы.СписокДействияЗадачЗаголовок.Видимость = Ложь;
	
	Элементы.МК_ГруппаКолонокДействияЗадач.Видимость = Истина;
	
	// Первая колонка.
	Элементы.Переместить(Элементы.СписокДействияЗадачИндексКартинкиСостояния, Элементы.МК_ПерваяКолонкаДействияЗадач);
	Элементы.Переместить(Элементы.СписокДействияЗадачИндексКартинкиПриоритета, Элементы.МК_ПерваяКолонкаДействияЗадач);
	Элементы.Переместить(Элементы.СписокДействияЗадачИндексКартинкиФлага, Элементы.МК_ПерваяКолонкаДействияЗадач);
	Элементы.Переместить(Элементы.СписокДействияЗадачИндексКартинкиКонтроля, Элементы.МК_ПерваяКолонкаДействияЗадач);
	
	Элементы.СписокДействияЗадачИндексКартинкиСостояния.КартинкаЗначений = БиблиотекаКартинок.МК_КоллекцияСостоянияПроцессовИЗадач;
	Элементы.СписокДействияЗадачИндексКартинкиПриоритета.КартинкаЗначений = БиблиотекаКартинок.МК_КоллекцияСтрокВариантыВажности;
	Элементы.СписокДействияЗадачИндексКартинкиФлага.КартинкаЗначений = БиблиотекаКартинок.МК_КоллекцияФлаги;
	Элементы.СписокДействияЗадачИндексКартинкиКонтроля.КартинкаЗначений = БиблиотекаКартинок.МК_КоллекцияСтрокКонтроль;
	
	МК.НастроитьКолонкуСКартинкойДляСписка(Элементы.СписокДействияЗадачИндексКартинкиСостояния);
	МК.НастроитьКолонкуСКартинкойДляСписка(Элементы.СписокДействияЗадачИндексКартинкиПриоритета);
	МК.НастроитьКолонкуСКартинкойДляСписка(Элементы.СписокДействияЗадачИндексКартинкиФлага);
	МК.НастроитьКолонкуСКартинкойДляСписка(Элементы.СписокДействияЗадачИндексКартинкиКонтроля);
	
	МК.УстановитьПолюУсловноеОформлениеСкрытНеВидим(СписокДействияЗадач, "ИндексКартинкиПриоритета", 1);
	МК.УстановитьПолюУсловноеОформлениеСкрытНеВидим(СписокДействияЗадач, "ИндексКартинкиСостояния", 0);
	МК.УстановитьПолюУсловноеОформлениеСкрытНеВидим(СписокДействияЗадач, "ИндексКартинкиКонтроля", Ложь);
	
	// Вторая колонка.
	Элементы.Переместить(Элементы.СписокДействияЗадачАвторСтрокой, Элементы.МК_ВтораяКолонкаДействияЗадач);
	Элементы.Переместить(Элементы.СписокДействияЗадачИсполнительСтрокой, Элементы.МК_ВтораяКолонкаДействияЗадач);
	
	Элементы.СписокДействияЗадачАвторСтрокой.Ширина = 0;
	Элементы.СписокДействияЗадачАвторСтрокой.Высота = 1;
	Элементы.СписокДействияЗадачАвторСтрокой.РастягиватьПоГоризонтали = Истина;
	Элементы.СписокДействияЗадачАвторСтрокой.Шрифт = ШрифтыСтиля.МелкийШрифтТекста;
	Элементы.СписокДействияЗадачАвторСтрокой.ЦветТекста = ЦветаСтиля.МК_ЦветАвтораИсполнителя;
	
	Элементы.СписокДействияЗадачИсполнительСтрокой.Ширина = 0;
	Элементы.СписокДействияЗадачИсполнительСтрокой.Высота = 1;
	Элементы.СписокДействияЗадачИсполнительСтрокой.РастягиватьПоГоризонтали = Истина;
	Элементы.СписокДействияЗадачИсполнительСтрокой.Шрифт = ШрифтыСтиля.МелкийШрифтТекста;
	Элементы.СписокДействияЗадачИсполнительСтрокой.ЦветТекста = ЦветаСтиля.МК_ЦветАвтораИсполнителя;

	// Третья колонка.
	Элементы.Переместить(Элементы.СписокДействияЗадачСрок, Элементы.МК_ТретьяКолонкаДействияЗадач);
	Элементы.Переместить(Элементы.СписокДействияЗадачДата, Элементы.МК_ТретьяКолонкаДействияЗадач);
	
	Элементы.СписокДействияЗадачДата.Высота = 1;
	Элементы.СписокДействияЗадачДата.Ширина = 4;
	Элементы.СписокДействияЗадачДата.Формат = МК.ПолучитьФорматДатыДляЗадач();
	МК.НастроитьКолонкуСДатойДляСписка(Элементы.СписокДействияЗадачДата);
	
	Элементы.СписокДействияЗадачСрок.Высота = 3;
	Элементы.СписокДействияЗадачСрок.Ширина = 4;
	Элементы.СписокДействияЗадачСрок.Формат = МК.ПолучитьФорматСрокаДляЗадач();
	МК.НастроитьКолонкуСДатойДляСписка(Элементы.СписокДействияЗадачСрок);
	
КонецПроцедуры

&НаСервере
Процедура МК_ПодготовитьСписокЗадач()
	
	// Общее.
	Элементы.СписокЗадач.Шапка = Ложь;
	Элементы.СписокЗадач.ВертикальныеЛинии = Ложь;
	Элементы.СписокЗадач.ПоложениеСтрокиПоиска = ПоложениеСтрокиПоиска.ПотянутьСверху;
	
	// Колонки.
	Элементы.СписокЗадачЗадача.Видимость = Ложь;
	Элементы.СписокЗадачЕстьПодзадачи.Видимость = Ложь;
	Элементы.СписокЗадачЗаголовок.Видимость = Ложь;
	
	Элементы.МК_ГруппаКолонокЗадач.Видимость = Истина;
	
	// Первая колонка.
	Элементы.Переместить(Элементы.СписокЗадачИндексКартинкиСостояния, Элементы.МК_ПерваяКолонкаЗадач);
	Элементы.Переместить(Элементы.СписокЗадачИндексКартинкиПриоритета, Элементы.МК_ПерваяКолонкаЗадач);
	Элементы.Переместить(Элементы.СписокЗадачИндексКартинкиФлага, Элементы.МК_ПерваяКолонкаЗадач);
	Элементы.Переместить(Элементы.СписокЗадачИндексКартинкиКонтроля, Элементы.МК_ПерваяКолонкаЗадач);
	
	Элементы.СписокЗадачИндексКартинкиСостояния.КартинкаЗначений = БиблиотекаКартинок.МК_КоллекцияСостоянияПроцессовИЗадач;
	Элементы.СписокЗадачИндексКартинкиПриоритета.КартинкаЗначений = БиблиотекаКартинок.МК_КоллекцияСтрокВариантыВажности;
	Элементы.СписокЗадачИндексКартинкиФлага.КартинкаЗначений = БиблиотекаКартинок.МК_КоллекцияФлаги;
	Элементы.СписокЗадачИндексКартинкиКонтроля.КартинкаЗначений = БиблиотекаКартинок.МК_КоллекцияСтрокКонтроль;
	
	МК.НастроитьКолонкуСКартинкойДляСписка(Элементы.СписокЗадачИндексКартинкиСостояния);
	МК.НастроитьКолонкуСКартинкойДляСписка(Элементы.СписокЗадачИндексКартинкиПриоритета);
	МК.НастроитьКолонкуСКартинкойДляСписка(Элементы.СписокЗадачИндексКартинкиФлага);
	МК.НастроитьКолонкуСКартинкойДляСписка(Элементы.СписокЗадачИндексКартинкиКонтроля);
	
	МК.УстановитьПолюУсловноеОформлениеСкрытНеВидим(СписокЗадач, "ИндексКартинкиПриоритета", 1);
	МК.УстановитьПолюУсловноеОформлениеСкрытНеВидим(СписокЗадач, "ИндексКартинкиСостояния", 0);
	МК.УстановитьПолюУсловноеОформлениеСкрытНеВидим(СписокЗадач, "ИндексКартинкиКонтроля", Ложь);
	
	// Вторая колонка.
	Элементы.Переместить(Элементы.СписокЗадачИсполнители, Элементы.МК_ВтораяКолонкаЗадач);
	
	Элементы.СписокЗадачИсполнители.Ширина = 1;
	Элементы.СписокЗадачИсполнители.Высота = 1;
	Элементы.СписокЗадачИсполнители.РастягиватьПоГоризонтали = Истина;
	Элементы.СписокЗадачИсполнители.РастягиватьПоВертикали = Ложь;
	Элементы.СписокЗадачИсполнители.Шрифт = ШрифтыСтиля.МелкийШрифтТекста;
	Элементы.СписокЗадачИсполнители.ЦветТекста = ЦветаСтиля.МК_ЦветАвтораИсполнителя;

	// Третья колонка.
	Элементы.Переместить(Элементы.СписокЗадачСрок, Элементы.МК_ТретьяКолонкаЗадач);
	Элементы.Переместить(Элементы.СписокЗадачДата, Элементы.МК_ТретьяКолонкаЗадач);
	
	Элементы.СписокЗадачДата.Высота = 1;
	Элементы.СписокЗадачДата.Ширина = 5;
	Элементы.СписокЗадачДата.Формат = МК.ПолучитьФорматДатыДляЗадач();
	МК.НастроитьКолонкуСДатойДляСписка(Элементы.СписокЗадачДата);
	
	Элементы.СписокЗадачСрок.Высота = 3;
	Элементы.СписокЗадачСрок.Ширина = 5;
	Элементы.СписокЗадачСрок.Формат = МК.ПолучитьФорматСрокаДляЗадач();
	МК.НастроитьКолонкуСДатойДляСписка(Элементы.СписокЗадачСрок);
	
КонецПроцедуры

&НаСервере
Процедура МК_ПереключитьНаСписокДействияЗадач()
	
	Элементы.МК_Фильтры.Видимость = Ложь;
	МК_ОбновитьОтображениеКнопкиФильтра(ЭтотОбъект);
	
	// Контекстное меню.
	СписокДействияЗадачКонтекстноеМеню = Элементы.СписокДействияЗадач.КонтекстноеМеню;

	// Команда "Перенаправить".
	Элементы.Переместить(Элементы.ФормаДокументЗадачаПеренаправить, СписокДействияЗадачКонтекстноеМеню);
	// Команда "Задать вопрос".
	Элементы.Переместить(Элементы.ФормаБизнесПроцессРешениеВопросовВыполненияЗадачЗадатьВопрос, СписокДействияЗадачКонтекстноеМеню);
	// Команда "Создать на основании".
	Элементы.Переместить(Элементы.ФормаСоздатьНаОсновании, СписокДействияЗадачКонтекстноеМеню);
	// Команда "Взять в работу".
	Элементы.Переместить(Элементы.ВзятьВРаботу, СписокДействияЗадачКонтекстноеМеню);
	// Команда "Контроль".
	Элементы.Переместить(Элементы.ФормаСправочникКонтрольКонтроль, СписокДействияЗадачКонтекстноеМеню);
	// Команда "Отменить взятие в работу".
	Элементы.Переместить(Элементы.ФормаДокументДействиеЗадачиОтменитьВзятиеВРаботу, СписокДействияЗадачКонтекстноеМеню);
	// Команда "Согласовать перенос срока".
	Элементы.Переместить(Элементы.ФормаЗадачаЗадачаИсполнителяСогласоватьПереносСрока, СписокДействияЗадачКонтекстноеМеню);
	// Команда "Создать подзадачу".
	Элементы.Переместить(Элементы.ФормаСоздатьНаОснованииПодзадачу, СписокДействияЗадачКонтекстноеМеню);
	// Команда "Скопировать подзадачу".
	Элементы.Переместить(Элементы.ФормаСоздатьЗадачуКопированием, СписокДействияЗадачКонтекстноеМеню);
	// Команды "Трудозатраты".
	Элементы.Переместить(Элементы.ПереключитьХронометраж, СписокДействияЗадачКонтекстноеМеню);
	Элементы.Переместить(Элементы.УказатьТрудозатраты, СписокДействияЗадачКонтекстноеМеню);
	// Команды "Добавить участников".
	Элементы.Переместить(Элементы.ФормаДобавитьУчастников, СписокДействияЗадачКонтекстноеМеню);

	// Сортировка.
	Элементы.МК_СписокДействияСортироватьПоИсполнителю.Видимость = Истина;
	Элементы.МК_СписокДействияСортироватьПоСостояниюУчастника.Видимость = Истина;
	
	Элементы.МК_СписокСортироватьПоИсполнителю.Видимость = Ложь;
	Элементы.МК_СписокСортироватьПоСостоянию.Видимость = Ложь;

КонецПроцедуры

&НаСервере
Процедура МК_ПереключитьНаСписокЗадач()
	
	Элементы.МК_Фильтры.Видимость = Ложь;
	МК_ОбновитьОтображениеКнопкиФильтра(ЭтотОбъект);
	
	// Контекстное меню.
	СписокЗадачКонтекстноеМеню = Элементы.СписокЗадач.КонтекстноеМеню;

	// Команда "Перенаправить".
	Элементы.Переместить(Элементы.ФормаДокументЗадачаПеренаправить, СписокЗадачКонтекстноеМеню);
	// Команда "Задать вопрос".
	Элементы.Переместить(Элементы.ФормаБизнесПроцессРешениеВопросовВыполненияЗадачЗадатьВопрос, СписокЗадачКонтекстноеМеню);
	// Команда "Создать на основании".
	Элементы.Переместить(Элементы.ФормаСоздатьНаОсновании, СписокЗадачКонтекстноеМеню);
	// Команда "Контроль".
	Элементы.Переместить(Элементы.ФормаСправочникКонтрольКонтроль, СписокЗадачКонтекстноеМеню);
	// Команда "Отменить взятие в работу".
	Элементы.Переместить(Элементы.ФормаДокументДействиеЗадачиОтменитьВзятиеВРаботу, СписокЗадачКонтекстноеМеню);
	// Команда "Согласовать перенос срока".
	Элементы.Переместить(Элементы.ФормаЗадачаЗадачаИсполнителяСогласоватьПереносСрока, СписокЗадачКонтекстноеМеню);
	// Команда "Создать подзадачу".
	Элементы.Переместить(Элементы.ФормаСоздатьНаОснованииПодзадачу, СписокЗадачКонтекстноеМеню);
	// Команда "Скопировать подзадачу".
	Элементы.Переместить(Элементы.ФормаСоздатьЗадачуКопированием, СписокЗадачКонтекстноеМеню);
	// Команды "Трудозатраты".
	Элементы.Переместить(Элементы.ПереключитьХронометраж, СписокЗадачКонтекстноеМеню);
	Элементы.Переместить(Элементы.УказатьТрудозатраты, СписокЗадачКонтекстноеМеню);
	// Команды "Добавить участников".
	Элементы.Переместить(Элементы.ФормаДобавитьУчастников, СписокЗадачКонтекстноеМеню);

	// Сортировка.
	Элементы.МК_СписокСортироватьПоИсполнителю.Видимость = Истина;
	Элементы.МК_СписокСортироватьПоСостоянию.Видимость = Истина;
	
	Элементы.МК_СписокДействияСортироватьПоСостояниюУчастника.Видимость = Ложь;
	Элементы.МК_СписокДействияСортироватьПоИсполнителю.Видимость = Ложь;

КонецПроцедуры

&НаСервере
Процедура МК_НастроитьОбластьПредпросмотра()
	
	Если ОтображениеКарточкиЗадачи = Перечисления.ВариантыОтображенияОбластиЧтения.НеОтображать Тогда
		Элементы.ОбластьПросмотра.Видимость = Ложь;
		Элементы.СписокДействияЗадач.ИспользованиеТекущейСтроки =
			ИспользованиеТекущейСтрокиТаблицы.Выбор;
		Элементы.СписокЗадач.ИспользованиеТекущейСтроки =
			ИспользованиеТекущейСтрокиТаблицы.Выбор;
		Возврат;
	КонецЕсли;

	Элементы.ОбластьПросмотра.Видимость = ЭтоМобильноеУстройствоСБольшимЭкраном;

	Если ЭтоМобильноеУстройствоСБольшимЭкраном Тогда
		Элементы.СписокДействияЗадач.ИспользованиеТекущейСтроки =
			ИспользованиеТекущейСтрокиТаблицы.ОтображениеВыделенияИВыбор;
		Элементы.СписокЗадач.ИспользованиеТекущейСтроки =
			ИспользованиеТекущейСтрокиТаблицы.ОтображениеВыделенияИВыбор;
	Иначе
		Элементы.СписокДействияЗадач.ИспользованиеТекущейСтроки =
			ИспользованиеТекущейСтрокиТаблицы.Выбор;
		Элементы.СписокЗадач.ИспользованиеТекущейСтроки =
			ИспользованиеТекущейСтрокиТаблицы.Выбор;
	КонецЕсли;
	
	Если Не ЭтоМобильноеУстройствоСБольшимЭкраном Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ОбластьПросмотра.РастягиватьПоГоризонтали = Истина;
	Элементы.ОбластьПросмотра.Ширина = 30;
	Элементы.ГруппаВесьКонтент.ЦветФона = ЦветаСтиля.МК_ЦветФонаГруппы;
	Элементы.ГруппаСписокИОбластьПросмотра.ЦветФона = ЦветаСтиля.МК_ЦветФонаГруппы;
	Элементы.ГруппаСписокИОбластьПросмотра.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Половинный;
	
	// Команды выполнения.
	Элементы.ГруппаКомандыДляВыполнения.Видимость = Ложь;
	Элементы.МК_ПанельКомандВыполнения.Видимость = Истина;
	
	Элементы.Переместить(Элементы.ВыбратьШаблонДляВыполненияЗадачи, Элементы.МК_ПанельКомандВыполнения);
	Элементы.Переместить(Элементы.ОтменитьВыполнение, Элементы.МК_ПанельКомандВыполнения);
	
	// Страницы.
	Элементы.СтраницыПросмотра.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Элементы.СтраницаОбзорФайла.Видимость = Ложь;
	Элементы.ГруппаКолонки.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	Элементы.СтраницаНетЗадач.ЦветФона = ЦветаСтиля.МК_ЦветФонаГруппы;
	Элементы.ГруппаОбъектИзДругойСистемы.ЦветФона = ЦветаСтиля.МК_ЦветФонаГруппы;
	
	// Команды переключения страниц.
	Элементы.МК_ЗаголовокСтраниц.Видимость = Истина;
	
	// Страница "Информация" - по умолчанию.
	МК_ПереключитьНаСтраницу(ЭтотОбъект, Элементы.СтраницаОсновное,
		Элементы.МК_КнопкаСтраницаИнформация);
	
	Элементы.МК_ГруппаПриложения.Видимость = Истина;
	Элементы.ДеревоПриложений.РастягиватьПоГоризонтали = Истина;
	Элементы.МК_ЗаголовокДеревоПриложений.ЦветФона = ЦветаСтиля.МК_ЦветФонаГруппы;
	Элементы.МК_ЗаголовокСтраниц.ЦветФона = ЦветаСтиля.МК_ЦветФонаГруппы;
	Элементы.ГруппаОсновное.ЦветФона = ЦветаСтиля.МК_ЦветФонаГруппы;
	
	Элементы.ОписаниеHTMLЗадачи.ЦветРамки = ЦветаСтиля.МК_ЦветФонаГруппы;
	
	Элементы.Переместить(Элементы.ДеревоПриложений, Элементы.МК_ГруппаПриложения);
	МК_ОбработатьПоказСкрытиеДереваПриложений(ЭтотОбъект);
	
	// Страница "Результат".
	Элементы.МК_СтраницаРезультат.Видимость = Истина;
	Элементы.Переместить(Элементы.ГруппаРезультатДействияТекстом, Элементы.МК_СтраницаРезультат);
	Элементы.Переместить(Элементы.ГруппаПриложенияРезультата, Элементы.МК_СтраницаРезультат);
		
	// Сделаем ком. панель результата сверху.
	Элементы.ГруппаРезультатДействияТекстом.Группировка = 
		ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	Элементы.ГруппаКомандыПриложенийРезультата.Группировка = 
		ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	Элементы.ГруппаРезультатДействияТекстомКоманднаяПанель.Группировка = 
		ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	Элементы.Переместить(Элементы.ГруппаРезультатДействияТекстомГраницы,
		Элементы.ГруппаРезультатДействияТекстом);
	
	// Добавим отступ между командами.
	Элементы.МК_ОтступКомандРезультатДействияТекстом.Видимость = Истина;
	Элементы.ГруппаРезультатДействияТекстомКоманднаяПанель.ГоризонтальныйИнтервал = 
		ИнтервалМеждуЭлементамиФормы.Полуторный;
	
	Элементы.Переместить(Элементы.РезультатДействияТекстомКнопкаВыбора, Элементы.МК_Дополнительно);
	Элементы.ДобавитьКартинкуИзБуфераКОтчету.Видимость = Ложь;
	
	Элементы.МК_ЗаполнитьПоШаблону.Видимость = Элементы.РезультатДействияТекстомКнопкаВыбора.Видимость;
	МК.ОформитьКнопкуФильтра(Элементы.МК_ЗаполнитьПоШаблону, Истина);
		
	МК.ОформитьКнопкуФильтра(Элементы.ДобавитьПриложениеКОтчету);	
	Элементы.ДобавитьПриложениеКОтчету.Картинка = БиблиотекаКартинок.СоздатьЭлементСписка;
	
	МК.ОформитьКнопкуФильтра(Элементы.ДобавитьФайлКОтчету);	
	Элементы.ДобавитьФайлКОтчету.Картинка = БиблиотекаКартинок.МК_КомандаВложениеФайл;
	
	// Скроем границы результата.
	Элементы.ГруппаРезультатДействияТекстомГраницаВерх.Видимость = Ложь;
	Элементы.ГруппаРезультатДействияТекстомГраницаНиз.Видимость = Ложь;
	Элементы.РезультатДействияТекстомГраницаЛево.Видимость = Ложь;
	Элементы.РезультатДействияТекстомГраницаПраво.Видимость = Ложь;
		
	// Расстянем комментарий по вертикали.
	Элементы.РезультатДействияТекстом.РастягиватьПоВертикали = Истина;
	Элементы.ГруппаРезультатДействияТекстомГраницы.РастягиватьПоВертикали = Истина;
	Элементы.ГруппаРезультатДействияТекстомГраницаЦентр.РастягиватьПоВертикали = Истина;
	Элементы.ГруппаРезультатДействияТекстом.РастягиватьПоВертикали = Истина;
	
	// Приложения результата.
	Элементы.МК_ГруппаПриложенияРезультата.Видимость = Истина;
	Элементы.ПриложенияРезультата.Видимость = Ложь;
	Элементы.ПриложенияРезультатаПриложение.Шрифт = ШрифтыСтиля.МК_ШрифтДополнительнойТаблицы;
	Элементы.ПриложенияРезультата.Шапка = Ложь;
	Элементы.Переместить(Элементы.ПриложенияРезультата, Элементы.МК_ГруппаПриложенияРезультата);
	Элементы.СтрокиПриложенияРезультата.Видимость = Ложь;
	МК_ПоказатьСкрытьПриложенияРезультатаНаСервере();
		
	// Страница "Подзадачи".
	Элементы.Подзадачи.Шапка = Ложь;
	Элементы.СтраницаПодзадачи.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	Элементы.ГруппаЗаголовокПодзадач.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	Элементы.ГруппаЗаголовокПодзадач.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Полуторный;
	Элементы.Переместить(Элементы.ГруппаЗаголовокПодзадач, Элементы.СтраницаПодзадачи, Элементы.Подзадачи);
	Элементы.Подзадачи.ГоризонтальныеЛинии = Истина;
	
	Элементы.Подзадачи.ИспользованиеТекущейСтроки = 
		ИспользованиеТекущейСтрокиТаблицы.ОтображениеВыделенияИВыбор;
		
	МК.ОформитьКнопкуФильтра(Элементы.ДокументЗадачаСоздатьПодзадачу);	
	Элементы.ДокументЗадачаСоздатьПодзадачу.Картинка = БиблиотекаКартинок.СоздатьЭлементСписка;
	
	МК.ОформитьКнопкуФильтра(Элементы.ВзятьОтчетОбИсполненииИПриложения);	
	МК.ОформитьКнопкуФильтра(Элементы.ВернутьНаДоработку);	
	
	// Страница "История".
	Элементы.СтраницаЖизненныйЦиклПрокрутка.ЦветФона = ЦветаСтиля.МК_ЦветФонаГруппы;
	Элементы.ГруппаЖизненныйЦикл.ЦветФона = ЦветаСтиля.МК_ЦветФонаГруппы;
	МК.ОформитьКнопкуФильтра(Элементы.ИсторияВыполнения, Истина);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура МК_ОбработатьПоказСкрытиеДереваПриложений(Форма)
	
	КоличествоПриложений = Форма.ДеревоПриложений.ПолучитьЭлементы().Количество();
	Элементы = Форма.Элементы;
	Если КоличествоПриложений = 0 Тогда
		Элементы.ДеревоПриложений.Видимость = Ложь;
	КонецЕсли;
	
	МК_ОбновитьЗаголовокДеревоПриложений(Форма, КоличествоПриложений);

	МК_КлиентСервер.ОформитьКнопкуСворачиваемойГруппы(Форма.МК_ЭлементыСтиля,
		Элементы.МК_ПоказатьСкрытьДеревоПриложений,
		Элементы.ДеревоПриложений.Видимость);
	
	МК_КлиентСервер.УстановитьНовуюВысотуДополнительнойТаблицы(Элементы.ДеревоПриложений,
		КоличествоПриложений);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура МК_ОбновитьЗаголовокДеревоПриложений(Форма, КоличествоПриложений = 0)
	
	Если КоличествоПриложений = 0 Тогда
		КоличествоПриложений = Форма.ДеревоПриложений.ПолучитьЭлементы().Количество();
	КонецЕсли;
	
	Форма.Элементы.МК_ДеревоПриложенийНадпись.Заголовок = 
		СтрШаблон(
			НСтр("ru = 'Приложения задачи (%1)'"),
			Формат(КоличествоПриложений, "ЧН=0; ЧГ="));
КонецПроцедуры

&НаСервере
Процедура МК_ПоказатьСкрытьПриложенияРезультатаНаСервере()
	
	КоличествоПриложений = ПриложенияРезультата.Количество();
	
	Если КоличествоПриложений = 0 Тогда
		Элементы.ПриложенияРезультата.Видимость = Ложь;
	КонецЕсли;
	
	МК_ОбновитьЗаголовокПриложенияРезультата();

	МК.ОформитьКнопкуСворачиваемойГруппы(Элементы.МК_ПоказатьСкрытьПриложенияРезультата, Элементы.ПриложенияРезультата.Видимость);
	МК.УстановитьНовуюВысотуДополнительнойТаблицы(Элементы.ПриложенияРезультата, КоличествоПриложений);
	
КонецПроцедуры

&НаСервере
Процедура МК_ОбновитьЗаголовокПриложенияРезультата()
	
	КоличествоПриложений = ПриложенияРезультата.Количество();
	
	Элементы.МК_ПриложенияРезультатаНадпись.Заголовок = 
		СтрШаблон(
			НСтр("ru = 'Приложения результата (%1)'"),
			Формат(КоличествоПриложений, "ЧН=0; ЧГ="));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура МК_ПереключитьНаСтраницу(Форма, Страница, Кнопка)

	Форма.Элементы.СтраницыПросмотра.ТекущаяСтраница = Страница;
	МК_СброситьОформлениеПереключателейСтраницПредпросмотра(Форма);
	МК_КлиентСервер.ОформитьКнопкуФильтра(Форма.МК_ЭлементыСтиля, Кнопка, Истина, Истина);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура МК_СброситьОформлениеПереключателейСтраницПредпросмотра(Форма)
	
	МК_КлиентСервер.ОформитьКнопкуФильтра(
		Форма.МК_ЭлементыСтиля, Форма.Элементы.МК_КнопкаСтраницаИнформация, Истина, Ложь);
		
	МК_КлиентСервер.ОформитьКнопкуФильтра(
		Форма.МК_ЭлементыСтиля, Форма.Элементы.МК_КнопкаСтраницаИстория, Истина, Ложь);
		
	МК_КлиентСервер.ОформитьКнопкуФильтра(
		Форма.МК_ЭлементыСтиля, Форма.Элементы.МК_КнопкаСтраницаРезультат, Истина, Ложь);
		
	МК_КлиентСервер.ОформитьКнопкуФильтра(
		Форма.МК_ЭлементыСтиля, Форма.Элементы.МК_КнопкаСтраницаСоисполнители, Истина, Ложь);
		
	МК_КлиентСервер.ОформитьКнопкуФильтра(
		Форма.МК_ЭлементыСтиля, Форма.Элементы.МК_КнопкаСтраницаПодзадачи, Истина, Ложь);

КонецПроцедуры

&НаСервере
Процедура МК_ОбновитьКнопкиВыполнения()
	
	МК.ОформитьКнопкуЗадачСПоложительнымВыполнением(Элементы.ВыбратьШаблонДляВыполненияЗадачи);
	МК.ОформитьКнопкуЗадачСПоложительнымВыполнением(Элементы.ОтменитьВыполнение);
	
	МК.ОформитьАкцентнуюКнопку(Элементы.ОтменитьВыполнение);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура МК_ОбновитьОтображениеКнопкиФильтра(Форма)
	
	ЕстьОтбор = МК_ЕстьОтбор(Форма);
	
	Форма.Элементы.МК_ПоказатьСкрытьФильтры.ЦветФона = ?(ЕстьОтбор,
		Форма.МК_ЭлементыСтиля.ЦветАктивнойДополнительнойКнопки,
		Форма.МК_ЭлементыСтиля.ЦветДополнительнойКнопки);
	
	Форма.Элементы.МК_ОчиститьФильтры.Доступность = ЕстьОтбор;
	
	Форма.Элементы.МК_ПоказатьСкрытьФильтры.Видимость =
		Не Форма.Элементы.МК_Фильтры.Видимость;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция МК_ЕстьОтбор(Форма)

	Возврат ЗначениеЗаполнено(Форма.МК_Исполнитель) Или
		ЗначениеЗаполнено(Форма.МК_Автор) Или
		ЗначениеЗаполнено(Форма.МК_ВидДействия) Или
		ЗначениеЗаполнено(Форма.МК_Состояние) Или
		ЗначениеЗаполнено(Форма.МК_Флаг) Или
		Не Форма.МК_Период.ДатаНачала = Дата(1,1,1) Или
		Не Форма.МК_Период.ДатаОкончания = Дата(1,1,1);
	
КонецФункции

&НаСервере
Процедура МК_НастроитьСтрокуФильтра(Элемент)

	Если Элемент = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(Элемент) <> Тип("ПолеФормы") И ТипЗнч(Элемент) <> Тип("ДекорацияФормы") Тогда
		Возврат;
	КонецЕсли;

	Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	Элемент.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
	Элемент.РастягиватьПоГоризонтали = Истина;

КонецПроцедуры

&НаСервере
Процедура МК_ОбновитьФильтры()

	МК_КлиентСервер.ОформитьПроизвольныйЭлементПоСостоянию(МК_ЭлементыСтиля,
		Элементы.МК_ФильтрыВидДействия,
		ЗначениеЗаполнено(МК_ВидДействия));
	Элементы.МК_ФильтрыВидДействия.КнопкаОчистки = ЗначениеЗаполнено(МК_ВидДействия);

	МК_КлиентСервер.ОформитьПроизвольныйЭлементПоСостоянию(МК_ЭлементыСтиля,
		Элементы.МК_ФильтрыСостояние,
		ЗначениеЗаполнено(МК_Состояние));
	Элементы.МК_ФильтрыСостояние.КнопкаОчистки = ЗначениеЗаполнено(МК_Состояние);

	МК_КлиентСервер.ОформитьПроизвольныйЭлементПоСостоянию(МК_ЭлементыСтиля,
		Элементы.МК_ФильтрыИсполнитель,
		ЗначениеЗаполнено(МК_Исполнитель));
	Элементы.МК_ФильтрыИсполнитель.КнопкаОчистки = ЗначениеЗаполнено(МК_Исполнитель);

	МК_КлиентСервер.ОформитьПроизвольныйЭлементПоСостоянию(МК_ЭлементыСтиля,
		Элементы.МК_ФильтрыАвтор,
		ЗначениеЗаполнено(МК_Автор));
	Элементы.МК_ФильтрыАвтор.КнопкаОчистки = ЗначениеЗаполнено(МК_Автор);

	МК_КлиентСервер.ОформитьПроизвольныйЭлементПоСостоянию(МК_ЭлементыСтиля,
		Элементы.МК_ФильтрыПериод,
		ЗначениеЗаполнено(МК_Период));
	Элементы.МК_ФильтрыПериод.КнопкаОчистки = ЗначениеЗаполнено(МК_Период);

	МК_КлиентСервер.ОформитьПроизвольныйЭлементПоСостоянию(МК_ЭлементыСтиля,
		Элементы.МК_ФильтрыПроекты,
		ЗначениеЗаполнено(МК_Проект));
	Элементы.МК_ФильтрыПроекты.КнопкаОчистки = ЗначениеЗаполнено(МК_Проект);

	МК_КлиентСервер.ОформитьПроизвольныйЭлементПоСостоянию(МК_ЭлементыСтиля,
		Элементы.МК_ФильтрыФлаг,
		ЗначениеЗаполнено(МК_Флаг));
	Элементы.МК_ФильтрыФлаг.КнопкаОчистки = ЗначениеЗаполнено(МК_Флаг);
	
КонецПроцедуры

&НаКлиенте
Процедура МК_СброситьФильтры()

	МК_Исполнитель = Неопределено;
	МК_Автор = Неопределено;
	МК_ВидДействия = Неопределено;
	МК_Период.ДатаНачала = Дата(1,1,1);
	МК_Период.ДатаОкончания = Дата(1,1,1);
	МК_Состояние = Неопределено;
	МК_Флаг = Неопределено;
	
	МК_ОбновитьФильтры();
	Элементы.МК_ОчиститьФильтры.Доступность = Ложь;
		
	Элементы.МК_ЗадачиОтборНевыполненные.Пометка = Ложь;
	
	МК_КлиентСервер.ОформитьКнопкуФильтра(МК_ЭлементыСтиля,
		Элементы.МК_ЗадачиОтборНевыполненные, Ложь,
		Элементы.МК_ЗадачиОтборНевыполненные.Пометка);
	
КонецПроцедуры

&НаСервере
Процедура МК_ЗаполнитьРеквизитыБыстрогоПоискаИзСохранненых();

	Для Каждого СтрокаПоиска Из БыстрыйПоиск Цикл

		Если СтрокаПоиска.Параметр = "Автор" Тогда
			МК_Автор = СтрокаПоиска.Значение; 
		КонецЕсли;

		Если СтрокаПоиска.Параметр = "Состояние" Тогда
			МК_Состояние = СтрокаПоиска.Значение; 
				
			Если МК_Состояние = ПредопределенноеЗначение("Перечисление.ОтборыПоСтатусуЗадач.НеВыполненные") Тогда
				Элементы.МК_ЗадачиОтборНевыполненные.Пометка = Истина;
			Иначе 
				Элементы.МК_ЗадачиОтборНевыполненные.Пометка = Ложь;;
			КонецЕсли;

			МК_КлиентСервер.ОформитьКнопкуФильтра(МК_ЭлементыСтиля,
				Элементы.МК_ЗадачиОтборНевыполненные, Ложь,
				Элементы.МК_ЗадачиОтборНевыполненные.Пометка);
				
		КонецЕсли;
	
		Если СтрокаПоиска.Параметр = "ДатаС" Тогда
			МК_Период.ДатаНачала = СтрокаПоиска.Значение; 
		КонецЕсли;
	
		Если СтрокаПоиска.Параметр = "ДатаПо" Тогда
			МК_Период.ДатаОкончания = СтрокаПоиска.Значение; 
		КонецЕсли;
		
		Если СтрокаПоиска.Параметр = "Исполнитель" Тогда
			МК_Исполнитель = СтрокаПоиска.Значение; 
		КонецЕсли;
			
		Если СтрокаПоиска.Параметр = "ВидДействия" Тогда
			МК_ВидДействия = СтрокаПоиска.Значение; 
		КонецЕсли;
		
		Если СтрокаПоиска.Параметр = "Флаг" Тогда
			МК_Флаг = СтрокаПоиска.Значение; 
		КонецЕсли;

	КонецЦикла;
	
	МК_ОбновитьФильтры();

КонецПроцедуры

&НаКлиенте
Функция МК_ДеревоПриложенийВидимо()
	
	Если Не ЭтоМобильныйКлиент Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Элементы.СтраницыЗадачаОднаНесколькоНет.ТекущаяСтраница <> Элементы.СтраницаОднаЗадача Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Элементы.СтраницыПросмотра.ТекущаяСтраница <> Элементы.СтраницаОсновное Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Элементы.МК_ГруппаПриложения.Скрыта() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура МК_СгруппироватьПослеВыбора(ВыбранноеЗначение, Параметр) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранноеЗначение.Значение = 
		ПредопределенноеЗначение("Перечисление.ВариантыГруппировкиЗадач.ПоАвтору") Тогда
		
		СгруппироватьПоАвторуПродолжение();
		Элементы.СтраницыСписка.ТекущаяСтраница = Элементы.МК_СтраницаГруппировки;
		
	ИначеЕсли ВыбранноеЗначение.Значение = 
		ПредопределенноеЗначение("Перечисление.ВариантыГруппировкиЗадач.ПоВидуЗадачи") Тогда 
		
		СгруппироватьПоВидуЗадачиПродолжение();
		Элементы.СтраницыСписка.ТекущаяСтраница = Элементы.МК_СтраницаГруппировки;
		
	ИначеЕсли ВыбранноеЗначение.Значение = 
		ПредопределенноеЗначение("Перечисление.ВариантыГруппировкиЗадач.ПоИсполнителю") Тогда 
		
		СгруппироватьПоИсполнителюПродолжение();
		Элементы.СтраницыСписка.ТекущаяСтраница = Элементы.МК_СтраницаГруппировки;
		
	ИначеЕсли ВыбранноеЗначение.Значение = 
		ПредопределенноеЗначение("Перечисление.ВариантыГруппировкиЗадач.ПоПриложениюБезГрупп") Тогда 
		
		СгруппироватьПоПриложениюБезГруппПродолжение();
		Элементы.СтраницыСписка.ТекущаяСтраница = Элементы.МК_СтраницаГруппировки;
		
	ИначеЕсли ВыбранноеЗначение.Значение = 
		ПредопределенноеЗначение("Перечисление.ВариантыГруппировкиЗадач.ПоПриложениюПоГруппам") Тогда 
		
		СгруппироватьПоПриложениюПоГруппамПродолжение();
		Элементы.СтраницыСписка.ТекущаяСтраница = Элементы.МК_СтраницаГруппировки;
		
	ИначеЕсли ВыбранноеЗначение.Значение = 
		ПредопределенноеЗначение("Перечисление.ВариантыГруппировкиЗадач.ПоПроекту") Тогда 
		
		СгруппироватьПоПроектуПродолжение();
		Элементы.СтраницыСписка.ТекущаяСтраница = Элементы.МК_СтраницаГруппировки;
		
	ИначеЕсли ВыбранноеЗначение.Значение = 
		ПредопределенноеЗначение("Перечисление.ВариантыГруппировкиЗадач.ПоФлагу") Тогда 
		
		СгруппироватьПоФлагуПродолжение();
		Элементы.СтраницыСписка.ТекущаяСтраница = Элементы.МК_СтраницаГруппировки;
	
	Иначе
		
		БезГруппировкиПродолжение();
		
	КонецЕсли;
	
	МК_ОбновитьЗаголовокГруппировки(ЭтотОбъект);
		
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура МК_ОбновитьЗаголовокГруппировки(Форма)
	
	Если Форма.ТекущийВариантГруппировки = 
		ПредопределенноеЗначение("Перечисление.ВариантыГруппировкиЗадач.БезГруппировки") Тогда
			
		МК_КлиентСервер.ОформитьПроизвольныйЭлементПоСостоянию(Форма.МК_ЭлементыСтиля,
			Форма.Элементы.МК_Сгруппировать, Ложь);
	Иначе
		МК_КлиентСервер.ОформитьПроизвольныйЭлементПоСостоянию(Форма.МК_ЭлементыСтиля,
				Форма.Элементы.МК_Сгруппировать, Истина);
	КонецЕсли;
	
	Форма.Элементы.МК_Сгруппировать.Заголовок = Форма.ТекущийВариантГруппировки;
		
КонецПроцедуры

&НаКлиенте
Процедура МК_ОбработатьВыборБыстрыйПоискВидДействия(ВыбранноеЗначение)
	
	ПараметрыОтбора = Новый Структура("Параметр", "ВидДействия");
	НайденныеСтроки = БыстрыйПоиск.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Строка = НайденныеСтроки[0]; 
	Иначе
		Строка = БыстрыйПоиск.Добавить();
		Строка.Параметр = "ВидДействия"; 
	КонецЕсли;
	
	Строка.ПредставлениеПараметра = НСтр("ru = 'Вид действия:'");
	Строка.Тип = "СправочникСсылка.ВидыЗадач, СправочникСсылка.ВидыДействийЗадач";
	Строка.Значение = ВыбранноеЗначение;
	Строка.Сортировка = Строка.ПредставлениеПараметра;
	
	БыстрыйПоиск.Сортировать("Сортировка");
	
КонецПроцедуры

&НаКлиенте
Процедура МК_ОбработатьВыборБыстрыйПоискСостояние(ВыбранноеЗначение)
	
	ПараметрыОтбора = Новый Структура("Параметр", "Состояние");
	НайденныеСтроки = БыстрыйПоиск.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтроки.Количество() > 0 Тогда
		Строка = НайденныеСтроки[0]; 
	Иначе
		Строка = БыстрыйПоиск.Добавить();
		Строка.Параметр = "Состояние"; 
	КонецЕсли;
	
	Строка.ПредставлениеПараметра = НСтр("ru = 'Состояние:'");
	Строка.Тип = "ПеречислениеСсылка.ОтборыПоСтатусуЗадач, СправочникСсылка.СостоянияЗадач";
	Строка.Значение = ВыбранноеЗначение;
	Строка.Сортировка = Строка.ПредставлениеПараметра;
	
	БыстрыйПоиск.Сортировать("Сортировка");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_НагрузочноеТестирование

// Функции-обертки для программного вызова команд и обработчиков, как-будто они вызываются интерактивно.

// Встает на первую активную задачу текущего пользователей. Для программного выбора строки динамического списка
// в форме "Задачи мне".
// 
// Возвращаемое значение:
//  Булево - Удалось или нет
&НаКлиенте
Функция НТ_ВстатьНаПервуюЗадачу() Экспорт
	
	Если Не НТ_ВстатьНаПервуюЗадачуНаСервере() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОбработатьАктивизациюСтроки();
	ОтключитьОбработчикОжидания("ОбновитьОбластьПросмотра");
	ОбновитьОбластьПросмотраНемедленно();
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция НТ_ВстатьНаПервуюЗадачуНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	РеестрЗадачПоИсполнителям.РеестрЗадач,
		|	РеестрЗадачПоИсполнителям.Дата,
		|	РеестрЗадачПоИсполнителям.ДействиеЗадачи
		|ИЗ
		|	РегистрСведений.РеестрЗадачПоИсполнителям КАК РеестрЗадачПоИсполнителям
		|ГДЕ
		|	РеестрЗадачПоИсполнителям.ОжидаетВыполнения
		|	И РеестрЗадачПоИсполнителям.РеестрЗадач = &ТекущийРеестрЗадач");
	
	Запрос.УстановитьПараметр("ТекущийРеестрЗадач", ТекущийРеестрЗадач);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТаблицаРезультата = РезультатЗапроса.Выгрузить();
	СтрокаРезультата = ТаблицаРезультата[0];
	
	ЗначениеКлюча = Новый Структура;
	ЗначениеКлюча.Вставить("РеестрЗадач", СтрокаРезультата.РеестрЗадач);
	ЗначениеКлюча.Вставить("Дата", СтрокаРезультата.Дата);
	ЗначениеКлюча.Вставить("ДействиеЗадачи", СтрокаРезультата.ДействиеЗадачи);
	
	КлючЗаписи = РегистрыСведений.РеестрЗадачПоИсполнителям.СоздатьКлючЗаписи(ЗначениеКлюча);
	
	Элементы.СписокДействияЗадач.ВыделенныеСтроки.Очистить();
	Элементы.СписокДействияЗадач.ТекущаяСтрока = Неопределено;
	Элементы.СписокДействияЗадач.ВыделенныеСтроки.Добавить(КлючЗаписи);
	Элементы.СписокДействияЗадач.ТекущаяСтрока = КлючЗаписи;
	
	Возврат Истина;
	
КонецФункции

// Выполняет согласование в "Действие задачи" путем имитации нажатия на первый вариант
// 
// Возвращаемое значение:
//  Булево - Удалось или нет
&НаКлиенте
Функция НТ_ВыполнитьДействиеЗадачиВариант1() Экспорт
	
	ДействиеВыполнено = Ложь;
	Если Элементы.СписокДействияЗадач.ТекущаяСтрока = Неопределено Тогда
		Возврат ДействиеВыполнено;
	КонецЕсли;
	
	Для Каждого Элемент Из Элементы.ГруппаКомандыДляВыполнения.ПодчиненныеЭлементы Цикл
		
		Если Не Элемент.Видимость Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеКомандыВыполнения = Неопределено;
		
		Для Каждого ОчередныеДанныеКоманды Из ДанныеКомандВыполнения Цикл
			Если Элемент.Имя = ОчередныеДанныеКоманды.ИмяЭлемента Тогда
				ДанныеКомандыВыполнения = ОчередныеДанныеКоманды;
			КонецЕсли;
		КонецЦикла;
		
		Если ДанныеКомандыВыполнения = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяКоманды = ДанныеКомандыВыполнения.ИмяКоманды;
		Если Не СтрНачинаетсяС(ИмяКоманды, РаботаСЗадачамиКлиентСервер.ПрефиксИмениКомандыРезультата()) Тогда
			Продолжить;
		КонецЕсли;
		
		ИдентификаторРезультата = РаботаСЗадачамиКлиентСервер.ИдентификаторПоИмениКоманды(ИмяКоманды);
		РезультатДействияЗадачи =
			РаботаСЗадачамиВызовСервера.РезультатДействияЗадачиПоИдентификатору(ИдентификаторРезультата);
		ВыполнитьДействиеЗадачиНаКлиентеВФорме(РезультатДействияЗадачи);
		
		ДействиеВыполнено = Истина;
		Прервать;
		
	КонецЦикла;
	
	Возврат ДействиеВыполнено;
	
КонецФункции

// Нужен для вызова после программного заполнения комментария согласования, для корректной записи этого комментария
// 
// Возвращаемое значение:
//  Булево - Удалось или нет
&НаКлиенте
Функция НТ_РезультатДействияТекстомПриИзменении() Экспорт
	
	Если Элементы.СписокДействияЗадач.ТекущаяСтрока = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РезультатДействияТекстомПриИзменении(Неопределено);  //@skip-check invocation-form-event-handler
	Возврат Истина;
	
КонецФункции

// Открывает форму "Действия задачи" путем имитации двойного клика в списке "Задач мне"
// 
// Возвращаемое значение:
//  Булево - Удалось или нет
&НаКлиенте
Функция НТ_СписокДействияЗадачВыбор() Экспорт
	
	Если Элементы.СписокДействияЗадач.ТекущаяСтрока = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтандартнаяОбработка = Истина;
	СписокДействияЗадачВыбор(Элементы.СписокДействияЗадач, Неопределено, Неопределено, СтандартнаяОбработка); //@skip-check invocation-form-event-handler
	Возврат Истина;
	
КонецФункции

#КонецОбласти

&НаСервере
Процедура ВывестиPDFДокументНаСервере()
	
	СведенияОДокументеPDF = РаботаСPDFПовтИсп.НовыеСведенияОPDFДокументеНаФорме();
	СведенияОДокументеPDF.ИмяРодителяКоманды = "ГруппаОбзорФайлаКомандыВертикально";	
	
	РаботаСPDF.ВывестиPDFДокументНаФорму(ЭтотОбъект, СведенияОДокументеPDF);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_МасштабПлюс(Команда)
	
	Элементы["ДокументPdfПоле"].Масштаб = Элементы["ДокументPdfПоле"].Масштаб + 10;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_МасштабМинус(Команда)                                 
	
	Если Элементы["ДокументPdfПоле"].Масштаб <= 10 Тогда
		Возврат;
	КонецЕсли;	
	
	Элементы["ДокументPdfПоле"].Масштаб = Элементы["ДокументPdfПоле"].Масштаб - 10;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПоворотЛево(Команда)
	
	Элементы["ДокументPdfПоле"].Ориентация = Элементы["ДокументPdfПоле"].Ориентация - 90;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПоворотПраво(Команда)
	
	Элементы["ДокументPdfПоле"].Ориентация = Элементы["ДокументPdfПоле"].Ориентация + 90;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначениеГруппировкиДляПоказа(Знач ГруппировкаУИД, Знач ДополнительнаяГруппировкаУИД)
	
	ЗначениеГруппировкиДляПоказа = Неопределено;
	
	ГруппировкаПоУИД = Справочники.ГруппировкиЗадач.ПолучитьСсылку(ГруппировкаУИД);
	ДополнительнаяГруппировкаПоУИД = Справочники.ГруппировкиЗадач.ПолучитьСсылку(ДополнительнаяГруппировкаУИД);
	
	Если ЗначениеЗаполнено(ДополнительнаяГруппировкаПоУИД) Тогда
		ЗначениеГруппировкиДляПоказа =
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДополнительнаяГруппировкаПоУИД, "Проект");
	ИначеЕсли ЗначениеЗаполнено(ГруппировкаПоУИД) Тогда
		ЗначениеГруппировкиДляПоказа =
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГруппировкаПоУИД, "Проект");
	КонецЕсли;
	
	Если ТипЗнч(ЗначениеГруппировкиДляПоказа) <> Тип("СправочникСсылка.Проекты") Тогда
		ЗначениеГруппировкиДляПоказа = Неопределено;
	КонецЕсли;
	
	Возврат ЗначениеГруппировкиДляПоказа;
	
КонецФункции

&НаСервере
Функция ОтображатьПоАвторам()
	
	ОтображатьПоАвторам =
		ТекущийВариантГруппировки <> Перечисления.ВариантыГруппировкиЗадач.ПоИсполнителю
		И ДополнительныйВариантГруппировки <> Перечисления.ВариантыГруппировкиЗадач.ПоИсполнителю;
	
	Возврат ОтображатьПоАвторам;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьИзменениеВыделения()
	
	Элемент = Неопределено;
	Если Элементы.СтраницыСписка.ТекущаяСтраница = Элементы.СтраницаСписокДействияЗадач Тогда
		Элемент = Элементы.СписокДействияЗадач;
	ИначеЕсли Элементы.СтраницыСписка.ТекущаяСтраница = Элементы.СтраницаСписокЗадач Тогда
		Элемент = Элементы.СписокЗадач;
	ИначеЕсли Элементы.СтраницыСписка.ТекущаяСтраница = Элементы.СтраницаДеревоЗадач Тогда
		Элемент = Элементы.ДеревоЗадач;
	КонецЕсли;
	
	НовоеКоличестоВыделенныхСтрок = 0;
	Если Элемент <> Неопределено Тогда
		Для Каждого ВыделеннаяСтрока Из Элемент.ВыделенныеСтроки Цикл
			Если ТипЗнч(ВыделеннаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
				Продолжить;
			КонецЕсли;
			НовоеКоличестоВыделенныхСтрок = НовоеКоличестоВыделенныхСтрок + 1;
		КонецЦикла;
	КонецЕсли;
	
	Если НовоеКоличестоВыделенныхСтрок = КоличествоВыделенныхСтрок Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоВыделенныхСтрок = НовоеКоличестоВыделенныхСтрок;
	
	ПриложенияРазвернуты = Ложь;
	ОбновитьОбластьПросмотраОтложенно();
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатДействияТекстомКнопкаВыбораНажатиеПродолжение()
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"РезультатДействияТекстомПослеВыбораШаблонаТекста",
		ЭтотОбъект);
	
	РаботаСЗадачамиКлиент.ВыбратьРезультатДействияТекстом(
		ТекущаяЗадачаИлиДействие,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПревьюФайла()
	
	ПоказатьОбзорТекущегоФайла();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОбзорТекущегоФайла()

	ТекущиеДанные = Элементы.ДеревоПриложений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийФайл = ТекущиеДанные.Приложение;
	РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
	
	Если ТекущиеДанные.ТипСтроки <> ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Файл") Тогда
		УстановитьВидимостьКомандМасштаба("");
		Возврат;
	КонецЕсли;
	
	Если РедактируетТекущийПользователь Тогда
		 
		ОписаниеHTMLФайла = ОбзорФайловКлиентСервер.HTMLПредставлениеПриРедактировании();
		Элементы.ГруппаПредпросмотрУрезан.Видимость = Ложь;
		Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
		Элементы.ГруппаОбзорФайлаКомандыВертикально.Видимость = Ложь;
		Элементы.ГруппаОбзорФайлаОтступКоманд.Видимость = Истина;
		Элементы.ПереключениеСтраниц.Видимость = Ложь;
		
	Иначе 
		
		Если ЗначениеЗаполнено(ТекущийФайл) Тогда
			
			ДокументPDF = Неопределено;
			
			ПараметрыHTMLПредставление = ОбзорФайловКлиентСервер.СтруктураПараметровHTMLПредставлениеФайла();
			ПараметрыHTMLПредставление.МаксимальноеЧислоСтраницДляПредпросмотра = МаксимальноеЧислоСтраницДляПредпросмотра;
			ПараметрыHTMLПредставление.Расширение = ТекущиеДанные.Расширение;
			ПараметрыHTMLПредставление.Размер = ТекущиеДанные.ТекущаяВерсияРазмер;
			ПараметрыHTMLПредставление.УникальныйИдентификатор = УникальныйИдентификатор;
			
			ДанныеОбзора = ОбзорФайловКлиент.HTMLПредставлениеФайла(
				ТекущийФайл,
				ПараметрыHTMLПредставление,
				ДокументPDF);
			
			ОбзорФайловКлиент.ЗаполнитьРеквизитыОбзора(ДанныеОбзора, ОписаниеHTMLФайла);
			
			Элементы.ГруппаПредпросмотрУрезан.Видимость = ПараметрыHTMLПредставление.ПредпросмотрУрезан;
			МасштабироватьPDFИКартинки = ПараметрыHTMLПредставление.МасштабироватьPDFИКартинки;
			
			ТекущиеДанные.ПредпросмотрЕстьВБазе = Истина;
			УстановитьВидимостьКомандМасштаба(ТекущиеДанные.Расширение);
			
			НомерПорции = 1;
			ВсегоПорцийПредпросмотра = ПараметрыHTMLПредставление.ВсегоПорцийПредпросмотра;
			ОбновитьКнопкиДинамическогоСпискаКлиент();
			
			Если ДокументPDF = Неопределено Или ЭтоМобильныйКлиент Тогда
				Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
				Элементы.ГруппаОбзорФайлаКомандыВертикально.Видимость = Ложь;
				Элементы.ГруппаОбзорФайлаОтступКоманд.Видимость = Истина;
				
			Иначе
				Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаPdf;
				//@skip-check bsl-legacy-check-string-literal
				ЭтотОбъект["ДокументPdfРеквизит"] = ДокументPDF;
				Элементы["ДокументPdfПоле"].НомерТекущейСтраницы = 1;
				
				Элементы.ГруппаОбзорФайлаКомандыВертикально.Видимость = Истина;
				Элементы.ГруппаОбзорФайлаОтступКоманд.Видимость = Ложь;
				
			КонецЕсли;
			
		Иначе
			ОписаниеHTMLФайла = РаботаС_HTMLКлиентСервер.ПустойHTML();
			Элементы.ГруппаПредпросмотрУрезан.Видимость = Ложь;
			Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
			Элементы.ГруппаОбзорФайлаКомандыВертикально.Видимость = Ложь;
			Элементы.ГруппаОбзорФайлаОтступКоманд.Видимость = Истина;
			Элементы.ПереключениеСтраниц.Видимость = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Асинх Процедура ПослеПолучитьФайлВерсииВРабочийКаталог(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат.ФайлПолучен Тогда
		
		ПолноеИмяПеретаскиваемогоФайла = Результат.ПолноеИмяФайла;
		
		Файл = Новый Файл(ПолноеИмяПеретаскиваемогоФайла);
		Если Ждать Файл.СуществуетАсинх() Тогда
			Файл.УстановитьТолькоЧтениеАсинх(Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПревьюДокументаЭДО()
	
	ТекущиеДанные = Элементы.ДеревоПриложений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ТипСтроки <> ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.ДокументЭДО") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеВизуализации = ОбменЭДОДокументооборотВызовСервера.ДанныеВизуализации(ТекущиеДанные.ДокументЭДО);
	СостояниеЭДО = ДанныеВизуализации.Состояние;
	
	Если ДанныеВизуализации.ТабличныйДокументСформирован Тогда
		
		Если ТипЗнч(ДанныеВизуализации.ТабличныйДокумент) = Тип("ТабличныйДокумент") Тогда
			
			ТабличныйДокументЭДО = ДанныеВизуализации.ТабличныйДокумент;  
			Элементы.ГруппаЭДОСтраницы.ТекущаяСтраница = Элементы.ГруппаЭДОТабличный; 
			Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаЭДО; // только если формализованный
			
		ИначеЕсли ТипЗнч(ДанныеВизуализации.ТабличныйДокумент) = Тип("Строка") Тогда // html 
			
			Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
			ОписаниеHTMLФайла = ДанныеВизуализации.ТабличныйДокумент;  
			
		КонецЕсли;
		
	Иначе	         
		
		ТабличныйДокументЭДО = Новый ТабличныйДокумент;
		
		Если ДанныеВизуализации.Свойство("ДвоичныеДанные") Тогда    
			// тут предпросмотр                      
			
			Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
			
			ДвоичныеДанныеФайла  = ДанныеВизуализации.ДвоичныеДанные;
			
			ПараметрыПолученияПредставления = ОбзорФайловКлиентСервер.ПараметрыПолученияПредставления();
					
			СистемнаяИнформация = Новый СистемнаяИнформация();
			ИдентификаторКлиента = СистемнаяИнформация.ИдентификаторКлиента;
			
			ПараметрыПолученияПредставления.ТребуетсяСоздатьВизуализациюЭП = Ложь;
			ПараметрыПолученияПредставления.МаксимальноеЧислоСтраницДляПредпросмотра = 10;
			ПараметрыПолученияПредставления.ПредпросмотрУрезан = Ложь;
			ПараметрыПолученияПредставления.УникальныйИдентификатор = УникальныйИдентификатор;
			ПараметрыПолученияПредставления.Расширение = ДанныеВизуализации.ПрисоединенныйФайлРасширение;
			ПараметрыПолученияПредставления.ИдентификаторКлиента = ИдентификаторКлиента;
			ПараметрыПолученияПредставления.ПоддерживаемыеТипы = ОбзорФайловКлиентСервер.ПоддерживаемыеТипыПредпросмотра();
			ПараметрыПолученияПредставления.МасштабироватьPDFИКартинки = МасштабироватьPDFИКартинки;
			ПараметрыПолученияПредставления.ЭтоСлужебноеСообщение = Ложь;     
			ПараметрыПолученияПредставления.ИспользоватьLibreOffice = Ложь;
			
			ПараметрыПолученияПредставления.Вставить("ДвоичныеДанные", ДвоичныеДанныеФайла);
			
			РеквизитыФайла = Новый Структура;
			РеквизитыФайла.Вставить("ТекущаяВерсияРасширение", ДанныеВизуализации.ПрисоединенныйФайлРасширение);
			РеквизитыФайла.Вставить("Зашифрован", Ложь);
			РеквизитыФайла.Вставить("ТекущаяВерсияРазмер", ДвоичныеДанныеФайла.Размер());
			РеквизитыФайла.Вставить("Наименование", ДанныеВизуализации.ПрисоединенныйФайлПредставление);
			
			ДанныеФайла = Неопределено;   
			ПредпросмотрУрезан = Ложь;     
			ДокументPDF = Неопределено;
			
			ДанныеВизуализации = ОбзорФайловКлиент.СформироватьHTMLПредставление(
				ПараметрыПолученияПредставления,
				РеквизитыФайла,
				ДанныеФайла,
				ПредпросмотрУрезан,
				ДокументPDF);
			Если ТипЗнч(ДанныеВизуализации) = Тип("Строка") Тогда
				ОписаниеHTMLФайла = ДанныеВизуализации;
			Иначе
				ОписаниеHTMLФайла = ОбзорОбъектовКлиентСервер.ПустойHTML();
			КонецЕсли;
			
			Если ДокументPDF = Неопределено Тогда
				Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
			Иначе
				Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаPdf;
				//@skip-check bsl-legacy-check-string-literal
				ЭтотОбъект["ДокументPdfРеквизит"] = ДокументPDF;
				Элементы.ДокументPdfПоле.НомерТекущейСтраницы = 1;
			КонецЕсли;
				
		Иначе	
			
			ОписаниеHTMLФайла = ОбзорФайловКлиентСервер.HTMLПредставлениеНеПоддерживаемыйДокументЭДО();
			Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;

		КонецЕсли;
		
	КонецЕсли;
	
	ТекущийДокументЭДО = ТекущиеДанные.ДокументЭДО;
	
	Если ЭтоМобильныйКлиент Тогда
		МК_КлиентСервер.АдаптироватьHtmlПодЭкранМобильногоПриНеобходимости(ОписаниеHTMLФайла);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БезГруппировкиПродолжение()
	
	ТекущийВариантГруппировки = ПредопределенноеЗначение("Перечисление.ВариантыГруппировкиЗадач.БезГруппировки");
	
	СтарыеГруппировки = ТекущиеГруппировки();
	ПриИзмененииВариантаГруппировки();
	ВосстановитьСтрокуДереваГруппировок(СтарыеГруппировки);
	
КонецПроцедуры

//@skip-check export-method-in-command-form-module
//@skip-check doc-comment-parameter-section
&НаСервере
Процедура ДобавитьВОтчетИОбновитьФорму(ПараметрыОтчета, ПараметрыОповещения) Экспорт
	
	ПереключитьХронометражНеМеняяПодсказку = Новый Структура("Подсказка");
	УчетВремени.ДобавитьВОтчетИОбновитьФорму(
		ПараметрыОтчета, 
		ПараметрыОповещения,
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ПереключитьХронометражНеМеняяПодсказку,
		Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьХронометражПродолжение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат <> Неопределено Тогда
		
		ДобавитьВОтчетИОбновитьФорму(
			Результат,
			ДополнительныеПараметры.ПараметрыОповещения);
		
		УчетВремениКлиент.ПоказатьОповещение(
			ДополнительныеПараметры.ПараметрыОповещения,
			ВключенХронометраж,
			ДополнительныеПараметры.Объект);
		
	Иначе
		
		ОтключитьХронометражСервер();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоАвторуПродолжение()
	
	ТекущийВариантГруппировки = ПредопределенноеЗначение("Перечисление.ВариантыГруппировкиЗадач.ПоАвтору");
	ДополнительныйВариантГруппировки = ПредопределенноеЗначение("Перечисление.ВариантыГруппировкиЗадач.ПустаяСсылка");
	
	СтарыеГруппировки = ТекущиеГруппировки();
	ПриИзмененииВариантаГруппировки();
	ВосстановитьСтрокуДереваГруппировок(СтарыеГруппировки);
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоВидуЗадачиПродолжение()
	
	ТекущийВариантГруппировки = ПредопределенноеЗначение("Перечисление.ВариантыГруппировкиЗадач.ПоВидуЗадачи");
	ДополнительныйВариантГруппировки = ПредопределенноеЗначение("Перечисление.ВариантыГруппировкиЗадач.ПустаяСсылка");
	
	СтарыеГруппировки = ТекущиеГруппировки();
	ПриИзмененииВариантаГруппировки();
	ВосстановитьСтрокуДереваГруппировок(СтарыеГруппировки);
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоИсполнителюПродолжение()
	
	ТекущийВариантГруппировки = ПредопределенноеЗначение("Перечисление.ВариантыГруппировкиЗадач.ПоИсполнителю");
	ДополнительныйВариантГруппировки = ПредопределенноеЗначение("Перечисление.ВариантыГруппировкиЗадач.ПустаяСсылка");
	
	СтарыеГруппировки = ТекущиеГруппировки();
	ПриИзмененииВариантаГруппировки();
	ВосстановитьСтрокуДереваГруппировок(СтарыеГруппировки);
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоПриложениюБезГруппПродолжение()
	
	ТекущийВариантГруппировки = ПредопределенноеЗначение("Перечисление.ВариантыГруппировкиЗадач.ПоПриложениюБезГрупп");
	ДополнительныйВариантГруппировки = ПредопределенноеЗначение("Перечисление.ВариантыГруппировкиЗадач.ПустаяСсылка");
	
	СтарыеГруппировки = ТекущиеГруппировки();
	ПриИзмененииВариантаГруппировки();
	ВосстановитьСтрокуДереваГруппировок(СтарыеГруппировки);
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоПриложениюПоГруппамПродолжение()
	
	ТекущийВариантГруппировки = ПредопределенноеЗначение("Перечисление.ВариантыГруппировкиЗадач.ПоПриложениюПоГруппам");
	ДополнительныйВариантГруппировки = ПредопределенноеЗначение("Перечисление.ВариантыГруппировкиЗадач.ПустаяСсылка");
	
	СтарыеГруппировки = ТекущиеГруппировки();
	ПриИзмененииВариантаГруппировки();
	ВосстановитьСтрокуДереваГруппировок(СтарыеГруппировки);
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоПроектуПродолжение()
	
	ТекущийВариантГруппировки = ПредопределенноеЗначение("Перечисление.ВариантыГруппировкиЗадач.ПоПроекту");
	ДополнительныйВариантГруппировки = ПредопределенноеЗначение("Перечисление.ВариантыГруппировкиЗадач.ПустаяСсылка");
	
	СтарыеГруппировки = ТекущиеГруппировки();
	ПриИзмененииВариантаГруппировки();
	ВосстановитьСтрокуДереваГруппировок(СтарыеГруппировки);
	
КонецПроцедуры

&НаКлиенте
Процедура СгруппироватьПоФлагуПродолжение()
	
	ТекущийВариантГруппировки = ПредопределенноеЗначение("Перечисление.ВариантыГруппировкиЗадач.ПоФлагу");
	ДополнительныйВариантГруппировки = ПредопределенноеЗначение("Перечисление.ВариантыГруппировкиЗадач.ПустаяСсылка");
	
	СтарыеГруппировки = ТекущиеГруппировки();
	ПриИзмененииВариантаГруппировки();
	ВосстановитьСтрокуДереваГруппировок(СтарыеГруппировки);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьКомандМасштаба(Расширение)
	
	Если ОбзорФайловКлиентСервер.ЭтоКартинка(Расширение) Или ОбзорФайловКлиентСервер.ЭтоPDF(Расширение) Тогда
		
		Если МасштабироватьPDFИКартинки Тогда
			
			Элементы.НастоящийРазмер.Видимость = Истина;
			Элементы.ПоШиринеОкна.Видимость = Ложь;
			
		Иначе
				
			Элементы.НастоящийРазмер.Видимость = Ложь;
			Элементы.ПоШиринеОкна.Видимость = Истина;
			
		КонецЕсли;
	
	Иначе
			
		Элементы.НастоящийРазмер.Видимость = Ложь;
		Элементы.ПоШиринеОкна.Видимость = Ложь;
		
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ОбработатьЗагруженныеНастройки(Настройки)
	
	Если Не (ТипЗнч(Настройки) = Тип("Соответствие")
		И Настройки["ПоказыватьДеревоГруппировок"] <> Неопределено) Тогда
		
		УстановитьПоказДереваГруппировокПоУмолчанию();
	КонецЕсли;
	
	Если Не ГруппировкиДоступны Тогда
		ТекущийВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПустаяСсылка();
		ДополнительныйВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПустаяСсылка();
	ИначеЕсли Не ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам")
		И ТекущийВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоПроекту Тогда
		ТекущийВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПустаяСсылка();
		ДополнительныйВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПустаяСсылка();
	ИначеЕсли Не ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам")
		И ДополнительныйВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПоПроекту Тогда
		ДополнительныйВариантГруппировки = Перечисления.ВариантыГруппировкиЗадач.ПустаяСсылка();
	КонецЕсли;
	
	ПриИзмененииВариантаГруппировки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьАктивизациюСтроки()
	
	НоваяСтрокаСписка = Неопределено;
	Если Элементы.СтраницыСписка.ТекущаяСтраница = Элементы.СтраницаСписокДействияЗадач Тогда
		
		Если Элементы.СписокДействияЗадач.ТекущиеДанные <> Неопределено Тогда
			
			// В момент обращения к текущим данным может поменяться текущая строка при выполнении задачи,
			// поэтому сначала проверим текущие данные, а потом уже что не стоим на группировке.
			Если ТипЗнч(Элементы.СписокДействияЗадач.ТекущаяСтрока) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
				НоваяСтрокаСписка = Элементы.СписокДействияЗадач.ТекущиеДанные.ДействиеЗадачи;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Элементы.СтраницыСписка.ТекущаяСтраница = Элементы.СтраницаСписокЗадач Тогда
		
		Если Элементы.СписокЗадач.ТекущиеДанные <> Неопределено Тогда
			
			// В момент обращения к текущим данным может поменяться текущая строка,
			// поэтому сначала проверим текущие данные, а потом уже что не стоим на группировке.
			Если ТипЗнч(Элементы.СписокЗадач.ТекущаяСтрока) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
				НоваяСтрокаСписка = Элементы.СписокЗадач.ТекущиеДанные.Задача;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Элементы.СтраницыСписка.ТекущаяСтраница = Элементы.СтраницаДеревоЗадач Тогда
		
		Если Элементы.ДеревоЗадач.ТекущиеДанные <> Неопределено Тогда
			
			Если ЗначениеЗаполнено(Элементы.ДеревоЗадач.ТекущиеДанные.ДействиеЗадачи) Тогда
				НоваяСтрокаСписка = Элементы.ДеревоЗадач.ТекущиеДанные.ДействиеЗадачи;
			Иначе
				НоваяСтрокаСписка = Элементы.ДеревоЗадач.ТекущиеДанные.Задача;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НоваяСтрокаСписка = ТекущаяСтрокаСписка Тогда
		Возврат;
	КонецЕсли;
	
	// РаспознаваниеРечи
	РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
	РаботаСРечьюЖурналированиеКлиент.ОчиститьЖурнал(УникальныйИдентификатор);
	// Конец РаспознаваниеРечи
	
	ПриложенияРазвернуты = Ложь;
	ТекущаяСтрокаСписка = НоваяСтрокаСписка;
	
	ОбновитьОбластьПросмотраОтложенно();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьРезультатДействияОтложенно(Интервал, РазрешитьВыборИсполнителя)
	
	НужноСохранитьРезультатДействия = Истина;
	ДействиеДляСохранения = ТекущаяЗадачаИлиДействие;
	РезультатДляСохранения = РезультатДействияТекстом;
	ВерсияДанныхДляСохранения = ВерсияДанныхТекущегоДействияЗадачи;
	РазрешитьВыборИсполнителяДляСохранения = РазрешитьВыборИсполнителя;
	ПодключитьОбработчикОжидания("СохранитьРезультатДействия", Интервал, Истина);
	
КонецПроцедуры

&НаКлиенте
Функция СохранитьРезультатДействия()
	
	ОтключитьОбработчикОжидания("СохранитьРезультатДействия");
	
	// В случае запуска обработчика ожидания, когда уже сохранили, сохранять не нужно повторно.
	Если Не НужноСохранитьРезультатДействия Тогда
		Возврат Истина;
	КонецЕсли;
	
	НужноСохранитьРезультатДействия = Ложь;
	
	РезультатСохранения = РаботаСЗадачамиКлиент.СохранитьРезультатДействия(
		ДействиеДляСохранения,
		РезультатДляСохранения,
		ВерсияДанныхДляСохранения,
		Истина,
		Ложь,
		ЭтотОбъект);
	
	Если ДействиеДляСохранения = ТекущаяЗадачаИлиДействие Тогда
		ВерсияДанныхТекущегоДействияЗадачи = РезультатСохранения.НоваяВерсияДанных;
	КонецЕсли;
	
	Если РазрешитьВыборИсполнителяДляСохранения И РезультатСохранения.НужноВыбратьФактическогоИсполнителя Тогда
		ДействиеДляОтложенногоВзятияВРаботу = ТекущаяЗадачаИлиДействие;
		ПодключитьОбработчикОжидания("ВзятьВРаботуСВыборомИсполнителя", 0.1, Истина);
	КонецЕсли;
	
	ДействиеДляСохранения = ПредопределенноеЗначение("Документ.ДействиеЗадачи.ПустаяСсылка");
	РезультатДляСохранения = "";
	ВерсияДанныхДляСохранения = "";
	РазрешитьВыборИсполнителяДляСохранения = Ложь;
	
	Возврат РезультатСохранения.Успешно;
	
КонецФункции

&НаСервере
Процедура ОбновитьКомандыВыполнения()
	
	Если ЭтоМобильныйКлиент И Не ЭтоМобильноеУстройствоСБольшимЭкраном Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыСеанса.ЭтоМобильныйКлиент Тогда
		РодительКомандВыполнения = Элементы.МК_ПанельКомандВыполнения;
	Иначе
		РодительКомандВыполнения = Элементы.ГруппаКомандыДляВыполнения;
	КонецЕсли;
	
	РодительКомандГрупповогоВыполнения = Элементы.ГруппаКнопокГрупповогоВыделения;
	
	ВставитьПеред = Элементы.ВыбратьШаблонДляВыполненияЗадачи;
	
	РаботаСЗадачами.ОбновитьКомандыВыполнения(
		ЭтотОбъект,
		ДанныеКомандВыполнения,
		РодительКомандВыполнения,
		ВставитьПеред,
		РодительКомандГрупповогоВыполнения);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеГруппаНоваяИлиВРаботе()
	
	ПредставлениеГруппаНоваяИлиВРаботе = НСтр("ru = 'Новая или в работе'");
	
	Возврат ПредставлениеГруппаНоваяИлиВРаботе;
	
КонецФункции


&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеГруппаВРаботе()
	
	ПредставлениеГруппаВРаботе = НСтр("ru = 'Новая или в работе - В работе'");
	
	Возврат ПредставлениеГруппаВРаботе;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеОтбораДействиеЗадачи()
	
	ПредставлениеОтбораДействиеЗадачи = НСтр("ru = 'Новая или в работе - В работе - Действие задачи'");
	
	Возврат ПредставлениеОтбораДействиеЗадачи;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеОтбораВРаботе()
	
	ПредставлениеОтбораВРаботе = НСтр("ru = 'Новая или в работе - В работе - В работе'");
	
	Возврат ПредставлениеОтбораВРаботе;
	
КонецФункции

&НаКлиенте
Процедура ПредупредитьОЗаполненииДополнительныхРеквизитов()
	
	СтрокаДополнительныеРеквизиты = РаботаСЗадачамиКлиентСервер.НайтиСтрокуДереваПриложений(
		ДеревоПриложений,
		ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.ДополнительныеРеквизиты"));
	Если СтрокаДополнительныеРеквизиты <> Неопределено Тогда
		Элементы.ДеревоПриложений.ТекущаяСтрока = СтрокаДополнительныеРеквизиты.ПолучитьИдентификатор();
		ТекущаяСтрокаДереваПриложений = Элементы.ДеревоПриложений.ТекущаяСтрока;
	КонецЕсли;
	
	// Разделены на различные вызовы, для корректного отображения подсказки, какое поле не заполнено.
	ОбновитьДополнительныеРеквизиты();
	ПредупредитьОЗаполненииДополнительныхРеквизитовНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПредупредитьОЗаполненииДополнительныхРеквизитовНаСервере()
	
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(
		ЭтотОбъект,
		Ложь,
		Новый Массив,
		ТекущийИсточникДействияДанные);
	
КонецПроцедуры

&НаКлиенте
Функция ЕстьПриложение(Приложение)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Приложение", Приложение);
	НайденнаяСтрока = ОбщегоНазначенияДокументооборотКлиентСервер.НайтиСтрокуДерева(
		ДеревоПриложений,
		СтруктураОтбора);
	
	ОбъектЕстьВДеревеПриложений = НайденнаяСтрока <> Неопределено;
	
	Возврат ОбъектЕстьВДеревеПриложений;
	
КонецФункции

#Область Предпросмотр

&НаСервере
Процедура ОбновитьКнопкиДинамическогоСписка()
	
	ОбзорФайловКлиентСервер.ОбновитьКнопкиДинамическогоСписка(
		ЭтотОбъект,
		НомерПорции,
		ВсегоПорцийПредпросмотра,
		Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКнопкиДинамическогоСпискаКлиент()
	
	ОбзорФайловКлиентСервер.ОбновитьКнопкиДинамическогоСписка(
		ЭтотОбъект,
		НомерПорции,
		ВсегоПорцийПредпросмотра,
		Истина);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьКнопкиПорционногоПредпросмотра()
	
	ИмяРодителяКоманды = "ГруппаСтраницыКнопкиПеремотки";
	ОбзорФайловСервер.СоздатьКнопкиПорционногоПредпросмотра(ЭтотОбъект, ИмяРодителяКоманды, Истина);
	
КонецПроцедуры	

&НаКлиенте
Процедура СтраницаВыборЗавершение(НоваяСтраница, ДополнительныеПараметры) Экспорт
	
	ЧастьВыбор(НоваяСтраница);
	
КонецПроцедуры

&НаКлиенте
Процедура ЧастьВыбор(НоваяСтраница)
	
	Если НоваяСтраница = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НомерПорции = НоваяСтраница;
	
	ТекущиеДанные = Элементы.ДеревоПриложений.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено 
		Или ТекущиеДанные.ТипСтроки <> ПредопределенноеЗначение("Перечисление.ТипыСтрокДереваПриложений.Файл") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийФайл = ТекущиеДанные.Приложение;
	
	ДокументPDF = Неопределено;
	
	ПараметрыHTMLПредставление = ОбзорФайловКлиентСервер.СтруктураПараметровHTMLПредставлениеФайла();    
	ПараметрыHTMLПредставление.МаксимальноеЧислоСтраницДляПредпросмотра = МаксимальноеЧислоСтраницДляПредпросмотра;
	ПараметрыHTMLПредставление.Расширение = ТекущиеДанные.Расширение;
	ПараметрыHTMLПредставление.Размер = ТекущиеДанные.ТекущаяВерсияРазмер;
	ПараметрыHTMLПредставление.УникальныйИдентификатор = УникальныйИдентификатор;
	
	ПараметрыHTMLПредставление.НомерПорции = НомерПорции - 1; // номера для пользователя - с 1, в СУБД - с 0
	
	ДанныеОбзора = ОбзорФайловКлиент.HTMLПредставлениеФайла(
		ТекущийФайл,
		ПараметрыHTMLПредставление,
		ДокументPDF);
	
	ОбзорФайловКлиент.ЗаполнитьРеквизитыОбзора(ДанныеОбзора, ОписаниеHTMLФайла);
	
	Элементы.ГруппаПредпросмотрУрезан.Видимость = ПараметрыHTMLПредставление.ПредпросмотрУрезан;
	МасштабироватьPDFИКартинки = ПараметрыHTMLПредставление.МасштабироватьPDFИКартинки;
	УстановитьВидимостьКомандМасштаба(ТекущиеДанные.Расширение);
	ТекущиеДанные.ПредпросмотрЕстьВБазе = Истина; 
	
	ВсегоПорцийПредпросмотра = ПараметрыHTMLПредставление.ВсегоПорцийПредпросмотра;
	
	Если ДокументPDF = Неопределено Тогда
		Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаHtml;
	Иначе
		Элементы.ГруппаПредпросмотрСтраницы.ТекущаяСтраница = Элементы.ГруппаPdf;
		//@skip-check bsl-legacy-check-string-literal
		ЭтотОбъект["ДокументPdfРеквизит"] = ДокументPDF;
		Элементы.ДокументPdfПоле.НомерТекущейСтраницы = 1;
	КонецЕсли;     
	
	ОбновитьКнопкиДинамическогоСпискаКлиент();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
