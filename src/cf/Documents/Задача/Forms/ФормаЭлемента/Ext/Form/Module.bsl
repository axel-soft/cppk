#Область ОписаниеПеременных

&НаКлиенте
Перем РежимДобавленияИсполнителя;

&НаКлиенте
Перем ПолноеИмяПеретаскиваемогоФайла;

&НаКлиенте
Перем МобильныйСканерЗанят;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтоМобильныйКлиент = ПараметрыСеанса.ЭтоМобильныйКлиент;
	
	Если ЭтоМобильныйКлиент Тогда
		МК_ЭлементыСтиля = МК_ПовтИсп.ЭлементыСтиля();
	КонецЕсли;
	
	Исполнитель = Справочники.Сотрудники.ПустаяСсылка();
	Проверяющий = Справочники.Сотрудники.ПустаяСсылка();
	
	НастроитьФормуПоВидуЗадачи();
	
	ПротоколированиеРаботыСотрудников.ЗаписатьОткрытие(Объект.Ссылка);
	
	ЭтоНоваяЗадача = Не ЗначениеЗаполнено(Объект.Ссылка);
	Если ЭтоНоваяЗадача Тогда
		
		Если ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.ВходящееПисьмо")
			Или ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.ИсходящееПисьмо")
			Или ТипЗнч(Параметры.Основание) = Тип("СправочникСсылка.ТемыОбсуждений")
			Или ТипЗнч(Параметры.Основание) = Тип("СправочникСсылка.СообщенияОбсуждений") Тогда
			
			ОписаниеФорматированное = ИнтеграцияЗадач.ОписаниеФорматированное(Параметры.Основание);
			
		ИначеЕсли ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.Задача")
			Или ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.ДействиеЗадачи") Тогда
			
			ОснованиеЗадача = Неопределено;
			Если ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.ДействиеЗадачи") Тогда
				
				РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
					Параметры.Основание,
					"Задача, СостояниеУчастникаЗадачи");
				
				ОснованиеЗадача = РеквизитыОснования.Задача;
				
				ВидСостоянияУчастниковЗадач = 
					РаботаСЗадачамиПовтИсп.ВидСостоянияУчастниковЗадач(РеквизитыОснования.СостояниеУчастникаЗадачи);
				Если Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоНовоеДействие(ВидСостоянияУчастниковЗадач) Тогда
					
					РезультатВзятияВРаботу = РаботаСЗадачами.ВзятьВРаботу(
						Параметры.Основание,
						Сотрудники.ОсновнойСотрудник());
					
					Если РезультатВзятияВРаботу.ВзятиеВРаботуОбработано Тогда
						ОповеститьОбИзмененииПриСозданииПодзадачи = Истина;
					ИначеЕсли РезультатВзятияВРаботу.НужноВыбратьФактическогоИсполнителя Тогда
						ВзятьВРаботуПриСозданииПодзадачи = Истина;
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.Задача") Тогда
				
				ОснованиеЗадача = Параметры.Основание;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОснованиеЗадача) Тогда
				ОписаниеФорматированное = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					ОснованиеЗадача, "ОписаниеФорматированное").Получить();
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Параметры.Основание) = Тип("Структура")
			И Параметры.Основание.Свойство("Основание")
			И ТипЗнч(Параметры.Основание.Основание) = Тип("ДокументСсылка.Задача") Тогда
			
			ОписаниеФорматированное = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Параметры.Основание.Основание, "ОписаниеФорматированное").Получить();
			
		ИначеЕсли ТипЗнч(Параметры.ЗначенияЗаполнения) = Тип("Структура")
			И Параметры.ЗначенияЗаполнения.Свойство("ШаблонЗадачи") Тогда
			
			ЗаполнитьПоШаблонуНаСервере(Параметры.ЗначенияЗаполнения.ШаблонЗадачи);
			
		КонецЕсли;
		
		Если Параметры.Свойство("МассивИсполнителей") Тогда
			Для Каждого ИсполнительСтр Из Параметры.МассивИсполнителей Цикл 
				НовСтр = Объект.Участники.Добавить();
				НовСтр.Участник = ИсполнительСтр;
				НовСтр.ВидУчастника = ВидУчастникаИсполнитель;
			КонецЦикла;	
		КонецЕсли;	

		Если Параметры.Свойство("Заголовок") Тогда
			Объект.Заголовок = Параметры.Заголовок;
		КонецЕсли;	
		
		Если Не ЗначениеЗаполнено(Объект.Заголовок) Тогда
			
			ДанныеВидаЗадачи = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(Объект.ВидЗадачи);
			Объект.Заголовок = ЗаголовокПоШаблону(ДанныеВидаЗадачи.ШаблонЗаголовка);
			
		КонецЕсли;
		
		Обновить();
		
	КонецЕсли;	
		
	ОбновитьРежимТаблицы();
	
	РаботаСЗадачами.УстановитьУсловноеОформлениеПодзадач(УсловноеОформление);
	
	// Учет трудозатрат
	ПереключитьХронометражНеМеняяПодсказку = Новый Структура("Подсказка");
	УчетВремени.ПроинициализироватьПараметрыУчетаВремени(
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ОпцияИспользоватьУчетВремени,
		Объект.Ссылка,
		ВидыРабот,
		СпособУказанияВремени,
		ПереключитьХронометражНеМеняяПодсказку,
		Элементы.ПереключитьХронометраж,
		Элементы.УказатьТрудозатраты);
	
	Элементы.УчастникиУчастник.СписокВыбора.Добавить(Сотрудники.ОсновнойСотрудник());
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Элементы.Автор.АвтоОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	Справочники.ПравилаКоммуникаций.НастроитьПоляПредмета(
		ЭтотОбъект, 
		"УчастникиУчастник, Исполнитель, Проверяющий");
	
	ОбновитьПриоритетПредставление(Объект.Приоритет, ЭтотОбъект, ПриоритетПредставление);
	
	// МобильныйКлиент
	МК_НастроитьЭлементыФормы();
	
	ПоддерживаетсяМобильныйСканер =
		РегистрыСведений.КэшМобильныхСканов.ПоддерживаетсяМобильныйСканер();
	// КонецМобильныйКлиент
	
	// РаспознаваниеРечи
	РаспознаваниеРечи_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	// Конец РаспознаваниеРечи
	
	ИспользоватьДатуИВремяВСрокахЗадач =
		ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	Элементы.ЗначениеНачалоПлан.Формат = РаботаСЗадачами.ФорматСрокаПолный();
	Элементы.ЗначениеНачалоПлан.ФорматРедактирования = РаботаСЗадачами.ФорматСрокаПолный();
	Элементы.ЗначениеНачалоФакт.Формат = РаботаСЗадачами.ФорматСрокаПолный();
	Элементы.ЗначениеНачалоФакт.ФорматРедактирования = РаботаСЗадачами.ФорматСрокаПолный();
	Элементы.ЗначениеСрокПлан.Формат = РаботаСЗадачами.ФорматСрокаПолный();
	Элементы.ЗначениеСрокПлан.ФорматРедактирования = РаботаСЗадачами.ФорматСрокаПолный();
	Элементы.ЗначениеСрокФакт.Формат = РаботаСЗадачами.ФорматСрокаПолный();
	Элементы.ЗначениеСрокФакт.ФорматРедактирования = РаботаСЗадачами.ФорматСрокаПолный();
	
	Элементы.ГруппаПланФактЧелЧасов.Видимость =
		ПолучитьФункциональнуюОпцию("ВестиУчетФактическихТрудозатрат")
		И ПолучитьФункциональнуюОпцию("ИспользоватьЕжедневныеОтчеты");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Не Объект.ПометкаУдаления Тогда
		
		Если Объект.Участники.Количество() = 0
			Или (Объект.Участники.Количество() = 1 И Не ЗначениеЗаполнено(Объект.Участники[0].Участник)) Тогда
			ПодключитьОбработчикОжидания("УстановитьТекущийЭлементУчастник", 0.1, Истина);
		Иначе
			ПодключитьОбработчикОжидания("УстановитьТекущийЭлементЗаголовок", 0.1, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОповеститьОбИзмененииПриСозданииПодзадачи Тогда
		ОповеститьОбИзменении(Объект.ВышестоящееДействие);
		Оповестить("Запись_ДействиеЗадачи",, Объект.ВышестоящееДействие);
	КонецЕсли;
	
	Если ВзятьВРаботуПриСозданииПодзадачи Тогда
		РаботаСЗадачамиКлиент.ВзятьВРаботуСВыборомИсполнителя(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.ВышестоящееДействие),
			ЭтотОбъект);
	КонецЕсли;
	
	// РаспознаваниеРечи
	РаспознаваниеРечи_ИзменитьСостояниеФормы();
	// Конец РаспознаваниеРечи
	
#Если Не МобильныйКлиент Тогда
	// МобильныйСканер
	Если ПоддерживаетсяМобильныйСканер И (Не ЗначениеЗаполнено(Объект.СостояниеЗадачи)
		Или Объект.СостояниеЗадачи = ПредопределенноеЗначение("Справочник.СостоянияЗадач.Черновик")) Тогда
		
		МобильныйСканерЗанят = Ложь;
		ПодключитьОбработчикОжидания("ДобавитьСканСМобильногоАвтоматически", 3, Ложь);
	КонецЕсли;
	// Конец МобильныйСканер
#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияДокументооборотКлиент.ПередЗакрытием(
			Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, Модифицированность) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПредлолжитьСохранитьЧерновик() Тогда
		Отказ = Истина;
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ПредложитьСохранитьЗанятыеФайлы() Тогда
		Отказ = Истина;
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	// РаспознаваниеРечи
	РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
	РаботаСРечьюЖурналированиеКлиент.ОчиститьЖурнал(УникальныйИдентификатор);
	// Конец РаспознаваниеРечи
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ДействиеЗадачи" И ЭтоДействиеЗадачи(Источник) Тогда
		
		ОбновитьУчастников();
		
	ИначеЕсли ИмяСобытия = "Запись_ДействиеЗадачи"
		И РаботаСЗадачамиКлиент.ЭтоДействиеПодзадачи(Подзадачи, Источник) Тогда
		
		ОбновитьПодзадачиИУчастников();
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Задача"
		И Источник = Объект.Ссылка
		И (Параметр = Неопределено
			Или Параметр.ИдентификаторФормы <> УникальныйИдентификатор) Тогда
		
		Прочитать();
		
	ИначеЕсли ИмяСобытия = "Запись_Задача"
		И РаботаСЗадачамиКлиент.ЭтоПодзадача(
			Объект.Ссылка,
			Подзадачи,
			Источник,
			?(Параметр <> Неопределено, Параметр.ВышестоящаяЗадача, Неопределено)) Тогда
		
		ОбновитьПодзадачиИУчастников();
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Файл" И Параметр.Событие = "ДанныеФайлаИзменены" Тогда
		
		Если ТипЗнч(Параметр) = Тип("Структура")
			И Параметр.Свойство("Владелец")
			И Параметр.Свойство("Файл")
			И ЗначениеЗаполнено(Параметр.Владелец)  Тогда
			ВладелецФайла = Параметр.Владелец;
			ФайлСсылка = Параметр.Файл; 
		Иначе	
			ВладелецФайла = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Источник, "ВладелецФайла");
			ФайлСсылка = Источник; 
		КонецЕсли;	
		
		Если ВладелецФайла = Объект.Ссылка Тогда
			ОбновитьСтрокуПриложения(ФайлСсылка);
		КонецЕсли;
		
 	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ФактическиеТрудозатраты"
		И (Источник = Объект.Ссылка
			Или ЭтоДействиеЗадачи(Источник)) Тогда
		ОбновитьТрудозатраты();
	КонецЕсли;
	
	Если ИмяСобытия = "ИмпортФайловЗавершен" И ТипЗнч(Источник) = Тип("Структура")
		И Источник.ВладелецФайлов = Объект.Ссылка Тогда
		
		ДобавитьМассивФайлов(Источник.МассивСсылокФайлов);
		
	КонецЕсли;
	
	Если ИмяСобытия = "ИзмененыНастройкиЗадач" Тогда
		ПрочитатьПерсональныеНастройки();
	КонецЕсли;
	
	Если ИмяСобытия = "НаправленаНаИсполнение"
		И Параметр = Объект.Ссылка
		И Источник = УникальныйИдентификатор Тогда
		ЭтоНоваяЗадача = Ложь;
		Закрыть();
	КонецЕсли;
	
	Если ИмяСобытия = "ФайлИзменен" И Параметр.Владелец = Объект.Ссылка Тогда
		ОбновитьСтрокуПриложения(Параметр.Файл);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	ОбновитьФормуПоДаннымОбъекта(ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОбщегоНазначенияДокументооборотКлиент.УдалитьПустыеСтрокиТаблицы(Объект.Участники, "Участник");
		
	ДублиУчастников = ДублиУчастников();
	Если ДублиУчастников.Количество() > 0 Тогда
		
		МассивПредставлениеДублей = Новый Массив;
		Для Каждого КлючИЗначение Из ДублиУчастников Цикл
			МассивПредставлениеДублей.Добавить(КлючИЗначение.Ключ);
		КонецЦикла;
		
		ПредставлениеДублей = СтрСоединить(МассивПредставлениеДублей, ";" + Символы.ПС + "- ");
		
		Отказ = Истина;
		
		ТекстВопроса = СтрШаблон(
			НСтр("ru = 'Нельзя записать задачу, так как некоторые участники указаны дважды:
			|- %1.
			|
			|Удалить их и записать задачу?'"),
			ПредставлениеДублей);
		
		Режим = Новый СписокЗначений;
		Режим.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Да, удалить и записать'"));
		Режим.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Нет, не записывать'"));
		
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЗаписатьПослеВопросаОДублях",
			ЭтотОбъект,
			ПараметрыЗаписи);
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Режим, 0);
		
		Возврат;
		
	КонецЕсли;
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
		ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение;
	КонецЕсли;
	
	ПеренестиПоляВТаблицуИсполнителей(Ложь);
	
	ОбщегоНазначенияДокументооборотКлиент.УдалитьПустыеСтрокиТаблицы(Объект.Участники, "Участник");
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("ЭтоНовыйОбъект", Не ЗначениеЗаполнено(ТекущийОбъект.Ссылка));
	
	Если Не ЗначениеЗаполнено(ТекущийОбъект.СостояниеЗадачи) Тогда
		ТекущийОбъект.СостояниеЗадачи = СостояниеЗадачиЧерновик;
	КонецЕсли;
	
	// Описание.
	ТекущийОбъект.УстановитьОписаниеФорматированное(ОписаниеФорматированное);
	
	Если Не ЭтоЧерновик() Тогда
		ТекущийОбъект.ОбновитьСостоянияПриИзмененииУчастников();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Обновить(Не ПараметрыЗаписи.Свойство("НеОбновлятьЖизненныйЦикл"));
	
	ПредставлениеНомера = Документы.Задача.ПредставлениеНомера(ТекущийОбъект.Номер);
	
	ДобавитьПроверяющегоЕслиЕгоНет();
	
	ПротоколированиеРаботыСотрудников.ЗаписатьСоздание(Объект.Ссылка, ПараметрыЗаписи.ЭтоНовыйОбъект);
	ПротоколированиеРаботыСотрудников.ЗаписатьИзменение(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	РаботаСЗадачамиКлиент.ОповеститьОЗаписиЗадачи(
		Объект.Ссылка,
		Объект.ВышестоящаяЗадача,
		УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура АвторПриИзменении(Элемент)
	
	ОбновитьПриСменеАвтора();
	
КонецПроцедуры

&НаКлиенте
Процедура ВышестоящаяЗадачаИлиДействиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВышестоящаяЗадачаИлиДействиеОчистка(Элемент, СтандартнаяОбработка)
	
	Модифицированность = Истина;
	
	ВышестоящаяЗадачаИлиДействие = Неопределено;
	Объект.ВышестоящаяЗадача = Неопределено;
	Объект.ВышестоящееДействие = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПланПриИзменении(Элемент)
	
	ПроверитьПлановоеНачало();
	
	Если ЭтоМобильныйКлиент И ИспользоватьДатуИВремяВСрокахЗадач Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДатаНачалаПлан) И Не ИспользоватьДатуИВремяВСрокахЗадач Тогда
		Объект.ДатаНачалаПлан = НачалоДня(Объект.ДатаНачалаПлан);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПланОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЭтоМобильныйКлиент И ИспользоватьДатуИВремяВСрокахЗадач Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Объект.ДатаНачалаПлан = РаботаСЗадачамиВызовСервера.НачалоРабочегоДня(ВыбранноеЗначение);
	
	ТекущаяДатаСеанса = ОбщегоНазначенияКлиент.ДатаСеанса();
	Если НачалоМинуты(Объект.ДатаНачалаПлан) < НачалоМинуты(ТекущаяДатаСеанса)
		И НачалоДня(Объект.ДатаНачалаПлан) = НачалоДня(ТекущаяДатаСеанса) Тогда
		Объект.ДатаНачалаПлан = НачалоМинуты(ТекущаяДатаСеанса);
	КонецЕсли;
	
	ПроверитьПлановоеНачало();

	Если ЗначениеЗаполнено(Объект.ДатаНачалаПлан) И Не ИспользоватьДатуИВремяВСрокахЗадач Тогда
		Объект.ДатаНачалаПлан = НачалоДня(Объект.ДатаНачалаПлан);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеНачалоФактПриИзменении(Элемент)
	
	Если ЭтоМобильныйКлиент Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДатаНачала) И Не ИспользоватьДатуИВремяВСрокахЗадач Тогда
		Объект.ДатаНачала = НачалоДня(Объект.ДатаНачала);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаФактОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЭтоМобильныйКлиент Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ТекущаяДатаСеанса = ОбщегоНазначенияКлиент.ДатаСеанса();
	Если НачалоДня(ВыбранноеЗначение) = НачалоДня(ТекущаяДатаСеанса) Тогда
		Объект.ДатаНачала = НачалоМинуты(ТекущаяДатаСеанса);
	Иначе
		Объект.ДатаНачала = РаботаСЗадачамиВызовСервера.НачалоРабочегоДня(ВыбранноеЗначение);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДатаНачала) И Не ИспользоватьДатуИВремяВСрокахЗадач Тогда
		Объект.ДатаНачала = НачалоДня(Объект.ДатаНачала);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	Если РаботаСАдреснойКнигойКлиент.ОбработатьВыборУчастника(ЭтотОбъект, Элемент, ВыбранноеЗначение, 
		СтандартнаяОбработка) Тогда
			
		// Если значение требует уточнения, будет вызвана форма для ввода уточняющих данных.
		// Обработка выбора не должна выполняться в этом случае.
		ТипыДляУточнения = Новый Массив;
		ТипыДляУточнения.Добавить(Тип("Структура"));
		ТипыДляУточнения.Добавить(Тип("СправочникСсылка.РолиИсполнителей"));
		Если ТипыДляУточнения.Найти(ТипЗнч(ВыбранноеЗначение)) <> Неопределено Тогда
			СотрудникиКлиент.ОбработкаВыбораКонтейнера(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
			// Повторная проверка (значение могло быть изменено).
			Если ТипыДляУточнения.Найти(ТипЗнч(ВыбранноеЗначение)) <> Неопределено Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
			
		Исполнитель = ВыбранноеЗначение;
		
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОчистка(Элемент, СтандартнаяОбработка)
	ИсполнительОчистить(); 
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Исполнитель) Тогда
		ПоказатьЗначение(,Исполнитель);
	КонецЕсли;	
	 
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Текст = "" Тогда
		ДанныеВыбора = Новый СписокЗначений();
		Для Каждого Стр Из СписокВыбораИсполнителя Цикл
			ДанныеВыбора.Добавить(Стр.Значение, Стр.Представление);
		КонецЦикла;	
		
		Если ДанныеВыбора.Количество() Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;

		Возврат;
	КонецЕсли;	

	ПараметрыПолученияДанных.Вставить("ФункцияУчастника", ВидУчастникаИсполнитель);

	ПараметрыПолученияДанных.Вставить("Автор", Объект.Автор);
	
	ПараметрыПолученияДанных.Вставить("КонтролироватьСотрудниковБезПользователя", Истина);

	РаботаСАдреснойКнигойКлиент.ПодобратьУчастника(
		ЭтотОбъект,
		Элемент,
		Текст,
		ДанныеВыбора, 
		ПараметрыПолученияДанных,
		Ожидание,
		СтандартнаяОбработка,
		Исполнитель);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ПараметрыПолученияДанных.Вставить("ФункцияУчастника", ВидУчастникаИсполнитель);
	
	ПараметрыПолученияДанных.Вставить("КонтролироватьСотрудниковБезПользователя", Истина);
	
	РаботаСАдреснойКнигойКлиент.ПодобратьУчастника(
		ЭтотОбъект,
		Элемент,
		Текст,
		ДанныеВыбора,
		ПараметрыПолученияДанных,
		0,
		СтандартнаяОбработка,
		Исполнитель);

	Если ИсполнительПредставление = "" Тогда
		ИсполнительОчистить(); 
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущийУчастник = Исполнитель;
	Если Не ЗначениеЗаполнено(ТекущийУчастник) Тогда
		СтандартнаяОбработка = Ложь;
		ПодобратьИсполнителейРеализация();
		Возврат;
	КонецЕсли;	
	
	ПараметрыВыбораУчастника = Новый Структура;
	ПараметрыВыбораУчастника.Вставить("ФункцияУчастника", ВидУчастникаИсполнитель);
	ПараметрыВыбораУчастника.Вставить("КонтролироватьСотрудниковБезПользователя", Истина);
		
	РаботаСАдреснойКнигойКлиент.ВыбратьУчастника(
		ЭтотОбъект,
		Элемент,
		СтандартнаяОбработка,
		ТекущийУчастник, , ,
		ПараметрыВыбораУчастника);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительПриИзменении(Элемент)
	
	Если ИсполнительПредставление = "" Тогда
		ИсполнительОчистить(); 
	КонецЕсли;	
	 
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеСрокФактПриИзменении(Элемент)
	
	Если ЭтоМобильныйКлиент И ИспользоватьДатуИВремяВСрокахЗадач Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДатаВыполнения) И Не ИспользоватьДатуИВремяВСрокахЗадач Тогда
		Объект.ДатаВыполнения = КонецДня(Объект.ДатаВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеФактОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЭтоМобильныйКлиент И ИспользоватьДатуИВремяВСрокахЗадач Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ТекущаяДатаСеанса = ОбщегоНазначенияКлиент.ДатаСеанса();
	Если НачалоДня(ВыбранноеЗначение) = НачалоДня(ТекущаяДатаСеанса) Тогда
		Объект.ДатаВыполнения = НачалоМинуты(ТекущаяДатаСеанса);
	Иначе
		Объект.ДатаВыполнения = РаботаСЗадачамиВызовСервера.ОкончаниеРабочегоДня(ВыбранноеЗначение);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДатаВыполнения) И Не ИспользоватьДатуИВремяВСрокахЗадач Тогда
		Объект.ДатаВыполнения = КонецДня(Объект.ДатаВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СрокПриИзменении(Элемент)
	
	Если ЭтоМобильныйКлиент И ИспользоватьДатуИВремяВСрокахЗадач Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСЗадачамиКлиент.СрокПриИзменении(
		Объект.Срок,
		ИспользоватьДатуИВремяВСрокахЗадач,
		СрокВышестоящейЗадачи,
		Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ЭтоМобильныйКлиент И ИспользоватьДатуИВремяВСрокахЗадач Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСЗадачамиКлиент.СрокОбработкаВыбора(
		ВыбранноеЗначение,
		СтандартнаяОбработка,
		Объект.Срок,
		ИспользоватьДатуИВремяВСрокахЗадач,
		СрокВышестоящейЗадачи,
		Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТрудоемкостьСтрокойПриИзменении(Элемент)
	
	ОтДо = СтрРазделить(Объект.ТрудоемкостьСтрокой, "-", Ложь);
	Если ОтДо.Количество() <> 2 Тогда
		Объект.ТрудоемкостьСтрокой = "";
		Возврат;
	КонецЕсли;
	
	Объект.ТрудоемкостьОт = Число(ОтДо[0]);
	Объект.ТрудоемкостьДо = Число(ОтДо[1]);
	Объект.ТрудоемкостьСтрокой = Строка(Объект.ТрудоемкостьОт) + "-" + Строка(Объект.ТрудоемкостьДо);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриоритетПредставлениеОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПриоритетПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = Новый СписокЗначений;
	
	ДанныеВыбора.Добавить(
		ПредопределенноеЗначение("Справочник.ПриоритетыЗадач.Высокий"),
		Строка(ПредопределенноеЗначение("Справочник.ПриоритетыЗадач.Высокий")),
		,
		БиблиотекаКартинок.ВажностьВысокая);
	ДанныеВыбора.Добавить(
		ПредопределенноеЗначение("Справочник.ПриоритетыЗадач.Обычный"),
		Строка(ПредопределенноеЗначение("Справочник.ПриоритетыЗадач.Обычный")),
		,
		БиблиотекаКартинок.ВажностьНеЗадана);
	ДанныеВыбора.Добавить(
		ПредопределенноеЗначение("Справочник.ПриоритетыЗадач.Низкий"),
		Строка(ПредопределенноеЗначение("Справочник.ПриоритетыЗадач.Низкий")),
		,
		БиблиотекаКартинок.ВажностьНизкая);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриоритетПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Объект.Приоритет = ВыбранноеЗначение;
	
	ОбновитьПриоритетПредставление(Объект.Приоритет, ЭтотОбъект, ПриоритетПредставление);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверяющийПриИзменении(Элемент)
	
	Если ПроверяющийПредставление = "" Тогда
		ПроверяющийОчистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверяющийОчистка(Элемент, СтандартнаяОбработка)
	ПроверяющийОчистить();
КонецПроцедуры

&НаКлиенте
Процедура ПроверяющийОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Проверяющий) Тогда
		ПоказатьЗначение(,Проверяющий);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверяющийОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если РаботаСАдреснойКнигойКлиент.ОбработатьВыборУчастника(ЭтотОбъект, Элемент, ВыбранноеЗначение, 
		СтандартнаяОбработка) Тогда
		
		// Если значение требует уточнения, будет вызвана форма для ввода уточняющих данных.
		// Обработка выбора не должна выполняться в этом случае.
		ТипыДляУточнения = Новый Массив;
		ТипыДляУточнения.Добавить(Тип("Структура"));
		ТипыДляУточнения.Добавить(Тип("СправочникСсылка.РолиИсполнителей"));
		Если ТипыДляУточнения.Найти(ТипЗнч(ВыбранноеЗначение)) <> Неопределено Тогда
			СотрудникиКлиент.ОбработкаВыбораКонтейнера(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
			// Повторная проверка (значение могло быть изменено).
			Если ТипыДляУточнения.Найти(ТипЗнч(ВыбранноеЗначение)) <> Неопределено Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
			
		Проверяющий = ВыбранноеЗначение;
			
	КонецЕсли;		
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверяющийАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Текст = "" Тогда
		СтандартнаяОбработка = Ложь;
		
		ДанныеВыбора = Новый СписокЗначений();
		Для Каждого Стр Из СписокВыбораПроверяющего Цикл
			ДанныеВыбора.Добавить(Стр.Значение, Стр.Представление);
		КонецЦикла;
		
		Возврат;
	КонецЕсли;
	
	ПараметрыПолученияДанных.Вставить("ФункцияУчастника", ВидУчастникаПроверяющий);
	
	ПараметрыПолученияДанных.Вставить("Автор", Объект.Автор);
	
	ПараметрыПолученияДанных.Вставить("КонтролироватьСотрудниковБезПользователя", Истина);

	РаботаСАдреснойКнигойКлиент.ПодобратьУчастника(
		ЭтотОбъект,
		Элемент,
		Текст,
		ДанныеВыбора,
		ПараметрыПолученияДанных,
		Ожидание,
		СтандартнаяОбработка,
		Проверяющий);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверяющийОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ПараметрыПолученияДанных.Вставить("ФункцияУчастника", ВидУчастникаПроверяющий);
	
	ПараметрыПолученияДанных.Вставить("КонтролироватьСотрудниковБезПользователя", Истина);
	
	РаботаСАдреснойКнигойКлиент.ПодобратьУчастника(
		ЭтотОбъект,
		Элемент,
		Текст,
		ДанныеВыбора,
		ПараметрыПолученияДанных,
		0,
		СтандартнаяОбработка,
		Проверяющий);
	
	Если ПроверяющийПредставление = "" Тогда
		ПроверяющийОчистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверяющийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущийУчастник = Проверяющий;
	Если Не ЗначениеЗаполнено(ТекущийУчастник) Тогда
		ТекущийУчастник = Объект.Автор;
	КонецЕсли;
	
	ПараметрыВыбораУчастника = Новый Структура;
	ПараметрыВыбораУчастника.Вставить("ФункцияУчастника", ВидУчастникаПроверяющий);
	ПараметрыВыбораУчастника.Вставить("КонтролироватьСотрудниковБезПользователя", Истина);
	
		
	РаботаСАдреснойКнигойКлиент.ВыбратьУчастника(
		ЭтотОбъект,
		Элемент,
		СтандартнаяОбработка,
		ТекущийУчастник, , ,
		ПараметрыВыбораУчастника);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидЗадачиПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.ВидЗадачи) Тогда
		Объект.ВидЗадачи = ПредопределенноеЗначение("Справочник.ВидыЗадач.Поручение");
	КонецЕсли;
	
	ВидЗадачиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура МК_ПриложенияНадписьНажатие(Элемент)
	Элементы.Приложения.Видимость = Не Элементы.Приложения.Видимость;
	МК_НастроитьПоказатьСкрытьПриложения(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура МК_УчастникиНадписьНажатие(Элемент)
	
	Элементы.МК_Участники.Видимость = Не Элементы.МК_Участники.Видимость;
	МК_НастроитьПоказатьСкрытьУчастников(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура МК_ПрочееНадписьНажатие(Элемент)
	
	Элементы.МК_ГруппаПрочееКонтент.Видимость = Не Элементы.МК_ГруппаПрочееКонтент.Видимость;
	МК_НастроитьПоказатьСкрытьПрочее(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура МК_ПланФактНадписьНажатие(Элемент)
	
	Элементы.ГруппаПланФакт.Видимость = Не Элементы.ГруппаПланФакт.Видимость;
	МК_НастроитьПоказатьСкрытьПланФакт(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура АвторОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, СтандартнаяОбработка)
	
	СотрудникиКлиент.СотрудникОбработкаВыбора(Объект, "Автор", ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздалОбработкаВыбора(Элемент, ВыбранноеЗначение, ДополнительныеДанные, СтандартнаяОбработка)
	
	СотрудникиКлиент.СотрудникОбработкаВыбора(Объект, "Создал", ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаголовокНачалоВыбора(Элемент, ДанныеВыбора, ВыборДобавлением, СтандартнаяОбработка)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаголовокПослеВыбора", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура("ОбластьПрименения, Заголовок, ЗаголовокФормыСоздания");
	ПараметрыФормы.ОбластьПрименения =
		ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.ЗадачаЗаголовок");
	ПараметрыФормы.Заголовок = НСтр("ru = 'Выбор шаблона заголовка'");
	ПараметрыФормы.ЗаголовокФормыСоздания = НСтр("ru = 'Шаблон заголовка'");
	
	ОткрытьФорму("Справочник.ШаблоныТекстов.ФормаВыбора", 
		ПараметрыФормы,,,,,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеФорматированноеВыборНажатие(Элемент)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОписаниеПослеВыбора", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура("ОбластьПрименения, Заголовок, ЗаголовокФормыСоздания");
	ПараметрыФормы.ОбластьПрименения =
		ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.ЗадачаОписание");
	ПараметрыФормы.Заголовок = НСтр("ru = 'Выбор шаблона описания'");
	ПараметрыФормы.ЗаголовокФормыСоздания = НСтр("ru = 'Шаблон описания'");
	
	ОткрытьФорму("Справочник.ШаблоныТекстов.ФормаВыбора", 
		ПараметрыФормы,,,,,
		ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУчастники

&НаКлиенте
Процедура УчастникиПриИзменении(Элемент)
	
	Если АвтоматическиНачатоРедактированиеУчастников Тогда
		АвтоматическиНачатоРедактированиеУчастников = Ложь;
		Возврат;
	КонецЕсли;
	
	ДанныеТекущегоУчастника = Новый Структура("Участник, ВидУчастника");
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		ДанныеТекущегоУчастника.ВидУчастника = Элемент.ТекущиеДанные.ВидУчастника;
		ДанныеТекущегоУчастника.Участник = Элемент.ТекущиеДанные.Участник;
	КонецЕсли;
	
	УчастникиПриИзмененииНаСервере(ДанныеТекущегоУчастника);
	ОбновитьСписокВыбораВидУчастника();
	
КонецПроцедуры


&НаКлиенте
Процедура УчастникиВидУчастникаПриИзменении(Элемент)
	
	ИзменилсяВидУчастника = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокВыбораВидУчастника()
	
	ЭтоОтветственный = Ложь;
	ЭтоПроверяющий = Ложь;
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если ТекущиеДанные.ВидУчастника = ВидУчастникаОтветственный Тогда
			ЭтоОтветственный = Истина;
		КонецЕсли;
		
		Если ТекущиеДанные.ВидУчастника = ВидУчастникаПроверяющий Тогда
			ЭтоПроверяющий = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ЕстьСтрокаОтветственного = Ложь;
	ЕстьСтрокаПроверяющего = Ложь;
	Для Каждого СтрокаУчастника Из Объект.Участники Цикл
		
		Если СтрокаУчастника.ВидУчастника = ВидУчастникаОтветственный Тогда
			ЕстьСтрокаОтветственного = Истина;
		КонецЕсли;
		
		Если СтрокаУчастника.ВидУчастника = ВидУчастникаПроверяющий Тогда
			ЕстьСтрокаПроверяющего = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	ЕстьВыборОтветственного = Ложь;
	ЕстьВыборПроверяющего = Ложь;
	Для Каждого ЭлементСписка Из Элементы.УчастникиВидУчастника.СписокВыбора Цикл
		
		Если ЭлементСписка.Значение = ВидУчастникаОтветственный Тогда
			ЕстьВыборОтветственного = Истина;
		КонецЕсли;
		
		Если ЭлементСписка.Значение = ВидУчастникаПроверяющий Тогда
			ЕстьВыборПроверяющего = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьСтрокаОтветственного И ЕстьВыборОтветственного И Не ЭтоОтветственный Тогда
		
		// Удалим
		СтрокаОтветственного = Элементы.УчастникиВидУчастника.СписокВыбора.НайтиПоЗначению(
			ВидУчастникаОтветственный);
		Элементы.УчастникиВидУчастника.СписокВыбора.Удалить(СтрокаОтветственного);
		
	ИначеЕсли (Не ЕстьСтрокаОтветственного Или ЭтоОтветственный) И Не ЕстьВыборОтветственного Тогда
		
		// Добавим
		Элементы.УчастникиВидУчастника.СписокВыбора.Вставить(
			0,
			ВидУчастникаОтветственный);
		
	КонецЕсли;
	
	Если ЕстьСтрокаПроверяющего И ЕстьВыборПроверяющего И Не ЭтоПроверяющий Тогда
		
		// Удалим
		СтрокаПроверяющего = Элементы.УчастникиВидУчастника.СписокВыбора.НайтиПоЗначению(
			ВидУчастникаПроверяющий);
		Элементы.УчастникиВидУчастника.СписокВыбора.Удалить(СтрокаПроверяющего);
		
	ИначеЕсли (Не ЕстьСтрокаПроверяющего Или ЭтоПроверяющий) И Не ЕстьВыборПроверяющего Тогда
		
		// Добавим
		Элементы.УчастникиВидУчастника.СписокВыбора.Вставить(
			Элементы.УчастникиВидУчастника.СписокВыбора.Количество(),
			ВидУчастникаПроверяющий);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УчастникиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДанныеСтроки = Элемент.ДанныеСтроки(ВыбраннаяСтрока);
	
	Если ЭтоМобильныйКлиент Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если Не ЗначениеЗаполнено(ДанныеСтроки.Состояние) Тогда
			ТекущиеДанные = Элемент.ТекущиеДанные;
			
			ПараметрыФормы = СтруктураСтрокиУчастники();
			ЗаполнитьЗначенияСвойств(ПараметрыФормы, ТекущиеДанные);
			ОткрытьФорму("Документ.Задача.Форма.МК_ФормаСтрокиУчастники", ПараметрыФормы, ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеСтроки = Неопределено
		Или Не ЗначениеЗаполнено(ДанныеСтроки.Состояние) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	РаботаСЗадачамиКлиент.ОткрытьКарточкуИсполнителяЗадачи(ДанныеСтроки.ДействиеУчастника);
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПриАктивизацииСтроки(Элемент)
	
	УчастникиОбработкаАктивизацииСтроки();	
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	РежимДобавленияИсполнителя = Истина;
	
	Отказ = Истина;
	Если ЗначениеЗаполнено(ВидУчастникаПроверяющий) Тогда
		ВсегоСтрок = Объект.Участники.Количество();
		НовСтр = Объект.Участники.Вставить(ВсегоСтрок - 1);
	Иначе
		
		НовСтр = Объект.Участники.Добавить();
	КонецЕсли;
	НовСтр.Участник = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
	НовСтр.ВидУчастника = ВидУчастникаИсполнитель;
	ИдСтроки = НовСтр.ПолучитьИдентификатор();
	
	Элементы.Участники.ТекущаяСтрока = ИдСтроки;
	
	Элементы.Участники.ИзменитьСтроку();
	
	Если ЭтоМобильныйКлиент Тогда 
		МК_НастроитьПоказатьСкрытьУчастников(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПередНачаломИзменения(Элемент, Отказ)
	
	Если ЭтоМобильныйКлиент Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено
		Или Не ЗначениеЗаполнено(ТекущиеДанные.Состояние) Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ТекущиеДанные.ВидУчастника = ВидУчастникаПроверяющий Тогда
		Отказ = Истина;
		ТекущиеДанные.Участник = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
		ТекущиеДанные.ПредставлениеУчастника = "";	
		ТекущиеДанные.Результат = Неопределено;
		ТекущиеДанные.ЕстьПриложения = Ложь;
		ТекущиеДанные.Состояние = Неопределено;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если РежимДобавленияИсполнителя = Истина Тогда
		Элемент.ТекущийЭлемент = Элементы.УчастникиУчастник;
		РежимДобавленияИсполнителя = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиУчастникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	
	Если Не РаботаСАдреснойКнигойКлиент.ОбработатьВыборУчастника(ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	// Если значение требует уточнения, будет вызвана форма для ввода уточняющих данных.
	// Обработка выбора не должна выполняться в этом случае.
	ТипыДляУточнения = Новый Массив;
	ТипыДляУточнения.Добавить(Тип("Структура"));
	ТипыДляУточнения.Добавить(Тип("СправочникСсылка.РолиИсполнителей"));
	Если ТипыДляУточнения.Найти(ТипЗнч(ВыбранноеЗначение)) <> Неопределено Тогда
		СотрудникиКлиент.ОбработкаВыбораКонтейнера(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
		// Повторная проверка (значение могло быть изменено).
		Если ТипыДляУточнения.Найти(ТипЗнч(ВыбранноеЗначение)) <> Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;
	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрока = Элементы.Участники.ТекущаяСтрока;
	СтрокаДанных = Объект.Участники.НайтиПоИдентификатору(ТекущаяСтрока);
	СтрокаДанных.Участник = ВыбранноеЗначение;
	
	Элементы.Участники.ЗакончитьРедактированиеСтроки(Ложь);
	
	УчастникиПриИзмененииНаСервере(Неопределено);
	ОбновитьСписокВыбораВидУчастника();
	
	Для Каждого СтрокаДанных Из Объект.Участники Цикл
		Если Не ЗначениеЗаполнено(СтрокаДанных.Участник) Тогда
			Элементы.Участники.ТекущаяСтрока = СтрокаДанных.ПолучитьИдентификатор();
			УчастникиОбработкаАктивизацииСтроки();
			Возврат;	
		КонецЕсли;	
	КонецЦикла;
	
	Элементы.Участники.ДобавитьСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиУчастникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	ПараметрыВыбораУчастника = Неопределено;
	ТекущийУчастник = Неопределено;
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущийУчастник = ТекущиеДанные.Участник;
		
		Если Не ЗначениеЗаполнено(ТекущиеДанные.Участник) Тогда
			Если ТекущиеДанные.ВидУчастника <> ВидУчастникаПроверяющий Тогда
				СтандартнаяОбработка = Ложь;
				ПодобратьИсполнителейРеализация();
				Возврат;
			КонецЕсли;
			
			ТекущийУчастник = Объект.Автор;
		КонецЕсли;
		
		Если ТекущиеДанные.ВидУчастника = ВидУчастникаПроверяющий Тогда
			ПараметрыВыбораУчастника = Новый Структура(
				"ФункцияУчастника", 
				ВидУчастникаПроверяющий);
		Иначе
			ПараметрыВыбораУчастника = Новый Структура(
				"ФункцияУчастника", 
				ВидУчастникаИсполнитель);
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыВыбораУчастника.Вставить("КонтролироватьСотрудниковБезПользователя", Истина);

	РаботаСАдреснойКнигойКлиент.ВыбратьУчастника(
		ЭтотОбъект,
		Элемент,
		СтандартнаяОбработка,
		ТекущийУчастник, , ,
		ПараметрыВыбораУчастника);

КонецПроцедуры

&НаКлиенте
Процедура УчастникиУчастникАвтоПодбор(Элемент,
	Текст,
	ДанныеВыбора,
	ПараметрыПолученияДанных,
	Ожидание,
	СтандартнаяОбработка) Экспорт
	
	СписокВыбораТекущий = Неопределено;
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.ВидУчастника = ВидУчастникаПроверяющий Тогда
			СписокВыбораТекущий = СписокВыбораПроверяющего;
			ПараметрыПолученияДанных.Вставить(
				"ФункцияУчастника", 
				ВидУчастникаПроверяющий);
		Иначе
			СписокВыбораТекущий = СписокВыбораИсполнителя;
			ПараметрыПолученияДанных.Вставить(
				"ФункцияУчастника", 
				ВидУчастникаИсполнитель);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыПолученияДанных.Вставить("КонтролироватьСотрудниковБезПользователя", Истина);
	
	Если Не ЗначениеЗаполнено(Текст) И СписокВыбораТекущий <> Неопределено Тогда
		ДанныеВыбора = Новый СписокЗначений;
		Для Каждого Стр Из СписокВыбораТекущий Цикл
			ДанныеВыбора.Добавить(Стр.Значение, Стр.Представление);
		КонецЦикла;	
		Элементы.УчастникиУчастник.СписокВыбора.Очистить();
		
		Если ДанныеВыбора.Количество() Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
		
		Возврат;
	КонецЕсли;	
		
	РаботаСАдреснойКнигойКлиент.ПодобратьУчастника(
		ЭтотОбъект,
		Элемент,
		Текст,
		ДанныеВыбора,
		ПараметрыПолученияДанных,
		Ожидание,
		СтандартнаяОбработка,
		Элементы.Участники.ТекущиеДанные.Участник);
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиУчастникОкончаниеВводаТекста(Элемент,
	Текст,
	ДанныеВыбора,
	ПараметрыПолученияДанных,
	СтандартнаяОбработка) Экспорт
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.ВидУчастника = ВидУчастникаПроверяющий Тогда
			ПараметрыПолученияДанных.Вставить(
				"ФункцияУчастника", 
				ВидУчастникаПроверяющий);
		Иначе
			ПараметрыПолученияДанных.Вставить(
				"ФункцияУчастника", 
				ВидУчастникаИсполнитель);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыПолученияДанных.Вставить("КонтролироватьСотрудниковБезПользователя", Истина);
	
	РаботаСАдреснойКнигойКлиент.ПодобратьУчастника(
		ЭтотОбъект,
		Элемент,
		Текст,
		ДанныеВыбора,
		ПараметрыПолученияДанных,
		0,
		СтандартнаяОбработка,
		Элементы.Участники.ТекущиеДанные.Участник);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПодзадачи

&НаКлиенте
Процедура ПодзадачиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	РаботаСЗадачамиКлиент.ПодзадачиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПриложения

&НаКлиенте
Процедура ПриложенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = Элемент.ДанныеСтроки(ВыбраннаяСтрока);
	Если ДанныеСтроки <> Неопределено Тогда
		ВыборФайла(ДанныеСтроки.Приложение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриложенияПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьКомандПриложений();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриложенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриложенияПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ДанныеСтроки = Элементы.Приложения.ТекущиеДанные;
	
	Если ДанныеСтроки <> Неопределено Тогда
		РаботаСЗадачамиКлиент.ПоказатьПриложение(ДанныеСтроки.Приложение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриложенияПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	НаименованиеПриложения = "";
	МассивПриложений = Новый Массив;
	
	Для Каждого ВыбраннаяСтрока Из Элементы.Приложения.ВыделенныеСтроки Цикл
		
		ДанныеСтроки = Объект.Приложения.НайтиПоИдентификатору(ВыбраннаяСтрока);
			
		МассивПриложений.Добавить(ДанныеСтроки.Приложение);
		НаименованиеПриложения = Строка(ДанныеСтроки.Приложение);
		
	КонецЦикла;
	
	КоличествоПриложений = МассивПриложений.Количество();
	
	Если КоличествоПриложений = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПриложенияПередУдалениемПродолжение",
		ЭтотОбъект,
		Новый Структура("МассивПриложений", МассивПриложений));
		
	Если КоличествоПриложений > 1 Тогда 
		ТекстВопроса = НСтр("ru = 'Удалить выделенные приложения?'");
	Иначе 
		ТекстВопроса = СтрШаблон(НСтр("ru = 'Удалить ""%1""?'"),
			НаименованиеПриложения);
	КонецЕсли;
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриложенияПередУдалениемПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда 
		
		МассивПриложений = Параметры.МассивПриложений;
		
		// просто строки удаляем
		Для Каждого Приложение Из МассивПриложений Цикл
			ПараметрыОтбора = Новый Структура("Приложение", Приложение);
			Строки = Объект.Приложения.НайтиСтроки(ПараметрыОтбора);
			Если Строки.Количество() >= 1 Тогда
				Объект.Приложения.Удалить(Строки[0]);
			КонецЕсли;	
		КонецЦикла;	
		
		ОбновитьПредставлениеПриложений();
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриложенияПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриложенияПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Если Не ПроверитьЗаполнение() Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыЗаписи = Новый Структура("РежимЗаписи");
		ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение;
		
		Если Не Записать(ПараметрыЗаписи) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ВладелецФайлаСписка = Объект.Ссылка;
	НеОткрыватьКарточкуПослеСозданияИзФайла = Истина;	
	ОбработанныеФайлы = РаботаСФайламиКлиент.ОбработкаПеретаскиванияВЛинейныйСписок(
		ПараметрыПеретаскивания,
		ВладелецФайлаСписка,
		ЭтотОбъект,
		НеОткрыватьКарточкуПослеСозданияИзФайла);
	
	Если ОбработанныеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеФайлов = ДанныеФайлов(ОбработанныеФайлы);
	Для Каждого ОбработанныйФайл Из ОбработанныеФайлы Цикл
		
		СтрокаПриложения = Объект.Приложения.Добавить();
		СтрокаПриложения.Приложение = ОбработанныйФайл;
		
		Если ТипЗнч(ОбработанныйФайл) = Тип("СправочникСсылка.Файлы") Тогда
			ДанныеФайла = ДанныеФайлов.Получить(ОбработанныйФайл);
			ЗаполнитьЗначенияСвойств(СтрокаПриложения, ДанныеФайла);
		Иначе
			СтрокаПриложения.ИндексКартинки = РаботаСЗадачамиКлиентСервер.ИндексКартинкиПриложения(ОбработанныйФайл);
		КонецЕсли;
		
		
	КонецЦикла;
	
	ОбновитьПредставлениеПриложений();
	
	Модифицированность = Истина;
	
	ПараметрыЗаписи = Новый Структура("РежимЗаписи");
	ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение;
	
	Записать(ПараметрыЗаписи); // запишем еще раз, т.к. спр Файл уже записан, а табл часть Приложения еще нет
	
	Если ЭтоМобильныйКлиент Тогда 
		МК_НастроитьПоказатьСкрытьПриложения(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриложенияНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	#Если Не ВебКлиент Тогда
		
		КоличествоВыделенныхВложений = Элементы.Приложения.ВыделенныеСтроки.Количество();
		
		Если КоличествоВыделенныхВложений = 0 Тогда
			
			Возврат;
			
		ИначеЕсли КоличествоВыделенныхВложений = 1 Тогда
			
			ФайлСсылка = Элементы.Приложения.ТекущиеДанные.Приложение;
			Если ТипЗнч(ФайлСсылка) <> Тип("СправочникСсылка.Файлы") Тогда
				
				МассивОбъектов = Новый Массив;
				МассивОбъектов.Добавить(ФайлСсылка);
				ПараметрыПеретаскивания.Значение = МассивОбъектов;
				
				Возврат;
				
			КонецЕсли;
				
			ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(ФайлСсылка);
			
			ПолноеИмяПеретаскиваемогоФайла = "";
			
			Обработчик = Новый ОписаниеОповещения("ПослеПолучитьФайлВерсииВРабочийКаталог", ЭтотОбъект);
			РаботаСФайламиКлиент.ПолучитьФайлВерсииВРабочийКаталог(Обработчик, 
			ДанныеФайла, ПолноеИмяПеретаскиваемогоФайла, УникальныйИдентификатор);
			
			Если ЗначениеЗаполнено(ПолноеИмяПеретаскиваемогоФайла) Тогда
				Файл = Новый Файл(ПолноеИмяПеретаскиваемогоФайла);
				ПараметрыПеретаскивания.Значение = Файл;
			Иначе
				Выполнение = Ложь;
			КонецЕсли;
			
		Иначе // более одного выделено
			
			МассивОбъектов = Новый Массив;
			Для каждого ВыделеннаяСтрока Из Элементы.Приложения.ВыделенныеСтроки Цикл
				ДанныеСтроки = Объект.Приложения.НайтиПоИдентификатору(ВыделеннаяСтрока);
				МассивОбъектов.Добавить(ДанныеСтроки.Приложение);
			КонецЦикла;
			Если МассивОбъектов.Количество() = 0 Тогда
				Возврат;
			КонецЕсли;
			
			ПараметрыПеретаскивания.Значение = МассивОбъектов;
			
		КонецЕсли;
		
	#Иначе
		Выполнение = Ложь;
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Асинх Процедура ПослеПолучитьФайлВерсииВРабочийКаталог(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат.ФайлПолучен Тогда
		
		ПолноеИмяПеретаскиваемогоФайла = Результат.ПолноеИмяФайла;
		
		Файл = Новый Файл(ПолноеИмяПеретаскиваемогоФайла);
		Если Ждать Файл.СуществуетАсинх() Тогда
			Файл.УстановитьТолькоЧтениеАсинх(Ложь);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура МК_ПоказатьСкрытьПланФакт(Команда)
	
	Элементы.ГруппаПланФакт.Видимость = Не Элементы.ГруппаПланФакт.Видимость;
	МК_НастроитьПоказатьСкрытьПланФакт(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура МК_СтраницаИнформация(Команда)
	
	МК_ПереключитьНаОсновнуюСтраницу(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура МК_СтраницаИстория(Команда)
	
	МК_ПереключитьНаСтраницуИстория(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура МК_СтраницаПодзадачи(Команда)
	
	МК_ПереключитьНаСтраницуПодзадачи(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура МК_ПоказатьСкрытьПриложения(Команда)
	
	Элементы.Приложения.Видимость = Не Элементы.Приложения.Видимость;
	МК_НастроитьПоказатьСкрытьПриложения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура МК_ПоказатьСкрытьУчастников(Команда)
	
	Элементы.МК_Участники.Видимость = Не Элементы.МК_Участники.Видимость;
	МК_НастроитьПоказатьСкрытьУчастников(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура МК_ПоказатьСкрытьПрочее(Команда)
	
	Элементы.МК_ГруппаПрочееКонтент.Видимость = Не Элементы.МК_ГруппаПрочееКонтент.Видимость;
	МК_НастроитьПоказатьСкрытьПрочее(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Асинх Процедура ВставитьКартинкуИзБуфера(Команда)
	
	Если Не ЗаписатьЕслиНовый() Тогда
		Возврат; 
	КонецЕсли;
	
	КартинкаИзБуфераОбмена = Ждать СредстваБуфераОбмена.ПолучитьДанныеАсинх(СтандартныйФорматДанныхБуфераОбмена.Картинка);
	
	Если КартинкаИзБуфераОбмена = Неопределено Тогда
		ПоказатьПредупреждение(
			, НСтр(
				"ru='Буфер обмена не содержит картинки'"
				, "ru"
			)
		);
		Возврат;
	КонецЕсли;
	
	ПутьКФайлу = "";
	
#Если Не ВебКлиент Тогда 
	
	ПутьКФайлу = ПолучитьИмяВременногоФайла("png");
	КартинкаИзБуфераОбмена.Записать(ПутьКФайлу);

#КонецЕсли
	
	ВставитьКартинкуИзБуфераЗавершение(Истина, ПутьКФайлу);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПриложение(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьДобавлениеПриложения", ЭтотОбъект);
	
	ОткрытьФорму(
		"Документ.ДействиеЗадачи.Форма.ВыборПриложения",
		Новый Структура("Задача", Объект.Ссылка),,,,,
		ОписаниеОповещения);
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайл(Команда)
	
	ДобавитьФайлВПриложения();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактирование(Команда)
	
	Если Не ЗаписатьЕслиНовый() Тогда
		Возврат; 
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Приложения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыОбновленияФайла = РаботаСФайламиКлиент.ПараметрыОбновленияФайла(Неопределено, 
		ТекущиеДанные.Приложение,
		УникальныйИдентификатор);
	ПараметрыОбновленияФайла.ХранитьВерсии = Ложь;
	ПараметрыОбновленияФайла.РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
	ПараметрыОбновленияФайла.Редактирует = ТекущиеДанные.Редактирует;
	РаботаСФайламиКлиент.ЗакончитьРедактированиеСОповещением(ПараметрыОбновленияФайла);
		
КонецПроцедуры


&НаКлиенте
Процедура Освободить(Команда)
	
	Если Не ЗаписатьЕслиНовый() Тогда
		Возврат; 
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Приложения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыОсвобожденияФайла = РаботаСФайламиКлиент.ПараметрыОсвобожденияФайла(
		Неопределено, 
		ТекущиеДанные.Приложение);
	ПараметрыОсвобожденияФайла.ХранитьВерсии = Ложь;
	ПараметрыОсвобожденияФайла.РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
	ПараметрыОсвобожденияФайла.Редактирует = ТекущиеДанные.Редактирует;
	ПараметрыОсвобожденияФайла.УникальныйИдентификатор = УникальныйИдентификатор;
	РаботаСФайламиКлиент.ОсвободитьФайлСОповещением(ПараметрыОсвобожденияФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПриложение(Команда)
	
	Если Не ЗаписатьЕслиНовый() Тогда
		Возврат; 
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Приложения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РаботаСЗадачамиКлиент.ПросмотретьПриложение(
		ТекущиеДанные.Приложение,
		УникальныйИдентификатор,
		ПредыдущийАдресФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура НаправитьНаИсполнение(Команда)
	
	КлючевыеОперации = "ЗадачаНаправитьНаИсполнение";
	ОценкаПроизводительностиКлиент.ЗамерВремени(КлючевыеОперации);
	
	ПеренестиПоляВТаблицуИсполнителей();
	
	// Удалим неуказанных исполнителей.
	ОбщегоНазначенияДокументооборотКлиент.УдалитьПустыеСтрокиТаблицы(
		Объект.Участники, "Участник");
	
	// Добавим единственного исполнителя.
	Если Не УказаныИсполнители() Тогда
		
		СтрокаОтветственный = Объект.Участники.Добавить();
		СтрокаОтветственный.ВидУчастника = ВидУчастникаИсполнитель;
		СтрокаОтветственный.Участник = СотрудникиКлиент.ОсновнойСотрудник();
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Или Модифицированность Тогда
		
		ПараметрыЗаписи = Новый Структура("РежимЗаписи");
		ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение;
		ПараметрыЗаписи.Вставить("НеОбновлятьЖизненныйЦикл");
		
		Если Не Записать(ПараметрыЗаписи) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ПроверкаУчастниковПройдена = ПроверитьУчастников();
	Если Не ПроверкаУчастниковПройдена Тогда
		Возврат;
	КонецЕсли;
	
	НаправитьНаИсполнениеПродолжение();
	
КонецПроцедуры

&НаКлиенте
Процедура НесколькоИсполнителей(Команда)
	
	НесколькоИсполнителейРеализация();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьХронометраж(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	НуженДиалог = УчетВремениКлиент.НуженДиалогДляХронометража(
		ВключенХронометраж, 
		ДатаНачалаХронометража,
		ВидыРабот);
	Если Не НуженДиалог Тогда
		
		ПараметрыОповещения = Неопределено;
		ПереключитьХронометражНаСервере(ПараметрыОповещения);
		УчетВремениКлиент.ПоказатьОповещение(
			ПараметрыОповещения,
			ВключенХронометраж,
			Объект.Ссылка);
		
		Возврат;
		
	КонецЕсли;
	
	ДлительностьРаботы = УчетВремениКлиент.ПолучитьДлительностьРаботы(ДатаНачалаХронометража);
	
	ОписаниеРаботы = СтрШаблон(
		НСтр("ru = 'Работа над задачей ""%1""'"),
		Объект.Ссылка);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаОтчета", ОбщегоНазначенияКлиент.ДатаСеанса());
	ПараметрыФормы.Вставить("ВидыРабот", ВидыРабот);
	ПараметрыФормы.Вставить("ОписаниеРаботы", ОписаниеРаботы);
	ПараметрыФормы.Вставить("ДлительностьРаботы", ДлительностьРаботы);
	ПараметрыФормы.Вставить("НачалоРаботы", ДатаНачалаХронометража);
	ПараметрыФормы.Вставить("Объект", Объект.Ссылка);
	ПараметрыФормы.Вставить("СпособУказанияВремени", СпособУказанияВремени);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПереключитьХронометражПродолжение",
		ЭтотОбъект,
		Новый Структура("Объект, ПараметрыОповещения", Объект.Ссылка, ПараметрыОповещения));
	
	ОткрытьФорму(
		"РегистрСведений.ФактическиеТрудозатраты.Форма.ФормаДобавленияРаботы",
		ПараметрыФормы,,,,,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьИсполнителей(Команда)
	
	ПодобратьИсполнителейРеализация();
	
КонецПроцедуры

&НаКлиенте
Процедура ПраваДоступа(Команда)
	
	ДокументооборотПраваДоступаКлиент.ОткрытьФормуПравДоступа(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтветственного(Команда)
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Или Не ЗначениеЗаполнено(ТекущиеДанные.Участник) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанныеВидУчастника = ТекущиеДанные.ВидУчастника;
	
	Если ТекущиеДанныеВидУчастника = ВидУчастникаПроверяющий Тогда 
		Возврат;
	КонецЕсли;	

	Если ТекущиеДанныеВидУчастника = ВидУчастникаОтветственный Тогда
		
		ТекущиеДанные.ВидУчастника = ВидУчастникаИсполнитель;
		
		СортироватьУчастников();
		
		УчастникиОбработкаАктивизацииСтроки();
		
		Модифицированность = Истина;
		
	ИначеЕсли ТекущиеДанныеВидУчастника = ВидУчастникаИсполнитель Тогда
		
		ОтветственныйПодходит = ПроверитьУчастникаПоПравиламКоммуникаций(ТекущиеДанные.Участник, ВидУчастникаИсполнитель);
		
		Если Не ОтветственныйПодходит Тогда
			
			ПравилаКоммуникацийКлиент.ПоказатьНарушение(ТекущиеДанные.Участник, 
				ПолучитьПравилоКоммуникаций(ВидУчастникаОтветственный));
			
			Возврат;
		КонецЕсли;
		
		// найти прежнего Ответственного и поменять
		Для Каждого Стр Из Объект.Участники Цикл
			
			Если Стр.ВидУчастника = ВидУчастникаОтветственный Тогда
				
				ИсполнительПодходит = ПроверитьУчастникаПоПравиламКоммуникаций(Стр.Участник, ВидУчастникаИсполнитель);
				
				Если Не ИсполнительПодходит Тогда
					
					ПравилаКоммуникацийКлиент.ПоказатьНарушение(Стр.Участник,
						ПолучитьПравилоКоммуникаций(ВидУчастникаИсполнитель));
					
					Возврат;
				Иначе
					Стр.ВидУчастника = ВидУчастникаИсполнитель;
				КонецЕсли;
				
				// Ответственный должен быть один в документе, значит нет смысла дальше перебирать строки.
				Прервать;
				
			КонецЕсли;
				
		КонецЦикла;	
		
		ТекущиеДанные.ВидУчастника = ВидУчастникаОтветственный;
		
		СортироватьУчастников();
		
		УчастникиОбработкаАктивизацииСтроки();
		
		Модифицированность = Истина; 
		
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ФайлыОткрытьКарточку(Команда)
	
	Если Не ЗаписатьЕслиНовый() Тогда
		Возврат; 
	КонецЕсли;
	
	ДанныеСтроки = Элементы.Приложения.ТекущиеДанные;
	
	Если ДанныеСтроки <> Неопределено Тогда
		РаботаСЗадачамиКлиент.ПоказатьПриложение(ДанныеСтроки.Приложение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьФайл(Команда)
	
	Если Не ЗаписатьЕслиНовый() Тогда
		Возврат; 
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Приложения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
			
	КомандыРаботыСФайламиКлиент.Редактировать(ТекущиеДанные.Приложение);
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзФайлаНаДиске(Команда)
	
	Если Не ЗаписатьЕслиНовый() Тогда
		Возврат; 
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Приложения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;

	ТекущееПриложение = ТекущиеДанные.Приложение;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаИРабочийКаталог(ТекущееПриложение);
	
	РаботаСФайламиКлиент.ОбновитьИзФайлаНаДискеСОповещением(
		Неопределено,
		ДанныеФайла,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаписать(Команда)
	
	ПараметрыЗаписи = Новый Структура("РежимЗаписи");
	ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение;
	
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометкуУдаления(Команда)
	
	РаботаСЗадачамиКлиент.СнятьПометкуУдаления(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Удалить(Команда)
	
	УдалитьНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьТрудозатраты(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	УчетВремениКлиент.ДобавитьВОтчетКлиент(
		ОбщегоНазначенияКлиент.ДатаСеанса(),
		ВключенХронометраж,
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВидыРабот,
		Объект.Ссылка,
		СпособУказанияВремени,
		Элементы.ПереключитьХронометраж,
		Ложь,
		ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСебяПроверяющим(Команда)
	
	Если РежимТаблицы Тогда
		
		ДобавитьЗаменитьУчастникаПоВиду(
			СотрудникиКлиент.ОсновнойСотрудник(), 
			ВидУчастникаПроверяющий);
		УчастникиПриИзмененииНаСервере(Неопределено)
	Иначе
		
		Проверяющий = СотрудникиКлиент.ОсновнойСотрудник();
		ПроверяющийПредставление = Проверяющий;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблону(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Истина);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьПоШаблонуПослеВыбора", ЭтотОбъект);
	
	ОткрытьФорму(
		"Справочник.ШаблоныЗадач.ФормаВыбора", 
		ПараметрыФормы,,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура НаправитьНаИсполнениеПродолжение() Экспорт
	
	РаботаСЗадачамиКлиент.НаправитьНаИсполнение(
		Объект.Ссылка,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьИсполнителейРеализация(ТекущийВидУчастника = Неопределено)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗаголовокФормы", ЗаголовокФормыВыбораИсполнителей);
	ПараметрыФормы.Вставить("ЗаголовокСпискаВыбранных", ЗаголовокСпискаВыбранныхУчастников + ":");
	ПараметрыФормы.Вставить("ПодменятьПользователейСотрудниками", Истина);
	ПараметрыФормы.Вставить("РежимРаботыФормы", 2);
	ПараметрыФормы.Вставить("ОтображатьСотрудников", Истина);
	ПараметрыФормы.Вставить("ОтображатьРоли", Истина);
	ПараметрыФормы.Вставить("КонтекстОткрытия", Объект.Ссылка);
	ПараметрыФормы.Вставить("УстановитьВыделение", Объект.Автор);
	ПараметрыФормы.Вставить("КонтролироватьСотрудниковБезПользователя", Истина);
	ПараметрыФормы.Вставить("Оптимизировать", Истина);
	ПараметрыФормы.Вставить("ИдентификаторФормыВладельца", УникальныйИдентификатор);
	
	ПараметрыФормы.Вставить(
		"ПравилаКоммуникаций",
		ПравилаКоммуникацийКлиентСервер.КонтекстВыбора(
			ЭтотОбъект, ,
			?(ЗначениеЗаполнено(ТекущийВидУчастника),
				ТекущийВидУчастника,
				ВидУчастникаИсполнитель)));
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПодобратьИсполнителейПослеВыбора", ЭтотОбъект);
	РаботаСАдреснойКнигойКлиент.ВыбратьАдресатов(ПараметрыФормы, ЭтотОбъект, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьИсполнителейПослеВыбора(АдресРезультата, ДопПараметры) Экспорт
	
	Если АдресРезультата = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьИсполнителейИзХранилища(АдресРезультата);
	ОбновитьСписокВыбораВидУчастника();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьХронометражПродолжение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат <> Неопределено Тогда
		
		ДобавитьВОтчетИОбновитьФорму(
			Результат,
			ДополнительныеПараметры.ПараметрыОповещения);
		
		УчетВремениКлиент.ПоказатьОповещение(
			ДополнительныеПараметры.ПараметрыОповещения,
			ВключенХронометраж,
			ДополнительныеПараметры.Объект);
		
	Иначе
		
		ОтключитьХронометражСервер();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьКартинкуИзБуфераЗавершение(Результат, ПутьКФайлу) Экспорт
	
	Если Результат = Истина Тогда
		
		Если Не ПустаяСтрока(ПутьКФайлу) Тогда
			
			НеОткрыватьКарточкуПослеСозданияИзФайла = Истина;
			Приложение = РаботаСФайламиКлиент.СоздатьДокументНаОсновеФайла(
				ПутьКФайлу, Объект.Ссылка, ЭтотОбъект, НеОткрыватьКарточкуПослеСозданияИзФайла);
				
			СтрокаПриложения = Объект.Приложения.Добавить();
			СтрокаПриложения.Приложение = Приложение;
			
			Если ТипЗнч(Приложение) = Тип("СправочникСсылка.Файлы") Тогда
				ДанныеФайлов = ДанныеФайлов(Приложение);
				ДанныеФайла = ДанныеФайлов.Получить(Приложение);
				ЗаполнитьЗначенияСвойств(СтрокаПриложения, ДанныеФайла);
			Иначе
				СтрокаПриложения.ИндексКартинки = РаботаСЗадачамиКлиентСервер.ИндексКартинкиПриложения(Приложение);
			КонецЕсли;
			ОбновитьПредставлениеПриложений();
			
			Модифицированность = Истина;
			
			ПараметрыЗаписи = Новый Структура("РежимЗаписи");
			ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение;
			
			Записать(ПараметрыЗаписи); // запишем еще раз, т.к. спр Файл уже записан, а табл часть Приложения еще нет
				
		Иначе
			ПоказатьПредупреждение(,НСтр("ru = 'Буфер обмена не содержит картинки'"));
		КонецЕсли;
	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Функция ЗаписатьЕслиНовый()
	
	ПродолжитьОперацию = Истина;
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат ПродолжитьОперацию;
	КонецЕсли;
	
	Если Не ПроверитьЗаполнение() Тогда
		ПродолжитьОперацию = Ложь;
		Возврат ПродолжитьОперацию;
	КонецЕсли;
	
	ПараметрыЗаписи = Новый Структура("РежимЗаписи");
	ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение;
	
	Если Не Записать(ПараметрыЗаписи) Тогда
		ПродолжитьОперацию = Ложь;
		Возврат ПродолжитьОперацию;
	КонецЕсли;
	  
	Возврат ПродолжитьОперацию;
	
КонецФункции

&НаСервере
Процедура ВидЗадачиПриИзмененииНаСервере()
	
	ВидЗадачиПриИзмененииКонвертировать();
	
	НастроитьФормуПоВидуЗадачи();
	
КонецПроцедуры

&НаСервере
Процедура ВидЗадачиПриИзмененииКонвертировать()
	
	Если НастроенныйВидЗадачи = Объект.ВидЗадачи Тогда
		Возврат;
	КонецЕсли;
	
	СтарыеДанныеВида = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(НастроенныйВидЗадачи);
	НовыеДанныеВида = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(Объект.ВидЗадачи);
	
	// Конвертация заголовка.
	СтарыйЗаголовокПоШаблону = ЗаголовокПоШаблону(СтарыеДанныеВида.ШаблонЗаголовка);
	Если Объект.Заголовок = СтарыйЗаголовокПоШаблону Тогда
		Объект.Заголовок = ЗаголовокПоШаблону(НовыеДанныеВида.ШаблонЗаголовка);
	КонецЕсли;
	
	// Конвертация участников.
	Если Элементы.СтраницыУчастники.ТекущаяСтраница = Элементы.СтраницаПоля Тогда
		
		ИсполнительПодходит = ПроверитьУчастникаПоПравиламКоммуникаций(
			Исполнитель,
			НовыеДанныеВида.ВидУчастникаИсполнитель);
		Если Не ИсполнительПодходит Тогда
			Исполнитель = Неопределено;
			ИсполнительПредставление = "";
		КонецЕсли;
		
		ПроверяющийПодходит = ПроверитьУчастникаПоПравиламКоммуникаций(
			Проверяющий,
			НовыеДанныеВида.ВидУчастникаПроверяющий);
		Если Не ПроверяющийПодходит Тогда
			Проверяющий = Неопределено;
			ПроверяющийПредставление = "";
		КонецЕсли;
		
		// Нужно перезаполнить табличную часть участники. Иначе остаются сведения от старого ВидаЗадачи.
		Объект.Участники.Очистить();
		
		Если ИсполнительПодходит Тогда
			СтрокаУчастника = Объект.Участники.Добавить();
			СтрокаУчастника.ВидУчастника = НовыеДанныеВида.ВидУчастникаИсполнитель;
			СтрокаУчастника.Участник = Исполнитель;
		КонецЕсли;
		
		Если ПроверяющийПодходит Тогда
			СтрокаУчастника = Объект.Участники.Добавить();
			СтрокаУчастника.ВидУчастника = НовыеДанныеВида.ВидУчастникаПроверяющий;
			СтрокаУчастника.Участник = Проверяющий;
		КонецЕсли;
		
	Иначе
		
		ЕстьИсполнитель = Ложь;
		ЕстьПроверяющий = Ложь;
		КоличествоЭлементов = Объект.Участники.Количество();
		Для Индекс = 1 По КоличествоЭлементов Цикл
			
			ОбратныйИндекс = КоличествоЭлементов - Индекс;
			СтрокаУчастника = Объект.Участники[ОбратныйИндекс];
			
			СтрокаАктуальна = Ложь;
			Если СтрокаУчастника.ВидУчастника = СтарыеДанныеВида.ВидУчастникаОтветственный Тогда
				
				Если ЗначениеЗаполнено(НовыеДанныеВида.ВидУчастникаОтветственный) Тогда
					СтрокаУчастника.ВидУчастника = НовыеДанныеВида.ВидУчастникаОтветственный;
				Иначе
					СтрокаУчастника.ВидУчастника = НовыеДанныеВида.ВидУчастникаИсполнитель;
				КонецЕсли;
				
				УчастникПодходит = ПроверитьУчастникаПоПравиламКоммуникаций(
					СтрокаУчастника.Участник,
					НовыеДанныеВида.ВидУчастникаИсполнитель);
				Если УчастникПодходит Тогда
					СтрокаАктуальна = Истина;
					ЕстьИсполнитель = Истина;
				КонецЕсли;
				
			ИначеЕсли СтрокаУчастника.ВидУчастника = СтарыеДанныеВида.ВидУчастникаИсполнитель Тогда
				
				СтрокаУчастника.ВидУчастника = НовыеДанныеВида.ВидУчастникаИсполнитель;
				
				УчастникПодходит = ПроверитьУчастникаПоПравиламКоммуникаций(
					СтрокаУчастника.Участник,
					СтрокаУчастника.ВидУчастника);
				Если УчастникПодходит Тогда
					СтрокаАктуальна = Истина;
					ЕстьИсполнитель = Истина;
				КонецЕсли;
				
			ИначеЕсли СтрокаУчастника.ВидУчастника = СтарыеДанныеВида.ВидУчастникаПроверяющий Тогда
				
				СтрокаУчастника.ВидУчастника = НовыеДанныеВида.ВидУчастникаПроверяющий;
				
				УчастникПодходит = ПроверитьУчастникаПоПравиламКоммуникаций(
					СтрокаУчастника.Участник,
					СтрокаУчастника.ВидУчастника);
				Если УчастникПодходит Тогда
					СтрокаАктуальна = Истина;
					ЕстьПроверяющий = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрокаАктуальна Тогда
				Продолжить;
			КонецЕсли;
			
			Объект.Участники.Удалить(ОбратныйИндекс);
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(НовыеДанныеВида.ВидУчастникаИсполнитель) И Не ЕстьИсполнитель Тогда
			
			СтрокаУчастника = Объект.Участники.Вставить(0);
			СтрокаУчастника.Участник = Справочники.Сотрудники.ПустаяСсылка();
			СтрокаУчастника.ВидУчастника = НовыеДанныеВида.ВидУчастникаИсполнитель;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НовыеДанныеВида.ВидУчастникаПроверяющий) И Не ЕстьПроверяющий Тогда
			
			СтрокаУчастника = Объект.Участники.Добавить();
			СтрокаУчастника.Участник = Справочники.Сотрудники.ПустаяСсылка();
			СтрокаУчастника.ВидУчастника = НовыеДанныеВида.ВидУчастникаПроверяющий;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайла(Приложение)
	
	Если ТипЗнч(Приложение) <> Тип("СправочникСсылка.Файлы") Тогда
		РаботаСЗадачамиКлиент.ПоказатьПриложение(Приложение);
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(
		Приложение,
		Неопределено,
		УникальныйИдентификатор,
		Неопределено,
		ПредыдущийАдресФайла);
		
	#Если ВебКлиент Тогда
			
		РаботаСФайламиКлиент.ОткрытьФайлСОповещением(
			Неопределено,
			ДанныеФайла,
			УникальныйИдентификатор);
			
		Возврат;
	#КонецЕсли
		
	Если ЗначениеЗаполнено(ДанныеФайла.Редактирует)
		И Не ДанныеФайла.РедактируетТекущийПользователь Тогда
		
		ТекстВопроса =
			СтрШаблон(
				НСтр("ru = 'Файл ""%1"" уже занят пользователем ""%2"".
					|Открыть его в режиме только для чтения ?'"),
				ДанныеФайла.ПолноеНаименованиеВерсии,
				Строка(ДанныеФайла.Редактирует));
				
		ПараметрыОбработчика = Новый Структура;
		ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
				
		ОбработчикВопроса = Новый ОписаниеОповещения("ПослеВопросаФайлЗанятДругим", 
			ЭтотОбъект, ПараметрыОбработчика);
				
		ПоказатьВопрос(ОбработчикВопроса, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	КомандыРаботыСФайламиКлиент.Редактировать(Приложение);
	
КонецПроцедуры

&НаСервере
Функция ВышестоящаяЗадачаИлиДействие()
	
	Возврат ?(ЗначениеЗаполнено(Объект.ВышестоящееДействие),
		Объект.ВышестоящееДействие,
		Объект.ВышестоящаяЗадача);
	
КонецФункции

&НаКлиенте
Процедура ПослеВопросаФайлЗанятДругим(Результат, ПараметрыВыполнения) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат; // ничего не делаем
	КонецЕсли;
	
	РаботаСФайламиКлиент.ОткрытьФайлСОповещением(Неопределено, 
		ПараметрыВыполнения.ДанныеФайла, УникальныйИдентификатор); 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеФайлов(Файлы)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Файлы.Редактирует КАК Редактирует,
		|	Файлы.ПометкаУдаления КАК ПометкаУдаления,
		|	Файлы.ИндексКартинки КАК ИндексКартинки,
		|	ВЫБОР
		|		КОГДА Файлы.Редактирует В (&ТекущийПользовательИСотрудники)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК РедактируетТекущийПользователь,
		|	ВЫБОР
		|		КОГДА НЕ Файлы.Редактирует В (&ТекущийПользовательИСотрудники)
		|				И Файлы.Редактирует <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|				И Файлы.Редактирует <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
		|				И Файлы.Редактирует <> НЕОПРЕДЕЛЕНО
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК РедактируетДругойПользователь,
		|	Файлы.Ссылка КАК Ссылка,
		|	Файлы.ТекущаяВерсияРазмер КАК Размер
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.Ссылка В(&Файлы)");
	Запрос.УстановитьПараметр("Файлы", Файлы);
	Запрос.УстановитьПараметр("ТекущийПользовательИСотрудники", Сотрудники.ТекущийПользовательИСотрудники());
	
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		
		СтруктураФайла = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицы);
		
		СтруктураФайла.Вставить("ПолноеИмяФайлаВРабочемКаталоге", "");
		СтруктураФайла.Вставить("ДатаМодификацииУниверсальнаяВБазе", ТекущаяДатаСеанса());
		
		Если СтруктураФайла.РедактируетТекущийПользователь = Истина 
				И ЗначениеЗаполнено(СтруктураФайла.Ссылка) Тогда
				
			ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(
				СтруктураФайла.Ссылка);
			СтруктураФайла.ПолноеИмяФайлаВРабочемКаталоге = ДанныеФайла.ПолноеИмяФайлаВРабочемКаталоге;
			СтруктураФайла.ДатаМодификацииУниверсальнаяВБазе = ДанныеФайла.ДатаМодификацииУниверсальная;
		КонецЕсли;
		
		Результат.Вставить(
			СтрокаТаблицы.Ссылка,
			СтруктураФайла);
			
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьФайлВПриложения()
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Если Не ПроверитьЗаполнение() Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыЗаписи = Новый Структура("РежимЗаписи");
		ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение;
		
		Если Не Записать(ПараметрыЗаписи) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	РежимСоздания = 2; // с диска
	НеОткрыватьКарточкуПослеСозданияИзФайла = Истина;
	НеОткрыватьФормуВыбораРежимаСозданияФайла = Истина;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗавершитьДобавлениеПриложения", ЭтотОбъект);
	РаботаСФайламиКлиент.ДобавитьФайл(
		ОписаниеОповещения,
		Объект.Ссылка,
		ЭтотОбъект,
		РежимСоздания,
		НеОткрыватьКарточкуПослеСозданияИзФайла,
		,,,,
		НеОткрыватьФормуВыбораРежимаСозданияФайла);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВОтчетИОбновитьФорму(ПараметрыОтчета, ПараметрыОповещения) Экспорт
	
	ПереключитьХронометражНеМеняяПодсказку = Новый Структура("Подсказка");
	УчетВремени.ДобавитьВОтчетИОбновитьФорму(
		ПараметрыОтчета, 
		ПараметрыОповещения,
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ПереключитьХронометражНеМеняяПодсказку,
		Элементы.ПереключитьХронометраж);
	
	ОбновитьТрудозатраты();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьМассивФайлов(МассивСсылокФайлов)
	
	ДанныеФайлов = ДанныеФайлов(МассивСсылокФайлов);
	
	Для Каждого Приложение Из МассивСсылокФайлов Цикл
		
		СтрокаПриложения = Объект.Приложения.Добавить();
		СтрокаПриложения.Приложение = Приложение;
		
		Если ТипЗнч(Приложение) = Тип("СправочникСсылка.Файлы") Тогда
			ДанныеФайла = ДанныеФайлов.Получить(Приложение);
			ЗаполнитьЗначенияСвойств(СтрокаПриложения, ДанныеФайла);
		Иначе
			СтрокаПриложения.ИндексКартинки = РаботаСЗадачамиКлиентСервер.ИндексКартинкиПриложения(Приложение);
		КонецЕсли;
		
	КонецЦикла;
	ОбновитьПредставлениеПриложений();
	
	Модифицированность = Истина;
	
	ПараметрыЗаписи = Новый Структура("РежимЗаписи");
	ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение;
	
	Записать(ПараметрыЗаписи); // запишем еще раз, т.к. спр Файл уже записан, а табл часть Приложения еще нет
	
КонецПроцедуры

&НаКлиенте
Функция ЕстьЗанятыеФайлы()
	
	#Если ВебКлиент Тогда
		Возврат Ложь;
	#КонецЕсли	
	
	Для Каждого Стр Из Объект.Приложения Цикл 
		
		Если Стр.РедактируетТекущийПользователь Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ЗаголовокПоШаблону(ШаблонЗаголовка)
	
	ЗаголовокПоШаблону = "";
	
	Если Не ЗначениеЗаполнено(ШаблонЗаголовка) Тогда
		
		Если ЗначениеЗаполнено(Объект.ВышестоящаяЗадача) Тогда
			ЗаголовокПоШаблону = Строка(Объект.ВышестоящаяЗадача);
		ИначеЕсли Объект.Приложения.Количество() > 0 Тогда
			ЗаголовокПоШаблону = Строка(Объект.Приложения[0].Приложение);
		КонецЕсли;
		
		Возврат ЗаголовокПоШаблону;
		
	КонецЕсли;
		
	ЗаголовокПоШаблону = ШаблонЗаголовка;
	
	Если Объект.Приложения.Количество() = 0 Тогда
		Возврат ЗаголовокПоШаблону;
	КонецЕсли;
		
	ЗаголовокПоШаблону = СтрШаблон("%1 ""%2""", ЗаголовокПоШаблону, Строка(Объект.Приложения[0].Приложение));
	
	Возврат ЗаголовокПоШаблону;
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьДобавлениеПриложения(Приложение, ПараметрыВыполнения) Экспорт
	
	Если Не ЗначениеЗаполнено(Приложение) Тогда
		Возврат;
	КонецЕсли;
	
	Если Приложение = "ФайлСДиска" Тогда
		ДобавитьФайлВПриложения();
		Возврат;
	КонецЕсли;
	
	СтрокаПриложения = Объект.Приложения.Добавить();
	СтрокаПриложения.Приложение = Приложение;
	
	Если ТипЗнч(Приложение) = Тип("СправочникСсылка.Файлы") Тогда
		ДанныеФайлов = ДанныеФайлов(Приложение);
		ДанныеФайла = ДанныеФайлов.Получить(Приложение);
		ЗаполнитьЗначенияСвойств(СтрокаПриложения, ДанныеФайла);
	Иначе
		СтрокаПриложения.ИндексКартинки = РаботаСЗадачамиКлиентСервер.ИндексКартинкиПриложения(Приложение);
	КонецЕсли;
	ОбновитьПредставлениеПриложений();
	
	Модифицированность = Истина;
	
	ПараметрыЗаписи = Новый Структура("РежимЗаписи");
	ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение;
	
	Записать(ПараметрыЗаписи); // запишем еще раз, т.к. спр Файл уже записан, а табл часть Приложения еще нет
	
	Если ЭтоМобильныйКлиент Тогда 
		МК_НастроитьПоказатьСкрытьПриложения(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьПослеВопросаОДублях(Результат, ПараметрыЗаписи) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	НормализоватьУчастников();
	
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИконкиФайлов()
	
	МассивФайлов = Новый Массив;
	
	Для Каждого Стр Из Объект.Приложения Цикл 
		
		Если ТипЗнч(Стр.Приложение) = Тип("СправочникСсылка.Файлы") Тогда
			МассивФайлов.Добавить(Стр.Приложение);
		КонецЕсли;	
		
	КонецЦикла;	
	
	ДанныеФайлов = ДанныеФайлов(МассивФайлов);
	
	Для Каждого Стр Из Объект.Приложения Цикл 
		
		Если ТипЗнч(Стр.Приложение) = Тип("СправочникСсылка.Файлы") Тогда
			ДанныеФайла = ДанныеФайлов.Получить(Стр.Приложение);
			ЗаполнитьЗначенияСвойств(Стр, ДанныеФайла);
		Иначе
			Стр.ИндексКартинки = РаботаСЗадачамиКлиентСервер.ИндексКартинкиПриложения(Стр.Приложение);
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьПредставлениеПриложений();
	
КонецПроцедуры

&НаКлиенте
Функция ДублиУчастников()
	
	// Найдём полные дубли строк.
	ДублиУчастников = Новый Соответствие;
	УникальныеУчастники = Новый Соответствие;
	
	Для Каждого СтрокаУчастника Из Объект.Участники Цикл
		
		Если УникальныеУчастники[СтрокаУчастника.ВидУчастника] = Неопределено Тогда
			УникальныеУчастники[СтрокаУчастника.ВидУчастника] = Новый Соответствие;
		КонецЕсли;
		УникальныеУчастникиВида = УникальныеУчастники[СтрокаУчастника.ВидУчастника];
		
		Если УникальныеУчастникиВида[СтрокаУчастника.Участник] = Неопределено Тогда
			УникальныеУчастникиВида[СтрокаУчастника.Участник] = Истина;
		Иначе
			ДублиУчастников.Вставить(Строка(СтрокаУчастника.Участник), Истина);
		КонецЕсли;
		
	КонецЦикла;
	
	// Найдём исполнителей, которые ответственные.
	Ответственный = Ответственный();
	Если ЗначениеЗаполнено(Ответственный) Тогда
		
		КоличествоЭлементов = Объект.Участники.Количество();
		Для Индекс = 1 По КоличествоЭлементов Цикл
			
			СтрокаУчастника = Объект.Участники[КоличествоЭлементов - Индекс];
			Если СтрокаУчастника.ВидУчастника <> ВидУчастникаИсполнитель
				Или СтрокаУчастника.Участник <> Ответственный Тогда
				Продолжить;
			КонецЕсли;
			
			ДублиУчастников.Вставить(Строка(СтрокаУчастника.Участник), Истина);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ДублиУчастников;
	
КонецФункции

&НаКлиенте
Процедура НормализоватьУчастников()
	
	// Удалим пустые строки.
	ОбщегоНазначенияДокументооборотКлиент.УдалитьПустыеСтрокиТаблицы(
		Объект.Участники, "Участник");
	
	// Удалим дубли строк.
	ОбщегоНазначенияДокументооборотКлиент.УдалитьДублиСтрокТаблицы(Объект.Участники, "ВидУчастника, Участник");
	
	// Удалим исполнителей, которые ответственные.
	Ответственный = Ответственный();
	Если ЗначениеЗаполнено(Ответственный) Тогда
		
		КоличествоЭлементов = Объект.Участники.Количество();
		Для Индекс = 1 По КоличествоЭлементов Цикл
			
			СтрокаУчастника = Объект.Участники[КоличествоЭлементов - Индекс];
			Если СтрокаУчастника.ВидУчастника <> ВидУчастникаИсполнитель
				Или СтрокаУчастника.Участник <> Ответственный Тогда
				Продолжить;
			КонецЕсли;
			
			Объект.Участники.Удалить(СтрокаУчастника);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура Обновить(ОбновитьЖизненныйЦикл = Истина)
	
	ВышестоящаяЗадачаИлиДействие = ВышестоящаяЗадачаИлиДействие();
	
	УстановитьПривилегированныйРежим(Истина);
	СрокВышестоящейЗадачи = ?(ЗначениеЗаполнено(Объект.ВышестоящаяЗадача),
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВышестоящаяЗадача, "Срок"),
		Дата(1, 1, 1));
	УстановитьПривилегированныйРежим(Ложь);
	
	ОбновитьЗаголовок();
	
	ОбновитьВидимостьВидаЗадачи();
	ОбновитьВидимостьВышестоящейЗадачи();
	ОбновитьВидимостьСоздал();
	ОбновитьВидимостьЭлементов();
	Если ОбновитьЖизненныйЦикл Тогда
		ОбновитьЖизненныйЦикл();
	КонецЕсли;
	ОбновитьПодзадачи();
	ОбновитьУчастников();
	ОбновитьФлаг();
	
	ЗаполнитьИконкиФайлов();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовок()
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Заголовок = СтрШаблон(
			"%1 (%2)",
			РаботаСОбсуждениями.ПолучитьЗаголовок(Объект.Ссылка),
			Объект.ВидЗадачи);
	Иначе
		Заголовок = СтрШаблон(
			"%1 (%2)",
			НСтр("ru = 'Новая задача'"),
			Объект.ВидЗадачи);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьВышестоящейЗадачи()
	
	ВидимостьВышестоящейЗадачи = ЗначениеЗаполнено(ВышестоящаяЗадачаИлиДействие)
		И ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(ВышестоящаяЗадачаИлиДействие).Чтение;
	
	Элементы.ВышестоящаяЗадачаИлиДействие.Видимость = ВидимостьВышестоящейЗадачи;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьВидаЗадачи()
	
	ПараметрыДанныхВыбора = Новый Структура("Отбор, СтрокаПоиска");
	ПараметрыДанныхВыбора.Отбор = Новый Структура;
	ПараметрыДанныхВыбора.СтрокаПоиска = Неопределено;
	
	Для Каждого ПараметрВыбора Из Метаданные.Документы.Задача.Реквизиты.ВидЗадачи.ПараметрыВыбора Цикл
		
		Если СтрНачинаетсяС(ПараметрВыбора.Имя, "Отбор.") Тогда
			ИмяСвойства = СтрЗаменить(ПараметрВыбора.Имя, "Отбор.", "");
			ПараметрыДанныхВыбора.Отбор.Вставить(ИмяСвойства, ПараметрВыбора.Значение);
		Иначе
			ПараметрыДанныхВыбора.Вставить(ПараметрВыбора.Имя, ПараметрВыбора.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
	ДоступныеВидыЗадач = Справочники.ВидыЗадач.ПолучитьДанныеВыбора(ПараметрыДанныхВыбора);
	
	ДоступенВыборВидаЗадачи = ДоступныеВидыЗадач.Количество() > 1;
	
	Элементы.ВидЗадачи.Видимость = ДоступенВыборВидаЗадачи;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьЭлементов()
	
	ДанныеДоступностиКоманд = РаботаСЗадачами.ДанныеДоступностиКомандЗадач(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Ссылка));
	
	ВидСостоянияЗадач = РаботаСЗадачамиПовтИсп.ВидСостоянияЗадач(Объект.СостояниеЗадачи);
	ЭтоЧерновик = Перечисления.ВидыСостоянийЗадач.ЭтоЧерновик(ВидСостоянияЗадач);
	
	ПриложениеЯвляетсяВебКлиентом = ОбщегоНазначенияДокументооборот.ПриложениеЯвляетсяВебКлиентом();
	
	// Режим "Черновик".
	Элементы.ФормаНаправитьНаИсполнение.Видимость = ЭтоЧерновик;
	Элементы.ФормаНаправитьНаИсполнение.КнопкаПоУмолчанию = ЭтоЧерновик;
	Элементы.ВидЗадачи.Доступность = ЭтоЧерновик;
	Элементы.ФормаЗаписатьИЗакрыть.Видимость = Не ЭтоЧерновик;
	Элементы.ФормаЗаписатьИЗакрыть.КнопкаПоУмолчанию = Не ЭтоЧерновик;
	Элементы.ФормаЗакрыть.Видимость = Не ЭтоЧерновик;
	Элементы.ФормаВернутьНаДоработку.Видимость = Не ЭтоЧерновик;
	Элементы.ФормаОтменить.Видимость = Не ЭтоЧерновик;
	ДанныеДоступностиКоманды = 
		ДанныеДоступностиКоманд[Метаданные.Документы.Задача.Команды.Закрыть];
	Элементы.ФормаЗакрыть.Доступность = ДанныеДоступностиКоманды.Доступность;
	
	ДанныеДоступностиКоманды = 
		ДанныеДоступностиКоманд[Метаданные.Документы.Задача.Команды.ВернутьНаДоработку];
	Элементы.ФормаВернутьНаДоработку.Доступность = ДанныеДоступностиКоманды.Доступность;
	
	ДанныеДоступностиКоманды = 
		ДанныеДоступностиКоманд[Метаданные.Документы.Задача.Команды.Отменить];
	Элементы.ФормаОтменить.Доступность = ДанныеДоступностиКоманды.Доступность;
	
	Элементы.ЗаполнитьПоШаблону.Видимость = ЭтоЧерновик;
	
	// Режим "Тонкий клиент" Windows.
	Элементы.ВставитьКартинкуИзБуфера.Видимость = Не ПриложениеЯвляетсяВебКлиентом И ОбщегоНазначения.ЭтоWindowsКлиент();
	Элементы.ВставитьКартинкуИзБуфераКонтекст.Видимость = Не ПриложениеЯвляетсяВебКлиентом И ОбщегоНазначения.ЭтоWindowsКлиент();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьСоздал()
	
	Элементы.Создал.Видимость = Объект.Создал <> Объект.Автор;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЖизненныйЦикл()
	
	Если ЭтоНоваяЗадача Или ТолькоПросмотр Тогда
		Элементы.ГруппаЖизненныйЦиклКонтейнерПрокрутка.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаЖизненныйЦиклКонтейнерПрокрутка.Видимость = Истина;
	
	СхемаЖизненногоЦикла = РаботаСЗадачами.СхемаЖизненногоЦикла(Объект.Ссылка);
	
	// Обновление жизненного цикла.
	РаботаСЗадачами.ОбновитьЖизненныйЦикл(
		ЭтотОбъект,
		Элементы.ГруппаЖизненныйЦикл,
		Элементы.ГруппаЖизненныйЦиклКонтейнерПрокрутка,
		ДанныеЖизненногоЦикла,
		СхемаЖизненногоЦикла);
		
	Если ЭтоМобильныйКлиент Тогда
		Элементы.МК_КнопкаСтраницаИстория.Видимость = Элементы.ГруппаЖизненныйЦиклКонтейнерПрокрутка.Видимость;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПодзадачи()
	
	ДанныеДереваПодзадач = РаботаСЗадачами.ДанныеДереваПодзадач(Объект.Ссылка, Документы.ДействиеЗадачи.ПустаяСсылка());
	РаботаСЗадачамиКлиентСервер.ОбновитьДерево(Подзадачи, Элементы.Подзадачи, ДанныеДереваПодзадач);
	
	СтрокиПодзадач = Подзадачи.ПолучитьЭлементы();
	КоличествоСтрокПодзадач = СтрокиПодзадач.Количество();
	Элементы.Подзадачи.Видимость = КоличествоСтрокПодзадач > 0;
		
	Если ЭтоМобильныйКлиент Тогда
		Элементы.МК_КнопкаСтраницаПодзадачи.Видимость = Элементы.Подзадачи.Видимость;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПодзадачиИУчастников()
	
	ОбновитьПодзадачи();
	ОбновитьУчастников();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеПриложений()
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивФайлов = Новый Массив;
	Для Каждого СтрокаДляОбработки Из Объект.Приложения Цикл 
		
		Если ТипЗнч(СтрокаДляОбработки.Приложение) <> Тип("СправочникСсылка.Файлы") Тогда
			Продолжить;
		КонецЕсли;
		
		МассивФайлов.Добавить(СтрокаДляОбработки.Приложение);
		
	КонецЦикла;
	
	РеквизитыФайлов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		МассивФайлов,
		"ИндексКартинки, ХранитьВерсии, Редактирует, Описание,
		|ПометкаУдаления, ПодписанЭП, ТекущаяВерсияРасширение");
	
	Для Каждого СтрокаДляОбработки Из Объект.Приложения Цикл
		
		МассивПредставление = Новый Массив;
		МассивПредставление.Добавить(Строка(СтрокаДляОбработки.Приложение));
		
		Если ТипЗнч(СтрокаДляОбработки.Приложение) = Тип("СправочникСсылка.Файлы") Тогда
			
			РеквизитыФайла = РеквизитыФайлов[СтрокаДляОбработки.Приложение];
			Если ЗначениеЗаполнено(РеквизитыФайла.Описание) Тогда
				МассивПредставление.Добавить(РеквизитыФайла.Описание);
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаДляОбработки.ПредставлениеПриложения = СтрСоединить(МассивПредставление, ", ");
		
	КонецЦикла;
	
	Если Объект.Приложения.Количество() <> 0 Тогда
		Элементы.ПриложенияПриложение.Заголовок = СтрШаблон(
				НСтр("ru = 'Приложения (%1)'"),
				Объект.Приложения.Количество());
	Иначе
		Элементы.ПриложенияПриложение.Заголовок = НСтр("ru = 'Приложения'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтрокуПриложения(Приложение)
	
	СтрокаНужногоПриложения = Неопределено;
	Для Каждого СтрокаПриложения Из Объект.Приложения Цикл
		
		Если СтрокаПриложения.Приложение = Приложение Тогда 
			СтрокаНужногоПриложения = СтрокаПриложения;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрокаНужногоПриложения <> Неопределено Тогда
		ДанныеФайлов = ДанныеФайлов(Приложение);
		ДанныеФайла = ДанныеФайлов.Получить(Приложение);
		ЗаполнитьЗначенияСвойств(СтрокаНужногоПриложения, ДанныеФайла);
		ОбновитьПредставлениеПриложений();
	КонецЕсли;
	
	УстановитьДоступностьКомандПриложений();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТрудозатраты(ТекущийОбъект = Неопределено)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ЗадачаОбъект = ?(ТекущийОбъект <> Неопределено,
		ТекущийОбъект,
		Объект.Ссылка.ПолучитьОбъект());
	Трудозатраты = ЗадачаОбъект.Трудозатраты();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьУчастников()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВсеДействия = Новый Массив;
	Для Каждого СтрокаУчастника Из Объект.Участники Цикл
		
		Если ЗначениеЗаполнено(СтрокаУчастника.ДействиеУчастника) Тогда
			ВсеДействия.Добавить(СтрокаУчастника.ДействиеУчастника);
		КонецЕсли;
		
	КонецЦикла;	
	
	РеквизитыДействий = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		ВсеДействия, 
		"ЕстьПриложения, РезультатДействия, РезультатДействияТекстом,
		|СостояниеУчастникаЗадачи, ФактическийИсполнитель");
	
	ПредставленияУчастников = ПредставленияУчастниковПоНомерамСтрок();
	
	Для Каждого СтрокаУчастника Из Объект.Участники Цикл
		
		СтрокаУчастника.ПредставлениеУчастника = ПредставленияУчастников[СтрокаУчастника.НомерСтроки];
		
		Если Не ЗначениеЗаполнено(СтрокаУчастника.ДействиеУчастника) Тогда
			Продолжить;
		КонецЕсли;
		
		РеквизитыДействия = РеквизитыДействий[СтрокаУчастника.ДействиеУчастника];
		
		Если ЗначениеЗаполнено(РеквизитыДействия.ФактическийИсполнитель) Тогда
			СтрокаУчастника.ПредставлениеУчастника = Строка(РеквизитыДействия.ФактическийИсполнитель);
		КонецЕсли;
		
		СтрокаУчастника.Состояние = РеквизитыДействия.СостояниеУчастникаЗадачи;
		СтрокаУчастника.ЕстьПриложения = РеквизитыДействия.ЕстьПриложения;
		МассивРезультат = Новый Массив;
		Если ЗначениеЗаполнено(РеквизитыДействия.РезультатДействия) Тогда
			МассивРезультат.Добавить(РеквизитыДействия.РезультатДействия);
		КонецЕсли;
		Если ЗначениеЗаполнено(РеквизитыДействия.РезультатДействияТекстом) Тогда
			МассивРезультат.Добавить(РеквизитыДействия.РезультатДействияТекстом);
		КонецЕсли;
		СтрокаУчастника.Результат = СтрСоединить(МассивРезультат, ", ");
		
		Если Не РежимТаблицы Тогда
			
			МассивРезультат.Вставить(0, СтрокаУчастника.Участник);
			ПредставлениеПолное = СтрСоединить(МассивРезультат, ", ");
			
			Если СтрокаУчастника.ВидУчастника = ВидУчастникаИсполнитель Тогда
				ИсполнительПредставление = ПредставлениеПолное;
			ИначеЕсли СтрокаУчастника.ВидУчастника = ВидУчастникаПроверяющий Тогда
				ПроверяющийПредставление = ПредставлениеПолное;
			КонецЕсли;
				
		КонецЕсли;	
		
	КонецЦикла;
	
	Если ЭтоМобильныйКлиент Тогда
		МК_НастроитьПоказатьСкрытьУчастников(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьФлаг()
	
	Элементы.ФормаПодменюФлаги.Картинка = Перечисления.ФлагиОбъектов.КартинкаФлага(Объект.Флаг);
	
КонецПроцедуры

&НаСервере
Процедура ОтключитьХронометражСервер() Экспорт
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ПереключитьХронометражНеМеняяПодсказку = Новый Структура("Подсказка");
	УчетВремени.ОтключитьХронометражСервер(
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		Объект.Ссылка,
		ПереключитьХронометражНеМеняяПодсказку,
		Элементы.ПереключитьХронометраж);
	
КонецПроцедуры

&НаСервере
Процедура ПереключитьХронометражНаСервере(ПараметрыОповещения)
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ПереключитьХронометражНеМеняяПодсказку = Новый Структура("Подсказка");
	УчетВремени.ПереключитьХронометражСервер(
		ПараметрыОповещения,
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		Объект.Ссылка,
		ВидыРабот,
		ПереключитьХронометражНеМеняяПодсказку,
		Элементы.ПереключитьХронометраж);
	
КонецПроцедуры


&НаКлиенте
Процедура Подключаемый_Команда(Команда)
	
	РаботаСЗадачамиКлиент.ВыполнитьПодключаемуюКоманду(
		Команда,
		Объект.Ссылка,
		ДанныеЖизненногоЦикла,
		УникальныйИдентификатор,
		ПредыдущийАдресФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_Нажатие(Элемент, СтандартнаяОбработка)
	
	РаботаСЗадачамиКлиент.ОбработатьНажатиеЖизненногоЦикла(
		Элемент,
		ДанныеЖизненногоЦикла,
		СтандартнаяОбработка,
		УникальныйИдентификатор,
		ПредыдущийАдресФайла,
		Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Функция ПредложитьСохранитьЗанятыеФайлы()
	
	Если Не ЕстьЗанятыеФайлы() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МассивЗахваченныхФайлов = РаботаСФайламиВызовСервера.ПолучитьСписокЗанятыхФайлов(Объект.Ссылка);
	
	СписокЗанятыеWordФайлы = РаботаСФайламиКлиент.ПолучитьЗанятыеWordФайлы(
		Объект.Ссылка,
		УникальныйИдентификатор,
		МассивЗахваченныхФайлов);
	
	Если СписокЗанятыеWordФайлы.Количество() = 0 Тогда
		
		ДелопроизводствоКлиент.ПоместитьИзмененияФайлов(
			Объект.Ссылка,
			УникальныйИдентификатор,
			МассивЗахваченныхФайлов);
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СтрокаФайлов = "";
	Для Каждого ИмяРасширение Из СписокЗанятыеWordФайлы Цикл
		Если Не ПустаяСтрока(СтрокаФайлов) Тогда
			СтрокаФайлов = СтрокаФайлов + Символы.ВК;
		КонецЕсли;	
		СтрокаФайлов = СтрокаФайлов + ИмяРасширение;
	КонецЦикла;	
	
	Если СписокЗанятыеWordФайлы.Количество() > 1 Тогда
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Чтобы с файлами могли работать другие пользователи, закройте файлы:
			| 
			|%1.'"),
			СтрокаФайлов);
	Иначе
		ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Чтобы с файлом могли работать другие пользователи, закройте файл:
			| 
			|%1.'"),
			СтрокаФайлов);
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ПредложитьСохранитьЗанятыеФайлыПослеВопроса", ЭтотОбъект);
	ПоказатьПредупреждение(Обработчик, ТекстСообщения);
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ПредложитьСохранитьЗанятыеФайлыПослеВопроса(ПараметрыВыполнения) Экспорт
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Функция ПредлолжитьСохранитьЧерновик()
	
	Если Не ЭтоНоваяЗадача
		Или (Не ЗначениеЗаполнено(Объект.Ссылка) И Не Модифицированность)
		Или Объект.СостояниеЗадачи <> СостояниеЗадачиЧерновик Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОписаниеОповещенияВопроса = Новый ОписаниеОповещения(
		"ПредлолжитьСохранитьЧерновикПослеВопроса",
		ЭтотОбъект);
	
	ТекстВопроса = ТерминНеНаправленаНаИсполнение;
	
	КнопкиВопроса = Новый СписокЗначений;
	КнопкиВопроса.Добавить("Сохранить", НСтр("ru = 'Сохранить'"));
	КнопкиВопроса.Добавить("Удалить", НСтр("ru = 'Удалить'"));
	КнопкиВопроса.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Вернуться к задаче'"));
	
	КнопкаПоУмолчанию = "Сохранить";
	
	ЗаголовокВопроса = НСтр("ru = 'Сохранение задачи'");
	
	ПоказатьВопрос(
		ОписаниеОповещенияВопроса,
		ТекстВопроса,
		КнопкиВопроса,,
		КнопкаПоУмолчанию,
		ЗаголовокВопроса);
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ПредлолжитьСохранитьЧерновикПослеВопроса(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "Сохранить" Тогда
		
		СохранитьКакЧерновикНаКлиенте();
		
	ИначеЕсли Результат = "Удалить" Тогда
		
		УдалитьНаКлиенте();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИсполнителиНаСервере()
	
	МассивИсполнители = Новый Массив;
	Для Каждого СтрокаУчастника Из Объект.Участники Цикл
		
		Если СтрокаУчастника.ВидУчастника <> ВидУчастникаОтветственный
			И СтрокаУчастника.ВидУчастника <> ВидУчастникаИсполнитель Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаУчастника.Участник) Тогда
			Продолжить;
		КонецЕсли;
		
		МассивИсполнители.Добавить(СтрокаУчастника.Участник);
		
	КонецЦикла;
	
	Возврат МассивИсполнители;
	
КонецФункции

&НаКлиенте
Процедура ИсполнительОчистить()
	
	Исполнитель = Неопределено; 
	 
КонецПроцедуры

&НаКлиенте
Функция Ответственный()
	
	Ответственный = Неопределено;
	Для Каждого СтрокаУчастника Из Объект.Участники Цикл
		
		Если СтрокаУчастника.ВидУчастника <> ВидУчастникаОтветственный Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Ответственный) Тогда
			Ответственный = СтрокаУчастника.Участник;
		Иначе
			ВызватьИсключение НСтр("ru = 'Указано несколько ответственных.'");
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ответственный;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьПлановоеНачало() Экспорт
	
	Если Не ЗначениеЗаполнено(Объект.ДатаНачалаПлан)
		Или (НачалоМинуты(Объект.ДатаНачалаПлан) >= НачалоМинуты(ОбщегоНазначенияКлиент.ДатаСеанса())) Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьПредупреждение(, НСтр("ru = 'Установленное плановое начало уже прошло.'"), 2);
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьУчастников()
	
	РезультатПроверкиУчастниковПК = 
		РаботаСУчастникамиКлиент.ПроверитьУчастниковПоПравиламКоммуникаций(ЭтотОбъект, Объект);
	Если Не РезультатПроверкиУчастниковПК.УчастникиПодходят Тогда
		
		НаименованиеПредмета = НСтр("ru = 'Задача'");
		НаименованиеДействия = Элементы.ФормаНаправитьНаИсполнение.Заголовок;
		
		Обработчик = Новый ОписаниеОповещения("ОбработатьРезультатПроверкиПравилКоммуникацийПродолжение", 
			ЭтотОбъект);
		
		РаботаСУчастникамиКлиент.ОбработатьРезультатПроверкиПравилКоммуникаций(
			РезультатПроверкиУчастниковПК.НеПрошедшиеПроверку,
			НаименованиеПредмета, НаименованиеДействия,
			Обработчик);
		
		Возврат Ложь;
		
	КонецЕсли;
	
	РезультатПроверкиДействительностиУчастников = 
		РаботаСУчастникамиКлиент.ПроверитьДействительностьУчастников(ЭтотОбъект);
	Если Не РезультатПроверкиДействительностиУчастников.ВсеДействительны Тогда
		
		Обработчик = Новый ОписаниеОповещения("ОбработатьРезультатПроверкиДействительностиУчастниковПродолжение",
			ЭтотОбъект);
		
		РаботаСУчастникамиКлиент.ОбработатьРезультатПроверкиДействительностиУчастников(
			РезультатПроверкиДействительностиУчастников,
			Обработчик);
			
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Обработать результат проверки действительности участников продолжение.
// 
// Параметры:
//  Результат - Структура - результат проверки и выбор пользователя:
//   * РезультатПроверки - см. РаботаСУчастникамиВызовСервера.ПроверитьДействительностьУчастников
//   * ВариантОбработки - Число, КодВозвратаДиалога - 0 - заменить, 1 - оставить как есть,
//                                                    КодВозвратаДиалога.Отмена - отмена.
//  ДополнительныеПараметры - Произвольный
//
&НаКлиенте
Процедура ОбработатьРезультатПроверкиДействительностиУчастниковПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	ВариантОбработки = Результат.ВариантОбработки;
	
	// Выбрана отмена.
	Если ВариантОбработки = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	// Хочет продолжить как есть.
	Если ВариантОбработки = 1 Тогда
		НаправитьНаИсполнениеПродолжение();
		Возврат;
	КонецЕсли;
	
	// Согласился заменить участников.
	Если ВариантОбработки = 0 Тогда
		ОбработчикЗамены = Новый ОписаниеОповещения("УчастникиЗамена", ЭтотОбъект);
		ОткрытьФорму("ОбщаяФорма.ФормаЗаменыУчастников", Результат.РезультатПроверки, ЭтотОбъект,,,,
			ОбработчикЗамены);
	КонецЕсли;
	
КонецПроцедуры

// Обработать результат проверки правил коммуникаций и выбор пользователя.
// 
// Параметры:
//  Результат - Структура
//  ДополнительныеПараметры - Произвольный - Дополнительные параметры
//
&НаКлиенте
Процедура ОбработатьРезультатПроверкиПравилКоммуникацийПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	ВариантОбработки = Результат.ВариантОбработки;
	
	Если ВариантОбработки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Показать сообщения пользователю.
	Если ВариантОбработки = 1 Тогда
		ПоказатьНедоступныхУчастников(Результат.НеПрошедшиеПроверку);
	КонецЕсли;
	// Удалить недоступных участников.
	Если ВариантОбработки = 2 Тогда
		УдалитьНедоступныхУчастников(Результат.НеПрошедшиеПроверку);
	КонецЕсли;
	 
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНедоступныхУчастников(НеПрошедшиеПроверку, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если РежимТаблицы Тогда
		ДополнитьНарушенияИндексамиСтрок(НеПрошедшиеПроверку);
	КонецЕсли;
		
	Для Каждого Нарушение Из НеПрошедшиеПроверку Цикл
		
		Участник = Нарушение.Участник;
		ВидУчастника = Нарушение.ВидУчастника;
		ПредставлениеУчастника = Нарушение.ПредставлениеУчастника;
		ПолУчастника = Нарушение.ПолУчастника;
		ЭтоМужчина = ПолУчастника = ПредопределенноеЗначение("Перечисление.ПолФизическогоЛица.Мужской");
		ТекстНедоступен = ?(ЭтоМужчина, НСтр("ru = 'недоступен'"), НСтр("ru = 'недоступна'"));
		ТекстСообщения = СтрШаблон(НСтр("ru = '%1 %2 по правилам коммуникаций!'"), ПредставлениеУчастника, ТекстНедоступен);
		
		Если РежимТаблицы Тогда
			
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "Объект.Участники[" +
				Формат(Нарушение.ИндексСтроки, "ЧГ=;") + "].Участник", , );
		Иначе
			
			Если ВидУчастника = ВидУчастникаИсполнитель И Исполнитель = Участник Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "ИсполнительПредставление", , );
			КонецЕсли;
			
			Если ВидУчастника = ВидУчастникаПроверяющий И Проверяющий = Участник Тогда
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, , "ПроверяющийПредставление", , );
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьНедоступныхУчастников(НеПрошедшиеПроверку, ДополнительныеПараметры = Неопределено) Экспорт
	
	УдалитьНедоступныхУчастниковНаСервере(НеПрошедшиеПроверку);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьНедоступныхУчастниковНаСервере(Нарушения)
	
	НаУдаление = Новый Массив;
	
	Для Каждого Нарушение Из Нарушения Цикл
		Участник = Нарушение.Участник;
		ВидУчастника = Нарушение.ВидУчастника;
		НайденныеСтроки = Объект.Участники.НайтиСтроки(Новый Структура("ВидУчастника, Участник", ВидУчастника, Участник));
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НаУдаление, НайденныеСтроки);
		
		Если ВидУчастника = ВидУчастникаИсполнитель И Участник = Исполнитель Тогда
			Исполнитель = Неопределено;
			ИсполнительПредставление = "";
		КонецЕсли;
		
		Если ВидУчастника = ВидУчастникаПроверяющий И Участник = Проверяющий Тогда
			Проверяющий = Неопределено;
			ПроверяющийПредставление = "";
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Элемент Из НаУдаление Цикл 
		Объект.Участники.Удалить(Элемент);
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьНарушенияИндексамиСтрок(Нарушения)
	
	Для Каждого Нарушение Из Нарушения Цикл
		Участник = Нарушение.Участник;
		ВидУчастника = Нарушение.ВидУчастника;
		НайденныеСтроки = Объект.Участники.НайтиСтроки(Новый Структура("ВидУчастника, Участник", ВидУчастника, Участник));
		Если НайденныеСтроки.Количество() <> 0 Тогда
			Нарушение.Вставить("ИндексСтроки", Объект.Участники.Индекс(НайденныеСтроки[0]));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьУчастникаПоПравиламКоммуникаций(Участник, ВидУчастника)
	
	УчастникПодходит = Ложь;
	
	Если Не ЗначениеЗаполнено(Участник) Или Не ЗначениеЗаполнено(ВидУчастника) Тогда
		Возврат УчастникПодходит;
	КонецЕсли;
	
	МассивСотрудников = Справочники.ПравилаКоммуникаций.ПроверитьЭлементы(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Участник), 
		ПравилаКоммуникацийКлиентСервер.КонтекстВыбора(
			ЭтотОбъект,,
			ВидУчастника));
	
	УчастникПодходит = МассивСотрудников.Количество() > 0;
	
	Возврат УчастникПодходит;
	
КонецФункции

&НаСервере
Функция ПолучитьПравилоКоммуникаций(ВидУчастника)
	
	Контекст = ПравилаКоммуникацийКлиентСервер.КонтекстВыбора(
		ЭтотОбъект,,
		ВидУчастника);
	Справочники.ПравилаКоммуникаций.ДополнитьКонтекст(Контекст);
	
	Возврат Справочники.ПравилаКоммуникаций.ПодобратьПравило(Контекст, Ложь);
		
КонецФункции

// Заменить участников на сервере.
// 
// Параметры:
//  Замены - Массив Из Структура:
//   * ВидУчастника - СправочникСсылка.ВидыУчастниковЗадач
//   * Участник - СправочникСсылка.Сотрудники
//   * УчастникЗаменитьНа - СправочникСсылка.Сотрудники
//
&НаСервере
Процедура ЗаменитьУчастниковНаСервере(Замены)
	
	БылиЗамены = Ложь;
	
	Для Каждого Замена Из Замены Цикл
		
		КлючиСтруктурыОтбора = "ВидУчастника, Участник";
		СтруктураОтбора = Новый Структура(КлючиСтруктурыОтбора);
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, Замена, КлючиСтруктурыОтбора);
		НайденныеСтрокиУчастников = Объект.Участники.НайтиСтроки(СтруктураОтбора);
		
		Если НайденныеСтрокиУчастников.Количество() <> 0 Тогда
			
			НайденныеСтрокиУчастников[0].Участник = Замена.УчастникЗаменитьНа;
			БылиЗамены = Истина;
			
		КонецЕсли;
		
		Если СтруктураОтбора.ВидУчастника = ВидУчастникаИсполнитель И Исполнитель = СтруктураОтбора.Участник Тогда
			Исполнитель = Замена.УчастникЗаменитьНа;
			ИсполнительПредставление = Исполнитель;
		КонецЕсли;
		
		Если СтруктураОтбора.ВидУчастника = ВидУчастникаПроверяющий И Проверяющий = СтруктураОтбора.Участник Тогда
			Проверяющий = Замена.УчастникЗаменитьНа;
			ПроверяющийПредставление = Проверяющий;
		КонецЕсли;
		
	КонецЦикла;
	
	Если БылиЗамены Тогда
		Модифицированность = Истина;
		УчастникиПриИзмененииНаСервере(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверяющийОчистить()
	
	Проверяющий = Неопределено; 
	 
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКакЧерновикНаКлиенте()
	
	ПараметрыЗаписи = Новый Структура("РежимЗаписи");
	ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение;
	
	Если Не Записать(ПараметрыЗаписи) Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Черновик'"),
		ПолучитьНавигационнуюСсылку(Объект.Ссылка),
		Строка(Объект.Ссылка),
		БиблиотекаКартинок.ДиалогИнформация);
	
	ОповеститьОбИзменении(Объект.Ссылка);
	РаботаСЗадачамиКлиент.ОповеститьОЗаписиЗадачи(
		Объект.Ссылка,
		Объект.ВышестоящаяЗадача,
		УникальныйИдентификатор);
	
	ЭтоНоваяЗадача = Ложь;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьНаКлиенте()
	
	Модифицированность = Ложь;
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		УдалитьНаСервере();
		
		ОповеститьОбИзменении(Объект.Ссылка);
		
		РаботаСЗадачамиКлиент.ОповеститьОЗаписиЗадачи(
			Объект.Ссылка,
			Объект.ВышестоящаяЗадача,
			УникальныйИдентификатор);
		
	КонецЕсли;
	
	ЭтоНоваяЗадача = Ложь;
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьНаСервере()
	
	РаботаСЗадачами.УдалитьЗадачу(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Функция УказаныИсполнители()
	
	УказаныИсполнители = Ложь;
	Для Каждого СтрокаУчастника Из Объект.Участники Цикл
		
		Если СтрокаУчастника.ВидУчастника <> ВидУчастникаОтветственный
			И СтрокаУчастника.ВидУчастника <> ВидУчастникаИсполнитель Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаУчастника.Участник) Тогда
			Продолжить;
		КонецЕсли;
		
		УказаныИсполнители = Истина;
		Прервать;
		
	КонецЦикла;
	
	Возврат УказаныИсполнители;
	
КонецФункции

&НаСервере
Функция УказаныИсполнителиНаСервере()
	
	УказаныИсполнители = Ложь;
	Для Каждого СтрокаУчастника Из Объект.Участники Цикл
		
		Если СтрокаУчастника.ВидУчастника <> ВидУчастникаОтветственный
			И СтрокаУчастника.ВидУчастника <> ВидУчастникаИсполнитель Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаУчастника.Участник) Тогда
			Продолжить;
		КонецЕсли;
		
		УказаныИсполнители = Истина;
		Прервать;
		
	КонецЦикла;
	
	Возврат УказаныИсполнители;
	
КонецФункции

&НаКлиенте
Процедура УстановитьДоступностьКомандПриложений()
	
	ТекущиеДанные = Элементы.Приложения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		
		Элементы.ПриложенияКонтекстноеМенюФайлыОткрытьКарточку.Доступность = Ложь;
		Элементы.ПриложенияКонтекстноеМенюОткрытьПриложение.Доступность = Ложь;
		Элементы.ПриложенияКонтекстноеМенюУдалить.Доступность = Ложь;
		Элементы.ПриложенияКонтекстноеМенюРедактировать.Доступность = Ложь;
		Элементы.ПриложенияКонтекстноеМенюЗакончитьРедактирование.Доступность = Ложь;
		Элементы.ПриложенияКонтекстноеМенюОсвободить.Доступность = Ложь;
		Элементы.ПриложенияКонтекстноеМенюФайлыОбновитьИзФайлаНаДиске.Доступность = Ложь;
		
		Возврат;
		
	КонецЕсли;
	
	Элементы.ПриложенияКонтекстноеМенюФайлыОткрытьКарточку.Доступность = Истина;
	Элементы.ПриложенияКонтекстноеМенюОткрытьПриложение.Доступность = Истина;
	Элементы.ПриложенияКонтекстноеМенюУдалить.Доступность = Истина;
	
	Если ТипЗнч(ТекущиеДанные.Приложение) = Тип("СправочникСсылка.Файлы") Тогда
		
		Элементы.ПриложенияКонтекстноеМенюРедактировать.Доступность =
			Не ЗначениеЗаполнено(ТекущиеДанные.Редактирует);
		Элементы.ПриложенияКонтекстноеМенюЗакончитьРедактирование.Доступность =
			ТекущиеДанные.РедактируетТекущийПользователь;
		Элементы.ПриложенияКонтекстноеМенюОсвободить.Доступность =
			ТекущиеДанные.РедактируетТекущийПользователь;
		
		Элементы.ПриложенияКонтекстноеМенюФайлыОбновитьИзФайлаНаДиске.Доступность = Истина;
		
	Иначе
		
		Элементы.ПриложенияКонтекстноеМенюРедактировать.Доступность = Ложь;
		Элементы.ПриложенияКонтекстноеМенюЗакончитьРедактирование.Доступность = Ложь;
		Элементы.ПриложенияКонтекстноеМенюОсвободить.Доступность = Ложь;
		Элементы.ПриложенияКонтекстноеМенюФайлыОбновитьИзФайлаНаДиске.Доступность = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущийЭлементУчастник()
	
	Если Не РежимТаблицы Тогда
		
		Элементы.СтраницаПоля.Видимость = Истина;
		Элементы.СтраницаТаблица.Видимость = Ложь;
		Элементы.СтраницыУчастники.ТекущаяСтраница = Элементы.СтраницаПоля;
		
	Иначе
		
		Элементы.СтраницаПоля.Видимость = Ложь;
		Элементы.СтраницаТаблица.Видимость = Истина;
		Элементы.СтраницыУчастники.ТекущаяСтраница = Элементы.СтраницаТаблица;
		Элементы.Участники.ВысотаВСтрокахТаблицы = 3;
		
		Элементы.Участники.ТекущаяСтрока = Объект.Участники[0].ПолучитьИдентификатор();
		ТекущийЭлемент = Элементы.УчастникиУчастник;
		
		Элементы.Участники.ИзменитьСтроку();
		
	КонецЕсли;
	
	Элементы.УстановитьОтветственный.Видимость = РежимТаблицы
		И ЗначениеЗаполнено(ВидУчастникаОтветственный);
	Элементы.УчастникиКонтекстноеМенюОтветственный.Видимость =
		Элементы.УстановитьОтветственный.Видимость;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущийЭлементЗаголовок()
	
	ТекущийЭлемент = Элементы.Заголовок;
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиОбработкаАктивизацииСтроки()
	
	ОбновитьСписокВыбораВидУчастника();
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		
		Если ТекущиеДанные.ВидУчастника = ВидУчастникаПроверяющий Тогда
			Элементы.УчастникиКонтекстноеМенюОтветственный.Доступность = Ложь;
			Элементы.УстановитьОтветственный.Доступность = Ложь;
		Иначе
			Элементы.УчастникиКонтекстноеМенюОтветственный.Доступность = Истина;
			Элементы.УстановитьОтветственный.Доступность = Истина;
		КонецЕсли;

		Если ТекущиеДанные.ВидУчастника = ВидУчастникаОтветственный Тогда
			Элементы.УчастникиКонтекстноеМенюОтветственный.Пометка = Истина;
			Элементы.УстановитьОтветственный.Пометка = Истина;
		Иначе
			Элементы.УчастникиКонтекстноеМенюОтветственный.Пометка = Ложь;	
			Элементы.УстановитьОтветственный.Пометка = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиЗамена(Замены, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Замены = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаменитьУчастниковНаСервере(Замены);
	
КонецПроцедуры

&НаСервере
Процедура УчастникиПриИзмененииНаСервере(ДанныеТекущегоУчастника, ОбновитьПредставление = Истина)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ОбновитьПредставление Тогда
		ПредставленияУчастников = ПредставленияУчастниковПоНомерамСтрок();
		
		ВсеДействия = Новый Массив;
		Для Каждого СтрокаУчастника Из Объект.Участники Цикл
			
			Если ЗначениеЗаполнено(СтрокаУчастника.ДействиеУчастника) Тогда
				ВсеДействия.Добавить(СтрокаУчастника.ДействиеУчастника);
			КонецЕсли;
			
		КонецЦикла;	
		
		РеквизитыДействий = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
			ВсеДействия, 
			"ФактическийИсполнитель");
		
	КонецЕсли;
	
	Для Каждого СтрокаУчастника Из Объект.Участники Цикл
		
		Если ДанныеТекущегоУчастника <> Неопределено
			И ИзменилсяВидУчастника
			И ЗначениеЗаполнено(ДанныеТекущегоУчастника.Участник)
			И СтрокаУчастника.ВидУчастника = ДанныеТекущегоУчастника.ВидУчастника
			И СтрокаУчастника.Участник = ДанныеТекущегоУчастника.Участник Тогда
			
			МассивСотрудников = Справочники.ПравилаКоммуникаций.ПроверитьЭлементы(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
					ДанныеТекущегоУчастника.Участник), 
				ПравилаКоммуникацийКлиентСервер.КонтекстВыбора(
					ЭтотОбъект,,
					ДанныеТекущегоУчастника.ВидУчастника));
			Если МассивСотрудников.Количество() = 0 Тогда
				СтрокаУчастника.Участник = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
			КонецЕсли;
			
		КонецЕсли; 
		
		Если Не ЗначениеЗаполнено(СтрокаУчастника.ВидУчастника) Тогда
			СтрокаУчастника.ВидУчастника = ВидУчастникаИсполнитель;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаУчастника.Участник) Тогда
			СтрокаУчастника.Участник = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
		КонецЕсли;
		
		Если ОбновитьПредставление Тогда
			СтрокаУчастника.ПредставлениеУчастника = ПредставленияУчастников[СтрокаУчастника.НомерСтроки];
			Если ЗначениеЗаполнено(СтрокаУчастника.ДействиеУчастника) Тогда
				РеквизитыДействия = РеквизитыДействий[СтрокаУчастника.ДействиеУчастника];
				Если ЗначениеЗаполнено(РеквизитыДействия.ФактическийИсполнитель) Тогда
					СтрокаУчастника.ПредставлениеУчастника =
						Строка(РеквизитыДействия.ФактическийИсполнитель);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЭтоЧерновик()
	
	ВидСостоянияЗадач = РаботаСЗадачамиПовтИсп.ВидСостоянияЗадач(Объект.СостояниеЗадачи);
	ЭтоЧерновик = Перечисления.ВидыСостоянийЗадач.ЭтоЧерновик(ВидСостоянияЗадач);
	
	Возврат ЭтоЧерновик;
	
КонецФункции

&НаКлиенте
Функция ЭтоДействиеЗадачи(ПроверяемоеДействиеЗадачи)
	
	ЭтоДействиеЗадачи = Ложь;
	Для Каждого СтрокаУчастника Из Объект.Участники Цикл
		
		Если СтрокаУчастника.ДействиеУчастника <> ПроверяемоеДействиеЗадачи Тогда
			Продолжить;
		КонецЕсли;
		
		ЭтоДействиеЗадачи = Истина;
		Прервать;
		
	КонецЦикла;
	
	Возврат ЭтоДействиеЗадачи;
	
КонецФункции

&НаСервере
Процедура ПрочитатьПерсональныеНастройки()
	
	ОбновитьПодзадачи();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоВидуЗадачи()
	
	Если НастроенныйВидЗадачи = Объект.ВидЗадачи Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеВидаЗадачи = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(Объект.ВидЗадачи);
	
	ВидУчастникаОтветственный = ДанныеВидаЗадачи.ВидУчастникаОтветственный;
	ВидУчастникаИсполнитель = ДанныеВидаЗадачи.ВидУчастникаИсполнитель;
	ВидУчастникаПроверяющий = ДанныеВидаЗадачи.ВидУчастникаПроверяющий;
	ЗаголовокСпискаВыбранныхУчастников = ДанныеВидаЗадачи.ЗаголовокСпискаВыбранныхУчастников;
	ЗаголовокФормыВыбораИсполнителей = ДанныеВидаЗадачи.ЗаголовокФормыВыбораИсполнителей;
	СостояниеЗадачиЧерновик = ДанныеВидаЗадачи.СостояниеЗадачиЧерновик;
	ТерминНеНаправленаНаИсполнение = ДанныеВидаЗадачи.ТерминНеНаправленаНаИсполнение;
	
	Элементы.ФормаНаправитьНаИсполнение.Заголовок = ДанныеВидаЗадачи.ТерминНаправитьНаИсполнение;
	
	Элементы.Исполнитель.Заголовок = Строка(ВидУчастникаИсполнитель);
	Элементы.Проверяющий.Заголовок = Строка(ВидУчастникаПроверяющий);
	Элементы.Проверяющий.Видимость = ЗначениеЗаполнено(ВидУчастникаПроверяющий);
	
	Элементы.УстановитьОтветственный.Видимость = РежимТаблицы
		И ЗначениеЗаполнено(ВидУчастникаОтветственный);
	Элементы.УчастникиКонтекстноеМенюОтветственный.Видимость =
		Элементы.УстановитьОтветственный.Видимость;
	
	Элементы.ФормаУстановитьСебяПроверяющим.Видимость = РежимТаблицы
		И ЗначениеЗаполнено(ВидУчастникаПроверяющий);
	Элементы.УстановитьСебяПроверяющим.Видимость = Не РежимТаблицы
		И ЗначениеЗаполнено(ВидУчастникаПроверяющий);
	
	Команды.ПодобратьИсполнителей.Заголовок = ДанныеВидаЗадачи.ЗаголовокКомандыПодобратьИсполнителей;
	Команды.ПодобратьИсполнителей.Подсказка = ДанныеВидаЗадачи.ЗаголовокКомандыПодобратьИсполнителей;
	
	ОбновитьЗаголовок();
	ЗаполнитьСпискиВыбора();
	
	НастроенныйВидЗадачи = Объект.ВидЗадачи;
	
КонецПроцедуры

&НаКлиенте
Процедура НесколькоИсполнителейРеализация()
	
	// значения перенести в таблицу
	ПеренестиПоляВТаблицуИсполнителей();
	ОбновитьУчастников();

	Элементы.СтраницаПоля.Видимость = Ложь;
	Элементы.СтраницаТаблица.Видимость = Истина;
	Элементы.СтраницыУчастники.ТекущаяСтраница = Элементы.СтраницаТаблица;
	Элементы.Участники.ВысотаВСтрокахТаблицы = 3;
	
	РежимТаблицы = Истина;
	Элементы.УстановитьОтветственный.Видимость = РежимТаблицы
		И ЗначениеЗаполнено(ВидУчастникаОтветственный);
	Элементы.УчастникиКонтекстноеМенюОтветственный.Видимость =
		Элементы.УстановитьОтветственный.Видимость;
	
	Элементы.ФормаУстановитьСебяПроверяющим.Видимость = РежимТаблицы
		И ЗначениеЗаполнено(ВидУчастникаПроверяющий);
	Элементы.УстановитьСебяПроверяющим.Видимость = Не РежимТаблицы
		И ЗначениеЗаполнено(ВидУчастникаПроверяющий);
		
	Если ЭтоМобильныйКлиент Тогда
		Элементы.МК_НесколькоИсполнителей.Видимость = Ложь;
		Элементы.МК_УчастникиДобавить.Видимость = Истина;
		МК_НастроитьПоказатьСкрытьУчастников(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НесколькоИсполнителейРеализацияНаСервере()
	
	// значения перенести в таблицу
	ПеренестиПоляВТаблицуИсполнителейНаСервере();
	ОбновитьУчастников();

	Элементы.СтраницаПоля.Видимость = Ложь;
	Элементы.СтраницаТаблица.Видимость = Истина;
	Элементы.СтраницыУчастники.ТекущаяСтраница = Элементы.СтраницаТаблица;
	Элементы.Участники.ВысотаВСтрокахТаблицы = 3;
	
	РежимТаблицы = Истина;
	Элементы.УстановитьОтветственный.Видимость = РежимТаблицы
		И ЗначениеЗаполнено(ВидУчастникаОтветственный);
	Элементы.УчастникиКонтекстноеМенюОтветственный.Видимость =
		Элементы.УстановитьОтветственный.Видимость;
	
	Элементы.ФормаУстановитьСебяПроверяющим.Видимость = РежимТаблицы
		И ЗначениеЗаполнено(ВидУчастникаПроверяющий);
	Элементы.УстановитьСебяПроверяющим.Видимость = Не РежимТаблицы
		И ЗначениеЗаполнено(ВидУчастникаПроверяющий);
		
	Если ЭтоМобильныйКлиент Тогда
		Элементы.МК_НесколькоИсполнителей.Видимость = Ложь;
		Элементы.МК_УчастникиДобавить.Видимость = Истина;
		МК_НастроитьПоказатьСкрытьУчастников(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиПоляВТаблицуИсполнителей(ПереноситьПустыхУчастников = Истина)
	
	Если Элементы.СтраницыУчастники.ТекущаяСтраница = Элементы.СтраницаПоля Тогда
		
		Если ЗначениеЗаполнено(Исполнитель) Тогда
			
			ДобавитьЗаменитьУчастникаПоВиду(
				Исполнитель,
				ВидУчастникаИсполнитель);
			
		ИначеЕсли Объект.Участники.Количество() = 0 Тогда
			
			Если ПереноситьПустыхУчастников Тогда
				
				НовСтр = Объект.Участники.Добавить();
				НовСтр.Участник = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
				НовСтр.ВидУчастника = ВидУчастникаИсполнитель;
				
				Если ЗначениеЗаполнено(ВидУчастникаПроверяющий) Тогда
					НовСтр = Объект.Участники.Добавить();
					НовСтр.Участник = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
					НовСтр.ВидУчастника = ВидУчастникаПроверяющий;
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли Объект.Участники.Количество() = 1 
			И Объект.Участники[0].ВидУчастника = ВидУчастникаПроверяющий Тогда
			
			Если ПереноситьПустыхУчастников Тогда
				
				НовСтр = Объект.Участники.Вставить(0);
				НовСтр.Участник = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
				НовСтр.ВидУчастника = ВидУчастникаИсполнитель;
				
			КонецЕсли;
				
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВидУчастникаПроверяющий) Тогда
			
			Если ЗначениеЗаполнено(Проверяющий) Тогда
				
				ДобавитьЗаменитьУчастникаПоВиду(
					Проверяющий, 
					ВидУчастникаПроверяющий);
				
			Иначе
				
				Если ПереноситьПустыхУчастников Тогда
				
					ДобавитьЗаменитьУчастникаПоВиду(
						ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка"), 
						ВидУчастникаПроверяющий);
				
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиПоляВТаблицуИсполнителейНаСервере(ПереноситьПустыхУчастников = Истина)
	
	Если Элементы.СтраницыУчастники.ТекущаяСтраница = Элементы.СтраницаПоля Тогда
		
		Если ЗначениеЗаполнено(Исполнитель) Тогда
			
			ДобавитьЗаменитьУчастникаПоВидуНаСервере(
				Исполнитель,
				ВидУчастникаИсполнитель);
			
		ИначеЕсли Объект.Участники.Количество() = 0 Тогда
			
			Если ПереноситьПустыхУчастников Тогда
				
				НовСтр = Объект.Участники.Добавить();
				НовСтр.Участник = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
				НовСтр.ВидУчастника = ВидУчастникаИсполнитель;
				
				Если ЗначениеЗаполнено(ВидУчастникаПроверяющий) Тогда
					НовСтр = Объект.Участники.Добавить();
					НовСтр.Участник = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
					НовСтр.ВидУчастника = ВидУчастникаПроверяющий;
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли Объект.Участники.Количество() = 1 
			И Объект.Участники[0].ВидУчастника = ВидУчастникаПроверяющий Тогда
			
			Если ПереноситьПустыхУчастников Тогда
				
				НовСтр = Объект.Участники.Вставить(0);
				НовСтр.Участник = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
				НовСтр.ВидУчастника = ВидУчастникаИсполнитель;
				
			КонецЕсли;
				
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВидУчастникаПроверяющий) Тогда
			
			Если ЗначениеЗаполнено(Проверяющий) Тогда
				
				ДобавитьЗаменитьУчастникаПоВидуНаСервере(
					Проверяющий, 
					ВидУчастникаПроверяющий);
				
			Иначе
				
				Если ПереноситьПустыхУчастников Тогда
				
					ДобавитьЗаменитьУчастникаПоВидуНаСервере(
						ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка"), 
						ВидУчастникаПроверяющий);
				
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗаменитьУчастникаПоВиду(Участник, ВидУчастника)
	
	Заменили = Ложь;
	Для Каждого Стр Из Объект.Участники Цикл
		
		Если Стр.ВидУчастника = ВидУчастника Тогда
			
			Если Не ЗначениеЗаполнено(Стр.Состояние) Тогда
				Стр.Участник = Участник;
				Заменили = Истина;
			Иначе
				Если Стр.Участник <> Участник Тогда
					Объект.Участники.Удалить(Стр);
				Иначе
					Заменили = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Прервать;
			
		КонецЕсли;
			 
	КонецЦикла;	
	
	Если Заменили = Ложь Тогда
		
		НовСтр = Объект.Участники.Добавить();
		НовСтр.Участник = Участник;
		НовСтр.ВидУчастника = ВидУчастника;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЗаменитьУчастникаПоВидуНаСервере(Участник, ВидУчастника)
	
	Заменили = Ложь;
	Для Каждого Стр Из Объект.Участники Цикл
		
		Если Стр.ВидУчастника = ВидУчастника Тогда
			
			Если Не ЗначениеЗаполнено(Стр.Состояние) Тогда
				Стр.Участник = Участник;
				Заменили = Истина;
			Иначе
				Если Стр.Участник <> Участник Тогда
					Объект.Участники.Удалить(Стр);
				Иначе
					Заменили = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Прервать;
			
		КонецЕсли;
			 
	КонецЦикла;	
	
	Если Заменили = Ложь Тогда
		
		НовСтр = Объект.Участники.Добавить();
		НовСтр.Участник = Участник;
		НовСтр.ВидУчастника = ВидУчастника;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПриоритетПредставление(Приоритет, Форма, ПриоритетПредставление)
	
	ПриоритетПредставление = СтрШаблон(НСтр("ru = 'Приоритет: %1'"), Приоритет);
	
	Если Приоритет = ПредопределенноеЗначение("Справочник.ПриоритетыЗадач.Высокий") Тогда
		Форма.Элементы.ПриоритетПредставление.КартинкаКнопкиВыбора = БиблиотекаКартинок.ВажностьВысокая;
	ИначеЕсли Приоритет = ПредопределенноеЗначение("Справочник.ПриоритетыЗадач.Обычный") Тогда
		Форма.Элементы.ПриоритетПредставление.КартинкаКнопкиВыбора = БиблиотекаКартинок.ВажностьНеЗадана;
	ИначеЕсли Приоритет = ПредопределенноеЗначение("Справочник.ПриоритетыЗадач.Низкий") Тогда
		Форма.Элементы.ПриоритетПредставление.КартинкаКнопкиВыбора = БиблиотекаКартинок.ВажностьНизкая;
	КонецЕсли;	 
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПриСменеАвтора()
	
	ЗаполнитьСпискиВыбора();
	ОбновитьВидимостьСоздал();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСпискиВыбора()
	
	ЗаполнитьСписокВыбора(
		Объект.Автор,
		СписокВыбораИсполнителя,
		ВидУчастникаИсполнитель);
	ЗаполнитьСписокВыбора(
		Объект.Автор,
		СписокВыбораПроверяющего,
		ВидУчастникаПроверяющий);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбора(Автор, ТекСписок, ФункцияУчастника)

	ТекСписок.Очистить();
	
	Если Не ЗначениеЗаполнено(ФункцияУчастника) Тогда
		Возврат;
	КонецЕсли;
	
	СписокВыбораТекущий = РаботаСЗадачамиПовтИсп.СписокВыбораФормыАвтораЗадачи(
		Объект.ВидЗадачи, Объект.Ссылка, Автор, ФункцияУчастника, Истина);
	
	Для Каждого Стр Из СписокВыбораТекущий Цикл
		ТекСписок.Добавить(Стр.Значение, Стр.Представление);
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПроверяющегоЕслиЕгоНет()
	
	Если Не ЗначениеЗаполнено(ВидУчастникаПроверяющий) Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьПроверяющий = Ложь;
	Для Каждого СтрокаУчастника Из Объект.Участники Цикл
		
		Если СтрокаУчастника.ВидУчастника = ВидУчастникаПроверяющий Тогда
			ЕстьПроверяющий = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;	
	
	Если Не ЕстьПроверяющий Тогда
		
		НовСтр = Объект.Участники.Добавить();
		НовСтр.Участник = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
		НовСтр.ВидУчастника = ВидУчастникаПроверяющий;
		
	КонецЕсли;	
	
КонецПроцедуры

// Ответственный первым, проверяющий последним
&НаСервере
Процедура СортироватьУчастников()
	
	Для Каждого СтрокаУчастника Из Объект.Участники Цикл
		
		СтрокаВида = "1";
		
		Если СтрокаУчастника.ВидУчастника = ВидУчастникаОтветственный Тогда
			СтрокаВида = "1";
		ИначеЕсли СтрокаУчастника.ВидУчастника = ВидУчастникаИсполнитель Тогда
			СтрокаВида = "2";
		ИначеЕсли СтрокаУчастника.ВидУчастника = ВидУчастникаПроверяющий Тогда
			СтрокаВида = "4";
		Иначе
			СтрокаВида = "3";
		КонецЕсли;
		
		УчастникПредставление = СтрокаУчастника.ПредставлениеУчастника;
		Если Не ЗначениеЗаполнено(УчастникПредставление) Тогда
			УчастникПредставление = "яя"; // для сортировки  -чтобы был в конце
		КонецЕсли;	

		СтрокаУчастника.ПорядокДляСортировки = СтрокаВида + "-" + УчастникПредставление;
		
	КонецЦикла;	

	Объект.Участники.Сортировать("ПорядокДляСортировки");	
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьИсполнителейИзХранилища(АдресРезультата)
	
	ВыбранныеИсполнители = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	// Добавим исполнителей.
	МассивИсполнители = ИсполнителиНаСервере();
	ВыбраноНесколькоИсполнителей = ВыбранныеИсполнители.Количество() > 1;
	Для Каждого ВыбранныйИсполнитель Из ВыбранныеИсполнители Цикл
		
		Если МассивИсполнители.Найти(ВыбранныйИсполнитель.Контакт) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не УказаныИсполнителиНаСервере()
			И ЗначениеЗаполнено(ВидУчастникаОтветственный)
			И ВыбраноНесколькоИсполнителей Тогда
			ДобавитьЗаменитьУчастникаПоВидуНаСервере(
				ВыбранныйИсполнитель.Контакт,
				ВидУчастникаОтветственный);
		Иначе
			СтрокаУчастника = Объект.Участники.Добавить();
			СтрокаУчастника.ВидУчастника = ВидУчастникаИсполнитель;
			СтрокаУчастника.Участник = ВыбранныйИсполнитель.Контакт;
		КонецЕсли;
		
	КонецЦикла;
	
	// Обработаем изменение.
	УчастникиПриИзмененииНаСервере(Неопределено, Ложь);
	
	МассивИсполнители = ИсполнителиНаСервере();
	Если МассивИсполнители.Количество() > 1 Тогда
		
		НесколькоИсполнителейРеализацияНаСервере();
		
	ИначеЕсли МассивИсполнители.Количество() = 1 
		И Элементы.СтраницыУчастники.ТекущаяСтраница = Элементы.СтраницаПоля Тогда
		
		Исполнитель = МассивИсполнители[0];
		ИсполнительПредставление = Исполнитель;
		
	КонецЕсли;	
	
	СортироватьУчастников();
	
	УдалитьИзВременногоХранилища(АдресРезультата); // очищается временное хранилище для минимизации расхода оперативной памяти
	
КонецПроцедуры 

&НаСервере
Функция ПредставленияУчастниковПоНомерамСтрок()
	
	ВсеДействия = Новый Массив;
	Для Каждого СтрокаУчастника Из Объект.Участники Цикл
		
		Если ЗначениеЗаполнено(СтрокаУчастника.ДействиеУчастника) Тогда
			ВсеДействия.Добавить(СтрокаУчастника.ДействиеУчастника);
		КонецЕсли;
		
	КонецЦикла;	
	
	РеквизитыДействий = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		ВсеДействия,
		"Исполнитель, ФактическийИсполнитель, СостояниеУчастникаЗадачи");
	
	ВсеУчастникиДляОтображения = Новый Массив;
	УчастникиДляОтображения = Новый Соответствие;
	Для Каждого СтрокаУчастника Из Объект.Участники Цикл
		
		РеквизитыДействия = РеквизитыДействий[СтрокаУчастника.ДействиеУчастника];
		
		Если РеквизитыДействия <> Неопределено
			И ЗначениеЗаполнено(РеквизитыДействия.СостояниеУчастникаЗадачи) Тогда
			
			Если ЗначениеЗаполнено(РеквизитыДействия.ФактическийИсполнитель) Тогда
				УчастникДляОтображения = РеквизитыДействия.ФактическийИсполнитель;
			Иначе
				УчастникДляОтображения = РеквизитыДействия.Исполнитель;
			КонецЕсли;
			
		Иначе
			
			УчастникДляОтображения = СтрокаУчастника.Участник;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(УчастникДляОтображения) Тогда
			Продолжить;
		КонецЕсли;
		
		УчастникиДляОтображения.Вставить(
			СтрокаУчастника.НомерСтроки,
			УчастникДляОтображения);
		ВсеУчастникиДляОтображения.Добавить(УчастникДляОтображения);
		
	КонецЦикла;
	
	ПредставленияУчастников = Новый Соответствие;
	РеквизитыУчастников = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		ВсеУчастникиДляОтображения, "Представление");
	Для Каждого КлючИЗначение Из УчастникиДляОтображения Цикл
		
		НомерСтроки = КлючИЗначение.Ключ;
		УчастникДляОтображения = КлючИЗначение.Значение;
		
		Если ЗначениеЗаполнено(УчастникДляОтображения) Тогда
			
			РеквизитыУчастника = РеквизитыУчастников.Получить(УчастникДляОтображения);
			
			ПредставленияУчастников.Вставить(
				НомерСтроки,
				РеквизитыУчастника.Представление);
			
		Иначе
			
			ПредставленияУчастников.Вставить(
				НомерСтроки,
				"");
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПредставленияУчастников;
	
КонецФункции

&НаСервере
Процедура ОбновитьРежимТаблицы()
	
	//  смотрим сколько исполнителей - тоже в режим полей, если их 0-1-2
	ЧислоСтрокаОтветственного = Ложь;
	ЧислоСтрокаПроверяющего = Ложь;
	ЧислоСтрокаИсполнителя = Ложь;
	Для Каждого СтрокаУчастника Из Объект.Участники Цикл
		
		Если СтрокаУчастника.ВидУчастника = ВидУчастникаОтветственный Тогда
			ЧислоСтрокаОтветственного = ЧислоСтрокаОтветственного + 1;
		КонецЕсли;

		Если СтрокаУчастника.ВидУчастника = ВидУчастникаИсполнитель Тогда
			ЧислоСтрокаИсполнителя = ЧислоСтрокаИсполнителя + 1;
		КонецЕсли;
		
		Если СтрокаУчастника.ВидУчастника = ВидУчастникаПроверяющий Тогда
			ЧислоСтрокаПроверяющего = ЧислоСтрокаПроверяющего + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	ВидСостоянияЗадач = РаботаСЗадачамиПовтИсп.ВидСостоянияЗадач(Объект.СостояниеЗадачи);
	ЭтоЧерновик = Перечисления.ВидыСостоянийЗадач.ЭтоЧерновик(ВидСостоянияЗадач);
	
	РежимТаблицы = Ложь;
	Если ЭтоЧерновик Тогда
		
		Если Объект.Участники.Количество() > 2 Тогда
			РежимТаблицы = Истина;
		Иначе
			
			Если ЧислоСтрокаОтветственного > 0 Тогда
				РежимТаблицы = Истина;
			Иначе
					
				Если ЧислоСтрокаИсполнителя > 1 Или ЧислоСтрокаПроверяющего > 1 Тогда
					РежимТаблицы = Истина;
				КонецЕсли;		
					
			КонецЕсли;	
					
		КонецЕсли;
		
	Иначе
		
		РежимТаблицы = Истина;
		
	КонецЕсли;
	
	Элементы.СтраницаПоля.Видимость = Не РежимТаблицы;
	Элементы.СтраницаТаблица.Видимость = РежимТаблицы;
	
	Если РежимТаблицы Тогда
		Элементы.СтраницыУчастники.ТекущаяСтраница = Элементы.СтраницаТаблица;
		Элементы.Участники.ВысотаВСтрокахТаблицы = 3;
	Иначе
		
		Элементы.СтраницыУчастники.ТекущаяСтраница = Элементы.СтраницаПоля;
		
		// заполним поля Исполнитель, Проверяющий
		Для Каждого СтрокаУчастника Из Объект.Участники Цикл
			
			Если СтрокаУчастника.ВидУчастника = ВидУчастникаИсполнитель Тогда
				Исполнитель = СтрокаУчастника.Участник;
				ИсполнительПредставление = Исполнитель;
			КонецЕсли;
	
			Если СтрокаУчастника.ВидУчастника = ВидУчастникаПроверяющий Тогда
				Проверяющий = СтрокаУчастника.Участник;
				ПроверяющийПредставление = Проверяющий;
			КонецЕсли;
			
		КонецЦикла;
		 
	КонецЕсли;
	
	Элементы.УстановитьОтветственный.Видимость = РежимТаблицы
		И ЗначениеЗаполнено(ВидУчастникаОтветственный);
	Элементы.УчастникиКонтекстноеМенюОтветственный.Видимость =
		Элементы.УстановитьОтветственный.Видимость;
	
	Элементы.ФормаУстановитьСебяПроверяющим.Видимость = РежимТаблицы
		И ЗначениеЗаполнено(ВидУчастникаПроверяющий);
	Элементы.УстановитьСебяПроверяющим.Видимость = Не РежимТаблицы
		И ЗначениеЗаполнено(ВидУчастникаПроверяющий);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаголовокПослеВыбора(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Заголовок = ШаблоныТекстовВызовСервера.ТекстШаблона(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеПослеВыбора(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоШаблонуОписание(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоШаблонуОписание(Знач ШаблонТекста) 
	
	РеквизитыШаблона = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ШаблонТекста,
		"ОписаниеФорматированное");
	
	ОписаниеФорматированное = РеквизитыШаблона.ОписаниеФорматированное.Получить();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблонуПослеВыбора(ШаблонЗадачи, Задача) Экспорт
	
	Если ШаблонЗадачи = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоШаблонуНаСервере(ШаблонЗадачи);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоШаблонуНаСервере(ШаблонЗадачи)
	
	ЗадачаОбъект = РеквизитФормыВЗначение("Объект");
	ЗадачаОбъект.Заполнить(ШаблонЗадачи);
	Если Не ЗадачаОбъект.ДополнительныеСвойства.Свойство("ОписаниеОбновленоПоШаблону") Тогда
		СтароеОписание = ОписаниеФорматированное;
	КонецЕсли;
	ЗначениеВРеквизитФормы(ЗадачаОбъект, "Объект");
	
	ОбновитьФормуПоДаннымОбъекта(ЗадачаОбъект);
	
	Если Не ЗадачаОбъект.ДополнительныеСвойства.Свойство("ОписаниеОбновленоПоШаблону") Тогда
		ОписаниеФорматированное = СтароеОписание;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьФормуПоДаннымОбъекта(ТекущийОбъект)
	
	НастроитьФормуПоВидуЗадачи();
	
	ЭтоЗадачаПоИсточнику = РаботаСЗадачами.ЭтоИсточникЗадач(ТекущийОбъект.Источник); 
	ЭтоОбъектИзДругойСистемы =
		ЗначениеЗаполнено(ТекущийОбъект.Источник)
		И МиграцияДанныхИзВнешнихСистемСервер.ЭтоОбъектИзДругойСистемыСПроверкой(
			ТекущийОбъект.Источник);
	ТолькоПросмотр = ЭтоЗадачаПоИсточнику Или Объект.ПометкаУдаления Или ЭтоОбъектИзДругойСистемы;
	Если ТолькоПросмотр Тогда
		Элементы.ОписаниеФорматированное.ТолькоПросмотр = Истина;
	КонецЕсли;
	Элементы.ГруппаОбъектИзДругойСистемы.Видимость = ЭтоОбъектИзДругойСистемы;
	Элементы.ФормаНаправитьНаИсполнение.Доступность = Не ТолькоПросмотр;
	
	Элементы.ГруппаКоманднаяПанель.Видимость = Не Объект.ПометкаУдаления; 
	ОбщегоНазначенияДокументооборот.ПоказатьНадписьПометкиУдаления(
		ЭтотОбъект, ТекущийОбъект.ПометкаУдаления);
	
	ДобавитьПроверяющегоЕслиЕгоНет();
	
	Обновить();
	
	ОбновитьТрудозатраты(ТекущийОбъект);
	
	ОписаниеФорматированное = ТекущийОбъект.ОписаниеФорматированное.Получить();
	
	ПредставлениеНомера = Документы.Задача.ПредставлениеНомера(ТекущийОбъект.Номер);
	
	// сортируем адресатов
	СортироватьУчастников();
	
	ОбновитьРежимТаблицы();
	
КонецПроцедуры

#Область СлужебныеПроцедурыИФункции_МобильныйКлиент

&НаСервере
Процедура МК_НастроитьЭлементыФормы()

	Если Не ЭтоМобильныйКлиент Тогда
		Возврат;
	КонецЕсли;
	
	МК_ШрифтТекста = ШрифтыСтиля.МелкийШрифтТекста;
	
	// Общее.
	СворачиваниеЭлементовПоВажности = СворачиваниеЭлементовФормыПоВажности.НеИспользовать;
	ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Нет;
	ЭтоЧерновик = ЭтоЧерновик();
	
	Для Каждого Элемент Из Элементы Цикл
		Попытка
			Элемент.Шрифт = МК_ШрифтТекста;
			Элемент.ШрифтЗаголовка = МК_ШрифтТекста;
		Исключение;
		КонецПопытки
	КонецЦикла;
	
	// Нижний блок.
	Элементы.МК_НижнийБлок.Видимость = Истина;
	МК.ПреобразоватьКнопкуВАкцентную(ЭтотОбъект,
		МК_ПовтИсп.ЭлементыСтиля(),
		Элементы.ФормаНаправитьНаИсполнение,
		Элементы.МК_НижнийБлок);
		
	Элементы.ФормаЗаписатьИЗакрыть.Отображение = ОтображениеКнопки.Картинка;
	Элементы.ФормаЗаписатьИЗакрыть.Картинка = БиблиотекаКартинок.ЗаписатьИЗакрыть;
	
	Элементы.ФормаЗаписать.Отображение = ОтображениеКнопки.Картинка;
	Элементы.ФормаЗаписать.Картинка = БиблиотекаКартинок.ЗаписатьИЗакрыть;
	
	// Страницы.
	Элементы.МК_Страницы.Видимость = Истина;
	
	Элементы.МК_Страницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Элементы.ГруппаКолонки.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	// Команды переключения страниц.
	Элементы.МК_ЗаголовокСтраниц.Видимость = Не ЭтоЧерновик;
	
	МК.ОформитьКнопкуФильтра(Элементы.МК_КнопкаСтраницаИнформация, Истина);
	МК.ОформитьКнопкуФильтра(Элементы.МК_КнопкаСтраницаИстория, Истина);
	МК.ОформитьКнопкуФильтра(Элементы.МК_КнопкаСтраницаПодзадачи, Истина);
	
	Элементы.МК_КнопкаСтраницаИстория.Видимость =
		Элементы.ГруппаЖизненныйЦиклКонтейнерПрокрутка.Видимость;
	
	Элементы.МК_КнопкаСтраницаПодзадачи.Видимость = Элементы.Подзадачи.Видимость;
	
	МК_ПереключитьНаОсновнуюСтраницу(ЭтотОбъект);

	// Страница "Основное".
	Элементы.Заголовок.Заголовок = НСтр("ru = 'Что нужно сделать'");
	Элементы.Заголовок.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
	Элементы.Заголовок.РастягиватьПоГоризонтали = Истина;
	Элементы.Заголовок.Шрифт = ШрифтыСтиля.ОбычныйШрифтТекста;
	Элементы.ОписаниеФорматированное.Шрифт = МК_ШрифтТекста;
	
	МК.ВыровнятьЭлементФормы(Элементы.ВидЗадачи);
	Элементы.ВидЗадачи.Заголовок = НСтр("ru = 'Вид задачи'");
	Элементы.ГруппаЗаголовок.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	Элементы.ВидЗадачи.РастягиватьПоГоризонтали = Истина;
	
	Элементы.ПриоритетПредставление.Видимость = Ложь;
	Элементы.Приоритет.Видимость = Истина;
	Элементы.ОписаниеФорматированноеВыбор.Видимость = Ложь;
	
	Элементы.ОписаниеФорматированное.Высота = 3;
	Элементы.ОписаниеФорматированное.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	МК_КлиентСервер.АдаптироватьHtmlПодЭкранМобильногоПриНеобходимости(ОписаниеФорматированное);
	
	// План/Факт.
	Элементы.ГруппаПланФакт.Отображение = ОтображениеОбычнойГруппы.Нет;
	Элементы.ГруппаПланФакт.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяЕслиВозможно;
	
	Элементы.ЗначениеНачалоПлан.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Центр;
	Элементы.ЗначениеНачалоФакт.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Центр;
	Элементы.ЗначениеЧелчасовПлан.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Центр;
	Элементы.ЗначениеЧелчасовФакт.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Центр;
	Элементы.ЗначениеСрокПлан.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Центр;
	Элементы.ЗначениеСрокФакт.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Центр;

	Элементы.ПредставлениеНомера.Видимость = Ложь;
	Элементы.Дата.Видимость = Ложь;
	
	Элементы.ГруппаПланФакт.Видимость = Ложь;
	Элементы.Переместить(Элементы.ГруппаПланФакт, Элементы.МК_ГруппаПланФакт);
	МК_НастроитьПоказатьСкрытьПланФакт(ЭтотОбъект);
	
	// Приложения.
	Элементы.Приложения.Шапка = Ложь;
	Элементы.Переместить(Элементы.Приложения, Элементы.МК_ГруппаПриложения);
	Элементы.Приложения.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	Элементы.ПриложенияПриложение.Шрифт = ШрифтыСтиля.МелкийШрифтТекста;
	Элементы.Приложения.ИспользованиеТекущейСтроки =
		ИспользованиеТекущейСтрокиТаблицы.ОтображениеВыделения;

	МК_НастроитьПоказатьСкрытьПриложения(ЭтотОбъект);
	
	Элементы.МК_ДобавитьПриложение.Видимость = ЭтоЧерновик;
	Если ЭтоЧерновик Тогда
		МК.ОформитьКнопкуФильтра(Элементы.МК_ДобавитьПриложение);
	КонецЕсли;
	
	МК.ОформитьКнопкуФильтра(Элементы.МК_ДобавитьФайл);
	
	// Участники.
	Элементы.Участники.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	Элементы.Участники.ПоложениеСтрокиПоиска = ПоложениеСтрокиПоиска.Нет;
	Элементы.НесколькоИсполнителей.Видимость = Ложь;
	Элементы.Переместить(Элементы.СтраницыУчастники, Элементы.МК_Участники);
	
	Элементы.МК_НесколькоИсполнителей.Видимость = Истина;
	Элементы.МК_УчастникиДобавить.Видимость = Ложь;

	МК.ОформитьКнопкуФильтра(Элементы.МК_УчастникиДобавить);
	МК.ОформитьКнопкуФильтра(Элементы.МК_НесколькоИсполнителей);

	МК_НастроитьПоказатьСкрытьУчастников(ЭтотОбъект);
	
	МК_НастроитьПоказатьСкрытьПрочее(ЭтотОбъект);
	
	// Выровняем группы.
	ВыровнятьГруппуФормы(Элементы.ГруппаПриоритет);
	ВыровнятьГруппуФормы(Элементы.СтраницаПоля);
	ВыровнятьГруппуФормы(Элементы.ГруппаИсполнитель);
	ВыровнятьГруппуФормы(Элементы.СтраницаТаблица);
	
	// Выровняем поля.
	МК.ВыровнятьЭлементФормы(Элементы.Исполнитель);
	МК.ВыровнятьЭлементФормы(Элементы.Проверяющий);
	МК.ВыровнятьЭлементФормы(Элементы.ПриоритетПредставление);
	МК.ВыровнятьЭлементФормы(Элементы.Автор);
	МК.ВыровнятьЭлементФормы(Элементы.СостояниеЗадачи);
	
	// Порядок групп на форме.
	Элементы.Переместить(Элементы.ГруппаЛеваяКолонка, Элементы.МК_СтраницаОсновное);
	Элементы.Переместить(Элементы.МК_ГруппаУчастники, Элементы.МК_СтраницаОсновное);
	Элементы.Переместить(Элементы.МК_ГруппаПриложения, Элементы.МК_СтраницаОсновное);
	Элементы.Переместить(Элементы.ВидЗадачи, Элементы.МК_ГруппаПрочееКонтент);
	Элементы.Переместить(Элементы.МК_ГруппаПланФакт, Элементы.МК_ГруппаПрочееКонтент);
	Элементы.Переместить(Элементы.ГруппаПриоритет, Элементы.МК_ГруппаПрочееКонтент);
	Элементы.Переместить(Элементы.Проект, Элементы.МК_ГруппаПрочееКонтент);
	Элементы.Переместить(Элементы.Автор, Элементы.МК_ГруппаПрочееКонтент);
	Элементы.Переместить(Элементы.СостояниеЗадачи, Элементы.МК_ГруппаПрочееКонтент);
	Элементы.Переместить(Элементы.Создал, Элементы.МК_ГруппаПрочееКонтент);
	Элементы.Переместить(Элементы.МК_ГруппаПрочее, Элементы.МК_СтраницаОсновное);
	
	// Страница "Подзадачи".
	Элементы.Переместить(Элементы.Подзадачи, Элементы.МК_СтраницаПодзадачи);
	Элементы.Подзадачи.Шапка = Ложь;
	ПодзадачиПредставлениеЗаголовокМК = Элементы.ПодзадачиПредставление.Заголовок;
	Элементы.Подзадачи.ИспользованиеТекущейСтроки = 
		ИспользованиеТекущейСтрокиТаблицы.ОтображениеВыделенияИВыбор;
	Элементы.Подзадачи.РастягиватьПоВертикали = Истина;

	// Страница "История".
	Элементы.Переместить(Элементы.ГруппаЖизненныйЦиклКонтейнерПрокрутка, Элементы.МК_СтраницаИстория);
	
	ВыровнятьГруппуФормы(Элементы.ГруппаЖизненныйЦиклКонтейнерПрокрутка);
	ВыровнятьГруппуФормы(Элементы.ГруппаЖизненныйЦиклПрокрутка);
	ВыровнятьГруппуФормы(Элементы.ГруппаЖизненныйЦиклКонтейнерГраницы);
	ВыровнятьГруппуФормы(Элементы.ГруппаЖизненныйЦиклВерхняяГраница);
	ВыровнятьГруппуФормы(Элементы.ГруппаЖизненныйЦиклОтступИФон);
	
	МК.ОформитьКнопкуФильтра(Элементы.ИсторияВыполнения, Истина);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура МК_ПереключитьНаОсновнуюСтраницу(Форма)
	
	Форма.Элементы.МК_Страницы.ТекущаяСтраница = Форма.Элементы.МК_СтраницаОсновное;
	МК_СброситьОформлениеПереключателейСтраниц(Форма);
	МК_КлиентСервер.ОформитьДополнительнуюКнопкуПоСостоянию(Форма.МК_ЭлементыСтиля,
		Форма.Элементы.МК_КнопкаСтраницаИнформация,
		Истина);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура МК_ПереключитьНаСтраницуИстория(Форма)
	
	Форма.Элементы.МК_Страницы.ТекущаяСтраница = Форма.Элементы.МК_СтраницаИстория;
	МК_СброситьОформлениеПереключателейСтраниц(Форма);
	МК_КлиентСервер.ОформитьДополнительнуюКнопкуПоСостоянию(Форма.МК_ЭлементыСтиля,
		Форма.Элементы.МК_КнопкаСтраницаИстория,
		Истина);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура МК_ПереключитьНаСтраницуПодзадачи(Форма)
	
	Форма.Элементы.МК_Страницы.ТекущаяСтраница = Форма.Элементы.МК_СтраницаПодзадачи;
	МК_СброситьОформлениеПереключателейСтраниц(Форма);
	МК_КлиентСервер.ОформитьДополнительнуюКнопкуПоСостоянию(Форма.МК_ЭлементыСтиля,
		Форма.Элементы.МК_КнопкаСтраницаПодзадачи,
		Истина);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура МК_СброситьОформлениеПереключателейСтраниц(Форма)
	
	МК_КлиентСервер.ОформитьДополнительнуюКнопкуПоСостоянию(Форма.МК_ЭлементыСтиля,
		Форма.Элементы.МК_КнопкаСтраницаИнформация,
		Ложь);
	
	МК_КлиентСервер.ОформитьДополнительнуюКнопкуПоСостоянию(Форма.МК_ЭлементыСтиля,
		Форма.Элементы.МК_КнопкаСтраницаИстория,
		Ложь);
	
	МК_КлиентСервер.ОформитьДополнительнуюКнопкуПоСостоянию(Форма.МК_ЭлементыСтиля,
		Форма.Элементы.МК_КнопкаСтраницаПодзадачи,
		Ложь);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура МК_НастроитьПоказатьСкрытьПриложения(Форма)
	
	КоличествоПриложений = Форма.Объект.Приложения.Количество();
	
	Если КоличествоПриложений = 0 Тогда
		Форма.Элементы.Приложения.Видимость = Ложь;
	КонецЕсли;
	
	Форма.Элементы.МК_ПриложенияНадпись.Заголовок =
		СтрШаблон(
			НСтр("ru = 'Приложения (%1)'"),
			Формат(КоличествоПриложений, "ЧН=0; ЧГ="));

	МК_КлиентСервер.ОформитьКнопкуСворачиваемойГруппы(Форма.МК_ЭлементыСтиля,
		Форма.Элементы.МК_ПоказатьСкрытьПриложения,
		Форма.Элементы.Приложения.Видимость);
	
	МК_КлиентСервер.УстановитьНовуюВысотуДополнительнойТаблицы(Форма.Элементы.Приложения,
		КоличествоПриложений);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура МК_НастроитьПоказатьСкрытьПланФакт(Форма)
	
	МК_КлиентСервер.ОформитьКнопкуСворачиваемойГруппы(Форма.МК_ЭлементыСтиля,
		Форма.Элементы.МК_ПоказатьСкрытьПланФакт,
		Форма.Элементы.ГруппаПланФакт.Видимость);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура МК_НастроитьПоказатьСкрытьУчастников(Форма)
	
	КоличествоУчастников = Форма.Объект.Участники.Количество();
	
	Форма.Элементы.МК_УчастникиНадпись.Заголовок = 
		СтрШаблон(
			НСтр("ru = 'Исполнители (%1)'"),
			Формат(КоличествоУчастников, "ЧН=0; ЧГ="));
	
	МК_КлиентСервер.ОформитьКнопкуСворачиваемойГруппы(Форма.МК_ЭлементыСтиля,
		Форма.Элементы.МК_ПоказатьСкрытьУчастников,
		Форма.Элементы.МК_Участники.Видимость);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура МК_НастроитьПоказатьСкрытьПрочее(Форма)

	МК_КлиентСервер.ОформитьКнопкуСворачиваемойГруппы(Форма.МК_ЭлементыСтиля,
		Форма.Элементы.МК_ПоказатьСкрытьПрочее,
		Форма.Элементы.МК_ГруппаПрочееКонтент.Видимость,
		Ложь);

КонецПроцедуры

&НаСервере
Процедура ВыровнятьГруппуФормы(Группа)
	
	Если Группа = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Группа) <> Тип("ГруппаФормы") Тогда
		Возврат;
	КонецЕсли;
	
	Группа.РастягиватьПоГоризонтали = Истина;
	Группа.Ширина = 0;
	
КонецПроцедуры

&НаКлиенте
Функция СтруктураСтрокиУчастники()

	Возврат Новый Структура("ПредставлениеУчастника, ВидУчастника");

КонецФункции

#КонецОбласти

#Область РаспознаваниеРечи

&НаСервере
Процедура РаспознаваниеРечи_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ТекущиеПараметры = ПараметрыРаспознаванияРечи.ТекущиеПараметры(ЭтотОбъект);
	
	РаспознаваниеРечи_ПараметрыРаспознавания = ТекущиеПараметры;
	РаспознаваниеРечи_РаспознаваниеДоступно = ПараметрыРаспознаванияРечи.РаспознаваниеДоступно(ТекущиеПараметры);
	
	Элементы.ГруппаРаспознаваниеРечиТекст.Видимость = РаспознаваниеРечи_РаспознаваниеДоступно;
	
	РаспознаваниеРечи_РаспознаваниеФразыЗавершено = Истина;
	
	//
	
	Константы.ОбщаяГрамматикаРаботыСРечью.УстановитьГрамматикуСеанса();
	
КонецПроцедуры

&НаКлиенте
Процедура РаспознаваниеРечи(Команда)
	
	Если РаспознаваниеРечи_ВыполняетсяРаспознавание Тогда
		РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
	Иначе
		РаспознаваниеРечи_НачатьРаспознавание();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспознаваниеРечи_НачатьРаспознавание()
	
	ТекущиеПараметры = РаспознаваниеРечи_ПараметрыРаспознавания;
	ПараметрыМодели = ПараметрыРаспознаванияРечиКлиент.ПараметрыМодели(ТекущиеПараметры);
	ВариантИспользования = ПараметрыРаспознаванияРечиКлиент.ВариантИспользования(ТекущиеПараметры);
	ПараметрыРаспознавания = ПараметрыРаспознаванияРечиКлиент.ПараметрыПотоковогоРаспознаванияРечи(ТекущиеПараметры,
		Новый ОписаниеОповещения("ПриОстановкеАудиозаписи", ЭтотОбъект));
	
	Элемент = Элементы.ОписаниеФорматированное;
	
	Контекст = Новый Структура;
	Контекст.Вставить("Форма", ЭтотОбъект);
	Контекст.Вставить("Элемент", Элемент);
	Контекст.Вставить("ИмяРеквизита", "ОписаниеФорматированное");
	
	Попытка
		РаботаСРечьюБМОКлиент.НачатьПотоковоеРаспознавание(
			УникальныйИдентификатор,
			Новый ОписаниеОповещения(
				"ПриПолученииРезультатаРаспознавания", ЭтотОбъект, Контекст,
				"ПриОбработкеОшибкиРаспознавания", ЭтотОбъект),
			ПараметрыМодели,
			ВариантИспользования,
			ПараметрыРаспознавания
		);
		
		РаспознаваниеРечи_ВыполняетсяРаспознавание = Истина;
		РаспознаваниеРечи_ВремяНачалаРаспознавания = ТекущаяУниверсальнаяДатаВМиллисекундах();
		
	Исключение
		ПриОбработкеОшибкиРаспознавания(ИнформацияОбОшибке(), Истина, Контекст);
	КонецПопытки;
	
	РаспознаваниеРечи_ИзменитьСостояниеФормы();
	ТекущийЭлемент = Элементы.ОписаниеФорматированное;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспознаваниеРечи_ИзменитьСостояниеФормы()
	
	Если РаспознаваниеРечи_ВыполняетсяРаспознавание Тогда
		
		Элементы.РаспознаваниеРечиТекст.Картинка = БиблиотекаКартинок.КрасныйМикрофон;
			
		Если РаспознаваниеРечи_РаспознаваниеФразыЗавершено Тогда
			Элементы.РаспознаваниеРечиТекст.ЦветФона = Новый Цвет(255, 204, 0);
		Иначе
			Элементы.РаспознаваниеРечиТекст.ЦветФона = Новый Цвет(225, 154, 0);
		КонецЕсли;
		
	Иначе
		
		Элементы.РаспознаваниеРечиТекст.Картинка = БиблиотекаКартинок.ЧерныйМикрофон;
		
		Элементы.РаспознаваниеРечиТекст.ЦветФона = Новый Цвет;
		
	КонецЕсли;
	
	Элементы.ГруппаРаспознаваниеРечиТекст.Видимость = РаспознаваниеРечи_РаспознаваниеДоступно И РаботаСРечьюБМОКлиент.ПоддерживаетсяПотоковоеРаспознавание();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПолученииРезультатаРаспознавания(РезультатРаспознавания, ПродолжитьРаспознавание, Контекст) Экспорт 
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	ПоляВводаКлиент.ВставитьРезультатРаспознаванияПоКурсору(
		Контекст.Форма,
		Контекст.Элемент,
		Контекст.ИмяРеквизита,
		РезультатРаспознавания
	);
	
	ВремяКонца = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	РаботаСРечьюЖурналированиеКлиент.ДобавитьРезультатРаспознавания(
		УникальныйИдентификатор,
		РезультатРаспознавания,
		ВремяНачала,
		ВремяКонца
	);
	
	РаспознаваниеРечи_РаспознаваниеФразыЗавершено = РезультатРаспознавания.РаспознаваниеФразыЗавершено;
	РаспознаваниеРечи_ИзменитьСостояниеФормы();
	ТекущийЭлемент = Элементы.ОписаниеФорматированное;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОбработкеОшибкиРаспознавания(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	РаботаСРечьюЖурналированиеКлиент.ДобавитьИсключение(УникальныйИдентификатор, ИнформацияОбОшибке);
	
	ПоказатьИнформациюОбОшибке(ИнформацияОбОшибке);
	
	РаспознаваниеРечи_РаспознаваниеФразыЗавершено = Истина;
	РаспознаваниеРечи_ИзменитьСостояниеФормы();
	ТекущийЭлемент = Элементы.ОписаниеФорматированное;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОстановкеАудиозаписи(РезультатАудиозаписи, Контекст) Экспорт 
	
	РаспознаваниеРечи_ВыполняетсяРаспознавание = Ложь;
	РаспознаваниеРечи_РаспознаваниеФразыЗавершено = Истина;
	РаспознаваниеРечи_ИзменитьСостояниеФормы();
	ТекущийЭлемент = Элементы.ОписаниеФорматированное;
	
	ВремяКонца = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	ТекущиеПараметры = РаспознаваниеРечи_ПараметрыРаспознавания;
	ПараметрыМодели = ПараметрыРаспознаванияРечиКлиент.ПараметрыМодели(ТекущиеПараметры);
	ВариантИспользования = ПараметрыРаспознаванияРечиКлиент.ВариантИспользования(ТекущиеПараметры);
	
	РаботаСРечьюЖурналированиеКлиент.ДобавитьАудио(
		УникальныйИдентификатор,
		РезультатАудиозаписи,
		ПараметрыМодели,
		ВариантИспользования,
		РаспознаваниеРечи_ВремяНачалаРаспознавания,
		ВремяКонца
	);
	
	Если РаспознаваниеРечи_ПерезапускРаспознавания Тогда
		РаспознаваниеРечи_НачатьРаспознавание();
		РаспознаваниеРечи_ПерезапускРаспознавания = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыРаспознавания(Команда)
	
	ТекущиеПараметры = РаспознаваниеРечи_ПараметрыРаспознавания;
	ПараметрыРаспознаванияРечиКлиент.ПоказатьВыборПараметровРаспознаванияРечи(ЭтотОбъект, ТекущиеПараметры, 
		Новый ОписаниеОповещения("ПриВыбореПараметровРаспознаванияРечи", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореПараметровРаспознаванияРечи(Результат, Контекст) Экспорт
	
	РаспознаваниеРечи_ПараметрыРаспознавания = Результат;
	РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
	РаспознаваниеРечи_ПерезапускРаспознавания = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Пожаловаться(Команда)
	
	РаботаСРечьюЖурналированиеКлиент.СформироватьПисьмо(УникальныйИдентификатор);
	
КонецПроцедуры


&НаКлиенте
Процедура ДобавитьСканСМобильногоАвтоматически()

	//Если форма активна и блокировка регистра КэшМобильныхСканов уже стоит и есть скан
	Если МК_Клиент.ДоступностьФормы(ЭтотОбъект)
		И МобильныйСканерЗанят
		И МК_ВызовСервера.СканыЗагружены() Тогда
		
		Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Если Не ПроверитьЗаполнение() Тогда
				МК_ВызовСервера.УдалитьДанныеСканов();
				Возврат;
			КонецЕсли;
			
			ПараметрыЗаписи = Новый Структура("РежимЗаписи");
			ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение;
			
			Если Не Записать(ПараметрыЗаписи) Тогда
				МК_ВызовСервера.УдалитьДанныеСканов();
				Возврат;
			КонецЕсли;
		КонецЕсли;

		ДанныеСканов = МК_ВызовСервера.ДанныеСканов();
		
		Если ТипЗнч(ДанныеСканов) = Тип("Массив") Тогда
			Если ДанныеСканов.Количество() = 1 Тогда
				ДанныеСкана = ДанныеСканов[0];
				ДобавитьСканКакПриложение(ДанныеСкана);
			Иначе
				Порядок = 1;
				Для Каждого ДанныеСкана Из ДанныеСканов Цикл
					//@skip-check query-in-loop
					ДобавитьСканКакПриложение(ДанныеСкана, Порядок);
					Порядок = Порядок + 1;
				КонецЦикла;
			КонецЕсли;
		Иначе
			ДобавитьСканКакПриложение(ДанныеСкана, Порядок);
		КонецЕсли;
		
		МК_ВызовСервера.УдалитьДанныеСканов();
	КонецЕсли;
	
	//Если форм активна, пытаемся устанавливить блокировку
	Если МК_Клиент.ДоступностьФормы(ЭтотОбъект) И Не МобильныйСканерЗанят 
		И МК_ВызовСервера.ЗанятьСканер(УникальныйИдентификатор)Тогда
		
		МобильныйСканерЗанят = Истина;
	КонецЕсли;
	
	//Если форма уже не активна, то блокировку нужно снять
	Если Не МК_Клиент.ДоступностьФормы(ЭтотОбъект) И МобильныйСканерЗанят Тогда
		МК_ВызовСервера.ОсвободитьСканер(УникальныйИдентификатор);
		МобильныйСканерЗанят = Ложь;
	КонецЕсли
	
КонецПроцедуры


&НаКлиенте
Процедура ДобавитьСканКакПриложение(ДанныеСкана, Порядок = 0)

	ИмяСкана = МК_Клиент.СформироватьИмяФайла("jpg", Порядок);
	ПутьКФайлу = КаталогВременныхФайлов() + ИмяСкана;
	ДанныеСкана.Записать(ПутьКФайлу);
		
	НеОткрыватьКарточкуПослеСозданияИзФайла = Истина;
	Приложение = РаботаСФайламиКлиент.СоздатьДокументНаОсновеФайла(
		ПутьКФайлу, Объект.Ссылка, ЭтотОбъект, НеОткрыватьКарточкуПослеСозданияИзФайла);
		
	СтрокаПриложения = Объект.Приложения.Добавить();
	СтрокаПриложения.Приложение = Приложение;
	
	Если ТипЗнч(Приложение) = Тип("СправочникСсылка.Файлы") Тогда
		ДанныеФайлов = ДанныеФайлов(Приложение);
		ДанныеФайла = ДанныеФайлов.Получить(Приложение);
		ЗаполнитьЗначенияСвойств(СтрокаПриложения, ДанныеФайла);
	Иначе
		СтрокаПриложения.ИндексКартинки = РаботаСЗадачамиКлиентСервер.ИндексКартинкиПриложения(Приложение);
	КонецЕсли;
	ОбновитьПредставлениеПриложений();
	
	Модифицированность = Истина;
	
	ПараметрыЗаписи = Новый Структура("РежимЗаписи");
	ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение;
	
	Записать(ПараметрыЗаписи); // запишем еще раз, т.к. спр Файл уже записан, а табл часть Приложения еще нет

КонецПроцедуры

#КонецОбласти

#КонецОбласти