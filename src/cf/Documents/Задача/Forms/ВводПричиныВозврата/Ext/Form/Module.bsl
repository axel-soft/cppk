#Область ОписаниеПеременных

&НаКлиенте
Перем РежимДобавленияИсполнителя;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтоМобильныйКлиент = ПараметрыСеанса.ЭтоМобильныйКлиент;
	
	Если Не ЗначениеЗаполнено(Параметры.ЗадачаИлиДействие) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Параметры.ЗадачаИлиДействие) = Тип("ДокументСсылка.Задача") Тогда
		
		Задача = Параметры.ЗадачаИлиДействие;
		
	ИначеЕсли ТипЗнч(Параметры.ЗадачаИлиДействие) = Тип("ДокументСсылка.ДействиеЗадачи") Тогда
		
		Задача = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.ЗадачаИлиДействие, "Задача");
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестный тип значения параметра %1 (%2).'"),
			Параметры.ЗадачаИлиДействие,
			ТипЗнч(Параметры.ЗадачаИлиДействие));
			
	КонецЕсли;
	
	ЗадачаОбъект = Задача.ПолучитьОбъект();
	ЗначениеВРеквизитФормы(ЗадачаОбъект, "Объект");
	
	ОбновитьЗаголовокКомандыВернутьНаДоработку();
	
	Срок = Объект.Срок;
	УстановитьПривилегированныйРежим(Истина);
	СрокВышестоящейЗадачи = ?(ЗначениеЗаполнено(Объект.ВышестоящаяЗадача),
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВышестоящаяЗадача, "Срок"),
		Дата(1, 1, 1));
	УстановитьПривилегированныйРежим(Ложь);
	ИспользоватьДатуИВремяВСрокахЗадач =
		ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	Элементы.Срок.Формат = РаботаСЗадачами.ФорматСрокаПолный();
	Элементы.Срок.ФорматРедактирования = РаботаСЗадачами.ФорматСрокаПолный();
	
	ОбщаяПричинаВозврата = Параметры.ОбщаяПричинаВозврата;
	
	ДанныеДоступностиКоманды = РаботаСЗадачами.ДанныеДоступностиКомандыЗадач(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Задача), 
		Метаданные.Документы.Задача.Команды.ВернутьНаДоработку);
	Если Не ДанныеДоступностиКоманды.Доступность Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Невозможно выполнить команду ""%1"" для указанных задач'"),
			Метаданные.Документы.Задача.Команды.ВернутьНаДоработку);
	КонецЕсли;
	
	РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Задача,
		"Автор, ВидЗадачи, Участники");
	Автор = РеквизитыЗадачи.Автор;
	НастроитьФормуПоВидуЗадачи(РеквизитыЗадачи);
	ЗаполнитьУчастников(РеквизитыЗадачи);
	
	Справочники.ПравилаКоммуникаций.НастроитьПоляПредмета(
		ЭтотОбъект, 
		"УчастникиУчастник");
	
КонецПроцедуры


&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ЕстьВозвратНаДоработку = Ложь;
	УказаныВсеОсобыеПричиныВозврата = Истина;
	Для Каждого СтрокаУчастника Из Участники Цикл
		
		Если СтрокаУчастника.Добавлен Или СтрокаУчастника.ВернутьНаДоработку Тогда
			
			ЕстьВозвратНаДоработку = Истина;
			
			Если Не ЗначениеЗаполнено(СтрокаУчастника.ОсобаяПричинаВозврата)
				И ЗначениеЗаполнено(СтрокаУчастника.Участник) Тогда
				УказаныВсеОсобыеПричиныВозврата = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверка, что указали, кому вернуть на доработку.
	Если Не ЕстьВозвратНаДоработку Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Не указано, кому нужно вернуть на доработку.'"),,,
			"Участники",
			Отказ);
	КонецЕсли;
	
	// Проверка, что указали причину возврата на доработку.
	Если Не УказаныВсеОсобыеПричиныВозврата И Не ЗначениеЗаполнено(ОбщаяПричинаВозврата) Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Не указана причина возврата на доработку.'"),,,
			"ОбщаяПричинаВозврата",
			Отказ);
	КонецЕсли;
	
	// Проверка что нет дублей из-за добавления.
	УникальныеУчастники = Новый Массив;
	Для Каждого СтрокаУчастника Из Участники Цикл
		
		Если СтрокаУчастника.Добавлен
			Или СтрокаУчастника.Удален
			Или Не ЗначениеЗаполнено(СтрокаУчастника.Участник) Тогда
			Продолжить;
		КонецЕсли;
		
		УникальныеУчастники.Добавить(СтрокаУчастника.Участник);
		
	КонецЦикла;
	
	Для Каждого СтрокаУчастника Из Участники Цикл
		
		Если Не СтрокаУчастника.Добавлен
			Или Не ЗначениеЗаполнено(СтрокаУчастника.Участник) Тогда
			Продолжить;
		КонецЕсли;
		
		Если УникальныеУчастники.Найти(СтрокаУчастника.Участник) <> Неопределено Тогда
			
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Участник указан дважды: %1.'"),
				СтрокаУчастника.Участник);
			ОбщегоНазначения.СообщитьПользователю(
				ТекстСообщения,,
				"Участники[" + Формат(СтрокаУчастника.ПолучитьИдентификатор(), "ЧН=0; ЧГ=0") +"].Участник",,
				Отказ);
			
			Продолжить;
			
		КонецЕсли;
		
		УникальныеУчастники.Добавить(СтрокаУчастника.Участник);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПричинаВозвратаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОписаниеОповещение = Новый ОписаниеОповещения("ПослеВыбораПричиныВозврата", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура("ОбластьПрименения, Заголовок, ЗаголовокФормыСоздания");
	ПараметрыФормы.ОбластьПрименения =
		ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.ЗадачаПроверитьИсполнение");
	ПараметрыФормы.Заголовок = НСтр("ru = 'Выбор шаблона текста'");
	ПараметрыФормы.ЗаголовокФормыСоздания = НСтр("ru = 'Шаблон текста'");
	
	ОткрытьФорму("Справочник.ШаблоныТекстов.ФормаВыбора", 
		ПараметрыФормы,,,,,
		ОписаниеОповещение);
		
КонецПроцедуры

&НаКлиенте
Процедура СрокПриИзменении(Элемент)
	
	РаботаСЗадачамиКлиент.СрокПриИзменении(
		Срок,
		ИспользоватьДатуИВремяВСрокахЗадач,
		СрокВышестоящейЗадачи,
		Задача);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСЗадачамиКлиент.СрокОбработкаВыбора(
		ВыбранноеЗначение,
		СтандартнаяОбработка,
		Срок,
		ИспользоватьДатуИВремяВСрокахЗадач,
		СрокВышестоящейЗадачи,
		Задача);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУчастники

&НаКлиенте
Процедура УчастникиПриИзменении(Элемент)
	
	Если АвтоматическиНачатоРедактированиеУчастников Тогда
		АвтоматическиНачатоРедактированиеУчастников = Ложь;
		Возврат;
	КонецЕсли;
	
	ДанныеТекущегоУчастника = Новый Структура("Участник, ВидУчастника");
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		ДанныеТекущегоУчастника.ВидУчастника = Элемент.ТекущиеДанные.ВидУчастника;
		ДанныеТекущегоУчастника.Участник = Элемент.ТекущиеДанные.Участник;
	КонецЕсли;
	
	УчастникиПриИзмененииНаСервере(ДанныеТекущегоУчастника);
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДанныеСтроки = Элемент.ДанныеСтроки(ВыбраннаяСтрока);
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.УчастникиВернутьНаДоработку Тогда
		
		ВернутьНаДоработкуУчастникуНаКлиенте(ДанныеСтроки);
		
	ИначеЕсли Поле = Элементы.УчастникиЕстьОсобаяПричинаВозврата Тогда
		
		ВвестиОсобуюПричинуВозврата(ДанныеСтроки);
		
	Иначе
		
		Если ЭтоМобильныйКлиент Тогда
			СтандартнаяОбработка = Ложь;
			Если Не ЗначениеЗаполнено(ДанныеСтроки.Состояние) Тогда
				ТекущиеДанные = Элемент.ТекущиеДанные;
				
				ПараметрыФормы = СтруктураСтрокиУчастники();
				ЗаполнитьЗначенияСвойств(ПараметрыФормы, ТекущиеДанные);
				ОткрытьФорму("Документ.Задача.Форма.МК_ФормаСтрокиУчастники", ПараметрыФормы, ЭтотОбъект);
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеСтроки.Состояние) Тогда
			Возврат;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		
		РаботаСЗадачамиКлиент.ОткрытьКарточкуИсполнителяЗадачи(ДанныеСтроки.ДействиеУчастника);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПриАктивизацииСтроки(Элемент)
	
	УчастникиОбновитьКонтекстноеМеню();
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	РежимДобавленияИсполнителя = Истина;
	
	Отказ = Истина;
	НовСтр = Участники.Добавить();
	НовСтр.Участник = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
	НовСтр.ВидУчастника = ВидУчастникаИсполнитель;
	НовСтр.Добавлен = Истина;
	ЗаполнитьИндексКартинкиВернутьНаДоработку(НовСтр);
	УчастникиОбновитьКонтекстноеМеню();
	ИдСтроки = НовСтр.ПолучитьИдентификатор();
	
	Элементы.Участники.ТекущаяСтрока = ИдСтроки;
	
	Элементы.Участники.ИзменитьСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПередНачаломИзменения(Элемент, Отказ)
	
	Если ЭтоМобильныйКлиент Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено
		Или Не ЗначениеЗаполнено(ТекущиеДанные.Состояние) Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено
		Или ТекущиеДанные.Добавлен Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	ТекущиеДанные.Удален = Не ТекущиеДанные.Удален;
	ТекущиеДанные.ВернутьНаДоработку = Не ТекущиеДанные.Удален;
	ЗаполнитьИндексКартинкиВернутьНаДоработку(ТекущиеДанные);
	УчастникиОбновитьКонтекстноеМеню();
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если РежимДобавленияИсполнителя = Истина Тогда
		Элемент.ТекущийЭлемент = Элементы.УчастникиУчастник;
		РежимДобавленияИсполнителя = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиУчастникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	
	Если Не РаботаСАдреснойКнигойКлиент.ОбработатьВыборУчастника(ЭтотОбъект, Элемент, ВыбранноеЗначение, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	// Если значение требует уточнения, будет вызвана форма для ввода уточняющих данных.
	// Обработка выбора не должна выполняться в этом случае.
	ТипыДляУточнения = Новый Массив;
	ТипыДляУточнения.Добавить(Тип("Структура"));
	ТипыДляУточнения.Добавить(Тип("СправочникСсылка.РолиИсполнителей"));
	Если ТипыДляУточнения.Найти(ТипЗнч(ВыбранноеЗначение)) <> Неопределено Тогда
		СотрудникиКлиент.ОбработкаВыбораКонтейнера(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
		// Повторная проверка (значение могло быть изменено).
		Если ТипыДляУточнения.Найти(ТипЗнч(ВыбранноеЗначение)) <> Неопределено Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрока = Элементы.Участники.ТекущаяСтрока;
	СтрокаДанных = Участники.НайтиПоИдентификатору(ТекущаяСтрока);
	СтрокаДанных.Участник = ВыбранноеЗначение;
	
	Элементы.Участники.ЗакончитьРедактированиеСтроки(Ложь);
	
	УчастникиПриИзмененииНаСервере(Неопределено);
	
	Для Каждого СтрокаДанных Из Участники Цикл
		Если Не ЗначениеЗаполнено(СтрокаДанных.Участник) Тогда
			Элементы.Участники.ТекущаяСтрока = СтрокаДанных.ПолучитьИдентификатор();
			УчастникиОбновитьКонтекстноеМеню();
			Возврат;	
		КонецЕсли;	
	КонецЦикла;
	
	Элементы.Участники.ДобавитьСтроку();
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиУчастникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	ПараметрыВыбораУчастника = Неопределено;
	ТекущийУчастник = Неопределено;
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущийУчастник = ТекущиеДанные.Участник;
		
		Если Не ЗначениеЗаполнено(ТекущиеДанные.Участник) Тогда
			СтандартнаяОбработка = Ложь;
			ПодобратьИсполнителейРеализация();
			Возврат;
		КонецЕсли;
		
		ПараметрыВыбораУчастника = Новый Структура(
			"ФункцияУчастника", 
			ВидУчастникаИсполнитель);
		
	КонецЕсли;

	РаботаСАдреснойКнигойКлиент.ВыбратьУчастника(
		ЭтотОбъект,
		Элемент,
		СтандартнаяОбработка,
		ТекущийУчастник, , ,
		ПараметрыВыбораУчастника);

КонецПроцедуры

&НаКлиенте
Процедура УчастникиУчастникАвтоПодбор(Элемент,
	Текст,
	ДанныеВыбора,
	ПараметрыПолученияДанных,
	Ожидание,
	СтандартнаяОбработка) Экспорт
	
	СписокВыбораТекущий = Неопределено;
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		СписокВыбораТекущий = СписокВыбораИсполнителя;
		ПараметрыПолученияДанных.Вставить(
			"ФункцияУчастника", 
			ВидУчастникаИсполнитель);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Текст) И СписокВыбораТекущий <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		
		ДанныеВыбора = Новый СписокЗначений;
		Для Каждого Стр Из СписокВыбораТекущий Цикл
			ДанныеВыбора.Добавить(Стр.Значение, Стр.Представление);
		КонецЦикла;	
		Элементы.УчастникиУчастник.СписокВыбора.Очистить();
		
		Возврат;
	КонецЕсли;	
		
	РаботаСАдреснойКнигойКлиент.ПодобратьУчастника(
		ЭтотОбъект,
		Элемент,
		Текст,
		ДанныеВыбора,
		ПараметрыПолученияДанных,
		Ожидание,
		СтандартнаяОбработка,
		Элементы.Участники.ТекущиеДанные.Участник);
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиУчастникОкончаниеВводаТекста(Элемент,
	Текст,
	ДанныеВыбора,
	ПараметрыПолученияДанных,
	СтандартнаяОбработка) Экспорт
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ПараметрыПолученияДанных.Вставить(
			"ФункцияУчастника", 
			ВидУчастникаИсполнитель);
	КонецЕсли;
	
	РаботаСАдреснойКнигойКлиент.ПодобратьУчастника(
		ЭтотОбъект,
		Элемент,
		Текст,
		ДанныеВыбора,
		ПараметрыПолученияДанных,
		0,
		СтандартнаяОбработка,
		Элементы.Участники.ТекущиеДанные.Участник);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВернутьВсем(Команда)
	
	Для Каждого СтрокаУчастника Из Участники Цикл
		
		Если СтрокаУчастника.Добавлен Или СтрокаУчастника.Удален Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаУчастника.ВернутьНаДоработку = Истина;
		
		ЗаполнитьИндексКартинкиВернутьНаДоработку(СтрокаУчастника);
		
	КонецЦикла;
	
	УчастникиОбновитьКонтекстноеМеню();
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьНаДоработку(Команда)
	
	ВсеУчастники = Новый Массив;
	Для Каждого СтрокаУчастника Из Участники Цикл
		Если Не ЗначениеЗаполнено(СтрокаУчастника.Участник) Тогда
			Продолжить;
		КонецЕсли;
		ВсеУчастники.Добавить(СтрокаУчастника.Участник);
	КонецЦикла;
	
	ПроверитьС = ОбщегоНазначенияКлиент.ДатаСеанса();
	ПроверитьПо = Макс(ПроверитьС, Срок);
	
	РезультатПроверкиОтсутствий = 
		ОтсутствияКлиент.ПроверитьОтсутствия(ВсеУчастники, ПроверитьС, ПроверитьПо);
	Если РезультатПроверкиОтсутствий.ЕстьОтсутствия Тогда
		
		Обработчик = Новый ОписаниеОповещения(
			"ВернутьНаДоработкуПослеПредупрежденияОбОтсутствиях",
			ЭтотОбъект);
		
		ОтсутствияКлиент.ПредупредитьОбОтсутствиях(РезультатПроверкиОтсутствий, Обработчик);
			
	Иначе
		
		ВернутьНаДоработкуПослеПроверкиОтсутствия();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьНаДоработкуУчастнику(Команда)
	
	ДанныеСтроки = Элементы.Участники.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВернутьНаДоработкуУчастникуНаКлиенте(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура НикомуНеВозвращать(Команда)
	
	Для Каждого СтрокаУчастника Из Участники Цикл
		
		Если СтрокаУчастника.Добавлен Или СтрокаУчастника.Удален Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаУчастника.ВернутьНаДоработку = Ложь;
		
		ЗаполнитьИндексКартинкиВернутьНаДоработку(СтрокаУчастника);
		
	КонецЦикла;
	
	УчастникиОбновитьКонтекстноеМеню();
	
КонецПроцедуры

&НаКлиенте
Процедура ОсобаяПричинаВозврата(Команда)
	
	ДанныеСтроки = Элементы.Участники.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВвестиОсобуюПричинуВозврата(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура Ответственный(Команда)
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;	
	
	ТекущиеДанныеВидУчастника = ТекущиеДанные.ВидУчастника;

	Если ТекущиеДанныеВидУчастника = ВидУчастникаОтветственный Тогда
		
		ТекущиеДанные.ВидУчастника = ВидУчастникаИсполнитель;
		
		УчастникиПриИзмененииНаСервере(Неопределено);
		
		СортироватьУчастников();
		
		УчастникиОбновитьКонтекстноеМеню();
		
	ИначеЕсли ТекущиеДанныеВидУчастника = ВидУчастникаИсполнитель Тогда
		
		ОтветственныйПодходит = ПроверитьПравилаКоммуникации(ТекущиеДанные.Участник, ВидУчастникаОтветственный);
		
		Если Не ОтветственныйПодходит Тогда
			
			ПравилаКоммуникацийКлиент.ПоказатьНарушение(
				ТекущиеДанные.Участник, 
				ПолучитьПравилаКоммуникации(ВидУчастникаОтветственный));
			
			Возврат;
		КонецЕсли;
		
		// найти прежнего Ответственного и поменять
		Для Каждого Стр Из Участники Цикл
			
			Если Стр.ВидУчастника = ВидУчастникаОтветственный Тогда
				
				ИсполнительПодходит = ПроверитьПравилаКоммуникации(Стр.Участник, ВидУчастникаИсполнитель);
				
				Если Не ИсполнительПодходит Тогда
					
					ПравилаКоммуникацийКлиент.ПоказатьНарушение(
						Стр.Участник,
						ПолучитьПравилаКоммуникации(ВидУчастникаИсполнитель));
					
					Возврат;
				Иначе
					Стр.ВидУчастника = ВидУчастникаИсполнитель;
				КонецЕсли;
				
				// Ответственный должен быть один в документе, значит нет смысла дальше перебирать строки.
				Прервать;
				
			КонецЕсли;
				
		КонецЦикла;	
		
		ТекущиеДанные.ВидУчастника = ВидУчастникаОтветственный;
		
		УчастникиПриИзмененииНаСервере(Неопределено);
		
		СортироватьУчастников();
		
		УчастникиОбновитьКонтекстноеМеню();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть(Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВвестиОсобуюПричинуВозврата(ДанныеСтроки)
	
	Оповещение = Новый ОписаниеОповещения(
		"ОсобаяПричинаВозвратаЗавершениеВвода", 
		ЭтотОбъект, 
		Новый Структура("ДанныеСтроки", ДанныеСтроки));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Комментарий", ДанныеСтроки.ОсобаяПричинаВозврата);
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Особая причина возврата'"));
	ПараметрыФормы.Вставить("ИспользоватьШаблоны", Истина);
	ПараметрыФормы.Вставить("ОбластьПримененияШаблона", 
		ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.ЗадачаПроверитьИсполнение"));
	
	ОткрытьФорму("ОбщаяФорма.ВводКомментария",
		ПараметрыФормы,,,,,
		Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьНаДоработкуУчастникуНаКлиенте(ДанныеСтроки)
	
	Если ДанныеСтроки.Добавлен Или ДанныеСтроки.Удален Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки.ВернутьНаДоработку = Не ДанныеСтроки.ВернутьНаДоработку;
	ЗаполнитьИндексКартинкиВернутьНаДоработку(ДанныеСтроки);
	УчастникиОбновитьКонтекстноеМеню();
	
КонецПроцедуры

&НаСервере
Функция ДанныеВозвратаНаДоработку()
	
	ДанныеВозвратаНаДоработку = Неопределено;
	Если Не ПроверитьЗаполнение() Тогда
		Возврат ДанныеВозвратаНаДоработку;
	Конецесли;
	
	ДанныеВидаЗадачи = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(Объект.ВидЗадачи);
	
	ДанныеВозвратаНаДоработку = РаботаСЗадачамиКлиентСервер.НовыйДанныеВозвратаНаДоработку();
	ДанныеВозвратаНаДоработку.ОбщаяПричинаВозврата = ОбщаяПричинаВозврата;
	ДанныеВозвратаНаДоработку.Срок = Срок;
	
	МассивПричинаВозврата = Новый Массив;
	Если ЗначениеЗаполнено(ДанныеВозвратаНаДоработку.ОбщаяПричинаВозврата) Тогда
		МассивПричинаВозврата.Добавить(ДанныеВозвратаНаДоработку.ОбщаяПричинаВозврата);
	КонецЕсли;
	
	ДействияДляВозврата = Новый Массив;
	ДобавленныеУчастники = Новый Массив;
	УдаленныеДействия = Новый Массив;
	ПредставленияУдаленныхУчастников = Новый Массив;
	ПредставленияДобавленныхУчастников = Новый Массив;
	ОсобыеПричиныВозврата = Новый Соответствие;
	Для Каждого СтрокаУчастника Из Участники Цикл
		
		ДействиеДляВозврата = Неопределено;
		ДоступнаОсобаяПричинаВозврата = Ложь;
		Если СтрокаУчастника.Удален Тогда
			
			Если Не ЗначениеЗаполнено(СтрокаУчастника.ДействиеУчастника) Тогда
				ВызватьИсключение СтрШаблон(
					НСтр("ru = 'Не указано действие участника %1 для удаления.'"),
					СтрокаУчастника.Участник);
			КонецЕсли;
			
			УдаленныеДействия.Добавить(СтрокаУчастника.ДействиеУчастника);
			
			ПредставлениеУчастника = РаботаСЗадачамиПовтИсп.ПредставлениеУчастника(
				СтрокаУчастника.Участник);
			ПредставленияУдаленныхУчастников.Добавить(ПредставлениеУчастника);
			
		ИначеЕсли СтрокаУчастника.Добавлен Тогда
			
			Если Не ЗначениеЗаполнено(СтрокаУчастника.ВидУчастника) Тогда
				ВызватьИсключение НСтр("ru = 'Не указан вид участника новой строки.'");
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаУчастника.Участник) Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаУчастника.ВидУчастника = ДанныеВидаЗадачи.ВидУчастникаОтветственный Тогда
				ДанныеВозвратаНаДоработку.Ответственный = СтрокаУчастника.Участник;
			КонецЕсли;
			
			ДобавленныеУчастники.Добавить(СтрокаУчастника.Участник);
			
			ПредставлениеУчастника = РаботаСЗадачамиПовтИсп.ПредставлениеУчастника(
				СтрокаУчастника.Участник);
			ПредставленияДобавленныхУчастников.Добавить(ПредставлениеУчастника);
			
			ДоступнаОсобаяПричинаВозврата = Истина;
			ДействиеДляВозврата = СтрокаУчастника.Участник;
			
		Иначе
			
			Если Не ЗначениеЗаполнено(СтрокаУчастника.ВидУчастника) Тогда
				ВызватьИсключение СтрШаблон(
					НСтр("ru = 'Не указан вид участника текущей строки %1.'"),
					ПолучитьНавигационнуюСсылку(СтрокаУчастника.ДействиеУчастника));
			КонецЕсли;
			
			Если СтрокаУчастника.ВидУчастника = ДанныеВидаЗадачи.ВидУчастникаОтветственный Тогда
				ДанныеВозвратаНаДоработку.Ответственный = СтрокаУчастника.ДействиеУчастника;
			КонецЕсли;
			
			Если СтрокаУчастника.ВернутьНаДоработку Тогда
				
				ДействияДляВозврата.Добавить(СтрокаУчастника.ДействиеУчастника);
				
				ДоступнаОсобаяПричинаВозврата = Истина;
				ДействиеДляВозврата = СтрокаУчастника.ДействиеУчастника;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ДоступнаОсобаяПричинаВозврата
			И ЗначениеЗаполнено(СтрокаУчастника.ОсобаяПричинаВозврата) Тогда
			
			ОсобаяПричинаВозврата = СтрШаблон("%1: %2", 
				РаботаСЗадачамиПовтИсп.ПредставлениеУчастника(СтрокаУчастника.Участник),
				СтрокаУчастника.ОсобаяПричинаВозврата);
			МассивПричинаВозврата.Добавить(ОсобаяПричинаВозврата);
			
			ОсобыеПричиныВозврата.Вставить(
				ДействиеДляВозврата,
				СтрокаУчастника.ОсобаяПричинаВозврата);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПредставленияУдаленныхУчастников.Количество() > 0 Тогда
		ПредставлениеУдаленныхУчастников = СтрШаблон(
			"%1: %2",
			НСтр("ru = 'Удалены'"),
			СтрСоединить(ПредставленияУдаленныхУчастников, ", "));
		МассивПричинаВозврата.Добавить(ПредставлениеУдаленныхУчастников);
	КонецЕсли;
	
	Если ПредставленияДобавленныхУчастников.Количество() > 0 Тогда
		ПредставлениеДобавленныхУчастников = СтрШаблон(
			"%1: %2",
			НСтр("ru = 'Добавлены'"),
			СтрСоединить(ПредставленияДобавленныхУчастников, ", "));
		МассивПричинаВозврата.Добавить(ПредставлениеДобавленныхУчастников);
	КонецЕсли;
	
	ДанныеВозвратаНаДоработку.ПричинаВозврата = СтрСоединить(МассивПричинаВозврата, Символы.ПС);
	ДанныеВозвратаНаДоработку.ОсобыеПричиныВозврата = ОсобыеПричиныВозврата;
	ДанныеВозвратаНаДоработку.ДействияДляВозврата = ДействияДляВозврата;
	ДанныеВозвратаНаДоработку.УдаленныеДействия = УдаленныеДействия;
	ДанныеВозвратаНаДоработку.ДобавленныеУчастники = ДобавленныеУчастники;
	
	Возврат ДанныеВозвратаНаДоработку;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСпискиВыбора(РеквизитыЗадачи)
	
	ЗаполнитьСписокВыбора(
		РеквизитыЗадачи,
		СписокВыбораИсполнителя,
		ВидУчастникаИсполнитель);
	ЗаполнитьСписокВыбора(
		РеквизитыЗадачи,
		СписокВыбораОтветственного,
		ВидУчастникаОтветственный);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбора(РеквизитыЗадачи, ТекСписок, ФункцияУчастника)

	ТекСписок.Очистить();
	
	Если Не ЗначениеЗаполнено(ФункцияУчастника) Тогда
		Возврат;
	КонецЕсли;
	
	СписокВыбораТекущий = РаботаСЗадачамиПовтИсп.СписокВыбораФормыАвтораЗадачи(
		РеквизитыЗадачи.ВидЗадачи, Задача, РеквизитыЗадачи.Автор, ФункцияУчастника, Ложь);
	
	Для Каждого Стр Из СписокВыбораТекущий Цикл
		ТекСписок.Добавить(Стр.Значение, Стр.Представление);
	КонецЦикла;	
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУчастников(РеквизитыЗадачи)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаУчастники = РеквизитыЗадачи.Участники.Выгрузить();
	ТаблицаУчастники.Сортировать("НомерСтроки Возр");
	
	ВсеДействия = Новый Массив;
	Для Каждого СтрокаУчастника Из ТаблицаУчастники Цикл
		
		Если СтрокаУчастника.ВидУчастника = ВидУчастникаПроверяющий Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаУчастника.ДействиеУчастника) Тогда
			ВсеДействия.Добавить(СтрокаУчастника.ДействиеУчастника);
		КонецЕсли;
		
		НоваяСтрока = Участники.Добавить();
		НоваяСтрока.ВнешнийИдентификатор = СтрокаУчастника.ВнешнийИдентификатор;
		НоваяСтрока.ВидУчастника = СтрокаУчастника.ВидУчастника;
		НоваяСтрока.ДействиеУчастника = СтрокаУчастника.ДействиеУчастника;
		НоваяСтрока.Участник = СтрокаУчастника.Участник;
		
	КонецЦикла;
	
	РеквизитыДействий = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		ВсеДействия, 
		"ЕстьПриложения, РезультатДействия, РезультатДействияТекстом,
		|СостояниеУчастникаЗадачи, ФактическийИсполнитель");
	
	Для Каждого СтрокаУчастника Из Участники Цикл
		
		ЗаполнитьПредставлениеУчастника(СтрокаУчастника, РеквизитыДействий);
		
		Если Не ЗначениеЗаполнено(СтрокаУчастника.ДействиеУчастника) Тогда
			Продолжить;
		КонецЕсли;
		
		РеквизитыДействия = РеквизитыДействий[СтрокаУчастника.ДействиеУчастника];
		
		СтрокаУчастника.Состояние = РеквизитыДействия.СостояниеУчастникаЗадачи;
		СтрокаУчастника.ЕстьПриложения = РеквизитыДействия.ЕстьПриложения;
		МассивРезультат = Новый Массив;
		Если ЗначениеЗаполнено(РеквизитыДействия.РезультатДействия) Тогда
			МассивРезультат.Добавить(РеквизитыДействия.РезультатДействия);
		КонецЕсли;
		Если ЗначениеЗаполнено(РеквизитыДействия.РезультатДействияТекстом) Тогда
			МассивРезультат.Добавить(РеквизитыДействия.РезультатДействияТекстом);
		КонецЕсли;
		СтрокаУчастника.Результат = СтрСоединить(МассивРезультат, ", ");
		
		СтрокаУчастника.ВернутьНаДоработку = Истина;
		
		ЗаполнитьИндексКартинкиВернутьНаДоработку(СтрокаУчастника);
		
	КонецЦикла;
	
	СтрокаПроверяющего = Неопределено;
	Для Каждого СтрокаУчастника Из ТаблицаУчастники Цикл
		
		Если Не РаботаСЗадачамиПовтИсп.ЭтоПроверяющий(СтрокаУчастника.ВидУчастника) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаПроверяющего = СтрокаУчастника;
		
	КонецЦикла;
	
	Элементы.ИнформационнаяНадписьПроверяющий.Видимость =
		СтрокаПроверяющего = Неопределено
		Или Не РаботаСЗадачами.ЭтоТекущийИсполнитель(СтрокаПроверяющего.Участник);
	
КонецПроцедуры

&НаКлиенте
Функция Исполнители()
	
	МассивИсполнители = Новый Массив;
	Для Каждого СтрокаУчастника Из Участники Цикл
		
		Если СтрокаУчастника.ВидУчастника <> ВидУчастникаОтветственный
			И СтрокаУчастника.ВидУчастника <> ВидУчастникаИсполнитель Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаУчастника.Участник) Тогда
			Продолжить;
		КонецЕсли;
		
		МассивИсполнители.Добавить(СтрокаУчастника.Участник);
		
	КонецЦикла;
	
	Возврат МассивИсполнители;
	
КонецФункции

&НаСервере
Процедура НастроитьФормуПоВидуЗадачи(РеквизитыЗадачи)
	
	ДанныеВидаЗадачи = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(РеквизитыЗадачи.ВидЗадачи);
	
	ВидУчастникаОтветственный = ДанныеВидаЗадачи.ВидУчастникаОтветственный;
	ВидУчастникаИсполнитель = ДанныеВидаЗадачи.ВидУчастникаИсполнитель;
	ВидУчастникаПроверяющий = ДанныеВидаЗадачи.ВидУчастникаПроверяющий;
	ЗаголовокСпискаВыбранныхУчастников = ДанныеВидаЗадачи.ЗаголовокСпискаВыбранныхУчастников;
	ЗаголовокФормыВыбораИсполнителей = ДанныеВидаЗадачи.ЗаголовокФормыВыбораИсполнителей;
	
	Элементы.УчастникиКонтекстноеМенюОтветственный.Видимость =
		ЗначениеЗаполнено(ВидУчастникаОтветственный);
	
	ЗаполнитьСпискиВыбора(РеквизитыЗадачи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОсобаяПричинаВозвратаЗавершениеВвода(ВведенныйТекст, ДополнительныеПараметры) Экспорт
	
	Если ВведенныйТекст = Неопределено
		Или ВведенныйТекст = КодВозвратаДиалога.Отмена 
		Или ТипЗнч(ВведенныйТекст) <> Тип("Строка") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = ДополнительныеПараметры.ДанныеСтроки;
	
	ДанныеСтроки.ОсобаяПричинаВозврата = ВведенныйТекст;
	ДанныеСтроки.ЕстьОсобаяПричинаВозврата = ЗначениеЗаполнено(ДанныеСтроки.ОсобаяПричинаВозврата);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьИсполнителейРеализация(ТекущийВидУчастника = Неопределено)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗаголовокФормы", ЗаголовокФормыВыбораИсполнителей);
	ПараметрыФормы.Вставить("ЗаголовокСпискаВыбранных", ЗаголовокСпискаВыбранныхУчастников + ":");
	ПараметрыФормы.Вставить("ПодменятьПользователейСотрудниками", Истина);
	ПараметрыФормы.Вставить("РежимРаботыФормы", 2);
	ПараметрыФормы.Вставить("ОтображатьСотрудников", Истина);
	ПараметрыФормы.Вставить("ОтображатьРоли", Истина);
	ПараметрыФормы.Вставить("КонтекстОткрытия", Задача);
	ПараметрыФормы.Вставить("УстановитьВыделение", Автор);
	
	ПараметрыФормы.Вставить(
		"ПравилаКоммуникаций",
		ПравилаКоммуникацийКлиентСервер.КонтекстВыбора(
			ЭтотОбъект, ,
			?(ЗначениеЗаполнено(ТекущийВидУчастника),
				ТекущийВидУчастника,
				ВидУчастникаИсполнитель)));
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПодобратьИсполнителейПослеВыбора", ЭтотОбъект);
	РаботаСАдреснойКнигойКлиент.ВыбратьАдресатов(ПараметрыФормы, ЭтотОбъект, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьИсполнителейПослеВыбора(ВыбранныеИсполнители, ДопПараметры) Экспорт
	
	Если ВыбранныеИсполнители = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Добавим исполнителей.
	МассивИсполнители = Исполнители();
	Для Каждого ВыбранныйИсполнитель Из ВыбранныеИсполнители Цикл
		
		Если МассивИсполнители.Найти(ВыбранныйИсполнитель.Контакт) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаУчастника = Участники.Добавить();
		СтрокаУчастника.ВидУчастника = ВидУчастникаИсполнитель;
		СтрокаУчастника.Участник = ВыбранныйИсполнитель.Контакт;
		СтрокаУчастника.Добавлен = Истина;
		ЗаполнитьИндексКартинкиВернутьНаДоработку(СтрокаУчастника);
		
	КонецЦикла;
	
	// Обработаем изменение.
	УчастникиПриИзмененииНаСервере(Неопределено);
	
	СортироватьУчастников();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораПричиныВозврата(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	ОбщаяПричинаВозврата = ШаблоныТекстовВызовСервера.ТекстШаблона(Результат);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьПравилаКоммуникации(Участник, ВидУчастника)
	
	УчастникПодходит = Ложь;
	
	Если Не ЗначениеЗаполнено(Участник) Или Не ЗначениеЗаполнено(ВидУчастника) Тогда
		Возврат УчастникПодходит;
	КонецЕсли;
	
	МассивСотрудников = Справочники.ПравилаКоммуникаций.ПроверитьЭлементы(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Участник), 
		ПравилаКоммуникацийКлиентСервер.КонтекстВыбора(
			ЭтотОбъект,,
			ВидУчастника));
	
	УчастникПодходит = МассивСотрудников.Количество() > 0;
	
	Возврат УчастникПодходит;
	
КонецФункции

&НаСервере
Функция ПолучитьПравилаКоммуникации(ВидУчастника)
	
	Контекст = ПравилаКоммуникацийКлиентСервер.КонтекстВыбора(
		ЭтотОбъект,,
		ВидУчастника);
	Справочники.ПравилаКоммуникаций.ДополнитьКонтекст(Контекст);
	
	Возврат Справочники.ПравилаКоммуникаций.ПодобратьПравило(Контекст, Ложь);
		
КонецФункции

&НаСервере
Процедура СортироватьУчастников()
	
	Для Каждого СтрокаУчастника Из Участники Цикл
		
		СтрокаВида = "1";
		
		Если СтрокаУчастника.ВидУчастника = ВидУчастникаОтветственный Тогда
			СтрокаВида = "1";
		ИначеЕсли СтрокаУчастника.ВидУчастника = ВидУчастникаИсполнитель Тогда
			СтрокаВида = "2";
		КонецЕсли;
		
		УчастникПредставление = Строка(СтрокаУчастника.Участник);
		Если Не ЗначениеЗаполнено(УчастникПредставление) Тогда
			УчастникПредставление = "яя"; // для сортировки  -чтобы был в конце
		КонецЕсли;	

		СтрокаУчастника.ПорядокДляСортировки = СтрокаВида + "-" + УчастникПредставление;
		
	КонецЦикла;	

	Участники.Сортировать("ПорядокДляСортировки");	
	
КонецПроцедуры

&НаКлиенте
Функция СтруктураСтрокиУчастники()

	Возврат Новый Структура("ПредставлениеУчастника, ВидУчастника");

КонецФункции

&НаСервере
Процедура УчастникиПриИзмененииНаСервере(ДанныеТекущегоУчастника)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВсеДействия = Новый Массив;
	Для Каждого СтрокаУчастника Из Участники Цикл
		
		Если ЗначениеЗаполнено(СтрокаУчастника.ДействиеУчастника) Тогда
			ВсеДействия.Добавить(СтрокаУчастника.ДействиеУчастника);
		КонецЕсли;
		
	КонецЦикла;	
	
	РеквизитыДействий = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		ВсеДействия,
		"ФактическийИсполнитель");
	
	Для Каждого СтрокаУчастника Из Участники Цикл
		
		Если ДанныеТекущегоУчастника <> Неопределено
			И ИзменилсяВидУчастника
			И ЗначениеЗаполнено(ДанныеТекущегоУчастника.Участник)			
			И СтрокаУчастника.ВидУчастника = ДанныеТекущегоУчастника.ВидУчастника
			И СтрокаУчастника.Участник = ДанныеТекущегоУчастника.Участник Тогда
			
			МассивСотрудников = Справочники.ПравилаКоммуникаций.ПроверитьЭлементы(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
					ДанныеТекущегоУчастника.Участник), 
				ПравилаКоммуникацийКлиентСервер.КонтекстВыбора(
					ЭтотОбъект,,
					ДанныеТекущегоУчастника.ВидУчастника));
			Если МассивСотрудников.Количество() = 0 Тогда
				СтрокаУчастника.Участник = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
			КонецЕсли;
			
		КонецЕсли; 
		
		Если Не ЗначениеЗаполнено(СтрокаУчастника.ВидУчастника) Тогда
			СтрокаУчастника.ВидУчастника = ВидУчастникаИсполнитель;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаУчастника.Участник) Тогда
			СтрокаУчастника.Участник = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
		КонецЕсли;
		
		ЗаполнитьПредставлениеУчастника(СтрокаУчастника, РеквизитыДействий);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УчастникиОбновитьКонтекстноеМеню()
	
	ТекущиеДанные = Элементы.Участники.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.УчастникиКонтекстноеМенюОтветственный.Пометка =
		ТекущиеДанные.ВидУчастника = ВидУчастникаОтветственный;
	
	Элементы.УчастникиКонтекстноеМенюОсобаяПричинаВозврата.Пометка =
		ТекущиеДанные.ЕстьОсобаяПричинаВозврата;
	
	Элементы.УчастникиКонтекстноеМенюВернутьНаДоработку.Доступность =
		Не ТекущиеДанные.Добавлен И Не ТекущиеДанные.Удален;
	Элементы.УчастникиКонтекстноеМенюВернутьНаДоработку.Пометка =
		ТекущиеДанные.ВернутьНаДоработку;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьИндексКартинкиВернутьНаДоработку(СтрокаУчастника)
	
	Если СтрокаУчастника.Удален Тогда
		СтрокаУчастника.ИндексКартинкиВернутьНаДоработку = 2;
	ИначеЕсли СтрокаУчастника.Добавлен Тогда
		СтрокаУчастника.ИндексКартинкиВернутьНаДоработку = 1;
	ИначеЕсли СтрокаУчастника.ВернутьНаДоработку Тогда
		СтрокаУчастника.ИндексКартинкиВернутьНаДоработку = 0;
	Иначе
		СтрокаУчастника.ИндексКартинкиВернутьНаДоработку = -1;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредставлениеУчастника(СтрокаУчастника, РеквизитыДействий)
	
	СтрокаУчастника.ПредставлениеУчастника =
		РаботаСЗадачамиПовтИсп.ПредставлениеУчастника(СтрокаУчастника.Участник);
	
	Если Не ЗначениеЗаполнено(СтрокаУчастника.ДействиеУчастника) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыДействия = РеквизитыДействий[СтрокаУчастника.ДействиеУчастника];
	
	Если ЗначениеЗаполнено(РеквизитыДействия.ФактическийИсполнитель) Тогда
		СтрокаУчастника.ПредставлениеУчастника =
			РаботаСЗадачамиПовтИсп.ПредставлениеУчастника(
				РеквизитыДействия.ФактическийИсполнитель);
	КонецЕсли;
	
	Если СтрокаУчастника.ВидУчастника = ВидУчастникаОтветственный Тогда
		СтрокаУчастника.ПредставлениеУчастника = СтрШаблон(
			"%1 (%2)",
			СтрокаУчастника.ПредставлениеУчастника,
			НСтр("ru = 'отв.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьНаДоработкуПослеПредупрежденияОбОтсутствиях(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ВернутьНаДоработкуПослеПроверкиОтсутствия();
	
КонецПроцедуры

&НаКлиенте
Процедура ВернутьНаДоработкуПослеПроверкиОтсутствия()
	
	ДанныеВозвратаНаДоработку = ДанныеВозвратаНаДоработку();
	Если ДанныеВозвратаНаДоработку = Неопределено Тогда
		Возврат;
	Конецесли;
		
	Закрыть(ДанныеВозвратаНаДоработку);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЗаголовокКомандыВернутьНаДоработку()
	
	ДанныеВидаЗадачи = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(Объект.ВидЗадачи);
	
	РеквизитыРезультата = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ДанныеВидаЗадачи.РезультатПроверяющегоВозвращеноНаДоработку,
		"ЗаголовокКоманды, ЗаголовокКомандыЯзык1");
	
	ЗаголовокКоманды = РеквизитыРезультата.ЗаголовокКоманды;
	КонфигурацияИспользуетТолькоОдинЯзык = МультиязычностьПовтИсп.КонфигурацияИспользуетТолькоОдинЯзык(Ложь);
	Если Не КонфигурацияИспользуетТолькоОдинЯзык И Не МультиязычностьСервер.ЭтоОсновнойЯзык() Тогда
		ЗаголовокКоманды = РеквизитыРезультата.ЗаголовокКомандыЯзык1;
	КонецЕсли;
	
	Элементы.ФормаВернутьНаДоработку.Заголовок = ?(ЗначениеЗаполнено(ЗаголовокКоманды),
		ЗаголовокКоманды,
		Строка(ДанныеВидаЗадачи.РезультатПроверяющегоВозвращеноНаДоработку));
	
КонецПроцедуры

#КонецОбласти