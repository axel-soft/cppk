#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает действия задачи на доработку.
// 
// Параметры:
//  ДействияДляВозврата - Массив из ДокументСсылка.ДействиеЗадачи.
// 
Процедура ВернутьНаДоработку(ДействияДляВозврата) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеВидаЗадачи = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(ВидЗадачи);
	
	Для Каждого СтрокаУчастника Из Участники Цикл
		
		Если ДействияДляВозврата.Найти(СтрокаУчастника.ДействиеУчастника) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДействиеУчастникаОбъект = СтрокаУчастника.ДействиеУчастника.ПолучитьОбъект();
		
		ДействиеУчастникаОбъект.Дата = ТекущаяДатаСеанса();
		
		ДействиеУчастникаОбъект.ФактическийИсполнитель =
			Справочники.ФактическиеИсполнители.ПустаяСсылка();
		
		ДействиеУчастникаОбъект.УстановитьСостояние(
			ДанныеВидаЗадачи.СостояниеУчастниковНовая,
			Сотрудники.ОсновнойСотрудник(),
			Ложь);
		
		ДействиеУчастникаОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
	КонецЦикла;
	
КонецПроцедуры

// Отправляет действия задачи на проверку.
//
Процедура ОтправитьНаПроверку() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеВидаЗадачи = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(ВидЗадачи);
	
	Для Каждого СтрокаУчастника Из Участники Цикл
		
		Если Не РаботаСЗадачамиПовтИсп.ЭтоПроверяющий(СтрокаУчастника.ВидУчастника) Тогда
			Продолжить;
		КонецЕсли;
		
		ДействиеУчастникаОбъект = СтрокаУчастника.ДействиеУчастника.ПолучитьОбъект();
		Если ДействиеУчастникаОбъект.СостояниеУчастникаЗадачи = ДанныеВидаЗадачи.СостояниеУчастниковНовая Тогда
			Продолжить;
		КонецЕсли;
		
		ДействиеУчастникаОбъект.Дата = ТекущаяДатаСеанса();
		
		ДействиеУчастникаОбъект.ФактическийИсполнитель =
			Справочники.ФактическиеИсполнители.ПустаяСсылка();
		
		ДействиеУчастникаОбъект.УстановитьСостояние(
			ДанныеВидаЗадачи.СостояниеУчастниковНовая,
			Сотрудники.ОсновнойСотрудник(),
			Ложь);
		
		ДействиеУчастникаОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает вышестоящую задачу или действие.
// 
// Возвращаемое значение:
//  ДокументСсылка.ДействиекЗадачи, ДокументСсылка.Задача - Вышестоящая задача или действие.
//
Функция ВышестоящаяЗадачаИлиДействие() Экспорт
	
	Возврат ?(ЗначениеЗаполнено(ВышестоящееДействие), ВышестоящееДействие, ВышестоящаяЗадача);
	
КонецФункции

// Проверяет, есть ли участника указанного вида.
//
// Параметры:
//  ВидУчастника - СправочникСсылка.ВидыУчастниковЗадач - Вид участника.
// 
// Возвращаемое значение:
//  Булево - Есть участник указанного вида.
//
Функция ЕстьУчастник(ВидУчастника) Экспорт
	
	Если Не ЗначениеЗаполнено(ВидУчастника) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ЗначениеЗаполнено(НайтиУчастника(ВидУчастника));
	
КонецФункции

// Обновляет состояния задачи и действий при изменении участников.
//
Процедура ОбновитьСостоянияПриИзмененииУчастников() Экспорт
	
	ДанныеВидаЗадачи = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(ВидЗадачи);
	
	Если Не ЗначениеЗаполнено(Ссылка) Или СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиЧерновик Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеВидаЗадачи = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(ВидЗадачи);
	ВидУчастникаОтветственный = ДанныеВидаЗадачи.ВидУчастникаОтветственный;
	ВидУчастникаИсполнитель = ДанныеВидаЗадачи.ВидУчастникаИсполнитель;
	ВидУчастникаПроверяющий = ДанныеВидаЗадачи.ВидУчастникаПроверяющий;
	СостояниеЗадачиЧерновик = ДанныеВидаЗадачи.СостояниеЗадачиЧерновик;
	СостояниеЗадачиНовая = ДанныеВидаЗадачи.СостояниеЗадачиНовая;
	СостояниеЗадачиВРаботе = ДанныеВидаЗадачи.СостояниеЗадачиВРаботе;
	СостояниеЗадачиНаПроверке = ДанныеВидаЗадачи.СостояниеЗадачиНаПроверке;
	
	СтарыеУчастники = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Участники").Выгрузить();
	
	// Определяем изменения участников.
	ИзмененияУчастниковПоВидам = Новый Соответствие;
	ИзмененияУчастниковПоВидам[ВидУчастникаОтветственный] = НовыйИзмененияУчастников();
	ИзмененияУчастниковПоВидам[ВидУчастникаИсполнитель] = НовыйИзмененияУчастников();
	ИзмененияУчастниковПоВидам[ВидУчастникаПроверяющий] = НовыйИзмененияУчастников();
	
	// Определяем изменения участников - Добавление.
	Для Каждого СтрокаУчастника Из Участники Цикл
		
		ПараметрыОтбора = Новый Структура("ВидУчастника, Участник",
			СтрокаУчастника.ВидУчастника,
			СтрокаУчастника.Участник);
		НайденныеСтроки = СтарыеУчастники.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() <> 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИзмененияУчастниковВида = ИзмененияУчастниковПоВидам[СтрокаУчастника.ВидУчастника];
		Если ИзмененияУчастниковВида = Неопределено Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Неизвестный вид участника %1 для задачи вида %2'"),
				СтрокаУчастника.ВидУчастника,
				ВидЗадачи);
		КонецЕсли;
		
		ИзмененияУчастниковВида.Добавленные.Добавить(СтрокаУчастника.Участник);
		
	КонецЦикла;
	
	// Определяем изменения участников - Удаление.
	Для Каждого СтрокаУчастника Из СтарыеУчастники Цикл
		
		ПараметрыОтбора = Новый Структура("ВидУчастника, Участник",
			СтрокаУчастника.ВидУчастника,
			СтрокаУчастника.Участник);
		НайденныеСтроки = Участники.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() <> 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИзмененияУчастниковВида = ИзмененияУчастниковПоВидам[СтрокаУчастника.ВидУчастника];
		Если ИзмененияУчастниковВида = Неопределено Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Неизвестный вид участника %1 для задачи вида %2'"),
				СтрокаУчастника.ВидУчастника,
				ВидЗадачи);
		КонецЕсли;
		
		ИзмененияУчастниковВида.Удаленные.Добавить(СтрокаУчастника.Участник);
		
	КонецЦикла;
	
	ИзмененияОтветственных = ИзмененияУчастниковПоВидам[ВидУчастникаОтветственный];
	ИзмененияИсполнителей = ИзмененияУчастниковПоВидам[ВидУчастникаИсполнитель];
	ИзмененияПроверяющих = ИзмененияУчастниковПоВидам[ВидУчастникаПроверяющий];
	
	АктивныеДействияПоЗадаче = Документы.ДействиеЗадачи.АктивныеДействияПоЗадаче(Ссылка);
	
	ЕстьРезультатОтрицательный = Ложь;
	ЕстьРезультатСЗамечаниями = Ложь;
	ОсталосьОжидаемоеВыполнение = Ложь;
	ОсталасьОжидаемаяПроверка = Ложь;
	Для Каждого СтрокаУчастника Из Участники Цикл
		
		ДанныеДействия = АктивныеДействияПоЗадаче.Найти(СтрокаУчастника.ДействиеУчастника, "ДействиеЗадачи");
		Если ДанныеДействия = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеВидаЗадачи.РезультатИсполнителяВыполненаОтрицательно)
			И ДанныеДействия.РезультатДействия = ДанныеВидаЗадачи.РезультатИсполнителяВыполненаОтрицательно Тогда
			ЕстьРезультатОтрицательный = Истина;
		ИначеЕсли ЗначениеЗаполнено(ДанныеВидаЗадачи.РезультатИсполнителяВыполненаСЗамечаниями)
			И ДанныеДействия.РезультатДействия = ДанныеВидаЗадачи.РезультатИсполнителяВыполненаСЗамечаниями Тогда
			ЕстьРезультатСЗамечаниями = Истина;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДанныеДействия.РезультатДействия)
			И РаботаСЗадачамиПовтИсп.ЭтоИсполнитель(СтрокаУчастника.ВидУчастника) Тогда
			
			ОсталосьОжидаемоеВыполнение = Истина;
			
		ИначеЕсли ((ЗначениеЗаполнено(ДанныеВидаЗадачи.СостояниеУчастниковОжидаетПроверки)
					И ДанныеДействия.СостояниеУчастникаЗадачи = ДанныеВидаЗадачи.СостояниеУчастниковОжидаетПроверки)
				Или (ЗначениеЗаполнено(ДанныеВидаЗадачи.СостояниеУчастниковОжидаетПроверкиОтрицательно)
					И ДанныеДействия.СостояниеУчастникаЗадачи = ДанныеВидаЗадачи.СостояниеУчастниковОжидаетПроверкиОтрицательно)
				Или (ЗначениеЗаполнено(ДанныеВидаЗадачи.СостояниеУчастниковОжидаетПроверкиСЗамечаниями)
					И ДанныеДействия.СостояниеУчастникаЗадачи = ДанныеВидаЗадачи.СостояниеУчастниковОжидаетПроверкиСЗамечаниями))
			И РаботаСЗадачамиПовтИсп.ЭтоИсполнитель(СтрокаУчастника.ВидУчастника) Тогда
			
			ОсталасьОжидаемаяПроверка = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьРезультатОтрицательный Тогда
		РасчитанноеСостояниеЗадачиЗакрыта = ДанныеВидаЗадачи.СостояниеЗадачиЗакрытаОтрицательно;
	ИначеЕсли ЕстьРезультатСЗамечаниями Тогда
		РасчитанноеСостояниеЗадачиЗакрыта = ДанныеВидаЗадачи.СостояниеЗадачиЗакрытаСЗамечаниями;
	Иначе
		РасчитанноеСостояниеЗадачиЗакрыта = ДанныеВидаЗадачи.СостояниеЗадачиЗакрыта;
	КонецЕсли;
	
	Если Не ЕстьУчастник(ВидУчастникаОтветственный) И Не ЕстьУчастник(ВидУчастникаИсполнитель) Тогда
		
		// Удалили всех исполнителей - вернём в состояние "Черновик".
		УстановитьСостояние(СостояниеЗадачиЧерновик, Истина);
		
	ИначеЕсли ИзмененияОтветственных.Добавленные.Количество() > 0
		Или ИзмененияИсполнителей.Добавленные.Количество() > 0 Тогда
		
		// Добавили исполнителя - направим ему на исполнение.
		УстановитьСостояние(СостояниеЗадачиНовая, Истина);
		
	ИначеЕсли Не ОсталосьОжидаемоеВыполнение
		И (ИзмененияОтветственных.Удаленные.Количество() > 0
			Или ИзмененияИсполнителей.Удаленные.Количество() > 0)
		И (СостояниеЗадачи = СостояниеЗадачиНовая
			Или СостояниеЗадачи = СостояниеЗадачиВРаботе) Тогда
		
		// Удалили последнего исполнителя - направим на проверку или отметим выполненной.
		Если ОсталасьОжидаемаяПроверка Тогда
			УстановитьСостояние(СостояниеЗадачиНаПроверке, Истина);
		Иначе
			УстановитьСостояние(РасчитанноеСостояниеЗадачиЗакрыта, Истина);
		КонецЕсли;
		
	ИначеЕсли ИзмененияПроверяющих.Добавленные.Количество() > 0
		И (СостояниеЗадачи = СостояниеЗадачиНаПроверке
			Или СостояниеЗадачи = РасчитанноеСостояниеЗадачиЗакрыта) Тогда
		
		// Добавили проверяющего - например ему на проверку.
		УстановитьСостояние(СостояниеЗадачиНаПроверке, Истина);
		
	ИначеЕсли ИзмененияПроверяющих.Удаленные.Количество() > 0
		И СостояниеЗадачи = СостояниеЗадачиНаПроверке Тогда
		
		// Удалили проверяющего - завершим проверку.
		УстановитьСостояние(РасчитанноеСостояниеЗадачиЗакрыта, Истина);
		
	КонецЕсли;
	
	Если ОсталосьОжидаемоеВыполнение
		И (ИзмененияПроверяющих.Добавленные.Количество() > 0
			Или ИзмененияПроверяющих.Удаленные.Количество() > 0) Тогда
		ДополнительныеСвойства.Вставить("ОбновитьСостоянияОбработкиРезультата");
	КонецЕсли;
	
КонецПроцедуры

// Возвращает описание задачи в формате HTML.
//
// Параметры:
//   ТекущееДействиеЗадачи - ДокументСсылка.ДействиеЗадачи, Неопределено - текущее действие задачи.
//                         - СтрокаТаблицыЗначений - см. ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ЗапросСОтборами
//   ОтображатьИсториюВыполнения - Булево - отображать историю выполнения.
//   КешДанных - Структура - кеш данных, который требуется для ускорения работы различных механизмов.
//   ДобавлятьТегиКСсылкам - Булево - добавлять теги к ссылкам.
//   ВключатьНавигационныеСсылки - Булево - включать навигационные ссылки.
//   КодЯзыка - Строка
//
// Возвращаемое значение:
//   Строка - Описание HTML.
//
Функция ОписаниеHTML(ТекущееДействиеЗадачи = Неопределено, ОтображатьИсториюВыполнения = Истина, КешДанных = Неопределено,
		ДобавлятьТегиКСсылкам = Истина, ВключатьНавигационныеСсылки = Истина, КодЯзыка = Неопределено, КлючНазначения = "ОписаниеHTML") Экспорт
	
	// Основа текста.
	ФорматированныйДокумент = ОписаниеФорматированныйДокумент(
		ТекущееДействиеЗадачи,
		ОтображатьИсториюВыполнения,
		ВключатьНавигационныеСсылки,
		КлючНазначения,
		КешДанных,
		КодЯзыка);
	
	ТекстHTML = ОбзорОбъектов.ТекстHTMLФорматированногоДокумента(ФорматированныйДокумент);
	
	// Вставка перед текстом.
	ТекстНачалаHTML = ИнтеграцияЗадач.ОписаниеHTMLПеред(ЭтотОбъект, ТекущееДействиеЗадачи, КешДанных);
	Если ТекстНачалаHTML = Неопределено Тогда
		
		ТекстНачалаHTML = "";
		ПоказатьСсылкуОтмены = Истина;
		
		ВидСостоянияЗадачи = РаботаСЗадачамиПовтИсп.ВидСостоянияЗадач(СостояниеЗадачи);
		Если ТекущееДействиеЗадачи <> Неопределено
			И ВидСостоянияЗадачи <> Перечисления.ВидыСостоянийЗадач.Отменена Тогда
			Если ТипЗнч(ТекущееДействиеЗадачи) = Тип("СтрокаТаблицыЗначений") Тогда
				СостояниеУчастникаЗадачи = ТекущееДействиеЗадачи.СостояниеУчастникаЗадачи;
			Иначе
				СостояниеУчастникаЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					ТекущееДействиеЗадачи,
					"СостояниеУчастникаЗадачи");
			КонецЕсли;
			Если СостояниеУчастникаЗадачи = Справочники.СостоянияУчастниковЗадач.Отменена Тогда
				ВидСостоянияЗадачи = Перечисления.ВидыСостоянийЗадач.Отменена;
				ПоказатьСсылкуОтмены = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		ЭтоОтмененнаяЗадача = Перечисления.ВидыСостоянийЗадач.ЭтоОтмененнаяЗадача(ВидСостоянияЗадачи);
		ЭтоОтложеннаяЗадача = Перечисления.ВидыСостоянийЗадач.ЭтоОтложеннаяЗадача(ВидСостоянияЗадачи);
		
		ЭтоУдаленнаяЗадача = ПометкаУдаления;
		
		ЭтоУдаленноеДействиеЗадачи = Ложь;
		ЭтоВыполненноеДействие = Ложь;
		Если ЗначениеЗаполнено(ТекущееДействиеЗадачи) Тогда
			
			КэшОбластиПросмотра = КэшиНаВремяВызоваПовтИсп.КэшЗадачаОбластьПросмотра();
			
			Если КэшОбластиПросмотра.Заполнен И КэшОбластиПросмотра.ДействиеЗадачи = ТекущееДействиеЗадачи Тогда
				РеквизитыДействия = КэшОбластиПросмотра.РеквизитыДействияЗадачи;
			ИначеЕсли ТипЗнч(ТекущееДействиеЗадачи) = Тип("СтрокаТаблицыЗначений") Тогда
				РеквизитыДействия = ТекущееДействиеЗадачи;
			Иначе
				РеквизитыДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
					ТекущееДействиеЗадачи,
					"СостояниеУчастникаЗадачи, РезультатДействия, ПометкаУдаления");
			КонецЕсли;
			
			ВидСостоянияУчастниковЗадач = РаботаСЗадачамиПовтИсп.ВидСостоянияУчастниковЗадач(
				РеквизитыДействия.СостояниеУчастникаЗадачи);
			
			ЭтоВыполненноеДействие = Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоВыполненноеДействие(ВидСостоянияУчастниковЗадач);
			ЭтоУдаленноеДействиеЗадачи = РеквизитыДействия.ПометкаУдаления;
			
		КонецЕсли;
		
		Если ЭтоУдаленнаяЗадача Тогда
			
			ТекстНачалаHTML = СтрШаблон(
				"<table bgcolor=#F0F0F0><tr>
				|<td width=20>%1</td>
				|<td>%2</td>
				|</tr></table>",
				ОбзорОбъектовКлиентСервер.HTMLТекстКартинки(БиблиотекаКартинок.СостояниеЗадачиОтменена),
				НСтр("ru = 'Задача удалена'", КодЯзыка));
			
		ИначеЕсли ЭтоУдаленноеДействиеЗадачи Тогда
			
			ТекстНачалаHTML = СтрШаблон(
				"<table bgcolor=#F0F0F0><tr>
				|<td width=20>%1</td>
				|<td>%2</td>
				|</tr></table>",
				ОбзорОбъектовКлиентСервер.HTMLТекстКартинки(БиблиотекаКартинок.СостояниеЗадачиОтменена),
				НСтр("ru = 'Задача данному исполнителю удалена'", КодЯзыка));
			
		ИначеЕсли ЭтоОтмененнаяЗадача Тогда
			
			Если ПоказатьСсылкуОтмены Тогда
				СсылкаПоказатьПричинуОтмены = СтрШаблон(
					"v8doc:tasks/ShowCancellationReason/%1",
					ПолучитьНавигационнуюСсылку(Ссылка));
			Иначе
				СсылкаПоказатьПричинуОтмены = "";
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПричинаОтмены) Тогда
				ТекстНачалаHTML = СтрШаблон(
					"<table bgcolor=#F0F0F0><tr>
					|<td width=20>%1</td>
					|<td><a href=%2>%3: %4</a></td>
					|</tr></table>",
					ОбзорОбъектовКлиентСервер.HTMLТекстКартинки(
						Перечисления.ВидыСостоянийЗадач.КартинкаСостояния(ВидСостоянияЗадачи),
						СсылкаПоказатьПричинуОтмены),
					СсылкаПоказатьПричинуОтмены,
					НСтр("ru = 'Задача отменена'", КодЯзыка),
					РаботаС_HTML.ЗаменитьСпецСимволыHTML(ПричинаОтмены));
			ИначеЕсли ЗначениеЗаполнено(СсылкаПоказатьПричинуОтмены) Тогда
				ТекстНачалаHTML = СтрШаблон(
					"<table bgcolor=#F0F0F0><tr>
					|<td width=20>%1</td>
					|<td><a href=%2>%3</a></td>
					|</tr></table>",
					ОбзорОбъектовКлиентСервер.HTMLТекстКартинки(
						Перечисления.ВидыСостоянийЗадач.КартинкаСостояния(ВидСостоянияЗадачи),
						СсылкаПоказатьПричинуОтмены),
					СсылкаПоказатьПричинуОтмены,
					НСтр("ru = 'Задача отменена'", КодЯзыка));
			Иначе
				ТекстНачалаHTML = СтрШаблон(
					"<table bgcolor=#F0F0F0><tr>
					|<td width=20>%1</td>
					|<td>%2</td>
					|</tr></table>",
					ОбзорОбъектовКлиентСервер.HTMLТекстКартинки(
						Перечисления.ВидыСостоянийЗадач.КартинкаСостояния(ВидСостоянияЗадачи)),
					НСтр("ru = 'Задача отменена'", КодЯзыка));
			КонецЕсли;
			
		ИначеЕсли ЭтоОтложеннаяЗадача Тогда
			
			ТекстНачалаHTML = СтрШаблон(
				"<table bgcolor=#F0F0F0><tr>
				|<td width=20>%1</td>
				|<td>%2</td>
				|</tr></table>",
				ОбзорОбъектовКлиентСервер.HTMLТекстКартинки(
					Перечисления.ВидыСостоянийЗадач.КартинкаСостояния(ВидСостоянияЗадачи)),
				НСтр("ru = 'Задача отложена'", КодЯзыка));
			
		ИначеЕсли ЭтоВыполненноеДействие Тогда
			
			ХарактерРезультата = РаботаСЗадачамиПовтИсп.ХарактерРезультата(РеквизитыДействия.РезультатДействия);
			
			КартинкаРезультата = Перечисления.ХарактерыРезультатов.КартинкаСостояния(ХарактерРезультата);
			ЦветРезультата = Перечисления.ХарактерыРезультатов.ЦветСтрокой(ХарактерРезультата);
			
			Если ЗначениеЗаполнено(ЦветРезультата) Тогда
				ТекстНачалаHTML = СтрШаблон(
					"<table bgcolor=#F0F0F0><tr>
					|<td width=20>%1</td>
					|<td><FONT color=%2>%3</FONT></td>
					|</tr></table>",
					ОбзорОбъектовКлиентСервер.HTMLТекстКартинки(КартинкаРезультата),
					ЦветРезультата,
					Строка(РеквизитыДействия.РезультатДействия));
			Иначе
				ТекстНачалаHTML = СтрШаблон(
					"<table bgcolor=#F0F0F0><tr>
					|<td width=20>%1</td>
					|<td>%2</td>
					|</tr></table>",
					ОбзорОбъектовКлиентСервер.HTMLТекстКартинки(КартинкаРезультата),
					Строка(РеквизитыДействия.РезультатДействия));
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстНачалаHTML) Тогда
		ТекстНачалаHTML = ТекстНачалаHTML + "<br>";
	КонецЕсли;
	
	ТекстHTML = СтрЗаменить(ТекстHTML, МеткаНачала(), ТекстНачалаHTML);
	
	// Вставка после текста.
	ТекстКонцаHTML = ИнтеграцияЗадач.ОписаниеHTMLПосле(
		ЭтотОбъект,
		ТекущееДействиеЗадачи,
		КешДанных,
		ВключатьНавигационныеСсылки,
		КодЯзыка);
	Если ТекстКонцаHTML = Неопределено Тогда
		ТекстКонцаHTML = "";
	КонецЕсли;
	
	// История выполнения
	Если ОтображатьИсториюВыполнения Тогда
		ТекстКонцаHTML = ТекстКонцаHTML +
			СтрШаблон("<br><a href=v8doc:tasks/ShowHistory/%1>%2</a>",
				ПолучитьНавигационнуюСсылку(Ссылка),
				НСтр("ru = 'История выполнения'", КодЯзыка));
	КонецЕсли;
	
	ТекстHTML = СтрЗаменить(ТекстHTML, МеткаКонца(), ТекстКонцаHTML);
	
	ТекстHTML = СтрЗаменить(ТекстHTML, "<head>", "<head>" + СтильHTML());
	
	Если ДобавлятьТегиКСсылкам Тогда
		РаботаС_HTML.ДобавитьТегиКСсылкам(ТекстHTML);
	КонецЕсли;
	
	Возврат ТекстHTML;
	
КонецФункции

// Возвращает описание задачи в формате простого текста.
//
// Параметры:
//  ТекущееДействиеЗадачи - ДокументСсылка.ДействиеЗадачи, Неопределено - Текущее действие задачи.
//  КодЯзыка - Строка
// 
// Возвращаемое значение:
//  Строка - Описание в формате простого текста.
//
Функция ОписаниеПростойТекст(ТекущееДействиеЗадачи = Неопределено, КодЯзыка = Неопределено) Экспорт
	
	ТекстHTML = ОписаниеHTML(
		ТекущееДействиеЗадачи,
		Ложь,
		Неопределено,
		Ложь,
		Ложь,
		КодЯзыка,
		"ОписаниеПростойТекст");
	
	ПростойТекст = РаботаС_HTML.ПолучитьТекстИзHTML(ТекстHTML, Неопределено, Ложь);
	
	ПростойТекст = СокрЛП(ПростойТекст);
	
	Возврат ПростойТекст;
	
КонецФункции

// Отправляет действия задачи на исполнение.
//
// Параметры:
//  Принудительно - Булево - Нужно ли принудительно заново отправлять на исполнение
//                  тем исполнителям, кто уже получал задачу.
//
Процедура НаправитьНаИсполнение(Принудительно) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеВидаЗадачи = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(ВидЗадачи);
	
	Для Каждого СтрокаУчастника Из Участники Цикл
		
		Если Не РаботаСЗадачамиПовтИсп.ЭтоИсполнитель(СтрокаУчастника.ВидУчастника) Тогда
			Продолжить;
		КонецЕсли;
		
		ДействиеУчастникаОбъект = СтрокаУчастника.ДействиеУчастника.ПолучитьОбъект();
		Если Не Принудительно И ЗначениеЗаполнено(ДействиеУчастникаОбъект.СостояниеУчастникаЗадачи) Тогда
			Продолжить;
		КонецЕсли;
		
		ДействиеУчастникаОбъект.ОтметитьНаправлениеНаИсполнение(ВидЗадачи, ДатаСоздания);
		
		ДействиеУчастникаОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
	КонецЦикла;
	
КонецПроцедуры

// Отправляет действия задачи на проверку.
//
Процедура ВернутьНаПроверку() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеВидаЗадачи = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(ВидЗадачи);
	Если Не ЗначениеЗаполнено(ДанныеВидаЗадачи.СостояниеУчастниковОжидаетПроверки) Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Возврат на проверку не поддерживается для вида задачи %1.'"),
			ВидЗадачи);
	КонецЕсли;
	
	Для Каждого СтрокаУчастника Из Участники Цикл
		
		Если Не РаботаСЗадачамиПовтИсп.ЭтоИсполнитель(СтрокаУчастника.ВидУчастника) Тогда
			Продолжить;
		КонецЕсли;
		
		ДействиеУчастникаОбъект = СтрокаУчастника.ДействиеУчастника.ПолучитьОбъект();
		
		Если ДействиеУчастникаОбъект.РезультатДействия = ДанныеВидаЗадачи.РезультатИсполнителяВыполнена Тогда
			
			ДействиеУчастникаОбъект.УстановитьСостояние(
				ДанныеВидаЗадачи.СостояниеУчастниковОжидаетПроверки,
				Сотрудники.ОсновнойСотрудник(),
				Ложь);
			
			ДействиеУчастникаОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
		ИначеЕсли ЗначениеЗаполнено(ДанныеВидаЗадачи.РезультатИсполнителяВыполненаОтрицательно)
			И ДействиеУчастникаОбъект.РезультатДействия = ДанныеВидаЗадачи.РезультатИсполнителяВыполненаОтрицательно Тогда
			
			ДействиеУчастникаОбъект.УстановитьСостояние(
				ДанныеВидаЗадачи.СостояниеУчастниковОжидаетПроверкиОтрицательно,
				Сотрудники.ОсновнойСотрудник(),
				Ложь);
			
			ДействиеУчастникаОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
		ИначеЕсли ЗначениеЗаполнено(ДанныеВидаЗадачи.РезультатИсполнителяВыполненаСЗамечаниями)
			И ДействиеУчастникаОбъект.РезультатДействия = ДанныеВидаЗадачи.РезультатИсполнителяВыполненаСЗамечаниями Тогда
			
			ДействиеУчастникаОбъект.УстановитьСостояние(
				ДанныеВидаЗадачи.СостояниеУчастниковОжидаетПроверкиСЗамечаниями,
				Сотрудники.ОсновнойСотрудник(),
				Ложь);
			
			ДействиеУчастникаОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
		Иначе
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Неизвестный результат действия для возврата на доработку %1 по виду задачи %2.'"),
				ДействиеУчастникаОбъект.РезультатДействия,
				ВидЗадачи);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Отмечает что действие исполнения находится на проверке.
//
Процедура ОтметитьНаПроверке() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеВидаЗадачи = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(ВидЗадачи);
	Если Не ЗначениеЗаполнено(ДанныеВидаЗадачи.СостояниеУчастниковНаПроверке) Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Отметка на проверке не поддерживается для вида задачи %1.'"),
			ВидЗадачи);
	КонецЕсли;
	
	Для Каждого СтрокаУчастника Из Участники Цикл
		
		Если Не РаботаСЗадачамиПовтИсп.ЭтоПроверяющий(СтрокаУчастника.ВидУчастника) Тогда
			Продолжить;
		КонецЕсли;
		
		ДействиеУчастникаОбъект = СтрокаУчастника.ДействиеУчастника.ПолучитьОбъект();
		Если ДействиеУчастникаОбъект.СостояниеУчастникаЗадачи = ДанныеВидаЗадачи.СостояниеУчастниковНовая
			Или ДействиеУчастникаОбъект.СостояниеУчастникаЗадачи = ДанныеВидаЗадачи.СостояниеУчастниковНаПроверке Тогда
			Продолжить;
		КонецЕсли;
		
		ДействиеУчастникаОбъект.Дата = ТекущаяДатаСеанса();
		ДействиеУчастникаОбъект.УстановитьСостояние(
			ДанныеВидаЗадачи.СостояниеУчастниковНовая,
			Сотрудники.ОсновнойСотрудник(),
			Ложь);
		
		ДействиеУчастникаОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
	КонецЦикла;
	
КонецПроцедуры

// Отмечает что действие проверяющий вернул на доработку.
//
Процедура ОтметитьВозвращеноНаДоработку() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеВидаЗадачи = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(ВидЗадачи);
	Если Не ЗначениеЗаполнено(ДанныеВидаЗадачи.СостояниеУчастниковВозвращеноНаДоработку) Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Отметка возврату на доработку не поддерживается для вида задачи %1.'"),
			ВидЗадачи);
	КонецЕсли;
	
	Для Каждого СтрокаУчастника Из Участники Цикл
		
		Если Не РаботаСЗадачамиПовтИсп.ЭтоПроверяющий(СтрокаУчастника.ВидУчастника) Тогда
			Продолжить;
		КонецЕсли;
		
		ДействиеУчастникаОбъект = СтрокаУчастника.ДействиеУчастника.ПолучитьОбъект();
		Если ДействиеУчастникаОбъект.СостояниеУчастникаЗадачи = ДанныеВидаЗадачи.СостояниеУчастниковВозвращеноНаДоработку Тогда
			Продолжить;
		КонецЕсли;
		
		ДействиеУчастникаОбъект.Дата = ТекущаяДатаСеанса();
		ДействиеУчастникаОбъект.УстановитьСостояние(
			ДанныеВидаЗадачи.СостояниеУчастниковВозвращеноНаДоработку,
			Сотрудники.ОсновнойСотрудник(),
			Ложь);
		
		ДействиеУчастникаОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
	КонецЦикла;
	
КонецПроцедуры

// Отмечает действия задачи как "В работе".
//
Процедура ОтметитьВРаботе() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеВидаЗадачи = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(ВидЗадачи);
	
	Для Каждого СтрокаУчастника Из Участники Цикл
		
		Если Не РаботаСЗадачамиПовтИсп.ЭтоИсполнитель(СтрокаУчастника.ВидУчастника) Тогда
			Продолжить;
		КонецЕсли;
		
		ДействиеУчастникаОбъект = СтрокаУчастника.ДействиеУчастника.ПолучитьОбъект();
		Если ДействиеУчастникаОбъект.СостояниеУчастникаЗадачи = ДанныеВидаЗадачи.СостояниеУчастниковВРаботе Тогда
			Продолжить;
		КонецЕсли;
		
		ДействиеУчастникаОбъект.УстановитьСостояние(
			ДанныеВидаЗадачи.СостояниеУчастниковВРаботе,
			Сотрудники.ОсновнойСотрудник(),
			Ложь);
		
		ДействиеУчастникаОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
	КонецЦикла;
	
КонецПроцедуры

// Отмечает действия задачи как "Ожидает проверки".
//
Процедура ОтметитьОжидаетПроверки() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеВидаЗадачи = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(ВидЗадачи);
	Если Не ЗначениеЗаполнено(ДанныеВидаЗадачи.СостояниеУчастниковОжидаетПроверки) Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Отметка ожидания проверки не поддерживается для вида задачи %1.'"),
			ВидЗадачи);
	КонецЕсли;
	
	Для Каждого СтрокаУчастника Из Участники Цикл
		
		Если Не РаботаСЗадачамиПовтИсп.ЭтоИсполнитель(СтрокаУчастника.ВидУчастника) Тогда
			Продолжить;
		КонецЕсли;
		
		ДействиеУчастникаОбъект = СтрокаУчастника.ДействиеУчастника.ПолучитьОбъект();
		Если ДействиеУчастникаОбъект.СостояниеУчастникаЗадачи = ДанныеВидаЗадачи.СостояниеУчастниковОжидаетПроверки
			Или (ЗначениеЗаполнено(ДанныеВидаЗадачи.СостояниеУчастниковОжидаетПроверкиОтрицательно)
				И ДействиеУчастникаОбъект.СостояниеУчастникаЗадачи = ДанныеВидаЗадачи.СостояниеУчастниковОжидаетПроверкиОтрицательно)
			Или (ЗначениеЗаполнено(ДанныеВидаЗадачи.СостояниеУчастниковОжидаетПроверкиСЗамечаниями)
				И ДействиеУчастникаОбъект.СостояниеУчастникаЗадачи = ДанныеВидаЗадачи.СостояниеУчастниковОжидаетПроверкиСЗамечаниями) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДействиеУчастникаОбъект.РезультатДействия = ДанныеВидаЗадачи.РезультатИсполнителяВыполнена Тогда
			
			ДействиеУчастникаОбъект.УстановитьСостояние(
				ДанныеВидаЗадачи.СостояниеУчастниковОжидаетПроверки,
				Сотрудники.ОсновнойСотрудник(),
				Ложь);
			
		ИначеЕсли ЗначениеЗаполнено(ДанныеВидаЗадачи.РезультатИсполнителяВыполненаОтрицательно )
			И ДействиеУчастникаОбъект.РезультатДействия = ДанныеВидаЗадачи.РезультатИсполнителяВыполненаОтрицательно Тогда
			
			ДействиеУчастникаОбъект.УстановитьСостояние(
				ДанныеВидаЗадачи.СостояниеУчастниковОжидаетПроверкиОтрицательно,
				Сотрудники.ОсновнойСотрудник(),
				Ложь);
			
		ИначеЕсли ЗначениеЗаполнено(ДанныеВидаЗадачи.РезультатИсполнителяВыполненаСЗамечаниями)
			И ДействиеУчастникаОбъект.РезультатДействия = ДанныеВидаЗадачи.РезультатИсполнителяВыполненаСЗамечаниями Тогда
			
			ДействиеУчастникаОбъект.УстановитьСостояние(
				ДанныеВидаЗадачи.СостояниеУчастниковОжидаетПроверкиСЗамечаниями,
				Сотрудники.ОсновнойСотрудник(),
				Ложь);
			
		Иначе
			
			ДействиеУчастникаОбъект.УстановитьСостояние(
				ДанныеВидаЗадачи.СостояниеУчастниковОжидаетПроверки,
				Сотрудники.ОсновнойСотрудник(),
				Ложь);
			
		КонецЕсли;
		
		ДействиеУчастникаОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
	КонецЦикла;
	
КонецПроцедуры

// Отмечает выполненные действия задачи как "Ожидает проверки".
//
Процедура ОтметитьОжидаетПроверкиДляВыполненных() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеВидаЗадачи = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(ВидЗадачи);
	Если Не ЗначениеЗаполнено(ДанныеВидаЗадачи.СостояниеУчастниковОжидаетПроверки) Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Отметка ожидания проверки для выполненных не поддерживается для вида задачи %1.'"),
			ВидЗадачи);
	КонецЕсли;
	
	Для Каждого СтрокаУчастника Из Участники Цикл
		
		Если Не РаботаСЗадачамиПовтИсп.ЭтоИсполнитель(СтрокаУчастника.ВидУчастника) Тогда
			Продолжить;
		КонецЕсли;
		
		ДействиеУчастникаОбъект = СтрокаУчастника.ДействиеУчастника.ПолучитьОбъект();
		Если ДействиеУчастникаОбъект.СостояниеУчастникаЗадачи = ДанныеВидаЗадачи.СостояниеУчастниковВыполнена Тогда
			
			ДействиеУчастникаОбъект.УстановитьСостояние(
				ДанныеВидаЗадачи.СостояниеУчастниковОжидаетПроверки,
				Сотрудники.ОсновнойСотрудник(),
				Ложь);
			
			ДействиеУчастникаОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
		ИначеЕсли ЗначениеЗаполнено(ДанныеВидаЗадачи.СостояниеУчастниковВыполненаОтрицательно)
			И ДействиеУчастникаОбъект.СостояниеУчастникаЗадачи = ДанныеВидаЗадачи.СостояниеУчастниковВыполненаОтрицательно Тогда
			
			ДействиеУчастникаОбъект.УстановитьСостояние(
				ДанныеВидаЗадачи.СостояниеУчастниковОжидаетПроверкиОтрицательно,
				Сотрудники.ОсновнойСотрудник(),
				Ложь);
			
			ДействиеУчастникаОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
		ИначеЕсли ЗначениеЗаполнено(ДанныеВидаЗадачи.СостояниеУчастниковВыполненаСЗамечаниями)
			И ДействиеУчастникаОбъект.СостояниеУчастникаЗадачи = ДанныеВидаЗадачи.СостояниеУчастниковВыполненаСЗамечаниями Тогда
			
			ДействиеУчастникаОбъект.УстановитьСостояние(
				ДанныеВидаЗадачи.СостояниеУчастниковОжидаетПроверкиСЗамечаниями,
				Сотрудники.ОсновнойСотрудник(),
				Ложь);
			
			ДействиеУчастникаОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Отмечает ожидающие проверки действия задачи как "Выполнена".
//
Процедура ОтметитьВыполнена() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеВидаЗадачи = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(ВидЗадачи);
	
	Для Каждого СтрокаУчастника Из Участники Цикл
		
		Если Не РаботаСЗадачамиПовтИсп.ЭтоИсполнитель(СтрокаУчастника.ВидУчастника) Тогда
			Продолжить;
		КонецЕсли;
		
		ДействиеУчастникаОбъект = СтрокаУчастника.ДействиеУчастника.ПолучитьОбъект();
		
		Если ДействиеУчастникаОбъект.СостояниеУчастникаЗадачи = ДанныеВидаЗадачи.СостояниеУчастниковВыполнена
			Или (ЗначениеЗаполнено(ДанныеВидаЗадачи.СостояниеУчастниковВыполненаОтрицательно)
				И ДействиеУчастникаОбъект.СостояниеУчастникаЗадачи = ДанныеВидаЗадачи.СостояниеУчастниковВыполненаОтрицательно)
			Или (ЗначениеЗаполнено(ДанныеВидаЗадачи.СостояниеУчастниковВыполненаСЗамечаниями)
				И ДействиеУчастникаОбъект.СостояниеУчастникаЗадачи = ДанныеВидаЗадачи.СостояниеУчастниковВыполненаСЗамечаниями) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДополнительныеСвойства.Свойство("ЗакрытьЗадачу") Тогда
			ДействиеУчастникаОбъект.ДополнительныеСвойства.Вставить(
				"ЗакрытьЗадачу",
				ДополнительныеСвойства.ЗакрытьЗадачу);
		КонецЕсли;
		
		Если ДействиеУчастникаОбъект.РезультатДействия = ДанныеВидаЗадачи.РезультатИсполнителяВыполнена Тогда
			
			ДействиеУчастникаОбъект.УстановитьСостояние(
				ДанныеВидаЗадачи.СостояниеУчастниковВыполнена,
				Сотрудники.ОсновнойСотрудник(),
				Ложь);
			
		ИначеЕсли ЗначениеЗаполнено(ДанныеВидаЗадачи.РезультатИсполнителяВыполненаОтрицательно)
			И ДействиеУчастникаОбъект.РезультатДействия = ДанныеВидаЗадачи.РезультатИсполнителяВыполненаОтрицательно Тогда
			
			ДействиеУчастникаОбъект.УстановитьСостояние(
				ДанныеВидаЗадачи.СостояниеУчастниковВыполненаОтрицательно,
				Сотрудники.ОсновнойСотрудник(),
				Ложь);
			
		ИначеЕсли ЗначениеЗаполнено(ДанныеВидаЗадачи.РезультатИсполнителяВыполненаСЗамечаниями)
			И ДействиеУчастникаОбъект.РезультатДействия = ДанныеВидаЗадачи.РезультатИсполнителяВыполненаСЗамечаниями Тогда
			
			ДействиеУчастникаОбъект.УстановитьСостояние(
				ДанныеВидаЗадачи.СостояниеУчастниковВыполненаСЗамечаниями,
				Сотрудники.ОсновнойСотрудник(),
				Ложь);
			
		Иначе
			
			ДействиеУчастникаОбъект.УстановитьСостояние(
				ДанныеВидаЗадачи.СостояниеУчастниковВыполнена,
				Сотрудники.ОсновнойСотрудник(),
				Ложь);
			
		КонецЕсли;
		
		ДействиеУчастникаОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
	КонецЦикла;
	
КонецПроцедуры

// Отмечает  действия задачи как "Отменена".
//
Процедура ОтметитьОтменена() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеВидаЗадачи = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(ВидЗадачи);
	
	Для Каждого СтрокаУчастника Из Участники Цикл
		
		ДействиеУчастникаОбъект = СтрокаУчастника.ДействиеУчастника.ПолучитьОбъект();
		Если ДействиеУчастникаОбъект.СостояниеУчастникаЗадачи = ДанныеВидаЗадачи.СостояниеУчастниковОтменена Тогда
			Продолжить;
		КонецЕсли;
		
		ДействиеУчастникаОбъект.УстановитьСостояние(
			ДанныеВидаЗадачи.СостояниеУчастниковОтменена,
			Сотрудники.ОсновнойСотрудник(),
			Ложь);
		
		ДействиеУчастникаОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
	КонецЦикла;
	
КонецПроцедуры

// Отмечает  действия задачи как "Отложена".
//
Процедура ОтметитьОтложена() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеВидаЗадачи = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(ВидЗадачи);
	
	Для Каждого СтрокаУчастника Из Участники Цикл
		
		ДействиеУчастникаОбъект = СтрокаУчастника.ДействиеУчастника.ПолучитьОбъект();
		
		Если ДействиеУчастникаОбъект.СостояниеУчастникаЗадачи = Справочники.СостоянияУчастниковЗадач.Отложена
			Или ДействиеУчастникаОбъект.СостояниеУчастникаЗадачи = ДанныеВидаЗадачи.СостояниеУчастниковВыполнена
			Или (ЗначениеЗаполнено(ДанныеВидаЗадачи.СостояниеУчастниковВыполненаОтрицательно)
				И ДействиеУчастникаОбъект.СостояниеУчастникаЗадачи = ДанныеВидаЗадачи.СостояниеУчастниковВыполненаОтрицательно)
			Или (ЗначениеЗаполнено(ДанныеВидаЗадачи.СостояниеУчастниковВыполненаСЗамечаниями)
				И ДействиеУчастникаОбъект.СостояниеУчастникаЗадачи = ДанныеВидаЗадачи.СостояниеУчастниковВыполненаСЗамечаниями)
			Или (ЗначениеЗаполнено(ДанныеВидаЗадачи.СостояниеУчастниковОжидаетПроверки)
				И ДействиеУчастникаОбъект.СостояниеУчастникаЗадачи = ДанныеВидаЗадачи.СостояниеУчастниковОжидаетПроверки)
			Или (ЗначениеЗаполнено(ДанныеВидаЗадачи.СостояниеУчастниковОжидаетПроверкиОтрицательно)
				И ДействиеУчастникаОбъект.СостояниеУчастникаЗадачи = ДанныеВидаЗадачи.СостояниеУчастниковОжидаетПроверкиОтрицательно)
			Или (ЗначениеЗаполнено(ДанныеВидаЗадачи.СостояниеУчастниковОжидаетПроверкиСЗамечаниями)
				И ДействиеУчастникаОбъект.СостояниеУчастникаЗадачи = ДанныеВидаЗадачи.СостояниеУчастниковОжидаетПроверкиСЗамечаниями)
			Или Не ЗначениеЗаполнено(ДействиеУчастникаОбъект.СостояниеУчастникаЗадачи) Тогда
			Продолжить;
		КонецЕсли;
		
		ДействиеУчастникаОбъект.УстановитьСостояние(
			Справочники.СостоянияУчастниковЗадач.Отложена,
			Сотрудники.ОсновнойСотрудник(),
			Ложь);
		
		ДействиеУчастникаОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
	КонецЦикла;
	
КонецПроцедуры

// Отмечает  действия задачи как "Отложена".
//
Процедура ОтметитьСнятьОтложена() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеВидаЗадачи = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(ВидЗадачи);
	
	Для Каждого СтрокаУчастника Из Участники Цикл
		
		ДействиеУчастникаОбъект = СтрокаУчастника.ДействиеУчастника.ПолучитьОбъект();
		Если ДействиеУчастникаОбъект.СостояниеУчастникаЗадачи <> Справочники.СостоянияУчастниковЗадач.Отложена Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеВидаЗадачи.ВидУчастникаОтветственный = ДействиеУчастникаОбъект.ВидУчастника
			Или ДанныеВидаЗадачи.ВидУчастникаИсполнитель = ДействиеУчастникаОбъект.ВидУчастника Тогда
			
			НовоеСостояние = ДанныеВидаЗадачи.СостояниеУчастниковВРаботе;
			
		ИначеЕсли ДанныеВидаЗадачи.ВидУчастникаПроверяющий = ДействиеУчастникаОбъект.ВидУчастника Тогда
			
			НовоеСостояние = ДанныеВидаЗадачи.СостояниеУчастниковНаПроверке;
			
		Иначе
			
			ВызватьИсключение СтрШаблон(
				НСТР("ru = 'Неизвестный вид участника %1.'"),
				ДействиеУчастникаОбъект.ВидУчастника);
			
		КонецЕсли;
		
		ДействиеУчастникаОбъект.УстановитьСостояние(
			НовоеСостояние,
			Сотрудники.ОсновнойСотрудник(),
			Ложь);
		
		ДействиеУчастникаОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
	КонецЦикла;
	
КонецПроцедуры

// Отмечает действия задачи как "Выполнена".
//
Процедура ОтметитьВыполненаДляОжидающихПроверки() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеВидаЗадачи = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(ВидЗадачи);
	Если Не ЗначениеЗаполнено(ДанныеВидаЗадачи.СостояниеУчастниковОжидаетПроверки) Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Отметка выполнения для ожидающих проверки не поддерживается для вида задачи %1.'"),
			ВидЗадачи);
	КонецЕсли;
	
	Для Каждого СтрокаУчастника Из Участники Цикл
		
		Если Не РаботаСЗадачамиПовтИсп.ЭтоИсполнитель(СтрокаУчастника.ВидУчастника) Тогда
			Продолжить;
		КонецЕсли;
		
		ДействиеУчастникаОбъект = СтрокаУчастника.ДействиеУчастника.ПолучитьОбъект();
		
		ДействиеОжидаетПроверки =
			(ЗначениеЗаполнено(ДанныеВидаЗадачи.СостояниеУчастниковОжидаетПроверки)
				И ДействиеУчастникаОбъект.СостояниеУчастникаЗадачи = ДанныеВидаЗадачи.СостояниеУчастниковОжидаетПроверки)
			Или (ЗначениеЗаполнено(ДанныеВидаЗадачи.СостояниеУчастниковОжидаетПроверкиОтрицательно)
				И ДействиеУчастникаОбъект.СостояниеУчастникаЗадачи = ДанныеВидаЗадачи.СостояниеУчастниковОжидаетПроверкиОтрицательно)
			Или (ЗначениеЗаполнено(ДанныеВидаЗадачи.СостояниеУчастниковОжидаетПроверкиСЗамечаниями)
				И ДействиеУчастникаОбъект.СостояниеУчастникаЗадачи = ДанныеВидаЗадачи.СостояниеУчастниковОжидаетПроверкиСЗамечаниями);
		
		Если Не ДействиеОжидаетПроверки Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеВидаЗадачи.СостояниеУчастниковОжидаетПроверки)
			И ДействиеУчастникаОбъект.СостояниеУчастникаЗадачи = ДанныеВидаЗадачи.СостояниеУчастниковОжидаетПроверки Тогда
			
			ДействиеУчастникаОбъект.УстановитьСостояние(
				ДанныеВидаЗадачи.РезультатИсполнителяВыполнена,
				Сотрудники.ОсновнойСотрудник(),
				Ложь);
				
		ИначеЕсли ЗначениеЗаполнено(ДанныеВидаЗадачи.СостояниеУчастниковОжидаетПроверкиОтрицательно)
			И ДействиеУчастникаОбъект.СостояниеУчастникаЗадачи = ДанныеВидаЗадачи.СостояниеУчастниковОжидаетПроверкиОтрицательно Тогда
			
			ДействиеУчастникаОбъект.УстановитьСостояние(
				ДанныеВидаЗадачи.РезультатИсполнителяВыполненаОтрицательно,
				Сотрудники.ОсновнойСотрудник(),
				Ложь);
			
		ИначеЕсли ЗначениеЗаполнено(ДанныеВидаЗадачи.СостояниеУчастниковОжидаетПроверкиСЗамечаниями)
			И ДействиеУчастникаОбъект.СостояниеУчастникаЗадачи = ДанныеВидаЗадачи.СостояниеУчастниковОжидаетПроверкиСЗамечаниями Тогда
			
			ДействиеУчастникаОбъект.УстановитьСостояние(
				ДанныеВидаЗадачи.РезультатИсполнителяВыполненаСЗамечаниями,
				Сотрудники.ОсновнойСотрудник(),
				Ложь);
			
		Иначе
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Неизвестное состояние участника для отметки выполнения %1 вида задачи %2.'"),
				ДействиеУчастникаОбъект.СостояниеУчастникаЗадачи,
				ВидЗадачи);
		КонецЕсли;
		
		ДействиеУчастникаОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
	КонецЦикла;
	
КонецПроцедуры

// Отмечает действия задачи "Проверено".
//
Процедура ОтметитьПроверено() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеВидаЗадачи = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(ВидЗадачи);
	Если Не ЗначениеЗаполнено(ДанныеВидаЗадачи.СостояниеУчастниковПроверено) Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Отметка проверено не поддерживается для вида задачи %1.'"),
			ВидЗадачи);
	КонецЕсли;
	
	Для Каждого СтрокаУчастника Из Участники Цикл
		
		Если Не РаботаСЗадачамиПовтИсп.ЭтоПроверяющий(СтрокаУчастника.ВидУчастника) Тогда
			Продолжить;
		КонецЕсли;
		
		ДействиеУчастникаОбъект = СтрокаУчастника.ДействиеУчастника.ПолучитьОбъект();
		Если ДействиеУчастникаОбъект.СостояниеУчастникаЗадачи = ДанныеВидаЗадачи.СостояниеУчастниковПроверено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДополнительныеСвойства.Свойство("ЗакрытьЗадачу") Тогда
			ДействиеУчастникаОбъект.ДополнительныеСвойства.Вставить(
				"ЗакрытьЗадачу",
				ДополнительныеСвойства.ЗакрытьЗадачу);
		КонецЕсли;
		
		ДействиеУчастникаОбъект.УстановитьСостояние(
			ДанныеВидаЗадачи.СостояниеУчастниковПроверено,
			Сотрудники.ОсновнойСотрудник(),
			Ложь);
		
		ДействиеУчастникаОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
	КонецЦикла;
	
КонецПроцедуры

// Отмечает действия задачи как проверенные.
//
Процедура Проверить() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеВидаЗадачи = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(ВидЗадачи);
	
	Для Каждого СтрокаУчастника Из Участники Цикл
		
		Если Не РаботаСЗадачамиПовтИсп.ЭтоИсполнитель(СтрокаУчастника.ВидУчастника) Тогда
			Продолжить;
		КонецЕсли;
		
		ДействиеУчастникаОбъект = СтрокаУчастника.ДействиеУчастника.ПолучитьОбъект();
		
		Если ДействиеУчастникаОбъект.РезультатДействия = ДанныеВидаЗадачи.РезультатИсполнителяВыполнена Тогда
			
			ДействиеУчастникаОбъект.УстановитьСостояние(
				ДанныеВидаЗадачи.СостояниеУчастниковВыполнена,
				Сотрудники.ОсновнойСотрудник(),
				Ложь);
			
		ИначеЕсли ЗначениеЗаполнено(ДанныеВидаЗадачи.РезультатИсполнителяВыполненаОтрицательно)
			И ДействиеУчастникаОбъект.РезультатДействия = ДанныеВидаЗадачи.РезультатИсполнителяВыполненаОтрицательно Тогда
			
			ДействиеУчастникаОбъект.УстановитьСостояние(
				ДанныеВидаЗадачи.СостояниеУчастниковВыполненаОтрицательно,
				Сотрудники.ОсновнойСотрудник(),
				Ложь);
			
		ИначеЕсли ЗначениеЗаполнено(ДанныеВидаЗадачи.РезультатИсполнителяВыполненаСЗамечаниями)
			И ДействиеУчастникаОбъект.РезультатДействия = ДанныеВидаЗадачи.РезультатИсполнителяВыполненаСЗамечаниями Тогда
			
			ДействиеУчастникаОбъект.УстановитьСостояние(
				ДанныеВидаЗадачи.СостояниеУчастниковВыполненаСЗамечаниями,
				Сотрудники.ОсновнойСотрудник(),
				Ложь);
			
		Иначе
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Неизвестный результат действия для проверки %1 вида задачи %2.'"),
				ДействиеУчастникаОбъект.РезультатДействия,
				ВидЗадачи);
		КонецЕсли;
		
		ДействиеУчастникаОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
	КонецЦикла;
	
КонецПроцедуры

// Находит участника указанного вида.
//
// Параметры:
//  ВидУчастника - СправочникСсылка.ВидыУчастниковЗадач - Вид участника.
// 
// Возвращаемое значение:
//  ОпределяемыйТип.УчастникЗадач - Участник указанного вида.
//
Функция НайтиУчастника(ВидУчастника) Экспорт
	
	СтрокаУчастника = НайтиСтрокуУчастника(ВидУчастника);
	
	Возврат ?(СтрокаУчастника <> Неопределено, СтрокаУчастника.Участник, Неопределено)
	
КонецФункции

// Находит участников указанного вида.
//
// Параметры:
//  ВидУчастников - СправочникСсылка.ВидыУчастниковЗадач - Вид участников.
// 
// Возвращаемое значение:
//  Массив из ОпределяемыйТип.УчастникЗадач - Участник указанного вида.
//
Функция НайтиУчастников(ВидУчастников) Экспорт
	
	НайденныеУчастники = Новый Массив;
	
	ПараметрыОтбора = Новый Структура("ВидУчастника", ВидУчастников);
	НайденныеСтрокиУчастников = Участники.НайтиСтроки(ПараметрыОтбора);
	Для Каждого НайденнаяСтрокаУчастника Из НайденныеСтрокиУчастников Цикл
		НайденныеУчастники.Добавить(НайденнаяСтрокаУчастника.Участник);
	КонецЦикла;
	
	Возврат НайденныеУчастники;
	
КонецФункции

// Сортирует участников задачи.
//
Процедура СортироватьУчастников() Экспорт
	
	ДанныеВидаЗадачи = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(ВидЗадачи);
	
	УчастникиДляСортировки = Участники.Выгрузить();
	УчастникиДляСортировки.Колонки.Добавить("ПорядокДляСортировки");
	
	Для Каждого СтрокаУчастника Из УчастникиДляСортировки Цикл
		
		СтрокаВида = "1";
		
		Если СтрокаУчастника.ВидУчастника = ДанныеВидаЗадачи.ВидУчастникаОтветственный Тогда
			СтрокаВида = "1";
		ИначеЕсли СтрокаУчастника.ВидУчастника = ДанныеВидаЗадачи.ВидУчастникаИсполнитель Тогда
			СтрокаВида = "2";
		ИначеЕсли СтрокаУчастника.ВидУчастника = ДанныеВидаЗадачи.ВидУчастникаПроверяющий Тогда
			СтрокаВида = "4";
		Иначе
			СтрокаВида = "3";
		КонецЕсли;
		
		УчастникПредставление = Строка(СтрокаУчастника.Участник);
		Если Не ЗначениеЗаполнено(УчастникПредставление) Тогда
			УчастникПредставление = "яя"; // для сортировки  -чтобы был в конце
		КонецЕсли;
		
		СтрокаУчастника.ПорядокДляСортировки = СтрокаВида + "-" + УчастникПредставление;
		
	КонецЦикла;	
	
	УчастникиДляСортировки.Сортировать("ПорядокДляСортировки");
	УчастникиДляСортировки.Колонки.Удалить("ПорядокДляСортировки");
	
	Участники.Загрузить(УчастникиДляСортировки);
	
КонецПроцедуры

// Определяет состояние задачи по данным действий.
//
// Параметры:
//  ВидИзмененногоДействия - СправочникСсылка.ВидыДействийЗадач - Вид измененного действия.
// 
// Возвращаемое значение:
//  СправочникСсылка.СостоянияЗадач - Состояние задачи по данным действий.
//
Функция СостояниеПоДаннымДействий(ВидИзмененногоДействия) Экспорт
	
	ДействияУчастников = Новый Массив;
	Для Каждого СтрокаУчастника Из Участники Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаУчастника.ДействиеУчастника) Тогда
			Продолжить;
		КонецЕсли;
		
		ДействияУчастников.Добавить(СтрокаУчастника.ДействиеУчастника);
		
	КонецЦикла;
	
	РеквизитыДействий = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		ДействияУчастников,
		"СостояниеУчастникаЗадачи, РезультатДействия");
	
	ПорядокСостоянийУчастников = РаботаСЗадачами.ПорядокСостоянийУчастников(ВидЗадачи);
	
	ВидыИсполнителей = Новый Массив;
	ВидыПроверяющих = Новый Массив;
	
	СуществующиеСостояния = Новый Соответствие;
	МаксимальныеПорядкиСостояний = Новый Соответствие;
	ОбщийХарактерРезультата = Перечисления.ХарактерыРезультатов.ПустаяСсылка();
	Для Каждого СтрокаУчастника Из Участники Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаУчастника.ДействиеУчастника) Тогда
			Продолжить;
		КонецЕсли;
		
		ПорядокСостоянийВидаУчастников = ПорядокСостоянийУчастников[СтрокаУчастника.ВидУчастника];
		Если ПорядокСостоянийВидаУчастников = Неопределено Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Неизвестный вид участника ""%1"" задачи вида ""%2"".'"),
				СтрокаУчастника.ВидУчастника,
				ВидЗадачи);
		КонецЕсли;
		
		РеквизитыДействия = РеквизитыДействий[СтрокаУчастника.ДействиеУчастника];
		СостояниеУчастника = РеквизитыДействия.СостояниеУчастникаЗадачи;
		ПорядокСостояния = ПорядокСостоянийВидаУчастников.Найти(СостояниеУчастника);
		Если ПорядокСостояния = Неопределено Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Неизвестный порядок состояния ""%1"" участника вида ""%2"" задачи вида ""%3"".'"),
				СостояниеУчастника,
				СтрокаУчастника.ВидУчастника,
				ВидЗадачи);
		КонецЕсли;
		
		Если МаксимальныеПорядкиСостояний[СтрокаУчастника.ВидУчастника] = Неопределено Тогда
			МаксимальныеПорядкиСостояний[СтрокаУчастника.ВидУчастника] = ПорядокСостояния;
		КонецЕсли;
		МаксимальныеПорядкиСостояний[СтрокаУчастника.ВидУчастника] = Макс(
			МаксимальныеПорядкиСостояний[СтрокаУчастника.ВидУчастника],
			ПорядокСостояния);
		
		СуществующиеСостояния.Вставить(СостояниеУчастника, Истина);
		
		Если РаботаСЗадачамиПовтИсп.ЭтоИсполнитель(СтрокаУчастника.ВидУчастника) Тогда
			ВидыИсполнителей.Добавить(СтрокаУчастника.ВидУчастника);
		КонецЕсли;
		Если РаботаСЗадачамиПовтИсп.ЭтоПроверяющий(СтрокаУчастника.ВидУчастника) Тогда
			ВидыПроверяющих.Добавить(СтрокаУчастника.ВидУчастника);
		КонецЕсли;
		
		Если РаботаСЗадачамиПовтИсп.ЭтоИсполнитель(СтрокаУчастника.ВидУчастника)
			И ЗначениеЗаполнено(РеквизитыДействия.РезультатДействия) Тогда
			
			ХарактерРезультата = РаботаСЗадачамиПовтИсп.ХарактерРезультата(РеквизитыДействия.РезультатДействия);
			Если ХарактерРезультата = Перечисления.ХарактерыРезультатов.Нейтральный
				И Не ЗначениеЗаполнено(ОбщийХарактерРезультата) Тогда
				
				ОбщийХарактерРезультата = ХарактерРезультата;
				
			ИначеЕсли ХарактерРезультата = Перечисления.ХарактерыРезультатов.Положительный
				И (Не ЗначениеЗаполнено(ОбщийХарактерРезультата)
					Или ОбщийХарактерРезультата = Перечисления.ХарактерыРезультатов.Нейтральный) Тогда
				
				ОбщийХарактерРезультата = ХарактерРезультата;
				
			ИначеЕсли ХарактерРезультата = Перечисления.ХарактерыРезультатов.ПоложительныйСЗамечаниями
				И (Не ЗначениеЗаполнено(ОбщийХарактерРезультата)
					Или ОбщийХарактерРезультата = Перечисления.ХарактерыРезультатов.Положительный) Тогда
				
				ОбщийХарактерРезультата = ХарактерРезультата;
				
			ИначеЕсли ХарактерРезультата = Перечисления.ХарактерыРезультатов.Отрицательный
				И (Не ЗначениеЗаполнено(ОбщийХарактерРезультата)
					Или ОбщийХарактерРезультата = Перечисления.ХарактерыРезультатов.Положительный
					Или ОбщийХарактерРезультата = Перечисления.ХарактерыРезультатов.ПоложительныйСЗамечаниями) Тогда
				
				ОбщийХарактерРезультата = ХарактерРезультата;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ВидыИсполнителей = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВидыИсполнителей);
	ВидыПроверяющих = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВидыПроверяющих);
	
	МаксимальныйПорядокИсполнителя = -1;
	ПорядокСостоянийИсполнителей = Неопределено;
	Для Каждого ВидИсполнителя Из ВидыИсполнителей Цикл
		
		ПорядокВидаИсполнителя = МаксимальныеПорядкиСостояний[ВидИсполнителя];
		Если ПорядокВидаИсполнителя < МаксимальныйПорядокИсполнителя Тогда
			Продолжить;
		КонецЕсли;
		
		МаксимальныйПорядокИсполнителя = ПорядокВидаИсполнителя;
		ПорядокСостоянийИсполнителей = ПорядокСостоянийУчастников[ВидИсполнителя];
		
	КонецЦикла;
	СостояниеИсполнителей = ?(МаксимальныйПорядокИсполнителя <> - 1,
		ПорядокСостоянийИсполнителей[МаксимальныйПорядокИсполнителя],
		Неопределено);
	
	МаксимальныйПорядокПроверяющего = -1;
	ПорядокСостоянийПроверяющих = Неопределено;
	Для Каждого ВидПроверяющего Из ВидыПроверяющих Цикл
		
		ПорядокСостоянийПроверяющих = МаксимальныеПорядкиСостояний[ВидПроверяющего];
		Если ПорядокСостоянийПроверяющих < МаксимальныйПорядокПроверяющего Тогда
			Продолжить;
		КонецЕсли;
		
		МаксимальныйПорядокПроверяющего = ПорядокСостоянийПроверяющих;
		ПорядокСостоянийПроверяющих = ПорядокСостоянийУчастников[ВидПроверяющего];
		
	КонецЦикла;
	СостояниеПроверяющего = ?(МаксимальныйПорядокПроверяющего <> - 1,
		ПорядокСостоянийПроверяющих[МаксимальныйПорядокПроверяющего],
		Неопределено);
	
	ДанныеВидаЗадачи = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(ВидЗадачи);
	
	ЕстьПроверяющий = ВидыПроверяющих.Количество() > 0;
	ПроверкаОжидается = ЕстьПроверяющий И СостояниеПроверяющего <> ДанныеВидаЗадачи.СостояниеУчастниковПроверено;
	
	СостояниеИсполнителейВыполнена =
		СостояниеИсполнителей = ДанныеВидаЗадачи.СостояниеУчастниковВыполнена
		Или (ЗначениеЗаполнено(ДанныеВидаЗадачи.СостояниеУчастниковВыполненаОтрицательно)
			И СостояниеИсполнителей = ДанныеВидаЗадачи.СостояниеУчастниковВыполненаОтрицательно)
		Или (ЗначениеЗаполнено(ДанныеВидаЗадачи.СостояниеУчастниковВыполненаСЗамечаниями)
			И СостояниеИсполнителей = ДанныеВидаЗадачи.СостояниеУчастниковВыполненаСЗамечаниями);
	
	СостояниеИсполнителейОжидаетПроверки =
		(СостояниеИсполнителейВыполнена И ПроверкаОжидается)
		Или (ЗначениеЗаполнено(ДанныеВидаЗадачи.СостояниеУчастниковОжидаетПроверки)
			И СостояниеИсполнителей = ДанныеВидаЗадачи.СостояниеУчастниковОжидаетПроверки)
		Или (ЗначениеЗаполнено(ДанныеВидаЗадачи.СостояниеУчастниковОжидаетПроверкиОтрицательно)
			И СостояниеИсполнителей = ДанныеВидаЗадачи.СостояниеУчастниковОжидаетПроверкиОтрицательно)
		Или (ЗначениеЗаполнено(ДанныеВидаЗадачи.СостояниеУчастниковОжидаетПроверкиСЗамечаниями)
			И СостояниеИсполнителей = ДанныеВидаЗадачи.СостояниеУчастниковОжидаетПроверкиСЗамечаниями);
	
	Если Не ЗначениеЗаполнено(СостояниеИсполнителей) Тогда
		
		СостояниеЗадачиПоДаннымДействий = ДанныеВидаЗадачи.СостояниеЗадачиЧерновик;
		
	ИначеЕсли СостояниеИсполнителей = ДанныеВидаЗадачи.СостояниеУчастниковОтменена
		Или СостояниеПроверяющего = ДанныеВидаЗадачи.СостояниеУчастниковОтменена Тогда
		
		СостояниеЗадачиПоДаннымДействий = ДанныеВидаЗадачи.СостояниеЗадачиОтменена;
		
	ИначеЕсли СостояниеИсполнителей = ДанныеВидаЗадачи.СостояниеУчастниковНовая
		И (СуществующиеСостояния.Получить(ДанныеВидаЗадачи.СостояниеУчастниковВыполнена) = Истина
			Или (ЗначениеЗаполнено(ДанныеВидаЗадачи.СостояниеУчастниковОжидаетПроверки)
				И СуществующиеСостояния.Получить(ДанныеВидаЗадачи.СостояниеУчастниковОжидаетПроверки) = Истина)
			Или (ЗначениеЗаполнено(ДанныеВидаЗадачи.СостояниеУчастниковОжидаетПроверкиОтрицательно)
				И СуществующиеСостояния.Получить(ДанныеВидаЗадачи.СостояниеУчастниковОжидаетПроверкиОтрицательно) = Истина)
			Или (ЗначениеЗаполнено(ДанныеВидаЗадачи.СостояниеУчастниковОжидаетПроверкиСЗамечаниями)
				И СуществующиеСостояния.Получить(ДанныеВидаЗадачи.СостояниеУчастниковОжидаетПроверкиСЗамечаниями) = Истина)
			Или СуществующиеСостояния.Получить(ДанныеВидаЗадачи.СостояниеУчастниковВРаботе) = Истина) Тогда
		
		СостояниеЗадачиПоДаннымДействий = ДанныеВидаЗадачи.СостояниеЗадачиВРаботе;
		
	ИначеЕсли СостояниеИсполнителей = ДанныеВидаЗадачи.СостояниеУчастниковНовая Тогда
		
		СостояниеЗадачиПоДаннымДействий = ДанныеВидаЗадачи.СостояниеЗадачиНовая;
		
	ИначеЕсли СостояниеИсполнителей = ДанныеВидаЗадачи.СостояниеУчастниковВРаботе Тогда
		
		СостояниеЗадачиПоДаннымДействий = ДанныеВидаЗадачи.СостояниеЗадачиВРаботе;
		
	ИначеЕсли СостояниеИсполнителейВыполнена
		И СостояниеПроверяющего = ДанныеВидаЗадачи.СостояниеУчастниковНаПроверке Тогда
		
		// Сценарий отмены результатов проверки.
		СостояниеЗадачиПоДаннымДействий = ДанныеВидаЗадачи.СостояниеЗадачиНаПроверке;
		
	ИначеЕсли СостояниеИсполнителейВыполнена И Не ПроверкаОжидается Тогда
		
		Если СостояниеИсполнителей = ДанныеВидаЗадачи.СостояниеУчастниковВыполнена Тогда
			
			СостояниеЗадачиПоДаннымДействий = ДанныеВидаЗадачи.СостояниеЗадачиЗакрыта;
			
		ИначеЕсли ЗначениеЗаполнено(ДанныеВидаЗадачи.СостояниеУчастниковВыполненаОтрицательно)
			И СостояниеИсполнителей = ДанныеВидаЗадачи.СостояниеУчастниковВыполненаОтрицательно Тогда
			
			СостояниеЗадачиПоДаннымДействий = ДанныеВидаЗадачи.СостояниеЗадачиЗакрытаОтрицательно;
			
		ИначеЕсли ЗначениеЗаполнено(ДанныеВидаЗадачи.СостояниеУчастниковВыполненаСЗамечаниями)
			И СостояниеИсполнителей = ДанныеВидаЗадачи.СостояниеУчастниковВыполненаСЗамечаниями Тогда
			
			СостояниеЗадачиПоДаннымДействий = ДанныеВидаЗадачи.СостояниеЗадачиЗакрытаСЗамечаниями;
			
		Иначе
			
			СостояниеЗадачиПоДаннымДействий = ДанныеВидаЗадачи.СостояниеЗадачиЗакрыта;
			
		КонецЕсли;
		
	ИначеЕсли СостояниеИсполнителейОжидаетПроверки
		И Не ЗначениеЗаполнено(СостояниеПроверяющего) Тогда
		
		СостояниеЗадачиПоДаннымДействий = ДанныеВидаЗадачи.СостояниеЗадачиНаПроверке;
		
	ИначеЕсли СостояниеИсполнителейОжидаетПроверки
		И СостояниеПроверяющего = ДанныеВидаЗадачи.СостояниеУчастниковНовая Тогда
		
		СостояниеЗадачиПоДаннымДействий = ДанныеВидаЗадачи.СостояниеЗадачиНаПроверке;
		
	ИначеЕсли СостояниеИсполнителейОжидаетПроверки
		И СостояниеПроверяющего = ДанныеВидаЗадачи.СостояниеУчастниковВозвращеноНаДоработку Тогда
		
		СостояниеЗадачиПоДаннымДействий = ДанныеВидаЗадачи.СостояниеЗадачиНаПроверке;
		
	ИначеЕсли СостояниеИсполнителейОжидаетПроверки
		И СостояниеПроверяющего = ДанныеВидаЗадачи.СостояниеУчастниковНаПроверке Тогда
		
		СостояниеЗадачиПоДаннымДействий = ДанныеВидаЗадачи.СостояниеЗадачиНаПроверке;
		
	ИначеЕсли ВидИзмененногоДействия = ДанныеВидаЗадачи.ВидДействияИсполнителя
		И СостояниеИсполнителейОжидаетПроверки
		И СостояниеПроверяющего = ДанныеВидаЗадачи.СостояниеУчастниковПроверено Тогда
		
		// Сценарий, когда в уже проверенную задачу добавили исполнителя, и он её выполнил.
		СостояниеЗадачиПоДаннымДействий = ДанныеВидаЗадачи.СостояниеЗадачиНаПроверке;
		
	ИначеЕсли ВидИзмененногоДействия = ДанныеВидаЗадачи.ВидДействияПроверяющего
		И СостояниеИсполнителейОжидаетПроверки
		И СостояниеПроверяющего = ДанныеВидаЗадачи.СостояниеУчастниковПроверено Тогда
		
		// Сценарий, когда проверяющий проверил.
		Если ОбщийХарактерРезультата = Перечисления.ХарактерыРезультатов.Положительный Тогда
			
			СостояниеЗадачиПоДаннымДействий = ДанныеВидаЗадачи.СостояниеЗадачиЗакрыта;
			
		ИначеЕсли ОбщийХарактерРезультата = Перечисления.ХарактерыРезультатов.ПоложительныйСЗамечаниями Тогда
			
			СостояниеЗадачиПоДаннымДействий = ДанныеВидаЗадачи.СостояниеЗадачиЗакрытаСЗамечаниями;
			
		ИначеЕсли ОбщийХарактерРезультата = Перечисления.ХарактерыРезультатов.Отрицательный Тогда
			
			СостояниеЗадачиПоДаннымДействий = ДанныеВидаЗадачи.СостояниеЗадачиЗакрытаОтрицательно;
			
		Иначе
			
			СостояниеЗадачиПоДаннымДействий = ДанныеВидаЗадачи.СостояниеЗадачиЗакрыта;
			
		КонецЕсли;
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестное состояние задачи по данным действия для %1 и %2.'"),
			СостояниеИсполнителей,
			СостояниеПроверяющего);
		
	КонецЕсли;
	
	Возврат СостояниеЗадачиПоДаннымДействий;
	
КонецФункции

// Делает действия "Проверить" неактивными.
//
Процедура СнятьСПроверки() Экспорт
	
	ДанныеВидаЗадачи = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(ВидЗадачи);
	
	// Делаем действия "Проверить" неактивными.
	Для Каждого ДанныеДействия Из Документы.ДействиеЗадачи.АктивныеДействияПоЗадаче(Ссылка) Цикл
		
		Если ДанныеДействия.ВидДействия <> ДанныеВидаЗадачи.ВидДействияПроверяющего Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеДействия.СостояниеУчастникаЗадачи <> ДанныеВидаЗадачи.СостояниеУчастниковНовая
			И ДанныеДействия.СостояниеУчастникаЗадачи <> ДанныеВидаЗадачи.СостояниеУчастниковНаПроверке
			И ДанныеДействия.СостояниеУчастникаЗадачи <> ДанныеВидаЗадачи.СостояниеУчастниковОтменена Тогда
			Продолжить;
		КонецЕсли;
		
		Документы.ДействиеЗадачи.СделатьНеактивным(ДанныеДействия.ДействиеЗадачи);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает трудозатраты по задаче в часах.
// 
// Возвращаемое значение:
//  Число - Трудозатраты в часах.
//
Функция Трудозатраты() Экспорт
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат 0;
	КонецЕсли;
	
	ИсточникиТрудозатрат = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ссылка);
	Для Каждого СтрокаУчастника Из Участники Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаУчастника.ДействиеУчастника) Тогда
			Продолжить;
		КонецЕсли;
		
		ИсточникиТрудозатрат.Добавить(СтрокаУчастника.ДействиеУчастника);
		
	КонецЦикла;
	
	ТрудозатратыСекунд = УчетВремени.ФактическиеТрудозатратыПоИсточникам(ИсточникиТрудозатрат);
	ТрудозатратыЧасов = ТрудозатратыСекунд / 3600;
	
	Возврат ТрудозатратыЧасов;
	
КонецФункции

// Устанавливает состояние задачи и отмечает необходимость обновить действия по новому состоянию.
// 
// Параметры:
//  НовоеСостояниеЗадачи - СправочникСсылка.СостоянияЗадач - Новое состояние.
//  ОбновитьДействияПоСостоянию - Булево - Необходимо обновить действия по состоянию.
//
Процедура УстановитьСостояние(НовоеСостояниеЗадачи, ОбновитьДействияПоСостоянию) Экспорт
	
	ДанныеВидаЗадачи = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(ВидЗадачи);
	
	СостояниеЗадачи = НовоеСостояниеЗадачи;
	
	ВидСостоянияЗадачи = РаботаСЗадачамиПовтИсп.ВидСостоянияЗадач(СостояниеЗадачи);
	ЭтоЧерновик = Перечисления.ВидыСостоянийЗадач.ЭтоЧерновик(ВидСостоянияЗадачи);
	ЭтоВыполненнаяЗадача = Перечисления.ВидыСостоянийЗадач.ЭтоВыполненнаяЗадача(ВидСостоянияЗадачи);
	ЭтоОтмененнаяЗадача = Перечисления.ВидыСостоянийЗадач.ЭтоОтмененнаяЗадача(ВидСостоянияЗадачи);
	
	Если Не ЭтоЧерновик И Не ЗначениеЗаполнено(ДатаСоздания) Тогда
		ДатаСоздания = ТекущаяДатаСеанса();
	ИначеЕсли ЭтоЧерновик И ЗначениеЗаполнено(ДатаСоздания) Тогда
		ДатаСоздания = Дата(1, 1, 1);
	КонецЕсли;
	
	Если ЭтоОтмененнаяЗадача И Не ЗначениеЗаполнено(ДатаОтмены) Тогда
		ДатаОтмены = ТекущаяДатаСеанса();
	ИначеЕсли Не ЭтоОтмененнаяЗадача И ЗначениеЗаполнено(ДатаОтмены) Тогда
		ДатаОтмены = Дата(1, 1, 1);
	КонецЕсли;
	
	Если ЭтоОтмененнаяЗадача И Не ЗначениеЗаполнено(КтоОтменил) Тогда
		КтоОтменил = Сотрудники.ОсновнойСотрудник();
	ИначеЕсли Не ЭтоОтмененнаяЗадача И ЗначениеЗаполнено(КтоОтменил) Тогда
		КтоОтменил = Неопределено;
	КонецЕсли;
	
	Если ЭтоВыполненнаяЗадача И Не ЗначениеЗаполнено(ДатаВыполнения) Тогда
		
		ДатаВыполнения = ТекущаяДатаСеанса();
		
		Если СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиЗакрыта Тогда
			РезультатЗадачи = ДанныеВидаЗадачи.РезультатЗадачиИсполнено;
		ИначеЕсли ЗначениеЗаполнено(ДанныеВидаЗадачи.СостояниеЗадачиЗакрытаОтрицательно)
			И СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиЗакрытаОтрицательно Тогда
			РезультатЗадачи = ДанныеВидаЗадачи.РезультатЗадачиИсполненоОтрицательно;
		ИначеЕсли ЗначениеЗаполнено(ДанныеВидаЗадачи.СостояниеЗадачиЗакрытаСЗамечаниями)
			И СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиЗакрытаСЗамечаниями Тогда
			РезультатЗадачи = ДанныеВидаЗадачи.РезультатЗадачиИсполненоСЗамечаниями;
		Иначе
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Неизвестное состояние выполненной задачи %1 вида %2.'"),
				СостояниеЗадачи,
				ВидЗадачи);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Источник) Тогда

			РегистрыСведений.ИсторияЗадач.Добавить(
				Ссылка,
				Документы.ДействиеЗадачи.ПустаяСсылка(),
				ДатаВыполнения,
				Справочники.СобытияЗадач.Закрыта,
				Неопределено,
				Неопределено);
			
			Если ЗначениеЗаполнено(ВышестоящаяЗадача) Тогда
				
				КонтекстПодзадачи = РегистрыСведений.ИсторияЗадач.КонтекстПодзадачи();
				КонтекстПодзадачи.АвторПодзадачи = Автор;
				КонтекстПодзадачи.Подзадача = Ссылка;
				КонтекстПодзадачи.ПредставлениеИсполнителей = РаботаСЗадачами.ПредставлениеИсполнителейЗадачи(Ссылка);
				
				РегистрыСведений.ИсторияЗадач.Добавить(
					ВышестоящаяЗадача,
					ВышестоящееДействие,
					ТекущаяДатаСеанса(),
					Справочники.СобытияЗадач.ЗакрытаПодзадача,
					КонтекстПодзадачи,
					Неопределено);
				
			КонецЕсли;

		КонецЕсли;	
		
	ИначеЕсли Не ЭтоВыполненнаяЗадача И ЗначениеЗаполнено(ДатаВыполнения) Тогда
		
		ДатаВыполнения = Дата(1, 1, 1);
		РезультатЗадачи = Справочники.РезультатыЗадач.ПустаяСсылка();
		
	КонецЕсли;
	
	Если ОбновитьДействияПоСостоянию Тогда
		ДополнительныеСвойства.Вставить("ОбновитьДействияПоСостоянию");
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает единственного участника определенного вида.
//
// Параметры:
//  Участник - ОпределяемыйТип.УчастникЗадач - Участник.
//  ВидУчастника - СправочникСсылка.ВидыУчастниковЗадач - Вид участника.
//
Процедура УстановитьУчастника(Участник, ВидУчастника) Экспорт
	
	СтрокаУчастника = НайтиСтрокуУчастника(ВидУчастника);
	Если ЗначениеЗаполнено(Участник) И СтрокаУчастника = Неопределено Тогда
		
		// Новый участник.
		СтрокаУчастника = Участники.Добавить();
		СтрокаУчастника.ВидУчастника = ВидУчастника;
		СтрокаУчастника.Участник = Участник;
		
	ИначеЕсли ЗначениеЗаполнено(Участник) И СтрокаУчастника <> Неопределено И СтрокаУчастника.Участник <> Участник Тогда
		
		// Замена участника.
		Участники.Удалить(СтрокаУчастника);
		
		СтрокаУчастника = Участники.Добавить();
		СтрокаУчастника.ВидУчастника = ВидУчастника;
		СтрокаУчастника.Участник = Участник;
		
	ИначеЕсли Не ЗначениеЗаполнено(Участник) И СтрокаУчастника <> Неопределено Тогда
		
		// Удаление участника.
		Участники.Удалить(СтрокаУчастника);
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает участников определенного вида.
//
// Параметры:
//  УчастникиВида - Неопределено, Массив из ОпределяемыйТип.УчастникЗадач.
//  ВидУчастников - СправочникСсылка.ВидыУчастниковЗадач - Вид участников.
//
Процедура УстановитьУчастников(УчастникиВида, ВидУчастников) Экспорт
	
	// Добавим новых.
	Если УчастникиВида <> Неопределено Тогда
		
		Для Каждого УчастникВида Из УчастникиВида Цикл
			
			Если Не ЗначениеЗаполнено(УчастникВида) Тогда
				Продолжить;
			КонецЕсли;
			
			НайденныеСтроки =
				Участники.НайтиСтроки(Новый Структура("ВидУчастника, Участник", ВидУчастников, УчастникВида));
			Если НайденныеСтроки.Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаУчастника = Участники.Добавить();
			СтрокаУчастника.ВидУчастника = ВидУчастников;
			СтрокаУчастника.Участник = УчастникВида;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Удалим старых.
	КоличествоЭлементов = Участники.Количество();
	Для Индекс = 1 По КоличествоЭлементов Цикл
		
		СтрокаУчастника = Участники[КоличествоЭлементов - Индекс];
		Если СтрокаУчастника.ВидУчастника <> ВидУчастников Тогда
			Продолжить;
		КонецЕсли;
		
		Если УчастникиВида <> Неопределено
			И УчастникиВида.Найти(СтрокаУчастника.Участник) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Участники.Удалить(СтрокаУчастника);
		
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает описание.
//
// Параметры:
//  НовоеОписание - Строка - Описание.
//
Процедура УстановитьОписание(НовоеОписание) Экспорт
	
	Описание = НовоеОписание;
	
	НовоеОписаниеФорматированное = Новый ФорматированныйДокумент;
	НовоеОписаниеФорматированное.Добавить(НовоеОписание, Тип("ТекстФорматированногоДокумента"));
	ОписаниеФорматированное = Новый ХранилищеЗначения(НовоеОписаниеФорматированное);
	
КонецПроцедуры

// Устанавливает форматированное описание.
//
// Параметры:
//  НовоеОписаниеФорматированное - ФорматированныйДокумент - Форматированное описание.
//
Процедура УстановитьОписаниеФорматированное(НовоеОписаниеФорматированное) Экспорт
	
	ОписаниеФорматированное = Новый ХранилищеЗначения(НовоеОписаниеФорматированное);
	
	НовоеОписание = НовоеОписаниеФорматированное.ПолучитьТекст();
	Описание = НовоеОписание;
	
КонецПроцедуры

// Получатели уведомления об изменении важных реквизитов.
// Участники должны быть в свойстве "ПредыдущиеЗначенияРеквизитов".
// Уведомляем по тем ДействиямЗадачи, которые и ранее были в документе Задача.
// 
// Возвращаемое значение:
//  Массив Из ДокументСсылка.ДействиеЗадачи - Получатели уведомления об изменении важных реквизитов
//
Функция ПолучателиУведомленияОбИзмененииВажныхРеквизитов() Экспорт
	
	ПредыдущиеУчастникиТаблица = Неопределено;
	ПредыдущиеЗначенияРеквизитов = ДополнительныеСвойства.ПредыдущиеЗначенияРеквизитов;
	ПредыдущиеЗначенияРеквизитов.Свойство("Участники", ПредыдущиеУчастникиТаблица);
	
	Если ПредыдущиеУчастникиТаблица = Неопределено Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	ТекущиеУчастникиТаблица = Участники.Выгрузить();
	
	УчастникиБыли = ПредыдущиеУчастникиТаблица.ВыгрузитьКолонку("ДействиеУчастника");
	УчастникиСтали = ТекущиеУчастникиТаблица.ВыгрузитьКолонку("ДействиеУчастника");
	
	Добавлены = ОбщегоНазначенияКлиентСервер.РазностьМассивов(УчастникиСтали, УчастникиБыли);
	Остались = ОбщегоНазначенияКлиентСервер.РазностьМассивов(УчастникиСтали, Добавлены);
	
	Результат = Новый Массив;
	
	Для Каждого Элемент Из Остались Цикл
		Если ЗначениеЗаполнено(Элемент) Тогда
			
			РеквизитыДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Элемент,
				"ВидУчастника, СостояниеУчастникаЗадачи");
			
			Если РаботаСЗадачамиПовтИсп.ЭтоПроверяющий(РеквизитыДействия.ВидУчастника) Тогда
				
				СостояниеУчастникаЗадачи = РеквизитыДействия.СостояниеУчастникаЗадачи;
	
				РеквизитыСостояния = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
					СостояниеУчастникаЗадачи,
					"ВидСостояния, РезультатДействия");
				
				ЭтоНачатоеДействие = Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоНачатоеДействие(
					РеквизитыСостояния.ВидСостояния);
				ЭтоОжидаемоеДействие = Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоОжидаемоеДействие(
					РеквизитыСостояния.ВидСостояния);
				Если ЭтоНачатоеДействие Или ЭтоОжидаемоеДействие Тогда
					Результат.Добавить(Элемент);
					Продолжить;
				КонецЕсли;
				
			Иначе
				
				Результат.Добавить(Элемент);
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	// Создание на основании.
	Основание = Неопределено;
	РежимКопирования = Ложь;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда	
		Основание = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеЗаполнения, "Основание");
		РежимКопирования = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеЗаполнения, "РежимКопирования", Ложь);
	Иначе
		Основание = ДанныеЗаполнения;
	КонецЕсли;
	
	ТипДанныхЗаполнения = Метаданные.НайтиПоТипу(ТипЗнч(Основание));	
	Если ТипДанныхЗаполнения = Неопределено
		Или Не Метаданные.Документы.Задача.ВводитсяНаОсновании.Содержит(ТипДанныхЗаполнения) Тогда
		
		Основание = Неопределено;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Основание) Тогда
		
		Если ТипЗнч(Основание) = Тип("СправочникСсылка.ТемыОбсуждений") Тогда
			Основание = РаботаСОбсуждениями.НайтиПервоеСообщениеТемы(Основание);
		КонецЕсли;
		
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ВходящееПисьмо")
			Или ТипЗнч(Основание) = Тип("ДокументСсылка.ИсходящееПисьмо") Тогда
			
			РеквизитыПисьма = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "Тема, Проект");
			
			Заголовок = РеквизитыПисьма.Тема;
			Если ЗначениеЗаполнено(РеквизитыПисьма.Проект) Тогда
				Проект = РеквизитыПисьма.Проект;
			КонецЕсли;
			
			НовоеФорматированноеОписание = ИнтеграцияЗадач.ОписаниеФорматированное(Основание);
			УстановитьОписаниеФорматированное(НовоеФорматированноеОписание);
			
			СтрокаПриложения = Приложения.Добавить();
			СтрокаПриложения.Приложение = Основание;
			
		ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.Задача")
			Или ТипЗнч(Основание) = Тип("ДокументСсылка.ДействиеЗадачи") Тогда
			
			Если ТипЗнч(Основание) = Тип("ДокументСсылка.ДействиеЗадачи") Тогда
				
				ВышестоящееДействие = Основание;
				ВышестоящаяЗадача = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "Задача");
				
			ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.Задача") Тогда
				
				ВышестоящаяЗадача = Основание;
				
			Иначе
				
				ВышестоящаяЗадача = Документы.Задача.ПустаяСсылка();
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВышестоящаяЗадача) Или РежимКопирования Тогда
				
				РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
					ВышестоящаяЗадача,
					"ВышестоящаяЗадача, Заголовок, Проект, Срок, ОписаниеФорматированное, Приложения, Приоритет");
				
				Проект = РеквизитыЗадачи.Проект;
				Срок = РеквизитыЗадачи.Срок;
				Приоритет = РеквизитыЗадачи.Приоритет;
				Если РежимКопирования Тогда
					Заголовок = РеквизитыЗадачи.Заголовок;
					ВышестоящаяЗадача = РеквизитыЗадачи.ВышестоящаяЗадача;
				Иначе
					Заголовок = Строка(ВышестоящаяЗадача);
				КонецЕсли;
				
				НовоеФорматированноеОписание = РеквизитыЗадачи.ОписаниеФорматированное.Получить();
				УстановитьОписаниеФорматированное(НовоеФорматированноеОписание);
				
				Для Каждого СтараяСтрокаПриложения Из РеквизитыЗадачи.Приложения.Выгрузить() Цикл
					НоваяСтрокаПриложения = Приложения.Добавить();
					НоваяСтрокаПриложения.Приложение = СтараяСтрокаПриложения.Приложение;
				КонецЦикла;
			
			КонецЕсли;
			
			Если ТипЗнч(Основание) = Тип("ДокументСсылка.ДействиеЗадачи") Тогда
				
				Действие = Неопределено;
				
				Если ИнтеграцияЗадач.ЭтоЗадачаСогласованияВРежимеЗамечаний(Основание, Действие) Тогда
					
					Предмет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "Предмет");
					
					Заголовок = СтрШаблон(
						НСтр("ru = 'Внести замечания ""%1""'"),
						РаботаСОбсуждениями.ПолучитьПредставлениеПредмета(Предмет));
					
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(Срок) Тогда
					
					РеквизитыДействияЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
						Основание,
						"ЕстьОсобыйСрок, ОсобыйСрок");
					
					Если РеквизитыДействияЗадачи.ЕстьОсобыйСрок Тогда
						
						Срок = РеквизитыДействияЗадачи.ОсобыйСрок;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Основание) = Тип("СправочникСсылка.ГруппировкиЗадач") Тогда
			
			РеквизитыГруппировки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				Основание,
				"Проект, Исполнитель, ИсполнительРазыменован");
			
			Если ЗначениеЗаполнено(РеквизитыГруппировки.Проект)
				И ТипЗнч(РеквизитыГруппировки.Проект) = Тип("СправочникСсылка.Проекты") Тогда
				Проект = РеквизитыГруппировки.Проект;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РеквизитыГруппировки.Исполнитель)
				И РеквизитыГруппировки.Исполнитель <> Перечисления.ОтборыПоУчастникамЗадач.ТекущийПользователь  Тогда
				
				Если РеквизитыГруппировки.Исполнитель = Перечисления.ОтборыПоУчастникамЗадач.Подчиненные Тогда
					Подразделение = 
						Сотрудники.ПодразделениеСотрудника(Сотрудники.ОсновнойСотрудник());
						
					НовыеИсполнители = РаботаСЗадачами.РазыменоватьОтборПоУчастнику(
						Подразделение,
						Ложь,
						Истина,
						Истина);
				Иначе
					НовыеИсполнители = РаботаСЗадачами.РазыменоватьОтборПоУчастнику(
						РеквизитыГруппировки.Исполнитель,
						РеквизитыГруппировки.ИсполнительРазыменован,
						Истина,
						Истина);
				КонецЕсли;
				
				Если ТипЗнч(НовыеИсполнители) <> Тип("Массив") Тогда
					НовыеИсполнители = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НовыеИсполнители);
				КонецЕсли;
				НовыеИсполнители = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
					НовыеИсполнители,
					Сотрудники.ВсеСотрудникиТекущегоПользователя());
				ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияТипаИзМассива(
					НовыеИсполнители,
					Тип("СправочникСсылка.ПолныеРоли"));
				
				Если НовыеИсполнители.Количество() > 0 Тогда
					УстановитьУчастников(
						НовыеИсполнители,
						Справочники.ВидыУчастниковЗадач.Исполнитель);
					УстановитьУчастника(
						Сотрудники.ОсновнойСотрудник(),
						Справочники.ВидыУчастниковЗадач.Проверяющий);
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Основание) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
			
			СотрудникиПодразделения = Сотрудники.СотрудникиПодразделения(Основание);
			ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(
				СотрудникиПодразделения,
				Сотрудники.ТекущийПользовательИСотрудники());
			
			УстановитьУчастников(
				СотрудникиПодразделения,
				Справочники.ВидыУчастниковЗадач.Исполнитель);
			УстановитьУчастника(
				Сотрудники.ОсновнойСотрудник(),
				Справочники.ВидыУчастниковЗадач.Проверяющий);
			
		ИначеЕсли ТипЗнч(Основание) = Тип("СправочникСсылка.Пользователи") Тогда
			
			УстановитьУчастника(
				ОбщегоНазначенияДокументооборот.Сотрудник(Основание),
				Справочники.ВидыУчастниковЗадач.Исполнитель);
			УстановитьУчастника(
				Сотрудники.ОсновнойСотрудник(),
				Справочники.ВидыУчастниковЗадач.Проверяющий);
			
		ИначеЕсли ТипЗнч(Основание) = Тип("СправочникСсылка.Сотрудники") Тогда
			
			УстановитьУчастника(
				Основание,
				Справочники.ВидыУчастниковЗадач.Исполнитель);
			УстановитьУчастника(
				Сотрудники.ОсновнойСотрудник(),
				Справочники.ВидыУчастниковЗадач.Проверяющий);
			
		ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.Бронь") Тогда
			
			РеквизитыБрони = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "Сотрудник, ДатаНачала");
			Заголовок = Строка(Основание) + " - " + Строка(РеквизитыБрони.Сотрудник);
			Срок = РеквизитыБрони.ДатаНачала;
			
			СтрокаПриложения = Приложения.Добавить();
			СтрокаПриложения.Приложение = Основание;
			
		ИначеЕсли ТипЗнч(Основание) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
			
			Заголовок = Строка(Основание);
			
			СтрокаПриложения = Приложения.Добавить();
			СтрокаПриложения.Приложение = Основание;
			
			РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание,
				"Важность, ВидДокумента.ИспользоватьВажность");
			Если РеквизитыДокумента.ВидДокументаИспользоватьВажность = Истина Тогда
				Приоритет = Справочники.ПриоритетыЗадач.НайтиПоВариантуВажности(РеквизитыДокумента.Важность);
			КонецЕсли;			
			
		ИначеЕсли ТипЗнч(Основание) = Тип("СправочникСсылка.Контрагенты") Тогда
			
			Заголовок = Строка(Основание);
			
			СтрокаПриложения = Приложения.Добавить();
			СтрокаПриложения.Приложение = Основание;
			
		ИначеЕсли ТипЗнч(Основание) = Тип("СправочникСсылка.Мероприятия") Тогда
			
			РеквизитыМероприятия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "ДатаНачала");
			Заголовок = Строка(Основание);
			Срок = РеквизитыМероприятия.ДатаНачала;
			
			СтрокаПриложения = Приложения.Добавить();
			СтрокаПриложения.Приложение = Основание;
			
		ИначеЕсли ТипЗнч(Основание) = Тип("СправочникСсылка.СообщенияОбсуждений") Тогда
			
			РеквизитыСообщения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				Основание,
				"ВладелецСообщения");
			Заголовок = Строка(РеквизитыСообщения.ВладелецСообщения);
			
			СтрокаПриложения = Приложения.Добавить();
			СтрокаПриложения.Приложение = Основание;
			
		ИначеЕсли ТипЗнч(Основание) = Тип("СправочникСсылка.Файлы") Тогда
			
			Заголовок = Строка(Основание);
			
			СтрокаПриложения = Приложения.Добавить();
			СтрокаПриложения.Приложение = Основание;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Автор.
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("Автор") Тогда
		Автор = ДанныеЗаполнения.Автор;
	ИначеЕсли Не ЗначениеЗаполнено(Автор) Тогда
		Автор = Сотрудники.ОсновнойСотрудник();
	Конецесли;
	
	// Вид задачи и владелец.
	СтарыйВидЗадачи = ВидЗадачи;
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ВидЗадачи")
		И ДанныеЗаполнения.Свойство("Источник") Тогда
		
		ВидЗадачи = ДанныеЗаполнения.ВидЗадачи;
		Источник = ДанныеЗаполнения.Источник;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ВидЗадачи") Тогда
		
		ВидЗадачи = ДанныеЗаполнения.ВидЗадачи;
		
	ИначеЕсли РаботаСЗадачами.ЭтоИсточникЗадач(ДанныеЗаполнения) Тогда
		
		ВидЗадачи = ИнтеграцияЗадач.ВидЗадачиПоИсточнику(ДанныеЗаполнения);
		Источник = ДанныеЗаполнения;
		
		ИнтеграцияЗадач.ЗаполнитьПоИсточнику(ЭтотОбъект, ДанныеЗаполнения);
		
	ИначеЕсли Не ЗначениеЗаполнено(ВидЗадачи) Тогда
		
		ВидЗадачи = Справочники.ВидыЗадач.Поручение;
		
	КонецЕсли;
	НовыйВидЗадачи = ВидЗадачи;
	ОбновитьУчастниковПриИзмененииВидаЗадачи(СтарыйВидЗадачи, НовыйВидЗадачи);
	
	
	ДанныеВидаЗадачи = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(ВидЗадачи);
	
	// Вышестоящая задача.
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ВышестоящаяЗадача") Тогда
		ВышестоящаяЗадача = ДанныеЗаполнения.ВышестоящаяЗадача;
	Конецесли;
	
	// Дата.
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("Дата") Тогда
		Дата = ДанныеЗаполнения.Дата;
	ИначеЕсли Не ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	// Дата начала.
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ДатаНачала") Тогда
		ДатаНачала = ДанныеЗаполнения.ДатаНачала;
	КонецЕсли;
	
	// Дата выполнения.
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ДатаВыполнения") Тогда
		ДатаВыполнения = ДанныеЗаполнения.ДатаВыполнения;
	КонецЕсли;
	
	// Дата отмены.
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ДатаОтмены") Тогда
		ДатаОтмены = ДанныеЗаполнения.ДатаОтмены;
	КонецЕсли;
	
	// Заголовок.
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("Заголовок") Тогда
		Заголовок = ДанныеЗаполнения.Заголовок;
	Конецесли;
	
	// Кто отменил.
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("КтоОтменил") Тогда
		КтоОтменил = ДанныеЗаполнения.КтоОтменил;
	Конецесли;
	
	// Описание.
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("Описание") Тогда
		УстановитьОписание(ДанныеЗаполнения.Описание);
	Конецесли;
	
	// Описание форматированное.
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ОписаниеФорматированное") Тогда
		УстановитьОписаниеФорматированное(ДанныеЗаполнения.ОписаниеФорматированное);
	Конецесли;
	
	// Приоритет.
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("Приоритет") Тогда
		Приоритет = ДанныеЗаполнения.Приоритет;
	ИначеЕсли Не ЗначениеЗаполнено(Приоритет) Тогда
		Приоритет = Справочники.ПриоритетыЗадач.ПриоритетПоУмолчанию();
	Конецесли;
	
	// Причина отмены.
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ПричинаОтмены") Тогда
		ПричинаОтмены = ДанныеЗаполнения.ПричинаОтмены;
	Конецесли;
	
	// Проект.
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("Проект") Тогда
		Проект = ДанныеЗаполнения.Проект;
	ИначеЕсли Не ЗначениеЗаполнено(Проект) И ЭтоНовый() Тогда
		Проект = РаботаСПроектами.ПолучитьПроектПоУмолчанию()
	Конецесли;
	
	// Создал.
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("Создал") Тогда
		Создал = ДанныеЗаполнения.Создал;
	ИначеЕсли Не ЗначениеЗаполнено(Создал) Тогда
		Создал = Сотрудники.ОсновнойСотрудник();
	КонецЕсли;
	
	// Состояние задачи.
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("СостояниеЗадачи") Тогда
		СостояниеЗадачи = ДанныеЗаполнения.СостояниеЗадачи;
	ИначеЕсли Не ЗначениеЗаполнено(СостояниеЗадачи) Тогда
		СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиЧерновик;
	Конецесли; 
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.ДействияОзнакомления") Тогда
		
		ПомещеноВИсторию = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения, "ПомещеноВИсторию");
		Если ПомещеноВИсторию Тогда
			СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиОтменена;
		КонецЕсли;
		
	КонецЕсли;	
	
	// Срок.
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("Срок") Тогда
		Срок = ДанныеЗаполнения.Срок;
	ИначеЕсли Не ЗначениеЗаполнено(Срок) И Не ЗначениеЗаполнено(Источник) Тогда
		
		СрокПоУмолчанию = РаботаСЗадачами.ПолучитьПерсональнуюНастройку("СрокПоУмолчанию");
		Если ЗначениеЗаполнено(СрокПоУмолчанию) Тогда
			
			Срок = НачалоДня(ТекущаяДатаСеанса()) + СрокПоУмолчанию * 86400; // 86400 - число секунд в дне.
			ГрафикРаботы = ГрафикиРаботы.ГрафикРаботыСотрудника(
				Сотрудники.ОсновнойСотрудник());
			Если ЗначениеЗаполнено(ГрафикРаботы) Тогда
				Срок = ГрафикиРаботы.ПолучитьПоследнееРабочееВремяДня(ГрафикРаботы, Срок);
			Иначе
				Срок = КонецДня(Срок);
			КонецЕсли;
			
		КонецЕсли;
		
	Конецесли;
	
	// Приложения.
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("Приложения") Тогда
		
		НесколькоПроектов = Ложь;
		ВозможныйПроект = Справочники.Проекты.ПустаяСсылка();
		
		Приложения.Очистить();
		Для Каждого Приложение Из ДанныеЗаполнения.Приложения Цикл
			
			СтрокаПриложения = Приложения.Добавить();
			СтрокаПриложения.Приложение = Приложение;
			
			ПроектПриложения = ПроектПриложения(Приложение);
			Если ЗначениеЗаполнено(ПроектПриложения) Тогда
				Если Не ЗначениеЗаполнено(ВозможныйПроект) Тогда
					ВозможныйПроект = ПроектПриложения;
				ИначеЕсли ВозможныйПроект <> ПроектПриложения Тогда
					НесколькоПроектов = Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ВозможныйПроект)
			И Не НесколькоПроектов
			И Не ЗначениеЗаполнено(Проект)
			И Не ДанныеЗаполнения.Свойство("Проект") Тогда
			Проект = ВозможныйПроект;
		КонецЕсли;
		
	КонецЕсли;
	
	// Шаблоны задач.
	Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.ШаблоныЗадач") Тогда
		ЗаполнитьПоШаблону(ДанныеЗаполнения);
	КонецЕсли;
	
	УзелОбработки = КОДПовтИсп.ИдентификаторТекущегоУзла();
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Автор = Сотрудники.ОсновнойСотрудник();
	Дата = ТекущаяДатаСеанса();
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	НепроверяемыеРеквизиты = Новый Массив;
	
	ВидСостоянияЗадачи = РаботаСЗадачамиПовтИсп.ВидСостоянияЗадач(СостояниеЗадачи);
	ЭтоЧерновик = Перечисления.ВидыСостоянийЗадач.ЭтоЧерновик(ВидСостоянияЗадачи);
	Если ЭтоЧерновик Тогда
		НепроверяемыеРеквизиты.Добавить("Заголовок");
	КонецЕсли;
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		НепроверяемыеРеквизиты.Добавить("Автор");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияДокументооборот.УстановитьДополнительноеСвойствоПредыдущиеЗначенияРеквизитов(ЭтотОбъект);
	ИнтеграцияЗадач.ИнициализироватьКонтекстИзмененияЗадачиДействияЗадачи(ЭтотОбъект);
	
	Если Не ПометкаУдаления И СостояниеЗадачи <> Справочники.СостоянияЗадач.Черновик Тогда
		
		Для Каждого СтрокаУчастника Из Участники Цикл
			
			Если ЗначениеЗаполнено(СтрокаУчастника.ДействиеУчастника)
				Или Не ЗначениеЗаполнено(СтрокаУчастника.Участник) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаУчастника.ДействиеУчастника = Документы.ДействиеЗадачи.ПолучитьСсылку();
			
			Если Не ДополнительныеСвойства.Свойство("НовыеДействия") Тогда
				ДополнительныеСвойства.Вставить("НовыеДействия", Новый Массив);
			КонецЕсли;
			
			ДополнительныеСвойства.НовыеДействия.Добавить(
				СтрокаУчастника.ДействиеУчастника);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ИзмениласьПометкаУдаления =
		ОбщегоНазначенияДокументооборот.ИзменилосьЗначениеРеквизитов(ЭтотОбъект, "ПометкаУдаления");
	Если ИзмениласьПометкаУдаления Тогда
		ДатаУдаления = ?(ПометкаУдаления, ТекущаяДатаСеанса(), Дата(1, 1, 1));
	КонецЕсли;
	
	Если ОбщегоНазначенияДокументооборот.ИзменилосьЗначениеРеквизитов(ЭтотОбъект, "Приложения") Тогда
		
		ПриложенияВышестоящейЗадачи = Новый Массив;
		Если ЗначениеЗаполнено(ВышестоящаяЗадача) Тогда
			
			ТаблицаПриложенияВышестоящейЗадачи =
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВышестоящаяЗадача, "Приложения");
			ТаблицаПриложенияВышестоящейЗадачи = ТаблицаПриложенияВышестоящейЗадачи.Выгрузить();
			
			ПриложенияВышестоящейЗадачи = ТаблицаПриложенияВышестоящейЗадачи.ВыгрузитьКолонку("Приложение");
			
		КонецЕсли;
		
		Для Каждого СтрокаПриложения Из Приложения Цикл
			
			Если Не РаботаСЗадачамиКлиентСервер.ЭтоПриложениеБезПрав(СтрокаПриложения.Приложение) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПриложенияВышестоящейЗадачи.Найти(СтрокаПриложения.Приложение) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если Не ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(СтрокаПриложения.Приложение).Чтение Тогда
				ВызватьИсключение СтрШаблон(
					НСтр("ru = 'Недостаточно прав на приложение %1.'"),
					СтрокаПриложения.Приложение);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	СкопироватьПриложенияДругихЗадач();
	ОбновитьДанныеПриложений();
	
	ВерсияОбновления = 1;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияЗадач.ПриЗаписиЗадачи(ЭтотОбъект, Отказ);
	
	ДанныеВидаЗадачи = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(ВидЗадачи);
	
	ВидСостоянияЗадачи = РаботаСЗадачамиПовтИсп.ВидСостоянияЗадач(СостояниеЗадачи);
	ПредыдущиеЗначенияРеквизитов = ДополнительныеСвойства.ПредыдущиеЗначенияРеквизитов;
	ЭтоЧерновик = Перечисления.ВидыСостоянийЗадач.ЭтоЧерновик(ВидСостоянияЗадачи);
	
	Если ОбщегоНазначенияДокументооборот.ИзменилосьЗначениеРеквизитов(ЭтотОбъект, "Срок, Проект") Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Подзадачи = Документы.Задача.НайтиПодзадачи(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ссылка));
		РеквизитыПодзадач = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Подзадачи, "СостояниеЗадачи, Срок, Проект");
		
		ЭтоВыполненныеЗадачи = РаботаСЗадачами.ЭтоВыполненныеЗадачи(Подзадачи);
		
		Для Каждого Подзадача Из Подзадачи Цикл
			
			РеквизитыПодзадачи = РеквизитыПодзадач[Подзадача];
			ЭтоВыполненнаяЗадача = ЭтоВыполненныеЗадачи[Подзадача];
			
			ИзменитьСрок = Срок <> ДополнительныеСвойства.ПредыдущиеЗначенияРеквизитов.Срок
						И РеквизитыПодзадачи.Срок = ДополнительныеСвойства.ПредыдущиеЗначенияРеквизитов.Срок
						И Не ЭтоВыполненнаяЗадача;
			ИзменитьПроект = Проект <> ДополнительныеСвойства.ПредыдущиеЗначенияРеквизитов.Проект 
							И РеквизитыПодзадачи.Проект = ДополнительныеСвойства.ПредыдущиеЗначенияРеквизитов.Проект;
			
			Если Не (ИзменитьСрок Или ИзменитьПроект) Тогда
				Продолжить;
			КонецЕсли;
			
			ПодзадачаОбъект = Подзадача.ПолучитьОбъект();
			Если ИзменитьСрок Тогда
				ПодзадачаОбъект.Срок = Срок;
			КонецЕсли;
			Если ИзменитьПроект Тогда
				ПодзадачаОбъект.Проект = Проект;
			КонецЕсли;	
			
			ПодзадачаОбъект.Записать(
				?(ПодзадачаОбъект.Проведен,
					РежимЗаписиДокумента.Проведение,
					РежимЗаписиДокумента.Запись));
			
		КонецЦикла;
		
		УстановитьПривилегированныйРежим(Ложь);
		
		Если Не ЭтоЧерновик
			И Не ЗначениеЗаполнено(Источник) Тогда
			
			КонтекстПереносаСрока = РегистрыСведений.ИсторияЗадач.КонтекстПереносаСрока();
			КонтекстПереносаСрока.СтарыйСрок = ПредыдущиеЗначенияРеквизитов.Срок;
			КонтекстПереносаСрока.НовыйСрок = Срок;
			
			Если ДополнительныеСвойства.Свойство("ПеренесСрок") Тогда
				ПеренесСрок = ДополнительныеСвойства.ПеренесСрок;
			Иначе
				ПеренесСрок = ПользователиДокументооборот.ОлицетворяемыйПользователь();
			КонецЕсли;
			
			РегистрыСведений.ИсторияЗадач.Добавить(
				Ссылка,
				Документы.ДействиеЗадачи.ПустаяСсылка(),
				ТекущаяДатаСеанса(),
				Справочники.СобытияЗадач.ПеренесенСрок,
				КонтекстПереносаСрока,
				ПеренесСрок);
			
			ДополнительныеСвойства.Вставить("ПеренесенСрокЗарегистрировано", Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИзменилсяПроект =
		ОбщегоНазначенияДокументооборот.ИзменилосьЗначениеРеквизитов(ЭтотОбъект, "Проект");
	Если Не ДополнительныеСвойства.ЭтоНовый И ИзменилсяПроект Тогда
		
		ВладельцыФайлов = Новый Массив;
		ВладельцыФайлов.Добавить(Ссылка);
		
		Для Каждого СтрокаУчастника Из Участники Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаУчастника.ДействиеУчастника) Тогда
				Продолжить;
			КонецЕсли;
			
			ВладельцыФайлов.Добавить(СтрокаУчастника.ДействиеУчастника);
			
		КонецЦикла;
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	Файлы.Ссылка КАК Файл
			|ИЗ
			|	Справочник.Файлы КАК Файлы
			|ГДЕ
			|	Файлы.ВладелецФайла В (&ВладельцыФайлов)
			|	И Файлы.Проект <> &Проект");
		
		Запрос.УстановитьПараметр("ВладельцыФайлов", ВладельцыФайлов);
		Запрос.УстановитьПараметр("Проект", Проект);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ФайлОбъект = Выборка.Файл.ПолучитьОбъект();
			ФайлОбъект.Проект = Проект;
			ФайлОбъект.Записать();
		КонецЦикла;
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	ИзмениласьПометкаУдаления =
		ОбщегоНазначенияДокументооборот.ИзменилосьЗначениеРеквизитов(ЭтотОбъект, "ПометкаУдаления");
	Если ИзмениласьПометкаУдаления Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		ПротоколированиеРаботыСотрудников.ЗаписатьПометкуУдаления(Ссылка, ПометкаУдаления);
		
		Если ПометкаУдаления Тогда
			
			// Установлена пометка удаления.
			ВсеПодзадачи = Документы.Задача.НайтиПодзадачи(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ссылка));
			Для Каждого Подзадача Из ВсеПодзадачи Цикл
				
				ПодазадачаОбъект = Подзадача.ПолучитьОбъект();
				ПодазадачаОбъект.УстановитьПометкуУдаления(Истина);
				
			КонецЦикла;  
			
			НеОбновлятьДействияЗадачи = Ложь;
			ДополнительныеСвойства.Свойство("НеОбновлятьДействияЗадачи", НеОбновлятьДействияЗадачи);
			
			Если НеОбновлятьДействияЗадачи <> Истина Тогда
				Для Каждого ДействиеЗадачи Из Документы.ДействиеЗадачи.НайтиПоЗадаче(Ссылка) Цикл
					
					ДействиеЗадачиОбъект = ДействиеЗадачи.ПолучитьОбъект();
					ДействиеЗадачиОбъект.УстановитьПометкуУдаления(Истина);
					
				КонецЦикла;              
			КонецЕсли;
			
		Иначе
			
			// Снята пометка удаления. 
			Для Каждого СтрокаУчастника Из Участники Цикл
				
				Если Не ЗначениеЗаполнено(СтрокаУчастника.ДействиеУчастника) Тогда
					Продолжить;
				КонецЕсли;
				
				ДействиеЗадачиОбъект = СтрокаУчастника.ДействиеУчастника.ПолучитьОбъект();
				Если ДействиеЗадачиОбъект = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ДействиеЗадачиОбъект.ПометкаУдаления = Ложь;
				ДействиеЗадачиОбъект.Записать(РежимЗаписиДокумента.Проведение);
				
			КонецЦикла;
			
		Конецесли;
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("НовыеДействия") Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		НаправитьНаИсполнение = Ложь;
		Если ДополнительныеСвойства.ПредыдущиеЗначенияРеквизитов.СостояниеЗадачи = Справочники.СостоянияЗадач.Черновик
			И ДополнительныеСвойства.Свойство("ОбновитьДействияПоСостоянию")
			И СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиНовая Тогда
			НаправитьНаИсполнение = Истина;
			ДополнительныеСвойства.Удалить("ОбновитьДействияПоСостоянию");
		КонецЕсли;
		
		НовыеДействия = ДополнительныеСвойства.НовыеДействия;
		Для Каждого СтрокаУчастника Из Участники Цикл
			
			Если НовыеДействия.Найти(СтрокаУчастника.ДействиеУчастника) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ДействиеУчастникаОбъект = Документы.ДействиеЗадачи.СоздатьДокумент();
			
			ДействиеУчастникаОбъект.УстановитьСсылкуНового(СтрокаУчастника.ДействиеУчастника);
			
			ДанныеЗаполненияДействия = Новый Структура("Задача, ВидДействия, ВидУчастника, Исполнитель");
			ДанныеЗаполненияДействия.Задача = Ссылка;
			ДанныеЗаполненияДействия.ВидУчастника = СтрокаУчастника.ВидУчастника;
			ДанныеЗаполненияДействия.Исполнитель = СтрокаУчастника.Участник;
			
			ДанныеЗаполненияДействия.ВидДействия = РаботаСЗадачами.ВидДействияПоВидуУчастника(
				ВидЗадачи,
				СтрокаУчастника.ВидУчастника);
			
			Если СтрокаУчастника.Участник = Автор Тогда
				ДанныеЗаполненияДействия.Вставить("Флаг", Флаг);
			КонецЕсли;
			
			ДействиеУчастникаОбъект.Заполнить(ДанныеЗаполненияДействия);
			
			Если НаправитьНаИсполнение
				И РаботаСЗадачамиПовтИсп.ЭтоИсполнитель(СтрокаУчастника.ВидУчастника) Тогда
				ДействиеУчастникаОбъект.ОтметитьНаправлениеНаИсполнение(ВидЗадачи, ДатаСоздания);
				ДействиеУчастникаОбъект.ДополнительныеСвойства.Вставить("НаправитьНаИсполнение", Истина);
			КонецЕсли;
			
			ДействиеУчастникаОбъект.ДополнительныеСвойства.Вставить("ДанныеЗадачи", ЭтотОбъект);
			
			ДействиеУчастникаОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ИзменилисьУчастники =
		ОбщегоНазначенияДокументооборот.ИзменилосьЗначениеРеквизитов(
			ЭтотОбъект,
			"Участники",
			"ДействиеУчастника");
	Если Не ДополнительныеСвойства.ЭтоНовый И ИзменилисьУчастники Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Для Каждого ДействиеЗадачи Из Документы.ДействиеЗадачи.НайтиПоЗадаче(Ссылка) Цикл
			
			Если Участники.Найти(ДействиеЗадачи, "ДействиеУчастника") <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ДействиеУчастникаОбъект = ДействиеЗадачи.ПолучитьОбъект();
			
			ВидСостоянияУчастниковЗадач = РаботаСЗадачамиПовтИсп.ВидСостоянияУчастниковЗадач(
				ДействиеУчастникаОбъект.СостояниеУчастникаЗадачи);
			ОжидаетВыполнения = Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоОжидаемоеДействие(ВидСостоянияУчастниковЗадач);
			
			Если ОжидаетВыполнения Тогда
				ДействиеУчастникаОбъект.УстановитьСостояние(
					ДанныеВидаЗадачи.СостояниеУчастниковОтменена,
					Сотрудники.ОсновнойСотрудник(),
					Ложь);
				ДействиеУчастникаОбъект.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
			
		КонецЦикла;
		
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	Если Не ДополнительныеСвойства.ЭтоНовый
		И ОбщегоНазначенияДокументооборот.ИзменилосьЗначениеРеквизитов(ЭтотОбъект, "Приложения") Тогда
		
		ПредыдущиеЗначенияРеквизитов = ДополнительныеСвойства.ПредыдущиеЗначенияРеквизитов;
		
		Для Каждого СтрПриложения Из ПредыдущиеЗначенияРеквизитов.Приложения Цикл
			
			Если Приложения.Найти(СтрПриложения.Приложение, "Приложение") <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(СтрПриложения.Приложение) = Тип("СправочникСсылка.Файлы") Тогда
				ФайлОбъект = СтрПриложения.Приложение.ПолучитьОбъект();
				Если ФайлОбъект.ВладелецФайла = Ссылка Тогда
					ФайлОбъект.Редактирует = Неопределено;
					ФайлОбъект.ПометкаУдаления = Истина;
					ФайлОбъект.Записать();
				КонецЕсли;	
			КонецЕсли;
			
		КонецЦикла;
		
		
		Для Каждого ДействиеЗадачи Из Документы.ДействиеЗадачи.НайтиПоЗадаче(Ссылка) Цикл
			ЗамещающиеИПомощники.ЗаписатьДоступЗамещающихПоДействиюЗадачи(ДействиеЗадачи);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ОбновитьДействияПоСостоянию") Тогда
		
		Если СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиЧерновик Тогда
			
			// Делаем все действия неактивным.
			Для Каждого ДанныеДействия Из Документы.ДействиеЗадачи.АктивныеДействияПоЗадаче(Ссылка) Цикл
				Документы.ДействиеЗадачи.СделатьНеактивным(ДанныеДействия.ДействиеЗадачи);
			КонецЦикла;
			
		ИначеЕсли СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиНовая Тогда
			
			Если ЕстьНовыеИсполнители() Тогда
				// Отправим на исполнение те действия, которые ещё не отправлены.
				НаправитьНаИсполнение(Ложь);
			Иначе
				// Отправим на исполнение все действия.
				НаправитьНаИсполнение(Истина);
			КонецЕсли;
			
			// Снимем с проверки.
			СнятьСПроверки();
			
		ИначеЕсли СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиВРаботе
			И ДополнительныеСвойства.ПредыдущиеЗначенияРеквизитов.СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиОтложена Тогда
			
			// Отметим что отменена задача.
			ОтметитьСнятьОтложена();
			
		ИначеЕсли СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиВРаботе Тогда
			
			// Отметим что задача в работе.
			ОтметитьВРаботе();
			
			// Снимем с проверки.
			СнятьСПроверки();
			
		ИначеЕсли СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиНаПроверке
			И ДополнительныеСвойства.ПредыдущиеЗначенияРеквизитов.СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиОтложена Тогда
			
			// Отметим что отменена задача.
			ОтметитьСнятьОтложена();
			
		ИначеЕсли СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиНаПроверке Тогда
			
			// Сценарий - добавили проверяющего, когда все исполнители уже выполнили.
			
			// Отметим что нужна проверка.
			ОтметитьОжидаетПроверки();
			
			// Отправим на проверку.
			ОтметитьНаПроверке();
			
		ИначеЕсли СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиЗакрыта
			Или (ЗначениеЗаполнено(ДанныеВидаЗадачи.СостояниеЗадачиЗакрытаОтрицательно)
				И СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиЗакрытаОтрицательно)
			Или (ЗначениеЗаполнено(ДанныеВидаЗадачи.СостояниеЗадачиЗакрытаСЗамечаниями)
				И СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиЗакрытаСЗамечаниями) Тогда
			
			// Отметим что выполнена.
			ОтметитьВыполнена();
			
			// Отметить проверку.
			ОтметитьПроверено();
			
		ИначеЕсли СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиОтменена Тогда
			
			// Отметим что отменена задача.
			ОтметитьОтменена();

		ИначеЕсли СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиОтложена Тогда
			
			// Отметим что отложена задача.
			ОтметитьОтложена();
			
		Иначе
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Неизвестное состояние задачи %1'"),
				СостояниеЗадачи);
			
		КонецЕсли;
		
		Если ОбщегоНазначенияДокументооборот.ИзменилосьЗначениеРеквизитов(ЭтотОбъект, "СостояниеЗадачи") Тогда
			
			ОбновитьСостоянияПодзадач =
				СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиЧерновик
				Или ДополнительныеСвойства.ПредыдущиеЗначенияРеквизитов.СостояниеЗадачи =
					ДанныеВидаЗадачи.СостояниеЗадачиЧерновик;
			Если ОбновитьСостоянияПодзадач Тогда
				
				Подзадачи = Документы.Задача.НайтиПодзадачи(
					ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ссылка));
				РеквизитыПодзадач = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Подзадачи, "СостояниеЗадачи");
				
				Для Каждого Подзадача Из Подзадачи Цикл
					
					РеквизитыПодзадачи = РеквизитыПодзадач[Подзадача];
					
					ВидСостоянияПодзадачи = РаботаСЗадачамиПовтИсп.ВидСостоянияЗадач(
						РеквизитыПодзадачи.СостояниеЗадачи);
					
					Если СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиЧерновик
						И Перечисления.ВидыСостоянийЗадач.ЭтоОжидающаяВыполненияЗадача(ВидСостоянияПодзадачи) Тогда
						
						// Делаем черновиком.
						ПодазадачаОбъект = Подзадача.ПолучитьОбъект();
						ПодазадачаОбъект.УстановитьСостояние(СостояниеЗадачи, Истина);
						ПодазадачаОбъект.Записать(
							?(ПодазадачаОбъект.Проведен,
								РежимЗаписиДокумента.Проведение,
								РежимЗаписиДокумента.Запись));
							
					ИначеЕсли СостояниеЗадачи <> ДанныеВидаЗадачи.СостояниеЗадачиЧерновик
						И ЭтоЧерновик Тогда
						
						// Делаем как вышестоящую задачу.
						ПодазадачаОбъект = Подзадача.ПолучитьОбъект();
						ПодазадачаОбъект.УстановитьСостояние(СостояниеЗадачи, Истина);
						ПодазадачаОбъект.Записать(
							?(ПодазадачаОбъект.Проведен,
								РежимЗаписиДокумента.Проведение,
								РежимЗаписиДокумента.Запись));
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ДополнительныеСвойства.Удалить("ОбновитьДействияПоСостоянию");
		
	КонецЕсли;
	
	Если ИзменилисьУчастники Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		СтарыеУчастники = ДополнительныеСвойства.ПредыдущиеЗначенияРеквизитов.Участники;
		
		Для Каждого СтрокаУчастника Из Участники Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаУчастника.ДействиеУчастника) Тогда
				Продолжить;
			КонецЕсли;
			
			СтараяСтрокаУчастника = СтарыеУчастники.Найти(СтрокаУчастника.ДействиеУчастника, "ДействиеУчастника");
			Если СтараяСтрокаУчастника = Неопределено
				Или (СтараяСтрокаУчастника.ВидУчастника = СтрокаУчастника.ВидУчастника
					И СтараяСтрокаУчастника.Участник = СтрокаУчастника.Участник) Тогда
				Продолжить;
			КонецЕсли;
			
			ДействиеУчастникаОбъект = СтрокаУчастника.ДействиеУчастника.ПолучитьОбъект();
			
			ДанныеЗаполненияДействия = Новый Структура("ВидДействия, ВидУчастника, Исполнитель");
			ДанныеЗаполненияДействия.ВидУчастника = СтрокаУчастника.ВидУчастника;
			ДанныеЗаполненияДействия.ВидДействия = РаботаСЗадачами.ВидДействияПоВидуУчастника(
				ВидЗадачи,
				СтрокаУчастника.ВидУчастника);
			ДанныеЗаполненияДействия.Исполнитель = СтрокаУчастника.Участник;
			ДействиеУчастникаОбъект.Заполнить(ДанныеЗаполненияДействия);
			
			ДействиеУчастникаОбъект.Записать(
				?(ДействиеУчастникаОбъект.Проведен,
					РежимЗаписиДокумента.Проведение,
					РежимЗаписиДокумента.Запись));
			
			ИнтеграцияЗадач.ПополнитьКонтекстИзмененияДействий(ДополнительныеСвойства.КонтекстИзмененияРеквизитов,
				ДействиеУчастникаОбъект);
			
		КонецЦикла;
		
	КонецЕсли;
	
	КэшируемыеРеквизитыЗадач =
		РегистрыСведений.РеестрЗадачПоИсполнителям.КэшируемыеРеквизитыЗадач();
	МассивКэшируемыеРеквизитыЗадач = СтрРазделить(КэшируемыеРеквизитыЗадач, ",");
	МассивКэшируемыеРеквизитыЗадачБезУчастников = Новый Массив;
	
	Для Каждого КэшируемыйРеквизит Из МассивКэшируемыеРеквизитыЗадач Цикл
		
		КэшируемыйРеквизит = СокрЛП(КэшируемыйРеквизит);
		Если КэшируемыйРеквизит = "Участники" Тогда
			Продолжить;
		КонецЕсли;
		
		МассивКэшируемыеРеквизитыЗадачБезУчастников.Добавить(КэшируемыйРеквизит);
		
	КонецЦикла;
	
	КэшируемыеРеквизитыЗадачБезУчастников = СтрСоединить(МассивКэшируемыеРеквизитыЗадачБезУчастников, ",");
	
	ИзменилисьКэшируемыеРеквизитыЗадачДляДействийЗадач =
		ИзменилисьУчастники
		Или ОбщегоНазначенияДокументооборот.ИзменилосьЗначениеРеквизитов(
			ЭтотОбъект,
			КэшируемыеРеквизитыЗадачБезУчастников);
	
	ИзменилисьКэшируемыеРеквизитыЗадачДляКоличестваДействийЗадач =
		ОбщегоНазначенияДокументооборот.ИзменилосьЗначениеРеквизитов(
			ЭтотОбъект,
			РегистрыНакопления.КоличествоЗадачПоИсполнителям.КэшируемыеРеквизитыЗадач());
	
	ИзменилисьКэшируемыеРеквизитыЗадач =
		ИзменилисьКэшируемыеРеквизитыЗадачДляДействийЗадач
		Или ИзменилисьКэшируемыеРеквизитыЗадачДляКоличестваДействийЗадач;
	
	Если ИзменилисьКэшируемыеРеквизитыЗадач И Не ЭтоЧерновик Тогда
		
		Если ИзменилисьКэшируемыеРеквизитыЗадачДляДействийЗадач Тогда
			РегистрыСведений.РеестрЗадачПоИсполнителям.ОбновитьПоЗадаче(Ссылка);
		КонецЕсли;
		
		Если ИзменилисьКэшируемыеРеквизитыЗадачДляКоличестваДействийЗадач Тогда
			РегистрыНакопления.КоличествоЗадачПоИсполнителям.ОбновитьПоЗадаче(Ссылка);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ОбновитьСостоянияОбработкиРезультата") Тогда
		
		ДанныеВидаЗадачи = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(ВидЗадачи);
		
		ЕстьПроверяющий = ЕстьУчастник(ДанныеВидаЗадачи.ВидУчастникаПроверяющий);
		Если ЕстьПроверяющий Тогда
			ОтметитьОжидаетПроверкиДляВыполненных();
		Иначе
			ОтметитьВыполненаДляОжидающихПроверки();
		КонецЕсли;
		
		ДополнительныеСвойства.Удалить("ОбновитьСостоянияОбработкиРезультата");
		
	КонецЕсли;
	
	Если ДополнительныеСвойства.ЭтоНовый
		Или ОбщегоНазначенияДокументооборот.ИзменилосьЗначениеРеквизитов(
			ЭтотОбъект,
			"ВышестоящаяЗадача, СостояниеЗадачи, ПометкаУдаления") Тогда
		
		Если ЗначениеЗаполнено(ВышестоящаяЗадача) Тогда
			
			РегистрыСведений.РеестрЗадачПоАвторам.ОбновитьПоЗадаче(ВышестоящаяЗадача);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДополнительныеСвойства.ПредыдущиеЗначенияРеквизитов.ВышестоящаяЗадача)
			И ВышестоящаяЗадача <> ДополнительныеСвойства.ПредыдущиеЗначенияРеквизитов.ВышестоящаяЗадача Тогда
			
			РегистрыСведений.РеестрЗадачПоАвторам.ОбновитьПоЗадаче(
				ДополнительныеСвойства.ПредыдущиеЗначенияРеквизитов.ВышестоящаяЗадача);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДополнительныеСвойства.ЭтоНовый
		Или ОбщегоНазначенияДокументооборот.ИзменилосьЗначениеРеквизитов(
			ЭтотОбъект,
			"ВышестоящееДействие, СостояниеЗадачи, ПометкаУдаления") Тогда
		
		Если ЗначениеЗаполнено(ВышестоящееДействие) Тогда
			
			РегистрыСведений.РеестрЗадачПоИсполнителям.ОбновитьПоДействиюЗадачи(ВышестоящееДействие);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДополнительныеСвойства.ПредыдущиеЗначенияРеквизитов.ВышестоящееДействие)
			И ВышестоящееДействие <> ДополнительныеСвойства.ПредыдущиеЗначенияРеквизитов.ВышестоящееДействие Тогда
			
			РегистрыСведений.РеестрЗадачПоИсполнителям.ОбновитьПоДействиюЗадачи(
				ДополнительныеСвойства.ПредыдущиеЗначенияРеквизитов.ВышестоящееДействие);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбщегоНазначенияДокументооборот.ИзменилосьЗначениеРеквизитов(ЭтотОбъект, "СостояниеЗадачи") Тогда
		РаботаСЗадачами.ОбработатьИзменениеСостоянияЗадачи(ЭтотОбъект);
	КонецЕсли;
	
	ОбработатьДетекторыБизнесСобытий();
	ИнтеграцияЗадач.ОбработатьИзменениеРеквизитовЗадачи(ЭтотОбъект);
	
	// Права на приложения проверяются и расширяются не перед записью, а при записи,
	// т.к. часть прав приложений зависит от самой задачи - пока нового исполнителя нет в задачи,
	// у него нет и прав на приложения.
	РасширитьРабочиеГруппыПриложений();
	
	КэшДанных = Новый Структура;
	КэшДанных.Вставить("ДанныеЗадачи", ЭтотОбъект);
	РегистрыСведений.РеестрЗадачПоАвторам.ОбновитьПоЗадаче(Ссылка, КэшДанных);
	ДополнительныеСвойства.Вставить("РеестрыЗадачи", КэшДанных.РеестрыЗадачи);
	
	ИзмениласьПометкаУдаления = ОбщегоНазначенияДокументооборот.ИзменилосьЗначениеРеквизитов(
		ЭтотОбъект,
		"ПометкаУДаления");
	Если ИзмениласьПометкаУдаления Тогда
		РаботаСФайламиВызовСервера.ПометитьНаУдалениеПриложенныеФайлы(Ссылка, ПометкаУдаления);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	КэшируемыеРеквизитыЗадач = РегистрыНакопления.КоличествоЗадачПоАвторам.КэшируемыеРеквизитыЗадач();
	ОбщегоНазначенияДокументооборот.ДополнитьОтслеживаемыеРеквизиты(
		КэшируемыеРеквизитыЗадач,
		РегистрыСведений.РеестрЗадачПоАвторам.КэшируемыеРеквизитыЗадач());
	РеквизитыЗадачи = Новый Структура(КэшируемыеРеквизитыЗадач);
	ЗаполнитьЗначенияСвойств(РеквизитыЗадачи, ЭтотОбъект, КэшируемыеРеквизитыЗадач);
	
	// Количество задач.
	Движения.КоличествоЗадачПоАвторам.Записывать = Истина;
	КэшДанных = Новый Структура;
	КэшДанных.Вставить("ДанныеЗадачи", ЭтотОбъект);
	Если ДополнительныеСвойства.Свойство("РеестрыЗадачи") Тогда
		РеестрыЗадачи = ДополнительныеСвойства.РеестрыЗадачи;
	Иначе
		РеестрыЗадачи = Справочники.РеестрыЗадач.РеестрыЗадачи(Ссылка, КэшДанных);
	КонецЕсли;
	ДанныеРеестра = РегистрыНакопления.КоличествоЗадачПоАвторам.ДанныеРеестра(Ссылка, КэшДанных);
	Для Каждого РеестрЗадачи Из РеестрыЗадачи Цикл
		Движение = Движения.КоличествоЗадачПоАвторам.Добавить();
		Движение.РеестрЗадач = РеестрЗадачи;
		ЗаполнитьЗначенияСвойств(Движение, ДанныеРеестра);
	КонецЦикла;
	
	МоиДокументыСобытия.ДобавлениеВМоиДокументыПриПроведении(ЭтотОбъект, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Определяет, есть ли новые исполнители задачи, ожидающие отправки на исполнение.
// 
// Возвращаемое значение:
//  Булево - Есть новые исполнители.
//
Функция ЕстьНовыеИсполнители()
	
	ЕстьНовыеИсполнители = Ложь;
	
	Для Каждого СтрокаУчастника Из Участники Цикл
		
		Если Не РаботаСЗадачамиПовтИсп.ЭтоИсполнитель(СтрокаУчастника.ВидУчастника) Тогда
			Продолжить;
		КонецЕсли;
		
		СостояниеУчастникаЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			СтрокаУчастника.ДействиеУчастника,
			"СостояниеУчастникаЗадачи");
		Если ЗначениеЗаполнено(СостояниеУчастникаЗадачи) Тогда
			Продолжить;
		КонецЕсли;
		
		ЕстьНовыеИсполнители = Истина;
		
		Прервать;
		
	КонецЦикла;
	
	Возврат ЕстьНовыеИсполнители;
	
КонецФункции

// Возвращает метку начала в обзоре задаче.
// 
// Возвращаемое значение:
//  Строка - Метка начала в обзоре задаче.
//
Функция МеткаНачала()
	
	Возврат "%Начало6f48e270-939a-4d84-9a02-d914cbc42beb%";
	
КонецФункции

// Возвращает метку конца в обзоре задаче.
// 
// Возвращаемое значение:
//  Строка - Метка конца в обзоре задаче.
//
Функция МеткаКонца()
	
	Возврат "%Конец6f48e270-939a-4d84-9a02-d914cbc42beb%";
	
КонецФункции

// Находит строку участника указанного вида.
//
// Параметры:
//  ВидУчастника - СправочникСсылка.ВидыУчастниковЗадач - Вид участника.
// 
// Возвращаемое значение:
//  ДокументТабличнаяЧастьСтрока.Задача.Участники, Неопределено - Найденная строка участника.
//
Функция НайтиСтрокуУчастника(ВидУчастника)
	
	Возврат Участники.Найти(ВидУчастника, "ВидУчастника");
	
КонецФункции

// Формирует пустую структуру описывающую изменения участников.
// 
// Возвращаемое значение:
//  Структура - Пустая структура описания изменения участников.
//   * Добавленные - Массив из ОпределяемыйТип.УчастникЗадач - Добавленные участники.
//   * Удаленные - Массив из ОпределяемыйТип.УчастникЗадач- Удаленные участники.
//
Функция НовыйИзмененияУчастников()
	
	ИзмененияУчастников = Новый Структура("Добавленные, Удаленные");
	ИзмененияУчастников.Добавленные = Новый Массив;
	ИзмененияУчастников.Удаленные = Новый Массив;
	
	Возврат ИзмененияУчастников;
	
КонецФункции

// Обновляет данные предметов - тип и вид приложений.
//
Процедура ОбновитьДанныеПриложений()
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивПриложений = Приложения.ВыгрузитьКолонку("Приложение");
	ПриложенияФайлы = Новый Массив;
	Для Каждого Приложение Из МассивПриложений Цикл
		
		Если ТипЗнч(Приложение) <> Тип("СправочникСсылка.Файлы") Тогда
			Продолжить;
		КонецЕсли;
		
		ПриложенияФайлы.Добавить(Приложение);
		
	КонецЦикла;
	
	Если ПриложенияФайлы.Количество() > 0 Тогда
		
		ВладельцыФайлов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ПриложенияФайлы, "ВладелецФайла");
		Для Каждого КлючИЗначение Из ВладельцыФайлов Цикл
			
			ПриложениеФайл = КлючИЗначение.Ключ;
			ВладелецФайла = КлючИЗначение.Значение;
			
			Если ВладелецФайла <> Ссылка Тогда
				Продолжить;
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(
				МассивПриложений,
				ПриложениеФайл);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ВидПриложения = РаботаСЗадачами.ВидПриложения(МассивПриложений);
	ТипПриложения = Перечисления.ТипыПриложенийЗадач.ТипПриложения(МассивПриложений);
	
	Если ТипПриложения = Перечисления.ТипыПриложенийЗадач.ПроектныеЗадачи
		Или ТипПриложения = Перечисления.ТипыПриложенийЗадач.ПротоколыМероприятий Тогда
		// Только мероприятия и проекты группируем по виду, ппротоколы и проектные задачи нет.
		ВидПриложения = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Обновляет рабочие группы приложений.
//
Процедура РасширитьРабочиеГруппыПриложений()
	
	ДанныеВидаЗадачи = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(ВидЗадачи);
	
	ПредыдущиеЗначенияРеквизитов = ДополнительныеСвойства.ПредыдущиеЗначенияРеквизитов;
	
	Если ПометкаУдаления
		Или СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиЧерновик
		Или Не (ПредыдущиеЗначенияРеквизитов.СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиЧерновик
			Или ОбщегоНазначенияДокументооборот.ИзменилосьЗначениеРеквизитов(
				ЭтотОбъект,
				"Автор, Участники, Приложения")) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Права ставим в том числе на все приложения к отчетам об исполнении.
	ВсеДействияЗадачи = Новый Массив;
	Для Каждого СтрокаУчастника Из Участники Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаУчастника.ДействиеУчастника) Тогда
			Продолжить;
		КонецЕсли;
		
		ВсеДействияЗадачи.Добавить(СтрокаУчастника.ДействиеУчастника);
		
	КонецЦикла;
	
	РеквизитыДействийЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		ВсеДействияЗадачи,
		"Исполнитель, Приложения");
	
	ПриложенияДействийЗадачи = Новый Массив;
	Для Каждого ДействиеЗадачи Из ВсеДействияЗадачи Цикл
		
		РеквизитыДействияЗадачи = РеквизитыДействийЗадачи[ДействиеЗадачи];
		Если РеквизитыДействияЗадачи = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПриложенияДействияЗадачи =
			РеквизитыДействияЗадачи.Приложения.Выгрузить().ВыгрузитьКолонку("Приложение");
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			ПриложенияДействийЗадачи,
			ПриложенияДействияЗадачи);
		
	КонецЦикла;
	
	// На новые приложения предоставим права всем участникам.
	СтарыеПриложения = Новый Массив;
	Если Не ЗначениеЗаполнено(Источник) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			СтарыеПриложения,
			ПредыдущиеЗначенияРеквизитов.Приложения.ВыгрузитьКолонку("Приложение"));
	КонецЕсли;
	
	КоличествоЭлементов = СтарыеПриложения.Количество();
	Для Индекс = 1 По КоличествоЭлементов Цикл
		
		ОбратныйИндекс = КоличествоЭлементов - Индекс;
		ЭлементМассива = СтарыеПриложения[ОбратныйИндекс];
		Если Не РаботаСЗадачамиКлиентСервер.ЭтоПриложениеБезПрав(ЭлементМассива) Тогда
			Продолжить;
		КонецЕсли;
		
		СтарыеПриложения.Удалить(ОбратныйИндекс);
		
	КонецЦикла;
	
	РаботаСЗадачами.ИсключитьФайлыЗадач(СтарыеПриложения);
	
	ПриложенияЗадачи = Приложения.ВыгрузитьКолонку("Приложение");
	
	НовыеПриложения = Новый Массив;
	Если Не ЗначениеЗаполнено(Источник) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			НовыеПриложения,
			ПриложенияЗадачи);
	КонецЕсли;
	
	КоличествоЭлементов = НовыеПриложения.Количество();
	Для Индекс = 1 По КоличествоЭлементов Цикл
		
		ОбратныйИндекс = КоличествоЭлементов - Индекс;
		ЭлементМассива = НовыеПриложения[ОбратныйИндекс];
		Если Не РаботаСЗадачамиКлиентСервер.ЭтоПриложениеБезПрав(ЭлементМассива) Тогда
			Продолжить;
		КонецЕсли;
		
		НовыеПриложения.Удалить(ОбратныйИндекс);
		
	КонецЦикла;
	
	РаботаСЗадачами.ИсключитьФайлыЗадач(НовыеПриложения);
	
	ДобавленныеПриложения = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
		НовыеПриложения,
		СтарыеПриложения);
	
	ВсеПриложения = Новый Массив;
	Если Не ЗначениеЗаполнено(Источник) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			ВсеПриложения,
			ПриложенияЗадачи);
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ВсеПриложения,
		ПриложенияДействийЗадачи);
	
	КоличествоЭлементов = ВсеПриложения.Количество();
	Для Индекс = 1 По КоличествоЭлементов Цикл
		
		ОбратныйИндекс = КоличествоЭлементов - Индекс;
		ЭлементМассива = ВсеПриложения[ОбратныйИндекс];
		Если Не РаботаСЗадачамиКлиентСервер.ЭтоПриложениеБезПрав(ЭлементМассива) Тогда
			Продолжить;
		КонецЕсли;
		
		ВсеПриложения.Удалить(ОбратныйИндекс);
		
	КонецЦикла;
	
	РаботаСЗадачами.ИсключитьФайлыЗадач(ВсеПриложения);
	
	// Права предоставим в том числе всем участникам, кому задача перенаправлена.
	ИсполнителиДействий = Новый Массив;
	Для Каждого ДействиеЗадачи Из ВсеДействияЗадачи Цикл
		
		РеквизитыДействияЗадачи = РеквизитыДействийЗадачи[ДействиеЗадачи];
		Если РеквизитыДействияЗадачи = Неопределено
			Или Не ЗначениеЗаполнено(РеквизитыДействияЗадачи.Исполнитель)
			Или ИсполнителиДействий.Найти(РеквизитыДействияЗадачи.Исполнитель) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИсполнителиДействий.Добавить(РеквизитыДействияЗадачи.Исполнитель);
		
	КонецЦикла;
	
	// Новым участникам предоставим права на все приложения.
	СтарыеУчастникиРГ = Новый Массив;
	Если ПредыдущиеЗначенияРеквизитов.СостояниеЗадачи <> ДанныеВидаЗадачи.СостояниеЗадачиЧерновик Тогда
		СтарыеУчастникиРГ.Добавить(ПредыдущиеЗначенияРеквизитов.Автор);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			СтарыеУчастникиРГ,
			ПредыдущиеЗначенияРеквизитов.Участники.ВыгрузитьКолонку("Участник"),
			Истина);
	КонецЕсли;
	
	НовыеУчастникиРГ = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Автор);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		НовыеУчастникиРГ,
		Участники.ВыгрузитьКолонку("Участник"),
		Истина);
	
	ДобавленныеУчастникиРГ = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
		НовыеУчастникиРГ,
		СтарыеУчастникиРГ);
	
	ВсеУчастникиРГ = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Автор);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ВсеУчастникиРГ,
		Участники.ВыгрузитьКолонку("Участник"),
		Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ВсеУчастникиРГ,
		ИсполнителиДействий);
	
	ОбщегоНазначенияДокументооборотКлиентСервер.УдалитьПустыеЗначения(ДобавленныеПриложения);
	ОбщегоНазначенияДокументооборотКлиентСервер.УдалитьПустыеЗначения(ВсеУчастникиРГ);
	ОбщегоНазначенияДокументооборотКлиентСервер.УдалитьПустыеЗначения(ВсеПриложения);
	ОбщегоНазначенияДокументооборотКлиентСервер.УдалитьПустыеЗначения(ДобавленныеУчастникиРГ);
	
	ДобавленныеПриложенияСПравомИзменения = Новый Массив;
	ДобавленныеПриложенияБезПраваИзменения = Новый Массив;
	
	// Проверяем корневую задачу - предоставляет ли возможность наследовать право изменения.
	КорневаяЗадача = РаботаСЗадачами.КорневаяЗадача(Ссылка);
	Если ЗначениеЗаполнено(КорневаяЗадача) Тогда
		ИсточникКорневойЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КорневаяЗадача, "Источник");
	Иначе
		ИсточникКорневойЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Источник");
	КонецЕсли;
	
	РазрешитьУчастникамИзменятьПредмет = Неопределено;
	Если ЗначениеЗаполнено(ИсточникКорневойЗадачи) Тогда
		
		ДействиеПоПроцессу = РаботаСПроцессамиПоДействиям.ДействиеПоПроцессу(ИсточникКорневойЗадачи);
		Если ЗначениеЗаполнено(ДействиеПоПроцессу) Тогда
			
			ВидДействияОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДействиеПоПроцессу, "ВидДействия");
			РазрешитьУчастникамИзменятьПредмет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				ВидДействияОбработки,
				"РазрешитьУчастникамИзменятьПредмет");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого ДобавленноеПриложение Из ДобавленныеПриложения Цикл
		
		// Проверяем права автора задачи - предоставляет ли возможность.
		Если РазрешитьУчастникамИзменятьПредмет <> Неопределено 
			И ПриложенияЗадачи.Найти(ДобавленноеПриложение) <> Неопределено Тогда
			
			Если РазрешитьУчастникамИзменятьПредмет Тогда
				
				ДобавленныеПриложенияСПравомИзменения.Добавить(ДобавленноеПриложение);
				
			Иначе
				
				ДобавленныеПриложенияБезПраваИзменения.Добавить(ДобавленноеПриложение);
				
			КонецЕсли;
			
		ИначеЕсли РазрешитьУчастникамИзменятьПредмет = Неопределено 
			И ПриложенияЗадачи.Найти(ДобавленноеПриложение) <> Неопределено Тогда
			
			Если ТипЗнч(Автор) = Тип("СправочникСсылка.Сотрудники") Тогда
				
				ПраваСотрудникаПоОбъекту = ДокументооборотПраваДоступа.ПраваСотрудникаПоОбъекту(
					ДобавленноеПриложение,
					Автор);
				Если ПраваСотрудникаПоОбъекту.Изменение Тогда
					
					ДобавленныеПриложенияСПравомИзменения.Добавить(ДобавленноеПриложение);
					
				Иначе
					
					ДобавленныеПриложенияБезПраваИзменения.Добавить(ДобавленноеПриложение);
					
				КонецЕсли;
				
			Иначе
				
				ДобавленныеПриложенияСПравомИзменения.Добавить(ДобавленноеПриложение);
				
			КонецЕсли;
			
		ИначеЕсли ПриложенияЗадачи.Найти(ДобавленноеПриложение) = Неопределено Тогда
			
			ДобавленныеПриложенияБезПраваИзменения.Добавить(ДобавленноеПриложение);
			
		Иначе
			
			ВызватьИсключение НСтр("ru = 'Неожиданное состояние приложения.'");
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДобавленныеПриложенияСПравомИзменения.Количество() > 0 Тогда
		
		РаботаСРабочимиГруппами.РасширитьРабочуюГруппуПредметов(
			ДобавленныеПриложенияСПравомИзменения,
			ВсеУчастникиРГ,
			Истина,
			Ссылка);
		
		РаботаСЗадачами.ПроверитьПраваНаПриложения(
			ДобавленныеПриложенияСПравомИзменения,
			ВсеУчастникиРГ);
		
	КонецЕсли;
	
	Если ДобавленныеПриложенияБезПраваИзменения.Количество() > 0 Тогда
		
		РаботаСРабочимиГруппами.РасширитьРабочуюГруппуПредметов(
			ДобавленныеПриложенияБезПраваИзменения,
			ВсеУчастникиРГ,
			Ложь,
			Ссылка);
		
		РаботаСЗадачами.ПроверитьПраваНаПриложения(
			ДобавленныеПриложенияБезПраваИзменения,
			ВсеУчастникиРГ);
		
	КонецЕсли;
	
	Если ДобавленныеУчастникиРГ.Количество() > 0 Тогда
		
		ВсеПриложенияСПравомИзменения = Новый Массив;
		ВсеПриложенияБезПраваИзменения = Новый Массив;
		Для Каждого ОчередноеПриложение Из ВсеПриложения Цикл
			
			// Проверяем права автора задачи - предоставляет ли возможность.
			Если РазрешитьУчастникамИзменятьПредмет <> Неопределено 
				И ПриложенияЗадачи.Найти(ОчередноеПриложение) <> Неопределено Тогда
				
				Если РазрешитьУчастникамИзменятьПредмет Тогда
					
					ВсеПриложенияСПравомИзменения.Добавить(ОчередноеПриложение);
					
				Иначе
					
					ВсеПриложенияБезПраваИзменения.Добавить(ОчередноеПриложение);
					
				КонецЕсли;
				
			ИначеЕсли РазрешитьУчастникамИзменятьПредмет = Неопределено 
				И ПриложенияЗадачи.Найти(ОчередноеПриложение) <> Неопределено Тогда
				
				Если ТипЗнч(Автор) = Тип("СправочникСсылка.Сотрудники") Тогда
					
					ПраваСотрудникаПоОбъекту = ДокументооборотПраваДоступа.ПраваСотрудникаПоОбъекту(
						ОчередноеПриложение,
						Автор);
					Если ПраваСотрудникаПоОбъекту.Изменение Тогда
						
						ВсеПриложенияСПравомИзменения.Добавить(ОчередноеПриложение);
						
					Иначе
						
						ВсеПриложенияБезПраваИзменения.Добавить(ОчередноеПриложение);
						
					КонецЕсли;
					
				Иначе
					
					ВсеПриложенияСПравомИзменения.Добавить(ОчередноеПриложение);
					
				КонецЕсли;
				
			ИначеЕсли ПриложенияЗадачи.Найти(ОчередноеПриложение) = Неопределено Тогда
				
				ВсеПриложенияБезПраваИзменения.Добавить(ОчередноеПриложение);
				
			Иначе
				
				ВызватьИсключение НСтр("ru = 'Неожиданное состояние приложения.'");
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ВсеПриложенияСПравомИзменения.Количество() > 0 Тогда
			
			НеобработанныеПриложенияСПравомИзменения = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
				ВсеПриложенияСПравомИзменения,
				ДобавленныеПриложенияСПравомИзменения);
			РаботаСРабочимиГруппами.РасширитьРабочуюГруппуПредметов(
				НеобработанныеПриложенияСПравомИзменения,
				ДобавленныеУчастникиРГ,
				Истина, 
				Ссылка);
			
			РаботаСЗадачами.ПроверитьПраваНаПриложения(
				НеобработанныеПриложенияСПравомИзменения,
				ДобавленныеУчастникиРГ);
			
		КонецЕсли;
		
		Если ВсеПриложенияБезПраваИзменения.Количество() > 0 Тогда
			
			НеобработанныеПриложенияБезПраваИзменения = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
				ВсеПриложенияБезПраваИзменения,
				ДобавленныеПриложенияБезПраваИзменения);
			РаботаСРабочимиГруппами.РасширитьРабочуюГруппуПредметов(
				НеобработанныеПриложенияБезПраваИзменения,
				ДобавленныеУчастникиРГ,
				Ложь, 
				Ссылка);
			
			РаботаСЗадачами.ПроверитьПраваНаПриложения(
				НеобработанныеПриложенияБезПраваИзменения,
				ДобавленныеУчастникиРГ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает детекторы бизнес-событий при записи.
//
Процедура ОбработатьДетекторыБизнесСобытий()
	
	КонтекстИзмененияРеквизитов = ДополнительныеСвойства.КонтекстИзмененияРеквизитов;
	ЗарегистрированныеБизнесСобытия = КонтекстИзмененияРеквизитов.ПроизошедшиеБизнесСобытия;
	
	СтароеСостояние = ДополнительныеСвойства.ПредыдущиеЗначенияРеквизитов.СостояниеЗадачи;
	НовоеСостояние = СостояниеЗадачи;
	
	ВидСтарогоСостояния = РаботаСЗадачамиПовтИсп.ВидСостоянияЗадач(СтароеСостояние);
	ВидНовогоСостояния = РаботаСЗадачамиПовтИсп.ВидСостоянияЗадач(НовоеСостояние);
	
	ОбнаруженаОтменаЗадачи =
		Не Перечисления.ВидыСостоянийЗадач.ЭтоОтмененнаяЗадача(ВидСтарогоСостояния)
		И Перечисления.ВидыСостоянийЗадач.ЭтоОтмененнаяЗадача(ВидНовогоСостояния);
	Если ОбнаруженаОтменаЗадачи Тогда
		БизнесСобытияВызовСервера.ЗарегистрироватьСобытие(
			Ссылка,
			Справочники.ВидыБизнесСобытий.ОтменаЗадачи);
		ЗарегистрированныеБизнесСобытия.Добавить(Справочники.ВидыБизнесСобытий.ОтменаЗадачи);
	КонецЕсли;
	
	ОбнаруженоОткладываниеЗадачи =
		Не Перечисления.ВидыСостоянийЗадач.ЭтоОтложеннаяЗадача(ВидСтарогоСостояния)
		И Перечисления.ВидыСостоянийЗадач.ЭтоОтложеннаяЗадача(ВидНовогоСостояния);
	Если ОбнаруженоОткладываниеЗадачи Тогда
		БизнесСобытияВызовСервера.ЗарегистрироватьСобытие(
			Ссылка,
			Справочники.ВидыБизнесСобытий.ОткладываниеЗадачи);
		ЗарегистрированныеБизнесСобытия.Добавить(Справочники.ВидыБизнесСобытий.ОткладываниеЗадачи);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает описание задачи в формате форматированного документа.
//
// Параметры:
//   ТекущееДействиеЗадачи - ДокументСсылка.ДействиеЗадачи, Неопределено - текущее действие задачи.
//                         - СтрокаТаблицыЗначений - см. ОбработкаЗапросовXDTOБизнесПроцессыИЗадачи.ЗапросСОтборами
//   ОтображатьИсториюВыполнения - Булево.
//   ВключатьНавигационныеСсылки - Булево.
//   КлючНазначения - Строка - Ключ назначения "ОписаниеПростойТекст" или "ОписаниеHTML".
//   КешДанных - Структура - кеш данных, который требуется для ускорения работы различных механизмов.
//
// Возвращаемое значение:
//   ФорматированныйДокумент - Описание в формате форматированного документа.
//
Функция ОписаниеФорматированныйДокумент(ТекущееДействиеЗадачи, ОтображатьИсториюВыполнения, ВключатьНавигационныеСсылки,
		КлючНазначения, КешДанных = Неопределено, КодЯзыка = Неопределено)
	
	//@skip-check new-font
	// Ошибка платформы - теряется жирность если использовать шрифт стиля ШрифтОписанияЗадачи
	ОбычныйШрифт = Новый Шрифт("Arial", 10);
	//@skip-check new-font
	// Ошибка платформы - теряется жирность если использовать шрифт стиля ШрифтЗаголовкаЗадачи
	ЖирныйШрифт = Новый Шрифт("Arial", 10, Истина);
	
	ВидСостоянияЗадачи = РаботаСЗадачамиПовтИсп.ВидСостоянияЗадач(СостояниеЗадачи);
	ЭтоВыполненнаяЗадача = Перечисления.ВидыСостоянийЗадач.ЭтоВыполненнаяЗадача(ВидСостоянияЗадачи);
	
	ОписаниеПоступившихОбновленийЗадачи = "";
	ЗаголовокДействия = "";
	ИсточникДействия = Неопределено;
	Исполнитель = Неопределено;
	ЕстьЗамещающие = Ложь;
	ВидЭтогоУчастника = Неопределено;
	ЭтоИсполнитель = Ложь;
	ЭтоОтветственный = Ложь;
	ОсобоеОписаниеФорматированное = Неопределено;
	ОтображаемыйСрок = Срок;
	ФактическийИсполнитель = Справочники.ФактическиеИсполнители.ПустаяСсылка();
	ВидДействия = Справочники.ВидыДействийЗадач.ПустаяСсылка();
	РезультатДействияТекстом = "";
	ФлагОтображаемый = Флаг;
	Если ЗначениеЗаполнено(ТекущееДействиеЗадачи) Тогда
		
		КэшОбластиПросмотра = КэшиНаВремяВызоваПовтИсп.КэшЗадачаОбластьПросмотра();
		
		Если КэшОбластиПросмотра.Заполнен И КэшОбластиПросмотра.ДействиеЗадачи = ТекущееДействиеЗадачи Тогда
			РеквизитыДействия = КэшОбластиПросмотра.РеквизитыДействияЗадачи;
		ИначеЕсли ТипЗнч(ТекущееДействиеЗадачи) = Тип("СтрокаТаблицыЗначений") Тогда
			РеквизитыДействия = ТекущееДействиеЗадачи;
		Иначе
			РеквизитыДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				ТекущееДействиеЗадачи,
				"ВидДействия, ВидУчастника, ЕстьОсобыйСрок, ОсобыйЗаголовок, ОсобоеОписание, ОсобоеОписаниеФорматированное,
				|ОсобыйСрок, Источник, Исполнитель, ФактическийИсполнитель, СостояниеУчастникаЗадачи, РезультатДействияТекстом,
				|Флаг");
		КонецЕсли;
		
		ВидСостоянияУчастниковЗадач = РаботаСЗадачамиПовтИсп.ВидСостоянияУчастниковЗадач(
			РеквизитыДействия.СостояниеУчастникаЗадачи);
		ОжидаетВыполнения = Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоОжидаемоеДействие(ВидСостоянияУчастниковЗадач);
		
		ЗаголовокДействия = Документы.ДействиеЗадачи.ЗаголовокДействияЗадачи(
			РеквизитыДействия.ВидДействия,
			РеквизитыДействия.ОсобыйЗаголовок,
			Строка(Ссылка));
		Исполнитель = РеквизитыДействия.Исполнитель;
		ИсточникДействия = РеквизитыДействия.Источник;
		ФактическийИсполнитель = РеквизитыДействия.ФактическийИсполнитель;
		Если ЗначениеЗаполнено(СокрЛП(РеквизитыДействия.ОсобоеОписание)) Тогда
			ОсобоеОписаниеФорматированное = РеквизитыДействия.ОсобоеОписаниеФорматированное.Получить();
		КонецЕсли;
		
		ОтображаемыйСрок = Документы.ДействиеЗадачи.Срок(
			РеквизитыДействия.ЕстьОсобыйСрок,
			РеквизитыДействия.ОсобыйСрок,
			Срок);
		
		Если ТипЗнч(ТекущееДействиеЗадачи) = Тип("СтрокаТаблицыЗначений") Тогда
			ЕстьЗамещающие = ТекущееДействиеЗадачи.ЕстьЗамещающие;
		Иначе
			ДанныеДействияЗадачи = РаботаСЗадачами.ДанныеДействияЗадачи(ТекущееДействиеЗадачи);
			Если ДанныеДействияЗадачи = Неопределено Тогда
				ЕстьЗамещающие = Ложь;
			Иначе
				ЕстьЗамещающие = ДанныеДействияЗадачи.ЕстьЗамещающие;
			КонецЕсли;
		КонецЕсли;
		
		ВидЭтогоУчастника = РеквизитыДействия.ВидУчастника;
		ЭтоИсполнитель = РаботаСЗадачамиПовтИсп.ЭтоИсполнитель(РеквизитыДействия.ВидУчастника);
		ЭтоОтветственный = РаботаСЗадачамиПовтИсп.ЭтоОтветственный(РеквизитыДействия.ВидУчастника);
		
		Если ТипЗнч(ТекущееДействиеЗадачи) = Тип("СтрокаТаблицыЗначений") Тогда
			ОписаниеПоступившихОбновленийЗадачи = ТекущееДействиеЗадачи.ОписаниеПоступившихОбновлений;
		Иначе
			ОписаниеПоступившихОбновленийЗадачи =
				РаботаСЗадачами.ОписаниеПоступившихОбновленийЗадачи(ТекущееДействиеЗадачи);
		КонецЕсли;
		
		ВидДействия = РеквизитыДействия.ВидДействия;
		РезультатДействияТекстом = РеквизитыДействия.РезультатДействияТекстом;
		ФлагОтображаемый = РеквизитыДействия.Флаг;
		
	КонецЕсли;
	
	Если ОжидаетВыполнения = Неопределено Тогда
		ВидСостоянияЗадачи = РаботаСЗадачамиПовтИсп.ВидСостоянияЗадач(СостояниеЗадачи);
		ОжидаетВыполнения = Перечисления.ВидыСостоянийЗадач.ЭтоОжидающаяВыполненияЗадача(ВидСостоянияЗадачи);
	КонецЕсли;
	
	// Описание.
	ФорматированныйДокумент = Неопределено;
	Если ОсобоеОписаниеФорматированное <> Неопределено Тогда
		ФорматированныйДокумент = ОсобоеОписаниеФорматированное;
	КонецЕсли;
	Если ФорматированныйДокумент = Неопределено Тогда
		ФорматированныйДокумент = ОписаниеФорматированное.Получить();
	КонецЕсли;
	Если ТипЗнч(ФорматированныйДокумент) <> Тип("ФорматированныйДокумент") Тогда
		ФорматированныйДокумент = Новый ФорматированныйДокумент;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ФорматированныйДокумент.ПолучитьТекст()) Тогда
		// Нормализуем параграфы документа (для случай если используется параграф список или нумерованный).
		ТекстHTML = "";
		Вложения = Новый Структура;
		ФорматированныйДокумент.ПолучитьHTML(ТекстHTML, Вложения);
		
		ТекстЗаголовка = ?(ЗначениеЗаполнено(ЗаголовокДействия), ЗаголовокДействия, Заголовок);
		Если Не ЗначениеЗаполнено(ТекстЗаголовка) Тогда
			ТекстЗаголовка = " ";
		КонецЕсли;

		ТекстHTML = СтрЗаменить(ТекстHTML, "<body>", "<body><p></p>");
		ТекстHTML = СтрЗаменить(ТекстHTML, "</body>", "<p></p></body>");
		
		ФорматированныйДокумент.УстановитьHTML(ТекстHTML, Вложения);	
	Иначе
		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
			ФорматированныйДокумент.ПолучитьЗакладкуКонца(),
			Неопределено,
			Тип("ПереводСтрокиФорматированногоДокумента"));
	КонецЕсли;
	
	// Заголовок
	ЗакладкаНачала = ФорматированныйДокумент.ПолучитьЗакладкуНачала();
	
	ТекстЗаголовка = ?(ЗначениеЗаполнено(ЗаголовокДействия), ЗаголовокДействия, Заголовок);
	Если Не ЗначениеЗаполнено(ТекстЗаголовка) Тогда
		ТекстЗаголовка = " ";
	КонецЕсли;
	ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
		ЗакладкаНачала,
		ТекстЗаголовка,
		Тип("ТекстФорматированногоДокумента"));
	//@skip-check new-font
	// Ошибка платформы - теряется жирность если использовать шрифт стиля ШрифтЗаголовкаЗадачи
	ТекущийЭлементДокумента.Шрифт = Новый Шрифт("Arial", 10, Истина);
	
	КартинкаПриоритета = Справочники.ПриоритетыЗадач.КартинкаПриоритета(Приоритет);
	Если КартинкаПриоритета.Вид <> ВидКартинки.Пустая Тогда
		КартинкаПриоритета = Новый Картинка(КартинкаПриоритета.ПолучитьДвоичныеДанные());
		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
			ТекущийЭлементДокумента.ЗакладкаКонца,
			КартинкаПриоритета,
			Тип("КартинкаФорматированногоДокумента"));
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФлагОтображаемый) Тогда
		КартинкаФлага = Перечисления.ФлагиОбъектов.КартинкаФлага(ФлагОтображаемый);
		Если КартинкаФлага.Вид <> ВидКартинки.Пустая Тогда
			КартинкаФлага = Новый Картинка(КартинкаФлага.ПолучитьДвоичныеДанные());
			ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
				ТекущийЭлементДокумента.ЗакладкаКонца,
				КартинкаФлага,
				Тип("КартинкаФорматированногоДокумента"));
		КонецЕсли;
	КонецЕсли;
	
	// Поступили обновления.
	Если ЗначениеЗаполнено(ОписаниеПоступившихОбновленийЗадачи) Тогда
		
		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
			ТекущийЭлементДокумента.ЗакладкаКонца,
			Неопределено,
			Тип("ПереводСтрокиФорматированногоДокумента"));
		
		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
			ТекущийЭлементДокумента.ЗакладкаКонца,
			ОписаниеПоступившихОбновленийЗадачи,
			Тип("ТекстФорматированногоДокумента"));
		ТекущийЭлементДокумента.Шрифт = ОбычныйШрифт;
		ТекущийЭлементДокумента.ЦветТекста = ЦветаСтиля.ИнформационнаяНадпись;
		
	КонецЕсли;
	
	// Результат обработки результата.
	ЗакладкаКонца = ФорматированныйДокумент.ПолучитьЗакладкуКонца();
	ТекущийЭлементДокумента = Новый Структура("ЗакладкаКонца", ЗакладкаКонца);
	
	Если ЭтоИсполнитель Тогда
		
		РезультатОбработкиРезультата = РаботаСЗадачами.РезультатОбработкиРезультата(
			ТекущееДействиеЗадачи,
			КешДанных,
			КодЯзыка);
		Если РезультатОбработкиРезультата.ЕстьРезультат Тогда
			
			Если ЗначениеЗаполнено(РезультатОбработкиРезультата.РезультатТекстом) Тогда
				
				ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
					ТекущийЭлементДокумента.ЗакладкаКонца,
					Неопределено,
					Тип("ПереводСтрокиФорматированногоДокумента"));
				
				ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
					ТекущийЭлементДокумента.ЗакладкаКонца,
					СтрШаблон("%1: ", РезультатОбработкиРезультата.Заголовок),
					Тип("ТекстФорматированногоДокумента"));
				ТекущийЭлементДокумента.Шрифт = ЖирныйШрифт;
				
				ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
					ТекущийЭлементДокумента.ЗакладкаКонца,
					РезультатОбработкиРезультата.РезультатТекстом,
					Тип("ТекстФорматированногоДокумента"));
				ТекущийЭлементДокумента.Шрифт = ОбычныйШрифт;
				
			КонецЕсли;
			
			Для Каждого Приложение Из РезультатОбработкиРезультата.Приложения Цикл
				
				ПредставлениеПриложения = "";
				НавигационнаяСсылкаПриложения = "";
				
				Если ТипЗнч(Приложение) = Тип("СправочникСсылка.Файлы") Тогда
					
					РеквизитыФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
						Приложение,
						"ПолноеНаименование, ТекущаяВерсияРасширение");
					
					ПредставлениеПриложения = РеквизитыФайла.ПолноеНаименование;
					Если ЗначениеЗаполнено(РеквизитыФайла.ТекущаяВерсияРасширение) Тогда
						ПредставлениеПриложения = СтрШаблон(
							"%1.%2",
							ПредставлениеПриложения,
							РеквизитыФайла.ТекущаяВерсияРасширение);
					КонецЕсли;
					
					НавигационнаяСсылкаПриложения = СтрШаблон(
						"v8doc:tasks/ShowFile/%1",
						ПолучитьНавигационнуюСсылку(Приложение));
					
				Иначе
					
					ПредставлениеПриложения = Строка(Приложение);
					НавигационнаяСсылкаПриложения = СтрШаблон(
						"v8doc:%1",
						ПолучитьНавигационнуюСсылку(Приложение));
					
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(ПредставлениеПриложения) Тогда
					ПредставлениеПриложения = НСтр("ru = 'Приложение'", КодЯзыка);
				КонецЕсли;
				
				ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
					ТекущийЭлементДокумента.ЗакладкаКонца,
					Неопределено,
					Тип("ПереводСтрокиФорматированногоДокумента"));
				
				КартинкаСкрепка = Новый Картинка(
					БиблиотекаКартинок.Скрепка.ПолучитьДвоичныеДанные());
				ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
					ТекущийЭлементДокумента.ЗакладкаКонца,
					КартинкаСкрепка,
					Тип("КартинкаФорматированногоДокумента"));
				Если ВключатьНавигационныеСсылки  Тогда
					ТекущийЭлементДокумента.НавигационнаяСсылка = НавигационнаяСсылкаПриложения;
				КонецЕсли;
				
				ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
					ТекущийЭлементДокумента.ЗакладкаКонца,
					ПредставлениеПриложения,
					Тип("ТекстФорматированногоДокумента"));
				Если ВключатьНавигационныеСсылки Тогда
					ТекущийЭлементДокумента.НавигационнаяСсылка = НавигационнаяСсылкаПриложения;
				КонецЕсли;
				
			КонецЦикла; 
			
			ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
				ТекущийЭлементДокумента.ЗакладкаКонца,
				Неопределено,
				Тип("ПереводСтрокиФорматированногоДокумента"));
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Основные реквизиты.
	ЕстьРеквизитВышестоящаяЗадача = ЗначениеЗаполнено(ВышестоящаяЗадача) Или ЗначениеЗаполнено(ВышестоящееДействие);
	ЕстьРеквизитНачалоПлан = ЗначениеЗаполнено(ДатаНачалаПлан);
	ЕстьРеквизитСрок = ЗначениеЗаполнено(ОтображаемыйСрок);
	ЕстьРеквизитАвтор = ЗначениеЗаполнено(Автор);
	ЕстьРеквизитИсполнитель = ЗначениеЗаполнено(Исполнитель);
	ЕстьРеквизитОтменил = ЗначениеЗаполнено(КтоОтменил);
	
	ЕстьОсновныеРеквизиты = ЕстьРеквизитВышестоящаяЗадача
		Или ЕстьРеквизитНачалоПлан
		Или ЕстьРеквизитСрок
		Или ЕстьРеквизитАвтор
		Или ЕстьРеквизитИсполнитель
		Или ЕстьРеквизитОтменил;
	
	Если ЕстьОсновныеРеквизиты Тогда
		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
			ТекущийЭлементДокумента.ЗакладкаКонца,
			Неопределено,
			Тип("ПереводСтрокиФорматированногоДокумента"));
	КонецЕсли;
	
	// Отменил.
	Если ЕстьРеквизитОтменил Тогда
		
		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
			ТекущийЭлементДокумента.ЗакладкаКонца,
			СтрШаблон("%1 %2 ",
				Формат(ДатаОтмены, Метаданные.Документы.Задача.Реквизиты.ДатаОтмены.Формат),
				НСтр("ru = 'отменил'", КодЯзыка)),
			Тип("ТекстФорматированногоДокумента"));
		ТекущийЭлементДокумента.Шрифт = ОбычныйШрифт;
		
		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
			ТекущийЭлементДокумента.ЗакладкаКонца,
			КтоОтменил,
			Тип("ТекстФорматированногоДокумента"));
		ТекущийЭлементДокумента.Шрифт = ОбычныйШрифт;
		Если ВключатьНавигационныеСсылки Тогда
			ТекущийЭлементДокумента.НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(КтоОтменил);
		КонецЕсли;
		
		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
			ТекущийЭлементДокумента.ЗакладкаКонца,
			Неопределено,
			Тип("ПереводСтрокиФорматированногоДокумента"));
		
	КонецЕсли;
	
	// Вышестоящая задача.
	Если ЕстьРеквизитВышестоящаяЗадача Тогда
		
		ВышестоящаяЗадачаИлиДействие = ВышестоящаяЗадачаИлиДействие();
		
		ВидимостьВышестоящейЗадачи = ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(ВышестоящаяЗадачаИлиДействие).Чтение;
		
		Если ВидимостьВышестоящейЗадачи Тогда
			
			ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
				ТекущийЭлементДокумента.ЗакладкаКонца,
				СтрШаблон("%1: ", НСтр("ru = 'Вышестоящая задача'", КодЯзыка)),
				Тип("ТекстФорматированногоДокумента"));
			ТекущийЭлементДокумента.Шрифт = ЖирныйШрифт;
			
			ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
				ТекущийЭлементДокумента.ЗакладкаКонца,
				ВышестоящаяЗадачаИлиДействие,
				Тип("ТекстФорматированногоДокумента"));
			ТекущийЭлементДокумента.Шрифт = ОбычныйШрифт;
			Если ВключатьНавигационныеСсылки Тогда
				ТекущийЭлементДокумента.НавигационнаяСсылка =
					СтрШаблон(
						"v8doc:tasks/ShowTaskAction/%1",
						ПолучитьНавигационнуюСсылку(ВышестоящаяЗадачаИлиДействие));
			КонецЕсли;
			
			ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
				ТекущийЭлементДокумента.ЗакладкаКонца,
				Неопределено,
				Тип("ПереводСтрокиФорматированногоДокумента"));
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Кому.
	Если ЕстьРеквизитИсполнитель Тогда
		
		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
			ТекущийЭлементДокумента.ЗакладкаКонца,
			СтрШаблон("%1: ", НСтр("ru = 'Кому'", КодЯзыка)),
			Тип("ТекстФорматированногоДокумента"));
		ТекущийЭлементДокумента.Шрифт = ЖирныйШрифт;
		
		ДанныеДействия = Новый Структура("ДействиеЗадачи, Участник, ЕстьЗамещающие, ФактическийИсполнитель");
		Если ТипЗнч(ТекущееДействиеЗадачи) = Тип("СтрокаТаблицыЗначений") Тогда
			ДанныеДействия.ДействиеЗадачи = ТекущееДействиеЗадачи.Ссылка;
		Иначе
			ДанныеДействия.ДействиеЗадачи = ТекущееДействиеЗадачи;
		КонецЕсли;
		ДанныеДействия.Участник = Исполнитель;
		ДанныеДействия.ЕстьЗамещающие = ЕстьЗамещающие;
		ДанныеДействия.ФактическийИсполнитель = ФактическийИсполнитель;
		ДанныеДействий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеДействия);
		ПредставленияИсполнителей =
			РаботаСЗадачами.ПредставленияИсполнителейДействийЗадач(ДанныеДействий, Истина);
		ИсполнительСтрокой = ПредставленияИсполнителей[ДанныеДействия.ДействиеЗадачи];
		
		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
			ТекущийЭлементДокумента.ЗакладкаКонца,
			ИсполнительСтрокой,
			Тип("ТекстФорматированногоДокумента"));
		ТекущийЭлементДокумента.Шрифт = ОбычныйШрифт;
		Если ВключатьНавигационныеСсылки Тогда
			ТекущийЭлементДокумента.НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Исполнитель);
		КонецЕсли;
		
		Если ЭтоОтветственный Тогда
			ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
				ТекущийЭлементДокумента.ЗакладкаКонца,
				СтрШаблон(" (%1)", НСтр("ru = 'ответственный'", КодЯзыка)),
				Тип("ТекстФорматированногоДокумента"));
		КонецЕсли;
		
		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
			ТекущийЭлементДокумента.ЗакладкаКонца,
			Неопределено,
			Тип("ПереводСтрокиФорматированногоДокумента"));
				
	КонецЕсли;
	
	// Дата начала план.
	Если ЕстьРеквизитНачалоПлан Тогда
		
		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
			ТекущийЭлементДокумента.ЗакладкаКонца,
			СтрШаблон("%1: ", НСтр("ru = 'Начало (план)'", КодЯзыка)),
			Тип("ТекстФорматированногоДокумента"));
		ТекущийЭлементДокумента.Шрифт = ЖирныйШрифт;
		
		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
			ТекущийЭлементДокумента.ЗакладкаКонца,
			Формат(ДатаНачалаПлан, РаботаСЗадачами.ФорматСрока()),
			Тип("ТекстФорматированногоДокумента"));
		ТекущийЭлементДокумента.Шрифт = ОбычныйШрифт;
		
		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
			ТекущийЭлементДокумента.ЗакладкаКонца,
			Неопределено,
			Тип("ПереводСтрокиФорматированногоДокумента"));
		
	КонецЕсли;
	
	// Срок.
	Если ЕстьРеквизитСрок Тогда
		
		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
			ТекущийЭлементДокумента.ЗакладкаКонца,
			СтрШаблон("%1: ", НСтр("ru = 'Срок'", КодЯзыка)),
			Тип("ТекстФорматированногоДокумента"));
		ТекущийЭлементДокумента.Шрифт = ЖирныйШрифт;
		
		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
			ТекущийЭлементДокумента.ЗакладкаКонца,
			Формат(ОтображаемыйСрок, РаботаСЗадачами.ФорматСрока()),
			Тип("ТекстФорматированногоДокумента"));
		ТекущийЭлементДокумента.Шрифт = ОбычныйШрифт;
		Если ОтображаемыйСрок < ТекущаяДатаСеанса() И ОжидаетВыполнения Тогда
			ТекущийЭлементДокумента.ЦветТекста = ЦветаСтиля.ПросроченныеДанныеЦвет;
		КонецЕсли;
		Если Не ЭтоВыполненнаяЗадача
				И ПолучитьФункциональнуюОпцию("ВестиУчетПереносовСроковЗадач")
				И ВключатьНавигационныеСсылки Тогда
			Если ЗначениеЗаполнено(ТекущееДействиеЗадачи)
					И ТипЗнч(ТекущееДействиеЗадачи) = Тип("СтрокаТаблицыЗначений") Тогда
				ТекущийЭлементДокументаСсылка = ТекущееДействиеЗадачи.Ссылка;
			ИначеЕсли ЗначениеЗаполнено(ТекущееДействиеЗадачи) Тогда
				ТекущийЭлементДокументаСсылка = ТекущееДействиеЗадачи;
			Иначе
				ТекущийЭлементДокументаСсылка = Ссылка;
			КонецЕсли;
			ТекущийЭлементДокумента.НавигационнаяСсылка = СтрШаблон(
				"v8doc:tasks/ChangeDueDate/%1",
				ПолучитьНавигационнуюСсылку(ТекущийЭлементДокументаСсылка));
		КонецЕсли;
		
		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
			ТекущийЭлементДокумента.ЗакладкаКонца,
			Неопределено,
			Тип("ПереводСтрокиФорматированногоДокумента"));
		
	КонецЕсли;
	
	// Автор.
	Если ЕстьРеквизитАвтор Тогда
		
		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
			ТекущийЭлементДокумента.ЗакладкаКонца,
			СтрШаблон("%1: ", НСтр("ru = 'Автор'", КодЯзыка)),
			Тип("ТекстФорматированногоДокумента"));
		ТекущийЭлементДокумента.Шрифт = ЖирныйШрифт;
		
		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
			ТекущийЭлементДокумента.ЗакладкаКонца,
			Автор,
			Тип("ТекстФорматированногоДокумента"));
		ТекущийЭлементДокумента.Шрифт = ОбычныйШрифт;
		Если ВключатьНавигационныеСсылки Тогда
			ТекущийЭлементДокумента.НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Автор);
		КонецЕсли;
		
		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
			ТекущийЭлементДокумента.ЗакладкаКонца,
			Неопределено,
			Тип("ПереводСтрокиФорматированногоДокумента"));
		
	КонецЕсли;
	
	// Перенаправил.
	Если ТипЗнч(ТекущееДействиеЗадачи) = Тип("СтрокаТаблицыЗначений") Тогда
		СведенияОПеренаправлении = ТекущееДействиеЗадачи.СведенияОПеренаправлении;
	Иначе
		СведенияОПеренаправлении = РегистрыСведений.ИсторияЗадач.СведенияОПеренаправлении(Ссылка, ТекущееДействиеЗадачи);
	КонецЕсли;
	Если СведенияОПеренаправлении.БылоПеренаправление Тогда
		
		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
			ТекущийЭлементДокумента.ЗакладкаКонца,
			СтрШаблон("%1: ", НСтр("ru = 'Перенаправил'", КодЯзыка)),
			Тип("ТекстФорматированногоДокумента"));
		ТекущийЭлементДокумента.Шрифт = ЖирныйШрифт;
		
		ЕстьКтоПеренаправил = Ложь;
		Если ЗначениеЗаполнено(СведенияОПеренаправлении.КтоПеренаправил) Тогда
			
			ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
				ТекущийЭлементДокумента.ЗакладкаКонца,
				СведенияОПеренаправлении.КтоПеренаправил,
				Тип("ТекстФорматированногоДокумента"));
			ТекущийЭлементДокумента.Шрифт = ОбычныйШрифт;
			Если ВключатьНавигационныеСсылки Тогда
				ТекущийЭлементДокумента.НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(
					СведенияОПеренаправлении.КтоПеренаправил);
			КонецЕсли;
			
			ЕстьКтоПеренаправил = Истина;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СведенияОПеренаправлении.Комментарий) Тогда
			
			ШаблонКомментария = ?(ЕстьКтоПеренаправил, ", %1", "%1");
			
			ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
				ТекущийЭлементДокумента.ЗакладкаКонца,
				СтрШаблон(ШаблонКомментария, СведенияОПеренаправлении.Комментарий),
				Тип("ТекстФорматированногоДокумента"));
			ТекущийЭлементДокумента.Шрифт = ОбычныйШрифт;
			
		КонецЕсли;
		
		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
			ТекущийЭлементДокумента.ЗакладкаКонца,
			Неопределено,
			Тип("ПереводСтрокиФорматированногоДокумента"));
		
	КонецЕсли; 
		
		
	// проект резолюции.
	Если ЗначениеЗаполнено(РезультатДействияТекстом) 
		И ВидДействия = Справочники.ВидыДействийЗадач.Рассмотреть Тогда
		
		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
			ТекущийЭлементДокумента.ЗакладкаКонца,
			СтрШаблон("%1: ", НСтр("ru = 'Проект резолюции'", КодЯзыка)),
			Тип("ТекстФорматированногоДокумента"));
		ТекущийЭлементДокумента.Шрифт = ЖирныйШрифт;
		
		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
			ТекущийЭлементДокумента.ЗакладкаКонца,
			РезультатДействияТекстом,
			Тип("ТекстФорматированногоДокумента"));
		ТекущийЭлементДокумента.Шрифт = ОбычныйШрифт;
		
		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
			ТекущийЭлементДокумента.ЗакладкаКонца,
			Неопределено,
			Тип("ПереводСтрокиФорматированногоДокумента"));
		
	КонецЕсли;
		
	
	// Проект.
	Если ЗначениеЗаполнено(Проект) Тогда
		
		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
			ТекущийЭлементДокумента.ЗакладкаКонца,
			СтрШаблон("%1: ", НСтр("ru = 'Проект'", КодЯзыка)),
			Тип("ТекстФорматированногоДокумента"));
		ТекущийЭлементДокумента.Шрифт = ЖирныйШрифт;
		
		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
			ТекущийЭлементДокумента.ЗакладкаКонца,
			Проект,
			Тип("ТекстФорматированногоДокумента"));
		ТекущийЭлементДокумента.Шрифт = ОбычныйШрифт;
		Если ВключатьНавигационныеСсылки Тогда
			ТекущийЭлементДокумента.НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Проект);
		КонецЕсли;
		
		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
			ТекущийЭлементДокумента.ЗакладкаКонца,
			Неопределено,
			Тип("ПереводСтрокиФорматированногоДокумента"));
		
	КонецЕсли;
	
	// Цикл и история.
	ДанныеЦиклов = ИнтеграцияЗадач.ДанныеЦиклов(ИсточникДействия, КешДанных);
	Если ДанныеЦиклов <> Неопределено Тогда
		
		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
			ТекущийЭлементДокумента.ЗакладкаКонца,
			Неопределено,
			Тип("ПереводСтрокиФорматированногоДокумента"));
		
		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
			ТекущийЭлементДокумента.ЗакладкаКонца,
			СтрШаблон("%1: ", НСтр("ru = 'Цикл'", КодЯзыка)),
			Тип("ТекстФорматированногоДокумента"));
		ТекущийЭлементДокумента.Шрифт = ЖирныйШрифт;
		Если ВключатьНавигационныеСсылки Тогда
			ТекущийЭлементДокумента.НавигационнаяСсылка = ДанныеЦиклов.НавигационнаяСсылкаИстории;
		КонецЕсли;
		
		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
			ТекущийЭлементДокумента.ЗакладкаКонца,
			ДанныеЦиклов.НомерИтерации,
			Тип("ТекстФорматированногоДокумента"));
		ТекущийЭлементДокумента.Шрифт = ОбычныйШрифт;
		Если ВключатьНавигационныеСсылки Тогда
			ТекущийЭлементДокумента.НавигационнаяСсылка = ДанныеЦиклов.НавигационнаяСсылкаИстории;
		КонецЕсли;
		
		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
			ТекущийЭлементДокумента.ЗакладкаКонца,
			Неопределено,
			Тип("ПереводСтрокиФорматированногоДокумента"));
		
	КонецЕсли;
	
	// Общий результат.
	ДанныеСоисполнителей = РаботаСЗадачами.ДанныеСоисполнителей(
		Ссылка,
		ТекущееДействиеЗадачи,
		КлючНазначения,
		КешДанных);
	Если ЗначениеЗаполнено(ДанныеСоисполнителей.ПредставлениеОбщегоРезультата) Тогда
		
		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
			ТекущийЭлементДокумента.ЗакладкаКонца,
			Неопределено,
			Тип("ПереводСтрокиФорматированногоДокумента"));
		
		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
			ТекущийЭлементДокумента.ЗакладкаКонца,
			СтрШаблон("%1: ", НСтр("ru = 'Результат'", КодЯзыка)),
			Тип("ТекстФорматированногоДокумента"));
		ТекущийЭлементДокумента.Шрифт = ЖирныйШрифт;
		
		// Картинка состояния.
		Если ЗначениеЗаполнено(ДанныеСоисполнителей.ХарактерОбщегоРезультата) Тогда
			
			КартинкаСостояния =
				Перечисления.ХарактерыРезультатов.КартинкаСостояния(
					ДанныеСоисполнителей.ХарактерОбщегоРезультата);
			КартинкаСостояния = Новый Картинка(КартинкаСостояния.ПолучитьДвоичныеДанные());
			ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
				ТекущийЭлементДокумента.ЗакладкаКонца,
				КартинкаСостояния,
				Тип("КартинкаФорматированногоДокумента"));
			
		КонецЕсли;
		
		// Представление общего результата.
		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
			ТекущийЭлементДокумента.ЗакладкаКонца,
			ДанныеСоисполнителей.ПредставлениеОбщегоРезультата,
			Тип("ТекстФорматированногоДокумента"));
		
		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
			ТекущийЭлементДокумента.ЗакладкаКонца,
			СтрШаблон(" (%1)", НСтр("ru = 'подробнее'", КодЯзыка)),
			Тип("ТекстФорматированногоДокумента"));
		Если ВключатьНавигационныеСсылки Тогда
			ТекущийЭлементДокумента.НавигационнаяСсылка =
				СтрШаблон(
					"v8doc:tasks/ShowCoperformers");
		КонецЕсли;
		
	КонецЕсли;
	
	// Соисполнители.
	Для Каждого ДанныеЭтапа Из ДанныеСоисполнителей.Этапы Цикл
		
		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
			ТекущийЭлементДокумента.ЗакладкаКонца,
			Неопределено,
			Тип("ПереводСтрокиФорматированногоДокумента"));
		
		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
			ТекущийЭлементДокумента.ЗакладкаКонца,
			СтрШаблон("%1: ", ДанныеЭтапа.Представление),
			Тип("ТекстФорматированногоДокумента"));
		ТекущийЭлементДокумента.Шрифт = ЖирныйШрифт;
		
		ДанныеСоисполнителейЭтапа = ДанныеСоисполнителей.СоисполнителиПоЭтапам[ДанныеЭтапа.Этап];
		Для Каждого ДанныеСоисполнителя Из ДанныеСоисполнителейЭтапа Цикл
			
			// Картинка состояния.
			Если ЗначениеЗаполнено(ДанныеСоисполнителя.ХарактерРезультата) Тогда
				
				КартинкаСостояния =
					Перечисления.ХарактерыРезультатов.КартинкаСостояния(
						ДанныеСоисполнителя.ХарактерРезультата);
				КартинкаСостояния = Новый Картинка(КартинкаСостояния.ПолучитьДвоичныеДанные());
				ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
					ТекущийЭлементДокумента.ЗакладкаКонца,
					КартинкаСостояния,
					Тип("КартинкаФорматированногоДокумента"));
				Если ВключатьНавигационныеСсылки
					И ЗначениеЗаполнено(ДанныеСоисполнителя.ДействиеЗадачи) Тогда
					ТекущийЭлементДокумента.НавигационнаяСсылка =
						СтрШаблон(
							"v8doc:tasks/ShowTaskAction/%1",
							ПолучитьНавигационнуюСсылку(ДанныеСоисполнителя.ДействиеЗадачи));
				КонецЕсли;
				
			КонецЕсли;
			
			// Картинка приложения.
			Если ДанныеСоисполнителя.ЕстьПриложения Тогда
				
				КартинкаСкрепка = Новый Картинка(
					БиблиотекаКартинок.Скрепка.ПолучитьДвоичныеДанные());
				ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
					ТекущийЭлементДокумента.ЗакладкаКонца,
					КартинкаСкрепка,
					Тип("КартинкаФорматированногоДокумента"));
				Если ВключатьНавигационныеСсылки
					И ЗначениеЗаполнено(ДанныеСоисполнителя.ДействиеЗадачи) Тогда
					ТекущийЭлементДокумента.НавигационнаяСсылка =
						СтрШаблон(
							"v8doc:tasks/ShowTaskAction/%1",
							ПолучитьНавигационнуюСсылку(ДанныеСоисполнителя.ДействиеЗадачи));
				КонецЕсли;
				
			КонецЕсли;
			
			// Картинка ответственный.
			Если ДанныеСоисполнителя.ЭтоОтветственный Тогда
				
				КартинкаОтветственныйИсполнитель =
					Новый Картинка(
						БиблиотекаКартинок.ОтветственныйИсполнительPNG.ПолучитьДвоичныеДанные());
				ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
					ТекущийЭлементДокумента.ЗакладкаКонца,
					КартинкаОтветственныйИсполнитель,
					Тип("КартинкаФорматированногоДокумента"));
				Если ВключатьНавигационныеСсылки
					И ЗначениеЗаполнено(ДанныеСоисполнителя.ДействиеЗадачи) Тогда
					ТекущийЭлементДокумента.НавигационнаяСсылка =
						СтрШаблон(
							"v8doc:tasks/ShowTaskAction/%1",
							ПолучитьНавигационнуюСсылку(ДанныеСоисполнителя.ДействиеЗадачи));
				КонецЕсли;
				
			КонецЕсли;
			
			// Представление исполнителя.
			ЧислоСтрок = СтрЧислоСтрок(ДанныеСоисполнителя.Представление);
			Для НомерСтроки = 1 По ЧислоСтрок Цикл
				
				ОчереднаяСтрока =
					СтрПолучитьСтроку(
						ДанныеСоисполнителя.Представление,
						НомерСтроки);
				Если ЗначениеЗаполнено(ОчереднаяСтрока) Тогда
					ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
						ТекущийЭлементДокумента.ЗакладкаКонца,
						ОчереднаяСтрока,
						Тип("ТекстФорматированногоДокумента"));
					Если ВключатьНавигационныеСсылки Тогда
						ТекущийЭлементДокумента.НавигационнаяСсылка =
							СтрШаблон(
								"v8doc:tasks/ShowTaskAction/%1",
								ПолучитьНавигационнуюСсылку(ДанныеСоисполнителя.ДействиеЗадачи));
					КонецЕсли;
				КонецЕсли;
				ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
					ТекущийЭлементДокумента.ЗакладкаКонца,
					Неопределено,
					Тип("ПереводСтрокиФорматированногоДокумента"));
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
		ТекущийЭлементДокумента.ЗакладкаКонца,
		Неопределено,
		Тип("ПереводСтрокиФорматированногоДокумента"));
	
	// Вставки перед и после текста.
	ФорматированныйДокумент.Вставить(
		ЗакладкаНачала,
		МеткаНачала(),
		Тип("ТекстФорматированногоДокумента"));
	
	ФорматированныйДокумент.Вставить(
		ЗакладкаКонца,
		МеткаКонца(),
		Тип("ТекстФорматированногоДокумента"));
	
	// Корректировка авто-шрифтов и навигационных ссылок.
	ВсеЭлементы = ФорматированныйДокумент.ПолучитьЭлементы(ЗакладкаНачала, ЗакладкаКонца);
	Для Каждого Элемент Из ВсеЭлементы Цикл
		
		Если ТипЗнч(Элемент) = Тип("ТекстФорматированногоДокумента")
			И Элемент.Шрифт.Вид = ВидШрифта.АвтоШрифт Тогда
			
			// Обход ошибки платформы - полностью авто шрифт едет при преобразовании в HTML шрифта ШрифтОписанияЗадачи.
			//@skip-check new-font
			Элемент.Шрифт = Новый Шрифт(
				?(ЗначениеЗаполнено(Элемент.Шрифт.Имя), Элемент.Шрифт.Имя, "Arial"), // ИмяШрифта
				?(Элемент.Шрифт.Размер > 0, Элемент.Шрифт.Размер, 10), // Размер
				?(Элемент.Шрифт.Полужирный <> Неопределено, Элемент.Шрифт.Полужирный, Ложь), // Полужирный
				?(Элемент.Шрифт.Наклонный <> Неопределено, Элемент.Шрифт.Наклонный, Ложь), // Наклонный
				?(Элемент.Шрифт.Подчеркивание <> Неопределено, Элемент.Шрифт.Подчеркивание, Ложь), // Подчеркнутый
				?(Элемент.Шрифт.Зачеркивание <> Неопределено, Элемент.Шрифт.Зачеркивание, Ложь), // Зачеркнутый
				?(Элемент.Шрифт.Масштаб <> 100, Элемент.Шрифт.Масштаб, 100)); // Масштаб
			
		КонецЕсли;
		
		Если (ТипЗнч(Элемент) = Тип("ТекстФорматированногоДокумента")
			Или ТипЗнч(Элемент) = Тип("КартинкаФорматированногоДокумента"))
			И (СтрНачинаетсяС(Элемент.НавигационнаяСсылка, "e1cib/")
				Или СтрНачинаетсяС(Элемент.НавигационнаяСсылка, "e1ccs/")) Тогда
			
			Элемент.НавигационнаяСсылка = "v8doc:" + Элемент.НавигационнаяСсылка;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ФорматированныйДокумент;
	
КонецФункции

// Копирует файлы, указанные как приложения, к данной задаче.
//
Процедура СкопироватьПриложенияДругихЗадач()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВсеПриложенныеФайлы = Новый Массив;
	Для Каждого СтрокаПриложения Из Приложения Цикл
		
		Если ТипЗнч(СтрокаПриложения.Приложение) <> Тип("СправочникСсылка.Файлы") Тогда
			Продолжить;
		КонецЕсли;
		
		ВсеПриложенныеФайлы.Добавить(СтрокаПриложения.Приложение);
		
	КонецЦикла;
	
	Если ВсеПриложенныеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПодходящиеТипыВладельцев = Новый Массив;
	ПодходящиеТипыВладельцев.Добавить(Тип("СправочникСсылка.ШаблоныЗадач"));
	ПодходящиеТипыВладельцев.Добавить(Тип("ДокументСсылка.Задача"));
	ПодходящиеТипыВладельцев.Добавить(Тип("ДокументСсылка.ДействиеЗадачи"));
	ПодходящиеТипыВладельцев.Добавить(Тип("БизнесПроцессСсылка.Исполнение"));
	ПодходящиеТипыВладельцев.Добавить(Тип("БизнесПроцессСсылка.КомплексныйПроцесс"));
	ПодходящиеТипыВладельцев.Добавить(Тип("БизнесПроцессСсылка.Ознакомление"));
	ПодходящиеТипыВладельцев.Добавить(Тип("БизнесПроцессСсылка.Подписание"));
	ПодходящиеТипыВладельцев.Добавить(Тип("БизнесПроцессСсылка.Приглашение"));
	ПодходящиеТипыВладельцев.Добавить(Тип("БизнесПроцессСсылка.Рассмотрение"));
	ПодходящиеТипыВладельцев.Добавить(Тип("БизнесПроцессСсылка.Регистрация"));
	ПодходящиеТипыВладельцев.Добавить(Тип("БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач"));
	ПодходящиеТипыВладельцев.Добавить(Тип("БизнесПроцессСсылка.Согласование"));
	ПодходящиеТипыВладельцев.Добавить(Тип("БизнесПроцессСсылка.Утверждение"));
	
	ФайлыДляПереноса = Новый Массив;
	ВладельцыФайлов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ВсеПриложенныеФайлы, "ВладелецФайла");
	Для Каждого КлючИЗначение Из ВладельцыФайлов Цикл
		
		ПриложенныйФайл = КлючИЗначение.Ключ;
		ВладелецПриложенногоФайла = КлючИЗначение.Значение;
		
		ТипВладельца = ТипЗнч(ВладелецПриложенногоФайла);
		
		Если ПодходящиеТипыВладельцев.Найти(ТипВладельца) = Неопределено
			Или ВладелецПриложенногоФайла = Ссылка
			Или ВладелецПриложенногоФайла = Источник Тогда
			Продолжить;
		КонецЕсли;
		
		ФайлыДляПереноса.Добавить(ПриложенныйФайл);
		
	КонецЦикла;
	
	Если ФайлыДляПереноса.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СсылкаНовогоОбъекта = ОбщегоНазначенияДокументооборот.СсылкаНовогоОбъекта(ЭтотОбъект);
	Для Каждого СтрокаПриложения Из Приложения Цикл
		
		Если ФайлыДляПереноса.Найти(СтрокаПриложения.Приложение) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		СтрокаПриложения.Приложение = РаботаСФайламиВызовСервера.СкопироватьФайл(
			СтрокаПриложения.Приложение,
			СсылкаНовогоОбъекта);
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает стиль таблицы.
//
Функция СтильHTML()
	
	Возврат "<style type=""text/css"">
		|	body {
		|		overflow:    auto;
		|		margin-top:  2px;
		|		margin-left: 2px;
		|		margin-right: 2px;
		|		padding: 4px !important;
		|		font-family: Arial;
		|		font-size:   10pt;}
		|	table {
		|		width: 100%;
		|		max-width: 100%;
		|		font-family: Arial;
		|		font-size:   10pt;
		|		border: 0px solid;}
		| 	a:link {
		|		color: #006699; text-decoration: none;}
		|	a:visited {
		|		color: #006699; text-decoration: none;}
		|	a:hover {
		|		color: #006699; text-decoration: none;}
		|	td {vertical-align: top;}
		|	table.frame {
		|		border-collapse: collapse;
		|		border: 1px solid #C8C8C8;}
		|	td.frame {
		|		border: 1px solid #C8C8C8;}
		|</style>";
	
КонецФункции

// Заполнить по шаблону.
// 
// Параметры:
//  ШаблонЗадачи - СправочникСсылка.ШаблоныЗадач.
//  
Процедура ЗаполнитьПоШаблону(ШаблонЗадачи)
	
	РеквизитыШаблонаЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ШаблонЗадачи,
		"ВидЗадачи, Приоритет, Проект, Автор,
		|Заголовок, ДобавлятьПредставлениеПриложений, ШаблонЗаголовка,
		|ОписаниеФорматированное, ШаблонОписания,
		|Срок, СрокВариантУстановки, СрокДни, СрокМинуты, СрокЧасы,
		|ТрудоемкостьОт, ТрудоемкостьДо, Челчасов,
		|Участники,
		|ОчищатьПриложения, Приложения");
	
	УчастникиШаблона = РеквизитыШаблонаЗадачи.Участники.Выгрузить();
	УчастникиШаблона.Сортировать("НомерСтроки");
	
	ПриложенияШаблона = РеквизитыШаблонаЗадачи.Приложения.Выгрузить();
	ПриложенияШаблона.Сортировать("НомерСтроки");
	
	ОписаниеФорматированноеШаблона =
		РеквизитыШаблонаЗадачи.ОписаниеФорматированное.Получить(); // ФорматированныйДокумент
	
	// Вид задачи.
	СтарыйВидЗадачи = ВидЗадачи;
	Если ЗначениеЗаполнено(РеквизитыШаблонаЗадачи.ВидЗадачи) Тогда
		ВидЗадачи = РеквизитыШаблонаЗадачи.ВидЗадачи;
	КонецЕсли;
	НовыйВидЗадачи = ВидЗадачи;
	ОбновитьУчастниковПриИзмененииВидаЗадачи(СтарыйВидЗадачи, НовыйВидЗадачи);
	
	ДанныеВидаЗадачи = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(ВидЗадачи);
	
	// Приоритет.
	Если ЗначениеЗаполнено(РеквизитыШаблонаЗадачи.Приоритет) Тогда
		Приоритет = РеквизитыШаблонаЗадачи.Приоритет;
	КонецЕсли;
	
	// Челчасов.
	Если ЗначениеЗаполнено(РеквизитыШаблонаЗадачи.Челчасов) Тогда
		ТрудоемкостьСтрокой = РеквизитыШаблонаЗадачи.Челчасов;
		ТрудоемкостьОт = РеквизитыШаблонаЗадачи.ТрудоемкостьОт;
		ТрудоемкостьДо = РеквизитыШаблонаЗадачи.ТрудоемкостьДо;
	КонецЕсли;
	
	// Срок.
	ПараметрыДлительности = 
		СрокиИсполненияПроцессов.ПараметрыДлительностиИсполненияДляОпределенияТочногоСрока();
		
	ПараметрыДлительности.Дни = РеквизитыШаблонаЗадачи.СрокДни;
	ПараметрыДлительности.Часы = РеквизитыШаблонаЗадачи.СрокЧасы;
	ПараметрыДлительности.Минуты = РеквизитыШаблонаЗадачи.СрокМинуты;
	ПараметрыДлительности.ДатаОтсчета = ТекущаяДатаСеанса();
	ПараметрыДлительности.ГрафикРаботы = ГрафикиРаботы.ГрафикРаботыСотрудника(
		ПараметрыСеанса.ОсновнойСотрудник);
		
	Срок = СрокиИсполненияПроцессов.СрокИсполненияПоДлительности(ПараметрыДлительности);
	
	// Проект.
	Если ЗначениеЗаполнено(РеквизитыШаблонаЗадачи.Проект) Тогда
		Проект = РеквизитыШаблонаЗадачи.Проект;
	КонецЕсли;
	
	// Автор.
	Если ЗначениеЗаполнено(РеквизитыШаблонаЗадачи.Автор) Тогда
		
		РазыменованныйРеквизит = РазыменоватьРеквизитШаблона(РеквизитыШаблонаЗадачи.Автор);
		
		Если РазыменованныйРеквизит.Количество() > 0 Тогда
			
			Автор = РазыменованныйРеквизит[0];
			
		Иначе
			
			Автор = Справочники.Сотрудники.ПустаяСсылка();
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Участники.
	Если УчастникиШаблона.Количество() > 0 Тогда
		
		Участники.Очистить();
		Для Каждого СтрокаШаблона Из УчастникиШаблона Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаШаблона.Участник) Тогда
				Продолжить;
			КонецЕсли;
			
			РазыменованныйРеквизит = РазыменоватьРеквизитШаблона(СтрокаШаблона.Участник);
			Если РазыменованныйРеквизит.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаШаблона.ВидУчастника = ДанныеВидаЗадачи.ВидУчастникаОтветственный Тогда
				
				СтрокаУчастника = Участники.Добавить();
				СтрокаУчастника.ВидУчастника = СтрокаШаблона.ВидУчастника;
				СтрокаУчастника.Участник = РазыменованныйРеквизит[0];
				
				РазыменованныйРеквизит.Удалить(0);
				
				Для Каждого Участник Из РазыменованныйРеквизит Цикл
					
					СтрокаУчастника = Участники.Добавить();
					СтрокаУчастника.ВидУчастника = ДанныеВидаЗадачи.ВидУчастникаИсполнитель;
					СтрокаУчастника.Участник = Участник;
					
				КонецЦикла;
				
			ИначеЕсли СтрокаШаблона.ВидУчастника = ДанныеВидаЗадачи.ВидУчастникаИсполнитель Тогда
				
				Для Каждого Участник Из РазыменованныйРеквизит Цикл
					
					СтрокаУчастника = Участники.Добавить();
					СтрокаУчастника.ВидУчастника = СтрокаШаблона.ВидУчастника;
					СтрокаУчастника.Участник = Участник;
					
				КонецЦикла;
				
			ИначеЕсли СтрокаШаблона.ВидУчастника = ДанныеВидаЗадачи.ВидУчастникаПроверяющий Тогда
				
				СтрокаУчастника = Участники.Добавить();
				СтрокаУчастника.ВидУчастника = СтрокаШаблона.ВидУчастника;
				СтрокаУчастника.Участник = РазыменованныйРеквизит[0];
				
			Иначе
				
				ВызватьИсключение СтрШаблон(
					НСтр("ru = 'Неизвестный вид участника %1.'"),
					СтрокаШаблона.ВидУчастника);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ОбщегоНазначенияДокументооборотКлиентСервер.УдалитьДублиСтрокТаблицы(
			Участники,
			"ВидУчастника, Участник");
		
	КонецЕсли;
	
	// Заголовок.
	Если ЗначениеЗаполнено(РеквизитыШаблонаЗадачи.ШаблонЗаголовка) Тогда
		
		Заголовок = ШаблоныДокументов.ПолучитьЗначениеАвтоподстановки(
			РеквизитыШаблонаЗадачи.ШаблонЗаголовка,
			ЭтотОбъект,
			Ложь,
			Истина);
		
	ИначеЕсли ЗначениеЗаполнено(РеквизитыШаблонаЗадачи.Заголовок) Тогда
		
		Заголовок = РеквизитыШаблонаЗадачи.Заголовок;
		
		Если РеквизитыШаблонаЗадачи.ДобавлятьПредставлениеПриложений Тогда
			
			МассивПриложений = Приложения.ВыгрузитьКолонку("Приложение");
			
			ПредметыСтрокой =
				МультипредметностьКлиентСервер.ПредметыСтрокой(МассивПриложений, Истина, Ложь);
			
			Если ЗначениеЗаполнено(ПредметыСтрокой) Тогда
				
				Заголовок = СтрШаблон("%1 %2", Заголовок, ПредметыСтрокой);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Описание.
	Если ЗначениеЗаполнено(РеквизитыШаблонаЗадачи.ШаблонОписания) Тогда
		
		ЗначениеАвтоподстановки = ШаблоныДокументов.ПолучитьЗначениеАвтоподстановки(
			РеквизитыШаблонаЗадачи.ШаблонОписания,
			ЭтотОбъект,
			Ложь,
			Истина);
		Если ТипЗнч(ЗначениеАвтоподстановки) = Тип("ФорматированныйДокумент") Тогда
			УстановитьОписаниеФорматированное(ЗначениеАвтоподстановки);
		Иначе
			УстановитьОписание(ЗначениеАвтоподстановки);
		КонецЕсли;
		
		ДополнительныеСвойства.Вставить("ОписаниеОбновленоПоШаблону", Истина);
		
	Иначе
		
		ТекстШаблона = ОписаниеФорматированноеШаблона.ПолучитьТекст();
		ТекстHTMLШаблона = "";
		КартинкиШаблона = Новый Структура;
		ОписаниеФорматированноеШаблона.ПолучитьHTML(ТекстHTMLШаблона, КартинкиШаблона);
		Если ЗначениеЗаполнено(ТекстШаблона) Или КартинкиШаблона.Количество() > 0 Тогда
			УстановитьОписаниеФорматированное(ОписаниеФорматированноеШаблона);
			ДополнительныеСвойства.Вставить("ОписаниеОбновленоПоШаблону", Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	// Приложения.
	Если РеквизитыШаблонаЗадачи.ОчищатьПриложения Тогда
		Приложения.Очистить();
	КонецЕсли;
	
	Для Каждого СтрокаШаблона Из ПриложенияШаблона Цикл
		
		СтрокаПриложения = Приложения.Добавить();
		СтрокаПриложения.Приложение = СтрокаШаблона.Приложение;
		
	КонецЦикла;
	
КонецПроцедуры

// Разыменовывает реквизит шаблона задач.
// 
// Параметры:
//  ЗначениеРеквизита - см. Справочник.ШаблоныЗадач.Участники.Участник
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.Сотрудники, СправочникСсылка.ПолныеРоли
// 
Функция РазыменоватьРеквизитШаблона(ЗначениеРеквизита)
	
	РазыменованныйРеквизит = Новый Массив;
	
	Если Не ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
		Возврат РазыменованныйРеквизит
	КонецЕсли;
	
	Если ТипЗнч(ЗначениеРеквизита) = Тип("СправочникСсылка.АвтоподстановкиДляОбъектов") Тогда
		
		РазыменованныйРеквизит = ДействияСервер.РазыменоватьАвтоподстановку(
			ЗначениеРеквизита,
			ЭтотОбъект,
			Перечисления.ФункцииУчастниковИсполнения.АвтоопределениеФункцииУчастника,
			Перечисления.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат,
			Ложь,
			Перечисления.ФункцииУчастниковПодписания.ОбеспечивающийПодписание);
		
	ИначеЕсли ТипЗнч(ЗначениеРеквизита) = Тип("СправочникСсылка.РабочиеГруппы")
		Или ТипЗнч(ЗначениеРеквизита) = Тип("СправочникСсылка.ПроектыКонтейнеры")
		Или ТипЗнч(ЗначениеРеквизита) = Тип("СправочникСсылка.ПодразделенияКонтейнеры") Тогда
		
		РазыменованныйРеквизит =
			РегистрыСведений.СотрудникиВКонтейнерах.СотрудникиВКонтейнере(ЗначениеРеквизита);
		
	Иначе
		
		РазыменованныйРеквизит.Добавить(ЗначениеРеквизита);
		
	КонецЕсли;
	
	Возврат РазыменованныйРеквизит;
	
КонецФункции

// Обновляет участников при изменении вида задачи.
// 
// Параметры:
//  СтарыйВидЗадачи - СправочникСсылка.ВидыЗадач
//  НовыйВидЗадачи - СправочникСсылка.ВидыЗадач
// 
Процедура ОбновитьУчастниковПриИзмененииВидаЗадачи(СтарыйВидЗадачи, НовыйВидЗадачи)
	
	Если Не ЗначениеЗаполнено(СтарыйВидЗадачи) Тогда
		СтарыйВидЗадачи = Справочники.ВидыЗадач.Поручение;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Источник) Или СтарыйВидЗадачи = НовыйВидЗадачи Тогда
		Возврат;
	КонецЕсли;
	
	СтарыеДанныеВидаЗадачи = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(СтарыйВидЗадачи);
	НовыеДанныеВидаЗадачи = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(НовыйВидЗадачи);
	
	КоличествоЭлементов = Участники.Количество();
	Для Индекс = 1 По КоличествоЭлементов Цикл
		
		ОбратныйИндекс = КоличествоЭлементов - Индекс;
		СтрокаУчастника = Участники[ОбратныйИндекс];
		
		Если СтрокаУчастника.ВидУчастника = СтарыеДанныеВидаЗадачи.ВидУчастникаОтветственный
			И ЗначениеЗаполнено(НовыеДанныеВидаЗадачи.ВидУчастникаОтветственный) Тогда
			СтрокаУчастника.ВидУчастника = НовыеДанныеВидаЗадачи.ВидУчастникаОтветственный;
		ИначеЕсли СтрокаУчастника.ВидУчастника = СтарыеДанныеВидаЗадачи.ВидУчастникаОтветственный
			И Не ЗначениеЗаполнено(НовыеДанныеВидаЗадачи.ВидУчастникаОтветственный) Тогда
			СтрокаУчастника.ВидУчастника = НовыеДанныеВидаЗадачи.ВидУчастникаИсполнитель;
		ИначеЕсли СтрокаУчастника.ВидУчастника = СтарыеДанныеВидаЗадачи.ВидУчастникаИсполнитель Тогда
			СтрокаУчастника.ВидУчастника = НовыеДанныеВидаЗадачи.ВидУчастникаИсполнитель;
		ИначеЕсли СтрокаУчастника.ВидУчастника = СтарыеДанныеВидаЗадачи.ВидУчастникаПроверяющий
			И ЗначениеЗаполнено(НовыеДанныеВидаЗадачи.ВидУчастникаПроверяющий) Тогда
			СтрокаУчастника.ВидУчастника = НовыеДанныеВидаЗадачи.ВидУчастникаПроверяющий;
		ИначеЕсли СтрокаУчастника.ВидУчастника = СтарыеДанныеВидаЗадачи.ВидУчастникаПроверяющий
			И Не ЗначениеЗаполнено(НовыеДанныеВидаЗадачи.ВидУчастникаПроверяющий) Тогда
			Участники.Удалить(ОбратныйИндекс);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Определяет проект приложения.
// 
// Параметры:
//  Приложение - см. ОпределяемыйТип.ПриложениеЗадач
// 
// Возвращаемое значение:
//  СправочникСсылка.Проекты
// 
Функция ПроектПриложения(Приложение)
	
	ПроектПриложения = Справочники.Проекты.ПустаяСсылка();
	
	Если ТипЗнч(Приложение) = Тип("СправочникСсылка.ДокументыПредприятия")
		Или ТипЗнч(Приложение) = Тип("СправочникСсылка.Мероприятия")
		Или ТипЗнч(Приложение) = Тип("СправочникСсылка.Файлы")
		Или ТипЗнч(Приложение) = Тип("ДокументСсылка.ВходящееПисьмо")
		Или ТипЗнч(Приложение) = Тип("ДокументСсылка.ИсходящееПисьмо") Тогда
		
		ПроектПриложения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Приложение, "Проект");
		
	ИначеЕсли ТипЗнч(Приложение) = Тип("СправочникСсылка.Проекты") Тогда
		
		ПроектПриложения = Приложение;
		
	ИначеЕсли ТипЗнч(Приложение) = Тип("СправочникСсылка.ПроектныеЗадачи") Тогда
		
		ПроектПриложения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Приложение, "Владелец");
		
	ИначеЕсли ТипЗнч(Приложение) = Тип("СправочникСсылка.ТемыОбсуждений") Тогда
		
		ПредметТемыФорума = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Приложение, "Документ");
		ПроектПриложения = ПроектПриложения(ПредметТемыФорума);
		
	ИначеЕсли ТипЗнч(Приложение) = Тип("СправочникСсылка.СообщенияОбсуждений") Тогда
		
		ТемаФорума = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Приложение, "ВладелецСообщения");
		ПроектПриложения = ПроектПриложения(ТемаФорума);
		
	ИначеЕсли ТипЗнч(Приложение) = Тип("СправочникСсылка.ПротоколыМероприятий") Тогда
		
		Мероприятие = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Приложение, "Владелец");
		ПроектПриложения = ПроектПриложения(Мероприятие);
		
	КонецЕсли;
	
	Возврат ПроектПриложения;
	
КонецФункции

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли
