#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Ищет задачу по источнику.
//
// Параметры:
//  ИсточникЗадачи - ОпределяемыйТип.ИсточникЗадач - Источник задачи.
// 
// Возвращаемое значение:
//  ДокументСсылка.Задача - Найденная задача.
//
Функция НайтиПоИсточнику(ИсточникЗадачи) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(ИсточникЗадачи) Тогда
		Возврат ПустаяСсылка();
	КонецЕсли;
	
	Если Не РаботаСЗадачами.ЭтоИсточникЗадач(ИсточникЗадачи) Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = '%1 (%2) не является источником задач.'"),
			ИсточникЗадачи,
			ТипЗнч(ИсточникЗадачи));
	Конецесли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ 
		|	Задача.Ссылка КАК ЗадачаПоИсточнику
		|ИЗ
		|	Документ.Задача КАК Задача
		|ГДЕ
		|	Задача.Источник = &ИсточникЗадачи");
	
	Запрос.УстановитьПараметр("ИсточникЗадачи", ИсточникЗадачи);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЗадачаПоИсточнику = ?(Выборка.Следующий(), Выборка.ЗадачаПоИсточнику, ПустаяСсылка());
	
	Возврат ЗадачаПоИсточнику;
	
КонецФункции

// Ищет задачи по источникам.
//
// Параметры:
//  ИсточникиЗадач - Масств из ОпределяемыйТип.ИсточникЗадач.
// 
// Возвращаемое значение:
//  Соответствие - Найденные задачи.
//   * Ключ - ОпределяемыйТип.ИсточникЗадач.
//   * Значение - ДокументСсылка.Задача.
//
Функция НайтиПоИсточникам(ИсточникиЗадач) Экспорт
	
	ЗадачиПоИсточникам = Новый Соответствие;
	Если ИсточникиЗадач.Количество() = 0 Тогда
		Возврат ЗадачиПоИсточникам;
	КонецЕсли;
	
	Для Каждого ИсточникЗадачи Из ИсточникиЗадач Цикл
		
		Если Не РаботаСЗадачами.ЭтоИсточникЗадач(ИсточникЗадачи) Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = '%1 (%2) не является источником задач.'"),
				ИсточникЗадачи,
				ТипЗнч(ИсточникЗадачи));
		Конецесли;
		
		ЗадачиПоИсточникам[ИсточникЗадачи] = ПустаяСсылка();
		
	КонецЦикла;     
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ 
		|	Задача.Ссылка КАК ЗадачаПоИсточнику,
		|	Задача.Источник КАК Источник
		|ИЗ
		|	Документ.Задача КАК Задача
		|ГДЕ
		|	Задача.Источник В (&ИсточникиЗадач)");
	
	Запрос.УстановитьПараметр("ИсточникиЗадач", ИсточникиЗадач);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗадачиПоИсточникам[Выборка.Источник] = Выборка.ЗадачаПоИсточнику;
	КонецЦикла;
	
	Возврат ЗадачиПоИсточникам;
	
КонецФункции

// Ищет задачи по приложениям.
//
// Параметры:
//  Приложения - Массив из ОпределяемыйТип.ПриложениеЗадач.
// 
// Возвращаемое значение:
//  Массив из ДокументСсылка.Задача.
//
Функция НайтиПоПриложениям(Приложения) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗадачаПриложения.Ссылка КАК Задача
		|ИЗ
		|	Документ.Задача.Приложения КАК ЗадачаПриложения
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Задача КАК Задача
		|		ПО ЗадачаПриложения.Ссылка = Задача.Ссылка
		|ГДЕ
		|	ЗадачаПриложения.Приложение В (&Приложения)
		|	И Задача.ПометкаУдаления = ЛОЖЬ");
	
	Запрос.УстановитьПараметр("Приложения", Приложения);
	
	НайденныеЗадачи = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Задача");
	
	Возврат НайденныеЗадачи;
	
КонецФункции

// Определяет задачи по проекту.
// 
// Параметры:
// 	Проект - СправочникСсылка.Проекты.
// 	
// Возвращаемое значение:
//   Массив из ДокументСсылка.Задача - Задачи по проекту.
//
Функция НайтиПоПроекту(Проект) Экспорт
	
	НайденныеЗадачи = Новый Массив;
	Если Не ЗначениеЗаполнено(Проект) Тогда
		Возврат НайденныеЗадачи;
	КонецЕсли; 
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Задача.Ссылка
		|ИЗ
		|	Документ.Задача КАК Задача
		|ГДЕ
		|	Задача.Проект = &Проект
		|	И Задача.ПометкаУдаления = ЛОЖЬ");
	
	Запрос.УстановитьПараметр("Проект", Проект);
	
	НайденныеЗадачи = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат НайденныеЗадачи;
	
КонецФункции

// Ищет мои подзадачи по задаче.
//
// Параметры:
//  МассивЗадач - Массив из ДокументСсылка.Задача - Задача, по которой необходимо найти подзадачи.
//  ВидПодзадач - СправочникСсылка.ВидыЗадач - Вид подзадач.
// 
// Возвращаемое значение:
//  Массив из ДокументСсылка.Задача - Найденные подзадачи.
//
Функция НайтиМоиПодзадачи(МассивЗадач, ВидПодзадач = Неопределено) Экспорт
	
	Если МассивЗадач.Количество() = 0 Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Задача.Ссылка КАК Подзадача
		|ИЗ
		|	Документ.Задача КАК Задача
		|ГДЕ
		|	Задача.ВышестоящаяЗадача В(&МассивЗадач)
		|	И Задача.ВышестоящееДействие = ЗНАЧЕНИЕ(Документ.ДействиеЗадачи.ПустаяСсылка)
		|	И Задача.ВидЗадачи = &ВидПодзадач
		|	И Задача.ПометкаУдаления = ЛОЖЬ");
	
	Запрос.УстановитьПараметр("МассивЗадач", МассивЗадач);
	
	Если ВидПодзадач <> Неопределено Тогда
		Запрос.УстановитьПараметр("ВидПодзадач", ВидПодзадач);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "	И Задача.ВидЗадачи = &ВидПодзадач", "");
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подзадача");
	
КонецФункции

// Ищет подзадачи по задаче.
//
// Параметры:
//  МассивЗадач - Массив из ДокументСсылка.Задача - Задача, по которой необходимо найти подзадачи.
//  ВидПодзадач - СправочникСсылка.ВидыЗадач - Вид подзадач.
// 
// Возвращаемое значение:
//  Массив из ДокументСсылка.Задача - Найденные подзадачи.
//
Функция НайтиПодзадачи(МассивЗадач, ВидПодзадач = Неопределено) Экспорт
	
	Если МассивЗадач.Количество() = 0 Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Задача.Ссылка КАК Подзадача
		|ИЗ
		|	Документ.Задача КАК Задача
		|ГДЕ
		|	Задача.ВышестоящаяЗадача В(&МассивЗадач)
		|	И Задача.ВидЗадачи = &ВидПодзадач
		|	И Задача.ПометкаУдаления = ЛОЖЬ");
	
	Запрос.УстановитьПараметр("МассивЗадач", МассивЗадач);
	
	Если ВидПодзадач <> Неопределено Тогда
		Запрос.УстановитьПараметр("ВидПодзадач", ВидПодзадач);
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "	И Задача.ВидЗадачи = &ВидПодзадач", "");
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Подзадача");
	
КонецФункции

// Обновляет задачу по состоянию действия.
//
// Параметры:
//  Задача - ДокументСсылка.Задача - Обновляемая задача.
//  ДействиеЗадачиОбъект - ДокументОбъект.ДействиеЗадачи - Действие задачи, которое привело к обновлению задачи.
//  ДействияДляВозврата - Массив из ДокументСсылка.ДействиеЗадачи.
//  Немедленно - Булево.
//
Процедура ОбновитьЗадачуПоСостояниюДействия(Задача, ДействиеЗадачиОбъект, ДействияДляВозврата, Немедленно) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЗадания") И Не Немедленно Тогда
		
		ПараметрыВыполнения = Новый Структура("Задача, ДействияДляВозврата");
		ПараметрыВыполнения.Задача = Задача;
		ПараметрыВыполнения.ДействияДляВозврата = ДействияДляВозврата;
		
		ОбработкаОчередиЗаданийСервер.ДобавитьЗаданиеОбновитьЗадачуПоСостояниюДействия(
			ДействиеЗадачиОбъект.Ссылка,
			ПараметрыВыполнения);
		
		Возврат;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Документ.Задача");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Задача);
		Блокировка.Заблокировать();
		
		ЗадачаОбъект = Задача.ПолучитьОбъект();
		Если ЗначениеЗаполнено(ЗадачаОбъект.Источник) Тогда
			
			ИнтеграцияЗадач.ОбновитьЗадачуПоСостояниюДействия(ДействиеЗадачиОбъект.Ссылка, Немедленно);
			
		Иначе
			
			ДанныеВидаЗадачи = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(ЗадачаОбъект.ВидЗадачи);
			
			Если ДействиеЗадачиОбъект.СостояниеУчастникаЗадачи = ДанныеВидаЗадачи.СостояниеУчастниковПроверено Тогда
				ЗадачаОбъект.Проверить();
			ИначеЕсли ДействиеЗадачиОбъект.СостояниеУчастникаЗадачи = ДанныеВидаЗадачи.СостояниеУчастниковВозвращеноНаДоработку Тогда
				ЗадачаОбъект.ВернутьНаДоработку(ДействияДляВозврата);
			КонецЕсли;
			
			СтароеСостояниеЗадачи = ЗадачаОбъект.СостояниеЗадачи;
			СостояниеПоДаннымДействий = ЗадачаОбъект.СостояниеПоДаннымДействий(ДействиеЗадачиОбъект.ВидДействия);
			НужноОбновитьСостояние = ЗадачаОбъект.СостояниеЗадачи <> СостояниеПоДаннымДействий;
			
			НужноОбновитьДатуНачала =
				Не ЗначениеЗаполнено(ЗадачаОбъект.ДатаНачала)
				И ЗначениеЗаполнено(ДействиеЗадачиОбъект.ДатаНачала);
			
			НужноОбновитьДатуНачалаПоДругимДействиям =
				ЗначениеЗаполнено(ЗадачаОбъект.ДатаНачала)
				И Не ЗначениеЗаполнено(ДействиеЗадачиОбъект.ДатаНачала);
			
			НужноОбновитьДатуВыполнения = 
				(СостояниеПоДаннымДействий = ДанныеВидаЗадачи.СостояниеЗадачиЗакрыта
					Или (ЗначениеЗаполнено(ДанныеВидаЗадачи.СостояниеЗадачиЗакрытаОтрицательно)
						И СостояниеПоДаннымДействий = ДанныеВидаЗадачи.СостояниеЗадачиЗакрытаОтрицательно)
					Или (ЗначениеЗаполнено(ДанныеВидаЗадачи.СостояниеЗадачиЗакрытаСЗамечаниями)
						И СостояниеПоДаннымДействий = ДанныеВидаЗадачи.СостояниеЗадачиЗакрытаСЗамечаниями))
				И Не ЗначениеЗаполнено(ЗадачаОбъект.ДатаВыполнения);
			
			// Сценарий отмены выполнения проверяющим.
			НужноОчиститьДатуВыполнения =
				СостояниеПоДаннымДействий = ДанныеВидаЗадачи.СостояниеЗадачиНаПроверке
				И ЗначениеЗаполнено(ЗадачаОбъект.ДатаВыполнения);
			
			НужноОбновитьЗадачу =
				НужноОбновитьСостояние
				Или НужноОбновитьДатуНачала
				Или НужноОбновитьДатуНачалаПоДругимДействиям
				Или НужноОбновитьДатуВыполнения
				Или НужноОчиститьДатуВыполнения;
			
			Если НужноОбновитьЗадачу Тогда
				
				Если НужноОбновитьСостояние Тогда
					ЗадачаОбъект.УстановитьСостояние(СостояниеПоДаннымДействий, Ложь);
				КонецЕсли;
				
				Если НужноОбновитьДатуНачала Тогда
					ЗадачаОбъект.ДатаНачала = ДействиеЗадачиОбъект.ДатаНачала;
				КонецЕсли;
				
				Если НужноОбновитьДатуНачалаПоДругимДействиям Тогда
					ЗадачаОбъект.ДатаНачала = Документы.ДействиеЗадачи.ДатаНачалаЗадачи(Задача);
				КонецЕсли;
				
				Если НужноОбновитьДатуВыполнения Тогда
					ЗадачаОбъект.ДатаВыполнения = ДействиеЗадачиОбъект.ДатаВыполнения;
				КонецЕсли;
				
				Если НужноОчиститьДатуВыполнения Тогда
					ЗадачаОбъект.ДатаВыполнения = Неопределено;
				КонецЕсли;
				
				ЗадачаОбъект.Записать(РежимЗаписиДокумента.Проведение);
				
				Если (СтароеСостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиЗакрыта
						Или (ЗначениеЗаполнено(ДанныеВидаЗадачи.СостояниеЗадачиЗакрытаОтрицательно)
							И СтароеСостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиЗакрытаОтрицательно)
						Или (ЗначениеЗаполнено(ДанныеВидаЗадачи.СостояниеЗадачиЗакрытаСЗамечаниями)
							И СтароеСостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиЗакрытаСЗамечаниями))
					И ЗадачаОбъект.СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиНаПроверке Тогда
					
					// Сценарий отмены результата проверки.
					ЗадачаОбъект.ВернутьНаПроверку();
					
				ИначеЕсли СтароеСостояниеЗадачи <> ДанныеВидаЗадачи.СостояниеЗадачиНаПроверке
					И ЗадачаОбъект.СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиНаПроверке Тогда
					
					ЗадачаОбъект.ОтправитьНаПроверку();
					
				КонецЕсли;
				
				Если СтароеСостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиНаПроверке
					И (ЗадачаОбъект.СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиНовая
						Или ЗадачаОбъект.СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиВРаботе) Тогда
					
					ЗадачаОбъект.СнятьСПроверки();
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Обновляет задачу при перенаправлении.
//
// Параметры:
//  Задача - ДокументСсылка.Задача - Обновляемая задача.
//  ПеренаправленноеДействие - ДокументСсылка.ДействиеЗадачи - Перенаправленное действие задачи.
//  Немедленно - Булево.
//
Процедура ОбновитьЗадачуПриПеренаправлении(Задача, ПеренаправленноеДействие, Немедленно) Экспорт
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЗадания") И Не Немедленно Тогда
		
		ПараметрыВыполнения = Новый Структура("Задача");
		ПараметрыВыполнения.Задача = Задача;
		
		ОбработкаОчередиЗаданийСервер.ДобавитьЗаданиеОбновитьЗадачуПриПеренаправлении(
			ПеренаправленноеДействие,
			ПараметрыВыполнения);
		
		Возврат;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗадачаОбъект = Задача.ПолучитьОбъект();
	ЗадачаОбъект.ДополнительныеСвойства.Вставить("ОбновлениеПриПеренаправлении", Истина);
	
	ПеренаправленнаяСтрока = Неопределено;
	Для Каждого СтрокаУчастника Из ЗадачаОбъект.Участники Цикл
		
		Если СтрокаУчастника.ДействиеУчастника <> ПеренаправленноеДействие Тогда
			Продолжить;
		КонецЕсли;
		
		ПеренаправленнаяСтрока = СтрокаУчастника;
		
		Прервать;
		
	КонецЦикла;
	
	Если ПеренаправленнаяСтрока = Неопределено Тогда
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Не найдена строка действия %1 в задаче %2.'"),
			ПеренаправленноеДействие,
			Задача);
	КонецЕсли;
	
	ПеренаправленнаяСтрока.Участник = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		ПеренаправленноеДействие,
		"Исполнитель");
	
	ЗадачаОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры

// Возвращает отслеживаемые реквизиты для дополнительного свойства ПредыдущиеЗначенияРеквизитов.
//
// Возвращаемое значение:
//  Строка - Отслеживаемые реквизиты.
//
Функция ОтслеживаемыеРеквизиты() Экспорт
	
	ОтслеживаемыеРеквизиты =
		"Автор, ВышестоящаяЗадача, ВышестоящееДействие, Заголовок, Проведен,
		|СостояниеЗадачи, ПометкаУдаления, Срок, Участники, Приложения";
	
	ОбщегоНазначенияДокументооборот.ДополнитьОтслеживаемыеРеквизиты(
		ОтслеживаемыеРеквизиты,
		РегистрыСведений.РеестрЗадачПоИсполнителям.КэшируемыеРеквизитыЗадач());
	
	ОбщегоНазначенияДокументооборот.ДополнитьОтслеживаемыеРеквизиты(
		ОтслеживаемыеРеквизиты,
		РегистрыНакопления.КоличествоЗадачПоИсполнителям.КэшируемыеРеквизитыЗадач());
		
	ОбщегоНазначенияДокументооборот.ДополнитьОтслеживаемыеРеквизиты(
		ОтслеживаемыеРеквизиты,
		ВажныеРеквизиты());
	
	Возврат ОтслеживаемыеРеквизиты;
	
КонецФункции

// Возвращает важные отслеживаемые реквизиты для дополнительного свойства ПредыдущиеЗначенияРеквизитов.
//
// Возвращаемое значение:
//  Строка - Важные отслеживаемые реквизиты.
//
Функция ВажныеРеквизиты() Экспорт
	
	Возврат "Заголовок, Описание, Приоритет, ДатаНачалаПлан, Срок, Ответственный, Автор, Проект, Приложения, Участники";
	
КонецФункции

// Возвращает важные отслеживаемые реквизиты и их представления.
//
// Возвращаемое значение:
//  Соответствие Из КлючИЗначение - Важные отслеживаемые реквизиты:
//   * Ключ - Строка
//   * Значение - Строка
//
Функция ВажныеРеквизитыПредставления() Экспорт
	
	Реквизиты = Метаданные.Документы.Задача.Реквизиты;
	ТабличныеЧасти = Метаданные.Документы.Задача.ТабличныеЧасти;
	
	ВажныеРеквизиты = ВажныеРеквизиты();
	СоответствиеРеквизитов = Новый Соответствие();
	Для Каждого ВажныйРеквизитИмя Из СтрРазделить(ВажныеРеквизиты, ",") Цикл
		ВажныйРеквизитИмя = СокрЛП(ВажныйРеквизитИмя);
		Реквизит = Неопределено;
		ТабличнаяЧасть = Неопределено;
		Реквизит = Реквизиты.Найти(ВажныйРеквизитИмя);
		Если Реквизит = Неопределено Тогда
			ТабличнаяЧасть = ТабличныеЧасти.Найти(ВажныйРеквизитИмя);
			Если ТабличнаяЧасть <> Неопределено Тогда
				СоответствиеРеквизитов.Вставить(ВажныйРеквизитИмя, ТабличнаяЧасть.Синоним);
			КонецЕсли;
		Иначе
			СоответствиеРеквизитов.Вставить(ВажныйРеквизитИмя, Реквизит.Синоним);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СоответствиеРеквизитов;
	
КонецФункции

// Контекст изменения реквизитов.
// 
// Возвращаемое значение:
//  см. РегистрыСведений.ИсторияЗадач.КонтекстИзмененияЗадачи
//
Функция КонтекстИзмененияРеквизитов() Экспорт
	
	Возврат РегистрыСведений.ИсторияЗадач.КонтекстИзмененияЗадачи();
	
КонецФункции

// Определяет период задачи.
//
// Параметры:
//  ДатаСоздания - Дата - Дата создания.
//  Дата - Дата - Дата задачи.
// 
// Возвращаемое значение:
//  Период - Период задачи.
//
Функция Период(ДатаСоздания, Дата) Экспорт
	
	Если ЗначениеЗаполнено(ДатаСоздания) Тогда
		Возврат ДатаСоздания;
	Иначе
		Возврат Дата;
	КонецЕсли;
	
КонецФункции

// Формирует представление номера задачи.
//
// Параметры:
//  Номер - Строка.
// 
// Возвращаемое значение:
//  Строка - Представление номера задачи.
//
Функция ПредставлениеНомера(Номер) Экспорт
	
	Если СтрНайти(Номер, "-") Тогда
		МассивНомер = СтрРазделить(Номер, "-", Истина);
		ПрефиксСтрокой = МассивНомер[0] + "-";
		НомерСтрокой = МассивНомер[1];
	Иначе
		ПрефиксСтрокой = "";
		НомерСтрокой = Номер;
	КонецЕсли;
	
	ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");
	НомерЧислом = ОписаниеТипаЧисло.ПривестиЗначение(НомерСтрокой);
	
	ПредставлениеНомера = ПрефиксСтрокой + Формат(НомерЧислом, "ЧН=0; ЧГ=0");
	
	Возврат ПредставлениеНомера;
	
КонецФункции

// Определяет, считается ли задача просроченной.
//
// Параметры:
//  Срок - Дата - Срок действия.
//  СостояниеЗадачи - СправочникСсылка.СостоянияЗадач - Состояние задачи.
//  ДатаВыполнения - Дата - Дата выполнения.
// 
// Возвращаемое значение:
//  Булево - Задача считается просроченной.
//
Функция Просрочена(Срок, СостояниеЗадачи, ДатаВыполнения) Экспорт
	
	ВидСостоянияЗадачи = РаботаСЗадачамиПовтИсп.ВидСостоянияЗадач(СостояниеЗадачи);
	Если Не ЗначениеЗаполнено(Срок) Тогда
		
		Возврат Ложь;
		
	ИначеЕсли Перечисления.ВидыСостоянийЗадач.ЭтоВыполненнаяЗадача(ВидСостоянияЗадачи) Тогда
		
		Возврат ДатаВыполнения > Срок;
		
	ИначеЕсли Перечисления.ВидыСостоянийЗадач.ЭтоОжидающаяВыполненияЗадача(ВидСостоянияЗадачи) Тогда
		
		Возврат ТекущаяДатаСеанса() > Срок;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

// Рассчитывает трудоемкость участника указанного вида.
//
// Параметры:
//  ВидУчастника - СправочникСсылка.ВидыУчастниковЗадач - Вид участника.
//  ТрудоемкостьОт - Число - Минимальная трудоемкость задачи.
//  ТрудоемкостьДо - Число - Максимальная трудоемкость задачи.
//  Участники - ДокументТабличнаяЧасть.Задача.Участники, ТаблицаЗначений, РезультатЗапроса - Табличная часть задачи "Участники".
// 
// Возвращаемое значение:
//  Структура - Трудоемкость участника.
//   * От - Число - Трудоемкость минимальная.
//   * До - Число - Трудоемкость максимальная.
//
Функция ТрудоемкостьУчастника(ВидУчастника, ТрудоемкостьОт, ТрудоемкостьДо, Участники) Экспорт
	
	Трудоемкость = Новый Структура("От, До", 0, 0);
	Если Участники = Неопределено Тогда
		Возврат Трудоемкость;
	КонецЕсли;
	
	Если ТипЗнч(Участники) = Тип("ДокументТабличнаяЧасть.Задача.Участники") Тогда
		ТаблицаУчастники = Участники.Выгрузить();
	ИначеЕсли ТипЗнч(Участники) = Тип("ТаблицаЗначений") Тогда
		ТаблицаУчастники = Участники;
	ИначеЕсли ТипЗнч(Участники) = Тип("РезультатЗапроса") Тогда
		ТаблицаУчастники = Участники.Выгрузить();
	Иначе
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестный тип параметра ""Участники"" %1'"),
			ТипЗнч(Участники));
	КонецЕсли;
	
	ЕстьВидУчастника = Ложь;
	ЕстьОтветственный = Ложь;
	ЕстьПроверяющий = Ложь;
	КоличествоИсполнителей = 0;
	Для Каждого СтрокаУчастника Из ТаблицаУчастники Цикл
		
		Если СтрокаУчастника.ВидУчастника = ВидУчастника Тогда
			ЕстьВидУчастника = Истина;
		КонецЕсли;
		
		Если РаботаСЗадачамиПовтИсп.ЭтоОтветственный(СтрокаУчастника.ВидУчастника) Тогда
			
			ЕстьОтветственный = Истина;
			КоличествоИсполнителей = КоличествоИсполнителей + 1;
			
		ИначеЕсли РаботаСЗадачамиПовтИсп.ЭтоПроверяющий(СтрокаУчастника.ВидУчастника) Тогда
			
			ЕстьПроверяющий = Истина;
			
		Иначе
			
			КоличествоИсполнителей = КоличествоИсполнителей + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЕстьВидУчастника Или КоличествоИсполнителей = 0 Тогда
		Возврат Трудоемкость;
	КонецЕсли;
	
	ОставшаясяДоля = 1;
	
	ДоляПроверяющего = ?(ЕстьПроверяющий, 0.2, 0);
	ОставшаясяДоля = ОставшаясяДоля - ДоляПроверяющего;
	
	ДоляОтветственного = ?(ЕстьОтветственный, 0.2, 0);
	ОставшаясяДоля = ОставшаясяДоля - ДоляОтветственного;
	
	ДоляИсполнителя = ОставшаясяДоля / КоличествоИсполнителей;
	ДоляОтветственного = ДоляОтветственного + ДоляИсполнителя;
	
	Если РаботаСЗадачамиПовтИсп.ЭтоОтветственный(ВидУчастника) Тогда
		
		ДоляВидаУчастника = ДоляОтветственного;
		
	ИначеЕсли РаботаСЗадачамиПовтИсп.ЭтоПроверяющий(ВидУчастника) Тогда
		
		ДоляВидаУчастника = ДоляПроверяющего;
		
	Иначе
		
		ДоляВидаУчастника = ДоляИсполнителя;
		
	КонецЕсли;
	
	Трудоемкость.От = ТрудоемкостьОт * ДоляВидаУчастника;
	Трудоемкость.До = ТрудоемкостьДо * ДоляВидаУчастника;
	
	Возврат Трудоемкость;
	
КонецФункции

// Определяет, является ли действие задачи историческим, т.е. оставлено для отражения выполнения
// задачи исполнителем, который из неё был удален.
// 
// Параметры:
//  ДействиеЗадачи - ДокументСсылка.ДействиеЗадачи
// 
// Возвращаемое значение:
//  Булево
// 
Функция ЭтоИсторическоеДействиеЗадачи(ДействиеЗадачи) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗадачаУчастники.Ссылка
		|ИЗ
		|	Документ.Задача.Участники КАК ЗадачаУчастники
		|ГДЕ
		|	ЗадачаУчастники.ДействиеУчастника = &ДействиеЗадачи");
	
	Запрос.УстановитьПараметр("ДействиеЗадачи", ДействиеЗадачи);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ЭтоИсторическоеДействиеЗадачи = РезультатЗапроса.Пустой();
	
	Возврат ЭтоИсторическоеДействиеЗадачи;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

#Область ОбновлениеКэширующихДанных

// Обрабатывает обновление кэширующих данных.
// 
// Параметры:
//  Выборка - ВыборкаИзРезультатаЗапроса - Выборка из очереди обновления кэширующих данных:
//   * ОтметкаВремени - ОпределяемыйТип.ОтметкаВремени.
//   * ЗависимыйОбъектМетаданных - СправочникСсылка.ИдентификаторыОбъектовМетаданных.
//   * ВлияющийОбъектМетаданных - СправочникСсылка.ИдентификаторыОбъектовМетаданных.
//   * КлючВлияющихДанных - ЛюбаяСсылка.
//   * Автор - СправочникСсылка.Пользователи.
//   * ЗагрузкаОбработанныхДанныхИзДругойСистемы - Булево.
//   * ИзмененияВлияющихДанных - ХранилищеЗначения.
//   * Попыток - Число.
//   * ДатаКОбработке - Дата.
// 
Процедура ОбновитьКэширующиеДанные(Выборка) Экспорт
	
	Если ТипЗнч(Выборка.КлючВлияющихДанных) = Тип("СправочникСсылка.Проекты") Тогда
		
		ОбновитьКэширующиеДанныеПоПроекту(Выборка);
		
	ИначеЕсли ТипЗнч(Выборка.КлючВлияющихДанных) = Тип("ДокументСсылка.Задача") Тогда
		
		ОбновитьКэширующиеДанныеПоЗадаче(Выборка.КлючВлияющихДанных);
		
	ИначеЕсли ТипЗнч(Выборка.КлючВлияющихДанных) = Тип("СправочникСсылка.ПолныеРоли") Тогда
		
		ОбновитьКэширующиеДанныеПоРоли(Выборка);
		
	ИначеЕсли ТипЗнч(Выборка.КлючВлияющихДанных) = Тип("СправочникСсылка.Сотрудники") Тогда
		
		ОбновитьКэширующиеДанныеПоСотруднику(Выборка);
		
	ИначеЕсли ТипЗнч(Выборка.КлючВлияющихДанных) = Тип("СправочникСсылка.ЗамещающиеИПомощники") Тогда
		
		ОбновитьКэширующиеДанныеПоЗамещающимИПомощникам(Выборка);
		
	ИначеЕсли РаботаСЗадачами.ЭтоИсточникЗадач(Выборка.КлючВлияющихДанных) Тогда
		
		ИнтеграцияЗадач.ОбновитьЗадачуПоИсточнику(Выборка.КлючВлияющихДанных);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПраваДоступа

// Возвращает строку, содержащую перечисление полей доступа через запятую
// Это перечисление используется в дальнейшем для передачи в метод 
// ОбщегоНазначения.ЗначенияРеквизитовОбъекта()
Функция ПолучитьПоляДоступа() Экспорт
	
	Возврат 
		"Ссылка,
		|Создал,
		|Автор,
		|Источник,
		|Проект,
		|Участники,
		|Источник";
	
КонецФункции

// Проверяет наличие метода.
// 
// Возвращаемое значение:
//  Булево - Есть метод заполнить дескрипторы объекта
Функция ЕстьМетодЗаполнитьДескрипторыОбъекта() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Заполняет переданную таблицу дескрипторов объекта.
// 
Процедура ЗаполнитьДескрипторыОбъекта(ОбъектДоступа, ТаблицаДескрипторов, ПротоколРасчетаПрав = Неопределено) Экспорт
	
	КонтейнерыДескрипторов = Новый ТаблицаЗначений;
	КонтейнерыДескрипторов.Колонки.Добавить("КонтейнерСотрудников");
	КонтейнерыДескрипторов.Колонки.Добавить("Изменение");
	
	// Автор.
	СтрокаКонтейнера = КонтейнерыДескрипторов.Добавить();
	СтрокаКонтейнера.КонтейнерСотрудников = ОбъектДоступа.Автор;
	СтрокаКонтейнера.Изменение = Истина;
	
	// Создавший
	СтрокаКонтейнера = КонтейнерыДескрипторов.Добавить();
	СтрокаКонтейнера.КонтейнерСотрудников = ОбъектДоступа.Создал;
	СтрокаКонтейнера.Изменение = Ложь;
	
	// Участники.
	Если ТипЗнч(ОбъектДоступа.Источник) = Тип("СправочникСсылка.ДействияОзнакомления") Тогда
		ТаблицаУчастников = РегистрыСведений.УчастникиОзнакомлений.УчастникиДействия(ОбъектДоступа.Источник)
	Иначе
		ТаблицаУчастников = ОбъектДоступа.Участники.Выгрузить();
	КонецЕсли;
	
	Для Каждого СтрокаУчастника Из ТаблицаУчастников Цикл
		СтрокаКонтейнера = КонтейнерыДескрипторов.Добавить();
		СтрокаКонтейнера.КонтейнерСотрудников = СтрокаУчастника.Участник;
		СтрокаКонтейнера.Изменение = Ложь;
	КонецЦикла;
	
	// Руководитель проекта.
	Если ЗначениеЗаполнено(ОбъектДоступа.Проект) Тогда
		ПроектКонтейнер = Справочники.ПроектыКонтейнеры.НайтиСоздатьПроектКонтейнер(
			ОбъектДоступа.Проект, Перечисления.СпособВключенияУчастниковПроекта.ТолькоРуководитель);
		СтрокаКонтейнера = КонтейнерыДескрипторов.Добавить();
		СтрокаКонтейнера.КонтейнерСотрудников = ПроектКонтейнер;
		СтрокаКонтейнера.Изменение = Ложь;
	КонецЕсли;
	
	ВсеКонтейнеры = КонтейнерыДескрипторов.ВыгрузитьКолонку("КонтейнерСотрудников");
	ВсеКонтейнеры = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВсеКонтейнеры);
	
	// Все исполнители действий.
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВсеИсполнителиДействийЗадач.Исполнитель КАК Исполнитель
		|ИЗ
		|	Документ.ДействиеЗадачи КАК ДействияЗадач
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ВсеИсполнителиДействийЗадач КАК ВсеИсполнителиДействийЗадач
		|		ПО ВсеИсполнителиДействийЗадач.ДействиеЗадачи = ДействияЗадач.Ссылка
		|ГДЕ
		|	ДействияЗадач.Задача = &Задача
		|	И НЕ ВсеИсполнителиДействийЗадач.Исполнитель В (&ВсеКонтейнеры)");
	Запрос.УстановитьПараметр("Задача", ОбъектДоступа.Ссылка);
	Запрос.УстановитьПараметр("ВсеКонтейнеры", ВсеКонтейнеры);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаКонтейнера = КонтейнерыДескрипторов.Добавить();
		СтрокаКонтейнера.КонтейнерСотрудников = Выборка.Исполнитель;
		СтрокаКонтейнера.Изменение = Ложь;
	КонецЦикла;
	
	// Контролеры.
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Контроль.Контролер
		|ИЗ
		|	Справочник.Контроль КАК Контроль
		|ГДЕ
		|	Контроль.Предмет = &Задача
		|	И Контроль.ПометкаУдаления = ЛОЖЬ");
	Запрос.УстановитьПараметр("Задача", ОбъектДоступа.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаКонтейнера = КонтейнерыДескрипторов.Добавить();
		СтрокаКонтейнера.КонтейнерСотрудников = Выборка.Контролер;
		СтрокаКонтейнера.Изменение = Ложь;
	КонецЦикла;
	
	// Участники процессов.
	ИнтеграцияЗадач.ЗаполнитьКонтейнерыОбъекта(ОбъектДоступа, КонтейнерыДескрипторов);
	
	ДокументооборотПраваДоступа.ДобавитьИндивидуальныеДескрипторы(
		ОбъектДоступа, ТаблицаДескрипторов, КонтейнерыДескрипторов);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПолейПредставления(Поля, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Поля.Добавить("Номер");
	
	Поля.Добавить("ВидЗадачи");
	Поля.Добавить("Источник");
	Поля.Добавить("ВышестоящаяЗадача");
	Поля.Добавить("Заголовок");
	
КонецПроцедуры

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МассивПредставление = Новый Массив;
	Если ЗначениеЗаполнено(Данные.Заголовок) Тогда
		
		МассивПредставление.Добавить(Данные.Заголовок);
		
		Если Не ЗначениеЗаполнено(Данные.Источник)
			И Не ЗначениеЗаполнено(Данные.ВышестоящаяЗадача) Тогда
			
			МассивПредставление.Добавить(СтрШаблон("№ %1", ПредставлениеНомера(Данные.Номер)));
			
		КонецЕсли;
		
	Иначе
		
		МассивПредставление.Добавить(НСтр("ru = 'Новая задача'"));
		
	КонецЕсли;
	
	Представление = СтрСоединить(МассивПредставление, " ");
	
КонецПроцедуры

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	Если ВидФормы = "ФормаОбъекта"
		И Параметры.Свойство("Ключ")
		И ЗначениеЗаполнено(Параметры.Ключ) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если Не ОбщегоНазначения.СсылкаСуществует(Параметры.Ключ) Тогда
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Не удалось перейти по ссылке ""%1"" по причине: Неверно задана навигационная ссылка.'"),
				ПолучитьНавигационнуюСсылку(Параметры.Ключ));
		КонецЕсли;
		
		ЕстьПраво = ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(Параметры.Ключ).Чтение;
		Если Не ЕстьПраво Тогда
			ТестОшибки = НСтр("ru = 'У вас нет прав для просмотра задачи'");
#Если Не ВнешнееСоединение Тогда
			ВызватьИсключение(ТестОшибки, КатегорияОшибки.НарушениеПравДоступа);
#Иначе
			ВызватьИсключение ТестОшибки;
#КонецЕсли
		КонецЕсли;
		
		ИсточникЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Ключ, "Источник");
		
		Если ТипЗнч(ИсточникЗадачи) = Тип("СправочникСсылка.ДействияОзнакомления") Тогда
			
			Параметры.Ключ = ИсточникЗадачи; 
			ДействияСервер.ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка);
			
		ИначеЕсли РаботаСЗадачами.ЭтоИсточникЗадач(ИсточникЗадачи) Тогда
			
			Параметры.Ключ = ИсточникЗадачи;
			ВыбраннаяФорма = ИсточникЗадачи.Метаданные().Формы.ФормаБизнесПроцесса.ПолноеИмя();
			
			МенеджерИсточника = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ИсточникЗадачи);
			МенеджерИсточника.ОбработкаПолученияФормы(
				ВидФормы,
				Параметры,
				ВыбраннаяФорма,
				ДополнительнаяИнформация,
				СтандартнаяОбработка);
			
		Иначе
			
			ВыбраннаяФорма = Метаданные.Документы.Задача.Формы.ФормаЭлемента;
			
		КонецЕсли;
		
	ИначеЕсли ВидФормы = "ФормаВыбора" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Параметры.Вставить("КлючНазначенияИспользования", "ВыборЗадачи");
		
		ВыбраннаяФорма = Метаданные.Документы.Задача.Формы.Задачи;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Обновить кэширующие данные по проекту.
// 
// Параметры:
//  Выборка - ВыборкаИзРезультатаЗапроса.
// 
Процедура ОбновитьКэширующиеДанныеПоПроекту(Выборка)
	
	Если Не Выборка.Долгое Тогда
		ИзмененияВлияющихДанных = Выборка.ИзмененияВлияющихДанных.Получить();
		РегистрыСведений.ОчередьОбновленияКэширующихДанных.Добавить(
			Выборка.ЗависимыйОбъектМетаданных,
			Выборка.ВлияющийОбъектМетаданных,
			Выборка.КлючВлияющихДанных,
			ИзмененияВлияющихДанных,
			Истина);
		Возврат;
	КонецЕсли;
	
	Проект = Выборка.КлючВлияющихДанных; // СправочникСсылка.Проекты
	
	ИзмененияВлияющихДанных = Выборка.ИзмененияВлияющихДанных.Получить();
	
	Если ИзмененияВлияющихДанных <> Неопределено Тогда
		
		ПредыдущиеЗначенияРеквизитов = ИзмененияВлияющихДанных.ПредыдущиеЗначенияРеквизитов;
		НовыеЗначенияРеквизитов = ИзмененияВлияющихДанных.НовыеЗначенияРеквизитов;
		
		ПредыдущееЗначениеПроектАктивен = Справочники.Проекты.ПроектАктивен(
			ПредыдущиеЗначенияРеквизитов.Состояние,
			ПредыдущиеЗначенияРеквизитов.ПометкаУдаления);
			
		НовоеЗначениеПроектАктивен = Справочники.Проекты.ПроектАктивен(
			НовыеЗначенияРеквизитов.Состояние,
			НовыеЗначенияРеквизитов.ПометкаУдаления);
		
		ИзмениласьАктивностьПроекта = ПредыдущееЗначениеПроектАктивен <> НовоеЗначениеПроектАктивен;
		ИзменилсяРуководитель =
			ПредыдущиеЗначенияРеквизитов.Руководитель <> НовыеЗначенияРеквизитов.Руководитель;
		
		ЕстьИзменения = ИзмениласьАктивностьПроекта Или ИзменилсяРуководитель
		
	Иначе
		
		ЕстьИзменения = Истина;
		
	КонецЕсли;
	
	Если Не ЕстьИзменения Тогда
		Возврат;
	КонецЕсли;
	
	ДатаКОбработке = Выборка.ДатаКОбработке;
	Если Не ЗначениеЗаполнено(ДатаКОбработке) Тогда
		ДатаКОбработке = ТекущаяДатаСеанса();
	КонецЕсли;
	
	НомерЦикла = 0;
	ДатаЦикла = ДатаКОбработке;
	
	ЕстьДанныеКОбработке = Истина;
	Пока ЕстьДанныеКОбработке Цикл
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1000
			|	Задача.Ссылка КАК Ссылка,
			|	Задача.Дата КАК Дата
			|ИЗ
			|	Документ.Задача КАК Задача
			|ГДЕ
			|	Задача.Проект = &Проект
			|	И Задача.Дата <= &ДатаКОбработке
			|
			|УПОРЯДОЧИТЬ ПО
			|	Задача.Дата УБЫВ");
		
		Запрос.УстановитьПараметр("Проект", Проект);
		Запрос.УстановитьПараметр("ДатаКОбработке", ДатаКОбработке);
		
		//@skip-check query-in-loop
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			ЕстьДанныеКОбработке = Истина;
			
			НачатьТранзакцию();
			Попытка
				
				ОбновитьКэширующиеДанныеПоЗадаче(ВыборкаДетальныеЗаписи.Ссылка);
				Документы.ДействиеЗадачи.ОбновитьКэширующиеДанныеПоЗадаче(ВыборкаДетальныеЗаписи.Ссылка);
				
				Если ВыборкаДетальныеЗаписи.Дата <> ДатаКОбработке Тогда
					ДатаКОбработке = ВыборкаДетальныеЗаписи.Дата;
					РегистрыСведений.ОчередьОбновленияКэширующихДанных.ОбновитьДатуКОбработке(
						Выборка.ОтметкаВремени,
						Выборка.ЗависимыйОбъектМетаданных,
						Выборка.ВлияющийОбъектМетаданных,
						Выборка.КлючВлияющихДанных,
						ДатаКОбработке);
				КонецЕсли;
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				ОтменитьТранзакцию();
				ВызватьИсключение;
			КонецПопытки;
			
		КонецЦикла;
		
		ЕстьДанныеКОбработке = ВыборкаДетальныеЗаписи.Количество() = 1000;
		Если ЕстьДанныеКОбработке И ДатаЦикла = ДатаКОбработке Тогда
			ВызватьИсключение НСтр("ru = 'Обнаружено зацикливание.'");
		КонецЕсли;
		
		ДатаЦикла = ДатаКОбработке;
		НомерЦикла = НомерЦикла + 1;
		Если НомерЦикла > 10000 Тогда
			ВызватьИсключение НСтр("ru = 'Обнаружено зацикливание.'");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Обновить кэширующие данные по задаче.
// 
// Параметры:
//  Задача - ДокументСсылка.Задача
// 
Процедура ОбновитьКэширующиеДанныеПоЗадаче(Задача)
	
	НачатьТранзакцию();
	Попытка
		
		РегистрыСведений.РеестрЗадачПоАвторам.ОбновитьПоЗадаче(Задача);
		РегистрыНакопления.КоличествоЗадачПоАвторам.ОбновитьПоЗадаче(Задача);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Обновить кэширующие данные по роли.
// 
// Параметры:
//  Выборка - ВыборкаИзРезультатаЗапроса.
// 
Процедура ОбновитьКэширующиеДанныеПоРоли(Выборка)
	
	Если Не Выборка.Долгое Тогда
		ИзмененияВлияющихДанных = Выборка.ИзмененияВлияющихДанных.Получить();
		РегистрыСведений.ОчередьОбновленияКэширующихДанных.Добавить(
			Выборка.ЗависимыйОбъектМетаданных,
			Выборка.ВлияющийОбъектМетаданных,
			Выборка.КлючВлияющихДанных,
			ИзмененияВлияющихДанных,
			Истина);
		Возврат;
	КонецЕсли;
	
	Роль = Выборка.КлючВлияющихДанных; // СправочникСсылка.ПолныеРоли
	
	ДатаКОбработке = Выборка.ДатаКОбработке;
	Если Не ЗначениеЗаполнено(ДатаКОбработке) Тогда
		ДатаКОбработке = ТекущаяДатаСеанса();
	КонецЕсли;
	
	НомерЦикла = 0;
	ДатаЦикла = ДатаКОбработке;
	
	ЕстьДанныеКОбработке = Истина;
	Пока ЕстьДанныеКОбработке Цикл
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1000
			|	Задача.Ссылка КАК Ссылка,
			|	Задача.Дата КАК Дата
			|ИЗ
			|	Документ.Задача КАК Задача
			|ГДЕ
			|	Задача.Автор = &Роль
			|	И Задача.Дата <= &ДатаКОбработке
			|
			|УПОРЯДОЧИТЬ ПО
			|	Задача.Дата УБЫВ");
		
		Запрос.УстановитьПараметр("Роль", Роль);
		Запрос.УстановитьПараметр("ДатаКОбработке", ДатаКОбработке);
		
		//@skip-check query-in-loop
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			ЕстьДанныеКОбработке = Истина;
			
			НачатьТранзакцию();
			Попытка
				
				ОбновитьКэширующиеДанныеПоЗадаче(ВыборкаДетальныеЗаписи.Ссылка);
				
				Если ВыборкаДетальныеЗаписи.Дата <> ДатаКОбработке Тогда
					ДатаКОбработке = ВыборкаДетальныеЗаписи.Дата;
					РегистрыСведений.ОчередьОбновленияКэширующихДанных.ОбновитьДатуКОбработке(
						Выборка.ОтметкаВремени,
						Выборка.ЗависимыйОбъектМетаданных,
						Выборка.ВлияющийОбъектМетаданных,
						Выборка.КлючВлияющихДанных,
						ДатаКОбработке);
				КонецЕсли;
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				ОтменитьТранзакцию();
				ВызватьИсключение;
			КонецПопытки;
			
		КонецЦикла;
		
		ЕстьДанныеКОбработке = ВыборкаДетальныеЗаписи.Количество() = 1000;
		Если ЕстьДанныеКОбработке И ДатаЦикла = ДатаКОбработке Тогда
			ВызватьИсключение НСтр("ru = 'Обнаружено зацикливание.'");
		КонецЕсли;
		
		ДатаЦикла = ДатаКОбработке;
		НомерЦикла = НомерЦикла + 1;
		Если НомерЦикла > 10000 Тогда
			ВызватьИсключение НСтр("ru = 'Обнаружено зацикливание.'");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Обновить кэширующие данные по сотруднику.
// 
// Параметры:
//  Выборка - ВыборкаИзРезультатаЗапроса.
// 
Процедура ОбновитьКэширующиеДанныеПоСотруднику(Выборка)
	
	Если Не Выборка.Долгое Тогда
		ИзмененияВлияющихДанных = Выборка.ИзмененияВлияющихДанных.Получить();
		РегистрыСведений.ОчередьОбновленияКэширующихДанных.Добавить(
			Выборка.ЗависимыйОбъектМетаданных,
			Выборка.ВлияющийОбъектМетаданных,
			Выборка.КлючВлияющихДанных,
			ИзмененияВлияющихДанных,
			Истина);
		Возврат;
	КонецЕсли;
	
	Сотрудник = Выборка.КлючВлияющихДанных; // СправочникСсылка.Сотрудники
	
	ДатаКОбработке = Выборка.ДатаКОбработке;
	Если Не ЗначениеЗаполнено(ДатаКОбработке) Тогда
		ДатаКОбработке = ТекущаяДатаСеанса();
	КонецЕсли;
	
	НомерЦикла = 0;
	ДатаЦикла = ДатаКОбработке;
	
	ЕстьДанныеКОбработке = Истина;
	Пока ЕстьДанныеКОбработке Цикл
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1000
			|	Задача.Ссылка КАК Ссылка,
			|	Задача.Дата КАК Дата
			|ИЗ
			|	Документ.Задача КАК Задача
			|ГДЕ
			|	Задача.Автор = &Сотрудник
			|	И Задача.Дата <= &ДатаКОбработке
			|
			|УПОРЯДОЧИТЬ ПО
			|	Задача.Дата УБЫВ");
		
		Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
		Запрос.УстановитьПараметр("ДатаКОбработке", ДатаКОбработке);
		
		//@skip-check query-in-loop
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			ЕстьДанныеКОбработке = Истина;
			
			НачатьТранзакцию();
			Попытка
				
				ОбновитьКэширующиеДанныеПоЗадаче(ВыборкаДетальныеЗаписи.Ссылка);
				
				Если ВыборкаДетальныеЗаписи.Дата <> ДатаКОбработке Тогда
					ДатаКОбработке = ВыборкаДетальныеЗаписи.Дата;
					РегистрыСведений.ОчередьОбновленияКэширующихДанных.ОбновитьДатуКОбработке(
						Выборка.ОтметкаВремени,
						Выборка.ЗависимыйОбъектМетаданных,
						Выборка.ВлияющийОбъектМетаданных,
						Выборка.КлючВлияющихДанных,
						ДатаКОбработке);
				КонецЕсли;
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				ОтменитьТранзакцию();
				ВызватьИсключение;
			КонецПопытки;
			
		КонецЦикла;
		
		ЕстьДанныеКОбработке = ВыборкаДетальныеЗаписи.Количество() = 1000;
		Если ЕстьДанныеКОбработке И ДатаЦикла = ДатаКОбработке Тогда
			ВызватьИсключение НСтр("ru = 'Обнаружено зацикливание.'");
		КонецЕсли;
		
		ДатаЦикла = ДатаКОбработке;
		НомерЦикла = НомерЦикла + 1;
		Если НомерЦикла > 10000 Тогда
			ВызватьИсключение НСтр("ru = 'Обнаружено зацикливание.'");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Обновить кэширующие данные по замещающему или помощнику.
// 
// Параметры:
//  Выборка - ВыборкаИзРезультатаЗапроса.
// 
Процедура ОбновитьКэширующиеДанныеПоЗамещающимИПомощникам(Выборка)
	
	ЗатронутыеСотрудники = Новый Массив;
	
	ИзмененияВлияющихДанных = Выборка.ИзмененияВлияющихДанных.Получить();
	Если ИзмененияВлияющихДанных <> Неопределено Тогда
		
		ПредыдущиеЗначенияРеквизитов = ИзмененияВлияющихДанных.ПредыдущиеЗначенияРеквизитов;
		НовыеЗначенияРеквизитов = ИзмененияВлияющихДанных.НовыеЗначенияРеквизитов;
		
		Если ЗначениеЗаполнено(НовыеЗначенияРеквизитов.Сотрудник) Тогда
			ЗатронутыеСотрудники.Добавить(НовыеЗначенияРеквизитов.Сотрудник);
		КонецЕсли;
		Если ЗначениеЗаполнено(ПредыдущиеЗначенияРеквизитов.Сотрудник)
			И ПредыдущиеЗначенияРеквизитов.Сотрудник <> НовыеЗначенияРеквизитов.Сотрудник Тогда
			ЗатронутыеСотрудники.Добавить(ПредыдущиеЗначенияРеквизитов.Сотрудник);
		КонецЕсли;
		
		ИзменилсяСотрудник =
			ПредыдущиеЗначенияРеквизитов.Сотрудник <> НовыеЗначенияРеквизитов.Сотрудник;
		
		ИзменилсяЗамещающий =
			ПредыдущиеЗначенияРеквизитов.Замещающий <> НовыеЗначенияРеквизитов.Замещающий;
		
		ИзменилосьДействует =
			ПредыдущиеЗначенияРеквизитов.Действует <> НовыеЗначенияРеквизитов.Действует;
		
		БылиВсеОбласти =
			ПредыдущиеЗначенияРеквизитов.ВопросыЗамещения.Найти(
				Справочники.ОбластиЗамещения.ВсеОбласти, "Область") <> Неопределено;
		БылаОбластьЗадачиПросмотр =
			ПредыдущиеЗначенияРеквизитов.ВопросыЗамещения.Найти(
				Справочники.ОбластиЗамещения.ЗадачиПросмотр, "Область") <> Неопределено;
		БылаОбластьЗадачи =
			ПредыдущиеЗначенияРеквизитов.ВопросыЗамещения.Найти(
				Справочники.ОбластиЗамещения.Задачи, "Область") <> Неопределено;
		ПредыдущееЗначениеЕстьОбласть =
			БылиВсеОбласти Или БылаОбластьЗадачиПросмотр Или БылаОбластьЗадачи;
		
		ЕстьВсеОбласти =
			НовыеЗначенияРеквизитов.ВопросыЗамещения.Найти(
				Справочники.ОбластиЗамещения.ВсеОбласти, "Область") <> Неопределено;
		ЕстьОбластьЗадачиПросмотр =
			НовыеЗначенияРеквизитов.ВопросыЗамещения.Найти(
				Справочники.ОбластиЗамещения.ЗадачиПросмотр, "Область") <> Неопределено;
		ЕстьОбластьЗадачи =
			НовыеЗначенияРеквизитов.ВопросыЗамещения.Найти(
				Справочники.ОбластиЗамещения.Задачи, "Область") <> Неопределено;
		НовоеЗначениеЕстьОбласть =
			ЕстьВсеОбласти Или ЕстьОбластьЗадачиПросмотр Или ЕстьОбластьЗадачи;
			
		ИзмениласьОбласть =
			ПредыдущееЗначениеЕстьОбласть <> НовоеЗначениеЕстьОбласть;
		
		ЕстьИзменения = 
			ИзменилосьДействует
			Или (НовыеЗначенияРеквизитов.Действует
				И (ИзменилсяСотрудник Или ИзменилсяЗамещающий Или ИзмениласьОбласть));
		
		Если Не ЕстьИзменения Тогда
			Возврат;
		КонецЕсли;
		
	Иначе
		
		ЗамещающийИлиПомощник = Выборка.КлючВлияющихДанных; // СправочникСсылка.ЗамещающиеИПомощники
		
		ЗатронутыйСотрудник =
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗамещающийИлиПомощник, "Сотрудник");
		Если ЗначениеЗаполнено(ЗатронутыйСотрудник) Тогда
			ЗатронутыеСотрудники.Добавить(ЗатронутыйСотрудник);
		КонецЕсли;
		
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		Для Каждого ЗатронутыйСотрудник Из ЗатронутыеСотрудники Цикл
			
			РегистрыСведений.ОчередьОбновленияКэширующихДанных.Добавить(
				"Документ.Задача",
				"Документ.Задача",
				ЗатронутыйСотрудник);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
		
КонецПроцедуры

#КонецОбласти

#КонецЕсли