#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ЗаполнениеПроцесса

// Возвращает пустую структуру данных для заполнения.
//
// Возвращаемое значение:
//  Структура
//   * Важность - ПеречислениеСсылка.ВариантыВажностиОбъектов
//   * Наименование - Строка
//   * Исполнители - ТаблицаЗначений
//      - ИдентификаторИсполнителя - УникальныйИдентификатор
//      - Исполнитель - СправочникСсылка.Сотрудники, СправочникСсылка.ПолныеРоли, СправочникСсылка.Пользователи
//      - ВариантУстановкиСрокаИсполнения - ПеречислениеСсылка.ВариантыУстановкиСрокаИсполнения
//      - СрокИсполнения - Дата
//      - СрокИсполненияДни - Число
//      - СрокИсполненияЧасы - Число
//      - СрокИсполненияМинуты - Число
//      - ПорядокСогласования - ПеречислениеСсылка.ПорядокВыполненияЗадач
//   * ВариантСогласования - ПеречислениеСсылка.ВариантыМаршрутизацииЗадач
//   * Автор - СправочникСсылка.Сотрудники, СправочникСсылка.Пользователи
//   * ОбрабатывающийРезультат - СправочникСсылка.Сотрудники, СправочникСсылка.ПолныеРоли
//   * ИдентификаторОбрабатывающегоРезультат - УникальныйИндентификатор
//   * ВариантУстановкиСрокаОбработкиРезультатов - ПеречислениеСсылка.ВариантыУстановкиСрокаИсполнения
//   * СрокОбработкиРезультатов - Дата
//   * СрокОбработкиРезультатовДни - Число
//   * СрокОбработкиРезультатовЧасы - Число
//   * СрокОбработкиРезультатовМинуты - Число
//   * ПодписыватьЭП - Булево
//   * КоличествоИтераций - Число
//   * ТрудозатратыПланИсполнителя - Число
//   * ТрудозатратыПланОбрабатывающегоРезультат - Число
//   * ВедущаяЗадача - ЗадачаСсылка.ЗадачаИсполнителя
//
Функция СтруктураДанныхДляЗаполнения() Экспорт
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Важность", Перечисления.ВариантыВажностиОбъектов.ПустаяСсылка());
	СтруктураДанных.Вставить("Наименование", "");
	
	СтруктураДанных.Вставить("Исполнители", Исполнители.ВыгрузитьКолонки("
		|ИдентификаторИсполнителя,
		|Исполнитель,
		|ВариантУстановкиСрокаИсполнения,
		|СрокИсполнения,
		|СрокИсполненияДни,
		|СрокИсполненияЧасы,
		|СрокИсполненияМинуты,
		|Описание,
		|ПорядокСогласования"));
	
	СтруктураДанных.Вставить("ВариантСогласования", Перечисления.ВариантыМаршрутизацииЗадач.ПустаяСсылка());
	
	СтруктураДанных.Вставить("Автор", Справочники.Сотрудники.ПустаяСсылка());
	
	СтруктураДанных.Вставить("ОбрабатывающийРезультат", Справочники.Сотрудники.ПустаяСсылка());
	СтруктураДанных.Вставить("ИдентификаторОбрабатывающегоРезультат", УникальныйИдентификаторПустой());
	
	СтруктураДанных.Вставить("ВариантУстановкиСрокаОбработкиРезультатов", 
		Перечисления.ВариантыУстановкиСрокаИсполнения.ПустаяСсылка());
	СтруктураДанных.Вставить("СрокОбработкиРезультатов", Дата(1,1,1));
	СтруктураДанных.Вставить("СрокОбработкиРезультатовДни", 0);
	СтруктураДанных.Вставить("СрокОбработкиРезультатовЧасы", 0);
	СтруктураДанных.Вставить("СрокОбработкиРезультатовМинуты", 0);
	
	СтруктураДанных.Вставить("ПодписыватьЭП", Ложь);
	
	СтруктураДанных.Вставить("КоличествоИтераций", 0);
	
	СтруктураДанных.Вставить("ТрудозатратыПланИсполнителя", 0);
	СтруктураДанных.Вставить("ТрудозатратыПланОбрабатывающегорезультат", 0);
	
	СтруктураДанных.Вставить("Предметы", Неопределено);
	
	СтруктураДанных.Вставить("ВедущаяЗадача", Задачи.ЗадачаИсполнителя);
	
	Возврат СтруктураДанных;
	
КонецФункции

// Заполняет бизнес-процесс на основании шаблона бизнес-процесса.
//
// Параметры
//  ШаблонБизнесПроцесса  - шаблон бизнес-процесса
//
Процедура ЗаполнитьПоШаблону(ШаблонБизнесПроцесса) Экспорт
	
	Если ШаблонБизнесПроцесса = Справочники.ШаблоныСогласования.ПоУмолчанию Тогда
		// Не заполняем шаблон в процессе, если это шаблон по умолчанию.
		// Считаем, что процесс создан с нуля.
	ИначеЕсли ШаблонБизнесПроцесса.ШаблонВКомплексномПроцессе 
		И ЗначениеЗаполнено(ШаблонБизнесПроцесса.ИсходныйШаблон) Тогда
		Шаблон = ШаблонБизнесПроцесса.ИсходныйШаблон;
	ИначеЕсли НЕ ШаблонБизнесПроцесса.ШаблонВКомплексномПроцессе Тогда
		Шаблон = ШаблонБизнесПроцесса;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.НаименованиеБизнесПроцесса) Тогда 
		Наименование = ШаблонБизнесПроцесса.НаименованиеБизнесПроцесса;
		НаименованиеСПредметами = МультипредметностьКлиентСервер.ПолучитьНаименованиеСПредметами(СокрЛП(Наименование),
			Предметы);
		Если ЗначениеЗаполнено(НаименованиеСПредметами) И ШаблонБизнесПроцесса.ДобавлятьНаименованиеПредмета Тогда
			Наименование = НаименованиеСПредметами;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.Описание) Тогда 
		Описание = ШаблонБизнесПроцесса.Описание;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.Важность) Тогда 
		Важность = ШаблонБизнесПроцесса.Важность;
	КонецЕсли;
	
	ВестиУчетПлановыхТрудозатратВБизнесПроцессах = ПолучитьФункциональнуюОпцию(
		"ВестиУчетПлановыхТрудозатратВБизнесПроцессах");
	
	ВариантСогласования = ШаблонБизнесПроцесса.ВариантСогласования;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронныеПодписи")  
	   И ПолучитьФункциональнуюОпцию("ИспользоватьВизыСогласования") Тогда 
	 	ПодписыватьЭП = ШаблонБизнесПроцесса.ПодписыватьЭП;
		
		ТипыПредметов = Новый Массив;
		ТипыПредметов.Добавить(Тип("СправочникСсылка.ДокументыПредприятия"));
		ПредметыПодписыватьЭП = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЭтотОбъект, ТипыПредметов,
			Истина);
		
		Если ПредметыПодписыватьЭП.Количество() = 0 Тогда
			ПодписыватьЭП = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// заполнение исполнителей
	Если ШаблонБизнесПроцесса.Исполнители.Количество() > 0 Тогда 
		Исполнители.Очистить();
	КонецЕсли;
	НеобходимоПеренестиНачалоСледующегоШага = Ложь;
	
	ОсновныеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЭтотОбъект,, Истина); 
	
	Для Каждого Строка Из ШаблонБизнесПроцесса.Исполнители Цикл
		
		Если НеобходимоПеренестиНачалоСледующегоШага
			И Строка.ПорядокСогласования = Перечисления.ПорядокВыполненияЗадач.ПослеПредыдущего Тогда
			
			НеобходимоПеренестиНачалоСледующегоШага = Ложь;
		КонецЕсли;
		
		Если НЕ Строка.Условие.Пустая()
			И ШаблонБизнесПроцесса.ИспользоватьУсловия Тогда
			СтрокаПредмета = Предметы.Найти(Строка.ИмяПредметаУсловия, "ИмяПредмета");
			Если СтрокаПредмета = Неопределено Тогда
				Если Строка.ПорядокСогласования = Перечисления.ПорядокВыполненияЗадач.ПослеПредыдущего Тогда
					НеобходимоПеренестиНачалоСледующегоШага = Истина;
				КонецЕсли;
				Продолжить;
			Иначе
				Предмет = СтрокаПредмета.Предмет;
				РезультатПроверкиУсловия = РаботаСАлгоритмамиПроверки.ПроверитьПрименимостьАлгоритмаПроверкиКОбъекту(
					Предмет, Строка.Условие);
				Если НЕ РезультатПроверкиУсловия Тогда
					Если Строка.ПорядокСогласования = Перечисления.ПорядокВыполненияЗадач.ПослеПредыдущего Тогда
						НеобходимоПеренестиНачалоСледующегоШага = Истина;
					КонецЕсли;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.АвтоподстановкиДляПроцессов")
			И ЗначениеЗаполнено(Строка.Исполнитель) Тогда
			
			АвтоподстановкаИсполнитель = ШаблоныБизнесПроцессов.ПолучитьЗначениеАвтоподстановки(
				Строка.Исполнитель, ЭтотОбъект);
		
			Если ТипЗнч(АвтоподстановкаИсполнитель) = Тип("СправочникСсылка.Сотрудники")
				Или ТипЗнч(АвтоподстановкаИсполнитель) = Тип("СправочникСсылка.Пользователи") Тогда 
				
					НоваяСтрока = Исполнители.Добавить();
					НоваяСтрока.Исполнитель = АвтоподстановкаИсполнитель;
					НоваяСтрока.ПорядокСогласования = Строка.ПорядокСогласования;
					НоваяСтрока.ВариантУстановкиСрокаИсполнения = Строка.ВариантУстановкиСрокаИсполнения;
					НоваяСтрока.СрокИсполнения = Строка.СрокИсполнения;
					НоваяСтрока.СрокИсполненияДни = Строка.СрокИсполненияДни;
					НоваяСтрока.СрокИсполненияЧасы = Строка.СрокИсполненияЧасы;
					НоваяСтрока.СрокИсполненияМинуты = Строка.СрокИсполненияМинуты;
					НоваяСтрока.ТрудозатратыПланИсполнителя = ?(ВестиУчетПлановыхТрудозатратВБизнесПроцессах, 
						Строка.ТрудозатратыПланИсполнителя, 0);
				
			ИначеЕсли ТипЗнч(АвтоподстановкаИсполнитель) = Тип("СправочникСсылка.ПолныеРоли") Тогда 	
				
					НоваяСтрока = Исполнители.Добавить();
					НоваяСтрока.Исполнитель = АвтоподстановкаИсполнитель;
					НоваяСтрока.ПорядокСогласования = Строка.ПорядокСогласования;
					НоваяСтрока.ВариантУстановкиСрокаИсполнения = Строка.ВариантУстановкиСрокаИсполнения;
					НоваяСтрока.СрокИсполнения = Строка.СрокИсполнения;
					НоваяСтрока.СрокИсполненияДни = Строка.СрокИсполненияДни;
					НоваяСтрока.СрокИсполненияЧасы = Строка.СрокИсполненияЧасы;
					НоваяСтрока.СрокИсполненияМинуты = Строка.СрокИсполненияМинуты;
					НоваяСтрока.ТрудозатратыПланИсполнителя = ?(ВестиУчетПлановыхТрудозатратВБизнесПроцессах, 
						Строка.ТрудозатратыПланИсполнителя, 0);
				
			ИначеЕсли ТипЗнч(АвтоподстановкаИсполнитель) = Тип("Структура") Тогда 
				
					НоваяСтрока = Исполнители.Добавить();
					НоваяСтрока.Исполнитель = АвтоподстановкаИсполнитель.РольИсполнителя;
					НоваяСтрока.ПорядокСогласования = Строка.ПорядокСогласования;
					НоваяСтрока.ВариантУстановкиСрокаИсполнения = Строка.ВариантУстановкиСрокаИсполнения;
					НоваяСтрока.СрокИсполнения = Строка.СрокИсполнения;
					НоваяСтрока.СрокИсполненияДни = Строка.СрокИсполненияДни;
					НоваяСтрока.СрокИсполненияЧасы = Строка.СрокИсполненияЧасы;
					НоваяСтрока.СрокИсполненияМинуты = Строка.СрокИсполненияМинуты;
					НоваяСтрока.ТрудозатратыПланИсполнителя = ?(ВестиУчетПлановыхТрудозатратВБизнесПроцессах, 
						Строка.ТрудозатратыПланИсполнителя, 0);
				
			ИначеЕсли ТипЗнч(АвтоподстановкаИсполнитель) = Тип("Массив") Тогда 
				
				Для Каждого ЭлементМассива Из АвтоподстановкаИсполнитель Цикл
					
					Если (ТипЗнч(ЭлементМассива) = Тип("СправочникСсылка.Сотрудники") 
						Или ТипЗнч(ЭлементМассива) = Тип("СправочникСсылка.Пользователи")) 
						И ЗначениеЗаполнено(ЭлементМассива) Тогда 
						
							НоваяСтрока = Исполнители.Добавить();
							НоваяСтрока.Исполнитель = ЭлементМассива;
							НоваяСтрока.ПорядокСогласования = Строка.ПорядокСогласования;
							НоваяСтрока.ВариантУстановкиСрокаИсполнения = Строка.ВариантУстановкиСрокаИсполнения;
							НоваяСтрока.СрокИсполнения = Строка.СрокИсполнения;
							НоваяСтрока.СрокИсполненияДни = Строка.СрокИсполненияДни;
							НоваяСтрока.СрокИсполненияЧасы = Строка.СрокИсполненияЧасы;
							НоваяСтрока.СрокИсполненияМинуты = Строка.СрокИсполненияМинуты;
							НоваяСтрока.ТрудозатратыПланИсполнителя = ?(ВестиУчетПлановыхТрудозатратВБизнесПроцессах, 
								Строка.ТрудозатратыПланИсполнителя, 0);
						
					ИначеЕсли ТипЗнч(ЭлементМассива) = Тип("СправочникСсылка.ПолныеРоли")
						И ЗначениеЗаполнено(ЭлементМассива) Тогда 
						
							НоваяСтрока = Исполнители.Добавить();
							НоваяСтрока.Исполнитель = ЭлементМассива;
							НоваяСтрока.ПорядокСогласования = Строка.ПорядокСогласования;
							НоваяСтрока.ВариантУстановкиСрокаИсполнения = Строка.ВариантУстановкиСрокаИсполнения;
							НоваяСтрока.СрокИсполнения = Строка.СрокИсполнения;
							НоваяСтрока.СрокИсполненияДни = Строка.СрокИсполненияДни;
							НоваяСтрока.СрокИсполненияЧасы = Строка.СрокИсполненияЧасы;
							НоваяСтрока.СрокИсполненияМинуты = Строка.СрокИсполненияМинуты;
							НоваяСтрока.ТрудозатратыПланИсполнителя = ?(ВестиУчетПлановыхТрудозатратВБизнесПроцессах, 
								Строка.ТрудозатратыПланИсполнителя, 0);
						
					ИначеЕсли ТипЗнч(ЭлементМассива) = Тип("Структура") Тогда 
						
							НоваяСтрока = Исполнители.Добавить();
							НоваяСтрока.Исполнитель = ЭлементМассива.РольИсполнителя;
							НоваяСтрока.ПорядокСогласования = Строка.ПорядокСогласования;
							НоваяСтрока.ВариантУстановкиСрокаИсполнения = Строка.ВариантУстановкиСрокаИсполнения;
							НоваяСтрока.СрокИсполнения = Строка.СрокИсполнения;
							НоваяСтрока.СрокИсполненияДни = Строка.СрокИсполненияДни;
							НоваяСтрока.СрокИсполненияЧасы = Строка.СрокИсполненияЧасы;
							НоваяСтрока.СрокИсполненияМинуты = Строка.СрокИсполненияМинуты;
							НоваяСтрока.ТрудозатратыПланИсполнителя = ?(ВестиУчетПлановыхТрудозатратВБизнесПроцессах,
								Строка.ТрудозатратыПланИсполнителя, 0);
						
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
		Иначе
				НоваяСтрока = Исполнители.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЕсли;
		
		Если НеобходимоПеренестиНачалоСледующегоШага
			И НоваяСтрока.ПорядокСогласования = Перечисления.ПорядокВыполненияЗадач.ВместеСПредыдущим Тогда
			НоваяСтрока.ПорядокСогласования	= Перечисления.ПорядокВыполненияЗадач.ПослеПредыдущего;
			НеобходимоПеренестиНачалоСледующегоШага = Ложь;
		КонецЕсли;
	КонецЦикла;	
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.ОбрабатывающийРезультат) Тогда 
		
		Если ТипЗнч(ШаблонБизнесПроцесса.ОбрабатывающийРезультат) =
				Тип("СправочникСсылка.АвтоподстановкиДляПроцессов") Тогда
			
			АвтоподстановкаОбрабатывающийРезультат = ШаблоныБизнесПроцессов.ПолучитьЗначениеАвтоподстановки(
				ШаблонБизнесПроцесса.ОбрабатывающийРезультат, ЭтотОбъект);
			
			Если ТипЗнч(АвтоподстановкаОбрабатывающийРезультат) = Тип("СправочникСсылка.Сотрудники")
				Или ТипЗнч(АвтоподстановкаОбрабатывающийРезультат) = Тип("СправочникСсылка.Пользователи")
				Или ТипЗнч(АвтоподстановкаОбрабатывающийРезультат) = Тип("СправочникСсылка.ПолныеРоли") Тогда
				
				ОбрабатывающийРезультат = АвтоподстановкаОбрабатывающийРезультат;
				
			ИначеЕсли ТипЗнч(АвтоподстановкаОбрабатывающийРезультат) = Тип("Структура") Тогда
				
				ОбрабатывающийРезультат = АвтоподстановкаОбрабатывающийРезультат.РольИсполнителя;
				
			ИначеЕсли ТипЗнч(АвтоподстановкаОбрабатывающийРезультат) = Тип("Массив") Тогда 	
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Автоподстановка ""%1"" не может применяться для поля ""%2"", так как возвращает массив пользователей'"),
					ШаблонБизнесПроцесса.ОбрабатывающийРезультат,
					НСтр("ru = 'Обрабатывающий результат'"));
				ВызватьИсключение ТекстСообщения;	
			КонецЕсли;
			
		Иначе
			ОбрабатывающийРезультат = ШаблонБизнесПроцесса.ОбрабатывающийРезультат;
		КонецЕсли;
		
	КонецЕсли;
	
	// Срок обработки результатов
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.ВариантУстановкиСрокаОбработкиРезультатов) Тогда
		ВариантУстановкиСрокаОбработкиРезультатов = ШаблонБизнесПроцесса.ВариантУстановкиСрокаОбработкиРезультатов;
	КонецЕсли;
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.СрокОбработкиРезультатов) Тогда
		СрокОбработкиРезультатов = ШаблонБизнесПроцесса.СрокОбработкиРезультатов;
	КонецЕсли;
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.СрокОбработкиРезультатовДни) Тогда
		СрокОбработкиРезультатовДни = ШаблонБизнесПроцесса.СрокОбработкиРезультатовДни;
	КонецЕсли;
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.СрокОбработкиРезультатовЧасы) Тогда
		СрокОбработкиРезультатовЧасы = ШаблонБизнесПроцесса.СрокОбработкиРезультатовЧасы;
	КонецЕсли;
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.СрокОбработкиРезультатовМинуты) Тогда
		СрокОбработкиРезультатовМинуты = ШаблонБизнесПроцесса.СрокОбработкиРезультатовМинуты;
	КонецЕсли;
	
	// Срок исполнения процесса
	СрокИсполненияПроцесса = ШаблонБизнесПроцесса.СрокИсполненияПроцесса;
	
	// Количество итераций
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.КоличествоИтераций) Тогда
		КоличествоИтераций = ШаблонБизнесПроцесса.КоличествоИтераций;
	КонецЕсли;
	
	// трудозатраты
	Если ВестиУчетПлановыхТрудозатратВБизнесПроцессах Тогда 
		ТрудозатратыПланИсполнителя = ШаблонБизнесПроцесса.ТрудозатратыПланИсполнителя;
		ТрудозатратыПланОбрабатывающегоРезультат = ШаблонБизнесПроцесса.ТрудозатратыПланОбрабатывающегоРезультат;
	КонецЕсли;
	
	РаботаСБизнесПроцессамиВызовСервера.СкопироватьЗначенияДопРеквизитов(ШаблонБизнесПроцесса, ЭтотОбъект);
	
	ДополнительныеСвойства.Вставить("ШаблонДляОтложенногоСтарта", ШаблонБизнесПроцесса);
	
КонецПроцедуры

// Заполняет бизнес-процесс на основании шаблона бизнес-процесса, предмета и автора.
//
// Параметры
//  ШаблонБизнесПроцесса  - шаблон бизнес-процесса
//  Предмет - предмет бизнес-процесса
//  Автор  - автор
//
Процедура ЗаполнитьПоШаблонуИПредмету(ШаблонБизнесПроцесса, ПредметСобытия, АвторСобытия) Экспорт
	
	Мультипредметность.ЗаполнитьПредметыПроцессаПоШаблону(ШаблонБизнесПроцесса, ЭтотОбъект);
	Мультипредметность.ПередатьПредметыПроцессу(ЭтотОбъект, ПредметСобытия, Ложь, Истина);
	ЗаполнитьПоШаблону(ШаблонБизнесПроцесса);
	
	Проект = МультипредметностьПереопределяемый.ПолучитьОсновнойПроектПоПредметам(ПредметСобытия);
	
	Дата = ТекущаяДатаСеанса();
	Автор = АвторСобытия;
	
	Если Не ЗначениеЗаполнено(ОбрабатывающийРезультат) Тогда
		ОбрабатывающийРезультат = АвторСобытия;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет бизнес-процесс на основании проектной задачи
//
Процедура ЗаполнитьПоПроектнойЗадаче(ДанныеЗаполнения) Экспорт 
	
	Проект = ДанныеЗаполнения.Владелец;
	ПроектнаяЗадача = ДанныеЗаполнения;
	
	ДобавлятьНаименованиеПредмета = РаботаСБизнесПроцессами.ДобавлятьНаименованиеПредмета(ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(Наименование)
		Или Наименование = НаименованиеПроцессаПоУмолчанию(ДобавлятьНаименованиеПредмета) Тогда
		
		Наименование = ПроектнаяЗадача.Наименование;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Описание) Тогда 
		Описание = ПроектнаяЗадача.Описание;
	КонецЕсли;
	
	Если Предметы.Количество() = 0 Тогда 
		Предмет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПроектнаяЗадача, "Предмет");
		
		Если Предмет <> Неопределено И Предметы.Найти(Предмет,"Предмет") = Неопределено Тогда
			СтрокаПредметов = Предметы.Добавить();
			СтрокаПредметов.РольПредмета = Перечисления.РолиПредметов.Основной;
			СтрокаПредметов.ИмяПредмета =  МультипредметностьВызовСервера.ПолучитьСсылкуНаИмяПредметаПоСсылкеНаПредмет(
				Предмет, Предметы.ВыгрузитьКолонку("ИмяПредмета"));
			СтрокаПредметов.Предмет = Предмет;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеПроектнойЗадачи = РаботаСПроектами.ПолучитьСрокиПроектнойЗадачи(ПроектнаяЗадача);
	СрокИсполненияУчастника = ДанныеПроектнойЗадачи.ТекущийПланОкончание;
	ВариантСогласования = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно;
	КоличествоИтераций = 1;
	
	Если Исполнители.Количество() = 0 Тогда 
		Для Каждого СтрокаИсполнитель Из ПроектнаяЗадача.Исполнители Цикл 
			Если ТипЗнч(СтрокаИсполнитель.Исполнитель) = Тип("СправочникСсылка.Пользователи") 
			 Или ТипЗнч(СтрокаИсполнитель.Исполнитель) = Тип("СправочникСсылка.ПолныеРоли")
			 Или ТипЗнч(СтрокаИсполнитель.Исполнитель) = Тип("СправочникСсылка.Сотрудники") Тогда 
				
				Если Исполнители.Найти(СтрокаИсполнитель.Исполнитель) = Неопределено Тогда
					НоваяСтрока = Исполнители.Добавить();
					НоваяСтрока.Исполнитель = СтрокаИсполнитель.Исполнитель;
					НоваяСтрока.СрокИсполнения = СрокИсполненияУчастника;
					НоваяСтрока.ВариантУстановкиСрокаИсполнения = Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если СрокОбработкиРезультатов = Дата(1,1,1)
		И СрокОбработкиРезультатовДни = 0
		И СрокОбработкиРезультатовЧасы = 0
		И СрокОбработкиРезультатовМинуты = 0 Тогда
		
		СрокОбработкиРезультатов = СрокИсполненияУчастника;
		ВариантУстановкиСрокаОбработкиРезультатов = 
			Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
	КонецЕсли;
	
	ТрудозатратыПланИсполнителя = РаботаСПроектами.МинимальныеТрудозатратыИсполнителей(ПроектнаяЗадача.Исполнители);
	
КонецПроцедуры

// Обновляет реквизиты активного процесса по переданной структуре
// Параметры:
//  ДанныеОбновления - Структура, см. СтруктураДанныхДляЗаполнения()
//
Процедура ОбновитьАктивныйПроцесс(ДанныеОбновления) Экспорт 
	
	КэшИсполнителей = Новый Соответствие;
	Для Каждого Исполнитель Из Исполнители Цикл
		КэшИсполнителей.Вставить(Исполнитель.ИдентификаторИсполнителя, Исполнитель);
	КонецЦикла;
	
	Если ДанныеОбновления.Важность <> Важность Тогда
		Важность = ДанныеОбновления.Важность;
	КонецЕсли;
	
	Если ДанныеОбновления.Наименование <> Наименование Тогда
		Наименование = ДанныеОбновления.Наименование;
	КонецЕсли;
	
	НовыеИсполнители = Исполнители.ВыгрузитьКолонки();
	Для Каждого Исполнитель Из ДанныеОбновления.Исполнители Цикл
		СтрокаИсполнителя = НовыеИсполнители.Добавить();
		СтрокаИсполнителя.Исполнитель = Исполнитель.Исполнитель;
		СтрокаИсполнителя.ИдентификаторИсполнителя = Исполнитель.ИдентификаторИсполнителя;
		СтрокаИсполнителя.ВариантУстановкиСрокаИсполнения = Исполнитель.ВариантУстановкиСрокаИсполнения;
		СтрокаИсполнителя.СрокИсполнения = Исполнитель.СрокИсполнения;
		СтрокаИсполнителя.СрокИсполненияДни = Исполнитель.СрокИсполненияДни;
		СтрокаИсполнителя.СрокИсполненияЧасы = Исполнитель.СрокИсполненияЧасы;
		СтрокаИсполнителя.СрокИсполненияМинуты = Исполнитель.СрокИсполненияМинуты;
		СтрокаИсполнителя.ПорядокСогласования = Исполнитель.ПорядокСогласования;
		СтрокаИсполнителя.Описание = Исполнитель.Описание;
		
		//Если такой исполнитель уже был в таблице, воссстанавливаем для него этапы и задачи
		СтарыйИсполнитель = КэшИсполнителей.Получить(Исполнитель.ИдентификаторИсполнителя);
		Если СтарыйИсполнитель <> Неопределено Тогда 
			СтрокаИсполнителя.Пройден = СтарыйИсполнитель.Пройден;
			СтрокаИсполнителя.ЗадачаИсполнителя = СтарыйИсполнитель.ЗадачаИсполнителя;
		КонецЕсли;
	КонецЦикла;
	
	ЕстьОтличия = Ложь;
	СрокИзменен = Ложь;
	
	//Если есть отличия исполнителей в старой и новой таблице, замещаем старую новой
	Если Исполнители.Количество() = НовыеИсполнители.Количество() Тогда
		Для Каждого Исполнитель Из НовыеИсполнители Цикл
			ИндексТекущего = НовыеИсполнители.Индекс(Исполнитель);
			СтарыйИсполнитель = Исполнители[ИндексТекущего];
			СрокИзменен = СтарыйИсполнитель.ВариантУстановкиСрокаИсполнения <> Исполнитель.ВариантУстановкиСрокаИсполнения
				Или СтарыйИсполнитель.СрокИсполнения <> Исполнитель.СрокИсполнения 
				Или СтарыйИсполнитель.СрокИсполненияДни <> Исполнитель.СрокИсполненияДни 
				Или СтарыйИсполнитель.СрокИсполненияЧасы <> Исполнитель.СрокИсполненияЧасы 
				Или СтарыйИсполнитель.СрокИсполненияМинуты <> Исполнитель.СрокИсполненияМинуты 
				Или СтарыйИсполнитель.ПорядокСогласования <> Исполнитель.ПорядокСогласования;
				
			Если СтарыйИсполнитель.Исполнитель <> Исполнитель.Исполнитель 
				Или СтарыйИсполнитель.ИдентификаторИсполнителя <> Исполнитель.ИдентификаторИсполнителя Или СрокИзменен
				Или СтарыйИсполнитель.Описание <> Исполнитель.Описание Тогда
					ЕстьОтличия = Истина;
					Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		СрокИзменен = Истина;
		ЕстьОтличия = Истина;
	КонецЕсли;
	
	Если ЕстьОтличия Тогда
		Исполнители.Очистить();
		Исполнители.Загрузить(НовыеИсполнители);
	КонецЕсли;
	
	Если ДанныеОбновления.ВариантСогласования <> ВариантСогласования Тогда
		ВариантСогласования = ДанныеОбновления.ВариантСогласования;
	КонецЕсли;
	
	Если ДанныеОбновления.Автор <> Автор Тогда
		Автор = ДанныеОбновления.Автор;
	КонецЕсли;
	
	Если ДанныеОбновления.ОбрабатывающийРезультат <> ОбрабатывающийРезультат Тогда
		ОбрабатывающийРезультат = ДанныеОбновления.ОбрабатывающийРезультат;
	КонецЕсли;
	
	Если ДанныеОбновления.ИдентификаторОбрабатывающегоРезультат <>
			ИдентификаторОбрабатывающегоРезультат Тогда
		ИдентификаторОбрабатывающегоРезультат = ДанныеОбновления.ИдентификаторОбрабатывающегоРезультат;
	КонецЕсли;
	
	Если ДанныеОбновления.ВариантУстановкиСрокаОбработкиРезультатов <>
		ВариантУстановкиСрокаОбработкиРезультатов Тогда
		ВариантУстановкиСрокаОбработкиРезультатов = 
			ДанныеОбновления.ВариантУстановкиСрокаОбработкиРезультатов;
		СрокИзменен = Истина;
	КонецЕсли;
	
	Если ДанныеОбновления.СрокОбработкиРезультатов <> СрокОбработкиРезультатов Тогда
		СрокОбработкиРезультатов = ДанныеОбновления.СрокОбработкиРезультатов;
		СрокИзменен = Истина;
	КонецЕсли;
	
	Если ДанныеОбновления.СрокОбработкиРезультатовДни <> СрокОбработкиРезультатовДни Тогда
		СрокОбработкиРезультатовДни = ДанныеОбновления.СрокОбработкиРезультатовДни;
		СрокИзменен = Истина;
	КонецЕсли;
	
	Если ДанныеОбновления.СрокОбработкиРезультатовЧасы <> СрокОбработкиРезультатовЧасы Тогда
		СрокОбработкиРезультатовЧасы = ДанныеОбновления.СрокОбработкиРезультатовЧасы;
		СрокИзменен = Истина;
	КонецЕсли;
	
	Если ДанныеОбновления.СрокОбработкиРезультатовМинуты <> СрокОбработкиРезультатовМинуты Тогда
		СрокОбработкиРезультатовМинуты = ДанныеОбновления.СрокОбработкиРезультатовМинуты;
		СрокИзменен = Истина;
	КонецЕсли;
	
	Если ДанныеОбновления.ПодписыватьЭП <> ПодписыватьЭП Тогда
		ПодписыватьЭП = ДанныеОбновления.ПодписыватьЭП;
	КонецЕсли;
	
	Если ДанныеОбновления.КоличествоИтераций <> КоличествоИтераций Тогда
		КоличествоИтераций = Макс(ДанныеОбновления.КоличествоИтераций, НомерИтерации);
	ИначеЕсли КоличествоИтераций < НомерИтерации Тогда
		КоличествоИтераций = НомерИтерации;
	КонецЕсли;
	
	Если ДанныеОбновления.ТрудозатратыПланИсполнителя <> ТрудозатратыПланИсполнителя Тогда
		ТрудозатратыПланИсполнителя = ДанныеОбновления.ТрудозатратыПланИсполнителя;
	КонецЕсли;
	
	Если ДанныеОбновления.ТрудозатратыПланОбрабатывающегоРезультат <> ТрудозатратыПланОбрабатывающегоРезультат Тогда
		ТрудозатратыПланОбрабатывающегоРезультат = ДанныеОбновления.ТрудозатратыПланОбрабатывающегоРезультат;
	КонецЕсли;
	
	Если ДанныеОбновления.ВедущаяЗадача <> ВедущаяЗадача Тогда
		ВедущаяЗадача = ДанныеОбновления.ВедущаяЗадача;
	КонецЕсли;
	
	Если СрокИзменен Тогда
		ПараметрыДляРасчетаСроков = СрокиИсполненияПроцессов.ПараметрыДляРасчетаСроков();
		ПараметрыДляРасчетаСроков.ДатаОтсчета = 
			СрокиИсполненияПроцессов.ДатаОтсчетаДляРасчетаСроковПроцесса(ЭтотОбъект,
				ПредопределенноеЗначение("БизнесПроцесс.Согласование.ТочкаМаршрута.Ознакомиться"));
		ПараметрыДляРасчетаСроков.ТекущаяИтерация = НомерИтерации;
		ПараметрыДляРасчетаСроков.Смещение = СрокиИсполненияПроцессовКорп.СмещенияДатыОтсчета(Ссылка);
		СрокиИсполненияПроцессов.РассчитатьСрокиСогласования(ЭтотОбъект, ПараметрыДляРасчетаСроков);
	КонецЕсли;
	
	Если Модифицированность() Тогда	
		
		СтарыеУчастникиПроцесса = БизнесПроцессыИЗадачиВызовСервера.ТекущиеУчастникиПроцесса(Ссылка);
		
		НачатьТранзакцию();
		Попытка
			
			ПараметрыСеанса.ОтключитьОбновлениеЗадач = Истина;
			
			Записать();
			ИзменитьРеквизитыНевыполненныхЗадач(СтарыеУчастникиПроцесса, Новый Структура);
			
			ИнтеграцияЗадач.ОбновитьЗадачуПоИсточнику(Ссылка);
			ПараметрыСеанса.ОтключитьОбновлениеЗадач = Ложь;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ПараметрыСеанса.ОтключитьОбновлениеЗадач = Ложь;
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СтартПроцесса

Процедура ОтложенныйСтарт() Экспорт
	
	СтартПроцессовСервер.СтартоватьПроцессОтложенно(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОтключитьОтложенныйСтарт() Экспорт
	
	СтартПроцессовСервер.ОтключитьОтложенныйСтарт(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ЗаполнениеПроцесса

// Дополняет описание процесса общим описанием
Процедура ДополнитьОписание(ОбщееОписание) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ОбщееОписание) Тогда
		Возврат;
	КонецЕсли;
	Описание = ОбщееОписание + Символы.ПС + Описание;
	
КонецПроцедуры

#КонецОбласти

#Область СтартПроцесса

// Проверяет что заполнены поля шаблона
Функция ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта() Экспорт
	
	МассивПолей = Новый Массив;
	
	Если Исполнители.Количество() = 0 Тогда
		МассивПолей.Добавить("Исполнители");
	КонецЕсли;	
	
	Возврат МассивПолей;
	
КонецФункции	

#КонецОбласти

#Область ЗадачиПроцессов

// Возвращает признак наличия метода ИзменитьРеквизитыНевыполненныхЗадач
//
Функция ЕстьМетодИзменитьРеквизитыНевыполненныхЗадач() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Обновляет значения реквизитов невыполненных задач 
// при изменении реквизитов бизнес-процесса.
//
Процедура ИзменитьРеквизитыНевыполненныхЗадач(СтарыеУчастникиПроцесса, ПараметрыЗаписи) Экспорт 

	УстановитьПривилегированныйРежим(Истина);
	
	СтарыеИсполнители = СтарыеУчастникиПроцесса.Исполнители;
	
	ДобавлятьНаименованиеПредмета = РаботаСБизнесПроцессами.ДобавлятьНаименованиеПредмета(ЭтотОбъект);
	
	АвторИзменения = Неопределено;
	Если Не ПараметрыЗаписи.Свойство("АвторИзменения", АвторИзменения) Тогда
		АвторИзменения = ПользователиДокументооборот.ОлицетворяемыйПользователь();
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		ПараметрыСеанса.ОтключитьОбновлениеЗадач = Истина;
		
		ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
		ИспользоватьГрафикиРаботы = ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы");
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Задачи.Ссылка,
		|	Задачи.ТочкаМаршрута
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК Задачи
		|ГДЕ
		|	Задачи.БизнесПроцесс = &БизнесПроцесс
		|	И НЕ Задачи.ПометкаУдаления
		|	И НЕ Задачи.Выполнена";
		
		Запрос.УстановитьПараметр("БизнесПроцесс", Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		
		ИзмененыСрокиЗадач = Ложь;
		
		ЕстьНевыполненныеЗадачиВТочкеМаршрутаСогласовать = Ложь;
		
		НеВыполненнаяЗадачаОзнакомиться = Неопределено;
		
		Пока Выборка.Следующий() Цикл
			ЗадачаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ЗадачаОбъект.ДополнительныеСвойства.Вставить("АвторИзменения", АвторИзменения);
			ОпределенНовыйСрокЗадачи = Ложь;
			НаименованиеЗадачи = ЗадачаОбъект.Наименование;
			ОписаниеЗадачи = ЗадачаОбъект.Описание;
			Если ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Ознакомиться Тогда 				
				ЗаполнитьНаименованиеИОписаниеЗадачиОзнакомиться(ЗадачаОбъект);
				
				СтарыйСрокЗадачи = ЗадачаОбъект.СрокИсполнения;
				
				СрокиИсполненияПроцессов.ЗаполнитьСрокИсполненияЗадачи(
					ЗадачаОбъект,
					ВариантУстановкиСрокаОбработкиРезультатов,
					СрокОбработкиРезультатов,
					СрокОбработкиРезультатовДни,
					СрокОбработкиРезультатовЧасы,
					СрокОбработкиРезультатовМинуты);
					
				Если СтарыйСрокЗадачи <> ЗадачаОбъект.СрокИсполнения Тогда
					ИзмененыСрокиЗадач = Истина;
					ОпределенНовыйСрокЗадачи = Истина;
				КонецЕсли;
				
				НеВыполненнаяЗадачаОзнакомиться = Выборка.Ссылка;
				
			Иначе

				НайденнаяСтрока = Исполнители.Найти(ЗадачаОбъект.Ссылка, "ЗадачаИсполнителя");
				Если НайденнаяСтрока <> Неопределено Тогда
					
					СтарыйСрокЗадачи = ЗадачаОбъект.СрокИсполнения;
					
					СрокиИсполненияПроцессов.ЗаполнитьСрокИсполненияЗадачи(
						ЗадачаОбъект,
						НайденнаяСтрока.ВариантУстановкиСрокаИсполнения,
						НайденнаяСтрока.СрокИсполнения,
						НайденнаяСтрока.СрокИсполненияДни,
						НайденнаяСтрока.СрокИсполненияЧасы,
						НайденнаяСтрока.СрокИсполненияМинуты);
						
					Если СтарыйСрокЗадачи <> ЗадачаОбъект.СрокИсполнения Тогда
						ИзмененыСрокиЗадач = Истина;
						ОпределенНовыйСрокЗадачи = Истина;
					КонецЕсли;
					
					ЗаполнитьНаименованиеИОписаниеЗадачи(ЗадачаОбъект, НайденнаяСтрока);
				Иначе
					ЗаполнитьНаименованиеИОписаниеЗадачи(ЗадачаОбъект, Неопределено);	
				КонецЕсли;
				
				ЕстьНевыполненныеЗадачиВТочкеМаршрутаСогласовать = Истина;
			КонецЕсли;
			
			Если ЗадачаОбъект.Наименование = НаименованиеЗадачи И
				 Не ОпределенНовыйСрокЗадачи И
				 ЗадачаОбъект.Важность = Важность И
				 ЗадачаОбъект.Описание = ОписаниеЗадачи И
				 ЗадачаОбъект.Автор = Автор И
				 ЗадачаОбъект.Проект = Проект И
				 ЗадачаОбъект.ПроектнаяЗадача = ПроектнаяЗадача
			Тогда 
				Продолжить;
			КонецЕсли;
			
			ЗаблокироватьДанныеДляРедактирования(ЗадачаОбъект.Ссылка);

			ЗадачаОбъект.Проект = Проект;
			ЗадачаОбъект.ПроектнаяЗадача = ПроектнаяЗадача;
			ЗадачаОбъект.Важность 		= Важность;
			ЗадачаОбъект.Автор 	  		= Автор;
			
			ПереносСроковВыполненияЗадач.ПередатьПричинуИЗаявкуНаПереносаСрока(ЗадачаОбъект, ДополнительныеСвойства);
			
			ЗадачаОбъект.Записать();
		КонецЦикла;
		
		Если ЕстьНевыполненныеЗадачиВТочкеМаршрутаСогласовать Тогда
		
			// обновление исполнителей
			ДобавленныеСтроки = Новый Массив;
			УдаленныеСтроки   = Новый Массив;
			ИзмененныеСтроки  = Новый Массив;
			
			КоличествоСтрок = СтарыеИсполнители.Количество();
			Для Инд = 1 По КоличествоСтрок Цикл
				Строка = СтарыеИсполнители[КоличествоСтрок-Инд];
				Если Строка.Пройден Или Не ЗначениеЗаполнено(Строка.ЗадачаИсполнителя) Тогда 
					СтарыеИсполнители.Удалить(Строка);
				КонецЕсли;	
			КонецЦикла;	
			
			НовыеИсполнители = ЭтотОбъект.Исполнители.Выгрузить();
			КоличествоСтрок = НовыеИсполнители.Количество();
			Для Инд = 1 По КоличествоСтрок Цикл
				Строка = НовыеИсполнители[КоличествоСтрок-Инд];
				Если Строка.Пройден Тогда
					НовыеИсполнители.Удалить(Строка);
				КонецЕсли;
			КонецЦикла;
			
			КоличествоСтрок = НовыеИсполнители.Количество();
			Для Инд = 0 По КоличествоСтрок-1 Цикл
				Строка = НовыеИсполнители[Инд];
				
				Если Инд > 0 Тогда 
					ПредыдущаяСтрока = НовыеИсполнители[Инд-1];
				Иначе
					ПредыдущаяСтрока = Неопределено;
				КонецЕсли;	
				
				Если Не ЗначениеЗаполнено(Строка.ЗадачаИсполнителя) Тогда 
					
					Если ВариантСогласования = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно Тогда 
						ДобавленныеСтроки.Добавить(Строка);
					ИначеЕсли ВариантСогласования = Перечисления.ВариантыМаршрутизацииЗадач.Смешанно 
							И Строка.ПорядокСогласования = Перечисления.ПорядокВыполненияЗадач.ВместеСПредыдущим Тогда 	
						
						Если ПредыдущаяСтрока = Неопределено 
						 Или ЗначениеЗаполнено(ПредыдущаяСтрока.ЗадачаИсполнителя) 
						 Или ДобавленныеСтроки.Найти(ПредыдущаяСтрока) <> Неопределено Тогда 
						
							ДобавленныеСтроки.Добавить(Строка);
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;	
			
			Для Каждого Строка Из НовыеИсполнители Цикл
				Если Не ЗначениеЗаполнено(Строка.ЗадачаИсполнителя) Тогда 
					Продолжить;
				КонецЕсли;	
				
				НайденнаяСтрока = СтарыеИсполнители.Найти(Строка.ЗадачаИсполнителя, "ЗадачаИсполнителя");
				Если НайденнаяСтрока = Неопределено Тогда 
					Продолжить;
				КонецЕсли;	
					
				Если Строка.Исполнитель <> НайденнаяСтрока.Исполнитель Тогда 
					ИзмененныеСтроки.Добавить(Строка);
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого Строка Из СтарыеИсполнители Цикл
				НайденнаяСтрока = НовыеИсполнители.Найти(Строка.ЗадачаИсполнителя, "ЗадачаИсполнителя");
			    Если НайденнаяСтрока = Неопределено Тогда 
					УдаленныеСтроки.Добавить(Строка);
				КонецЕсли;
			КонецЦикла;	
			
			ЕстьДобавленныеСтроки = ДобавленныеСтроки.Количество() > 0;
			ЕстьИзмененныеСтроки = ИзмененныеСтроки.Количество() > 0;
			ЕстьУдаленныеСтроки = УдаленныеСтроки.Количество() > 0;
			
			// добавленные строки
			Для Каждого Строка Из ДобавленныеСтроки Цикл
				
				Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
				Задача.ДополнительныеСвойства.Вставить("АвторИзменения", АвторИзменения);
				ЗаполнитьЗадачуСогласовать(Задача, Строка);
				Задача.Записать();
				
				НайденнаяСтрока = ЭтотОбъект.Исполнители.Найти(Строка.НомерСтроки, "НомерСтроки");
				Если НайденнаяСтрока <> Неопределено Тогда 
					НайденнаяСтрока.ЗадачаИсполнителя = Задача.Ссылка;
				КонецЕсли;
				
				НоваяСтрока = РезультатыСогласования.Добавить();
				НоваяСтрока.НомерИтерации = НомерИтерации;
				НоваяСтрока.ЗадачаИсполнителя = Задача.Ссылка;
				
			КонецЦикла;
			
			Если ЕстьДобавленныеСтроки Тогда 
				Записать();
			КонецЕсли;
			
			// измененные строки
			Для Каждого Строка Из ИзмененныеСтроки Цикл
				Задача = Строка.ЗадачаИсполнителя.ПолучитьОбъект();
				Задача.ДополнительныеСвойства.Вставить("АвторИзменения", АвторИзменения);
				Если Задача.ПринятаКИсполнению Тогда
					Задача.ПринятаКИсполнению = Ложь;
					Задача.ДатаПринятияКИсполнению = '00010101';
				КонецЕсли;
				
				Если ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.Сотрудники") 
					Или ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
					Задача.Исполнитель = Строка.Исполнитель;
					Задача.РольИсполнителя = Неопределено;
				Иначе	
					Задача.Исполнитель = Неопределено;
					Задача.РольИсполнителя = Строка.Исполнитель;
				КонецЕсли;
				
				Задача.Записать();
			КонецЦикла;

			// удаленные строки
			Если ЕстьУдаленныеСтроки Тогда 
			
				Для Каждого Строка Из УдаленныеСтроки Цикл	
					Задача = Строка.ЗадачаИсполнителя.ПолучитьОбъект();
					Задача.ДополнительныеСвойства.Вставить("АвторИзменения", АвторИзменения);
					Задача.ИсключитьИзПроцесса();
				КонецЦикла;	
				Прочитать();
				
				Для Каждого Строка Из УдаленныеСтроки Цикл	
					НайденнаяСтрока = РезультатыСогласования.Найти(Строка.ЗадачаИсполнителя, "ЗадачаИсполнителя");
					Если НайденнаяСтрока <> Неопределено Тогда 
						РезультатыСогласования.Удалить(НайденнаяСтрока);
					КонецЕсли;
				КонецЦикла;
			
			КонецЕсли;
			
			Если ЕстьДобавленныеСтроки Или ЕстьИзмененныеСтроки Или ЕстьУдаленныеСтроки
				Или ИзмененыСрокиЗадач Тогда
				
				Записать();
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НеВыполненнаяЗадачаОзнакомиться) Тогда
			Задача = НеВыполненнаяЗадачаОзнакомиться.ПолучитьОбъект();
			
			Если Задача.Исполнитель <> ОбрабатывающийРезультат Тогда
				
				Если ТипЗнч(ОбрабатывающийРезультат) = Тип("СправочникСсылка.Сотрудники") Тогда
					Задача.Исполнитель = ОбрабатывающийРезультат;
					Задача.РольИсполнителя = Неопределено;
				Иначе	
					Задача.Исполнитель = Неопределено;
					Задача.РольИсполнителя = ОбрабатывающийРезультат;
				КонецЕсли;
				
			КонецЕсли;
			
			Если Задача.Модифицированность() Тогда
				Задача.Записать();			
			КонецЕсли;				
		КонецЕсли;
		
		Если Не (ДополнительныеСвойства.Свойство("ОтключитьОбновлениеЗадач")
			И ДополнительныеСвойства.ОтключитьОбновлениеЗадач) Тогда
			ИнтеграцияЗадач.ОбновитьЗадачуПоИсточнику(Ссылка);
		КонецЕсли;
		ПараметрыСеанса.ОтключитьОбновлениеЗадач = Ложь;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ПараметрыСеанса.ОтключитьОбновлениеЗадач = Ложь;
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры 

#КонецОбласти

#Область Предметы

// Проверяет права участников процесса на предметы этого процесса.
// Если у участников процесса отсутствуют права на предметы, то выводятся сообщения с привязкой
// к карточке процесса.
//
// Параметры
//  ПроцессОбъект - БизнесПроцессОбъект - процесс.
//  Отказ - Булево - в этот параметр помещается значение Истина, если кто-то из участников не имеет
//                   прав на предметы.
//  ПроверятьПриИзменении - Булево - если указано значение Истина, то проверка выполняется только если
//                          изменены участники или предметы процесса, иначе проверка выполняется всегда.
//
Процедура ПроверитьПраваУчастниковПроцессаНаПредметы(
	ПроцессОбъект, Отказ, ПроверятьПриИзменении) Экспорт
	
	Мультипредметность.ПроверитьПраваУчастниковПроцессаНаПредметы(
		ПроцессОбъект, Отказ, ПроверятьПриИзменении);
	
КонецПроцедуры

#КонецОбласти

// Возвращает описание задачи, специфичное для бизнес-процесса
Функция ПолучитьОписаниеУведомленияЗадачи(ЗадачаПроцесса, КодЯзыкаПолучателя) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Задача = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ЗадачаПроцесса,
		"Ссылка, БизнесПроцесс, ТочкаМаршрута, Выполнена, Исполнитель");
	
	Если Задача.БизнесПроцесс <> Ссылка Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Неопределено;
	
	Если Задача.ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Согласовать Тогда
		// Результат предыдущего согласования
		НомерИтерацииЗадачи = Неопределено;
		
		НайденнаяСтрока = РезультатыСогласования.Найти(Задача.Ссылка, "ЗадачаИсполнителя");
		Если НайденнаяСтрока <> Неопределено Тогда 
			НомерИтерацииЗадачи = НайденнаяСтрока.НомерИтерации - 1;
		КонецЕсли;
		
		СтрокиИтерации = РезультатыСогласования.НайтиСтроки(Новый Структура("НомерИтерации", НомерИтерацииЗадачи));
		Для Каждого Строка Из СтрокиИтерации Цикл
			Если Строка.ЗадачаИсполнителя.Исполнитель = Задача.Исполнитель Тогда
				Результат = НСтр("ru = 'Задача была направлена на повторное согласование'", КодЯзыкаПолучателя);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		// Результат согласования
		НайденнаяСтрока = РезультатыСогласования.Найти(Задача.Ссылка, "ЗадачаИсполнителя");
		Если НайденнаяСтрока <> Неопределено Тогда 
			
			Если НайденнаяСтрока.РезультатСогласования = Перечисления.РезультатыСогласования.Согласовано Тогда
				Результат = НСтр("ru = 'Результат согласования: Согласовано'", КодЯзыкаПолучателя);
			ИначеЕсли НайденнаяСтрока.РезультатСогласования = Перечисления.РезультатыСогласования.СогласованоСЗамечаниями Тогда
				Результат = НСтр("ru = 'Результат согласования: Согласовано с замечаниями'", КодЯзыкаПолучателя);
			ИначеЕсли НайденнаяСтрока.РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано Тогда
				Результат = НСтр("ru = 'Результат согласования: Не согласовано'", КодЯзыкаПолучателя);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Задача.ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Ознакомиться Тогда
		// Результат согласования
		НомерИтерацииЗадачи = Неопределено;
		РезультатСогласованияПоЗадаче = Перечисления.РезультатыСогласования.Согласовано;
		
		НайденнаяСтрока = РезультатыОзнакомлений.Найти(Задача.Ссылка, "ЗадачаИсполнителя");
		Если НайденнаяСтрока <> Неопределено Тогда 
			НомерИтерацииЗадачи = НайденнаяСтрока.НомерИтерации;
		КонецЕсли;
		
		СтрокиИтерации = РезультатыСогласования.НайтиСтроки(Новый Структура("НомерИтерации", НомерИтерацииЗадачи));
		Для Каждого Строка Из СтрокиИтерации Цикл
			
			Если Строка.РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано Тогда 
				РезультатСогласованияПоЗадаче = Перечисления.РезультатыСогласования.НеСогласовано;
				Прервать;
			КонецЕсли;
			
			Если Строка.РезультатСогласования = Перечисления.РезультатыСогласования.СогласованоСЗамечаниями Тогда 
				РезультатСогласованияПоЗадаче = Перечисления.РезультатыСогласования.СогласованоСЗамечаниями;
			КонецЕсли;
			
		КонецЦикла;
		
		Если РезультатСогласования = Перечисления.РезультатыСогласования.Согласовано Тогда
			Результат = НСтр("ru = 'Результат согласования: Согласовано'", КодЯзыкаПолучателя);
		ИначеЕсли РезультатСогласования = Перечисления.РезультатыСогласования.СогласованоСЗамечаниями Тогда
			Результат = НСтр("ru = 'Результат согласования: Согласовано с замечаниями'", КодЯзыкаПолучателя);
		ИначеЕсли РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано Тогда
			Результат = НСтр("ru = 'Результат согласования: Не согласовано'", КодЯзыкаПолучателя);
		КонецЕсли;
		
		// Результат ознакомления
		Если Задача.Выполнена Тогда
			
			НайденнаяСтрока = РезультатыОзнакомлений.Найти(Задача.Ссылка, "ЗадачаИсполнителя");
			Если НайденнаяСтрока <> Неопределено Тогда 
				
				Если НайденнаяСтрока.ОтправленоНаПовторноеСогласование Тогда
					РезультатОзнакомления = НСтр("ru = 'Результат ознакомления с результатом согласования: Отправлено на повторное согласование'",
						КодЯзыкаПолучателя);
				Иначе
					РезультатОзнакомления = НСтр("ru = 'Результат ознакомления с результатом согласования: Ознакомился'",
						КодЯзыкаПолучателя);
				КонецЕсли;
				
				ДобавитьЗначениеКСтрокеЧерезРазделитель(
					Результат,
					Символы.ПС,
					РезультатОзнакомления);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Формирует шаблон по процессу
// Параметры:
//	ВладелецШаблона - ссылка на шаблон комплексного процесса или комплексный процесс, который будет владельцем
//		создаваемого шаблона процесса
// Возвращает:
//	Ссылка на созданный шаблон
Функция СоздатьШаблонПоПроцессу(ВладелецШаблона = Неопределено) Экспорт
	
	ИмяТипа = БизнесПроцессы[ЭтотОбъект.Метаданные().Имя].ТипШаблона();	
	ШаблонОбъект = Справочники[СтрЗаменить(ИмяТипа, "Справочник.", "")].СоздатьЭлемент();
	
	// Перенос базовых реквизитов процесса
	ШаблонОбъект.Наименование = Наименование;
	ШаблонОбъект.НаименованиеБизнесПроцесса = Наименование;
	ШаблонОбъект.Описание = Описание;
	ШаблонОбъект.Важность = Важность;
	ШаблонОбъект.ВладелецШаблона = ВладелецШаблона;
	ШаблонОбъект.ВариантСогласования = ВариантСогласования;
	
	ШаблонОбъект.Предметы.Загрузить(Предметы.Выгрузить());
	Для Каждого СтрокаПредмета Из ШаблонОбъект.Предметы Цикл
		Если ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда
			ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СтрокаПредмета.Предмет.Метаданные().ПолноеИмя()).ПустаяСсылка();
		КонецЕсли;
	КонецЦикла;
	ШаблонОбъект.ПредметыЗадач.Загрузить(ПредметыЗадач.Выгрузить());
	
	ВариантыУстановкиСрока = СрокиИсполненияПроцессовКлиентСервер.ВариантыУстановкиСрокаИсполнения();
	
	// Перенос исполнителей
	ШаблонОбъект.Исполнители.Очистить();
	Для Каждого Исполнитель Из Исполнители Цикл
		ИсполнительШаблона = ШаблонОбъект.Исполнители.Добавить();
		ЗаполнитьЗначенияСвойств(
			ИсполнительШаблона,
			Исполнитель,
			"Исполнитель, ПорядокСогласования, СрокИсполненияДни, СрокИсполненияЧасы, СрокИсполненияМинуты");
			
		ИсполнительШаблона.ВариантУстановкиСрокаИсполнения = ВариантыУстановкиСрока.ОтносительныйСрок;
	КонецЦикла;
	
	// Перенос обрабатывающего результат
	ШаблонОбъект.ОбрабатывающийРезультат = ОбрабатывающийРезультат;
	
	// Перенос срока обработки
	ШаблонОбъект.СрокОбработкиРезультатовДни = СрокОбработкиРезультатовДни;
	ШаблонОбъект.СрокОбработкиРезультатовМинуты = СрокОбработкиРезультатовМинуты;
	ШаблонОбъект.СрокОбработкиРезультатовЧасы = СрокОбработкиРезультатовЧасы;
	ШаблонОбъект.ВариантУстановкиСрокаОбработкиРезультатов = ВариантыУстановкиСрока.ОтносительныйСрок;
	
	// Количество итераций
	ШаблонОбъект.КоличествоИтераций = КоличествоИтераций;
	
	ШаблонОбъект.Ответственный = Сотрудники.ОсновнойСотрудник();
	ШаблонОбъект.Записать();
	Возврат ШаблонОбъект.Ссылка;
	
КонецФункции

// Заполнит структуру возврата вместо диалога настроек процесса
//
//Параметры
//  РезультатВыполнения
//
Процедура ЗаполнитьРезультатНастроекПроцесса(СтруктураРезультата) Экспорт
	
	СтруктураРезультата.Вставить("ВариантСогласования", ВариантСогласования);
	
	СтруктураРезультата.Вставить("СрокИсполненияПроцесса", СрокИсполненияПроцесса);
	
	СтруктураРезультата.Вставить("СрокОбработкиРезультатов", СрокОбработкиРезультатов);
	СтруктураРезультата.Вставить("СрокОбработкиРезультатовДни", СрокОбработкиРезультатовДни);
	СтруктураРезультата.Вставить("СрокОбработкиРезультатовЧасы", СрокОбработкиРезультатовЧасы);
	СтруктураРезультата.Вставить("СрокОбработкиРезультатовМинуты", СрокОбработкиРезультатовМинуты);
	СтруктураРезультата.Вставить("ВариантУстановкиСрокаОбработкиРезультатов", ВариантУстановкиСрокаОбработкиРезультатов);
	
	СтруктураРезультата.Вставить("ПричинаПереносаСрока", "");
	
	СтруктураРезультата.Вставить("КоличествоИтераций", КоличествоИтераций);
	
	СтруктураРезультата.Вставить("Исполнители", Новый Массив);
	
	РеквизитыТабЧастиИсполнителиСтрокой = "";
	РеквизитыТабЧастиИсполнители = Ссылка.Метаданные().ТабличныеЧасти.Исполнители.Реквизиты;
	Для Каждого СтрРеквизит Из РеквизитыТабЧастиИсполнители Цикл
		РеквизитыТабЧастиИсполнителиСтрокой = РеквизитыТабЧастиИсполнителиСтрокой + "," + СтрРеквизит.Имя;
	КонецЦикла;
	
	РеквизитыТабЧастиИсполнителиСтрокой = СтрШаблон(
		"%1,ВладелецРоли,ОсновнойОбъектАдресации,ДополнительныйОбъектАдресации", РеквизитыТабЧастиИсполнителиСтрокой);
		
	Для Каждого СтрИсполнитель Из Исполнители Цикл
		СтруктураСтрИсполнителя = Новый Структура(РеквизитыТабЧастиИсполнителиСтрокой);
		ЗаполнитьЗначенияСвойств(СтруктураСтрИсполнителя, СтрИсполнитель);
		СтруктураРезультата.Исполнители.Добавить(СтруктураСтрИсполнителя);
	КонецЦикла;
	
КонецПроцедуры	

// Возвращает итоговый результат согласования, по результатам согласующих.
//
// Воздаваемое значение:
//   ПеречислениеСсылка.РезультатыСогласования
// 
Функция ИтоговыйРезультатСогласования() Экспорт
	
	Если РезультатыСогласования.Количество() = 0 Тогда
		Возврат Перечисления.РезультатыСогласования.ПустаяСсылка();
	КонецЕсли;
	
	ИтоговыйРезультат = Перечисления.РезультатыСогласования.Согласовано;

	Для Каждого СтрокаРезультат Из РезультатыСогласования Цикл
		
		Если СтрокаРезультат.НомерИтерации <> НомерИтерации Тогда
			Продолжить;
		КонецЕсли;
			
		Если СтрокаРезультат.РезультатСогласования =
			Перечисления.РезультатыСогласования.НеСогласовано Тогда
			 
			ИтоговыйРезультат = Перечисления.РезультатыСогласования.НеСогласовано;
			Прервать;
		КонецЕсли;
			
		Если СтрокаРезультат.РезультатСогласования =
			Перечисления.РезультатыСогласования.СогласованоСЗамечаниями Тогда
			 
			ИтоговыйРезультат = Перечисления.РезультатыСогласования.СогласованоСЗамечаниями;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИтоговыйРезультат;
	
КонецФункции

// Возвращает признак завершения обхода согласующих.
// 
// Возвращаемое значение:
// 	Булево - Описание
//
Функция ОбходСогласующихЗавершен() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗадачаИсполнителя.Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс = &Процесс
		|	И ЗадачаИсполнителя.Выполнена = ЛОЖЬ
		|	И ЗадачаИсполнителя.ПометкаУдаления = ЛОЖЬ
		|	И ЗадачаИсполнителя.ИсключенаИзПроцесса = ЛОЖЬ
		|	И ЗадачаИсполнителя.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|	И ЗадачаИсполнителя.ТекущийИсполнитель <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
		|	И ЗадачаИсполнителя.ТекущийИсполнитель <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|	И ЗадачаИсполнителя.ТекущийИсполнитель <> ЗНАЧЕНИЕ(Справочник.ПолныеРоли.ПустаяСсылка)";
	Запрос.УстановитьПараметр("Процесс", Ссылка);
	
	Если Не Запрос.Выполнить().Пустой() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ИтоговыйРезультатСогласования() = Перечисления.РезультатыСогласования.НеСогласовано Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат (Исполнители.Найти(Ложь, "Пройден") = Неопределено);
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если ЭтоНовый() Тогда
		Дата = ТекущаяДатаСеанса();
		Если Не ЗначениеЗаполнено(Автор) Тогда
			Автор = Сотрудники.ОсновнойСотрудник();
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ОбрабатывающийРезультат) Тогда
			ОбрабатывающийРезультат = Сотрудники.ОсновнойСотрудник();
		КонецЕсли;
		Важность = Перечисления.ВариантыВажностиОбъектов.Обычная;
		НомерИтерации = 0;
		ВариантСогласования = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно;
		
		Если Не ЗначениеЗаполнено(Проект) Тогда 
			Проект = РаботаСПроектами.ПолучитьПроектПоУмолчанию();
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеЗаполнения <> Неопределено И ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Тогда
		Мультипредметность.ПередатьПредметыПроцессу(ЭтотОбъект, ДанныеЗаполнения, Ложь, Истина);
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		ЗадачаСсылка = ДанныеЗаполнения;
		ЗаполнитьБизнесПроцессПоЗадаче(ЗадачаСсылка);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("ВедущаяЗадача") Тогда
			ВедущаяЗадача = ДанныеЗаполнения.ВедущаяЗадача;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Важность") Тогда
			Важность = ДанныеЗаполнения.Важность;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Наименование") Тогда
			Наименование = ДанныеЗаполнения.Наименование;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Шаблон") Тогда
			Мультипредметность.ЗаполнитьПредметыПроцессаПоШаблону(ДанныеЗаполнения.Шаблон, ЭтотОбъект);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Предметы") Тогда
			Мультипредметность.ПередатьПредметыПроцессу(ЭтотОбъект, ДанныеЗаполнения.Предметы, Ложь, Истина);
			Проект = МультипредметностьПереопределяемый.ПолучитьОсновнойПроектПоПредметам(ДанныеЗаполнения.Предметы);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("АвторСобытия") Тогда
			Автор = ДанныеЗаполнения.АвторСобытия;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Автор") Тогда
			Автор = ДанныеЗаполнения.Автор;
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("ИдентификаторОбрабатывающегоРезультат") Тогда
			ИдентификаторОбрабатывающегоРезультат = ДанныеЗаполнения.ИдентификаторОбрабатывающегоРезультат;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Шаблон") Тогда
			ЗаполнитьПоШаблону(ДанныеЗаполнения.Шаблон);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ЗадачаИсполнителя") Тогда
			ЗадачаСсылка = ДанныеЗаполнения.ЗадачаИсполнителя;
			ЗаполнитьБизнесПроцессПоЗадаче(ЗадачаСсылка);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ПроектнаяЗадача") Тогда
			ЗаполнитьПоПроектнойЗадаче(ДанныеЗаполнения.ПроектнаяЗадача);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Проект") Тогда
			Проект = ДанныеЗаполнения.Проект;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Исполнители") Тогда
			Если ТипЗнч(ДанныеЗаполнения.Исполнители) = Тип("ТаблицаЗначений") Тогда
				Для Каждого Исполнитель ИЗ ДанныеЗаполнения.Исполнители Цикл
					Строка = Исполнители.Добавить();
					Строка.Исполнитель = Исполнитель.Исполнитель;
					Строка.ИдентификаторИсполнителя = Исполнитель.ИдентификаторИсполнителя;
					Строка.ВариантУстановкиСрокаИсполнения = Исполнитель.ВариантУстановкиСрокаИсполнения;
					Строка.СрокИсполнения = Исполнитель.СрокИсполнения;
					Строка.СрокИсполненияДни = Исполнитель.СрокИсполненияДни;
					Строка.СрокИсполненияЧасы = Исполнитель.СрокИсполненияЧасы;
					Строка.СрокИсполненияМинуты = Исполнитель.СрокИсполненияМинуты;
					Строка.ПорядокСогласования = Исполнитель.ПорядокСогласования;
					Строка.Описание = Исполнитель.Описание;
				КонецЦикла;
			ИначеЕсли ТипЗнч(ДанныеЗаполнения.Исполнители)= Тип("Массив") Тогда
				Для Каждого Исполнитель Из ДанныеЗаполнения.Исполнители Цикл
					Если ТипЗнч(Исполнитель) = Тип("Структура") Тогда
						Строка = Исполнители.Добавить();
						ЗаполнитьЗначенияСвойств(Строка, Исполнитель);
					Иначе
						Строка = Исполнители.Добавить();
						Строка.Исполнитель = Исполнитель;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ВариантСогласования") Тогда
			ВариантСогласования = ДанныеЗаполнения.ВариантСогласования;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ОбрабатывающийРезультат") Тогда
			ОбрабатывающийРезультат = ДанныеЗаполнения.ОбрабатывающийРезультат;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ВариантУстановкиСрокаОбработкиРезультатов") Тогда
			ВариантУстановкиСрокаОбработкиРезультатов = 
				ДанныеЗаполнения.ВариантУстановкиСрокаОбработкиРезультатов;
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("СрокОбработкиРезультатов") Тогда
			СрокОбработкиРезультатов = ДанныеЗаполнения.СрокОбработкиРезультатов;
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("СрокОбработкиРезультатовДни") Тогда
			СрокОбработкиРезультатовДни = ДанныеЗаполнения.СрокОбработкиРезультатовДни;
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("СрокОбработкиРезультатовЧасы") Тогда
			СрокОбработкиРезультатовЧасы = ДанныеЗаполнения.СрокОбработкиРезультатовЧасы;
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("СрокОбработкиРезультатовМинуты") Тогда
			СрокОбработкиРезультатовМинуты = ДанныеЗаполнения.СрокОбработкиРезультатовМинуты;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ПодписыватьЭП") Тогда
			ПодписыватьЭП = ДанныеЗаполнения.ПодписыватьЭП;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("КоличествоИтераций") Тогда
			КоличествоИтераций = ДанныеЗаполнения.КоличествоИтераций;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ТрудозатратыПланИсполнителя") Тогда
			ТрудозатратыПланИсполнителя = ДанныеЗаполнения.ТрудозатратыПланИсполнителя;
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("ТрудозатратыПланОбрабатывающегоРезультат") Тогда
			ТрудозатратыПланОбрабатывающегоРезультат = ДанныеЗаполнения.ТрудозатратыПланОбрабатывающегоРезультат;
		КонецЕсли;
		
		
		ТипыПисем = МультипредметностьПереопределяемый.ПолучитьТипыПисем();
		ОсновныеПисьма = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЭтотОбъект, ТипыПисем, Истина);
		Для Каждого Письмо Из ОсновныеПисьма Цикл
			Тема = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Письмо, "Тема");
			Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Письмо, "Проект");
			Если Не ЗначениеЗаполнено(Наименование) Тогда
				Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Согласовать ""%1""'"),
					Тема);
			КонецЕсли;
			Прервать;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.ПроектныеЗадачи") Тогда 	
		
		ЗаполнитьПоПроектнойЗадаче(ДанныеЗаполнения);
		
	ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(ДанныеЗаполнения) Тогда
		
		Предмет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения, "Предмет");
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Наименование) И Предметы.Количество() > 0 Тогда
		МультипредметностьКлиентСервер.ЗаполнитьНаименованиеПроцесса(ЭтотОбъект, НСтр("ru = 'Согласовать'"));
	КонецЕсли;
	
	БизнесПроцессыИЗадачиСервер.ЗаполнитьГлавнуюЗадачу(ЭтотОбъект, ДанныеЗаполнения);	
		
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты) Экспорт
	
	Если ВариантСогласования = Перечисления.ВариантыМаршрутизацииЗадач.Смешанно Тогда 
		ПроверяемыеРеквизиты.Добавить("Исполнители.ПорядокСогласования");
	КонецЕсли;	
	
	Мультипредметность.ПроверитьКорректностьТиповОсновныхПредметов(ЭтотОбъект, Отказ);
	
	РаботаСПроцессамиПоОбработкамОбъектов.ПроверкаЗапретаНаЗапускПоПредметуИзДругойСистемы(ЭтотОбъект, Отказ);
	
	// Проверка прав участников процесса на предметы
	Если Не РаботаСБизнесПроцессами.ЭтоФоновоеВыполнениеПроцесса() Тогда
		
		ПроверитьПраваУчастниковПроцессаНаПредметы(ЭтотОбъект, Отказ, Стартован);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбычнаяЗапись = Истина;
	ТолькоОбработкаВыполненияЗадачи = Ложь;
	ТолькоОбновлениеРабочейГруппыПроцессов = Ложь;
	Если ДополнительныеСвойства.Свойство("ВидЗаписи") Тогда
		
		ОбычнаяЗапись = Ложь;
		
		ТолькоОбработкаВыполненияЗадачи = (ДополнительныеСвойства.ВидЗаписи =
			"ЗаписьСОбработкойВыполненияЗадачи");
			
		ТолькоОбновлениеРабочейГруппыПроцессов = 
			(ДополнительныеСвойства.ВидЗаписи =
			"ЗаписьСОбновлением_Предметов_ПредметовЗадач_Проекта_ОбщегоСпискаПроцессов_РабочихГруппПредметов_РабочихГруппПроцессов_ДопРеквизитовПоПредметам");
		
		Если Не ТолькоОбработкаВыполненияЗадачи
			И Не ТолькоОбновлениеРабочейГруппыПроцессов Тогда
			
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбычнаяЗапись Или ТолькоОбработкаВыполненияЗадачи Тогда
		// Обработка выполнения задачи
		Если ДополнительныеСвойства.Свойство("ТекущаяЗадача") Тогда
			Если ДополнительныеСвойства.ТекущаяЗадача.ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Согласовать Тогда
				НайденнаяСтрока = РезультатыСогласования.Найти(ДополнительныеСвойства.ТекущаяЗадача, "ЗадачаИсполнителя");
				НайденнаяСтрока.РезультатСогласования = ДополнительныеСвойства.РезультатСогласования;
			ИначеЕсли ДополнительныеСвойства.ТекущаяЗадача.ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Ознакомиться Тогда
				ПовторитьСогласование = ДополнительныеСвойства.ПовторитьСогласование;
				Если ДополнительныеСвойства.Свойство("Исполнители") Тогда
					Исполнители.Очистить();
					Для Каждого СтрИсполнитель Из ДополнительныеСвойства.Исполнители Цикл
						ЗаполнитьЗначенияСвойств(Исполнители.Добавить(), СтрИсполнитель);
					КонецЦикла;
				КонецЕсли;
				Если ДополнительныеСвойства.Свойство("ВариантСогласования") Тогда
					ВариантСогласования = ДополнительныеСвойства.ВариантСогласования;
				КонецЕсли;
				
				Если ДополнительныеСвойства.Свойство("СрокИсполненияПроцесса") Тогда
					СрокИсполненияПроцесса = ДополнительныеСвойства.СрокИсполненияПроцесса;
				КонецЕсли;
				
				Если ДополнительныеСвойства.Свойство("СрокОбработкиРезультатов") Тогда
					СрокОбработкиРезультатов = ДополнительныеСвойства.СрокОбработкиРезультатов;
				КонецЕсли;
				Если ДополнительныеСвойства.Свойство("СрокОбработкиРезультатовДни") Тогда
					СрокОбработкиРезультатовДни = ДополнительныеСвойства.СрокОбработкиРезультатовДни;
				КонецЕсли;
				Если ДополнительныеСвойства.Свойство("СрокОбработкиРезультатовЧасы") Тогда
					СрокОбработкиРезультатовЧасы = ДополнительныеСвойства.СрокОбработкиРезультатовЧасы;
				КонецЕсли;
				Если ДополнительныеСвойства.Свойство("СрокОбработкиРезультатовМинуты") Тогда
					СрокОбработкиРезультатовМинуты = ДополнительныеСвойства.СрокОбработкиРезультатовМинуты;
				КонецЕсли;
				Если ДополнительныеСвойства.Свойство("ВариантУстановкиСрокаОбработкиРезультатов") Тогда
					ВариантУстановкиСрокаОбработкиРезультатов = ДополнительныеСвойства.ВариантУстановкиСрокаОбработкиРезультатов;
				КонецЕсли;
				
				Если ДополнительныеСвойства.Свойство("КоличествоИтераций") Тогда
					КоличествоИтераций = ДополнительныеСвойства.КоличествоИтераций;
				КонецЕсли;
				
				
				НайденнаяСтрока = РезультатыОзнакомлений.Найти(ДополнительныеСвойства.ТекущаяЗадача, "ЗадачаИсполнителя");
				НайденнаяСтрока.ОтправленоНаПовторноеСогласование = ДополнительныеСвойства.ПовторитьСогласование;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбычнаяЗапись
		И Не МиграцияДанныхИзВнешнихСистемСервер.ЭтоОбъектИзДругойСистемы(ИсточникДанных) Тогда
	
		Если Не РаботаСБизнесПроцессамиВызовСервера.ПроверитьПередЗаписью(ЭтотОбъект) Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;	
		
		ПредыдущаяПометкаУдаления = Ложь;
		Если Не Ссылка.Пустая() Тогда
			ПредыдущаяПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ПометкаУдаления");
		КонецЕсли;
		ДополнительныеСвойства.Вставить("ПредыдущаяПометкаУдаления", ПредыдущаяПометкаУдаления);
		
		Если Не Ссылка.Пустая() Тогда
			ПредыдущееСостояние = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Состояние");
			ДополнительныеСвойства.Вставить("ПредыдущееСостояние", ПредыдущееСостояние);
		КонецЕсли;
		
		Если ПометкаУдаления <> ПредыдущаяПометкаУдаления Тогда
			
			РаботаСФайламиВызовСервера.ПометитьНаУдалениеПриложенныеФайлы(Ссылка, ПометкаУдаления);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбычнаяЗапись Или ТолькоОбновлениеРабочейГруппыПроцессов Тогда
		// Обработка рабочей группы
		РаботаСБизнесПроцессамиВызовСервера.СформироватьРабочуюГруппу(ЭтотОбъект);
	КонецЕсли;
	
	Если ОбычнаяЗапись Тогда
		ЗаполнитьПустыеИдентификаторыУчастников();
		ПроверитьУникальностьИдентификаторовУчастников();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияЗадач.ПриЗаписиИсточникаЗадачи(ЭтотОбъект);
	
	Если ДополнительныеСвойства.Свойство("ВидЗаписи") Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаОчередиЗаданийСервер.ПриЗаписиПроцесса(ЭтотОбъект);
	
	ПредыдущаяПометкаУдаления = Ложь;
	Если ДополнительныеСвойства.Свойство("ПредыдущаяПометкаУдаления") Тогда
		ПредыдущаяПометкаУдаления = ДополнительныеСвойства.ПредыдущаяПометкаУдаления;
	КонецЕсли;
	
	Если (ПометкаУдаления <> ПредыдущаяПометкаУдаления)
		И Не МиграцияДанныхИзВнешнихСистемСервер.ЭтоОбъектИзДругойСистемы(ИсточникДанных) Тогда
		
		ПротоколированиеРаботыСотрудников.ЗаписатьПометкуУдаления(Ссылка, ПометкаУдаления);
	КонецЕсли;
	
	СтартПроцессовСервер.ПроцессПриЗаписи(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	РаботаСБизнесПроцессами.ПриКопированииБизнесПроцесса(ОбъектКопирования);
	
	Дата = ТекущаяДатаСеанса();
	Автор = Сотрудники.ОсновнойСотрудник();
	НомерИтерации = 0;
	РезультатыСогласования.Очистить();
	РезультатыОзнакомлений.Очистить();
	ДатаНачала = '00010101';
	ДатаЗавершения = '00010101';
	РезультатСогласования = Неопределено;
	
	Для Каждого Строка Из Исполнители Цикл     
		Строка.Пройден = Ложь;
		Строка.ЗадачаИсполнителя = Неопределено;
	КонецЦикла;	
	
КонецПроцедуры

#Область КартаМаршрута

Процедура СтартПередСтартом(ТочкаМаршрутаБизнесПроцесса, Отказ)
	
	ДатаНачала = ТекущаяДатаСеанса();
	
	РаботаСПроектами.ОтметитьНачалоВыполненияПроектнойЗадачи(ЭтотОбъект);
		
КонецПроцедуры

Процедура ПодготовкаОбработка(ТочкаМаршрутаБизнесПроцесса)
	
	УстановитьПривилегированныйРежим(Истина);
	
	УправлениеМероприятиями.УстановитьСостояниеМероприятияИзБизнесПроцесса(
		ЭтотОбъект,
		БизнесПроцессы.Согласование.ТочкиМаршрута.Подготовка);
	
	НомерИтерации = НомерИтерации + 1;
	ПовторитьСогласование = Ложь;
	Для Каждого Строка Из Исполнители Цикл     
		Строка.Пройден = Ложь;
		Строка.ЗадачаИсполнителя = Неопределено;
		Контроль.УстановитьНовыйИсточникВСтрокеКонтроляПоИсполнителю(Ссылка, Строка, Строка.ЗадачаИсполнителя);
	КонецЦикла;	
	
	РаботаСБизнесПроцессами.ЗаписатьПроцесс(ЭтотОбъект, "ЗаписьСОбновлениемОбщегоСпискаПроцессов");
	
КонецПроцедуры

Процедура СогласоватьПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтандартнаяОбработка = Ложь;
	
	НовыеЗадачиПроцесса = СоздатьЗадачиСогласования();
	Для Каждого ЗадачаПроцесса Из НовыеЗадачиПроцесса Цикл
		ФормируемыеЗадачи.Добавить(ЗадачаПроцесса);
	КонецЦикла;
	РаботаСБизнесПроцессами.ЗаписатьПроцесс(ЭтотОбъект, "ЗаписьСОбновлениемОбщегоСпискаПроцессов");
	
КонецПроцедуры

Процедура СогласоватьПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	
	ДобавитьЗадачуОтложеннаяОбработкаЗавершенияСогласования();
	
КонецПроцедуры

Процедура ОбработкаПроверкиВыполнения(ТочкаМаршрутаБизнесПроцесса, Задача, Результат)
	
	Результат = Истина;
	
КонецПроцедуры

Процедура СогласоватьПередВыполнением(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбработатьЗавершениеЗадачиОтложеннаяПодготовкаСогласования(Задача);
	ОбработатьЗавершениеЗадачиСогласования(Задача);
	
КонецПроцедуры

Процедура УсловиеОбходЗавершен(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Если Не ЗначениеЗаполнено(ВариантСогласования) Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не заполнен вариант согласования процесса ""%1""'"), 
			Строка(Ссылка));
	КонецЕсли;
	
	Результат = ОбходСогласующихЗавершен();
		
КонецПроцедуры

Процедура ОбработкаРезультатаОбработка(ТочкаМаршрутаБизнесПроцесса)
	
	УстановитьПривилегированныйРежим(Истина);
	
	УправлениеМероприятиями.УстановитьСостояниеМероприятияИзБизнесПроцесса(
		ЭтотОбъект,
		БизнесПроцессы.Согласование.ТочкиМаршрута.ОбработкаРезультата);
	
	// результат согласования
	РезультатСогласования = ИтоговыйРезультатСогласования();
	РаботаСБизнесПроцессами.ЗаписатьПроцесс(ЭтотОбъект, "ПростаяЗапись");
	
КонецПроцедуры

Процедура ОзнакомитьсяПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	УстановитьПривилегированныйРежим(Истина);
	СтандартнаяОбработка = Ложь;
	
	ДобавитьЗадачуОтложеннаяПодготовкаОзнакомления(ФормируемыеЗадачи);
	Если ФормируемыеЗадачи.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	Задача = СоздатьЗадачиОзнакомиться();
	Если Задача <> Неопределено Тогда
		ФормируемыеЗадачи.Добавить(Задача);
		РаботаСБизнесПроцессами.ЗаписатьПроцесс(ЭтотОбъект, "ПростаяЗапись");
	КонецЕсли;
	
КонецПроцедуры

Процедура ОзнакомитьсяПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	
	ДобавитьЗадачуОтложеннаяОбработкаЗавершенияОзнакомления();
	
КонецПроцедуры

Процедура ОзнакомитьсяПередВыполнением(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	
	ОбработатьЗавершениеЗадачиОтложеннаяПодготовкаОзнакомления(Задача);
	
КонецПроцедуры

Процедура ПовторитьСогласованиеПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = ПовторитьСогласование;
	
КонецПроцедуры

Процедура ЗавершениеПриЗавершении(ТочкаМаршрутаБизнесПроцесса, Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	ДатаЗавершения = ТекущаяДатаСеанса();
	
	РаботаСПроектами.ОтметитьОкончаниеВыполненияПроектнойЗадачи(ЭтотОбъект);
		
	РаботаСПроцессамиПоДействиямСобытия.ПриЗавершенииПроцесса(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеПроцесса

Процедура ЗаполнитьБизнесПроцессПоЗадаче(ЗадачаСсылка)
	
	РаботаСБизнесПроцессами.ЗаполнитьБизнесПроцессПоЗадаче(ЭтотОбъект, ЗадачаСсылка);
	
КонецПроцедуры	

// Заполняет пустые идентификаторы участников в процессе.
//
Процедура ЗаполнитьПустыеИдентификаторыУчастников()
	
	Для Каждого Строка Из Исполнители Цикл
		Если Строка.ИдентификаторИсполнителя = УникальныйИдентификаторПустой() Тогда
			Строка.ИдентификаторИсполнителя = Новый УникальныйИдентификатор;
		КонецЕсли;
	КонецЦикла;
	
	Если ИдентификаторОбрабатывающегоРезультат = УникальныйИдентификаторПустой() Тогда
		ИдентификаторОбрабатывающегоРезультат = Новый УникальныйИдентификатор;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет уникальность идентификаторов участников процесса.
// Если есть не уникальные значения, то вызывается исключение. 
//
Процедура ПроверитьУникальностьИдентификаторовУчастников()
	
	ПройденныеИдентификаторы = Новый Соответствие();
	ПройденныеИдентификаторы[ИдентификаторОбрабатывающегоРезультат] = Истина;
	
	Для Каждого СтрокаТаблицы Из Исполнители Цикл
		Если ПройденныеИдентификаторы[СтрокаТаблицы.ИдентификаторИсполнителя] <> Неопределено Тогда
			ВызватьИсключение НСтр("ru = 'Идентификаторы участников не уникальны.'",
				ОбщегоНазначения.КодОсновногоЯзыка());
		КонецЕсли;
		ПройденныеИдентификаторы[СтрокаТаблицы.ИдентификаторИсполнителя] = Истина; 
	КонецЦикла;
	
КонецПроцедуры

Функция НаименованиеПроцессаПоУмолчанию(ДобавлятьНаименованиеПредмета)
	
	НаименованиеПоУмолчанию = НСтр("ru = 'Согласовать '");
	
	Если ДобавлятьНаименованиеПредмета Тогда
		НаименованиеПоУмолчанию = МультипредметностьКлиентСервер.ПолучитьНаименованиеСПредметами(
			СокрЛП(НаименованиеПоУмолчанию), Предметы);
	КонецЕсли;
	
	Возврат НаименованиеПоУмолчанию;
	
КонецФункции

#КонецОбласти

#Область СлужебныеЗадачиТочекДействий

// Обрабатывает завершение задачи отложенной подготовки согласования.
//
// Параметры:
//  Задача - ЗадачаСсылка.ЗадачаИсполнителя
//
Процедура ОбработатьЗавершениеЗадачиОтложеннаяПодготовкаСогласования(Задача)
	
	МенеджерПроцесса = БизнесПроцессы.Согласование;
	
	Если Задача <> МенеджерПроцесса.СлужебнаяЗадачаПроцесса(
		Ссылка, МенеджерПроцесса.ТочкиМаршрута.Согласовать,
		МенеджерПроцесса.ИмяЗадачиОтложеннаяПодготовкаСогласования(ЭтотОбъект)) Тогда
		
		Возврат;
	КонецЕсли;
	
	ФормируемыеЗадачи = СоздатьЗадачиСогласования();
	Для Каждого ФормируемаяЗадача Из ФормируемыеЗадачи Цикл
		ФормируемаяЗадача.Записать();
	КонецЦикла;
	
	РаботаСБизнесПроцессами.ЗаписатьПроцесс(ЭтотОбъект, "ЗаписьСОбновлениемОбщегоСпискаПроцессов");
	
КонецПроцедуры

// Добавляет служебную задачу отложенной обработки завершения точки действия Согласовать.
//
Процедура ДобавитьЗадачуОтложеннаяОбработкаЗавершенияСогласования()
	
	МенеджерПроцесса = БизнесПроцессы.Согласование;
	ЗадачаПроцесса = МенеджерПроцесса.СлужебнаяЗадачаПроцесса(
		Ссылка, МенеджерПроцесса.ТочкиМаршрута.Согласовать,
		МенеджерПроцесса.ИмяЗадачиОтложеннаяОбработкаЗавершенияСогласования(ЭтотОбъект));
	
	Если ЗначениеЗаполнено(ЗадачаПроцесса) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавлениеЗадачиОбработано = 
		РаботаСПроцессамиПоДействиямСобытия.ОбработатьДобавлениеЗадачиОтложеннаяОбработкаЗавершенияСогласования(
		ЭтотОбъект);
	
	Если Не ДобавлениеЗадачиОбработано Тогда
		// Стандартная обработка добавления задачи не предусмотрена.
	КонецЕсли;
	
КонецПроцедуры

// Добавляет служебную задачу отложенной подготовки точки действия Ознакомиться.
//
// Параметры:
//  ФормируемыеЗадачи - Массив - список формируемых задач,
//                      который необходимо наполнить создаваемыми задачами.
//                      В него следует поместить объект созданной задачи процесса.
//
Процедура ДобавитьЗадачуОтложеннаяПодготовкаОзнакомления(ФормируемыеЗадачи)
	
	ДобавлениеЗадачиОбработано = 
		РаботаСПроцессамиПоДействиямСобытия.ОбработатьДобавлениеЗадачиОтложеннаяПодготовкаОзнакомления(
		ЭтотОбъект, ФормируемыеЗадачи);
	
	Если Не ДобавлениеЗадачиОбработано Тогда
		// Стандартная обработка добавления задачи не предусмотрена.
	КонецЕсли;
	
КонецПроцедуры

// Обрабатывает завершение задачи отложенной подготовки ознакомления.
//
// Параметры:
//  Задача - ЗадачаСсылка.ЗадачаИсполнителя
//
Процедура ОбработатьЗавершениеЗадачиОтложеннаяПодготовкаОзнакомления(Задача)
	
	МенеджерПроцесса = БизнесПроцессы.Согласование;
	
	Если Задача <> МенеджерПроцесса.СлужебнаяЗадачаПроцесса(
		Ссылка, МенеджерПроцесса.ТочкиМаршрута.Ознакомиться,
		МенеджерПроцесса.ИмяЗадачиОтложеннаяПодготовкаОзнакомления(ЭтотОбъект)) Тогда
		
		Возврат;
	КонецЕсли;
	
	ФормируемаяЗадача = СоздатьЗадачиОзнакомиться();
	ФормируемаяЗадача.Записать();
	РаботаСБизнесПроцессами.ЗаписатьПроцесс(ЭтотОбъект, "ПростаяЗапись");
	
КонецПроцедуры

// Добавляет служебную задачу отложенной обработки завершения точки действия Ознакомления.
//
Процедура ДобавитьЗадачуОтложеннаяОбработкаЗавершенияОзнакомления()
	
	Если ПовторитьСогласование Тогда
		//  код ниже делаем только при завершении процесса. (удаление комментариев)
		// при заходе на след цикл - не делаем
		Возврат; 
	КонецЕсли;	
	
	МенеджерПроцесса = БизнесПроцессы.Согласование;
	ЗадачаПроцесса = МенеджерПроцесса.СлужебнаяЗадачаПроцесса(
		Ссылка, МенеджерПроцесса.ТочкиМаршрута.Ознакомиться,
		МенеджерПроцесса.ИмяЗадачиОтложеннаяОбработкаЗавершенияОзнакомления(ЭтотОбъект));
	
	Если ЗначениеЗаполнено(ЗадачаПроцесса) Тогда
		Возврат;
	КонецЕсли;
	
	ДобавлениеЗадачиОбработано = 
		РаботаСПроцессамиПоДействиямСобытия.ОбработатьДобавлениеЗадачиОтложеннаяОбработкаЗавершенияОзнакомления(
		ЭтотОбъект);
	
	Если Не ДобавлениеЗадачиОбработано Тогда
		// Стандартная обработка добавления задачи не предусмотрена.
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗадачиУчастников

// Создает задачи согласования согласно настройкам в таблице Исполнители.
//
// Возвращаемое значение:
//  Массив из ЗадачаОбъект.ЗадачаИсполнителя - созданные, но не записанные задачи процессов.
//
Функция СоздатьЗадачиСогласования()
	
	ФормируемыеЗадачи = Новый Массив;
	
	МассивСтрок = Новый Массив;
	Если ВариантСогласования = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно Тогда 
		Для Каждого Строка Из Исполнители Цикл
			МассивСтрок.Добавить(Строка);
		КонецЦикла;	
		
	ИначеЕсли ВариантСогласования = Перечисления.ВариантыМаршрутизацииЗадач.Последовательно Тогда 
		Для Каждого Строка Из Исполнители Цикл
			Если Строка.Пройден Тогда 
				Продолжить;
			КонецЕсли;	
				
			МассивСтрок.Добавить(Строка);
			Прервать;
		КонецЦикла;	
	
	ИначеЕсли ВариантСогласования = Перечисления.ВариантыМаршрутизацииЗадач.Смешанно Тогда 
		Строки = Исполнители.НайтиСтроки(Новый Структура("Пройден", Ложь));
		Если Строки.Количество() > 0 Тогда 
			МассивСтрок.Добавить(Строки[0]);
		КонецЕсли;	
		
		Для Инд = 1 По Строки.ВГраница() Цикл
			Если Строки[Инд].ПорядокСогласования = Перечисления.ПорядокВыполненияЗадач.ВместеСПредыдущим Тогда 
				МассивСтрок.Добавить(Строки[Инд]);
			Иначе	
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Строка Из МассивСтрок Цикл
		
		Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
		ЗаполнитьЗадачуСогласовать(Задача, Строка);
		
		ЗадачаСсылка = Задачи.ЗадачаИсполнителя.ПолучитьСсылку();
		Задача.УстановитьСсылкуНового(ЗадачаСсылка);
		
		ФормируемыеЗадачи.Добавить(Задача);
		
		Строка.ЗадачаИсполнителя = ЗадачаСсылка;
		Контроль.УстановитьНовыйИсточникВСтрокеКонтроляПоИсполнителю(Ссылка, Строка, Строка.ЗадачаИсполнителя);
		
		НоваяСтрока = РезультатыСогласования.Добавить();
		НоваяСтрока.НомерИтерации = НомерИтерации;
		НоваяСтрока.ЗадачаИсполнителя = ЗадачаСсылка;
		
	КонецЦикла;
	
	Возврат ФормируемыеЗадачи;
	
КонецФункции

// Заполняет задачу Согласовать по данными строки таблицы Исполнители
//
// Параметры:
//  Задача - ЗадачаОбъект.ЗадачаИсполнителя - заполняемая задача.
//  Строка - СтрокаТабличнойЧасти
//
Процедура ЗаполнитьЗадачуСогласовать(Задача, Строка)
	
	Задача.Дата 	= ТекущаяДатаСеанса();
	Задача.Автор 	= Автор;
	Задача.Описание = Описание;
	Задача.Важность = Важность;	
	Если ЗначениеЗаполнено(Состояние) Тогда
		Задача.СостояниеБизнесПроцесса = Состояние;
	КонецЕсли;
	Мультипредметность.ЗадачаПередСозданием(
		ЭтотОбъект, Задача, БизнесПроцессы.Согласование.ТочкиМаршрута.Согласовать);
	
	Задача.БизнесПроцесс = ЭтотОбъект.Ссылка;
	Задача.ТочкаМаршрута = БизнесПроцессы.Согласование.ТочкиМаршрута.Согласовать;
		
	Задача.Проект = Проект;
	Задача.ПроектнаяЗадача = ПроектнаяЗадача;
	
	Если ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.Сотрудники")
		Или ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
		Задача.Исполнитель = Строка.Исполнитель;
	Иначе
		Задача.РольИсполнителя = Строка.Исполнитель;
	КонецЕсли;
	Задача.ИдентификаторИсполнителя = Строка.ИдентификаторИсполнителя;
	ЗаполнитьНаименованиеИОписаниеЗадачи(Задача, Строка);
	
	// Определение срока исполнения
	СрокиИсполненияПроцессов.ЗаполнитьСрокИсполненияЗадачи(
		Задача,
		Строка.ВариантУстановкиСрокаИсполнения,
		Строка.СрокИсполнения,
		Строка.СрокИсполненияДни,
		Строка.СрокИсполненияЧасы,
		Строка.СрокИсполненияМинуты);
	
	РаботаСБизнесПроцессамиВызовСервера.СкопироватьЗначенияДопРеквизитов(Задача.БизнесПроцесс, Задача);
	
КонецПроцедуры

Процедура ЗаполнитьНаименованиеИОписаниеЗадачи(Задача, ПараметрыСтроки = Неопределено)
	
	Если ПараметрыСтроки = Неопределено Тогда
		ПараметрыСтроки = Новый Структура;
		ПараметрыСтроки.Вставить("Описание", "");
	КонецЕсли;

	ПредметыСтрокой = МультипредметностьКлиентСервер.ПредметыСтрокой(Задача.Предметы, Истина, Ложь);
	НаименованиеИОписаниеПоДействию = РаботаСПроцессамиПоДействиям.НаименованиеИОписаниеЗадачиПоДействию(
		Задача, ПредметыСтрокой, Истина);
	
	// Описание может быть перехвачено в действии, поэтому берем его, если задано.
	Если ЗначениеЗаполнено(Описание) И ЗначениеЗаполнено(ПараметрыСтроки.Описание) Тогда
		Задача.Описание = Описание + Символы.ПС + ПараметрыСтроки.Описание;
	ИначеЕсли ЗначениеЗаполнено(ПараметрыСтроки.Описание) Тогда
		Задача.Описание = ПараметрыСтроки.Описание;
	ИначеЕсли ЗначениеЗаполнено(Описание) Тогда
		Задача.Описание = Описание;
	ИначеЕсли НаименованиеИОписаниеПоДействию <> Неопределено 
		И ЗначениеЗаполнено(НаименованиеИОписаниеПоДействию.Описание) Тогда
		Задача.Описание = НаименованиеИОписаниеПоДействию.Описание;
	КонецЕсли;
	
	Если НаименованиеИОписаниеПоДействию <> Неопределено
		И ЗначениеЗаполнено(НаименованиеИОписаниеПоДействию.Наименование) Тогда
		Задача.Наименование = НаименованиеИОписаниеПоДействию.Наименование;

	Иначе
		Задача.Наименование = Наименование;
	КонецЕсли;

КонецПроцедуры

// Обрабатывает завершение задачи согласования, выполняя необходимые
// изменения в процессе.
//
// Параметры:
//  Задача - ЗадачаСсылка.ЗадачаИсполнителя
//
Процедура ОбработатьЗавершениеЗадачиСогласования(Задача)
	
	НайденнаяСтрока = Исполнители.Найти(Задача, "ЗадачаИсполнителя");
	Если НайденнаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НайденнаяСтрока.Пройден = Истина;
	РаботаСБизнесПроцессами.ЗаписатьПроцесс(ЭтотОбъект, "ПростаяЗапись");
	
КонецПроцедуры

// Создает задачу ознакомиться, выполняя необходимые изменения
// в процессе.
//
// Возвращаемое значение:
//  ЗадачаОбъект.ЗадачаИсполнителя
//
Функция СоздатьЗадачиОзнакомиться()
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Если процесс завершился положительно, то задачу ознакомления не формируем.
	Если РезультатСогласования = Перечисления.РезультатыСогласования.Согласовано Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
	ЗаполнитьЗадачуОзнакомиться(Задача);
	
	ЗадачаСсылка = Задачи.ЗадачаИсполнителя.ПолучитьСсылку();
	Задача.УстановитьСсылкуНового(ЗадачаСсылка);
	
	НоваяСтрока = РезультатыОзнакомлений.Добавить();
	НоваяСтрока.НомерИтерации 	  = НомерИтерации;
	НоваяСтрока.ЗадачаИсполнителя = ЗадачаСсылка;
	
	Возврат Задача;
	
КонецФункции

// Заполняет задачу Ознакомиться по данными процессам.
//
// Параметры:
//  Задача - ЗадачаОбъект.ЗадачаИсполнителя - заполняемая задача.
//
Процедура ЗаполнитьЗадачуОзнакомиться(Задача)
	
	Задача.Дата  	= ТекущаяДатаСеанса();
	Задача.Автор 	= Автор;
	Задача.Описание = Описание;
	Задача.Важность = Важность;
	Если ЗначениеЗаполнено(Состояние) Тогда
		Задача.СостояниеБизнесПроцесса = Состояние;
	КонецЕсли;
	Мультипредметность.ЗадачаПередСозданием(
		ЭтотОбъект, Задача, БизнесПроцессы.Согласование.ТочкиМаршрута.Ознакомиться);
	
	Если ТипЗнч(ОбрабатывающийРезультат) = Тип("СправочникСсылка.Сотрудники") Тогда
		Задача.Исполнитель = ОбрабатывающийРезультат;
	Иначе
		Задача.РольИсполнителя = ОбрабатывающийРезультат;
	КонецЕсли;
	
	Задача.ИдентификаторИсполнителя = ИдентификаторОбрабатывающегоРезультат;
	
	// Если указана дата завершения, то создается после завершения с пустым сроком,
	// т.к. она формируется для уведомления автора процесса о положительном
	// завершении и не влияет на срок исполнения всего процесса.
	Если ЗначениеЗаполнено(ДатаЗавершения) Тогда
		Задача.СрокИсполнения = Дата(1,1,1);
	Иначе
		СрокиИсполненияПроцессов.ЗаполнитьСрокИсполненияЗадачи(
			Задача,
			ВариантУстановкиСрокаОбработкиРезультатов,
			СрокОбработкиРезультатов,
			СрокОбработкиРезультатовДни,
			СрокОбработкиРезультатовЧасы,
			СрокОбработкиРезультатовМинуты);
	КонецЕсли;
	
	Задача.БизнесПроцесс  = ЭтотОбъект.Ссылка;
	Задача.ТочкаМаршрута  = БизнесПроцессы.Согласование.ТочкиМаршрута.Ознакомиться;
	
	Задача.Проект = Проект;
	Задача.ПроектнаяЗадача = ПроектнаяЗадача;
	ЗаполнитьНаименованиеИОписаниеЗадачиОзнакомиться(Задача);	
	
	РаботаСБизнесПроцессамиВызовСервера.СкопироватьЗначенияДопРеквизитов(Задача.БизнесПроцесс, Задача);
	
КонецПроцедуры	

Процедура ЗаполнитьНаименованиеИОписаниеЗадачиОзнакомиться(Задача)
	
	ДобавлятьНаименованиеПредмета = РаботаСБизнесПроцессами.ДобавлятьНаименованиеПредмета(ЭтотОбъект);
	ПредметыСтрокой = МультипредметностьКлиентСервер.ПредметыСтрокой(Задача.Предметы, Истина, Ложь);

	НаименованиеИОписаниеПоДействию = РаботаСПроцессамиПоДействиям.НаименованиеИОписаниеЗадачиПоДействию(
		Задача, ПредметыСтрокой);
	Если НаименованиеИОписаниеПоДействию <> Неопределено 
		И ЗначениеЗаполнено(НаименованиеИОписаниеПоДействию.Наименование) Тогда
		Задача.Наименование = НаименованиеИОписаниеПоДействию.Наименование;

	ИначеЕсли СтрНачинаетсяС(НаименованиеПроцессаПоУмолчанию(ДобавлятьНаименованиеПредмета), Наименование)
		И ЗначениеЗаполнено(ПредметыСтрокой) Тогда
		
		Задача.Наименование = СтрШаблон(
			НСтр("ru = 'Ознакомиться с результатом согласования %1'",
				ЛокализацияКонфигурации.КодЯзыкаИсполнителяЗадачи(Задача)),
			Строка(ПредметыСтрокой));
	Иначе
		Задача.Наименование = СтрШаблон(
			НСтр("ru = 'Ознакомиться с результатом согласования: %1'",
				ЛокализацияКонфигурации.КодЯзыкаИсполнителяЗадачи(Задача)),
			Наименование);
	КонецЕсли;
	
	Если НаименованиеИОписаниеПоДействию <> Неопределено 
		И ЗначениеЗаполнено(НаименованиеИОписаниеПоДействию.Описание) Тогда
		Задача.Описание = НаименованиеИОписаниеПоДействию.Описание;
	Иначе
		
		Задача.Описание = Описание;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли