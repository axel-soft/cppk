#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация,
	СтандартнаяОбработка) Экспорт
	
	ПолучениеФормыОбработано = РаботаСПроцессамиПоДействиямСобытия.ОбработатьПолучениеФормыПроцесса(
		ВидФормы, Параметры, ВыбраннаяФорма, СтандартнаяОбработка);
	
	Если Не ПолучениеФормыОбработано Тогда
		
		Если ВидФормы = "ФормаСписка" Тогда
			
			СтандартнаяОбработка = Ложь;
			Параметры.Вставить("ТипПроцесса", "Подписание");
			ВыбраннаяФорма = Метаданные.ОбщиеФормы.СписокПроцессов;
			
		ИначеЕсли ВидФормы = "ФормаВыбора" Тогда
			
			СтандартнаяОбработка = Ложь;
			Параметры.Вставить("Заголовок", НСтр("ru = 'Подписания'"));
			Параметры.Вставить("ТипПроцесса", Тип("БизнесПроцессСсылка.Подписание"));
			ВыбраннаяФорма = Метаданные.ОбщиеФормы.ВыборБизнесПроцесса;
			
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ЗадачиПроцесса

// Получить структуру с описанием формы выполнения задачи.
// Вызывается при открытии формы выполнения задачи.
//
// Параметры
//   ЗадачаСсылка  - ЗадачаСсылка.ЗадачаИсполнителя - задача 
//   ТочкаМаршрутаСсылка - точка маршрута 
//
// Возвращаемое значение:
//   Структура   - структуру с описанием формы выполнения задачи.
//                 Ключ "ИмяФормы" содержит имя формы, передаваемое в метод контекста ОткрытьФорму(). 
//                 Ключ "ПараметрыФормы" содержит параметры формы. 
//
Функция ФормаВыполненияЗадачи(ЗадачаСсылка, ТочкаМаршрутаСсылка) Экспорт
	
	ИмяФормы = "";
	
	Если ТочкаМаршрутаСсылка = БизнесПроцессы.Подписание.ТочкиМаршрута.Подписать Тогда 
		ИмяФормы = "БизнесПроцесс.Подписание.Форма.ФормаЗадачиИсполнителя";

	ИначеЕсли ТочкаМаршрутаСсылка = БизнесПроцессы.Подписание.ТочкиМаршрута.ОбеспечитьПодписание Тогда 
		ИмяФормы = "БизнесПроцесс.Подписание.Форма.ФормаЗадачиОбеспечить";
		
	ИначеЕсли ТочкаМаршрутаСсылка = БизнесПроцессы.Подписание.ТочкиМаршрута.ОбработатьРезультат Тогда 
		ИмяФормы = "БизнесПроцесс.Подписание.Форма.ФормаЗадачиОзнакомиться";
		
	КонецЕсли;	

	Результат = Новый Структура;
	Результат.Вставить("ПараметрыФормы", Новый Структура("Ключ", ЗадачаСсылка));
	Результат.Вставить("ИмяФормы", ИмяФормы);
	Возврат Результат;

КонецФункции

Функция ДействиеСогласованияВРежимеЗамечаний(Предмет, ТекДействие)
	
	Обработка = РегистрыСведений.ДействияОбработкиОбъектов.ОбработкаДействия(ТекДействие);
	
	РеквизитыОбработки =
		ОбщегоНазначенияДокументооборот.ЗначенияРеквизитовОбъектаВПривилегированномРежиме(
		Обработка, "Владелец, ДатаСоздания");

	РезультатЗапроса = ДействияСервер.ТекущиеДействияПредмета(
		РеквизитыОбработки.Владелец,
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыОбработки.Владелец, "ВидДокумента"),
		РеквизитыОбработки.ДатаСоздания);
	ДействияОбработки = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Действие");
	
	Для Каждого Действие Из ДействияОбработки Цикл
		
		Если ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияСогласования")
			И ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
				Действие, "СогласованиеВРежимеЗамечаний") Тогда
						
			Возврат Действие;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции	

Функция ЕстьВизыСогласования(Предмет)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВизыСогласования.Документ КАК Ссылка
	|ИЗ
	|	Справочник.ВизыСогласования КАК ВизыСогласования
	|ГДЕ
	|	ВизыСогласования.Документ = &Предмет
	|	И НЕ ВизыСогласования.ПометкаУдаления
	|	И НЕ ВизыСогласования.Удалена
	|И Не ВизыСогласования.ПомещенаВИсторию";
	
	Запрос.УстановитьПараметр("Предмет", Предмет);
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции	

// Заполняет html обзор задачи данными процесса.
//
// Параметры:
//   HTMLТекст - Строка
//   Процесс - БизнесПроцессСсылка
//   ТочкаМаршрута - ТочкаМаршрутаБизнесПроцессаСсылка
//   ЗадачаПроцесса - ЗадачаСсылка.ЗадачаИсполнителя
//   ВключатьНавигационныеСсылки - Булево
//   КодЯзыка - Строка
//
Процедура ЗаполнитьОбзорЗадачи(HTMLТекст, Процесс, ТочкаМаршрута, ЗадачаПроцесса, ВключатьНавигационныеСсылки, КодЯзыка) Экспорт
	
	// По процессу найдем действие, далее предмет-документ, далее смотрим есть ли визы согласования.
	
	Если Не РаботаСПроцессамиПоОбработкамОбъектовПовтИсп.ВыполнятьОбработкуОбъектовПроцессами() Тогда
		Возврат;
	КонецЕсли;
	
	Действие = РаботаСПроцессамиПоДействиям.ДействиеПоПроцессу(Процесс);
	Если Не ЗначениеЗаполнено(Действие) Тогда
		Возврат;
	КонецЕсли;	
	
	Предмет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "Предмет");
	
	ЕстьВизы = ЕстьВизыСогласования(Предмет);
	Если Не ЕстьВизы Тогда
		Возврат;
	КонецЕсли;	
	
	Если ВключатьНавигационныеСсылки Тогда
		
		// лист согласования	
		СсылкаПоказатьПротокол = СтрШаблон(
			"v8doc:tasks/ShowApprovalSheet/%1",
			ПолучитьНавигационнуюСсылку(Предмет));
		
		ТекстДобавкиHTML = СтрШаблон(
			"<a href=%1>%2</a>",
			СсылкаПоказатьПротокол,
			НСтр("ru = 'Лист согласования'", КодЯзыка));
		
		HTMLТекст = HTMLТекст + Символы.ВК + "<br>" + ТекстДобавкиHTML;
		
		ДействиеСогласованияВРежимеЗамечаний = ДействиеСогласованияВРежимеЗамечаний(Предмет, Действие);
		Если ЗначениеЗаполнено(ДействиеСогласованияВРежимеЗамечаний) Тогда
			ПоказатьПротоколРазногласий = ДействияВызовСервера.ДействиеЗавершеноОтрицательноИЕстьЗамечания(
				ДействиеСогласованияВРежимеЗамечаний);
				
			Если ПоказатьПротоколРазногласий Тогда
				
				// Протокол разногласий	
				СсылкаПоказатьПротокол = СтрШаблон(
					"v8doc:tasks/ListOfDisagreements/%1",
					ПолучитьНавигационнуюСсылку(ДействиеСогласованияВРежимеЗамечаний));
				
				ТекстДобавкиHTML = СтрШаблон(
					"<a href=%1>%2</a>",
					СсылкаПоказатьПротокол,
					НСтр("ru = 'Протокол разногласий'", КодЯзыка));
					
				HTMLТекст = HTMLТекст + Символы.ВК + "<br>" + ТекстДобавкиHTML;
				
			КонецЕсли;		
					
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает признак наличия метода объекта ПриПеренаправленииЗадачи
// 
Функция ЕстьМетодПриПеренаправленииЗадачи() Экспорт

	Возврат Истина;

КонецФункции

// Вызывается при перенаправлении задачи.
//
// Параметры
//   ЗадачаСсылка  - ЗадачаСсылка.ЗадачаИсполнителя - перенаправляемая задача.
//   ОтключитьОбновлениеЗадач - Булево.
//
Процедура ПриПеренаправленииЗадачи(ЗадачаСсылка, ОтключитьОбновлениеЗадач = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗадачаСсылка, 
		"ТочкаМаршрута, БизнесПроцесс, Исполнитель, РольИсполнителя, ИдентификаторИсполнителя");
	
	Если ЗначениеЗаполнено(РеквизитыЗадачи.РольИсполнителя) Тогда 
		УчастникПроцессаВЗадаче = РеквизитыЗадачи.РольИсполнителя;
	Иначе
		УчастникПроцессаВЗадаче = РеквизитыЗадачи.Исполнитель;
	КонецЕсли;
	
	ЗаблокироватьДанныеДляРедактирования(РеквизитыЗадачи.БизнесПроцесс);
	ПроцессОбъект = РеквизитыЗадачи.БизнесПроцесс.ПолучитьОбъект();
	
	ПроцессОбъект.ЗаменитьУчастникаПроцесса(
		РеквизитыЗадачи.ИдентификаторИсполнителя, УчастникПроцессаВЗадаче);
	
	Если ПроцессОбъект.Модифицированность() Тогда
		
		Если ОтключитьОбновлениеЗадач Тогда
			ПроцессОбъект.ДополнительныеСвойства.Вставить("ОтключитьОбновлениеЗадач", Истина);
		КонецЕсли;
		
		ПроцессОбъект.Записать();
	КонецЕсли;
	РазблокироватьДанныеДляРедактирования(РеквизитыЗадачи.БизнесПроцесс);

КонецПроцедуры

// Возвращает признак наличия метода ДополнительныеДанныеПоЗадаче
Функция ЕстьМетодДополнительныеДанныеПоЗадаче() Экспорт

	Возврат Истина;

КонецФункции

// Возвращает структуру дополнительных данных переданной задачи:
//	РезультатВыполнения - результат выполнения задачи
//  КонтекстВыполненияЗадачи - Контекст выполнения задачи задачи для истории
Функция ДополнительныеДанныеПоЗадаче(Задача) Экспорт

	СтруктураВозврата = Новый Структура("РезультатВыполнения, КонтекстВыполненияЗадачи");
	
	Если Не Задача.Выполнена Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	РезультатВыполнения = Неопределено;
	
	ТочкаМаршрута = Задача.ТочкаМаршрута;
	ТочкиМаршрутаПроцесса = БизнесПроцессы.Подписание.ТочкиМаршрута;
	
	РезультатДействия = Справочники.РезультатыДействийЗадач.ПустаяСсылка();
	ТекстРезультатаВыполнения = Задача.РезультатВыполнения;
	УточненныйИсполнитель = Неопределено;
	ФактическийПодписант = Неопределено;
	
	Если ТочкаМаршрута = ТочкиМаршрутаПроцесса.Подписать
		Или ТочкаМаршрута = ТочкиМаршрутаПроцесса.ОбеспечитьПодписание Тогда
		
		РезультатВыполнения = РезультатВыполненияЗадачи(Задача);
		Если РезультатВыполнения = Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно Тогда
			РезультатДействия = Справочники.РезультатыДействийЗадач.НеПодписано;
		ИначеЕсли РезультатВыполнения = Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно Тогда
			РезультатДействия = Справочники.РезультатыДействийЗадач.Подписано;
		КонецЕсли;
		
		РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Задача.БизнесПроцесс,
			"РезультатыПодписания, Участники");
		РезультатыПодписания = РеквизитыПроцесса.РезультатыПодписания.Выгрузить();
		Участники = РеквизитыПроцесса.Участники.Выгрузить();
		
		СтрокаРезультата = РезультатыПодписания.Найти(Задача.Ссылка, "ЗадачаПроцесса");
		Если СтрокаРезультата <> Неопределено Тогда
			
			СтрокаУчастника = Участники.Найти(СтрокаРезультата.Идентификатор, "Идентификатор");
			Если ТочкаМаршрута = ТочкиМаршрутаПроцесса.ОбеспечитьПодписание
				И СтрокаУчастника <> Неопределено
				И ЗначениеЗаполнено(СтрокаУчастника.Подписывающий) Тогда
				
				УточненныйИсполнитель = СтрокаУчастника.Подписывающий;
				
				ФактическийИсполнитель 
					= РаботаСПроцессамиПоДействиям.ФактическийИсполнитель(Задача.БизнесПроцесс, СтрокаУчастника.Идентификатор);
				Если ЗначениеЗаполнено(ФактическийИсполнитель) Тогда
					ФактическийПодписант = ФактическийИсполнитель;
				Иначе
					ФактическийПодписант = СтрокаУчастника.Подписывающий;
				КонецЕсли;	
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТочкаМаршрута = ТочкиМаршрутаПроцесса.ОбработатьРезультат Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	РезультатыОбработок.ОтправленоНаПовторноеПодписание
			|ИЗ
			|	БизнесПроцесс.Подписание.РезультатыОбработок КАК РезультатыОбработок
			|ГДЕ
			|	РезультатыОбработок.ЗадачаПроцесса = &ЗадачаПроцесса");
			
		Запрос.УстановитьПараметр("ЗадачаПроцесса", Задача.Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			Если Выборка.ОтправленоНаПовторноеПодписание Тогда
				РезультатДействия = Справочники.РезультатыДействийЗадач.ОтправленоПовторно;
			Иначе
				РезультатДействия = Справочники.РезультатыДействийЗадач.Завершил;
			КонецЕсли;
			
		Иначе
			РезультатДействия = Справочники.РезультатыДействийЗадач.Ознакомился;
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеИсполнителяДляИсторииВыполнения = Задача.ДанныеИсполнителяДляИсторииВыполнения();
	
	КонтекстВыполненияЗадачи = РегистрыСведений.ИсторияЗадач.КонтекстВыполнения();
	КонтекстВыполненияЗадачи.Исполнитель = ДанныеИсполнителяДляИсторииВыполнения.Исполнитель;
	КонтекстВыполненияЗадачи.ПлановыйИсполнитель = ДанныеИсполнителяДляИсторииВыполнения.ПлановыйИсполнитель;
	КонтекстВыполненияЗадачи.УточненныйИсполнитель = УточненныйИсполнитель;
	КонтекстВыполненияЗадачи.ФактическийПодписант = ФактическийПодписант;
	КонтекстВыполненияЗадачи.ОснованиеФактическогоИсполнителя =
		ДанныеИсполнителяДляИсторииВыполнения.ОснованиеФактическогоИсполнителя;
	КонтекстВыполненияЗадачи.ТекстРезультатаВыполнения = ТекстРезультатаВыполнения;
	КонтекстВыполненияЗадачи.ПриложенияРезультатаВыполнения = РаботаСЗадачами.СлепокПриложенийРезультатаПоИсточнику(Задача.Ссылка);
	КонтекстВыполненияЗадачи.РезультатДействия = РезультатДействия;
	КонтекстВыполненияЗадачи.ФактическийИсполнитель = 
		ДанныеИсполнителяДляИсторииВыполнения.ФактическийИсполнитель;
	
	СтруктураВозврата.РезультатВыполнения = РезультатВыполнения;
	СтруктураВозврата.КонтекстВыполненияЗадачи = КонтекстВыполненияЗадачи;

	Возврат СтруктураВозврата;

КонецФункции

// Возвращает признак наличия метода РезультатВыполненияЗадачи
//
// Возвращаемое значение:
//  Булево
//
Функция ЕстьМетодРезультатВыполненияЗадачи() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает результат выполнения задачи.
//
// Параметры:
//  Задача - ЗадачаОбъект.ЗадачаИсполнителя,
//           ЗадачаСсылка.ЗадачаИсполнителя
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ВариантыВыполненияПроцессовИЗадач,
//  Неопределено
//
Функция РезультатВыполненияЗадачи(Задача) Экспорт
	
	РезультатВыполнения = Неопределено;
	
	Если ТипЗнч(Задача) = Тип("ЗадачаОбъект.ЗадачаИсполнителя") Тогда
		РеквизитыЗадачи = Задача;
	Иначе
		РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Задача, "Выполнена, ТочкаМаршрута, БизнесПроцесс, Ссылка");
	КонецЕсли;
	
	Если РеквизитыЗадачи.Выполнена = Истина
		И (РеквизитыЗадачи.ТочкаМаршрута = ТочкиМаршрута.Подписать
			Или РеквизитыЗадачи.ТочкаМаршрута = ТочкиМаршрута.ОбеспечитьПодписание) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	ПодписаниеРезультатыПодписания.РезультатПодписания КАК РезультатПодписания
			|ИЗ
			|	БизнесПроцесс.Подписание.РезультатыПодписания КАК ПодписаниеРезультатыПодписания
			|ГДЕ
			|	ПодписаниеРезультатыПодписания.Ссылка = &Процесс
			|	И ПодписаниеРезультатыПодписания.ЗадачаПроцесса = &ЗадачаПроцесса";
		Запрос.УстановитьПараметр("Процесс", РеквизитыЗадачи.БизнесПроцесс);
		Запрос.УстановитьПараметр("ЗадачаПроцесса", РеквизитыЗадачи.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			Если Выборка.РезультатПодписания = 
				Перечисления.РезультатыПроцессаПодписания.НеПодписано Тогда
				
				РезультатВыполнения = Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно;
				
			ИначеЕсли Выборка.РезультатПодписания =
				Перечисления.РезультатыПроцессаПодписания.Подписано Тогда
					
				РезультатВыполнения = Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно;
				
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

Функция ПлановыеТрудозатратыИсполнителяЗадачи(БизнесПроцесс, Задача, ТочкаМаршрута) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаУчастников = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		БизнесПроцесс, "Участники");
	ТаблицаУчастников = ТаблицаУчастников.Выгрузить();
	
	ИдентификаторИсполнителя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Задача, "ИдентификаторИсполнителя");
	
	Трудозатраты = 0;
	Для Каждого СтрокаТаблицы Из ТаблицаУчастников Цикл
		Если СтрокаТаблицы.Идентификатор = ИдентификаторИсполнителя Тогда
			Трудозатраты = СтрокаТаблицы.ТрудозатратыПлан;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Трудозатраты;

КонецФункции

// Возвращает возможность выполнения задачи процесса по почте.
// 
// Параметры:
//  РеквизитыЗадачи - Структура
//    * БизнесПроцесс - БизнесПроцессСсылка.Подписание
//    * ТочкаМаршрута - ТочкаМаршрутаБизнесПроцессаСсылка.Подписание
//    * Ссылка - ЗадачаИсполнителя - ссылка на задачу процесса.
//
// Возвращаемое значение:
//  Булево
//
Функция ВозможноВыполнениеЗадачиПроцессаПоПочте(РеквизитыЗадачи) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если РеквизитыЗадачи.ТочкаМаршрута = ТочкиМаршрута.Подписать
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыЗадачи.БизнесПроцесс, "СпособПодписания") = 
			Перечисления.СпособыПодписанияПредметаПроцесса.УЭП Тогда
		
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Возвращает структуру с вариантами ответов для формирования уведомлений
// с возможностью исполнения задач по почте. Варианты ответов определяются в
// зависимости от точки маршрута.
//
// Параметры:
//	ЗадачаСсылка - ЗадачаСсылка.ЗадачаИсполнителя - задача для которой определяются
//				   варианты ответов.
//	БизнесПроцессСсылка - БизнесПроцессСсылка.Подписание - бизнес процесс по которому
//						  назначена задача.
//	ТочкаМаршрута - ТочкаМаршрутаБизнесПроцессаСсылка - точка маршрута в которой находится
//					БизнесПроцесс
//	КодЯзыкаПолучателя - Строка.
//
// Возвращаемое значение:
//  Структура
//	 * СписокВариантовОтветов - СписокЗначений - список значений типа
//								ПеречисленияСсылка.ВариантыВыполненияПроцессовИЗадач,
//								с заполненным представлением; в нем содержатся варианты
//								ответов.
//	 * ИспользоватьКомментарий - Булево - Принимает значение Истина, если для текущей задачи
//								 ввод комментария обязателен.
//
Функция ВариантыОтветовДляВыполненияЗадачиПоПочте(ЗадачаСсылка, БизнесПроцессСсылка, ТочкаМаршрута, КодЯзыкаПолучателя) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("СписокВариантовОтветов", Новый СписокЗначений);
	Результат.Вставить("ИспользоватьКомментарий", Ложь);
	
	Если ТочкаМаршрута = ТочкиМаршрута.Подписать
		Или ТочкаМаршрута = ТочкиМаршрута.ОбеспечитьПодписание Тогда
		
		Результат.СписокВариантовОтветов.Добавить(
			Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно,
			НСтр("ru = 'Подписано'", КодЯзыкаПолучателя));
		Результат.СписокВариантовОтветов.Добавить(
			Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно,
			НСтр("ru = 'Не подписано'", КодЯзыкаПолучателя));
		
		Результат.ИспользоватьКомментарий = Истина;
		
	ИначеЕсли ТочкаМаршрута = ТочкиМаршрута.ОбработатьРезультат Тогда
		
		НаименованиеПоложительногоРезультата = НСтр("ru = 'Ознакомился'", КодЯзыкаПолучателя);
		НаименованиеОтрицательногоРезультата = "";
		
		РезультатВыполнения = РезультатВыполненияПроцесса(БизнесПроцессСсылка);
		Если РезультатВыполнения = Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно Тогда
			НаименованиеПоложительногоРезультата = НСтр("ru = 'Завершить подписание'", КодЯзыкаПолучателя);
			НаименованиеОтрицательногоРезультата = НСтр("ru = 'Повторить подписание'", КодЯзыкаПолучателя);
		КонецЕсли;
		
		Результат.СписокВариантовОтветов.Добавить(
			Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно,
			НаименованиеПоложительногоРезультата);
		
		Если ЗначениеЗаполнено(НаименованиеОтрицательногоРезультата) Тогда
			Результат.СписокВариантовОтветов.Добавить(
				Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно,
				НаименованиеОтрицательногоРезультата);
			
			Результат.ИспользоватьКомментарий = Истина;
			
		КонецЕсли;
	
	Иначе
		ВызватьИсключение 
			НСтр("ru = 'Неожиданная точка маршрута задачи.'", КодЯзыкаПолучателя);
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

// Формирует комментарий автоматического выполнения задачи.
//
// Параметры:
//  ТочкаМаршрута - ТочкаМаршрута - Точка маршрута.
//  ВариантВыполнения - Булево - Вариант выполнения.
//
// Возвращаемое значение:
//  Строка - Комментарий автоматического выполнения задачи.
//
Функция КомментарийВыполненаАвтоматически(ТочкаМаршрута, ВариантВыполнения) Экспорт

	Комментарий = "";
	
	Если ТочкаМаршрута = ТочкиМаршрута.Подписать
		Или ТочкаМаршрута = ТочкиМаршрута.ОбеспечитьПодписание Тогда
		
		Если ВариантВыполнения Тогда
			Комментарий = НСтр("ru = 'Подписано автоматически'");
		Иначе
			Комментарий = НСтр("ru = 'Не подписано автоматически'");
		КонецЕсли;
	ИначеЕсли ТочкаМаршрута = ТочкиМаршрута.ОбработатьРезультат Тогда
		Комментарий = НСтр("ru = 'Ознакомился автоматически'");
	КонецЕсли;

	Возврат Комментарий;

КонецФункции

Функция ПредставлениеРезультатаЗадачи(ЗадачаОбъект) Экспорт

	Представление = "";
	
	Если ЗадачаОбъект.ТочкаМаршрута = ТочкиМаршрута.Подписать
		Или ЗадачаОбъект.ТочкаМаршрута = ТочкиМаршрута.ОбеспечитьПодписание Тогда
		
		РезультатыПодписания = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ЗадачаОбъект.БизнесПроцесс, "РезультатыПодписания").Выгрузить();
		
		НайденнаяСтрока = РезультатыПодписания.Найти(ЗадачаОбъект.Ссылка, "ЗадачаПроцесса");
		Если НайденнаяСтрока <> Неопределено Тогда 
			Представление = Строка(НайденнаяСтрока.РезультатПодписания) + ".";
		КонецЕсли;
		
	ИначеЕсли ЗадачаОбъект.ТочкаМаршрута = ТочкиМаршрута.ОбработатьРезультат Тогда
		
		РезультатыОбработок = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ЗадачаОбъект.БизнесПроцесс, "РезультатыОбработок").Выгрузить();
		
		НайденнаяСтрока = РезультатыОбработок.Найти(ЗадачаОбъект.Ссылка, "ЗадачаИсполнителя");
		Если НайденнаяСтрока = Неопределено Тогда
			Представление = НСТР("ru = 'Ознакомился.'");
		ИначеЕсли НайденнаяСтрока.ОтправленоНаПовторноеПодписание Тогда
			Представление = НСТР("ru = 'Отправлено на повторное подписание.'");
		Иначе
			Представление = НСТР("ru = 'Подписание завершено.'");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Представление;

КонецФункции

// Возвращает признак того что процесс использует условия выполнения задач.
//
// Параметры:
//  ТочкаМаршрута - ТочкаМаршрутаСсылка - Точка маршрута.
//  Параметры - Структура - Параметры.
// 
// Возвращаемое значение:
//  Булево - Использует условия выполнения задач.
//
Функция ИспользуетУсловияЗапретаВыполненияЗадач(ТочкаМаршрута = Неопределено,
	Параметры = Неопределено) Экспорт
	
	Если Параметры = Неопределено Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	
	ИспользуетУсловияЗапретаВыполненияЗадач = Истина;
	
	Если ТочкаМаршрута = ТочкиМаршрута.Подписать
		Или ТочкаМаршрута = ТочкиМаршрута.ОбеспечитьПодписание Тогда
		
		Если Параметры.Свойство("ВариантВыполнения") Тогда
			ИспользуетУсловияЗапретаВыполненияЗадач =
				Параметры.ВариантВыполнения <>
					Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно;
		ИначеЕсли Параметры.Свойство("РезультатПодписания") Тогда
			ИспользуетУсловияЗапретаВыполненияЗадач =
				Параметры.РезультатПодписания <>
					Перечисления.РезультатыПроцессаПодписания.НеПодписано;
		КонецЕсли;
		
	ИначеЕсли ТочкаМаршрута = ТочкиМаршрута.ОбработатьРезультат Тогда
		
		Если Параметры.Свойство("ВариантВыполнения") Тогда
			ИспользуетУсловияЗапретаВыполненияЗадач =
				Параметры.ВариантВыполнения <>
					Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно;
		ИначеЕсли Параметры.Свойство("ОтправленоНаПовторноеПодписание") Тогда
			ИспользуетУсловияЗапретаВыполненияЗадач = Не Параметры.ОтправленоНаПовторноеПодписание;
		КонецЕсли;
		
	КонецЕсли;

	Возврат ИспользуетУсловияЗапретаВыполненияЗадач;

КонецФункции

// Обработчик, вызываемый перед выполнением задачи из процедуры
// ВыполнениеЗадачСервер.ВыполнитьЗадачуСПараметрами
//
// Параметры
//   ЗадачаСсылка  - ЗадачаСсылка.ЗадачаИсполнителя
//   БизнесПроцессСсылка - БизнесПроцессСсылка
//   ТочкаМаршрутаСсылка - точка маршрута
//   ПараметрыВыполнения - Структура
//
Процедура ОбработкаПередВыполнениемЗадачи(ЗадачаСсылка, БизнесПроцессСсылка,
	ТочкаМаршрутаБизнесПроцесса, ПараметрыВыполнения) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПараметрыВыполнения.Свойство("ИдентификаторБлокировкиПроцесса") Тогда
		ПараметрыВыполнения.Вставить(
			"ИдентификаторБлокировкиПроцесса", Новый УникальныйИдентификатор());
	КонецЕсли;
	
	ЗаблокироватьДанныеДляРедактирования(
		БизнесПроцессСсылка,, ПараметрыВыполнения.ИдентификаторБлокировкиПроцесса);
	
	ПроцессОбъект = БизнесПроцессСсылка.ПолучитьОбъект();
	
	Если ТочкаМаршрутаБизнесПроцесса = ТочкиМаршрута.Подписать
		Или ТочкаМаршрутаБизнесПроцесса = ТочкиМаршрута.ОбеспечитьПодписание Тогда
		
		ПроцессОбъект.ПоместитьРезультатВыполненияЗадачиПодписать(
			ЗадачаСсылка, ПараметрыВыполнения.РезультатПодписания);
			
		Если ПараметрыВыполнения.Свойство("ПодписиЭПКПредметам")
			И ТипЗнч(ПараметрыВыполнения.ПодписиЭПКПредметам) = Тип("Соответствие") Тогда
			
			ДействиеЗадачи = Документы.ДействиеЗадачи.НайтиПоИсточнику(ЗадачаСсылка);
			
			ПодписиПоДействию = ПараметрыВыполнения.ПодписиЭПКПредметам.Получить(ДействиеЗадачи);
			Если ТипЗнч(ПодписиПоДействию) = Тип("Массив") Тогда
				РаботаСЭП.ЗанестиИнформациюОПодписях(ПодписиПоДействию);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТочкаМаршрутаБизнесПроцесса = ТочкиМаршрута.ОбработатьРезультат Тогда
		
		ДействиеПроцесса = РегистрыСведений.ПроцессыДействий.ДействиеПоПроцессу(БизнесПроцессСсылка);
		ЕстьДействие = ЗначениеЗаполнено(ДействиеПроцесса);
		
		Если ПараметрыВыполнения.Свойство("ОтправленоНаПовторноеПодписание") Тогда
			ПроцессОбъект.ПоместитьРезультатВыполненияЗадачиОбработатьРезультат(
				ЗадачаСсылка, ПараметрыВыполнения.ОтправленоНаПовторноеПодписание);
		КонецЕсли;
		
		Если Не ЕстьДействие И ПараметрыВыполнения.Свойство("ДанныеПроцесса") Тогда
			ПроцессОбъект.ОбновитьДанныеПроцесса(ПараметрыВыполнения.ДанныеПроцесса.Получить());
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПроцессОбъект.Модифицированность() Тогда 
		РаботаСБизнесПроцессами.ЗаписатьПроцесс(ПроцессОбъект, "ПростаяЗапись");
	КонецЕсли;
	РазблокироватьДанныеДляРедактирования(
		БизнесПроцессСсылка, ПараметрыВыполнения.ИдентификаторБлокировкиПроцесса);
	
КонецПроцедуры

// Обработчик, вызываемый после выполнением задачи из процедуры
// ВыполнениеЗадачСервер.ВыполнитьЗадачуСПараметрами
//
// Параметры
//   ЗадачаСсылка  - ЗадачаСсылка.ЗадачаИсполнителя
//   БизнесПроцессСсылка - БизнесПроцессСсылка
//   ТочкаМаршрутаСсылка - точка маршрута
//   ПараметрыВыполнения - Структура
//
Процедура ОбработкаПослеВыполненияЗадачи(ЗадачаСсылка, БизнесПроцессСсылка,
	ТочкаМаршрутаБизнесПроцесса, ПараметрыВыполнения) Экспорт
	
	// Обработки после выполнения задачи не предусмотрено.
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеЗадачиТочекДействий

// Проверяет является ли переданная задача процесса служебной.
//
// Параметры:
//  Задача - ЗадачаОбъект.ЗадачаИсполнителя,
//           ЗадачаСсылка.ЗадачаИсполнителя,
//           Структура со свойствами Исполнитель, РольИсполнителя, ТочкаМаршрута, Наименование
//
// Возвращаемое значение:
//  Булево
//
Функция ЭтаСлужебнаяЗадачаПроцесса(ЗадачаПроцесса) Экспорт
	
	// Служебных задач не предусмотрено.
	Возврат Ложь;

КонецФункции

#КонецОбласти

#Область Предметы

// Возвращает участников для проверки прав на предметы.
//
// Параметры:
//  Процесс - БизнесПроцессОбъект, БизнесПроцессСсылка - процесс
//
// Возвращаемое значение:
//  ТаблицаЗначений
//   * Участник
//   * Изменение
//
Функция УчастникиДляПроверкиПрав(Процесс) Экспорт

	ТаблицаУчастников = РаботаСРабочимиГруппами.ПолучитьПустуюТаблицуУчастников();
	
	РаботаСБизнесПроцессами.ДобавитьУчастниковПодписанияВТаблицу(ТаблицаУчастников, Процесс);
	
	Возврат ТаблицаУчастников;

КонецФункции

// Возвращает массив доступных типов основных предметов
Функция ТипыОсновныхПредметов() Экспорт

	ТипыПредметов = Новый Массив;
	
	ТипыПредметов = 
		Метаданные.БизнесПроцессы.Подписание.ТабличныеЧасти.Предметы.Реквизиты.Предмет.Тип.Типы(); 

	Возврат ТипыПредметов;

КонецФункции

// Возвращает доступные для процесса роли предметов
Функция ПолучитьДоступныеРолиПредметов() Экспорт

	РолиПредметов = Новый Массив;

	РолиПредметов.Добавить(Перечисления.РолиПредметов.Основной);
	РолиПредметов.Добавить(Перечисления.РолиПредметов.Вспомогательный);

	Возврат РолиПредметов;

КонецФункции

#КонецОбласти

#Область УправлениеДоступом

Функция ПолучитьПоляДоступа() Экспорт

	Возврат "Ссылка";

КонецФункции

// Заполняет переданный дескриптор доступа 
Процедура ЗаполнитьОсновнойДескриптор(ОбъектДоступа, ДескрипторДоступа) Экспорт

	ДескрипторДоступа.ОбъектДоступа = ОбъектДоступа.Ссылка;

КонецПроцедуры

Функция ЕстьМетодЗаполнитьДескрипторыОбъекта() Экспорт

	Возврат Истина;

КонецФункции

Процедура ЗаполнитьДескрипторыОбъекта(ОбъектДоступа, ТаблицаДескрипторов,
	ПротоколРасчетаПрав = Неопределено) Экспорт
	
	// Только основной дескриптор, без рабочей группы.
	ДокументооборотПраваДоступа.ЗаполнитьДескрипторОбъектаОсновной(ОбъектДоступа,
		ТаблицаДескрипторов);

КонецПроцедуры

// Возвращает признак того, что менеджер содержит метод ЗапросДляРасчетаПрав()
// 
Функция ЕстьМетодЗапросДляРасчетаПрав() Экспорт

	Возврат Истина;

КонецФункции

// Возвращает запрос для расчета прав доступа по дескрипторам объекта
// 
// Параметры:
//  
//  Дескрипторы - Массив - массив дескрипторов, чьи права нужно рассчитать
//  ИдОбъекта - Ссылка - идентификатор объекта метаданных, назначенный переданным дескрипторам
//  МенеджерОбъектаДоступа - СправочникМенеджер, ДокументМенеджер - менеджер объекта доступа
// 
// Возвращаемое значение - Запрос - запрос, который выберет права доступа для переданного массива дескрипторов
// 
Функция ЗапросДляРасчетаПрав(Дескрипторы, ИдОбъекта, МенеджерОбъектаДоступа) Экспорт

	Возврат БизнесПроцессыИЗадачиСервер.ЗапросДляРасчетаПрав(Дескрипторы, ИдОбъекта,
		МенеджерОбъектаДоступа);

КонецФункции

// Заполняет протокол расчета прав дескрипторов
// 
// Параметры:
//  
//  ПротоколРасчетаПрав - Массив - протокол для заполнения
//  ЗапросПоПравам - Запрос - запрос, который использовался для расчета прав дескрипторов
//  Дескрипторы - Массив - массив дескрипторов, чьи права были рассчитаны
//  
Процедура ЗаполнитьПротоколРасчетаПрав(ПротоколРасчетаПрав, ЗапросПоПравам) Экспорт

	БизнесПроцессыИЗадачиСервер.ЗаполнитьПротоколРасчетаПрав(ПротоколРасчетаПрав, ЗапросПоПравам);

КонецПроцедуры

// Проверяет наличие метода.
// 
Функция ЕстьМетодПраваСотрудниковПоФайлам() Экспорт

	Возврат Истина;

КонецФункции

// Возвращает права доступа пользователей к переданным файлам.
// 
Функция ПраваСотрудниковПоФайлам(Файлы, СотрудникиОтбор = Неопределено) Экспорт

	Возврат БизнесПроцессыИЗадачиСервер.ПраваСотрудниковПоФайлам(Файлы, СотрудникиОтбор);

КонецФункции

// Возвращает массив пользователей переданного бизнес-процесса,
// которые должны иметь иметь права на другие бизнес-процессы, 
// для которых данный бизнес-процесс является ведущим
Функция ПользователиВедущегоБизнесПроцесса(ВедущийБизнесПроцесс) Экспорт

	МассивПользователей = Новый Массив;
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ВедущийБизнесПроцесс, "Автор, Участники");
	
	Реквизиты.Участники = Реквизиты.Участники.Выгрузить(); 
	Если ЗначениеЗаполнено(Реквизиты.Автор) Тогда
		МассивПользователей.Добавить(Реквизиты.Автор);
	КонецЕсли;
	
	СтрокаУчастника = Реквизиты.Участники.Найти(ТочкиМаршрута.ОбработатьРезультат, "ТочкаМаршрута");
	Если СтрокаУчастника <> Неопределено И ЗначениеЗаполнено(СтрокаУчастника.Участник) Тогда
		МассивПользователей.Добавить(Реквизиты.Участник);
	КонецЕсли;
	
	Возврат МассивПользователей;

КонецФункции

// Возвращает массив пользователей переданного бизнес-процесса,
// которые должны иметь иметь права на другие бизнес-процессы, 
// для которых данный бизнес-процесс является ведущим
Функция УчастникиПроцессаВлияющиеНаДоступКПодчиненнымОбъектам(Процесс) Экспорт

	МассивПользователей = Новый Массив;
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Процесс, "Автор, Участники, Проект");
	Реквизиты.Участники = Реквизиты.Участники.Выгрузить(); 
	
	Если ЗначениеЗаполнено(Реквизиты.Автор) Тогда
		ДанныеУчастника = Новый Структура("Участник", Реквизиты.Автор);
		МассивПользователей.Добавить(ДанныеУчастника);
	КонецЕсли;
	
	СтрокаУчастника = Реквизиты.Участники.Найти(ТочкиМаршрута.ОбработатьРезультат, "ТочкаМаршрута");
	Если СтрокаУчастника <> Неопределено И ЗначениеЗаполнено(СтрокаУчастника.Участник) Тогда
		ДанныеУчастника = Новый Структура("Участник", СтрокаУчастника.Участник);
		МассивПользователей.Добавить(ДанныеУчастника);
	КонецЕсли;
	
	// Добавление руководителя проекта
	Если ЗначениеЗаполнено(Реквизиты.Проект) Тогда
		
		РуководительПроекта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Реквизиты.Проект, "Руководитель");
		Если ЗначениеЗаполнено(РуководительПроекта) Тогда
			ДанныеУчастника = Новый Структура("Участник", РуководительПроекта);
			МассивПользователей.Добавить(ДанныеУчастника);
		КонецЕсли;
			
	КонецЕсли;	
	
	Возврат МассивПользователей;

КонецФункции

// Возвращает массив структур, содержащих описания участников.
// Состав структуры:
//   ТабличнаяЧасть - имя ТЧ, в которой хранятся данные участников. Если данные хранятся в шапке, этот ключ отсутствует.
//   ИмяУчастника - имя реквизита шапки или ТЧ, в котором хранится ссылка на участника.
//   ВлияетНаДоступКПодчиненнымОбъектам - признак, указывающий на необходимость пересчета прав 
//   задач и дочерних процессов при изменении данного участника.
//
Функция ЗаполнитьОписанияУчастников() Экспорт

	МассивОписанийУчастников = Новый Массив;
	
	// Автор
	МассивОписанийУчастников.Добавить(Новый Структура(
		"ИмяУчастника,
		|ВлияетНаДоступКПодчиненнымОбъектам", "Автор",
		Истина));
	
	// Подписать
	Отбор = Новый Структура("ТочкаМаршрута", ТочкиМаршрута.Подписать);
	МассивОписанийУчастников.Добавить(Новый Структура(
		"ТабличнаяЧасть, ИмяУчастника, Отбор,
		|ВлияетНаДоступКПодчиненнымОбъектам", 
		"Участники", "Участник", Отбор, Ложь));
	
	// ОбеспечитьПодписание
	Отбор = Новый Структура("ТочкаМаршрута", ТочкиМаршрута.ОбеспечитьПодписание);
	МассивОписанийУчастников.Добавить(Новый Структура(
		"ТабличнаяЧасть, ИмяУчастника, Отбор,
		|ВлияетНаДоступКПодчиненнымОбъектам", 
		"Участники", "Участник", Отбор, Ложь));
	
	// ОбработатьРезультат
	Отбор = Новый Структура("ТочкаМаршрута", ТочкиМаршрута.ОбработатьРезультат);
	МассивОписанийУчастников.Добавить(Новый Структура(
		"ТабличнаяЧасть, ИмяУчастника, Отбор,
		|ВлияетНаДоступКПодчиненнымОбъектам", 
		"Участники", "Участник", Отбор, Истина));
	
	// Проект
	МассивОписанийУчастников.Добавить(Новый Структура(
		"ИмяУчастника,
		|ВлияетНаДоступКПодчиненнымОбъектам", "Проект",
		Ложь));

	Возврат МассивОписанийУчастников;

КонецФункции

#КонецОбласти

#Область РабочиеГруппы

// Возвращает признак наличия метода ДобавитьУчастниковВТаблицу у менеджера объекта
//
Функция ЕстьМетодДобавитьУчастниковВТаблицу() Экспорт

	Возврат Истина;

КонецФункции

// Добавляет участников бизнес-процесса в переданную таблицу
//
Процедура ДобавитьУчастниковВТаблицу(ТаблицаНабора, БизнесПроцесс) Экспорт

	РаботаСБизнесПроцессами.ДобавитьУчастниковПодписанияВТаблицу(ТаблицаНабора, БизнесПроцесс);

КонецПроцедуры

#КонецОбласти

#Область УчетПереносовСроковИсполнения

// Устанавливает срок исполнителю задачи в процессе.
//
// Параметры:
//  Срок - Дата - новый срок исполнителя.
//  Задача - ЗадачаСсылка.ЗадачаИсполнителя - задача исполнителя.
//  Процесс - БизнесПроцессОбъект - изменяемый процесс.
//  ПараметрыИзмененногоРеквизита - Структура - параметры измененного реквизита процесса.
//   * РеквизитТаблицаСИзмененнымСроком - Строка - имя реквизита или табличной части процесса.
//   * ИндексСтроки - Число - индекс строки табличной части. Присутствует если изменяется табличная часть.
//
Процедура УстановитьСрокИсполнителяЗадачиВПроцессе(Срок, Задача, Процесс,
	ПараметрыИзмененногоРеквизита) Экспорт
	
	ПараметрыИзмененногоРеквизита = Новый Структура;
	ПараметрыИзмененногоРеквизита.Вставить("РеквизитТаблицаСИзмененнымСроком", "");
	ПараметрыИзмененногоРеквизита.Вставить("ИндексСтроки", 0);
	
	ИдентификаторУчастника = 
		ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
		Задача, "ИдентификаторИсполнителя");
	
	СтрокаУчастника = Процесс.Участники.Найти(ИдентификаторУчастника, "Идентификатор");
	Если СтрокаУчастника = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаУчастника.СрокИсполнения = Срок;
	
	СтрокаУчастника.ВариантУстановкиСрокаИсполнения = 
		Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
	
	ПараметрыИзмененногоРеквизита.РеквизитТаблицаСИзмененнымСроком = "Участники";
	
КонецПроцедуры

// Переносит срок исполнения задачи процесса по заявке.
// При переносе обновляются сроки в текущем и зависимых процессах.
//
// Параметры:
//	Задача - ЗадачаСсылка.ЗадачаИсполнителя - Ссылка на задачу.
//	ПараметрыВыполнения - Структура:
//		* НовыйСрок - Дата - Новый срок задачи.
//		* Процесс - БизнесПроцессСсылка - Ссылка на процесс задачи.
//		* ПричинаПереносаСрока - Строка - Причина, по которой переносится срок задачи.
//		* ЗаявкаНаПереносСрока - БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач - Заявка на перенос срока.
//
Процедура ИзменитьСрокИсполненияЗадачи(Задача, ПараметрыВыполнения) Экспорт
	
	Процесс = ПараметрыВыполнения.Процесс;
	НовыйСрок = ПараметрыВыполнения.НовыйСрок;
	ЗаявкаНаПеренос = ПараметрыВыполнения.ЗаявкаНаПереносСрока;
	ПричинаПереносаСрока = ПараметрыВыполнения.ПричинаПереносаСрока;
	
	Если РаботаСПроцессамиПоДействиямСобытия.ОбработатьИзмениеСрокаИсполненияЗадачи(
		НовыйСрок, Задача, ПричинаПереносаСрока, ЗаявкаНаПеренос) Тогда
		
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
	
		ЗаблокироватьДанныеДляРедактирования(Процесс);
		
		ПроцессОбъект = Процесс.ПолучитьОбъект();
		
		СтарыеУчастникиПроцесса = ТекущиеУчастникиПроцесса(ПроцессОбъект);
		
		ПараметрыИзмененногоРеквизита = Новый Структура;
		
		УстановитьСрокИсполнителяЗадачиВПроцессе(
			НовыйСрок, Задача, ПроцессОбъект, ПараметрыИзмененногоРеквизита);
		
		Если ПараметрыИзмененногоРеквизита.Количество() > 0 Тогда
			
			ПараметрыЗаписи = Новый Структура;
			ПараметрыЗаписи.Вставить("ПричинаПереносаСрока", ПричинаПереносаСрока);
			ПараметрыЗаписи.Вставить("БизнесПроцессПереноса", ЗаявкаНаПеренос);
			
			ПереносСроковВыполненияЗадач.ПередатьПричинуИЗаявкуНаПереносаСрока(
				ПроцессОбъект, ПараметрыЗаписи);
				
			ПараметрыДляРасчетаСроков = СрокиИсполненияПроцессов.ПараметрыДляРасчетаСроков();
			
			ПараметрыДляРасчетаСроков.ДатаОтсчета = 
				СрокиИсполненияПроцессов.ДатаОтсчетаДляРасчетаСроковПроцесса(ПроцессОбъект);
			
			ПараметрыДляРасчетаСроков.РеквизитТаблицаСИзмененнымСроком = 
				ПараметрыИзмененногоРеквизита.РеквизитТаблицаСИзмененнымСроком;
			
			ПараметрыДляРасчетаСроков.ТекущаяИтерация = ПроцессОбъект.НомерИтерации;
			
			СрокиИсполненияПроцессов.РассчитатьСрокиПодписания(ПроцессОбъект, ПараметрыДляРасчетаСроков);
			
			РаботаСБизнесПроцессами.ЗаписатьПроцесс(
				ПроцессОбъект, "ЗаписьСОбновлениемОбщегоСпискаИПереносомСроковВИерархииПроцессов");
			
			ПроцессОбъект.ИзменитьРеквизитыНевыполненныхЗадач(СтарыеУчастникиПроцесса, ПараметрыЗаписи);
			
		КонецЕсли;
		
		РазблокироватьДанныеДляРедактирования(Процесс);
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область СрокиИсполненияПроцессов

// Возвращает даты исполнения участников процесса.
//
// Параметры:
//  Процесс - БизнесПроцессСсылка.Рассмотрение - ссылка на процесс
//
// Возвращаемое значение:
//  Соответствие
//   * Ключ - Строка, ЗадачаСсылка.ЗадачаИсполнителя - имя реквизита с участником процесса
//                                                     или ссылка на его задачу.
//
Функция ДатыИсполненияУчастников(Процесс) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ДатыИсполнения = Новый Соответствие;
	
	НомерИтерации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Процесс, "НомерИтерации");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Процесс", Процесс);
	Запрос.УстановитьПараметр("НомерИтерации", НомерИтерации);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РезультатыПодписания.ЗадачаПроцесса КАК ЗадачаПроцесса,
		|	ЗадачиПроцессов.ДатаИсполнения КАК ДатаИсполнения
		|ИЗ
		|	БизнесПроцесс.Подписание.РезультатыПодписания КАК РезультатыПодписания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачиПроцессов
		|		ПО РезультатыПодписания.ЗадачаПроцесса = ЗадачиПроцессов.Ссылка
		|ГДЕ
		|	РезультатыПодписания.Ссылка = &Процесс
		|	И РезультатыПодписания.НомерИтерации = &НомерИтерации
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РезультатыОбработок.ЗадачаПроцесса,
		|	ЗадачиПроцессов.ДатаИсполнения
		|ИЗ
		|	БизнесПроцесс.Подписание.РезультатыОбработок КАК РезультатыОбработок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачиПроцессов
		|		ПО РезультатыОбработок.ЗадачаПроцесса = ЗадачиПроцессов.Ссылка
		|ГДЕ
		|	РезультатыОбработок.Ссылка = &Процесс
		|	И РезультатыОбработок.НомерИтерации = &НомерИтерации";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДатыИсполнения.Вставить(Выборка.ЗадачаПроцесса, Выборка.ДатаИсполнения);
	КонецЦикла;
	
	Возврат ДатыИсполнения;

КонецФункции

#КонецОбласти

#Область ПоддержкаКомплексныхПроцессов

#Область КэшДанныхДействий

// Возвращает выборку данных действий.
//
// Параметры:
//  ТаблицаДействий - ТаблицаЗначений
//   * Действие - ОпределяемыйТип.ШаблонДействияКомплексногоПроцесса
//
// Возвращаемое значение:
//  ВыборкаДанных
//
Функция ВыборкаДанныхДействий(ТаблицаДействий) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаДействий.Действие
		|ПОМЕСТИТЬ ТаблицаДействий
		|ИЗ
		|	&ТаблицаДействий КАК ТаблицаДействий
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Подписание.Ссылка,
		|	Подписание.Наименование,
		|	Подписание.Участники,
		|	Подписание.СрокИсполненияПроцесса,
		|	Подписание.Состояние,
		|	Подписание.Завершен,
		|	Подписание.ДатаЗавершения
		|ИЗ
		|	ТаблицаДействий КАК ТаблицаДействий
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.Подписание КАК Подписание
		|		ПО ТаблицаДействий.Действие = Подписание.Ссылка";
		
	Запрос.УстановитьПараметр("ТаблицаДействий", ТаблицаДействий);
	
	Возврат Запрос.Выполнить().Выбрать();

КонецФункции

// Возвращает данные процесса, являющегося действием комплексного процесса.
//
// Параметры:
//  Объект - БизнесПроцессСсылка.Рассмотрение, ВыборкаДанных
//
// Возвращаемое значение:
//  Структура - см. функцию РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтруктураДанныхДействия
//
Функция ДанныеДействия(Объект) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеПроцесса = РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтруктураДанныхДействия();
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Объект)) Тогда
		РеквизитыОбъекта = 
			ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				Объект, "Наименование, Участники, СрокИсполненияПроцесса,
					|Состояние, Завершен, ДатаЗавершения");
		Участники = РеквизитыОбъекта.Участники.Выгрузить();
	Иначе
		РеквизитыОбъекта = Объект;
		Участники = Объект.Участники.Выгрузить();
	КонецЕсли;
	
	ДанныеПроцесса.Описание = НСтр("ru = 'Подписание: '") + РеквизитыОбъекта.Наименование;
	
	ДанныеПроцесса.СрокИсполненияПроцесса = РеквизитыОбъекта.СрокИсполненияПроцесса;
	
	МассивИсполнителей = Новый Массив;
	Для Каждого СтрокаУчастника Из Участники Цикл
		Если СтрокаУчастника.ТочкаМаршрута = ТочкиМаршрута.ОбработатьРезультат Тогда
			Продолжить;
		КонецЕсли;
		РаботаСКомплекснымиБизнесПроцессамиСервер.ДобавитьИсполнителяПроцессаВМассив(
			МассивИсполнителей, СтрокаУчастника.Участник);
	КонецЦикла;
	
	ДанныеПроцесса.Исполнители = 
		РаботаСКомплекснымиБизнесПроцессамиСервер.ИсполнителиСтрокой(МассивИсполнителей);
	
	ДанныеПроцесса.СостояниеПроцесса = РеквизитыОбъекта.Состояние;
	
	ДанныеПроцесса.ПроцессЗавершен = РеквизитыОбъекта.Завершен;
	
	ДанныеПроцесса.ДатаЗавершения = РеквизитыОбъекта.ДатаЗавершения;
	
	Возврат ДанныеПроцесса;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Печатной формы подписания не предусмотрено.
	
КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати,
	ПараметрыВывода) Экспорт
	
	// Печатной формы подписания не предусмотрено.
	
КонецПроцедуры

#КонецОбласти

// Возвращает тип шаблона бизнес-процесса, соответствующего данному процессу
Функция ТипШаблона() Экспорт

	Возврат "Справочник.ШаблоныПодписания";

КонецФункции

// Показывает, может ли процесс запускаться через привычные интерфейсы
Функция МожетЗапускатьсяИнтерактивно() Экспорт

	Возврат Истина;

КонецФункции

// Проверяет, что процесс завершился удачно
Функция ПроцессЗавершилсяУдачно(Ссылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Ложь;
	РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Ссылка, "Завершен, РезультатПодписания");
	Результат = РеквизитыПроцесса.Завершен
		И (РеквизитыПроцесса.РезультатПодписания = 
		Перечисления.РезультатыПроцессаПодписания.Подписано);

	Возврат Результат;

КонецФункции

// Возвращает признак наличия метода РезультатВыполненияПроцесса
Функция ЕстьМетодРезультатВыполненияПроцесса() Экспорт
	Возврат Истина;
КонецФункции

// Возвращает результат выполнения - значение перечисления ВариантыВыполненияПроцессовИЗадач
Функция РезультатВыполненияПроцесса(Ссылка) Экспорт
	
	РезультатПодписания = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "РезультатПодписания");
	
	Если РезультатПодписания = Перечисления.РезультатыПроцессаПодписания.Подписано Тогда
		Возврат Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно;
	Иначе
		Возврат Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно;
	КонецЕсли;
	
КонецФункции

// Возвращает результат выполнения в контексте процесса.
// 
// Параметры:
//  Ссылка Ссылка
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.РезультатыПодписания
//
Функция КонтекстныйРезультатВыполненияПроцесса(Ссылка) Экспорт
	
	Возврат 
		ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
		Ссылка, "РезультатПодписания");
	
КонецФункции

// Проверяет, подходит ли объект к шаблону бизнес-процесса
Функция ШаблонПодходитДляАвтозапускаБизнесПроцессаПоОбъекту(ШаблонСсылка, ПредметСсылка, Подписчик,
	ВидСобытия, Условие) Экспорт
	
	Возврат Истина;

КонецФункции

// Заполняет html обзор данными процесса.
//
// Параметры:
//   HTMLТекст - Строка
//   Шаблон - БизнесПроцессСсылка.Рассмотрение - ссылка на процесс
//
Процедура ЗаполнитьОбзорПроцесса(HTMLТекст, Процесс) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Процесс,
		"СпособПодписания,
		|Участники,
		|Этапы,
		|РезультатыПодписания,
		|КоличествоИтераций,
		|СрокИсполненияПроцесса,
		|ДатаЗавершения,
		|РезультатПодписания,
		|СпособПодписания,
		|Завершен");
		
	Участники = РеквизитыПроцесса.Участники.Выгрузить();
	Этапы = РеквизитыПроцесса.Этапы.Выгрузить();
	РезультатыПодписания = РеквизитыПроцесса.РезультатыПодписания.Выгрузить();
	
	СрокИсполненияПроцесса = РеквизитыПроцесса.СрокИсполненияПроцесса;
	ДатаЗавершения = РеквизитыПроцесса.ДатаЗавершения;
	
	ЗадачаИсполнителяМассив = РезультатыПодписания.ВыгрузитьКолонку("ЗадачаПроцесса");
	
	ДатыИсполненияУчастников = ДатыИсполненияУчастников(Процесс);
	
	ЦветЗакрытыеНеактуальныеЗаписи = ОбзорПроцессовВызовСервера.ЦветЗакрытыеНеактуальныеЗаписи();
	
	ЦветПросроченныеДанные = ОбзорПроцессовВызовСервера.ЦветПросроченныеДанные();
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	
	ДатаИсполненияПоУмолчанию = ТекущаяДатаСеанса;
	Если ЗначениеЗаполнено(ДатаЗавершения) Тогда
		ДатаИсполненияПоУмолчанию = ДатаЗавершения;
	КонецЕсли;
	
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	Если ИспользоватьДатуИВремяВСрокахЗадач Тогда
		ФорматСрока = "ДФ='dd.MM.yyyy HH:mm'";
	Иначе
		ФорматСрока = "ДФ='dd.MM.yyyy'";
	КонецЕсли;
	
	Участники.Колонки.Добавить("НомерУчастника");
	Участники.Колонки.Добавить("НаименованиеЭтапа");
	Участники.Колонки.Добавить("ПорядокВыполненияУчастниками");
	Участники.Колонки.Добавить("ЗадачаИсполнителя");
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Число"));	
	Участники.Колонки.Добавить("НомерЭтапа", Новый ОписаниеТипов(МассивТипов));
	
	Этапы.Колонки.Добавить("ЧислоУчастников", Новый ОписаниеТипов(МассивТипов));
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Булево"));	
	Этапы.Колонки.Добавить("ДобавленВТаблицу", Новый ОписаниеТипов(МассивТипов));
	
	НомерУчастника = 0;
	Для Каждого Исполнитель Из Участники Цикл
		
		Исполнитель.НомерУчастника = НомерУчастника;
		НомерУчастника = НомерУчастника + 1;
		
		ЭтапСтр = Этапы.Найти(Исполнитель.Этап, "Идентификатор");
		Если ЭтапСтр <> Неопределено Тогда
			Исполнитель.НомерЭтапа = Этапы.Индекс(ЭтапСтр) + 1;
			Исполнитель.НаименованиеЭтапа = ЭтапСтр.НаименованиеЭтапа;
			Исполнитель.ПорядокВыполненияУчастниками = ЭтапСтр.ПорядокВыполненияУчастниками;
			
			ЭтапСтр.ЧислоУчастников = ЭтапСтр.ЧислоУчастников + 1;
		КонецЕсли;	
		
		РезПодписанияСтр = РезультатыПодписания.Найти(Исполнитель.Идентификатор, "Идентификатор");
		Если РезПодписанияСтр <> Неопределено Тогда
			Исполнитель.ЗадачаИсполнителя = РезПодписанияСтр.ЗадачаПроцесса;
		КонецЕсли;	
		
	КонецЦикла;	
	
	Участники.Сортировать("НомерЭтапа, НомерУчастника");
	
	ОбработкаСрокИсполнения = Неопределено;
	ОбработкаСрокИсполненияДни = 0;
	ОбработкаСрокИсполненияМинуты = 0;
	ОбработкаСрокИсполненияЧасы = 0;
	ВариантУстановкиСрокаИсполнения = Неопределено;
	ОбработкаУчастник = Неопределено;
	
	ЧислоУчастниковПодписантов = 0;
	Для Каждого Исполнитель Из Участники Цикл
		Если Исполнитель.ТочкаМаршрута <> БизнесПроцессы.Подписание.ТочкиМаршрута.ОбработатьРезультат Тогда
			ЧислоУчастниковПодписантов = ЧислоУчастниковПодписантов + 1;
		КонецЕсли;
	КонецЦикла;		
	
	// Формирование строк таблицы
	Если ЧислоУчастниковПодписантов > 0 Тогда
		
		РезультатСоответствие 
			= ОбзорПроцессовВызовСервера.РезультатыВыполненияПоОбъектам(ЗадачаИсполнителяМассив, "Задача");
		
		HTMLТекст = HTMLТекст + "<p>";
		
		HTMLТекст = HTMLТекст + "<table class=""frame"">";
		
		//Формирование заголовка таблицы
		HTMLТекст = HTMLТекст + "<tr>";
		
		Если Этапы.Количество() <> 0 Тогда
			HTMLТекст = HTMLТекст + "<td align=""left"" class=""frame"">";
			ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = 'Этап'"));
			HTMLТекст = HTMLТекст + "</td>";
		КонецЕсли;
		
		Если РезультатСоответствие.Количество() <> 0 Тогда
			// статус исполнения - в шапке пусто
			HTMLТекст = HTMLТекст + "<td align=""center"" class=""frame"">";
			ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, "", "");
			HTMLТекст = HTMLТекст + "</td>";
		КонецЕсли;
		
		HTMLТекст = HTMLТекст + "<td align=""left"" class=""frame"">";
		ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = 'Участники'"));
		HTMLТекст = HTMLТекст + "</td>";
		
		HTMLТекст = HTMLТекст + "<td align=""center"" class=""frame"">";
		ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = 'Срок'"));
		HTMLТекст = HTMLТекст + "</td>";
		
		HTMLТекст = HTMLТекст + "</tr>";
		
		НомерШага = 1;
		
		//Заполнение таблицы исполнителями
		Для Каждого Исполнитель Из Участники Цикл
			
			Если Исполнитель.ТочкаМаршрута = БизнесПроцессы.Подписание.ТочкиМаршрута.ОбработатьРезультат Тогда
				
				ОбработкаСрокИсполнения = Исполнитель.СрокИсполнения;
				ОбработкаСрокИсполненияДни = Исполнитель.СрокИсполненияДни;
				ОбработкаСрокИсполненияМинуты = Исполнитель.СрокИсполненияМинуты;
				ОбработкаСрокИсполненияЧасы = Исполнитель.СрокИсполненияЧасы;
				ВариантУстановкиСрокаИсполнения = Исполнитель.ВариантУстановкиСрокаИсполнения;
				ОбработкаУчастник = Исполнитель.Участник;
				
				Продолжить;
				
			КонецЕсли;	
			
			HTMLТекст = HTMLТекст + "<tr>";
			
			Если Этапы.Количество() <> 0 Тогда
				
				ЭтапСтр = Этапы.Найти(Исполнитель.Этап, "Идентификатор");
				Если ЭтапСтр <> Неопределено И ЭтапСтр.ДобавленВТаблицу = Ложь Тогда
					
					ЭтапСтр.ДобавленВТаблицу = Истина;
				
					ПредставлениеЭтапа = "";
					Если ЗначениеЗаполнено(Исполнитель.НаименованиеЭтапа) Тогда
						ПредставлениеЭтапа = Исполнитель.НаименованиеЭтапа
							 + ", " + Строка(Исполнитель.ПорядокВыполненияУчастниками);
					Иначе	
						НомерШага = Исполнитель.НомерЭтапа;
						Если НомерШага = 0 Тогда
							НомерШага = 1;
						КонецЕсли;
						ПредставлениеЭтапа = Строка(НомерШага);
					КонецЕсли;	
					
					HTMLТекст = HTMLТекст 
						+ СтрШаблон("<td align=""left"" class=""frame"" rowspan=%1>", ЭтапСтр.ЧислоУчастников);
					
					ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, ПредставлениеЭтапа, "");
					HTMLТекст = HTMLТекст + "</td>";
				КонецЕсли;	
			КонецЕсли;
			
			// статус исполнения
			Если РезультатСоответствие.Количество() <> 0 Тогда
				
				HTMLТекст = HTMLТекст + "<td align=""center"" class=""frame"">";
				РезультатВыполненияЗадачи = РезультатСоответствие.Получить(Исполнитель.ЗадачаИсполнителя);
				Если РезультатВыполненияЗадачи <> Неопределено Тогда
					
					Картинка = ОбзорПроцессовВызовСервера.ПолучитьКартинкуПоСтатусуВыполнения(
						РезультатВыполненияЗадачи);
					
					ОбзорОбъектовКлиентСервер.ДобавитьКартинку(HTMLТекст, Картинка);
					
				Иначе
					ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, "", "");
				КонецЕсли;	
				HTMLТекст = HTMLТекст + "</td>";
				
			КонецЕсли;	
			
			HTMLТекст = HTMLТекст + "<td class=""frame"">";
			
			Если Исполнитель.Пройден
				Или Не ЗначениеЗаполнено(Исполнитель.ЗадачаИсполнителя) Тогда
				
				HTMLТекст = HTMLТекст + "<FONT color=""" + ЦветЗакрытыеНеактуальныеЗаписи + """>";
				ЦветТекста = ЦветЗакрытыеНеактуальныеЗаписи;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Исполнитель.ЗадачаИсполнителя) Тогда
				ОбзорОбъектовКлиентСервер.ДобавитьЗадачу(HTMLТекст, Исполнитель.ЗадачаИсполнителя, 
					Исполнитель.Участник);
			Иначе
				Если ЗначениеЗаполнено(Исполнитель.Участник) Тогда
					ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, Исполнитель.Участник, "");
				КонецЕсли;
			КонецЕсли;	
			
			Если Исполнитель.Пройден 
				Или Не ЗначениеЗаполнено(Исполнитель.ЗадачаИсполнителя) Тогда
				
				HTMLТекст = HTMLТекст + "</FONT>";
			КонецЕсли;
			
			HTMLТекст = HTMLТекст + "</td>";
			
			HTMLТекст = HTMLТекст + "<td align=""center"" class=""frame"">";
			ПредставлениеСрока = ОбзорПроцессовВызовСервера.ПредставлениеСрокаИсполнения(
				Исполнитель.СрокИсполнения, Исполнитель.СрокИсполненияДни, 
				Исполнитель.СрокИсполненияЧасы, Исполнитель.СрокИсполненияМинуты, 
				ИспользоватьДатуИВремяВСрокахЗадач, Исполнитель.ВариантУстановкиСрокаИсполнения);
				
			ЦветПредставленияСрока = "";
			Если ЗначениеЗаполнено(Исполнитель.СрокИсполнения) Тогда
				ДатаИсполнения = ДатыИсполненияУчастников.Получить(Исполнитель.ЗадачаИсполнителя);
				Если ЗначениеЗаполнено(ДатаИсполнения) Тогда
					ДатаИсполнения = Мин(ДатаИсполненияПоУмолчанию, ДатаИсполнения);
				Иначе
					ДатаИсполнения = ДатаИсполненияПоУмолчанию;
				КонецЕсли;
				
				ДатаИсполнения = ДатаИсполнения - Секунда(ДатаИсполнения);
				
				Если Исполнитель.СрокИсполнения < ДатаИсполнения Тогда
					ЦветПредставленияСрока = ЦветПросроченныеДанные;
				КонецЕсли;
			КонецЕсли;
				
			ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, ПредставлениеСрока, ЦветПредставленияСрока);
			HTMLТекст = HTMLТекст + "</td>";
				
			HTMLТекст = HTMLТекст + "</tr>";
		КонецЦикла;
		
		HTMLТекст = HTMLТекст + "</table>";
		
		// Формирование подписей под таблицей
		HTMLТекст = HTMLТекст + "<table cellpadding=""0"">";
		HTMLТекст = HTMLТекст + "<tr>";
		
		HTMLТекст = HTMLТекст + "<td>";
		HTMLТекст = HTMLТекст + "</td>";
		
		HTMLТекст = HTMLТекст + "<td align=""right"">";
		HTMLТекст = HTMLТекст + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"<A href=v8doc:%1>%2</A>",
			"Подзадачи_" + Процесс.УникальныйИдентификатор() + "_Подписание",
			НСтр("ru = 'Все задачи'"));
		HTMLТекст = HTMLТекст + "</td>";
		
		HTMLТекст = HTMLТекст + "</tr>";
		HTMLТекст = HTMLТекст + "</table>";
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбработкаСрокИсполнения) 
		Или ЗначениеЗаполнено(ОбработкаСрокИсполненияДни) 
		Или ЗначениеЗаполнено(ОбработкаСрокИсполненияМинуты) 
		Или ЗначениеЗаполнено(ОбработкаСрокИсполненияЧасы) Тогда
		
		HTMLТекст = HTMLТекст + "<p>";
		
		ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = 'Срок обработки результатов:'"));
		
		ПредставлениеСрока = ОбзорПроцессовВызовСервера.ПредставлениеСрокаИсполнения(
			ОбработкаСрокИсполнения, 
			ОбработкаСрокИсполненияДни, 
			ОбработкаСрокИсполненияЧасы, 
			ОбработкаСрокИсполненияМинуты, 
			ИспользоватьДатуИВремяВСрокахЗадач, 
			ВариантУстановкиСрокаИсполнения);
			
		ЦветПредставленияСрока = "";
		Если Не РеквизитыПроцесса.Завершен
			Или РеквизитыПроцесса.РезультатСогласования <>
				Перечисления.РезультатыСогласования.Согласовано Тогда
				
			ДатаИсполнения = ДатыИсполненияУчастников.Получить("Автор");
			Если ЗначениеЗаполнено(ДатаИсполнения) Тогда
				ДатаИсполнения = Мин(ДатаИсполненияПоУмолчанию, ДатаИсполнения);
			Иначе
				ДатаИсполнения = ДатаИсполненияПоУмолчанию;
			КонецЕсли;
			
			ДатаИсполнения = ДатаИсполнения - Секунда(ДатаИсполнения);
			
			Если ОбработкаСрокИсполнения < ДатаИсполнения Тогда
				ЦветПредставленияСрока = ЦветПросроченныеДанные;
			КонецЕсли;
			
		КонецЕсли;
		
		ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, ПредставлениеСрока, ЦветПредставленияСрока);
		
	КонецЕсли;
		
	Если ЗначениеЗаполнено(СрокИсполненияПроцесса) Тогда
		
		HTMLТекст = HTMLТекст + "<p>";
		
		Если Не ЗначениеЗаполнено(ДатаЗавершения) Тогда
			ДатаЗавершения = ТекущаяДатаСеанса;
		КонецЕсли;
		
		ДатаЗавершения = ДатаЗавершения - Секунда(ДатаЗавершения);
		
		ЦветПредставленияСрока = "";
		Если СрокИсполненияПроцесса < ДатаЗавершения Тогда
			ЦветПредставленияСрока = ЦветПросроченныеДанные;
		КонецЕсли;
		
		ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = 'Срок процесса:'"));
		ОбзорОбъектовКлиентСервер.ДобавитьЗначение(
			HTMLТекст, Формат(СрокИсполненияПроцесса, ФорматСрока), ЦветПредставленияСрока);
		
		Если РеквизитыПроцесса.КоличествоИтераций <> 0 Тогда
			
			HTMLТекст = HTMLТекст + " (";
			
			ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = 'Кол. циклов:'"));
			ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, 
				Формат(РеквизитыПроцесса.КоличествоИтераций, "ЧЦ=2"), "");
			
			HTMLТекст = HTMLТекст + ")";
			
		КонецЕсли;		
		
	КонецЕсли;
	
	HTMLТекст = HTMLТекст + "<p>";
	ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = 'Способ подписания:'"));
	ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, Строка(РеквизитыПроцесса.СпособПодписания), "");
	
КонецПроцедуры

// Возвращает текстовое описание назначения процесса
Функция ПолучитьОписаниеПроцесса() Экспорт
	
	Возврат НСтр("ru = 'Предназначен для подписания объектов с одним или несколькими сотрудниками.'");

КонецФункции

// Возвращает текущих участников процесса в виде таблицы значений.
//
// Параметры:
//   Процесс
//      БизнесПроцессОбъект
//      БизнесПроцессСсылка
//
// Возвращаемое значение:
//   ТаблицаЗначений
//
Функция ТекущиеУчастникиПроцесса(Процесс) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Процесс) = Тип("БизнесПроцессСсылка.Подписание") Тогда
		ТекущиеУчастники = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Процесс, "Участники");
		ТекущиеУчастники = ТекущиеУчастники.Выгрузить();
	Иначе
		ТекущиеУчастники = Процесс.Участники.Выгрузить();
	КонецЕсли;

	Возврат ТекущиеУчастники;

КонецФункции

// Возвращает идентификаторы текущих участников процесса.
//
// Параметры:
//   Процесс
//      БизнесПроцессОбъект
//      БизнесПроцессСсылка
//
// Возвращаемое значение:
//   Массив
//    * УникальныйИдентификатор
//
Функция ИдентификаторыТекущихУчастниковПроцесса(Процесс) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	ИдентификаторыУчастников = Новый Массив;
	
	Если ТипЗнч(Процесс) = Тип("БизнесПроцессСсылка.Подписание") Тогда
		ТаблицаУчастников = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Процесс, "Участники");
		ТаблицаУчастников = ТаблицаУчастников.Выгрузить();
	Иначе
		ТаблицаУчастников = Процесс.Участники;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаУчастников Цикл
		ИдентификаторыУчастников.Добавить(СтрокаТаблицы.Идентификатор);
	КонецЦикла;
	
	Возврат ИдентификаторыУчастников;

КонецФункции

// Возвращает массив всех участников процесса 
Функция ВсеУчастникиПроцесса(ПроцессСсылка) Экспорт

	ВсеУчастники = Новый Массив;

	РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ПроцессСсылка, "Автор, Участники");
	РеквизитыПроцесса.Участники = РеквизитыПроцесса.Участники.Выгрузить();
	
	// Автор
	ДанныеУчастника = Новый Структура("Участник", РеквизитыПроцесса.Автор);
	ВсеУчастники.Добавить(ДанныеУчастника);

	Для Каждого СтрокаУчастника Из РеквизитыПроцесса.Участники Цикл
		ДанныеУчастника = Новый Структура("Участник", СтрокаУчастника.Участник);
		ВсеУчастники.Добавить(ДанныеУчастника);
	КонецЦикла;

	Возврат ВсеУчастники;

КонецФункции

// Возвращает участника процесса, которого необходимо ознакомить с результатом завершения процесса.
//
// Параметры:
//	Процесс - БизнесПроцессСсылка, БизнесПроцессОбъект - Процесс, для которого необходимо получить ознакамливаемого c
//														 результатом завершения процесса.
//
// Возвращаемое значение:
//	СправочникСсылка.Сотрудники, СправочникСсылка.ПолныеРоли
//
Функция ОзнакамливаемыйСРезультатом(Процесс) Экспорт

	ОзнакамливаемыйСРезультатом = Неопределено;
	
	Если ТипЗнч(Процесс) = Тип("БизнесПроцессОбъект.Подписание") Тогда
		ТаблицаУчастников = Процесс.Участники.Выгрузить();
	Иначе
		ТаблицаУчастников = 
			ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(Процесс, "Участники");
		ТаблицаУчастников = ТаблицаУчастников.Выгрузить();
	КонецЕсли;
	
	СтрокаУчастника = 
		ТаблицаУчастников.Найти(БизнесПроцессы.Подписание.ТочкиМаршрута.ОбработатьРезультат, "ТочкаМаршрута");
	Если Не СтрокаУчастника = Неопределено Тогда
		ОзнакамливаемыйСРезультатом = СтрокаУчастника.Участник;
	КонецЕсли;
	
	Возврат ОзнакамливаемыйСРезультатом;
		
КонецФункции

// Возвращает описание результата завершения процесса.
//
// Параметры:
//	Процесс - БизнесПроцессСсылка - Процесс, для которого необходимо получить описание результата завершения.
//	КодЯзыка - Строка - Код языка пользователя
//
// Возвращаемое значение:
//	Строка - Описание результата завершения процесса.
//
Функция ОписаниеРезультатаЗавершенияПроцесса(Процесс, КодЯзыка) Экспорт

	ОписаниеРезультата = "";
	
	РезультатПодписания = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Процесс, "РезультатПодписания");
	Если РезультатПодписания = Перечисления.РезультатыПроцессаПодписания.Подписано Тогда
		ОписаниеРезультата = НСтр("ru = 'Результат подписания: Подписано'", КодЯзыка);
	Иначе
		ОписаниеРезультата = НСтр("ru = 'Результат подписания: Не подписано'", КодЯзыка);
	КонецЕсли;
	
	Возврат ОписаниеРезультата;
	
КонецФункции

// ВерсионированиеОбъектов
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры
// Конец ВерсионированиеОбъектов

// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения. Для изменения.
//       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт

КонецПроцедуры

#КонецОбласти

#КонецЕсли