#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем ДобавлятьНаименованиеПредмета;

#КонецОбласти

#Область ПрограммныйИнтерфейс

#Область ЗаполнениеПроцесса

// Возвращает пустую структуру данных для заполнения.
//
// Возвращаемое значение:
//  Структура
//   * Важность - ПеречислениеСсылка.ВариантыВажностиОбъектов
//   * Наименование - Строка
//   * Описание - Строка
//   * СпособПодписания - ПеречислениеСсылка.СпособыПодписанияПредметаПроцесса
//   * Этапы - Этапы - ТаблицаЗначений
//      - Идентификатор - УникальныйИдентификатор - идентификатор этапа.
//      - НаименованиеЭтапа - Строка
//      - ПорядокВыполненияУчастниками - ПеречислениеСсылка.ПорядокВыполненияЭтапаПроцесса
//   * Участники - ТаблицаЗначений
//      - Этап - УникальныйИдентификатор - идентификатор этапа.
//      - Участник - СправочникСсылка.Сотрудники, СправочникСсылка.ПолныеРоли
//      - Идентификатор - УникальныйИдентификатор - идентификатор участника
//      - ТочкаМаршрута - ссылка на точку маршрута участника в процессе.
//      - ВариантУстановкиСрокаИсполнения - ПеречислениеСсылка.ВариантыУстановкиСрокаИсполнения
//      - СрокИсполнения - Дата
//      - СрокИсполненияДни - Число
//      - СрокИсполненияЧасы - Число
//      - СрокИсполненияМинуты - Число
//      - Подписывающий - СправочникСсылка.Сотрудники - тот кто подписывает предмет.
//      - ТрудозатратыПлан - Число - трудозатраты участника.
//   * Автор - СправочникСсылка.Сотрудники
//   * КоличествоИтераций - Число
//   * ВедущаяЗадача - ЗадачаСсылка.ЗадачаИсполнителя
//
Функция СтруктураДанныхДляЗаполнения() Экспорт

	СтруктураДанных = Новый Структура;

	СтруктураДанных.Вставить("Важность", Перечисления.ВариантыВажностиОбъектов.ПустаяСсылка());
	СтруктураДанных.Вставить("Наименование", "");
	СтруктураДанных.Вставить("Описание", "");

	СтруктураДанных.Вставить("СпособПодписания",
		Перечисления.СпособыПодписанияПредметаПроцесса.ПустаяСсылка());
	СтруктураДанных.Вставить("ПорядокВыполненияУчастниками",
		Перечисления.ПорядокВыполненияЭтапаПроцесса.ПустаяСсылка());

	КолонкиТаблицыЭтапов = "Идентификатор, НаименованиеЭтапа, ПорядокВыполненияУчастниками";
	СтруктураДанных.Вставить("Этапы", Этапы.ВыгрузитьКолонки(КолонкиТаблицыЭтапов));

	КолонкиТаблицыУчастников =
		"Этап,
		|Участник,
		|Идентификатор,
		|ТочкаМаршрута,
		|ВариантУстановкиСрокаИсполнения,
		|СрокИсполнения,
		|СрокИсполненияДни,
		|СрокИсполненияЧасы,
		|СрокИсполненияМинуты,
		|Подписывающий,
		|ТрудозатратыПлан,
		|Описание";
	СтруктураДанных.Вставить("Участники", Участники.ВыгрузитьКолонки(КолонкиТаблицыУчастников));
	СтруктураДанных.Участники.Колонки.Добавить("ВладелецРоли");
	СтруктураДанных.Участники.Колонки.Добавить("ОсновнойОбъектАдресации");
	СтруктураДанных.Участники.Колонки.Добавить("ДополнительныйОбъектАдресации");
	
	СтруктураДанных.Вставить("Автор", Справочники.Сотрудники.ПустаяСсылка());
	СтруктураДанных.Вставить("КоличествоИтераций", 0);
	
	СтруктураДанных.Вставить("Предметы", Неопределено);
	
	СтруктураДанных.Вставить("ВедущаяЗадача", Задачи.ЗадачаИсполнителя);
	
	Возврат СтруктураДанных;

КонецФункции

// Заполняет бизнес-процесс на основании шаблона бизнес-процесса.
//
// Параметры
//  ШаблонБизнесПроцесса  - шаблон бизнес-процесса
//
Процедура ЗаполнитьПоШаблону(ШаблонБизнесПроцесса) Экспорт
	
	Если ШаблонБизнесПроцесса = Справочники.ШаблоныПодписания.ПоУмолчанию Тогда
		// Не заполняем шаблон в процессе, если это шаблон по умолчанию.
		// Считаем, что процесс создан с нуля.
	ИначеЕсли ШаблонБизнесПроцесса.ШаблонВКомплексномПроцессе 
		И ЗначениеЗаполнено(ШаблонБизнесПроцесса.ИсходныйШаблон) Тогда
		Шаблон = ШаблонБизнесПроцесса.ИсходныйШаблон;
	ИначеЕсли НЕ ШаблонБизнесПроцесса.ШаблонВКомплексномПроцессе Тогда
		Шаблон = ШаблонБизнесПроцесса;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.НаименованиеБизнесПроцесса) Тогда 
		
		Наименование = ШаблонБизнесПроцесса.НаименованиеБизнесПроцесса;
		НаименованиеСПредметами = 
			МультипредметностьКлиентСервер.ПолучитьНаименованиеСПредметами(
			СокрЛП(Наименование), Предметы);
		
		Если ЗначениеЗаполнено(НаименованиеСПредметами)
			И ШаблонБизнесПроцесса.ДобавлятьНаименованиеПредмета Тогда
		
			Наименование = НаименованиеСПредметами;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.Описание) Тогда 
		Описание = ШаблонБизнесПроцесса.Описание;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.Важность) Тогда 
		Важность = ШаблонБизнесПроцесса.Важность;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.Автор) Тогда 
		Автор = ШаблонБизнесПроцесса.Автор;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.СпособПодписания) Тогда 
		СпособПодписания = ШаблонБизнесПроцесса.СпособПодписания;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.ПорядокВыполненияУчастниками) Тогда 
		ПорядокВыполненияУчастниками = ШаблонБизнесПроцесса.ПорядокВыполненияУчастниками;
	КонецЕсли;
	
	ВестиУчетПлановыхТрудозатратВБизнесПроцессах = 
		ПолучитьФункциональнуюОпцию("ВестиУчетПлановыхТрудозатратВБизнесПроцессах");
	
	// Этапы
	Если ШаблонБизнесПроцесса.Этапы.Количество() > 0 Тогда 
		Этапы.Очистить();
	КонецЕсли;
	Для Каждого СтрокаЭтапаШаблон Из ШаблонБизнесПроцесса.Этапы Цикл
		ЗаполнитьЗначенияСвойств(Этапы.Добавить(), СтрокаЭтапаШаблон);  
	КонецЦикла;
	
	// Участники
	Если ШаблонБизнесПроцесса.Участники.Количество() > 0 Тогда 
		Участники.Очистить();
	КонецЕсли;
	
	Для Каждого СтрокаУчастникаШаблон Из ШаблонБизнесПроцесса.Участники Цикл
		
		Если ШаблонБизнесПроцесса.ИспользоватьУсловия
			И ЗначениеЗаполнено(СтрокаУчастникаШаблон.Условие) Тогда
			
			СтрокаПредмета = Предметы.Найти(СтрокаУчастникаШаблон.ИмяПредметаУсловия, "ИмяПредмета");
			Если СтрокаПредмета <> Неопределено Тогда
				РезультатПроверкиУсловия = 
					РаботаСАлгоритмамиПроверки.ПроверитьПрименимостьАлгоритмаПроверкиКОбъекту(
					СтрокаПредмета.Предмет, СтрокаУчастникаШаблон.Условие);
				Если Не РезультатПроверкиУсловия Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТипЗнч(СтрокаУчастникаШаблон.Участник) <>
			Тип("СправочникСсылка.АвтоподстановкиДляПроцессов") Тогда
			
			Отбор = Новый Структура;
			Отбор.Вставить("Этап", СтрокаУчастникаШаблон.Этап);
			Отбор.Вставить("Участник", СтрокаУчастникаШаблон.Участник);
			Отбор.Вставить("ТочкаМаршрута", СтрокаУчастникаШаблон.ТочкаМаршрута);
			Отбор.Вставить("Подписывающий", СтрокаУчастникаШаблон.Подписывающий);
			
			Если Участники.НайтиСтроки(Отбор).Количество() = 0 Тогда
				СтрокаУчастника = Участники.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаУчастника, СтрокаУчастникаШаблон);
				Если Не ВестиУчетПлановыхТрудозатратВБизнесПроцессах Тогда
					СтрокаУчастника.ТрудозатратыПлан = 0;
				КонецЕсли;
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаУчастникаШаблон.Участник) Тогда
			Продолжить;
		КонецЕсли;
		
		АвтоподстановкаУчастник = ШаблоныБизнесПроцессов.ПолучитьЗначениеАвтоподстановки(
			СтрокаУчастникаШаблон.Участник, ЭтотОбъект);
			
		Если ТипЗнч(АвтоподстановкаУчастник) = Тип("Массив") Тогда
			ВычисленныеУчастники = АвтоподстановкаУчастник;
		Иначе
			ВычисленныеУчастники = Новый Массив();
			ВычисленныеУчастники.Добавить(АвтоподстановкаУчастник);
		КонецЕсли;
	
		Для Каждого ЭлементМассива Из ВычисленныеУчастники Цикл
		
			Если ТипЗнч(ЭлементМассива) = Тип("СправочникСсылка.Сотрудники")
				Или ТипЗнч(ЭлементМассива) = Тип("СправочникСсылка.ПолныеРоли") Тогда 
				
				Отбор = Новый Структура;
				Отбор.Вставить("Этап", СтрокаУчастникаШаблон.Этап);
				Отбор.Вставить("Участник", ЭлементМассива);
				Отбор.Вставить("ТочкаМаршрута", СтрокаУчастникаШаблон.ТочкаМаршрута);
				Отбор.Вставить("Подписывающий", СтрокаУчастникаШаблон.Подписывающий);
				
				Если Участники.НайтиСтроки(Отбор).Количество() = 0 Тогда
					СтрокаУчастника = Участники.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаУчастника, СтрокаУчастникаШаблон,, "Участник");
					СтрокаУчастника.Участник = ЭлементМассива;
					Если Не ВестиУчетПлановыхТрудозатратВБизнесПроцессах Тогда
						СтрокаУчастника.ТрудозатратыПлан = 0;
					КонецЕсли;
				КонецЕсли;
			
			ИначеЕсли ТипЗнч(ЭлементМассива) = Тип("Структура") Тогда
				
				Отбор = Новый Структура;
				Отбор.Вставить("Этап", СтрокаУчастникаШаблон.Этап);
				Отбор.Вставить("Участник", ЭлементМассива.РольИсполнителя);
				Отбор.Вставить("ТочкаМаршрута", СтрокаУчастникаШаблон.ТочкаМаршрута);
				Отбор.Вставить("Подписывающий", СтрокаУчастникаШаблон.Подписывающий);
				
				Если Участники.НайтиСтроки(Отбор).Количество() = 0 Тогда
					СтрокаУчастника = Участники.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаУчастника, СтрокаУчастникаШаблон,, "Участник");
					СтрокаУчастника.Участник = ЭлементМассива.РольИсполнителя;
					Если Не ВестиУчетПлановыхТрудозатратВБизнесПроцессах Тогда
						СтрокаУчастника.ТрудозатратыПлан = 0;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Срок исполнения процесса
	СрокИсполненияПроцесса = ШаблонБизнесПроцесса.СрокИсполненияПроцесса;
	
	// Количество итераций
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.КоличествоИтераций) Тогда
		КоличествоИтераций = ШаблонБизнесПроцесса.КоличествоИтераций;
	КонецЕсли;
	
	РаботаСБизнесПроцессамиВызовСервера.СкопироватьЗначенияДопРеквизитов(
		ШаблонБизнесПроцесса, ЭтотОбъект);
	
	ДополнительныеСвойства.Вставить("ШаблонДляОтложенногоСтарта", ШаблонБизнесПроцесса);
	
КонецПроцедуры

// Заполняет бизнес-процесс на основании шаблона бизнес-процесса, предмета и автора.
//
// Параметры
//  ШаблонБизнесПроцесса  - шаблон бизнес-процесса
//  Предмет - предмет бизнес-процесса
//  Автор  - автор
//
Процедура ЗаполнитьПоШаблонуИПредмету(ШаблонБизнесПроцесса, ПредметСобытия, АвторСобытия) Экспорт

	Мультипредметность.ЗаполнитьПредметыПроцессаПоШаблону(ШаблонБизнесПроцесса, ЭтотОбъект);
	Мультипредметность.ПередатьПредметыПроцессу(ЭтотОбъект, ПредметСобытия, Ложь, Истина);
	ЗаполнитьПоШаблону(ШаблонБизнесПроцесса);

	Проект = МультипредметностьПереопределяемый.ПолучитьОсновнойПроектПоПредметам(ПредметСобытия);

	Дата = ТекущаяДатаСеанса();
	Автор = АвторСобытия;

КонецПроцедуры

// Заполняет бизнес-процесс на основании проектной задачи
//
Процедура ЗаполнитьПоПроектнойЗадаче(ДанныеЗаполнения) Экспорт

	Проект = ДанныеЗаполнения.Владелец;
	ПроектнаяЗадача = ДанныеЗаполнения;

	Если Не ЗначениеЗаполнено(Наименование)
		Или Наименование = НаименованиеПроцессаПоУмолчанию() Тогда

		Наименование = ПроектнаяЗадача.Наименование;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Описание) Тогда
		Описание = ПроектнаяЗадача.Описание;
	КонецЕсли;

	Если Предметы.Количество() = 0 Тогда
		Предмет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПроектнаяЗадача, "Предмет");

		Если Предмет <> Неопределено И Предметы.Найти(Предмет, "Предмет") = Неопределено Тогда
			СтрокаПредметов = Предметы.Добавить();
			СтрокаПредметов.РольПредмета = Перечисления.РолиПредметов.Основной;
			СтрокаПредметов.ИмяПредмета = 
				МультипредметностьВызовСервера.ПолучитьСсылкуНаИмяПредметаПоСсылкеНаПредмет(
				Предмет, Предметы.ВыгрузитьКолонку("ИмяПредмета"));
			СтрокаПредметов.Предмет = Предмет;
		КонецЕсли;
	КонецЕсли;

	ДанныеПроектнойЗадачи = РаботаСПроектами.ПолучитьСрокиПроектнойЗадачи(ПроектнаяЗадача);
	СрокИсполненияУчастника = ДанныеПроектнойЗадачи.ТекущийПланОкончание;

	КоличествоИтераций = 1;

	ТочкиМаршрутаПроцесса = БизнесПроцессы.Подписание.ТочкиМаршрута;

	Если Этапы.Количество() = 0 И Участники.Найти(ТочкиМаршрутаПроцесса.Подписать, "ТочкаМаршрута")
		= Неопределено И Участники.Найти(ТочкиМаршрутаПроцесса.ОбеспечитьПодписание, "ТочкаМаршрута")
		= Неопределено Тогда

		ИсполнителиПроектнойЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ПроектнаяЗадача, "Исполнители");
		ИсполнителиПроектнойЗадачи = ИсполнителиПроектнойЗадачи.Выгрузить();	

		ИндексИсполнителя = ИсполнителиПроектнойЗадачи.Количество() - 1;

		ДопустимыеТипыУчастника  = Новый Соответствие;
		ДопустимыеТипыУчастника[Тип("СправочникСсылка.Пользователи")] = Истина;
		ДопустимыеТипыУчастника[Тип("СправочникСсылка.ПолныеРоли")] = Истина;
		ДопустимыеТипыУчастника[Тип("СправочникСсылка.Сотрудники")] = Истина;

		Пока ИндексИсполнителя >= 0 Цикл

			СтрокаИсполнителя = ИсполнителиПроектнойЗадачи[ИндексИсполнителя];
			ИндексИсполнителя = ИндексИсполнителя - 1;

			Если ДопустимыеТипыУчастника[ТипЗнч(СтрокаИсполнителя.Исполнитель)] = Неопределено Тогда
				Продолжить;
			КонецЕсли
			;

			СтрокаУчастника = Участники.Вставить(0);
			СтрокаУчастника.Участник = СтрокаИсполнителя.Исполнитель;
			СтрокаУчастника.ТочкаМаршрута = ТочкиМаршрутаПроцесса.Подписать;

			СтрокаУчастника.СрокИсполнения = СрокИсполненияУчастника;
			СтрокаУчастника.ВариантУстановкиСрокаИсполнения = 
				Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;

			СтрокаУчастника.ТрудозатратыПлан = СтрокаИсполнителя.ТекущийПланТрудозатраты;

		КонецЦикла;

	КонецЕсли;

	СтрокаОбрабатывающегоРезультат = 
		РаботаСБизнесПроцессами.СтрокаУчастника_ОбработатьРезультатПодписания(ЭтотОбъект);

	Если СтрокаОбрабатывающегоРезультат.СрокИсполнения = Дата(1, 1, 1)
		И СтрокаОбрабатывающегоРезультат.СрокИсполненияДни = 0
		И СтрокаОбрабатывающегоРезультат.СрокИсполненияЧасы = 0
		И СтрокаОбрабатывающегоРезультат.СрокИсполненияМинуты = 0 Тогда

		СтрокаОбрабатывающегоРезультат.СрокИсполнения = ДанныеПроектнойЗадачи.ТекущийПланОкончание;
		СтрокаОбрабатывающегоРезультат.ВариантУстановкиСрокаИсполнения = 
			Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
	КонецЕсли;

КонецПроцедуры

// Выполняет замену участника процесса, но нового.
// 
// Параметры:
// 	ИдентификаторУчастника - УникальныйИдентификатор
// 	НовыйУчастник - СправочникСсылка.Сотрудники, СправочникСсылка.ПолныеРоли
//
Процедура ЗаменитьУчастникаПроцесса(ИдентификаторУчастника, НовыйУчастник) Экспорт
	
	СтрокаУчастника = Участники.Найти(ИдентификаторУчастника, "Идентификатор");
	Если СтрокаУчастника = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаУчастника.Участник <> НовыйУчастник Тогда
		СтрокаУчастника.Участник = НовыйУчастник;
	КонецЕсли;
	
КонецПроцедуры

// Обновляет реквизиты процесса по переданной структуре.
//
// Параметры:
//  ДанныеОбновления - Структура - см. СтруктураДанныхДляЗаполнения()
//
Процедура ОбновитьДанныеПроцесса(ДанныеОбновления) Экспорт
	
	Если ДанныеОбновления.Важность <> Важность Тогда
		Важность = ДанныеОбновления.Важность;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеОбновления.Наименование)
		И Предметы.Количество() > 0 Тогда 
				
		НовоеНаименование = МультипредметностьКлиентСервер.ПолучитьНаименованиеСПредметами(
			НаименованиеПроцессаБезПредметовПоУмолчанию(),
			Предметы);
		НовоеНаименование = Лев(НовоеНаименование, 150);
	Иначе
		НовоеНаименование = ДанныеОбновления.Наименование;	
	КонецЕсли;
		
	Если НовоеНаименование <> Наименование Тогда
		Наименование = НовоеНаименование;
	КонецЕсли;

	Если ДанныеОбновления.Описание <> Описание Тогда
		Описание = ДанныеОбновления.Описание;
	КонецЕсли;

	Если ДанныеОбновления.СпособПодписания <> СпособПодписания Тогда
		СпособПодписания = ДанныеОбновления.СпособПодписания;
	КонецЕсли;
	
	Если ДанныеОбновления.ПорядокВыполненияУчастниками <> ПорядокВыполненияУчастниками Тогда
		ПорядокВыполненияУчастниками = ДанныеОбновления.ПорядокВыполненияУчастниками;
	КонецЕсли;

	Если ДанныеОбновления.Автор <> Автор Тогда
		Автор = ДанныеОбновления.Автор;
	КонецЕсли;

	Если ДанныеОбновления.КоличествоИтераций <> КоличествоИтераций Тогда
		КоличествоИтераций = Макс(ДанныеОбновления.КоличествоИтераций, НомерИтерации);
	ИначеЕсли КоличествоИтераций < НомерИтерации Тогда
		КоличествоИтераций = НомерИтерации;
	КонецЕсли;
	
	Если ДанныеОбновления.ВедущаяЗадача <> ВедущаяЗадача Тогда
		ВедущаяЗадача = ДанныеОбновления.ВедущаяЗадача;
	КонецЕсли;
	
	// Заполняем точки маршрута на случай неправильной сериализации КОД
	ЗаполнитьТочкиМаршрутаДанныхОбновленияПроцесса(ДанныеОбновления);
	
	// Этапы
	ЕстьОтличия = Ложь;
	Если Этапы.Количество() <> ДанныеОбновления.Этапы.Количество() Тогда
		ЕстьОтличия = Истина;
	Иначе
		Для Каждого СтрокаВДанныхОбновления Из ДанныеОбновления.Этапы Цикл
			ИндексТекущейСтроки = ДанныеОбновления.Этапы.Индекс(СтрокаВДанныхОбновления);
			СтрокаВПроцессе = Этапы[ИндексТекущейСтроки];

			Если СтрокаВДанныхОбновления.Идентификатор <> СтрокаВПроцессе.Идентификатор
				Или СтрокаВДанныхОбновления.НаименованиеЭтапа <> СтрокаВПроцессе.НаименованиеЭтапа
				Или СтрокаВДанныхОбновления.ПорядокВыполненияУчастниками
				<> СтрокаВПроцессе.ПорядокВыполненияУчастниками Тогда

				ЕстьОтличия = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если ЕстьОтличия Тогда
		КэшЭтапов = Новый Соответствие;
		Для Каждого СтрокаЭтапа Из Этапы Цикл
			КэшЭтапов.Вставить(СтрокаЭтапа.Идентификатор, СтрокаЭтапа);
		КонецЦикла;

		НовыеЭтапы = Этапы.ВыгрузитьКолонки();
		Для Каждого СтрокаЭтапа Из ДанныеОбновления.Этапы Цикл
			НоваяСтрокаЭтапа = НовыеЭтапы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаЭтапа, СтрокаЭтапа);

			ТекущаяСтрокаЭтапа = КэшЭтапов[НоваяСтрокаЭтапа.Идентификатор];
			Если ТекущаяСтрокаЭтапа <> Неопределено Тогда
				НоваяСтрокаЭтапа.Пройден = ТекущаяСтрокаЭтапа.Пройден;
			КонецЕсли;
		КонецЦикла;

		Этапы.Очистить();
		Этапы.Загрузить(НовыеЭтапы);

	КонецЕсли;
	
	// Участники	
	ЕстьОтличия = Ложь;
	СрокИзменен = Ложь;
	
	Если Участники.Количество() <> ДанныеОбновления.Участники.Количество() Тогда
		ЕстьОтличия = Истина;
		СрокИзменен = Истина;
	Иначе
		Для Каждого СтрокаВДанныхОбновления Из ДанныеОбновления.Участники Цикл
			ИндексТекущейСтроки = ДанныеОбновления.Участники.Индекс(СтрокаВДанныхОбновления);
			СтрокаВПроцессе = Участники[ИндексТекущейСтроки];
			СрокИзменен = СтрокаВДанныхОбновления.ВариантУстановкиСрокаИсполнения <>
				СтрокаВПроцессе.ВариантУстановкиСрокаИсполнения	
				Или СтрокаВДанныхОбновления.СрокИсполнения <> СтрокаВПроцессе.СрокИсполнения
				Или СтрокаВДанныхОбновления.СрокИсполненияДни <> СтрокаВПроцессе.СрокИсполненияДни
				Или СтрокаВДанныхОбновления.СрокИсполненияЧасы <> СтрокаВПроцессе.СрокИсполненияЧасы
				Или СтрокаВДанныхОбновления.СрокИсполненияМинуты <> СтрокаВПроцессе.СрокИсполненияМинуты;
				
			Если СтрокаВДанныхОбновления.Этап <> СтрокаВПроцессе.Этап
				Или СтрокаВДанныхОбновления.Участник <> СтрокаВПроцессе.Участник
				Или СтрокаВДанныхОбновления.Идентификатор <> СтрокаВПроцессе.Идентификатор
				Или СтрокаВДанныхОбновления.ТрудозатратыПлан <> СтрокаВПроцессе.ТрудозатратыПлан
				Или СтрокаВДанныхОбновления.ТочкаМаршрута <> СтрокаВПроцессе.ТочкаМаршрута	Или СрокИзменен
				Или СтрокаВДанныхОбновления.Подписывающий <> СтрокаВПроцессе.Подписывающий Тогда
					ЕстьОтличия = Истина;
					Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Если ЕстьОтличия Тогда

		КэшУчастников = Новый Соответствие;
		Для Каждого СтрокаУчастинка Из Участники Цикл
			КэшУчастников.Вставить(СтрокаУчастинка.Идентификатор, СтрокаУчастинка);
		КонецЦикла;

		НовыеУчастники = Участники.ВыгрузитьКолонки();
		Для Каждого СтрокаУчастника Из ДанныеОбновления.Участники Цикл
			НоваяСтрокаУчастника = НовыеУчастники.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаУчастника, СтрокаУчастника);

			ТекущаяСтрокаУчастника = КэшУчастников[НоваяСтрокаУчастника.Идентификатор];
			Если ТекущаяСтрокаУчастника <> Неопределено Тогда
				НоваяСтрокаУчастника.Пройден = ТекущаяСтрокаУчастника.Пройден;
			КонецЕсли;
		КонецЦикла;

		Участники.Очистить();
		Участники.Загрузить(НовыеУчастники);

	КонецЕсли;
	
	Если СрокИзменен Тогда
		ПараметрыДляРасчетаСроков = СрокиИсполненияПроцессов.ПараметрыДляРасчетаСроков();
		ПараметрыДляРасчетаСроков.ДатаОтсчета = 
			СрокиИсполненияПроцессов.ДатаОтсчетаДляРасчетаСроковПроцесса(ЭтотОбъект,
				ПредопределенноеЗначение("БизнесПроцесс.Подписание.ТочкаМаршрута.ОбработатьРезультат"));
		ПараметрыДляРасчетаСроков.ТекущаяИтерация = НомерИтерации;
		ПараметрыДляРасчетаСроков.Смещение = СрокиИсполненияПроцессовКорп.СмещенияДатыОтсчета(Ссылка);
		СрокиИсполненияПроцессов.РассчитатьСрокиПодписания(ЭтотОбъект, ПараметрыДляРасчетаСроков);
	КонецЕсли;
	
КонецПроцедуры

// Обновляет активный процесс по переданной структуре.
// При этом записывает процесс и обновляет его задачи. 
// 
// Параметры:
//  ДанныеОбновления - Структура, см. СтруктураДанныхДляЗаполнения()
// 
Процедура ОбновитьАктивныйПроцесс(ДанныеОбновления) Экспорт

	ОбновитьДанныеПроцесса(ДанныеОбновления);
	
	// Запись процесса и обновление задач.

	Если Модифицированность() Тогда
		СтарыеУчастникиПроцесса = БизнесПроцессыИЗадачиВызовСервера.ТекущиеУчастникиПроцесса(Ссылка);

		НачатьТранзакцию();
		Попытка
			
			ПараметрыСеанса.ОтключитьОбновлениеЗадач = Истина;
			
			Записать();
			ИзменитьРеквизитыНевыполненныхЗадач(СтарыеУчастникиПроцесса, Новый Структура);
			
			ИнтеграцияЗадач.ОбновитьЗадачуПоИсточнику(Ссылка);
			ПараметрыСеанса.ОтключитьОбновлениеЗадач = Ложь;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ПараметрыСеанса.ОтключитьОбновлениеЗадач = Ложь;
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СтартПроцесса

Процедура ОтложенныйСтарт() Экспорт

	СтартПроцессовСервер.СтартоватьПроцессОтложенно(ЭтотОбъект);

КонецПроцедуры

Процедура ОтключитьОтложенныйСтарт() Экспорт

	СтартПроцессовСервер.ОтключитьОтложенныйСтарт(ЭтотОбъект);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ЗаполнениеПроцесса

// Дополняет описание процесса общим описанием
Процедура ДополнитьОписание(ОбщееОписание) Экспорт

	Если Не ЗначениеЗаполнено(ОбщееОписание) Тогда
		Возврат;
	КонецЕсли;
	Описание = ОбщееОписание + Символы.ПС + Описание;

КонецПроцедуры

#КонецОбласти

#Область СтартПроцесса

// Проверяет что заполнены поля шаблона
Функция ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта() Экспорт

	МассивПолей = Новый Массив;

	ТочкиМаршрута = БизнесПроцессы.Подписание.ТочкиМаршрута;

	Если Участники.Найти(ТочкиМаршрута.Подписать) = Неопределено
		И Участники.Найти(ТочкиМаршрута.ОбеспечитьПодписание) = Неопределено Тогда

		МассивПолей.Добавить("Участники");
	КонецЕсли;

	Возврат МассивПолей;

КонецФункции

#КонецОбласти

#Область ЗадачиПроцесса

// Возвращает признак наличия метода ИзменитьРеквизитыНевыполненныхЗадач
//
Функция ЕстьМетодИзменитьРеквизитыНевыполненныхЗадач() Экспорт

	Возврат Истина;

КонецФункции

// Обновляет значения реквизитов невыполненных задач 
// при изменении реквизитов бизнес-процесса.
//
Процедура ИзменитьРеквизитыНевыполненныхЗадач(СтарыеУчастникиПроцесса, ПараметрыЗаписи) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Если Не ЗначениеЗаполнено(Ссылка) Или Не Стартован Или Завершен Или ПометкаУдаления
		Или Состояние <> Перечисления.СостоянияБизнесПроцессов.Активен Тогда

		Возврат;
	КонецЕсли;
	
	АвторИзменения = Неопределено;
	Если Не ПараметрыЗаписи.Свойство("АвторИзменения", АвторИзменения) Тогда
		АвторИзменения = ПользователиДокументооборот.ОлицетворяемыйПользователь();
	КонецЕсли;
	
	Попытка
		
		ПараметрыСеанса.ОтключитьОбновлениеЗадач = Истина;
		
		КэшУчастников = Новый Соответствие;
		Для Каждого СтрокаУчастника Из Участники Цикл
			КэшУчастников[СтрокаУчастника.Идентификатор] = СтрокаУчастника;
		КонецЦикла;

		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Задачи.Ссылка КАК ЗадачаПроцесса,
		|	Задачи.ИдентификаторИсполнителя,
		|	Задачи.ТочкаМаршрута
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК Задачи
		|ГДЕ
		|	Задачи.БизнесПроцесс = &БизнесПроцесс
		|	И Не Задачи.ПометкаУдаления
		|	И Не Задачи.Выполнена";

		Запрос.УстановитьПараметр("БизнесПроцесс", Ссылка);
		ВыборкаТекущихЗадач = Запрос.Выполнить().Выбрать();

		ТочкиМаршрута = БизнесПроцессы.Подписание.ТочкиМаршрута;
		
		ТочкиМаршрутаАктивныхЗадач = Новый Соответствие;
		
		// Обновляем активные задачи процесса.
		Пока ВыборкаТекущихЗадач.Следующий() Цикл
			
			ТочкиМаршрутаАктивныхЗадач[ВыборкаТекущихЗадач.ТочкаМаршрута] = Истина;
			
			СтрокаУчастника = КэшУчастников[ВыборкаТекущихЗадач.ИдентификаторИсполнителя];
			Если СтрокаУчастника = Неопределено Тогда
				Продолжить;
			КонецЕсли;

			ЗадачаПроцесса = ВыборкаТекущихЗадач.ЗадачаПроцесса.ПолучитьОбъект();
			ЗадачаПроцесса.ДополнительныеСвойства.Вставить("АвторИзменения", АвторИзменения);
			Если ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыЗаписи, "ОбновитьПовторно", Ложь) Тогда
				ЗадачаПроцесса.ДополнительныеСвойства.Вставить("ОбновитьПовторно", Истина);
			КонецЕсли;
			Если СтрокаУчастника.ТочкаМаршрута = ТочкиМаршрута.Подписать
				Или СтрокаУчастника.ТочкаМаршрута = ТочкиМаршрута.ОбеспечитьПодписание Тогда

				ЗаполнитьЗадачуПроцессаПоСтрокеУчастникаЭтапаПодписания(
					ЗадачаПроцесса, СтрокаУчастника);

			ИначеЕсли СтрокаУчастника.ТочкаМаршрута = ТочкиМаршрута.ОбработатьРезультат Тогда
				ЗаполнитьЗадачуПроцесса_ОбработатьРезультат(ЗадачаПроцесса, СтрокаУчастника);
			КонецЕсли;

			Если ЗадачаПроцесса.Модифицированность() Тогда
				ЗаблокироватьДанныеДляРедактирования(ЗадачаПроцесса.Ссылка);

				ПереносСроковВыполненияЗадач.ПередатьПричинуИЗаявкуНаПереносаСрока(
					ЗадачаПроцесса, ДополнительныеСвойства);

				ЗадачаПроцесса.Записать();
			КонецЕсли;

		КонецЦикла;
		
		Если ТочкиМаршрутаАктивныхЗадач[ТочкиМаршрута.Подписать] = Истина
			Или ТочкиМаршрутаАктивныхЗадач[ТочкиМаршрута.ОбеспечитьПодписание] = Истина Тогда 
		
			// Обновляем признак прохождения этапов.
			Для Каждого СтрокаЭтапа Из Этапы Цикл
				ОбновитьПризнакПрохожденияУЭтапа(СтрокаЭтапа.Идентификатор);
			КонецЦикла;
			
			// Создаем задачи для новых участников этапов подписания.
			ТекущийЭтап = ОчереднойЭтапДляВыполнения();
			ПодготовитьЭтапКВыполнению(ТекущийЭтап);
		
			НовыеЗадачиПроцесса = СоздатьЗадачиПроцессаДляОчередныхУчастниковЭтаповПодписания(
				ТочкиМаршрута.Подписать);
			Для Каждого ЗадачаПроцесса Из НовыеЗадачиПроцесса Цикл
				ЗадачаПроцесса.Записать();
			КонецЦикла;
		
			НовыеЗадачиПроцесса = СоздатьЗадачиПроцессаДляОчередныхУчастниковЭтаповПодписания(
				ТочкиМаршрута.ОбеспечитьПодписание);
			Для Каждого ЗадачаПроцесса Из НовыеЗадачиПроцесса Цикл
				ЗадачаПроцесса.Записать();
			КонецЦикла;
			
		КонецЕсли;
		
		// Записываем изменения в процессе.
		Если ЭтотОбъект.Модифицированность() Тогда
			РаботаСБизнесПроцессами.ЗаписатьПроцесс(ЭтотОбъект, "ПростаяЗапись");
		КонецЕсли;
		
		// Исключаем задачи подписания удаленных участников.

		ВыборкаТекущихЗадач.Сбросить();
		Пока ВыборкаТекущихЗадач.Следующий() Цикл

			СтрокаУчастника = КэшУчастников[ВыборкаТекущихЗадач.ИдентификаторИсполнителя];
			Если СтрокаУчастника <> Неопределено Тогда
				Продолжить;
			КонецЕсли;

			ЗадачаПроцессаОбъект = ВыборкаТекущихЗадач.ЗадачаПроцесса.ПолучитьОбъект();
			ЗадачаПроцессаОбъект.ДополнительныеСвойства.Вставить("АвторИзменения", АвторИзменения);
			ЗадачаПроцессаОбъект.ИсключитьИзПроцесса();

		КонецЦикла;
		
		Если Не (ДополнительныеСвойства.Свойство("ОтключитьОбновлениеЗадач")
			И ДополнительныеСвойства.ОтключитьОбновлениеЗадач) Тогда
			ИнтеграцияЗадач.ОбновитьЗадачуПоИсточнику(Ссылка);
		КонецЕсли;
		ПараметрыСеанса.ОтключитьОбновлениеЗадач = Ложь;
		
	Исключение
		ПараметрыСеанса.ОтключитьОбновлениеЗадач = Ложь;
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры 

// Помещает в процесс результат выполнения задачи процесса с точками маршрута Подписать,
// ОбеспечитьПодписание.
// 
// Параметры:
// 	ЗадачаПроцесса - ЗадачаСсылка.ЗадачаИсполнителя
// 	РезультатПодписания - ПеречислениеСсылка.РезультатыПроцессаПодписания
//
Процедура ПоместитьРезультатВыполненияЗадачиПодписать(ЗадачаПроцесса, РезультатПодписания) Экспорт

	СтрокаРезультата = РезультатыПодписания.Найти(ЗадачаПроцесса, "ЗадачаПроцесса");
	Если СтрокаРезультата = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СтрокаРезультата.РезультатПодписания = РезультатПодписания;

КонецПроцедуры

// Помещает в процесс результат выполнения задачи процесса с точкой маршрута ОбработатьРезультат.
// 
// Параметры:
// 	ЗадачаПроцесса - ЗадачаСсылка.ЗадачаИсполнителя
// 	ОтправленоНаПовторноеПодписание - Булево
//
Процедура ПоместитьРезультатВыполненияЗадачиОбработатьРезультат(ЗадачаПроцесса,
	ОтправленоНаПовторноеПодписание) Экспорт

	СтрокаРезультата = РезультатыОбработок.Найти(ЗадачаПроцесса, "ЗадачаПроцесса");
	Если СтрокаРезультата = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СтрокаРезультата.ОтправленоНаПовторноеПодписание = ОтправленоНаПовторноеПодписание;

КонецПроцедуры

#КонецОбласти

#Область Предметы

// Проверяет права участников процесса на предметы этого процесса.
// Если у участников процесса отсутствуют права на предметы, то выводятся сообщения с привязкой
// к карточке процесса.
//
// Параметры
//  ПроцессОбъект - БизнесПроцессОбъект - процесс.
//  Отказ - Булево - в этот параметр помещается значение Истина, если кто-то из участников не имеет
//                   прав на предметы.
//  ПроверятьПриИзменении - Булево - если указано значение Истина, то проверка выполняется только если
//                          изменены участники или предметы процесса, иначе проверка выполняется всегда.
//
Процедура ПроверитьПраваУчастниковПроцессаНаПредметы(
	ПроцессОбъект, Отказ, ПроверятьПриИзменении) Экспорт

	Мультипредметность.ПроверитьПраваУчастниковПроцессаНаПредметы(
		ПроцессОбъект, Отказ, ПроверятьПриИзменении);

КонецПроцедуры

#КонецОбласти

// Возвращает описание задачи, специфичное для бизнес-процесса
Функция ПолучитьОписаниеУведомленияЗадачи(ЗадачаПроцесса, КодЯзыкаПолучателя) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ЗадачаПроцесса,
		"Ссылка,
		|БизнесПроцесс,
		|ИдентификаторИсполнителя,
		|Исполнитель,
		|ТочкаМаршрута,
		|Выполнена");

	Результат = Неопределено;

	Если РеквизитыЗадачи.БизнесПроцесс <> Ссылка Тогда
		Возврат Результат;
	КонецЕсли;

	ТочкиМаршрута = БизнесПроцессы.Подписание.ТочкиМаршрута;

	Если РеквизитыЗадачи.ТочкаМаршрута = ТочкиМаршрута.Подписать Или РеквизитыЗадачи.ТочкаМаршрута
		= ТочкиМаршрута.ОбеспечитьПодписание Тогда

		РезультатПодписанияЗадачи = РезультатыПодписания.Найти(РеквизитыЗадачи.Ссылка, "ЗадачаПроцесса");
		Если РезультатПодписанияЗадачи = Неопределено Тогда
			// Не заполняем описание.
		ИначеЕсли РезультатПодписанияЗадачи.РезультатПодписания
			= Перечисления.РезультатыПроцессаПодписания.Подписано Тогда

			Результат = НСтр("ru = 'Результат подписания: Подписано'", КодЯзыкаПолучателя);

		ИначеЕсли РезультатПодписанияЗадачи.РезультатПодписания
			= Перечисления.РезультатыПроцессаПодписания.НеПодписано Тогда

			Результат = НСтр("ru = 'Результат подписания: Не подписано'", КодЯзыкаПолучателя);

		Иначе

			Отбор = Новый Структура;
			Отбор.Вставить("НомерИтерации", РезультатПодписанияЗадачи.НомерИтерации - 1);
			Отбор.Вставить("Идентификатор", РеквизитыЗадачи.ИдентификаторИсполнителя);

			СтрокиРезультатовПредыдущейИтерации = РезультатыПодписания.НайтиСтроки(Отбор);
			Для Каждого СтрокаРезультата Из СтрокиРезультатовПредыдущейИтерации Цикл
				Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					СтрокаРезультата.ЗадачаПроцесса, "Исполнитель") = РеквизитыЗадачи.Исполнитель Тогда

					Результат = НСтр("ru = 'Задача была направлена на повторное подписание'",
						КодЯзыкаПолучателя);
					Прервать;
				КонецЕсли;
			КонецЦикла;

		КонецЕсли;

	ИначеЕсли РеквизитыЗадачи.ТочкаМаршрута = ТочкиМаршрута.ОбработатьРезультат Тогда

		РезультатВыполненияЗадачи = РезультатыОбработок.Найти(РеквизитыЗадачи.Ссылка, "ЗадачаПроцесса");
		Если РезультатВыполненияЗадачи = Неопределено Тогда

			Результат = НСтр("ru = 'Результат подписания: Подписано'", КодЯзыкаПолучателя);

		Иначе
			
			// Задача обработки замечаний, формируемая при отрицательном результате.

			Результат = НСтр("ru = 'Результат подписания: Не подписано'", КодЯзыкаПолучателя);

			Если РеквизитыЗадачи.Выполнена Тогда

				Если РезультатВыполненияЗадачи.ОтправленоНаПовторноеПодписание Тогда
					РезультатОбработкиЗамечаний = НСтр(
						"ru = 'Результат обработки замечаний: Отправлено на повторное подписание'",
						КодЯзыкаПолучателя);
				Иначе
					РезультатОбработкиЗамечаний = НСтр(
						"ru = 'Результат обработки замечаний: Подписание завершено'",
						КодЯзыкаПолучателя);
				КонецЕсли;

				ДобавитьЗначениеКСтрокеЧерезРазделитель(
					Результат, Символы.ПС, РезультатОбработкиЗамечаний);

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Возврат Результат;

КонецФункции

// Формирует шаблон по процессу
// Параметры:
//	ВладелецШаблона - ссылка на шаблон комплексного процесса или комплексный процесс, который будет владельцем
//		создаваемого шаблона процесса
// Возвращает:
//	Ссылка на созданный шаблон
Функция СоздатьШаблонПоПроцессу(ВладелецШаблона = Неопределено) Экспорт
		
	ИмяТипа = БизнесПроцессы[ЭтотОбъект.Метаданные().Имя].ТипШаблона();	
	ШаблонОбъект = Справочники[СтрЗаменить(ИмяТипа, "Справочник.", "")].СоздатьЭлемент();
	
	// Перенос базовых реквизитов процесса
	ШаблонОбъект.Наименование = Наименование;
	ШаблонОбъект.НаименованиеБизнесПроцесса = Наименование;
	ШаблонОбъект.Описание = Описание;
	ШаблонОбъект.Важность = Важность;
	ШаблонОбъект.Автор = Сотрудники.ОсновнойСотрудник();
	ШаблонОбъект.ВладелецШаблона = ВладелецШаблона;
	
	ШаблонОбъект.Предметы.Загрузить(Предметы.Выгрузить());
	Для Каждого СтрокаПредмета Из ШаблонОбъект.Предметы Цикл
		Если ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда
			ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(
				СтрокаПредмета.Предмет.Метаданные().ПолноеИмя()).ПустаяСсылка();
		КонецЕсли;
	КонецЦикла;
	ШаблонОбъект.ПредметыЗадач.Загрузить(ПредметыЗадач.Выгрузить());
	
	// СпособПодписания
	ШаблонОбъект.СпособПодписания = СпособПодписания;
	
	// Этапы
	Для Каждого СтрокаЭтапа Из Этапы Цикл
		ЗаполнитьЗначенияСвойств(ШаблонОбъект.Этапы.Добавить(), СтрокаЭтапа);
	КонецЦикла;
	
	ВариантыУстановкиСрока = СрокиИсполненияПроцессовКлиентСервер.ВариантыУстановкиСрокаИсполнения();
	
	РеквизитыУчастника = 
		"Этап,
		|Идентификатор,
		|Участник,
		|Подписывающий,
		|ТочкаМаршрута,
		|СрокИсполненияДни,
		|СрокИсполненияЧасы,
		|СрокИсполненияМинуты,
		|Описание";
	
	// Участники
	Для Каждого СтрокаУчастника Из Участники Цикл
		СтрокаУчастникаШаблон = ШаблонОбъект.Участники.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаУчастникаШаблон, СтрокаУчастника, РеквизитыУчастника);
		СтрокаУчастникаШаблон.ВариантУстановкиСрокаИсполнения = ВариантыУстановкиСрока.ОтносительныйСрок;
	КонецЦикла;
	
	// Количество итераций
	ШаблонОбъект.КоличествоИтераций = КоличествоИтераций;
	
	ШаблонОбъект.Ответственный = Сотрудники.ОсновнойСотрудник();
	ШаблонОбъект.Записать();
	Возврат ШаблонОбъект.Ссылка;

КонецФункции

// Заполнит структуру возврата вместо диалога настроек процесса
//
//Параметры
//  РезультатВыполнения
//
Процедура ЗаполнитьРезультатНастроекПроцесса(СтруктураРезультата) Экспорт
		
	ДанныеПроцесса = СтруктураДанныхДляЗаполнения();
	ЗаполнитьЗначенияСвойств(ДанныеПроцесса, ЭтотОбъект,, "Этапы, Участники, Предметы");
	Для Каждого СтрокаЭтапа Из Этапы Цикл
		ЗаполнитьЗначенияСвойств(ДанныеПроцесса.Этапы.Добавить(), СтрокаЭтапа);
	КонецЦикла;
	Для Каждого СтрокаУчастника Из Участники Цикл
		ЗаполнитьЗначенияСвойств(ДанныеПроцесса.Участники.Добавить(), СтрокаУчастника);
	КонецЦикла;
	СтруктураРезультата.Вставить("ДанныеПроцесса", Новый ХранилищеЗначения(ДанныеПроцесса));
		
	СтруктураРезультата.Вставить("ПричинаПереносаСрока", "");

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)

	Если ЭтоНовый() Тогда

		Дата = ТекущаяДатаСеанса();

		Если Не ЗначениеЗаполнено(Автор) Тогда
			Автор = Сотрудники.ОсновнойСотрудник();
		КонецЕсли;

		СтрокаУчастника_ОбработатьРезультат = 
			РаботаСБизнесПроцессами.СтрокаУчастника_ОбработатьРезультатПодписания(ЭтотОбъект);
		СтрокаУчастника_ОбработатьРезультат.Участник = Автор;

		Важность = Перечисления.ВариантыВажностиОбъектов.Обычная;
		НомерИтерации = 0;

		Если Не ЗначениеЗаполнено(Проект) Тогда
			Проект = РаботаСПроектами.ПолучитьПроектПоУмолчанию();
		КонецЕсли;

		СпособПодписания = Перечисления.СпособыПодписанияПредметаПроцесса.ПЭП;
		ПорядокВыполненияУчастниками = Перечисления.ПорядокВыполненияЭтапаПроцесса.Параллельно;
	КонецЕсли;

	Если ДанныеЗаполнения <> Неопределено И ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Тогда
		Мультипредметность.ПередатьПредметыПроцессу(ЭтотОбъект, ДанныеЗаполнения, Ложь, Истина);
	КонецЕсли;

	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("ВедущаяЗадача") Тогда
			ВедущаяЗадача = ДанныеЗаполнения.ВедущаяЗадача;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Важность") Тогда
			Важность = ДанныеЗаполнения.Важность;
		КонецЕсли;

		Если ДанныеЗаполнения.Свойство("Наименование") Тогда
			Наименование = ДанныеЗаполнения.Наименование;
		КонецЕсли;

		Если ДанныеЗаполнения.Свойство("Шаблон") Тогда
			Мультипредметность.ЗаполнитьПредметыПроцессаПоШаблону(ДанныеЗаполнения.Шаблон,
				ЭтотОбъект);
		КонецЕсли;

		Если ДанныеЗаполнения.Свойство("Предметы") Тогда
			Мультипредметность.ПередатьПредметыПроцессу(ЭтотОбъект, ДанныеЗаполнения.Предметы,
				Ложь, Истина);
			Проект = МультипредметностьПереопределяемый.ПолучитьОсновнойПроектПоПредметам(
				ДанныеЗаполнения.Предметы);
		КонецЕсли;

		Если ДанныеЗаполнения.Свойство("АвторСобытия") Тогда
			Автор = ДанныеЗаполнения.АвторСобытия;
		КонецЕсли;

		Если ДанныеЗаполнения.Свойство("Автор") И ЗначениеЗаполнено(ДанныеЗаполнения.Автор) Тогда
			Автор = ДанныеЗаполнения.Автор;
		КонецЕсли;

		Если ДанныеЗаполнения.Свойство("Шаблон") Тогда
			ЗаполнитьПоШаблону(ДанныеЗаполнения.Шаблон);
		КонецЕсли;

		Если ДанныеЗаполнения.Свойство("ЗадачаИсполнителя") Тогда
			ЗадачаСсылка = ДанныеЗаполнения.ЗадачаИсполнителя;
			ЗаполнитьБизнесПроцессПоЗадаче(ЗадачаСсылка);
		КонецЕсли;

		Если ДанныеЗаполнения.Свойство("ПроектнаяЗадача") Тогда
			ЗаполнитьПоПроектнойЗадаче(ДанныеЗаполнения.ПроектнаяЗадача);
		КонецЕсли;

		Если ДанныеЗаполнения.Свойство("Проект") Тогда
			Проект = ДанныеЗаполнения.Проект;
		КонецЕсли;

		Если ДанныеЗаполнения.Свойство("КоличествоИтераций") Тогда
			КоличествоИтераций = ДанныеЗаполнения.КоличествоИтераций;
		КонецЕсли;

		Если ДанныеЗаполнения.Свойство("СпособПодписания") Тогда
			СпособПодписания = ДанныеЗаполнения.СпособПодписания;
		КонецЕсли;

		Если ДанныеЗаполнения.Свойство("Этапы") И ТипЗнч(ДанныеЗаполнения.Этапы) = Тип(
			"ТаблицаЗначений") Тогда

			Для Каждого СтрокаЭтапа Из ДанныеЗаполнения.Этапы Цикл
				ЗаполнитьЗначенияСвойств(Этапы.Добавить(), СтрокаЭтапа);
			КонецЦикла;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ПорядокВыполненияУчастниками") Тогда
			ПорядокВыполненияУчастниками = ДанныеЗаполнения.ПорядокВыполненияУчастниками;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Участники") И ТипЗнч(ДанныеЗаполнения.Участники) = Тип(
			"ТаблицаЗначений") Тогда
			
			ТочкиМаршрута = БизнесПроцессы.Подписание.ТочкиМаршрута;
			
			СтрокаУчастника_ОбработатьРезультат = 
				РаботаСБизнесПроцессами.СтрокаУчастника_ОбработатьРезультатПодписания(ЭтотОбъект);
			
			Для Каждого СтрокаУчастника Из ДанныеЗаполнения.Участники Цикл
				Если СтрокаУчастника.ТочкаМаршрута = ТочкиМаршрута.ОбработатьРезультат Тогда
					СтрокаНовогоУчастника = СтрокаУчастника_ОбработатьРезультат;
				Иначе
					СтрокаНовогоУчастника = Участники.Добавить();
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(СтрокаНовогоУчастника, СтрокаУчастника);
			КонецЦикла;
			
		КонецЕсли;

		Если ДанныеЗаполнения.Свойство("Исполнители") И ДанныеЗаполнения.Свойство("Исполнители")
			= Тип("Массив") И Этапы.Количество() = 0 Тогда

			ТочкиМаршрута = БизнесПроцессы.Подписание.ТочкиМаршрута;

			ИндексИсполнителя = ДанныеЗаполнения.Исполнители.Количество() - 1;
			Пока ИндексИсполнителя >= 0 Цикл
				СтрокаУчастника = Участники.Вставить(0);
				СтрокаУчастника.Участник = ДанныеЗаполнения.Исполнители[ИндексИсполнителя];
				СтрокаУчастника.ТочкаМаршрута = ТочкиМаршрута.Подписать;
				ИндексИсполнителя = ИндексИсполнителя - 1;
			КонецЦикла;
		КонецЕсли;

	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда

		ЗадачаСсылка = ДанныеЗаполнения;
		ЗаполнитьБизнесПроцессПоЗадаче(ЗадачаСсылка);

	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.ПроектныеЗадачи") Тогда

		ЗаполнитьПоПроектнойЗадаче(ДанныеЗаполнения);

	КонецЕсли;
	
	СтрокаУчастника_ОбработатьРезультат = 
		РаботаСБизнесПроцессами.СтрокаУчастника_ОбработатьРезультатПодписания(ЭтотОбъект);
	Если Не ЗначениеЗаполнено(СтрокаУчастника_ОбработатьРезультат.Участник) Тогда
		СтрокаУчастника_ОбработатьРезультат.Участник = Автор;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Наименование) И Предметы.Количество() > 0 Тогда
		МультипредметностьКлиентСервер.ЗаполнитьНаименованиеПроцесса(
			ЭтотОбъект, НаименованиеПроцессаБезПредметовПоУмолчанию());
	КонецЕсли;

	БизнесПроцессыИЗадачиСервер.ЗаполнитьГлавнуюЗадачу(ЭтотОбъект, ДанныеЗаполнения);

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	Мультипредметность.ПроверитьКорректностьТиповОсновныхПредметов(ЭтотОбъект, Отказ);

	ТочкиМаршрута = БизнесПроцессы.Подписание.ТочкиМаршрута;

	СтрокаПодписать = Участники.Найти(ТочкиМаршрута.Подписать, "ТочкаМаршрута");
	СтрокаОбеспечитьПодписание = Участники.Найти(ТочкиМаршрута.ОбеспечитьПодписание, "ТочкаМаршрута");
		
	Если СтрокаПодписать = Неопределено И СтрокаОбеспечитьПодписание = Неопределено Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Нет ни одного подписывающего.'"), ЭтотОбъект,, "УчастникиПроцесса", Отказ);
	КонецЕсли;

	СтрокаУчастника = РаботаСБизнесПроцессами.СтрокаУчастника_ОбработатьРезультатПодписания(
		ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(СтрокаУчастника.Участник) Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Не указан обрабатывающий результат.'"), ЭтотОбъект,, "УчастникиПроцесса",
			Отказ);
	КонецЕсли;
	
	РаботаСПроцессамиПоОбработкамОбъектов.ПроверкаЗапретаНаЗапускПоПредметуИзДругойСистемы(ЭтотОбъект, Отказ);
	
	// Проверка прав участников процесса на предметы
	Если Не РаботаСБизнесПроцессами.ЭтоФоновоеВыполнениеПроцесса() Тогда

		ПроверитьПраваУчастниковПроцессаНаПредметы(ЭтотОбъект, Отказ, Стартован);
	КонецЕсли;

КонецПроцедуры

Процедура ПередЗаписью(Отказ)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ОбычнаяЗапись = Истина;
	ТолькоОбновлениеРабочейГруппыПроцессов = Ложь;
	Если ДополнительныеСвойства.Свойство("ВидЗаписи") Тогда
		ОбычнаяЗапись = Ложь;
		ТолькоОбновлениеРабочейГруппыПроцессов = (ДополнительныеСвойства.ВидЗаписи
			= "ЗаписьСОбновлением_Предметов_ПредметовЗадач_Проекта_ОбщегоСпискаПроцессов_РабочихГруппПредметов_РабочихГруппПроцессов_ДопРеквизитовПоПредметам");
		Если Не ТолькоОбновлениеРабочейГруппыПроцессов Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если ОбычнаяЗапись
		И Не МиграцияДанныхИзВнешнихСистемСервер.ЭтоОбъектИзДругойСистемы(ИсточникДанных) Тогда
	
		Если Не РаботаСБизнесПроцессамиВызовСервера.ПроверитьПередЗаписью(ЭтотОбъект) Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;

		ПредыдущаяПометкаУдаления = Ложь;
		Если Не Ссылка.Пустая() Тогда
			ПредыдущаяПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Ссылка, "ПометкаУдаления");
		КонецЕсли;
		ДополнительныеСвойства.Вставить("ПредыдущаяПометкаУдаления", ПредыдущаяПометкаУдаления);

		Если Не Ссылка.Пустая() Тогда
			ПредыдущееСостояние = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Состояние");
			ДополнительныеСвойства.Вставить("ПредыдущееСостояние", ПредыдущееСостояние);
		КонецЕсли;

		Если ПометкаУдаления <> ПредыдущаяПометкаУдаления Тогда
			РаботаСФайламиВызовСервера.ПометитьНаУдалениеПриложенныеФайлы(Ссылка, ПометкаУдаления);
		КонецЕсли;

	КонецЕсли;

	Если ОбычнаяЗапись Или ТолькоОбновлениеРабочейГруппыПроцессов Тогда
		// Обработка рабочей группы	
		РаботаСБизнесПроцессамиВызовСервера.СформироватьРабочуюГруппу(ЭтотОбъект);
	КонецЕсли;

	Если ОбычнаяЗапись Тогда
		ЗаполнитьПустыеИдентификаторыУчастников();
		ПроверитьУникальностьИдентификаторовУчастников();
		ПроверитьКорректностьЗаполненияПорядкаВыполнения();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	ИнтеграцияЗадач.ПриЗаписиИсточникаЗадачи(ЭтотОбъект);
	
	Если ДополнительныеСвойства.Свойство("ВидЗаписи") Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаОчередиЗаданийСервер.ПриЗаписиПроцесса(ЭтотОбъект);
	
	ПредыдущаяПометкаУдаления = Ложь;
	Если ДополнительныеСвойства.Свойство("ПредыдущаяПометкаУдаления") Тогда
		ПредыдущаяПометкаУдаления = ДополнительныеСвойства.ПредыдущаяПометкаУдаления;
	КонецЕсли;

	Если (ПометкаУдаления <> ПредыдущаяПометкаУдаления)
		И Не МиграцияДанныхИзВнешнихСистемСервер.ЭтоОбъектИзДругойСистемы(ИсточникДанных) Тогда
		
		ПротоколированиеРаботыСотрудников.ЗаписатьПометкуУдаления(Ссылка, ПометкаУдаления);
	КонецЕсли;
	
	СтартПроцессовСервер.ПроцессПриЗаписи(ЭтотОбъект, Отказ);

КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	РаботаСБизнесПроцессами.ПриКопированииБизнесПроцесса(ОбъектКопирования);

	Дата = ТекущаяДатаСеанса();
	Автор = Сотрудники.ОсновнойСотрудник();
	НомерИтерации = 0;
	РезультатыПодписания.Очистить();
	РезультатыОбработок.Очистить();

	ДатаНачала = '00010101';
	ДатаЗавершения = '00010101';

	РезультатПодписания = Неопределено;

	Для Каждого СтрокаУчастника Из Участники Цикл
		СтрокаУчастника.Пройден = Ложь;
	КонецЦикла;

	Для Каждого СтрокаЭтапа Из Этапы Цикл
		СтрокаЭтапа.Пройден = Ложь;
	КонецЦикла;

КонецПроцедуры

#Область КартаМаршрута

Процедура СтартПередСтартом(ТочкаМаршрута, Отказ)

	ДатаНачала = ТекущаяДатаСеанса();

	РаботаСПроектами.ОтметитьНачалоВыполненияПроектнойЗадачи(ЭтотОбъект);

КонецПроцедуры

Процедура ПодготовкаИтерацииОбработка(ТочкаМаршрута)

	ПодготовитьПроцессКНовойИтерации();

КонецПроцедуры

Процедура ПодготовкаЭтапаКВыполнениюОбработка(ТочкаМаршрута)

	ПодготовитьОчереднойЭтапКВыполнению();

КонецПроцедуры

Процедура ОбеспечитьПодписаниеПередСозданиемЗадач(ТочкаМаршрута, ФормируемыеЗадачи,
	СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	НовыеЗадачиПроцесса = СоздатьЗадачиПроцессаДляОчередныхУчастниковЭтаповПодписания(ТочкаМаршрута);
	Для Каждого ЗадачаПроцесса Из НовыеЗадачиПроцесса Цикл
		ФормируемыеЗадачи.Добавить(ЗадачаПроцесса);
	КонецЦикла;

	Если НовыеЗадачиПроцесса.Количество() > 0 Тогда
		РаботаСБизнесПроцессами.ЗаписатьПроцесс(ЭтотОбъект, "ПростаяЗапись");
	КонецЕсли;

КонецПроцедуры

Процедура ОбеспечитьПодписаниеОбработкаПроверкиВыполнения(ТочкаМаршрута, Задача, Результат)

	Результат = Истина;

КонецПроцедуры

Процедура ОбеспечитьПодписаниеПередВыполнением(ТочкаМаршрута, Задача, Отказ)

	ОбработатьЗавершениеЗадачиПроцессаПоЭтапуПодписания(Задача);

КонецПроцедуры

Процедура ПодписатьПередСозданиемЗадач(ТочкаМаршрута, ФормируемыеЗадачи, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	НовыеЗадачиПроцесса = СоздатьЗадачиПроцессаДляОчередныхУчастниковЭтаповПодписания(ТочкаМаршрута);
	Для Каждого ЗадачаПроцесса Из НовыеЗадачиПроцесса Цикл
		ФормируемыеЗадачи.Добавить(ЗадачаПроцесса);
	КонецЦикла;

	Если НовыеЗадачиПроцесса.Количество() > 0 Тогда
		РаботаСБизнесПроцессами.ЗаписатьПроцесс(ЭтотОбъект, "ПростаяЗапись");
	КонецЕсли;

КонецПроцедуры

Процедура ПодписатьОбработкаПроверкиВыполнения(ТочкаМаршрута, Задача, Результат)

	Результат = Истина;

КонецПроцедуры

Процедура ПодписатьПередВыполнением(ТочкаМаршрута, Задача, Отказ)

	ОбработатьЗавершениеЗадачиПроцессаПоЭтапуПодписания(Задача);

КонецПроцедуры

Процедура НеПодписаноПроверкаУсловия(ТочкаМаршрута, Результат)

	Результат = ЕстьНеПодписаноНаТекущейИтерации();

КонецПроцедуры

Процедура ОбработатьРезультатПередСозданиемЗадач(ТочкаМаршрута, ФормируемыеЗадачи,
	СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ФормируемыеЗадачи.Добавить(СоздатьЗадачуОбработатьРезультат());
	РаботаСБизнесПроцессами.ЗаписатьПроцесс(ЭтотОбъект, "ПростаяЗапись");

КонецПроцедуры

Процедура ОбработатьРезультатОбработкаПроверкиВыполнения(ТочкаМаршрута, Задача, Результат)

	Результат = Истина;

КонецПроцедуры

Процедура ОбработатьРезультатПередВыполнением(ТочкаМаршрута, Задача, Отказ)

	ОбработатьЗавершение_ЗадачиПроцесса_ОбрабатывающегоРезультат(Задача);

КонецПроцедуры

Процедура ВсеЭтапыПройденыПроверкаУсловия(ТочкаМаршрута, Результат)

	Результат = ВсеЭтапыПодписанияПройдены();

КонецПроцедуры

Процедура ПовторитьПодписаниеПроверкаУсловия(ТочкаМаршрута, Результат)

	Результат = НеобходимоПовторитьПодписание();

КонецПроцедуры

Процедура ЗавершениеПриЗавершении(ТочкаМаршрута, Отказ)

	ДатаЗавершения = ТекущаяДатаСеанса();

	ЗаполнитьИтоговыйРезультатПодписания();
	
	РаботаСБизнесПроцессами.ЗаписатьПроцесс(ЭтотОбъект, "ПростаяЗапись");

	РаботаСПроектами.ОтметитьОкончаниеВыполненияПроектнойЗадачи(ЭтотОбъект);

	РаботаСПроцессамиПоДействиямСобытия.ПриЗавершенииПроцесса(ЭтотОбъект);

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеПроцесса

Процедура ЗаполнитьБизнесПроцессПоЗадаче(ЗадачаСсылка)

	РаботаСБизнесПроцессами.ЗаполнитьБизнесПроцессПоЗадаче(ЭтотОбъект, ЗадачаСсылка);

КонецПроцедуры

// Заполняет пустые идентификаторы участников в процессе.
//
Процедура ЗаполнитьПустыеИдентификаторыУчастников()

	Для Каждого СтрокаТаблицы Из Участники Цикл
		Если СтрокаТаблицы.Идентификатор = УникальныйИдентификаторПустой() Тогда
			СтрокаТаблицы.Идентификатор = Новый УникальныйИдентификатор;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Заполняет точки маршрута на случай неправильной сериализации в КОД
// 
// Параметры:
//  ДанныеОбновления - Структура - Данные обновления, см. СтруктураДанныхДляЗаполнения
//
Процедура ЗаполнитьТочкиМаршрутаДанныхОбновленияПроцесса(ДанныеОбновления)
	
	Если Не ОбщегоНазначенияДокументооборот.ЭтоДокументооборотХолдинга()
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьКОД") Тогда
			Возврат;
	КонецЕсли;
		
	Для Каждого СтрокаУчастника Из ДанныеОбновления.Участники Цикл
		СтрокаУчастника.ТочкаМаршрута
			= БизнесПроцессы.Подписание.ТочкиМаршрута[СтрокаУчастника.ТочкаМаршрута.Имя];
	КонецЦикла;
	
КонецПроцедуры

// Проверяет уникальность идентификаторов участников процесса.
// Если есть не уникальные значения, то вызывается исключение. 
//
Процедура ПроверитьУникальностьИдентификаторовУчастников()
	
	ПройденныеИдентификаторы = Новый Соответствие();
	
	Для Каждого СтрокаТаблицы Из Участники Цикл
		Если ПройденныеИдентификаторы[СтрокаТаблицы.Идентификатор] <> Неопределено Тогда
			ВызватьИсключение НСтр("ru = 'Идентификаторы участников не уникальны.'",
				ОбщегоНазначения.КодОсновногоЯзыка());
		КонецЕсли;
		ПройденныеИдентификаторы[СтрокаТаблицы.Идентификатор] = Истина; 
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьКорректностьЗаполненияПорядкаВыполнения()
 	
 	ПараллельноеПодписаниеНаБумаге = Ложь;
 	
 	Если СпособПодписания = Перечисления.СпособыПодписанияПредметаПроцесса.НаБумаге Тогда
 		
	 	Для Каждого Этап Из Этапы Цикл
	 		
	 		Если Этап.ПорядокВыполненияУчастниками = 
	 			Перечисления.ПорядокВыполненияЭтапаПроцесса.Параллельно Тогда
	 			
	 			ПараллельноеПодписаниеНаБумаге = Истина;
	 			Прервать;
	 		КонецЕсли;
	 		
	 	КонецЦикла;
	 	
	 	Если Этапы.Количество() = 0 
 			И ПорядокВыполненияУчастниками = Перечисления.ПорядокВыполненияЭтапаПроцесса.Параллельно Тогда
 			ПараллельноеПодписаниеНаБумаге = Истина;
 		КонецЕсли;
 	КонецЕсли;
 	
 	Если ПараллельноеПодписаниеНаБумаге Тогда
 		ВызватьИсключение НСтр(
 			"ru = 'Параллельное выполнение этапов невозможно при подписании на бумаге.'",
 			ОбщегоНазначения.КодОсновногоЯзыка());
 	КонецЕсли;
 	
КонецПроцедуры

Функция НаименованиеПроцессаПоУмолчанию()

	Если ДобавлятьНаименованиеПредмета = Неопределено Тогда
		ДобавлятьНаименованиеПредмета = РаботаСБизнесПроцессами.ДобавлятьНаименованиеПредмета(
			ЭтотОбъект);
	КонецЕсли;

	НаименованиеПоУмолчанию = НаименованиеПроцессаБезПредметовПоУмолчанию();

	Если ДобавлятьНаименованиеПредмета Тогда
		НаименованиеПоУмолчанию = МультипредметностьКлиентСервер.ПолучитьНаименованиеСПредметами(
			НаименованиеПоУмолчанию, Предметы);
	Иначе
		НаименованиеПоУмолчанию = НаименованиеПоУмолчанию + " ";
	КонецЕсли;

	Возврат НаименованиеПоУмолчанию;

КонецФункции

Функция НаименованиеПроцессаБезПредметовПоУмолчанию()

	Возврат НСтр("ru = 'Подписать'");

КонецФункции
 
#КонецОбласти

#Область ЗадачиПроцесса

// Заполняет задачу процесса по строке участника с точками маршрута Подписать или Обеспечить
// подписание.
// 
// Параметры:
// 	ЗадачаПроцесса - ЗадачаОбъект.ЗадачаИсполнителя
// 	СтрокаУчастника - СтрокаТабличнойЧасти - строка таб. части Участники.
//
Процедура ЗаполнитьЗадачуПроцессаПоСтрокеУчастникаЭтапаПодписания(ЗадачаПроцесса, СтрокаУчастника)

	Если ЗадачаПроцесса.ТочкаМаршрута <> СтрокаУчастника.ТочкаМаршрута Тогда
		ЗадачаПроцесса.ТочкаМаршрута = СтрокаУчастника.ТочкаМаршрута;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ЗадачаПроцесса.Ссылка) Тогда

		ЗадачаПроцесса.БизнесПроцесс = Ссылка;

		ЗадачаПроцесса.Дата = ТекущаяДатаСеанса();

		ЗадачаПроцесса.ИдентификаторИсполнителя = СтрокаУчастника.Идентификатор;

		Мультипредметность.ЗадачаПередСозданием(
			ЭтотОбъект, ЗадачаПроцесса, СтрокаУчастника.ТочкаМаршрута);

		РаботаСБизнесПроцессамиВызовСервера.СкопироватьЗначенияДопРеквизитов(
			ЭтотОбъект, ЗадачаПроцесса);

	КонецЕсли;

	Если ЗадачаПроцесса.Автор <> Автор Тогда
		ЗадачаПроцесса.Автор = Автор;
	КонецЕсли;

	ЗаполнитьНаименованиеЗадачиПроцессаДляЭтапаПодписания(ЗадачаПроцесса);
	
	ЗаполнитьОписаниеЗадачиПроцессаДляЭтапаПодписания(ЗадачаПроцесса, СтрокаУчастника);
		
	Если ЗадачаПроцесса.Важность <> Важность Тогда
		ЗадачаПроцесса.Важность = Важность;
	КонецЕсли;

	Если ЗначениеЗаполнено(ЗадачаПроцесса.РольИсполнителя) Тогда
		УчастникВЗадаче = ЗадачаПроцесса.РольИсполнителя;
	Иначе
		УчастникВЗадаче = ЗадачаПроцесса.Исполнитель;
	КонецЕсли;
	Если УчастникВЗадаче <> СтрокаУчастника.Участник Тогда
		Если ТипЗнч(СтрокаУчастника.Участник) = Тип("СправочникСсылка.Сотрудники") Тогда
			ЗадачаПроцесса.Исполнитель = СтрокаУчастника.Участник;
		Иначе
			ЗадачаПроцесса.РольИсполнителя = СтрокаУчастника.Участник;
		КонецЕсли;
	КонецЕсли;
	
	// Определение срока исполнения
	СрокиИсполненияПроцессов.ЗаполнитьСрокИсполненияЗадачи(
		ЗадачаПроцесса, СтрокаУчастника.ВариантУстановкиСрокаИсполнения,
		СтрокаУчастника.СрокИсполнения, СтрокаУчастника.СрокИсполненияДни,
		СтрокаУчастника.СрокИсполненияЧасы, СтрокаУчастника.СрокИсполненияМинуты);

	Если ЗадачаПроцесса.Проект <> Проект Тогда
		ЗадачаПроцесса.Проект = Проект;
	КонецЕсли;

	Если ЗадачаПроцесса.ПроектнаяЗадача <> ПроектнаяЗадача Тогда
		ЗадачаПроцесса.ПроектнаяЗадача = ПроектнаяЗадача;
	КонецЕсли;

КонецПроцедуры

// Заполняет наименование задачи процесса по строке участника с точками маршрута Подписать
// или Обеспечить подписание.
// 
// Параметры:
// 	ЗадачаПроцесса - ЗадачаОбъект.ЗадачаИсполнителя - задача с точкой маршрута
// 	                 Подписать или Обеспечить подписание.
// 
Процедура ЗаполнитьНаименованиеЗадачиПроцессаДляЭтапаПодписания(ЗадачаПроцесса)

	ТочкиМаршрута = БизнесПроцессы.Подписание.ТочкиМаршрута;
	ПредметыСтрокой = МультипредметностьКлиентСервер.ПредметыСтрокой(ЗадачаПроцесса.Предметы, Истина, Ложь);
	НаименованиеИОписаниеПоДействию = РаботаСПроцессамиПоДействиям.НаименованиеИОписаниеЗадачиПоДействию(
		ЗадачаПроцесса, ПредметыСтрокой, Истина);
	
	Если ЗадачаПроцесса.ТочкаМаршрута = ТочкиМаршрута.Подписать Тогда
		
		Если НаименованиеИОписаниеПоДействию <> Неопределено 
			И ЗначениеЗаполнено(НаименованиеИОписаниеПоДействию.Наименование) Тогда
			Если СпособПодписания = Перечисления.СпособыПодписанияПредметаПроцесса.НаБумаге Тогда
				ПостфиксНаименования = НСтр("ru = '(На бумаге)'"); 
			ИначеЕсли СпособПодписания = Перечисления.СпособыПодписанияПредметаПроцесса.ПЭП Тогда
				ПостфиксНаименования = НСтр("ru = '(Простая ЭП)'");
			ИначеЕсли СпособПодписания = Перечисления.СпособыПодписанияПредметаПроцесса.УЭП Тогда
				ПостфиксНаименования = НСтр("ru = '(Усиленная ЭП)'");
			КонецЕсли;
			НаименованиеЗадачиПроцесса = НаименованиеИОписаниеПоДействию.Наименование + " " + ПостфиксНаименования;
				
		ИначеЕсли СтрНачинаетсяС(НаименованиеПроцессаПоУмолчанию(), Наименование) Тогда
			Если СпособПодписания = Перечисления.СпособыПодписанияПредметаПроцесса.НаБумаге Тогда
				ПрефиксНаименования = НСтр("ru = 'Подписать на бумаге'"); 
			ИначеЕсли СпособПодписания = Перечисления.СпособыПодписанияПредметаПроцесса.ПЭП Тогда
				ПрефиксНаименования = НСтр("ru = 'Подписать (Простая ЭП)'");
			ИначеЕсли СпособПодписания = Перечисления.СпособыПодписанияПредметаПроцесса.УЭП Тогда
				ПрефиксНаименования = НСтр("ru = 'Подписать (Усиленная ЭП)'");
			КонецЕсли;
			НаименованиеЗадачиПроцесса = СтрЗаменить(Наименование,
				НаименованиеПроцессаБезПредметовПоУмолчанию(), ПрефиксНаименования);
		Иначе
			НаименованиеЗадачиПроцесса = Наименование;
		КонецЕсли;
		
	ИначеЕсли ЗадачаПроцесса.ТочкаМаршрута = ТочкиМаршрута.ОбеспечитьПодписание Тогда

		ПрефиксНаименования = НСтр("ru = 'Обеспечить подписание на бумаге'");
		Если НаименованиеИОписаниеПоДействию <> Неопределено 
			И ЗначениеЗаполнено(НаименованиеИОписаниеПоДействию.Наименование) Тогда
			НаименованиеЗадачиПроцесса = НаименованиеИОписаниеПоДействию.Наименование + " " + НСтр("ru = '(На бумаге)'");
			
		ИначеЕсли СтрНачинаетсяС(НаименованиеПроцессаПоУмолчанию(), Наименование) Тогда
			НаименованиеЗадачиПроцесса = СтрЗаменить(Наименование,
				НаименованиеПроцессаБезПредметовПоУмолчанию(), ПрефиксНаименования);
		Иначе

			НаименованиеЗадачиПроцесса = СтрШаблон("%1: %2", ПрефиксНаименования, Наименование);
		КонецЕсли;

	КонецЕсли;
	
	// Заполняем наименование задачи, только если оно отличается от вычисленного.
	Если Не ЗначениеЗаполнено(ЗадачаПроцесса.Наименование) Или Не СтрНачинаетсяС(
		НаименованиеЗадачиПроцесса, ЗадачаПроцесса.Наименование) Тогда

		ЗадачаПроцесса.Наименование = НаименованиеЗадачиПроцесса;
	КонецЕсли;

КонецПроцедуры

// Заполняет описание задачи процесса по строке участника с точками маршрута Подписать
// или Обеспечить подписание.
// 
// Параметры:
// 	ЗадачаПроцесса - ЗадачаОбъект.ЗадачаИсполнителя - задача с точкой маршрута
// 	                 Подписать или Обеспечить подписание.
// 	СтрокаУчастника - СтрокаТабличнойЧасти - строка таб. части Участники.
// 
Процедура ЗаполнитьОписаниеЗадачиПроцессаДляЭтапаПодписания(ЗадачаПроцесса, СтрокаУчастника)
	
	ОписаниеДляУчастника = Новый Массив;
	
	ТочкиМаршрута = БизнесПроцессы.Подписание.ТочкиМаршрута;
	Если ЗадачаПроцесса.ТочкаМаршрута = ТочкиМаршрута.ОбеспечитьПодписание Тогда		
		ОписаниеДляУчастника.Добавить(
			СтрШаблон(НСтр("ru = 'Подписывающий: %1'"), СтрокаУчастника.Подписывающий));
		ОписаниеДляУчастника.Добавить(Символы.ПС);
		ОписаниеДляУчастника.Добавить(Символы.ПС);
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Описание) Тогда
		ОписаниеДляУчастника.Добавить(Описание);
		ОписаниеДляУчастника.Добавить(Символы.ПС);
		ОписаниеДляУчастника.Добавить(Символы.ПС);
		
	ИначеЕсли Не ЗначениеЗаполнено(СтрокаУчастника.Описание) Тогда
		НаименованиеИОписаниеПоДействию = Неопределено;
		ПредметыСтрокой = МультипредметностьКлиентСервер.ПредметыСтрокой(ЗадачаПроцесса.Предметы, Истина, Ложь);
		НаименованиеИОписаниеПоДействию = РаботаСПроцессамиПоДействиям.НаименованиеИОписаниеЗадачиПоДействию(
			ЗадачаПроцесса, ПредметыСтрокой, Истина);
				
		Если НаименованиеИОписаниеПоДействию <> Неопределено 
			И ЗначениеЗаполнено(НаименованиеИОписаниеПоДействию.Описание) Тогда
			ОписаниеДляУчастника.Добавить(НаименованиеИОписаниеПоДействию.Описание);
			ОписаниеДляУчастника.Добавить(Символы.ПС);
			ОписаниеДляУчастника.Добавить(Символы.ПС);	
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаУчастника.Описание) Тогда
		ОписаниеДляУчастника.Добавить(СтрокаУчастника.Описание);
	КонецЕсли;
	ОписаниеДляУчастника = СокрЛП(СтрСоединить(ОписаниеДляУчастника));
	Если ЗадачаПроцесса.Описание <> ОписаниеДляУчастника Тогда
		ЗадачаПроцесса.Описание = ОписаниеДляУчастника;	
	КонецЕсли;
	
КонецПроцедуры

// Заполняет задачу процесса "Обработать результат" по строке участника с точкой маршрута
// Обработать результат. 
// 
// Параметры:
// 	ЗадачаПроцесса - ЗадачаОбъект.ЗадачаИсполнителя
// 	СтрокаУчастника - СтрокаТабличнойЧасти - строка таб. части Участники.
// 
Процедура ЗаполнитьЗадачуПроцесса_ОбработатьРезультат(ЗадачаПроцесса, СтрокаУчастника)

	Если Не ЗначениеЗаполнено(ЗадачаПроцесса.Ссылка) Тогда

		ЗадачаПроцесса.БизнесПроцесс = Ссылка;

		ЗадачаПроцесса.Дата = ТекущаяДатаСеанса();

		ЗадачаПроцесса.ИдентификаторИсполнителя = СтрокаУчастника.Идентификатор;

		ЗадачаПроцесса.ТочкаМаршрута = СтрокаУчастника.ТочкаМаршрута;

		Мультипредметность.ЗадачаПередСозданием(
			ЭтотОбъект, ЗадачаПроцесса, СтрокаУчастника.ТочкаМаршрута);

		РаботаСБизнесПроцессамиВызовСервера.СкопироватьЗначенияДопРеквизитов(
			ЭтотОбъект, ЗадачаПроцесса);

	КонецЕсли;

	Если ЗадачаПроцесса.Автор <> Автор Тогда
		ЗадачаПроцесса.Автор = Автор;
	КонецЕсли;

	ЗаполнитьНаименованиеИОписаниеЗадачиПроцессаОбработатьРезультат(ЗадачаПроцесса);

	Если ЗадачаПроцесса.Важность <> Важность Тогда
		ЗадачаПроцесса.Важность = Важность;
	КонецЕсли;

	Если ЗначениеЗаполнено(ЗадачаПроцесса.РольИсполнителя) Тогда
		УчастникВЗадаче = ЗадачаПроцесса.РольИсполнителя;
	Иначе
		УчастникВЗадаче = ЗадачаПроцесса.Исполнитель;
	КонецЕсли;
	Если УчастникВЗадаче <> СтрокаУчастника.Участник Тогда
		Если ТипЗнч(СтрокаУчастника.Участник) = Тип("СправочникСсылка.Сотрудники") Тогда
			ЗадачаПроцесса.Исполнитель = СтрокаУчастника.Участник;
		Иначе
			ЗадачаПроцесса.РольИсполнителя = СтрокаУчастника.Участник;
		КонецЕсли;
	КонецЕсли;
	
	// Определение срока исполнения
	СрокиИсполненияПроцессов.ЗаполнитьСрокИсполненияЗадачи(
		ЗадачаПроцесса, СтрокаУчастника.ВариантУстановкиСрокаИсполнения,
		СтрокаУчастника.СрокИсполнения, СтрокаУчастника.СрокИсполненияДни,
		СтрокаУчастника.СрокИсполненияЧасы, СтрокаУчастника.СрокИсполненияМинуты);

	Если ЗадачаПроцесса.Проект <> Проект Тогда
		ЗадачаПроцесса.Проект = Проект;
	КонецЕсли;

	Если ЗадачаПроцесса.ПроектнаяЗадача <> ПроектнаяЗадача Тогда
		ЗадачаПроцесса.ПроектнаяЗадача = ПроектнаяЗадача;
	КонецЕсли;

КонецПроцедуры

// Заполняет наименование задачи процесса в точке маршрута Обработать результат.
// 
// Параметры:
// 	ЗадачаПроцесса - ЗадачаОбъект.ЗадачаИсполнителя - задача с точкой маршрута
// 	                 Обработать результат. 
// 
Процедура ЗаполнитьНаименованиеИОписаниеЗадачиПроцессаОбработатьРезультат(ЗадачаПроцесса)

	НаименованиеИОписаниеПоДействию = Неопределено;
	ПредметыСтрокой = МультипредметностьКлиентСервер.ПредметыСтрокой(ЗадачаПроцесса.Предметы, Истина, Ложь);
	НаименованиеИОписаниеПоДействию = РаботаСПроцессамиПоДействиям.НаименованиеИОписаниеЗадачиПоДействию(
		ЗадачаПроцесса, ПредметыСтрокой);
	
	ПрефиксНаименования = НСтр("ru = 'Обработать результат подписания'");
	Если НаименованиеИОписаниеПоДействию <> Неопределено 
		И ЗначениеЗаполнено(НаименованиеИОписаниеПоДействию.Наименование) Тогда
		НаименованиеЗадачиПроцесса = НаименованиеИОписаниеПоДействию.Наименование;

	ИначеЕсли СтрНачинаетсяС(НаименованиеПроцессаПоУмолчанию(), Наименование) Тогда
		НаименованиеЗадачиПроцесса = СтрЗаменить(Наименование,
			НаименованиеПроцессаБезПредметовПоУмолчанию(), ПрефиксНаименования);
	Иначе

		НаименованиеЗадачиПроцесса = СтрШаблон("%1: %2", ПрефиксНаименования, Наименование);
	КонецЕсли;
	
	// Заполняем наименование задачи, только если оно отличается от вычисленного.
	Если Не ЗначениеЗаполнено(ЗадачаПроцесса.Наименование) Или Не СтрНачинаетсяС(
		НаименованиеЗадачиПроцесса, ЗадачаПроцесса.Наименование) Тогда

		ЗадачаПроцесса.Наименование = НаименованиеЗадачиПроцесса;
	КонецЕсли;
	
	Если НаименованиеИОписаниеПоДействию <> Неопределено 
		И ЗначениеЗаполнено(НаименованиеИОписаниеПоДействию.Описание) Тогда
		ЗадачаПроцесса.Описание = НаименованиеИОписаниеПоДействию.Описание;
	Иначе
		
		ЗадачаПроцесса.Описание = Описание;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Маршрутизация

// Готовить процесс к новой итерации.
// 
Процедура ПодготовитьПроцессКНовойИтерации()

	УстановитьПривилегированныйРежим(Истина);

	НомерИтерации = НомерИтерации + 1;

	Для Каждого Строка Из Участники Цикл
		Строка.Пройден = Ложь;
	КонецЦикла;

	Для Каждого СтрокаЭтапа Из Этапы Цикл
		ОбновитьПризнакПрохожденияУЭтапа(СтрокаЭтапа.Идентификатор);
	КонецЦикла;

	РаботаСБизнесПроцессами.ЗаписатьПроцесс(ЭтотОбъект, "ЗаписьСОбновлениемОбщегоСпискаПроцессов");

КонецПроцедуры

// Готовит очередной этап подписания к выполнению.
//
Процедура ПодготовитьОчереднойЭтапКВыполнению()

	УстановитьПривилегированныйРежим(Истина);

	ЭтапДляВыполнения = ОчереднойЭтапДляВыполнения();
	ПодготовитьЭтапКВыполнению(ЭтапДляВыполнения);

	РаботаСБизнесПроцессами.ЗаписатьПроцесс(ЭтотОбъект, "ПростаяЗапись");

КонецПроцедуры

// Возвращает очередной этап для выполнения.
// 
// Возвращаемое значение:
//   УникальныйИдентификатор - возвращается пустой идентификатор , если в процессе нет этапов.
// 	
Функция ОчереднойЭтапДляВыполнения()

	ЭтапДляЗапуска = УникальныйИдентификаторПустой();

	Для Каждого СтрокаЭтапа Из Этапы Цикл
		Если Не СтрокаЭтапа.Пройден Тогда
			ЭтапДляЗапуска = СтрокаЭтапа.Идентификатор;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Возврат ЭтапДляЗапуска;

КонецФункции

// Готовит этап к выполнению:
// Для участников этапа, от которых ожидается результат добавляет в таб. часть РезультатыПодписания
// соответствующие строки. При этом учитывается ПорядокВыполненияУчастниками.
// 
// Параметры:
// 	Этап - УникальныйИдентификатор - идентификатор этапа.
//
Процедура ПодготовитьЭтапКВыполнению(Этап)

	СтрокаЭтапа = Этапы.Найти(Этап, "Идентификатор");

	Если СтрокаЭтапа <> Неопределено Тогда
		ПоследовательноеВыполнение = (СтрокаЭтапа.ПорядокВыполненияУчастниками
			= Перечисления.ПорядокВыполненияЭтапаПроцесса.Последовательно);
		
	ИначеЕсли Этапы.Количество() = 0 И ЗначениеЗаполнено(ПорядокВыполненияУчастниками) Тогда
		
		ПоследовательноеВыполнение = ПорядокВыполненияУчастниками = Перечисления.ПорядокВыполненияЭтапаПроцесса.Последовательно; 
	Иначе
		
		ПоследовательноеВыполнение = Ложь;
	КонецЕсли;
	
	СтрокаУчастника_ОбработатьРезультат = 
		РаботаСБизнесПроцессами.СтрокаУчастника_ОбработатьРезультатПодписания(ЭтотОбъект);
	
	Для Каждого СтрокаУчастника Из Участники Цикл
		
		Если СтрокаУчастника = СтрокаУчастника_ОбработатьРезультат Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаУчастника.Этап <> Этап Тогда
			Продолжить;
		КонецЕсли;
			
		// Пропускам всех участников этапа, выполнивших свои задач,
		// при последовательном выполнении и добавляем строку результат
		// только для одного участника.

		Если СтрокаУчастника.Пройден Тогда
			Продолжить;
		КонецЕсли;

		Отбор = Новый Структура;
		Отбор.Вставить("Идентификатор", СтрокаУчастника.Идентификатор);
		Отбор.Вставить("НомерИтерации", НомерИтерации);

		Если РезультатыПодписания.НайтиСтроки(Отбор).Количество() = 0 Тогда
			СтрокаРезультата = РезультатыПодписания.Добавить();
			СтрокаРезультата.Идентификатор = СтрокаУчастника.Идентификатор;
			СтрокаРезультата.НомерИтерации = НомерИтерации;
		КонецЕсли;

		Если ПоследовательноеВыполнение Тогда
			Прервать;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Создает и возвращает задачи процесса для очередных участников этапов подписания.
// Для участников, с заданной точкой маршрута и имеющих строки в таб. части РезультатыПодписания
// без задач.
// 
// Параметры:
//  ТочкаМаршрута - точка маршрута участника.
// 	
// Возвращаемое значение:
//  Массив
//    * ЗадачаОбъект.ЗадачаИсполнителя 
//
Функция СоздатьЗадачиПроцессаДляОчередныхУчастниковЭтаповПодписания(ТочкаМаршрута)

	УстановитьПривилегированныйРежим(Истина);

	СозаднныеЗадачи = Новый Массив;

	ИдентификаторыИСтрокиУчастников = ИдентификаторыИСтрокиУчастниковСТочкойМаршрута(ТочкаМаршрута);

	Для Каждого СтрокаРезультата Из РезультатыПодписания Цикл

		СтрокаУчастника = ИдентификаторыИСтрокиУчастников[СтрокаРезультата.Идентификатор];

		Если СтрокаУчастника = Неопределено Или СтрокаРезультата.НомерИтерации <> НомерИтерации
			Или ЗначениеЗаполнено(СтрокаРезультата.ЗадачаПроцесса) Тогда

			Продолжить;
		КонецЕсли;

		ЗадачаПроцесса = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
		ЗаполнитьЗадачуПроцессаПоСтрокеУчастникаЭтапаПодписания(ЗадачаПроцесса, СтрокаУчастника);

		ЗадчаПроцессаСсылка = Задачи.ЗадачаИсполнителя.ПолучитьСсылку();
		ЗадачаПроцесса.УстановитьСсылкуНового(ЗадчаПроцессаСсылка);

		СтрокаРезультата.ЗадачаПроцесса = ЗадчаПроцессаСсылка;

		СозаднныеЗадачи.Добавить(ЗадачаПроцесса);

	КонецЦикла;

	Возврат СозаднныеЗадачи;

КонецФункции

// Обрабатывает завершение задачи участника процеса.
// 
// Параметры:
//  ЗадачаПроцесса - ЗадачаСсылка.ЗадачаИсполнителя
//
Процедура ОбработатьЗавершениеЗадачиПроцессаПоЭтапуПодписания(ЗадачаПроцесса)
	
	УстановитьПривилегированныйРежим(Истина);

	ИдентификаторУчастника = ИдентификаторУчастникаПоЗадачеПроцесса(ЗадачаПроцесса);
	УстановитьПризнакПройденДляУчастника(ИдентификаторУчастника);

	ИдентификаторЭтапа = ИдентификаторЭтапаУчастника(ИдентификаторУчастника);
	ОбновитьПризнакПрохожденияУЭтапа(ИдентификаторЭтапа);

	Если ЭтотОбъект.Модифицированность() Тогда
		РаботаСБизнесПроцессами.ЗаписатьПроцесс(ЭтотОбъект, "ПростаяЗапись");
	КонецЕсли;

КонецПроцедуры

// Устанавливает признак прохождения в таблице Участники по идентификатору участника.
// 
// Параметры:
//  ИдентификаторУчастника - УникальныйИдентификатор  
// 
Процедура УстановитьПризнакПройденДляУчастника(ИдентификаторУчастника)

	НайденнаяСтрока = Участники.Найти(ИдентификаторУчастника, "Идентификатор");
	Если НайденнаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

	НайденнаяСтрока.Пройден = Истина;

КонецПроцедуры

// Обновляет признак прохождения этапа по данным участникам.
// 
// Параметры:
//  Этап - УникальныйИдентификатор
//
Процедура ОбновитьПризнакПрохожденияУЭтапа(Этап)

	Если Не ЗначениеЗаполнено(Этап) Тогда
		Возврат;
	КонецЕсли;

	ЭтапПройден = Ложь;

	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Этап", Этап);
	ПараметрыОтбора.Вставить("Пройден", Ложь);
	УчастникиЭтапаБезОтметки = Участники.НайтиСтроки(ПараметрыОтбора);
	Если УчастникиЭтапаБезОтметки.Количество() = 0 Тогда
		ЭтапПройден = Истина;
	КонецЕсли;

	СтрокаЭтапа = Этапы.Найти(Этап, "Идентификатор");
	Если СтрокаЭтапа.Пройден <> ЭтапПройден Тогда
		СтрокаЭтапа.Пройден = ЭтапПройден;
	КонецЕсли;

КонецПроцедуры

// Возвращает идентификаторы и строки участников по заданной точке маршрута. 
// 
// Параметры:
// 	ТочкаМаршрута
// 	
// Возвращаемое значение:
//   Соответствие
//     * Ключ - УникальныйИдентификатор - идентификатор в таб. части Участники.
//     * Значение - строка таб. части Участники
// 	
Функция ИдентификаторыИСтрокиУчастниковСТочкойМаршрута(ТочкаМаршрута)

	ИД_И_СтрокиУчастников = Новый Соответствие;

	Для Каждого СтрокаУчастника Из Участники Цикл
		Если ТочкаМаршрута <> СтрокаУчастника.ТочкаМаршрута Тогда
			Продолжить;
		КонецЕсли;
		ИД_И_СтрокиУчастников[СтрокаУчастника.Идентификатор] = СтрокаУчастника;
	КонецЦикла;

	Возврат ИД_И_СтрокиУчастников;

КонецФункции

// Возвращает идентификатор участинка по его задаче процесса.
// 
// Параметры:
//   ЗадачаПроцесса - ЗадачаСсылка.ЗадачаИсполнителя
//
Функция ИдентификаторУчастникаПоЗадачеПроцесса(ЗадачаПроцесса)

	УстановитьПривилегированныйРежим(Истина);
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗадачаПроцесса, "ИдентификаторИсполнителя");

КонецФункции

// Возвращает идентификатор этапа участника.
// 
// Параметры:
//  ИдентификаторУчастника - УникальныйИдентификатор
// 
// Возвращаемое значение:
//  УникальныйИдентификатор
// 
Функция ИдентификаторЭтапаУчастника(ИдентификаторУчастника)

	НайденнаяСтрока = Участники.Найти(ИдентификаторУчастника, "Идентификатор");
	Если НайденнаяСтрока = Неопределено Тогда
		Возврат УникальныйИдентификаторПустой();
	КонецЕсли;

	Возврат НайденнаяСтрока.Этап;

КонецФункции

// Возвращает наличие результата Не подписано на текущей итерации.
// 
// Возвращаемое значение:
//  Булево
//
Функция ЕстьНеПодписаноНаТекущейИтерации()

	Отбор = Новый Структура;
	Отбор.Вставить("НомерИтерации", НомерИтерации);
	Отбор.Вставить("РезультатПодписания", Перечисления.РезультатыПроцессаПодписания.НеПодписано);

	Если РезультатыПодписания.НайтиСтроки(Отбор).Количество() > 0 Тогда
		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;

КонецФункции

// Создает и возвращает задачу процесса по обработке результа подписания.
// 
// Возвращаемое значение:
//  ЗадачаОбъект.ЗадачаИсполнителя
// 
Функция СоздатьЗадачуОбработатьРезультат()

	УстановитьПривилегированныйРежим(Истина);

	СтрокаУчастника = Участники.Найти(
		БизнесПроцессы.Подписание.ТочкиМаршрута.ОбработатьРезультат, "ТочкаМаршрута");

	ЗадачаПроцесса = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
	ЗаполнитьЗадачуПроцесса_ОбработатьРезультат(ЗадачаПроцесса, СтрокаУчастника);

	ЗадчаПроцессаСсылка = Задачи.ЗадачаИсполнителя.ПолучитьСсылку();
	ЗадачаПроцесса.УстановитьСсылкуНового(ЗадчаПроцессаСсылка);

	СтрокаРезультата = РезультатыОбработок.Добавить();
	СтрокаРезультата.НомерИтерации = НомерИтерации;
	СтрокаРезультата.ЗадачаПроцесса = ЗадчаПроцессаСсылка;

	Возврат ЗадачаПроцесса;

КонецФункции

// Обрабатывает завершение задачи обработаывающего результат.
// 
// Параметры:
//  ЗадачаПроцесса - ЗадачаСсылка.ЗадачаИсполнителя
//
Процедура ОбработатьЗавершение_ЗадачиПроцесса_ОбрабатывающегоРезультат(ЗадачаПроцесса)
		
	УстановитьПривилегированныйРежим(Истина);

	ИдентификаторУчастника = ИдентификаторУчастникаПоЗадачеПроцесса(ЗадачаПроцесса);
	УстановитьПризнакПройденДляУчастника(ИдентификаторУчастника);

	Если ЭтотОбъект.Модифицированность() Тогда
		РаботаСБизнесПроцессами.ЗаписатьПроцесс(ЭтотОбъект, "ПростаяЗапись");
	КонецЕсли;

КонецПроцедуры

// Возвращает факт прохождения всех этапов подписания.
//
// Возвращаемое значение:
//  Булево
//
Функция ВсеЭтапыПодписанияПройдены()

	Если Этапы.Количество() > 0 Тогда
		Возврат (Этапы.НайтиСтроки(Новый Структура("Пройден", Ложь)).Количество() = 0);
	КонецЕсли;

	ТочкиМаршрутаПодписания = БизнесПроцессы.Подписание.ТочкиМаршрута;

	ВсеПройдено = Истина;
	Для Каждого СтрокаУчастника Из Участники Цикл
		Если СтрокаУчастника.ТочкаМаршрута <> ТочкиМаршрутаПодписания.Подписать
			И СтрокаУчастника.ТочкаМаршрута <> ТочкиМаршрутаПодписания.ОбеспечитьПодписание Тогда

			Продолжить;
		КонецЕсли;
		Если СтрокаУчастника.Пройден Тогда
			Продолжить;
		КонецЕсли;
		ВсеПройдено = Ложь;
		Прервать;
	КонецЦикла;

	Возврат ВсеПройдено;

КонецФункции

// Возвращает необходимость повтоерния подписания.
// 
// Возвращаемое значение:
//  Булево
// 
Функция НеобходимоПовторитьПодписание()

	Отбор = Новый Структура;
	Отбор.Вставить("НомерИтерации", НомерИтерации);
	Отбор.Вставить("ОтправленоНаПовторноеПодписание", Истина);

	Возврат (РезультатыОбработок.НайтиСтроки(Отбор).Количество() > 0);

КонецФункции

// Заполняет результат подписания процесса.
//
Процедура ЗаполнитьИтоговыйРезультатПодписания()

	Если ЕстьНеПодписаноНаТекущейИтерации() Тогда
		РезультатПодписания = Перечисления.РезультатыПроцессаПодписания.НеПодписано;
	Иначе
		РезультатПодписания = Перечисления.РезультатыПроцессаПодписания.Подписано;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли