
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.НастроитьЭлементыРедактированияМаршрута(
		ЭтотОбъект);
	
	ЭтоНовый = Объект.Ссылка.Пустая();
	
	ПротоколированиеРаботыСотрудников.ЗаписатьОткрытие(Объект.Ссылка);
	РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(Объект.Ссылка);
	
	ПользователиПустаяСсылка = Справочники.Пользователи.ПустаяСсылка();

	Если Объект.Ссылка.Пустая() И Объект.Контролер = Неопределено Тогда 
		Объект.Контролер = Справочники.Сотрудники.ПустаяСсылка();
	КонецЕсли;
	
	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	Мультипредметность.УстановитьЗначенияДопРеквизитовИДоступностьЭлементовФормыПроцесса(
		ЭтотОбъект, Объект);
	
	ИспользоватьАвтоподстановки = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.Автор = Сотрудники.ОсновнойСотрудник();
		Если Не ЗначениеЗаполнено(Объект.Важность) Тогда
			Объект.Важность = Перечисления.ВариантыВажностиОбъектов.Обычная;
		КонецЕсли;
		
		Если Не РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ЭтоФормаПроцессаСоСхемой(ЭтотОбъект)
			И Не ЗначениеЗаполнено(Объект.ВариантМаршрутизации) Тогда
			Объект.ВариантМаршрутизации = Перечисления.ВариантыМаршрутизацииЗадач.Последовательно;
		КонецЕсли;
	КонецЕсли;
	
	Копирование = ЗначениеЗаполнено(Параметры.ЗначениеКопирования);
	Если Объект.Ссылка.Пустая() И Не Копирование Тогда 
		
		Если Параметры.Свойство("Предметы") И Параметры.Свойство("Шаблон") Тогда
			
			Мультипредметность.ПередатьПредметыПроцессу(Объект, Параметры.Предметы, Ложь, Истина);
			ЗаполнитьПоШаблонуНаСервере(Параметры.Шаблон);
			Модифицированность = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВестиУчетПоПроектам = ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам");
	ИзменятьЗаданияЗаднимЧислом = ПолучитьФункциональнуюОпцию("ИзменятьЗаданияЗаднимЧислом");
	ИспользоватьВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	
	// Учет переносов сроков выполнения
	ПереносСроковВыполненияЗадач.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	// Настройки старта
	СтартПроцессовСервер.ЗаполнитьНастройкиСтартаВФормеПроцесса(ЭтотОбъект);
	
	// Сроки выполнения
	УстановитьУсловноеОформлениеИстекшихСроков();
	ЗаполнитьДатыЗавершенияЭтапов();
	
	ИспользоватьДатуИВремяВСрокахЗадач =
		ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	
	Если Объект.Стартован Или Не ЗначениеЗаполнено(Объект.Шаблон) Тогда
		ДатаОтсчетаДляРасчетаСроков = 
			СрокиИсполненияПроцессов.ДатаОтсчетаДляРасчетаСроковПроцесса(Объект);
	КонецЕсли;
	
	Элементы.СрокИсполненияЭтапаПредставление.Ширина =
		СрокиИсполненияПроцессовКОРП.ШиринаПоляСрокИсполненияДействияКомплексногоПроцесса(ЭтотОбъект);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы") Тогда
			СтрокаЗаменыДляВсплывающейПодсказки = НСтр("ru = '(по графику работ)'");
			
		Элементы.СрокИсполненияЭтапаПредставление.Подсказка = СтрЗаменить(
			Элементы.СрокИсполненияЭтапаПредставление.Подсказка,
			СтрокаЗаменыДляВсплывающейПодсказки, "");
			
		Элементы.СрокИсполненияПроцессаПредставление.Подсказка = СтрЗаменить(
			Элементы.СрокИсполненияПроцессаПредставление.Подсказка,
			СтрокаЗаменыДляВсплывающейПодсказки, "");
		
	КонецЕсли;
	
	ОбновитьСрокиИсполненияНаСервере();
	
	// Сохранение вводимых значений
	СохранениеВводимыхЗначений.ЗаполнитьСписокВыбора(
		ЭтотОбъект, ЭлементыДляСохранения(), ЭтотОбъект.ИмяФормы);
	
	ОбновитьДоступностьЭлементовФормыПоСостояниюПроцесса();
	УстановитьДоступность();
	УстановитьДоступностьПоШаблону();
	
	Если Не РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ЭтоФормаПроцессаСоСхемой(ЭтотОбъект) Тогда
		РаботаСКомплекснымиБизнесПроцессамиСервер.ЗаполнитьВычисляемыеПоляЭтапов(
			ЭтотОбъект, 
			Объект.Ссылка.Пустая());
	КонецЕсли;
	
	ВестиУчетПлановыхТрудозатратВБизнесПроцессах = 
		ПолучитьФункциональнуюОпцию("ВестиУчетПлановыхТрудозатратВБизнесПроцессах");
	Элементы.ОписаниеТрудозатрат.Видимость = ВестиУчетПлановыхТрудозатратВБизнесПроцессах;
	ПолучитьДанныеПроекта();
	
	УстановитьПривилегированныйРежим(Истина);
	ПредыдущееОписаниеПредметов = МультипредметностьКлиентСервер.ПредметыСтрокой(
		Объект.Предметы, Истина, Ложь);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ЗначениеЗаполнено(Объект.Шаблон) Тогда
		РеквизитыШаблона = 
			ОбщегоНазначенияДокументооборот.ЗначенияРеквизитовОбъектаВПривилегированномРежиме(
			Объект.Шаблон, "ДобавлятьНаименованиеПредмета, НаименованиеБизнесПроцесса");
		НаименованиеИзШаблона = РеквизитыШаблона.НаименованиеБизнесПроцесса;
		ДобавлятьНаименованиеПредмета = РеквизитыШаблона.ДобавлятьНаименованиеПредмета;
	КонецЕсли;
	
	Мультипредметность.ПроцессПриСозданииНаСервере(ЭтотОбъект, Объект);
	
	// Инструкции
	ПоказыватьИнструкции = ПолучитьФункциональнуюОпцию("ИспользоватьИнструкции");
	ПолучитьИнструкции();
	
	// Вычисления права на объект
	ПравоНаИзменениеБизнесПроцесса = Ложь;
	Если Не Объект.Ссылка.Пустая() Тогда
		ПравоНаИзменениеБизнесПроцесса = 
			ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(Объект.Ссылка).Изменение;
	КонецЕсли;
	
	// Настройка дерева задач и списка активных задач
	РаботаСБизнесПроцессамиВызовСервера.ДеревоПроцессовИЗадач_ПриСозданииНаСервере(
		ЭтотОбъект, Объект.Ссылка, Не Объект.Ссылка.Пустая());
	КоличествоАктивныхЗадач = СписокАктивныхЗадач.Количество();
	
	// Видимость поля Контролер.
	Элементы.Контролер.Видимость = ПолучитьФункциональнуюОпциюФормы("ИспользоватьКонтрольОбъектов");
	
	ПроверятьОтсутствие = Отсутствия.ПредупреждатьОбОтсутствии();
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ЭтоОбъектДругойСистемы = МиграцияДанныхИзВнешнихСистемСервер.ЭтоОбъектИзДругойСистемы(Объект.ИсточникДанных);
	Если ЭтоОбъектДругойСистемы Тогда
		Элементы.ГруппаНеРедактируется.Видимость = Истина;
		НеРедактируетсяОписание =
			НСтр("ru = 'Процесс загружен из сторонней системы, редактирование запрещено.'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	МультипредметностьКлиент.ПроцессПриОткрытии(ЭтотОбъект, Объект);
	
	Оповестить("ОбновитьСписокПоследних");
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ОбщегоНазначенияДокументооборотКлиент.ПриЗакрытии(ЗавершениеРаботы) Тогда
		Возврат;
	КонецЕсли;
	
	МультипредметностьВызовСервера.ПроцессПриЗакрытииНаСервере(Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	РаботаСБизнесПроцессамиКлиент.ОбработкаОповещенияФормаБизнесПроцесса(
		ИмяСобытия, Параметр, Источник, ЭтотОбъект);
	
	Если ИмяСобытия = "Процесс_ТребуетсяЗаписьВладельцаФайла" И Параметр = УникальныйИдентификатор Тогда
		Записать();
		Оповестить("Процесс_ЗаписанВладелецФайла", Источник, Объект.Ссылка);
	ИначеЕсли ИмяСобытия = "Запись_Файл" И Параметр.Событие = "СозданФайл" И Параметр.ИдентификаторРодительскойФормы = УникальныйИдентификатор Тогда
		МультипредметностьКлиент.ОбработатьДобавлениеПредметаПроцесса(ЭтотОбъект, Параметр.Файл);
	КонецЕсли;
	
	Если ИмяСобытия = "СозданиеДействия" Тогда
		
		Если ЭтотОбъект = Источник
			Или Параметр.ВладелецШаблона <> Объект.Ссылка Тогда
			
			Возврат;
		КонецЕсли;
		
		Если РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ЭтоФормаПроцессаСоСхемой(ЭтотОбъект) Тогда
			ДатаОтсчетаДляДействия = Дата(1,1,1);
			Параметр.Свойство("ДатаОтсчетаДляРасчетаСроков", ДатаОтсчетаДляДействия);
		Иначе
			ИдентификаторЭтапа = ПрименитьНастройкиДействия(Параметр);
			РаботаСКомплекснымиБизнесПроцессамиКлиент.ВычислитьОписаниеПредшественников(Объект);
			ПодключитьОбработчикОжидания("ОбновитьОписаниеПредметов",0.1, Истина);
			Модифицированность = Истина;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ВыборШаблонаДействия" Тогда
		
		Если Объект.Ссылка <> Параметр.ВладелецШаблона Тогда
			Возврат;
		КонецЕсли;
		
		Если РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ЭтоФормаПроцессаСоСхемой(ЭтотОбъект) Тогда
			ДатаОтсчетаДляДействия = Дата(1,1,1);
			Параметр.Свойство("ДатаОтсчетаДляРасчетаСроков", ДатаОтсчетаДляДействия);
		Иначе
			ПараметрыВозврата = СкопироватьШаблонВНастройкиПроцессаИПолучитьИмяФормы(Параметр.ШаблонБП, Параметр.ВладелецШаблона);
			Если ПараметрыВозврата.ЗаполненыНеобходимыеДляСтартаПоля Тогда
				ИдентификаторЭтапа = ПараметрыВозврата.ИдентификаторЭтапа;
				РаботаСКомплекснымиБизнесПроцессамиКлиент.ВычислитьОписаниеПредшественников(Объект);
				Модифицированность = Истина;
			Иначе
				ПараметрыФормы = Новый Структура();
				ПараметрыФормы.Вставить("Ключ", ПараметрыВозврата.Шаблон);
				ПараметрыФормы.Вставить("ВладелецШаблона", Параметр.ВладелецШаблона);
				ПараметрыФормы.Вставить("ИдентификаторЭтапа", ТекущийЭтап);
				ПараметрыФормы.Вставить("Предметы", Параметр.Предметы);
				Если Параметр.Свойство("ДатаОтсчетаДляРасчетаСроков") Тогда
					ПараметрыФормы.Вставить("ДатаОтсчетаДляРасчетаСроков", Параметр.ДатаОтсчетаДляРасчетаСроков);
				КонецЕсли;
				ОткрытьФорму(ПараметрыВозврата.ИмяФормыДляОткрытия, ПараметрыФормы, ЭтотОбъект);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "НастройкаПорядкаВыполнения" Тогда
		Если Объект.Ссылка <> Параметр.ВладелецЭтапа Тогда
			Возврат;
		КонецЕсли;
		ДанныеЭтапа = Элементы.Этапы.ТекущиеДанные;
		ДанныеЭтапа.ПредшественникиВариантИспользования = Параметр.ПредшественникиВариантИспользования;
		РаботаСКомплекснымиБизнесПроцессамиКлиент.УстановитьПредшественниковЭтапа(Объект, ТекущийЭтап, Параметр.Предшественники);
		РаботаСКомплекснымиБизнесПроцессамиКлиент.ВычислитьОписаниеПредшественников(Объект);
		
		РеквизитСИзмененнымСроком = "Этапы";
		ИдентификаторыИзмененныхДействий.Добавить(Параметр.ИдентификаторЭтапа);
		
		ОчиститьДатуОтсчетаДляРасчетаСроков(ЭтотОбъект);
		ОбновитьСрокиИсполненияОтложенно();
		
		Модифицированность = Истина;
	
	ИначеЕсли ИмяСобытия = "Процесс_ВводПричиныПрерывания" И Параметр.ВладелецФормы = ЭтотОбъект Тогда
		КомандыРаботыСБизнесПроцессамиКлиент.ПрерватьБизнесПроцессИзФормыОбъектаОкончание(
			ЭтотОбъект, Параметр);
	КонецЕсли;
	
	// Проверка на допустимость запуска только что настроенного действия.
	// Если для него выполнены все условия запуска и комплексный процесс запущен,
	// взводится флаг необходимости выполнить попытку запуска новых действий.
	Если Объект.Стартован
		И (ИмяСобытия = "СозданиеДействия" 
		ИЛИ ИмяСобытия = "НастройкаПорядкаВыполнения") Тогда
		ПроверитьЗапускДействий = Истина;
	КонецЕсли;
	
	Если ИмяСобытия = "ЗаписьКонтроля" 
		И Параметр.Предмет = Объект.Ссылка
		И Параметр.Свойство("Контролер") 
		И Параметр.Контролер <> Объект.Контролер Тогда 
		
		Прочитать();
	КонецЕсли;
	
	Если ИмяСобытия = "ОбновитьТрудозатратыУчастниковПроцесса" И Источник = ЭтотОбъект Тогда
		ЗаполнитьОписаниеТрудозатрат(ЭтотОбъект);
	КонецЕсли;
	
	// Сроки выполнения
	СрокиИсполненияПроцессовКлиент.ОбработкаОповещенияПослеПереносаСрока(
		ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	
	РаботаСБизнесПроцессамиКлиент.ОбработкаОповещенияДляДереваЗадач(
		ИмяСобытия, Параметр, Источник, ЭтотОбъект);
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	РаботаСБизнесПроцессамиВызовСервера.ПриЧтенииНаСервереФормаБизнесПроцесса(
		ТекущийОбъект, ЭтотОбъект);
		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Не РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ЭтоФормаПроцессаСоСхемой(ЭтотОбъект)
		И ЭтапыКУдалению.Количество() > 0 Тогда
		
		УдалитьЭтапы();
		ЭтапыКУдалению.Очистить();
	КонецЕсли;
	
	ИзменитьРеквизитыНевыполненныхЗадач = Ложь;
	ПроверитьОтсутствиеУчастниковПроцесса = Ложь;
	
	Если ПараметрыЗаписи.Свойство("Старт") И ПараметрыЗаписи.Старт
		И ЗначениеЗаполнено(ДатаОтсчетаДляРасчетаСроков) Тогда
		
		СрокиИсполненияПроцессовКлиент.ПроверитьКорректностьЗаполненияСроковПередСтартом(
			ЭтотОбъект, Объект, ПараметрыЗаписи, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ПроверитьОтсутствиеУчастниковПроцесса = Истина;
		
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("Старт") И ПараметрыЗаписи.Старт ИЛИ Объект.Стартован Тогда
		
		ПроверитьЗаполнениеПроцессаПередСтартом(Отказ);
		
		Если Объект.Стартован 
			И ВестиУчетПоПроектам
			И ЗначениеЗаполнено(Объект.ПроектнаяЗадача)
			И Не ПараметрыЗаписи.Свойство("СтартоватьПриНеСоответствииСрокаПроцессаИПроектнойЗадачи")
			И Не ПараметрыЗаписи.Свойство("ПрерываниеПроцесса") Тогда
			
			// Проверка соответствия даты окончания процесса и плановой даты окончания проектной задачи
			РаботаСПроектамиКлиент.ПроверитьСоответствиеСрокаПроцессаИПроектнойЗадачи(
				Объект.ПроектнаяЗадача, 
				Объект.СрокИсполнения, 
				Отказ,
				ПараметрыЗаписи,
				УникальныйИдентификатор);
		КонецЕсли;
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.Стартован
		И Модифицированность 
		И Не (ПараметрыЗаписи.Свойство("Старт") И ПараметрыЗаписи.Старт) Тогда
		
		ИзменитьРеквизитыНевыполненныхЗадач = Истина;
	КонецЕсли;
	
	Если ОбработкаОчередиЗаданийКлиентСервер.ЭтоСтартПроцессаЧерезОчередьЗаданий(ПараметрыЗаписи)
		Или ПараметрыЗаписи.Свойство("ОтложенныйСтартПроцесса")
		Или (Не Объект.Стартован
			И Модифицированность
			И ЗначениеЗаполнено(НастройкаСтарта)
			И НастройкаСтарта.Состояние = 
				ПредопределенноеЗначение("Перечисление.СостоянияПроцессовДляЗапуска.ГотовКСтарту")) Тогда
			
		ПроверитьЗаполнениеПроцессаДляФоновогоСтарта(Отказ, ПараметрыЗаписи);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДатаОтсчетаДляРасчетаСроков) Тогда
			ПроверитьОтсутствиеУчастниковПроцесса = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПроверитьОтсутствиеУчастниковПроцесса
		И Не ОтсутствияКлиент.ПроверитьОтсутствиеПоПроцессуПередЗаписью(ЭтотОбъект,
				ПараметрыЗаписи, Отказ) Тогда
				
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ЭтоФормаПроцессаСоСхемой(ЭтотОбъект) Тогда
		РаботаСКомплекснымиБизнесПроцессамиКлиент.ВычислитьОписаниеПредшественников(Объект);
	КонецЕсли;
		
	// Введем причину прерывания исключенных действий.
	РаботаСКомплекснымиБизнесПроцессамиКлиент.ВвестиПричинуПрерыванияПроцессовЭлементовСхемы(
		ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ОтключитьОбновлениеЗадач", Истина);
	
	// Запишем схему и выполним проверку процесса.
	// Если проверка не проходит, тогда отменяем запись схемы и восстановливаем ее состояние в форме.
	
	КопияДанныхСхемы =
		РаботаСКомплекснымиБизнесПроцессамиСервер.СкопироватьДанныеСхемыПроцессыИзФормы(
		ЭтотОбъект, ТекущийОбъект);
	
	НачатьТранзакцию();
	
	РаботаСКомплекснымиБизнесПроцессамиСервер.ЗаписатьСхемуПроцессаИзФормы(
		ЭтотОбъект, ТекущийОбъект);
	
	ПроверитьЗаполнениеПроцессаПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
	Если Отказ Тогда
		ОтменитьТранзакцию();
		РаботаСКомплекснымиБизнесПроцессамиСервер.ВосстановитьСхемуПроцессаИзКопииДанных(
			ЭтотОбъект, ТекущийОбъект, КопияДанныхСхемы);
		Возврат;
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	
	СрокиИсполненияПроцессовКОРП.ЗаписатьРассчитанныеТочныеСрокиКомплексногоПроцессаПоСхеме(
		ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
	Если Не РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ЭтоФормаПроцессаСоСхемой(ЭтотОбъект) Тогда
		ПараметрыЗаписи.Вставить("СрокиЭтапов",
			СрокиИсполненияПроцессов.СрокиДействийПроцесса(Объект.Этапы, "ИдентификаторЭтапа"));
	КонецЕсли;
	
	Если ИзменитьРеквизитыНевыполненныхЗадач Тогда
		СтарыеУчастникиПроцесса = БизнесПроцессыИЗадачиВызовСервера.
			ТекущиеУчастникиПроцесса(ТекущийОбъект);
		ТекущийОбъект.ДополнительныеСвойства.Вставить("СтарыеУчастникиПроцесса", СтарыеУчастникиПроцесса);
	КонецЕсли;
	
	Мультипредметность.ОчиститьНезаполненныеПредметыПроцесса(Объект);
	
	ПараметрыЗаписи.Вставить("ЭтоНовыйОбъект", НЕ ЗначениеЗаполнено(ТекущийОбъект.Ссылка));
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// Установим состояние записываемому процессу.
	РаботаСБизнесПроцессами.УстановитьСостояниеПроцессуПередЗаписьюИзФормыОбъекта(
		ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ИзменитьРеквизитыНевыполненныхЗадач Тогда
		ТекущийОбъект.ИзменитьРеквизитыНевыполненныхЗадач(
			ТекущийОбъект.ДополнительныеСвойства.СтарыеУчастникиПроцесса, ПараметрыЗаписи);
	КонецЕсли;
	
	Если Не РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ЭтоФормаПроцессаСоСхемой(ЭтотОбъект)
		И ПроверитьЗапускДействий Тогда
		
		НовыеПроцессы = Новый Массив();
		ТекущийОбъект.СтартоватьНовыеДействия(
			НовыеПроцессы, 
			БизнесПроцессы.КомплексныйПроцесс.ТочкиМаршрута.ВложенныйПроцесс, 
			Истина);
		
		ПроверитьЗапускДействий = Ложь;
		
	КонецЕсли;
	
	// Сохранение вводимых значений
	СохранениеВводимыхЗначений.ОбновитьСпискиВыбора(ЭтотОбъект, ЭлементыДляСохранения(), ЭтотОбъект.ИмяФормы);
	
	// Настройки старта
	СтартПроцессовСервер.ОбновитьНастройкиСтартаПроцессаИзФормы(
		ТекущийОбъект.Ссылка, ПараметрыЗаписи, НастройкаСтарта);
		
	ОбработкаОчередиЗаданийСервер.ОбработатьЗапускПроцессаИзКарточки(
		ТекущийОбъект.Ссылка, ПараметрыЗаписи);	
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ПротоколированиеРаботыСотрудников.ЗаписатьСоздание(Объект.Ссылка, ПараметрыЗаписи.ЭтоНовыйОбъект);
	ПротоколированиеРаботыСотрудников.ЗаписатьИзменение(Объект.Ссылка);
	ПротоколированиеРаботыСотрудников.ЗаписатьСтартБизнесПроцесса(
		Объект.Ссылка,
		ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыЗаписи));
	
	Если Не РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ЭтоФормаПроцессаСоСхемой(ЭтотОбъект) Тогда
		
		СрокиЭтапов = ПараметрыЗаписи.СрокиЭтапов;
		
		УстановитьПривилегированныйРежим(Истина);
		
		Объект.Этапы.Очистить();
		Для Каждого Этап Из ТекущийОбъект.Этапы Цикл
			
			ВладелецШаблона = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Этап.ШаблонБизнесПроцесса, "ВладелецШаблона");
				
			Если ВладелецШаблона <> ТекущийОбъект.Ссылка Тогда
				ШаблонОбъект = Этап.ШаблонБизнесПроцесса.ПолучитьОбъект();
				ШаблонОбъект.ВладелецШаблона = ТекущийОбъект.Ссылка;
				ШаблонОбъект.ШаблонВКомплексномПроцессе = Истина;
				ШаблонОбъект.Записать();
			КонецЕсли;
			
			НоваяСтрока = Объект.Этапы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Этап);
		КонецЦикла;
		РаботаСКомплекснымиБизнесПроцессамиСервер.ЗаполнитьВычисляемыеПоляЭтапов(ЭтотОбъект, Ложь);
		
		УстановитьПривилегированныйРежим(Ложь);
		
		СрокиИсполненияПроцессов.ЗаполнитьСрокиВТаблицеДействий(
			СрокиЭтапов, Объект.Этапы, "ИдентификаторЭтапа");
		
	КонецЕсли;
	
	ОбновитьПризнакиИстекшихСроков();
	
	УстановитьДоступность();
	
	Мультипредметность.ПроцессПослеЗаписиНаСервере(ЭтотОбъект, Объект);
	
	ОбновитьДоступностьЭлементовФормыПоСостояниюПроцесса();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("БизнесПроцессИзменен", Объект.Ссылка, ЭтотОбъект);
	
	Если ПараметрыЗаписи.Свойство("Старт") И ПараметрыЗаписи.Старт Тогда
		
		Если Объект.Предметы.Количество() = 0 Тогда 
			
			ИнформацияОЗапуске = Новый Структура;
			ИнформацияОЗапуске.Вставить("СсылкаНаБизнесПроцесс", Объект.Ссылка);
			ИнформацияОЗапуске.Вставить("СсылкаНаПредметБизнесПроцесса", Неопределено);
			ИнформацияОЗапуске.Вставить("ГлавнаяЗадача", Объект.ГлавнаяЗадача);
			Если ВестиУчетПоПроектам Тогда
				ИнформацияОЗапуске.Вставить("Проект", Объект.Проект);
				ИнформацияОЗапуске.Вставить("ПроектнаяЗадача", Объект.ПроектнаяЗадача);
			КонецЕсли;
			Оповестить("БизнесПроцессСтартован", ИнформацияОЗапуске);
			
		Иначе
		
			Для Каждого СтрокаПредмета из Объект.Предметы Цикл
				Если ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда
					ДелопроизводствоКлиент.ОповеститьОбИзмененииОбъекта(СтрокаПредмета.Предмет);
				КонецЕсли;
				
				ИнформацияОЗапуске = Новый Структура();
				ИнформацияОЗапуске.Вставить("СсылкаНаБизнесПроцесс", Объект.Ссылка);
				ИнформацияОЗапуске.Вставить("СсылкаНаПредметБизнесПроцесса", СтрокаПредмета.Предмет);
				ИнформацияОЗапуске.Вставить("ГлавнаяЗадача", Объект.ГлавнаяЗадача);
				Если ВестиУчетПоПроектам Тогда
					ИнформацияОЗапуске.Вставить("Проект", Объект.Проект);
					ИнформацияОЗапуске.Вставить("ПроектнаяЗадача", Объект.ПроектнаяЗадача);
				КонецЕсли;
				Оповестить("БизнесПроцессСтартован", ИнформацияОЗапуске);
				
			КонецЦикла;
		
		КонецЕсли;
		
	КонецЕсли;
	
	РаботаСБизнесПроцессамиКлиент.ПоказатьОповещениеПослеЗаписиПроцесса(ЭтотОбъект, ПараметрыЗаписи);
	СрокиИсполненияПроцессовКлиентКОРП.ПоказатьСообщениеОЗавершенииРасчетаСроков(ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)

	Если Настройки["ПоказыватьИнструкции"] <> Неопределено
		И ПолучитьФункциональнуюОпцию("ИспользоватьИнструкции") Тогда
		ПолучитьИнструкции();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область ДекорацияОписание

&НаКлиенте
Процедура ДекорацияОписаниеНажатие(Элемент)
	
	РаботаСБизнесПроцессамиКлиент.ДекорацияОписаниеНажатие(Элемент, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОписаниеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ДекорацияОписаниеОбработкаНавигационнойСсылки(
		Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область Наименование

&НаКлиенте
Процедура НаименованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	РаботаСБизнесПроцессамиКлиент.ВыбратьШаблонТекстаРеализация(ЭтотОбъект, "Наименование",
		ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.ПроцессКомплексныйНаименование"));
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		ДанныеВыбора = РаботаСШаблонамиТекстовСервер.СформироватьДанныеВыбораШаблона(
			ПараметрыПолученияДанных, 
			ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.ПроцессКомплексныйНаименование"));
			
		Если ДанныеВыбора.Количество() <> 0 Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура")  Тогда 
		Объект.Наименование = ВыбранноеЗначение.Шаблон;
		Модифицированность = Истина;	
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область Контролер

&НаКлиенте
Процедура КонтролерПриИзменении(Элемент)
	
	РаботаСБизнесПроцессамиКлиент.УчастникПриИзменении(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.УчастникНачалоВыбора(
		Элемент, Объект.Контролер, СтандартнаяОбработка, ЭтотОбъект, "Контролер");
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерОчистка(Элемент, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.УчастникОчистка(СтандартнаяОбработка,
		ЭтотОбъект, "Контролер");
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерОткрытие(Элемент, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.УчастникОткрытие(СтандартнаяОбработка,
		ЭтотОбъект, "Контролер");
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.УчастникОбработкаВыбора(
		Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.УчастникАвтоПодбор(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.
		УчастникОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка,
			ЭтотОбъект, "Контролер");
	
КонецПроцедуры

#КонецОбласти

#Область ПроектЗадача

&НаКлиенте
Процедура ПроектЗадачаПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ПроектЗадача) Тогда 
		Объект.Проект = Неопределено;
		Объект.ПроектнаяЗадача = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСПроектамиКлиент.ВыбратьПроектЗадачу(Элемент, Объект.Проект, Объект.ПроектнаяЗадача);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаОчистка(Элемент, СтандартнаяОбработка)
	
	Объект.Проект = Неопределено;
	Объект.ПроектнаяЗадача = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Объект.ПроектнаяЗадача) Тогда 
		ПоказатьЗначение(, Объект.ПроектнаяЗадача);
	ИначеЕсли ЗначениеЗаполнено(Объект.Проект) Тогда 
		ПоказатьЗначение(, Объект.Проект);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда 	
		Объект.Проект = ВыбранноеЗначение.Проект;
		Объект.ПроектнаяЗадача = ВыбранноеЗначение.ПроектнаяЗадача;
		ПолучитьДанныеПроекта();
		
		Модифицированность = Истина;
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = РаботаСПроектами.СформироватьДанныеВыбораПроектаЗадачи(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектЗадачаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		ДанныеВыбораПроектаЗадачи = РаботаСПроектами.СформироватьДанныеВыбораПроектаЗадачи(Текст);
		
		Если ДанныеВыбораПроектаЗадачи.Количество() = 1 Тогда 
			ВыбранноеЗначение = ДанныеВыбораПроектаЗадачи[0].Значение;
			
			Объект.Проект = ВыбранноеЗначение.Проект;
			Объект.ПроектнаяЗадача = ВыбранноеЗначение.ПроектнаяЗадача;
			ПроектЗадача = РаботаСПроектамиКлиентСервер.ПредставлениеПроектаЗадачи(Объект.Проект, Объект.ПроектнаяЗадача);
		Иначе	
			СтандартнаяОбработка = Ложь;
			ДанныеВыбора = ДанныеВыбораПроектаЗадачи;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОписаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьШаблонТекстаРеализация(ЭтотОбъект, "Описание",
		ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.ПроцессКомплексныйОписание"));

КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.ГруппаГлавное
		И РеквизитСИзмененнымСроком = "Схема" Тогда
		
		ОбновитьСрокиИсполненияОтложенно();
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОбновитьДеревоПроцессовЗадач", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВажностьПриИзменении(Элемент)
	
	Если Объект.Важность = ПредопределенноеЗначение("Перечисление.ВариантыВажностиОбъектов.Высокая")
		ИЛИ Объект.Важность = ПредопределенноеЗначение("Перечисление.ВариантыВажностиОбъектов.Низкая") Тогда
		УстановитьВажностьВсехЭтапов(Объект.Важность);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ВариантМаршрутизацииПриИзменении(Элемент)
	
	ВариантМаршрутизацииПриИзмененииСервер();
	РаботаСКомплекснымиБизнесПроцессамиКлиент.ВычислитьОписаниеПредшественников(Объект);
	
КонецПроцедуры

&НаКлиенте
Процедура ГлавнаяЗадачаОткрытие(Элемент, СтандартнаяОбработка)
	
	БизнесПроцессыИЗадачиКлиент.ОткрытьФормуВыполненияЗадачи(Объект.ГлавнаяЗадача);
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеТрудозатратНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Настройки = Новый Структура;
	Настройки.Вставить("ЕдиницаИзмеренияТрудозатрат", ЕдиницаТрудозатрат);
	Настройки.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	Настройки.Вставить("Участники", Новый Массив);
	
	ТрудозатратыКонтролера = РаботаСБизнесПроцессамиКлиент.
		СтруктураСтрокиТрудозатратУчастникаПроцесса(
			НСтр("ru = 'Контролер'"),
			"ТрудозатратыПланКонтролера",
			Объект.ТрудозатратыПланКонтролера,
			Объект.Контролер);
	Настройки.Участники.Добавить(ТрудозатратыКонтролера);
	
	РаботаСБизнесПроцессамиКлиент.НастроитьТрудозатратУчастниковПроцесса(ЭтотОбъект, Настройки);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокИсполненияПроцессаПредставлениеОбработкаНавигационнойСсылки(
	Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДатаОтсчетаДляРасчетаСроков = ТекущаяДата();
	ОбновитьСрокиИсполненияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнструкцияПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСИнструкциямиКлиент.ОткрытьСсылку(ДанныеСобытия.Href, ДанныеСобытия.Element, Элемент.Документ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Предметы

&НаКлиенте
Процедура ПредметыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Объект.Ссылка.Пустая() Тогда
		Если Не Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПредметыВыборПродолжение",
		ЭтотОбъект);
	МультипредметностьКлиент.ПредметыПроцессаИзменитьПредмет(ЭтотОбъект, Объект, ВыбраннаяСтрока, СтандартнаяОбработка, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыВыборПродолжение(Результат, Параметры) Экспорт
	
	ПредметыПредметПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПриАктивизацииСтроки(Элемент)
	
	МультипредметностьКлиент.ОбновитьОтображениеКомандыОсновнойПредметВПроцессе(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПредметыПередНачаломДобавленияПродолжение",
		ЭтотОбъект);
	МультипредметностьКлиент.ПредметыПроцессаПередНачаломДобавления(ЭтотОбъект, Объект, Отказ, Копирование, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПередНачаломДобавленияПродолжение(Результат, Параметры) Экспорт
	
	ПредметыПредметПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПередУдалением(Элемент, Отказ)
	
	МультипредметностьКлиент.ПредметыПередУдалением(ЭтотОбъект, Объект, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПослеУдаления(Элемент)
	
	МультипредметностьКлиентСервер.УстановитьДоступностьКнопокУправленияПредметами(ЭтотОбъект);
	МультипредметностьКлиентСервер.УстановитьВидимостьТаблицыПредметов(ЭтотОбъект, Объект);
	ПредметыПредметПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	МультипредметностьКлиент.ОбработкаПеретаскиванияВСписокПредметовПроцесса(
		ЭтотОбъект, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметыОписаниеПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Предметы.ТекущиеДанные;
	
	ТекущаяСтрока.РольПредмета = ПредопределенноеЗначение("Перечисление.РолиПредметов."+ТекущаяСтрока.Описание);
	Если МультипредметностьКлиент.ПредметыПроцессаИзменитьПредмет(ЭтотОбъект, Объект, ТекущаяСтрока.ПолучитьИдентификатор()) Тогда
		ПредметыПредметПриИзменении();
	Иначе
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ИмяПредмета) Тогда
			Объект.Предметы.Удалить(ТекущаяСтрока);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Этапы

&НаКлиенте
Процедура ЭтапыПриИзменении(Элемент)
	
	ВариантМаршрутизацииПриИзмененииСервер();
	РаботаСКомплекснымиБизнесПроцессамиКлиент.ВычислитьОписаниеПредшественников(Объект);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Поле.Имя <> "ЭтапыПредшественникиЭтапаСтрокой" Тогда
		ИзменитьДействиеКлиент();
	Иначе
		РаботаСКомплекснымиБизнесПроцессамиКлиент.ОткрытьФормуНастройкиПредшественниковЭтапа(Объект, Элемент.ТекущиеДанные, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыПриАктивизацииСтроки(Элемент)
		 
	ДанныеЭтапа = Элементы.Этапы.ТекущиеДанные;
	Если ДанныеЭтапа = Неопределено Тогда
		Элементы.КонтекстноеМенюНастроитьДействие.Доступность = Ложь;
		Элементы.ЭтапыПредшественникиЭтапаСтрокой.Доступность = Ложь;
		Возврат;
	КонецЕсли;
	Если ТекущийЭтап = ДанныеЭтапа.ИдентификаторЭтапа Тогда
		Возврат;
	КонецЕсли;
	          	
	Если Объект.Завершен Или Не ДоступностьПоШаблону Тогда
		Элементы.ГруппаКоманднаяПанельСписка.Доступность = Ложь;
		Возврат;
	КонецЕсли;
			
	Элементы.ЭтапыКонтекстноеМенюУдалить.Доступность = НЕ ЗначениеЗаполнено(ДанныеЭтапа.ЗапущенныйБизнесПроцесс);
	Элементы.КонтекстноеМенюНастроитьДействие.Доступность = НЕ (ЗначениеЗаполнено(ДанныеЭтапа.ЗапущенныйБизнесПроцесс) И НЕ ДанныеЭтапа.ЗадачаВыполнена);
	Элементы.ЭтапыПредшественникиЭтапаСтрокой.ТолькоПросмотр = Не Элементы.КонтекстноеМенюНастроитьДействие.Доступность;
	Элементы.ЭтапыПредшественникиЭтапаСтрокой.Доступность = Элементы.КонтекстноеМенюНастроитьДействие.Доступность;
	ТекущийЭтап = ДанныеЭтапа.ИдентификаторЭтапа;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	Если Не РаботаСКомплекснымиБизнесПроцессамиКлиент.
		ЗаписатьНовыйПроцессПередНастройкойПодчиненногоЭлемента(ЭтотОбъект) Тогда
		
		Возврат;
	КонецЕсли;
	
	ДатаОтсчета = Дата(1,1,1);
	Если ЗначениеЗаполнено(ДатаОтсчетаДляРасчетаСроков) Тогда
		ДатаОтсчета = СрокиИсполненияПроцессовКлиентСерверКОРП.
			ДатаОтсчетаНовогоДействияКомплексногоПроцессаВФорме(ЭтотОбъект);
	КонецЕсли;
	
	РаботаСКомплекснымиБизнесПроцессамиКлиент.ОткрытьФормуВыбораДействияЭтапа(
		Неопределено, 
		ЭтотОбъект, 
		Объект.Ссылка, 
		Объект.Предметы,
		ДатаОтсчета);
		
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ИзменитьДействиеКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ДанныеЭтапа = Элементы.Этапы.ТекущиеДанные;
	Если ДанныеЭтапа = Неопределено Тогда	
		Возврат;
	КонецЕсли;
	
	НаЭтапЕстьСсылки = Ложь;
	Для Каждого Строка Из Объект.ПредшественникиЭтапов Цикл
		Если Строка.ИдентификаторПредшественника = ДанныеЭтапа.ИдентификаторЭтапа Тогда
			НаЭтапЕстьСсылки = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если НаЭтапЕстьСсылки Тогда
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Внимание! От данного действия зависит порядок выполнения других действий.
						|Удалить действие ""%1""?'"),
			ДанныеЭтапа.ЗадачаЭтапа);
	Иначе	
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Удалить действие ""%1""?'"),
			ДанныеЭтапа.ЗадачаЭтапа);
	КонецЕсли;
	Режим = Новый СписокЗначений;
	Режим.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Удалить'"));
	Режим.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Не удалять'"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЭтапыПередУдалениемПродолжение", ЭтотОбъект, ДанныеЭтапа);
	
	ПоказатьВопрос(ОписаниеОповещения,ТекстВопроса, Режим, 0, КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыПередУдалениемПродолжение(Ответ, ДанныеЭтапа) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураУдаляемогоЭтапа = Новый Структура();
	СтруктураУдаляемогоЭтапа.Вставить("ЗадачаЭтапа", ДанныеЭтапа.ЗадачаЭтапа);
	СтруктураУдаляемогоЭтапа.Вставить("ИдентификаторЭтапа", ДанныеЭтапа.ИдентификаторЭтапа);
	Элементы.Этапы.ТекущиеДанные.Удален = Истина;
	ЭтапыКУдалению.Добавить(СтруктураУдаляемогоЭтапа);
	РаботаСКомплекснымиБизнесПроцессамиКлиент.ВычислитьОписаниеПредшественников(Объект);
	Для Счетчик = 1 по Объект.Этапы.Количество() - 1 Цикл
		Этап = Объект.Этапы[Счетчик]; 
		Если Не ПустаяСтрока(Этап.ПредшественникиЭтапаСтрокой) Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = Объект.ПредшественникиЭтапов.Добавить();
		НоваяСтрока.ИдентификаторПоследователя = Объект.Этапы[Счетчик].ИдентификаторЭтапа;
		
		НовыйПредшественникПодобран = Ложь;
		Для Индекс = 1 по Счетчик Цикл
			ДействительныйИндекс = Счетчик - Индекс;
			Если Не Объект.Этапы[ДействительныйИндекс].Удален Тогда
				НоваяСтрока.ИдентификаторПредшественника = Объект.Этапы[ДействительныйИндекс].ИдентификаторЭтапа;	
				НовыйПредшественникПодобран = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НЕ НовыйПредшественникПодобран Тогда
			НоваяСтрока.ИдентификаторПредшественника = УникальныйИдентификаторПустой();	
		КонецЕсли;
		
		НоваяСтрока.УсловиеРассмотрения = ПредопределенноеЗначение("Перечисление.УсловияРассмотренияПредшественниковЭтапа.ПослеУспешногоВыполнения");
		
		РеквизитСИзмененнымСроком = "Этапы";
		ИдентификаторыИзмененныхДействий.Добавить(Объект.Этапы[Счетчик].ИдентификаторЭтапа);
	КонецЦикла;
	РаботаСКомплекснымиБизнесПроцессамиКлиент.ВычислитьОписаниеПредшественников(Объект);
	
	ОчиститьДатуОтсчетаДляРасчетаСроков(ЭтотОбъект);
	ОбновитьСрокиИсполненияОтложенно();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтапыПослеУдаления(Элемент)
	
	ПослеУдаленияДействия();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ДеревоЗадач

&НаКлиенте
Процедура ДеревоЗадачПриАктивизацииСтроки(Элемент)
	
	РаботаСБизнесПроцессамиКлиент.ДеревоЗадачПриАктивизацииСтроки(Элемент, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗадачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ДеревоЗадачВыбор(
		Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЗадачПередНачаломИзменения(Элемент, Отказ)
	
	РаботаСБизнесПроцессамиКлиент.ДеревоЗадачПередНачаломИзменения(Элемент, Отказ, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_СписокАктивныхЗадач

&НаКлиенте
Процедура СписокАктивныхЗадачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.
		СписокАктивныхЗадачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАктивныхЗадачПриАктивизацииСтроки(Элемент)
	
	РаботаСБизнесПроцессамиКлиент.СписокАктивныхЗадачПриАктивизацииСтроки(Элемент, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАктивныхЗадачПередНачаломИзменения(Элемент, Отказ)
	
	РаботаСБизнесПроцессамиКлиент.СписокАктивныхЗадачПередНачаломИзменения(
		Элемент, Отказ, ЭтотОбъект);
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область Предметы

&НаКлиенте
Процедура ДобавитьПредмет(Команда)
	
	МультипредметностьКлиент.ПредметыДобавитьВспомогательный(ЭтотОбъект, Объект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗаполняемыйПредмет(Команда)
	
	МультипредметностьКлиент.ПредметыДобавитьЗаполняемый(ЭтотОбъект, Объект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайл(Команда)
	
	МультипредметностьКлиент.ПредметыДобавитьВспомогательный(
		ЭтотОбъект, Объект, Истина,, Тип("СправочникСсылка.Файлы"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойПредмет(Команда)
	
	МультипредметностьКлиент.ОсновнойПредмет(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПредмет(Команда)
	
	ВыбраннаяСтрока = Элементы.Предметы.ТекущаяСтрока;
	Если ВыбраннаяСтрока <> Неопределено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"ИзменитьПредметПродолжение",
			ЭтотОбъект);
		МультипредметностьКлиент.ПредметыПроцессаИзменитьПредмет(ЭтотОбъект, Объект, ВыбраннаяСтрока,, ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПредметПродолжение(Результат, Параметры) Экспорт
	
	ПредметыПредметПриИзменении();
	
КонецПроцедуры

#КонецОбласти

#Область ДеревоПроцессовИЗадач

&НаКлиенте
Процедура ЖелтыйФлаг(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьФлаги(
		ЭтотОбъект,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Желтый"),
		"ДеревоЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗеленыйФлаг(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьФлаги(
		ЭтотОбъект,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Зеленый"),
		"ДеревоЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура КрасныйФлаг(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьФлаги(
		ЭтотОбъект,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Красный"),
		"ДеревоЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура ЛиловыйФлаг(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьФлаги(
		ЭтотОбъект,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Лиловый"),
		"ДеревоЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура ОранжевыйФлаг(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьФлаги(
		ЭтотОбъект,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Оранжевый"),
		"ДеревоЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура СинийФлаг(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьФлаги(
		ЭтотОбъект,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Синий"),
		"ДеревоЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФлаг(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьФлаги(
		ЭтотОбъект,
		Неопределено,
		"ДеревоЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАктивныхЗадачЖелтыйФлаг(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьФлаги(
		ЭтотОбъект,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Желтый"),
		"СписокАктивныхЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАктивныхЗадачЗеленыйФлаг(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьФлаги(
		ЭтотОбъект,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Зеленый"),
		"СписокАктивныхЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАктивныхЗадачКрасныйФлаг(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьФлаги(
		ЭтотОбъект,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Красный"),
		"СписокАктивныхЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАктивныхЗадачЛиловыйФлаг(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьФлаги(
		ЭтотОбъект,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Лиловый"),
		"СписокАктивныхЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАктивныхЗадачОранжевыйФлаг(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьФлаги(
		ЭтотОбъект,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Оранжевый"),
		"СписокАктивныхЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАктивныхЗадачОчиститьФлаг(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьФлаги(
		ЭтотОбъект,
		Неопределено,
		"СписокАктивныхЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура СписокАктивныхЗадачСинийФлаг(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьФлаги(
		ЭтотОбъект,
		ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Синий"),
		"СписокАктивныхЗадач");
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьДеревоПроцессовЗадач();
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиВДеревеЗадач(Команда)
	
	Если Элементы.СписокАктивныхЗадач.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НайтиВДеревеЗадачНаСервере(Элементы.СписокАктивныхЗадач.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКТекущемуОбъекту(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ПерейтиКТекущемуОбъекту(Объект.Ссылка, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ТаблицаЭтапов

&НаКлиенте
Процедура ДобавитьДействие(Команда)

	Если Не РаботаСКомплекснымиБизнесПроцессамиКлиент.
		ЗаписатьНовыйПроцессПередНастройкойПодчиненногоЭлемента(ЭтотОбъект) Тогда
		
		Возврат;
	КонецЕсли;
	
	ДатаОтсчета = Дата(1,1,1);
	Если ЗначениеЗаполнено(ДатаОтсчетаДляРасчетаСроков) Тогда
		ДатаОтсчета = СрокиИсполненияПроцессовКлиентСерверКОРП.
			ДатаОтсчетаНовогоДействияКомплексногоПроцессаВФорме(ЭтотОбъект);
	КонецЕсли;
	
	РаботаСКомплекснымиБизнесПроцессамиКлиент.ОткрытьФормуВыбораДействияЭтапа(
		Неопределено, 
		ЭтотОбъект, 
		Объект.Ссылка, 
		Объект.Предметы,
		ДатаОтсчета);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьДействие(Команда)
	
	ТекущиеДанные = Элементы.Этапы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСКомплекснымиБизнесПроцессамиКлиент.
		ЗаписатьНовыйПроцессПередНастройкойПодчиненногоЭлемента(ЭтотОбъект) Тогда
		
		Возврат;
	КонецЕсли;
	
	ВыполнитьНастройкуДействия(ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаКлиенте
Процедура СтартоватьИЗакрыть(Команда)
	
	КомандыРаботыСБизнесПроцессамиКлиент.СтартоватьИЗакрыть(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДатуОтложенногоСтарта(Команда)
	
	СтартПроцессовКлиент.УстановитьДатуОтложенногоСтарта(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдаление(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ПометитьНаУдалениеБизнесПроцесс(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьГлавнуюЗадачу(Команда)
	
	РаботаСБизнесПроцессамиКлиент.УстановитьГлавнуюЗадачуБизнесПроцессИзФормыОбъекта(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Остановить(Команда)
	
	КомандыРаботыСБизнесПроцессамиКлиент.ОстановитьБизнесПроцессИзФормыОбъекта(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьБизнесПроцесс(Команда)
	
	КомандыРаботыСБизнесПроцессамиКлиент.ПродолжитьБизнесПроцессИзФормыОбъекта(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрерватьБизнесПроцесс(Команда)
	
	КомандыРаботыСБизнесПроцессамиКлиент.ПрерватьБизнесПроцессИзФормыОбъекта(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблону(Команда)
	
	Предметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(Объект);
	ШаблоныПоПредметам = Новый СписокЗначений;
	ШаблоныПоПредметам.ЗагрузитьЗначения(
		ШаблоныБизнесПроцессов.ШаблоныПоОбъектам(
		Предметы, Тип("СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов")));
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗаполнитьПоШаблонуПродолжение",
		ЭтотОбъект);
	ШаблоныБизнесПроцессовКлиент.ВыбратьШаблонБизнесПроцесса(
		"ШаблоныКомплексныхБизнесПроцессов", ШаблоныПоПредметам, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблонуПродолжение(РезультатВыбора, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатВыбора) Тогда 
		ЗаполнитьПоШаблонуНаСервере(РезультатВыбора);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКакШаблон(Команда)
	
	ШаблонСсылка = СохранитьКакШаблонСервер();
	Если ЗначениеЗаполнено(ШаблонСсылка) Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Создан шаблон процесса.'"), 
			ПолучитьНавигационнуюСсылку(ШаблонСсылка),
			Строка(ШаблонСсылка));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПовторение(Команда)
	
	ПовторениеБизнесПроцессовКлиент.НастроитьПовторениеИзФормыОбъекта(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подписаться(Команда)
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПараметрыФормы = Новый Структура("ОбъектПодписки", Объект.Ссылка);
		ОткрытьФорму("ОбщаяФорма.ПодпискаНаУведомленияПоОбъекту", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ЗаписатьИЗакрыть(Команда, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПраваДоступа(Команда)
	
	ДокументооборотПраваДоступаКлиент.ОткрытьФормуПравДоступа(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьИнструкции(Команда)
	
	ПоказыватьИнструкции = Не ПоказыватьИнструкции;
	ПолучитьИнструкции();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ТаблицаЭтапов

&НаСервере
Процедура ВариантМаршрутизацииПриИзмененииСервер()
	
	// Получаем текущие рассичитанные сроки этапов
	СрокиЭтапов = СрокиИсполненияПроцессов.СрокиДействийПроцесса(Объект.Этапы, "ИдентификаторЭтапа");
	
	ОбъектФормы = РеквизитФормыВЗначение("Объект");
	РаботаСКомплекснымиБизнесПроцессамиСервер.ВариантМаршрутизацииПриИзменении(ОбъектФормы, ЭтапыКУдалению);
	ЗначениеВРеквизитФормы(ОбъектФормы, "Объект");
	Для Каждого Этап Из Объект.Этапы Цикл
		Для Каждого ЭтапКУдалению Из ЭтапыКУдалению Цикл
			Если Этап.ИдентификаторЭтапа = ЭтапКУдалению.Значение.ИдентификаторЭтапа Тогда
				Этап.Удален = истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	МультипредметностьКлиентСервер.ЗаполнитьТаблицуПредметовФормы(Объект);
	Мультипредметность.ОбработатьОписаниеПредметовПроцесса(Объект);
	РаботаСКомплекснымиБизнесПроцессамиСервер.ЗаполнитьВычисляемыеПоляЭтапов(ЭтотОбъект);
	
	СрокиИсполненияПроцессов.ЗаполнитьСрокиВТаблицеДействий(СрокиЭтапов, Объект.Этапы, "ИдентификаторЭтапа");
	
	ОчиститьДатуОтсчетаДляРасчетаСроков(ЭтотОбъект);
	ОбновитьСрокиИсполненияНаСервере();
	
КонецПроцедуры

&НаСервере
Функция ПрименитьНастройкиДействия(Параметр)
	
	Результат = РаботаСКомплекснымиБизнесПроцессамиСервер.ПрименитьНастройкиДействия(ЭтотОбъект, Параметр);
	РеквизитСИзмененнымСроком = "Этапы";
	ИдентификаторыИзмененныхДействий.Добавить(Результат);
	ВариантМаршрутизацииПриИзмененииСервер();
	Возврат Результат;
		
КонецФункции

&НаСервере
Функция СкопироватьШаблонВНастройкиПроцессаИПолучитьИмяФормы(ШаблонБП, ВладелецШаблона) 

	Если ТипЗнч(ВладелецШаблона) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
		//Развернем автоподстановки из шаблона в реальных исполнителей
		ИмяПроцесса = Справочники[ШаблонБП.Метаданные().Имя].ИмяПроцесса(ШаблонБП);
		БизнесПроцессОбъект = БизнесПроцессы[ИмяПроцесса].СоздатьБизнесПроцесс();
		
		БизнесПроцессОбъект.Дата = ТекущаяДатаСеанса();
		БизнесПроцессОбъект.Автор = Объект.Автор;
		
		Мультипредметность.ЗаполнитьПредметыПроцессаПоШаблону(ШаблонБП, БизнесПроцессОбъект);
		
		Если МультипредметностьКлиентСервер.ЭтоКомплексныйПроцесс(БизнесПроцессОбъект) Тогда
			БизнесПроцессОбъект.ЗаполнитьДействияПоШаблону(ШаблонБП);
		КонецЕсли;
		
		Мультипредметность.ПередатьПредметыПроцессу(БизнесПроцессОбъект, Объект.Предметы);
		
		БизнесПроцессОбъект.ЗаполнитьПоШаблону(ШаблонБП);
		
		ШаблонДляВставки = БизнесПроцессОбъект.СоздатьШаблонПоПроцессу();
		
		ШаблонДляВставкиОбъект = ШаблонДляВставки.ПолучитьОбъект();
		
	Иначе
		
		ШаблонДляВставкиОбъект = ШаблонБП.Скопировать();
		
	КонецЕсли;
	
	ШаблонДляВставкиОбъект.ВладелецШаблона = ВладелецШаблона;
	ШаблонДляВставкиОбъект.ШаблонВКомплексномПроцессе = Истина;
	
	Если ВладелецШаблона.Важность = Перечисления.ВариантыВажностиОбъектов.Высокая
		ИЛИ ВладелецШаблона.Важность = Перечисления.ВариантыВажностиОбъектов.Низкая Тогда
		ШаблонДляВставкиОбъект.Важность = ВладелецШаблона.Важность;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ШаблонДляВставкиОбъект.Записать();
	УстановитьПривилегированныйРежим(Ложь);
	
	ИмяФормыДляОткрытия = ШаблонДляВставки.Метаданные().ПолноеИмя() + ".ФормаОбъекта";
	
	ДанныеВозврата = Новый Структура;
	Данныевозврата.Вставить("ИмяФормыДляОткрытия", ИмяФормыДляОткрытия);
	ДанныеВозврата.Вставить("Шаблон", ШаблонДляВставкиОбъект.Ссылка);
	
	ЗаполненыНеобходимыеПоля = УШаблонаДействияЗаполненыВсеНеобходимыеПоля(ШаблонДляВставкиОбъект);
	ДанныеВозврата.Вставить("ЗаполненыНеобходимыеДляСтартаПоля", ЗаполненыНеобходимыеПоля);
	Если ЗаполненыНеобходимыеПоля Тогда
		ПараметрыНастройкиДействия = Новый Структура();
		ПараметрыНастройкиДействия.Вставить("ШаблонБП", ШаблонДляВставкиОбъект.Ссылка);
		ПараметрыНастройкиДействия.Вставить("ВладелецШаблона", Объект.Ссылка);
		ИдентификаторЭтапа = ПрименитьНастройкиДействия(ПараметрыНастройкиДействия);
		ДанныеВозврата.Вставить("ИдентификаторЭтапа", ИдентификаторЭтапа); 
	КонецЕсли;
		
	Возврат ДанныеВозврата;
	
КонецФункции

&НаСервереБезКонтекста	
Функция УШаблонаДействияЗаполненыВсеНеобходимыеПоля(ШаблонОбъект) 
	
	Возврат ШаблонОбъект.ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта().Количество() = 0;
	
КонецФункции

&НаСервере
Процедура УдалитьЭтапы()
	
	Для Каждого ЭтапКУдалению Из ЭтапыКУдалению Цикл 
		РаботаСКомплекснымиБизнесПроцессамиСервер.УдалитьЭтап(
			ЭтотОбъект, 
			ЭтапКУдалению.Значение.ЗадачаЭтапа, 
			ЭтапКУдалению.Значение.ИдентификаторЭтапа);
	КонецЦикла;		
		
	ЭтапыУдалениеСервер();	
	
КонецПроцедуры

&НаСервере
Процедура ЭтапыУдалениеСервер()
	
	РаботаСКомплекснымиБизнесПроцессамиСервер.ЗаполнитьВычисляемыеПоляЭтапов(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПослеУдаленияДействия()
	
	РаботаСКомплекснымиБизнесПроцессамиСервер.ЗаполнитьВычисляемыеПоляЭтапов(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьДействиеКлиент()
	
	ТекущиеДанные = Элементы.Этапы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не РаботаСКомплекснымиБизнесПроцессамиКлиент.
		ЗаписатьНовыйПроцессПередНастройкойПодчиненногоЭлемента(ЭтотОбъект) Тогда
		
		Возврат;
	КонецЕсли;
	
	Если Объект.Стартован Тогда
		
		Если Модифицированность И Не Записать() Тогда
			Возврат;
		КонецЕсли;
		
		РазблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	ПараметрыФормы = Новый Структура;
	Если ЗначениеЗаполнено(ТекущиеДанные.ЗапущенныйБизнесПроцесс) И НЕ ТекущиеДанные.ЗадачаВыполнена Тогда
		ПараметрыФормы.Вставить("Ключ", ТекущиеДанные.ЗапущенныйБизнесПроцесс);
		ПараметрыФормы.Вставить("ЗаявкаНаПереносСрока", ЗаявкаНаПереносСрока);
		ИмяФормыДляОткрытия = ПолучитьИмяФормыДляОткрытияДействия(ТекущиеДанные.ЗапущенныйБизнесПроцесс);
		ОткрытьФорму(ИмяФормыДляОткрытия, ПараметрыФормы, ЭтотОбъект);
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.ЗапущенныйБизнесПроцесс) И ТекущиеДанные.ЗадачаВыполнена Тогда
		ПараметрыФормы.Вставить("Ключ", ТекущиеДанные.ЗапущенныйБизнесПроцесс);
		ИмяФормыДляОткрытия = ПолучитьИмяФормыДляОткрытияДействия(ТекущиеДанные.ЗапущенныйБизнесПроцесс);
		ОткрытьФорму(ИмяФормыДляОткрытия, ПараметрыФормы, ЭтотОбъект);	
	Иначе
		ВыполнитьНастройкуДействия(ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИмяФормыДляОткрытияДействия(Ссылка)
	
	Возврат Ссылка.Метаданные().ПолноеИмя() + ".ФормаОбъекта";
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьНастройкуДействия(ТекущиеДанные)
	
	ИмяФормыДляОткрытия = ПолучитьИмяФормыДляНастройкиДействия(ТекущиеДанные.ШаблонБизнесПроцесса);
	Если Не ЗначениеЗаполнено(ИмяФормыДляОткрытия) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", ТекущиеДанные.ШаблонБизнесПроцесса);
	Если ЗначениеЗаполнено(Объект.Автор) Тогда
		ПараметрыФормы.Вставить("ТолькоПросмотр", Не ДоступностьПоШаблону И ЗначениеЗаполнено(Объект.Шаблон));
	КонецЕсли;
	Предметы = Новый Массив;
	Для Каждого СтрокаПредмет Из Объект.Предметы Цикл
		Предметы.Добавить(СтрокаПредмет.Предмет);
	КонецЦикла;
	Если Предметы.Количество() > 0 Тогда
		ПараметрыФормы.Вставить("ПредметыПроцесса", Предметы);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаОтсчетаДляРасчетаСроков) Тогда
		ДатаОтсчета = СрокиИсполненияПроцессовКлиентСерверКОРП.
			ДатаОтсчетаДействияКомплексногоПроцессаВФорме(ЭтотОбъект);
		ПараметрыФормы.Вставить("ДатаОтсчетаДляРасчетаСроков", ДатаОтсчета);
	КонецЕсли;
	
	ОткрытьФорму(ИмяФормыДляОткрытия, ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьИмяФормыДляНастройкиДействия(Действие)
	
	Если ТипЗнч(Действие) = Тип("СправочникСсылка.ШаблоныИсполнения") Тогда
		Возврат "Справочник.ШаблоныИсполнения.ФормаОбъекта";
	ИначеЕсли ТипЗнч(Действие) = Тип("СправочникСсылка.ШаблоныКомплексныхБизнесПроцессов") Тогда
		Возврат "Справочник.ШаблоныКомплексныхБизнесПроцессов.ФормаОбъекта";
	ИначеЕсли ТипЗнч(Действие) = Тип("СправочникСсылка.ШаблоныОзнакомления") Тогда
		Возврат "Справочник.ШаблоныОзнакомления.ФормаОбъекта";
	ИначеЕсли ТипЗнч(Действие) = Тип("СправочникСсылка.ШаблоныПриглашения") Тогда
		Возврат "Справочник.ШаблоныПриглашения.ФормаОбъекта";
	ИначеЕсли ТипЗнч(Действие) = Тип("СправочникСсылка.ШаблоныРассмотрения") Тогда
		Возврат "Справочник.ШаблоныРассмотрения.ФормаОбъекта";
	ИначеЕсли ТипЗнч(Действие) = Тип("СправочникСсылка.ШаблоныРегистрации") Тогда
		Возврат "Справочник.ШаблоныРегистрации.ФормаОбъекта";
	ИначеЕсли ТипЗнч(Действие) = Тип("СправочникСсылка.ШаблоныСогласования") Тогда
		Возврат "Справочник.ШаблоныСогласования.ФормаОбъекта";
	ИначеЕсли ТипЗнч(Действие) = Тип("СправочникСсылка.ШаблоныПодписания") Тогда
		Возврат "Справочник.ШаблоныПодписания.ФормаОбъекта";
	ИначеЕсли ТипЗнч(Действие) = Тип("СправочникСсылка.ШаблоныУтверждения") Тогда
		Возврат "Справочник.ШаблоныУтверждения.ФормаОбъекта";
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

#КонецОбласти

#Область ПроверкаЗаполненияПроцесса

// Проверяет заполнение процесса перед стартом на клиенте.
//
// Параметры:
//  - Отказ  - Булево - принимает значение Истина, если имеются ошибки заполнения.
//
&НаКлиенте
Процедура ПроверитьЗаполнениеПроцессаПередСтартом(Отказ)
	
	МультипредметностьКлиент.ПроверитьЗаполнениеПредметовПроцесса(ЭтотОбъект, Отказ);
	// Проверка на корректность заполнения перед стартом
	Если НЕ ЗначениеЗаполнено(Объект.Наименование) Тогда
		Текст = НСтр("ru = 'Не заполнено поле ""Наименование"".'");	
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			Текст,
			,
			"Объект.Наименование",
			,
			Отказ);
	КонецЕсли;
	
	Если Не РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ЭтоФормаПроцессаСоСхемой(ЭтотОбъект)
		И Объект.Этапы.Количество() = 0 Тогда
		
		Текст = НСтр("ru = 'Не указано ни одного действия.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(
			Текст,
			,
			"Объект.Этапы",
			,
			Отказ);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет заполнение процесса перед записью на сервере.
//
// Параметры:
//  ТекущийОбъект - процесс объект
//  Отказ - Булево - принимает значение Истина, если имеются ошибки заполнения.
//  ТолькоПроверка - Булево - если передается значение Истина, то происходит только проверка
//
&НаСервере
Процедура ПроверитьЗаполнениеПроцессаПередЗаписьюНаСервере(
	Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоСтарт = (ПараметрыЗаписи.Свойство("Старт") И ПараметрыЗаписи.Старт);
	
	ЭтоОтложенныйСтарт = ПараметрыЗаписи.Свойство("ОтложенныйСтартПроцесса")
		И ПараметрыЗаписи.ОтложенныйСтартПроцесса;
	
	ЭтоФоновыйСтарт = ОбработкаОчередиЗаданийКлиентСервер.
		ЭтоСтартПроцессаЧерезОчередьЗаданий(ПараметрыЗаписи);
	
	ЭтоПродолжениеПроцесса = ПараметрыЗаписи.Свойство("ИзменениеСостоянияПроцесса")
		И ПараметрыЗаписи.ИзменениеСостоянияПроцесса
		И ПараметрыЗаписи.Свойство("НовоеСостояние")
		И ПараметрыЗаписи.НовоеСостояние = 
			ПредопределенноеЗначение("Перечисление.СостоянияБизнесПроцессов.Активен");
		
	ЭтоИзменениеПроцессаГотовогоКОтложенномуСтарту = 
		Не Объект.Стартован
		И Модифицированность
		И ЗначениеЗаполнено(НастройкаСтарта)
		И НастройкаСтарта.Состояние = 
			ПредопределенноеЗначение("Перечисление.СостоянияПроцессовДляЗапуска.ГотовКСтарту");
	
	// Выполним стандартные обработчики заполнение процесса перед стартом/продолжением.
	Если ЭтоСтарт Или ЭтоОтложенныйСтарт Или ЭтоФоновыйСтарт Или ЭтоПродолжениеПроцесса
		Или ЭтоИзменениеПроцессаГотовогоКОтложенномуСтарту Тогда
		
		Отказ = Не ПроверитьЗаполнение();
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоСтарт Или ЭтоОтложенныйСтарт Или ЭтоФоновыйСтарт Тогда
		
		ПредметыДляВложеннойОбработки = МассивПредметовДляВложеннойОбработки();
		РаботаСПроцессамиПоОбработкамОбъектов.ПроверкаЗапретаНаЗапускНесколькихКП(
			ТекущийОбъект.Ссылка, ПредметыДляВложеннойОбработки, Отказ);
		
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Проверим заполнение этапов процесса перед стартом/продолжением.
	Если Не РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ЭтоФормаПроцессаСоСхемой(ЭтотОбъект)
		
		И (ЭтоСтарт Или ЭтоОтложенныйСтарт Или ЭтоФоновыйСтарт
			Или ЭтоИзменениеПроцессаГотовогоКОтложенномуСтарту) Тогда
		
		МассивЭтаповДляЗапуска = Новый Массив();
		Для каждого ЭтапБизнесПроцесса Из ТекущийОбъект.Этапы Цикл
			Если ТекущийОбъект.ЗапускЭтапаПроцессаВозможен(ЭтапБизнесПроцесса, Истина) Тогда
				МассивЭтаповДляЗапуска.Добавить(ЭтапБизнесПроцесса);
			КонецЕсли;
		КонецЦикла;
		Если МассивЭтаповДляЗапуска.Количество() = 0 Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Старт процесса прерван. Не найдено ни одного действия, подходящего для старта. Необходимо проверить условия и порядок выполнения действий и повторить попытку.'"),,
				"Объект.Этапы",, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка наличия участников процесса среди исполнителей проектной задачи.
	// Проверка правильности указания трудозатрат участников процесса.
	Если ВестиУчетПоПроектам И ЗначениеЗаполнено(ТекущийОбъект.Проект) Тогда
		РаботаСБизнесПроцессамиВызовСервера.ПроверитьСоответствиеПроцессаПроектнойЗадаче(ТекущийОбъект, Отказ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПодсистемаСвойств

//@skip-warning
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

//@skip-warning
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

//@skip-warning
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
      УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
 
//@skip-warning
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
      УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область Предметы

&НаКлиенте
Процедура ПредметыПредметПриИзменении()
	
	ПредметыПредметПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПредметыПредметПриИзмененииСервер()
	
	Если ВестиУчетПоПроектам
		И Объект.Проект.Пустая() Тогда
		Для Каждого СтрокаПредмета Из Объект.Предметы Цикл
			Если ЗначениеЗаполнено(СтрокаПредмета.Предмет) 
			 И СтрокаПредмета.РольПредмета = Перечисления.РолиПредметов.Основной
			 И СтрокаПредмета.Предмет.Метаданные().Реквизиты.Найти("Проект") <> Неопределено Тогда 
				ПроектПредмета = ОбщегоНазначенияДокументооборот.
					ЗначениеРеквизитаОбъектаВПривилегированномРежиме(СтрокаПредмета.Предмет, "Проект");
				Если ПроектПредмета <> Объект.Проект Тогда 
					Объект.Проект = ПроектПредмета;
					Объект.ПроектнаяЗадача = Неопределено;
					ПолучитьДанныеПроекта();
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОписаниеПредметов()
	
	МультипредметностьКлиент.ОбновитьОписаниеПредметов(Объект);
	
КонецПроцедуры

&НаСервере
Функция МассивПредметовДляВложеннойОбработки()
	
	МассивПредметов = Новый Массив;
	
	Если Не РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ЭтоФормаПроцессаСоСхемой(ЭтотОбъект) Тогда
		Возврат МассивПредметов;
	КонецЕсли;	
		
	
	Для Каждого СтрПредмет Из Объект.Предметы Цикл
		
		Если Не Метаданные.ОпределяемыеТипы.ПредметДействия.Тип.СодержитТип(ТипЗнч(СтрПредмет.Предмет)) Тогда
			Продолжить;
		КонецЕсли;	
	
		Для Каждого КлючИЗначение Из ДанныеПараметровСхемы.НастройкиЭлементов Цикл
			НастройкаЭлемента = КлючИЗначение.Значение;  
			Если ЗначениеЗаполнено(НастройкаЭлемента) 
				И НастройкаЭлемента = СтрПредмет.ИмяПредмета
				И ЗначениеЗаполнено(СтрПредмет.Предмет) Тогда
					МассивПредметов.Добавить(СтрПредмет.Предмет);
			КонецЕсли;	
		КонецЦикла;
	
	КонецЦикла;
	
	Возврат МассивПредметов;
	
КонецФункции	

#КонецОбласти

#Область ДеревоПроцессовИЗадач

// Обновляет и разворачивает дерево процессов и задач.
//
&НаКлиенте
Процедура ОбновитьДеревоПроцессовЗадач() Экспорт
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаЗадачи Тогда
		ЗаполнитьДеревоПроцессовИЗадач();
		РаботаСБизнесПроцессамиКлиент.РазвернутьДеревоПроцессовИЗадач(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет дерево процессов и задач.
//
&НаСервере
Процедура ЗаполнитьДеревоПроцессовИЗадач() Экспорт
	
	РаботаСБизнесПроцессамиВызовСервера.ЗаполнитьПроцессыИЗадачиПоПредмету(ЭтотОбъект, Объект.Ссылка);
	КоличествоАктивныхЗадач = СписокАктивныхЗадач.Количество();
	
КонецПроцедуры

// Находит текущую списка СписокАктивныхЗадач в дереве задач.
//
&НаСервере
Процедура НайтиВДеревеЗадачНаСервере(Задача)
	
	ТекущаяСтрокаВДереве = Задача;
	
	РаботаСБизнесПроцессамиКлиентСервер.УстановитьТекущуюСтроку(ДеревоЗадач.ПолучитьЭлементы(), ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СрокиИсполненияПроцессов

// Заполняет представление сроков в карточке процесса
//
&НаСервере
Процедура ОбновитьСрокиИсполненияНаСервере() Экспорт
	
	РассчитатьОтносительныйСрок = РассчитыватьОтносительныйСрок(ЭтотОбъект);
	РассчитьтатьТочныйСрок = Ложь;
	
	Если Не Объект.Стартован
		И Не Объект.ПометкаУдаления
		И ЗначениеЗаполнено(ДатаОтсчетаДляРасчетаСроков) Тогда
		
		РассчитьтатьТочныйСрок = Истина;
		
	ИначеЕсли Объект.Стартован
		И Не Объект.ПометкаУдаления
		И Объект.Состояние = Перечисления.СостоянияБизнесПроцессов.Активен
		И ЗначениеЗаполнено(РеквизитСИзмененнымСроком) Тогда
		
		РассчитьтатьТочныйСрок = Истина;
	КонецЕсли;
		
	Если РассчитатьОтносительныйСрок Тогда
		
		Смещение = СрокиИсполненияПроцессовКлиентСерверКОРП.СмещенияДатыОтсчетаВКарточке(ЭтотОбъект);
			
		Если РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ЭтоФормаПроцессаСоСхемой(ЭтотОбъект) Тогда
			
			РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ЗаполнитьСрокиЭлементовСхемыВФорме(
				ЭтотОбъект);
			
			ПараметрыДляОпределенияДлительности = СрокиИсполненияПроцессовКОРП.
				ПараметрыДляОпределенияДлительностиКомплексногоПроцессаСоСхемой();
			
			ПараметрыДляОпределенияДлительности.Ссылка = Объект.Ссылка;
			
			ПараметрыДляОпределенияДлительности.ДанныеСхемы =
				СхемыПроцессовКлиентСервер.ДанныеСхемыПроцессаИзФормы(ЭтотОбъект);
			
			ПараметрыДляОпределенияДлительности.СрокиЭлементов =
				РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СрокиЭлементовСхемыВФорме(ЭтотОбъект);
			
			ДлительностьИсполнения = СрокиИсполненияПроцессов.ДлительностьИсполненияПроцесса(
				ПараметрыДляОпределенияДлительности, Смещение);
					
		Иначе
			СрокиИсполненияПроцессовКОРП.ЗаполнитьСрокиИсполненияЭтаповКомплексногоПроцесса(Объект.Этапы);
			ДлительностьИсполнения = СрокиИсполненияПроцессов.ДлительностьИсполненияПроцесса(
				Объект, Смещение);
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДлительностьИсполнения);
		
	КонецЕсли;
		
	Если РассчитьтатьТочныйСрок Тогда
		СрокиИсполненияПроцессовКОРП.РассчитатьСрокиКомплексногоПроцессаВКарточке(ЭтотОбъект);
	КонецЕсли;
	
	Если Не РассчитатьОтносительныйСрок И Не РассчитьтатьТочныйСрок Тогда
		Если РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ЭтоФормаПроцессаСоСхемой(ЭтотОбъект) Тогда
			РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ЗаполнитьСрокиЭлементовСхемыВФорме(ЭтотОбъект);
		Иначе
			СрокиИсполненияПроцессовКОРП.ЗаполнитьСрокиИсполненияЭтаповКомплексногоПроцесса(Объект.Этапы);
		КонецЕсли;
	КонецЕсли;
	
	РеквизитСИзмененнымСроком = "";
	ИдентификаторыИзмененныхДействий.Очистить();
	
	СрокиИсполненияПроцессовКлиентСерверКОРП.
		ЗаполнитьПредставлениеСроковИсполненияВФормеКомплексногоПроцесса(ЭтотОбъект);
	
	ОбновитьПризнакиИстекшихСроков();
	
КонецПроцедуры

// см. ОбновитьСрокиИсполненияНаСервере
&НаКлиенте
Процедура ОбновитьСрокиИсполнения()
	
	ОбновитьСрокиИсполненияНаСервере();
	
КонецПроцедуры

// см. ОбновитьСрокиИсполнения
&НаКлиенте
Процедура ОбновитьСрокиИсполненияОтложенно()
	
	ПодключитьОбработчикОжидания("ОбновитьСрокиИсполнения", 0.2, Истина);
	
КонецПроцедуры

// Обновляет форму процесса после переноса сроков действий
//
&НаКлиенте
Процедура ОбновитьФормуПослеПереносаСроковИсполнения() Экспорт
	
	ОбновитьФормуПослеПереносаСроковИсполненияНаСервере();
	
КонецПроцедуры

// Обновляет форму процесса после переноса сроков действий на сервере.
//
&НаСервере
Процедура ОбновитьФормуПослеПереносаСроковИсполненияНаСервере() Экспорт
	
	Прочитать();
	Если Не РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ЭтоФормаПроцессаСоСхемой(ЭтотОбъект) Тогда
		РаботаСКомплекснымиБизнесПроцессамиСервер.ЗаполнитьВычисляемыеПоляЭтапов(ЭтотОбъект);
	КонецЕсли;
	ОбновитьСрокиИсполненияНаСервере();
	
КонецПроцедуры

// Очищает дату расчета сроков.
//
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - карточка текущего шаблона.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьДатуОтсчетаДляРасчетаСроков(Форма)
	
	Если ЗначениеЗаполнено(Форма.Объект.Шаблон) И Не Форма.Объект.Стартован Тогда
		Форма.ДатаОтсчетаДляРасчетаСроков = Дата(1,1,1);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает необходимость расчета относительного срока.
//
// Параметры:
//  ФормаКлиентскогоПриложения - текущая форма.
//
&НаКлиентеНаСервереБезКонтекста
Функция РассчитыватьОтносительныйСрок(Форма)
	
	Если Не Форма.Объект.Стартован
		И Не Форма.Объект.ПометкаУдаления
		И ЗначениеЗаполнено(Форма.Объект.Шаблон)
		И Не ЗначениеЗаполнено(Форма.Объект.ВедущаяЗадача) Тогда
		
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Устанавливает условное оформление истекших сроков.
//
&НаСервере
Процедура УстановитьУсловноеОформлениеИстекшихСроков()
	
	СрокиИсполненияПроцессов.УстановитьУсловноеОформлениеИстекшегоСрока(
		ЭтотОбъект,
		НСтр("ru = 'Срок исполнения действия истек (Этапы)'"),
		"Объект.Этапы.СрокИсполненияПроцессаИстек",
		"СрокИсполненияЭтапаПредставление");
	
	СрокиИсполненияПроцессов.УстановитьУсловноеОформлениеИстекшегоСрока(
		ЭтотОбъект,
		НСтр("ru = 'Срок исполнения процесса истек'"),
		"СрокИсполненияПроцессаИстек",
		"СрокИсполненияПроцессаПредставление");
	
КонецПроцедуры

// Обновляет признаки истекших сроков в карточке.
//
&НаСервере
Процедура ОбновитьПризнакиИстекшихСроков()
	
	Если РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ЭтоФормаПроцессаСоСхемой(ЭтотОбъект) Тогда
		
		// Для схемы обновляем признак истекшего срока процесса.
		// Остальное выполняется при обновлении описания элементов в схеме.
		
		Если ЗначениеЗаполнено(ДатаОтсчетаДляРасчетаСроков) Тогда
		
			СрокиИсполненияПроцессов.ОбновитьПризнакИстекшегоСрокаПроцесса(
				Объект.СрокИсполненияПроцесса, Объект.ДатаЗавершения, СрокИсполненияПроцессаИстек);
			
		Иначе
			СрокИсполненияПроцессаИстек = Ложь;
		КонецЕсли;
		
	Иначе
		
		Если ЗначениеЗаполнено(ДатаОтсчетаДляРасчетаСроков) Тогда
			
			ТекущаяДатаСеанса = ТекущаяДатаСеанса();
			
			Для Каждого Этап Из Объект.Этапы Цикл
				
				Этап.СрокИсполненияПроцессаИстек = Ложь;
				
				Если Не ЗначениеЗаполнено(Этап.СрокИсполненияПроцесса) Тогда
					Продолжить;
				КонецЕсли;
				
				ДатаЗавершенияЭтапа = ТекущаяДатаСеанса;
				
				Отбор = Новый Структура;
				Отбор.Вставить("Действие", Этап.ЗапущенныйБизнесПроцесс);
				
				НайденныеДатыЗавершения = ДатыЗавершенияЭтапов.НайтиСтроки(Отбор);
				Если НайденныеДатыЗавершения.Количество() <> 0
					И ЗначениеЗаполнено(НайденныеДатыЗавершения[0].ДатаЗавершения) Тогда
					
					ДатаЗавершенияЭтапа = НайденныеДатыЗавершения[0].ДатаЗавершения;
				КонецЕсли;
				
				Если Этап.СрокИсполненияПроцесса < ДатаЗавершенияЭтапа Тогда
					Этап.СрокИсполненияПроцессаИстек = Истина;
				КонецЕсли;
				
			КонецЦикла;
			
			СрокиИсполненияПроцессов.ОбновитьПризнакИстекшегоСрокаПроцесса(
				Объект.СрокИсполненияПроцесса, Объект.ДатаЗавершения, СрокИсполненияПроцессаИстек);
		Иначе
			Для Каждого Этап Из Объект.Этапы Цикл
				Этап.СрокИсполненияПроцессаИстек = Ложь;
			КонецЦикла;
			СрокИсполненияПроцессаИстек = Ложь;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

// Заполняет таблицу дат завершения этапов (ДатыЗавершенияЭтапов).
//
&НаСервере
Процедура ЗаполнитьДатыЗавершенияЭтапов()
	
	Если РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ЭтоФормаПроцессаСоСхемой(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДатыЗавершенияЭтапов.Очистить();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ДействияИДатыЗавершения = 
		СрокиИсполненияПроцессовКОРП.ДатыЗавершенияДействийКомплексногоПроцесса(Объект.Ссылка);
	
	Для Каждого ДействиеИДатаЗавершения Из ДействияИДатыЗавершения Цикл
		СтрокаТаблицы = ДатыЗавершенияЭтапов.Добавить();
		СтрокаТаблицы.Действие = ДействиеИДатаЗавершения.Ключ;
		СтрокаТаблицы.ДатаЗавершения = ДействиеИДатаЗавершения.Значение;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ФоновыйИОтложенныйСтарт

&НаСервере
Процедура ОбновитьФормуПослеИзмененияНастроекОтложенногоСтарта() Экспорт
	
	ОбновитьДоступностьЭлементовФормыПоСостояниюПроцесса();
	
	РеквизитСИзмененнымСроком = "Этапы";
	ИдентификаторыИзмененныхДействий.Добавить(УникальныйИдентификаторПустой());
	ОчиститьДатуОтсчетаДляРасчетаСроков(ЭтотОбъект);
	ОбновитьСрокиИсполненияНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеПроцессаДляФоновогоСтарта(Отказ, ПараметрыЗаписи) Экспорт
	
	ПроверитьЗаполнениеПроцессаПередСтартом(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаОтсчетаДляРасчетаСроков) Тогда
		СрокиИсполненияПроцессовКлиент.ПроверитьКорректностьЗаполненияСроковПередСтартом(
			ЭтотОбъект, Объект, ПараметрыЗаписи, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЗаполнитьПоШаблонуНаСервере(Шаблон) 
	
	БизнесПроцессОбъект = РеквизитФормыВЗначение("Объект");
	
	ИсходныеПредметы = Объект.Предметы.Выгрузить();
	
	Мультипредметность.ЗаполнитьПредметыПроцессаПоШаблону(Шаблон, БизнесПроцессОбъект);
	БизнесПроцессОбъект.ЗаполнитьДействияПоШаблону(Шаблон);
	Мультипредметность.ПередатьПредметыПроцессу(БизнесПроцессОбъект, ИсходныеПредметы, Ложь, Истина);
	БизнесПроцессОбъект.ЗаполнитьПоШаблону(Шаблон);
	
	ЗначениеВРеквизитФормы(БизнесПроцессОбъект, "Объект");
	МультипредметностьКлиентСервер.ЗаполнитьТаблицуПредметовФормы(Объект);
	Мультипредметность.ОбработатьОписаниеПредметовПроцесса(Объект);
	
	РаботаСКомплекснымиБизнесПроцессамиСервер.ЗаполнитьВычисляемыеПоляЭтапов(ЭтотОбъект);
	
	УстановитьДоступность();
	УстановитьДоступностьПоШаблону();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступность()
	
	ПравоНаИзменение = Истина;
	Если НЕ Объект.Ссылка.Пустая() Тогда
		ПраваПоОбъекту = ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(Объект.Ссылка);
		ПравоНаИзменение = ПраваПоОбъекту.Изменение;
	КонецЕсли;
	
	ЭтоОбъектДругойСистемы = МиграцияДанныхИзВнешнихСистемСервер.ЭтоОбъектИзДругойСистемы(Объект.ИсточникДанных);
	
	Если Объект.Завершен
		Или Не ПравоНаИзменение
		Или ЭтоОбъектДругойСистемы Тогда
		
		ЭтотОбъект.ТолькоПросмотр = Истина;
		Элементы.ФормаСтартИЗакрыть.Доступность = Ложь;
		Элементы.ФормаЗаписатьИЗакрыть.Доступность = Ложь;
		Элементы.ФормаОстановить.Доступность = Ложь;
		Элементы.ФормаПродолжитьБизнесПроцесс.Доступность = Ложь;
		Элементы.ФормаПрервать.Доступность = Ложь;
		Элементы.ЭтапыПредшественникиЭтапаСтрокой.Доступность = Ложь;
		Элементы.ВариантМаршрутизации.Доступность = Ложь;
		Элементы.Контролер.ТолькоПросмотр = ТолькоПросмотр;
	КонецЕсли;
	
	Элементы.ГруппаИнфо.Видимость = Объект.Стартован;
	Элементы.ГлавнаяЗадача.Видимость = ЗначениеЗаполнено(Объект.ГлавнаяЗадача);
	Элементы.ФормаУстановитьГлавнуюЗадачу.Видимость = НЕ ЗначениеЗаполнено(Объект.ВедущаяЗадача);
	
	Если Объект.Стартован Тогда
		Элементы.ФормаЗаполнитьПоШаблону.Видимость = Ложь;
		Элементы.ЭтапыКонтекстноеМенюПереместитьВверх.Доступность = Ложь;
		Элементы.ЭтапыКонтекстноеМенюПереместитьВниз.Доступность = Ложь;
		Элементы.ВариантМаршрутизации.Доступность = Ложь;
		
		Если Объект.Состояние = Перечисления.СостоянияБизнесПроцессов.Прерван Тогда
			РаботаСБизнесПроцессамиВызовСервера.ОтобразитьНаФормеПричинуПрерывания(ЭтотОбъект);
		КонецЕсли;
		
		Элементы.ФормаСтартИЗакрыть.Доступность = Ложь;
		
	Иначе
		Элементы.ФормаОстановить.Видимость = Ложь;
		Элементы.ФормаПродолжитьБизнесПроцесс.Видимость = Ложь;
		Элементы.ФормаПрервать.Видимость = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ВедущаяЗадача) Тогда
		Элементы.ФормаОстановить.Видимость = Ложь;
		Элементы.ФормаПродолжитьБизнесПроцесс.Видимость = Ложь;
		Элементы.ФормаПрервать.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ФормаПометитьНаУдаление.Доступность =
		РаботаСБизнесПроцессамиВызовСервера.ДоступностьИнтерактивнойПометкиУдаленияБизнесПроцесса(Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПоШаблону()
	
	ДоступностьПоШаблону = Истина;
	
	Если Не ЗначениеЗаполнено(Объект.Шаблон) И Не ЗначениеЗаполнено(Объект.ВедущаяЗадача) Тогда 
		Возврат;
	КонецЕсли;
	
	ДоступностьПоШаблону = ШаблоныБизнесПроцессов.ДоступностьПоШаблону(Объект);
	
	Если ЗначениеЗаполнено(Объект.Контролер) Тогда 
		Элементы.Контролер.ТолькоПросмотр = Не ДоступностьПоШаблону;
	Иначе
		Элементы.Контролер.ТолькоПросмотр = Ложь;
	КонецЕсли;
	Элементы.Контролер.ТолькоПросмотр = Элементы.Контролер.ТолькоПросмотр ИЛИ ТолькоПросмотр;
	
	Если РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ЭтоФормаПроцессаСоСхемой(ЭтотОбъект) Тогда
//		НастроитьДоступностьРедактированияСхемы(ЭтотОбъект);
	Иначе
		Если Объект.Этапы.Количество() > 0 Тогда
			Элементы.Этапы.ТолькоПросмотр = Не ДоступностьПоШаблону;
			Элементы.ЭтапыДобавить.Доступность = ДоступностьПоШаблону;
			Элементы.ЭтапыКонтекстноеМенюДобавить.Доступность = ДоступностьПоШаблону;
			Элементы.КонтекстноеМенюНастроитьДействие.Доступность = ДоступностьПоШаблону;
			Элементы.ВариантМаршрутизации.ТолькоПросмотр = Не ДоступностьПоШаблону
		Иначе
			Элементы.Этапы.ТолькоПросмотр = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СохранитьКакШаблонСервер()
	
	ПроцессОбъект = РеквизитФормыВЗначение("Объект");
	Объект.Шаблон = ПроцессОбъект.СоздатьШаблонПоПроцессу(Объект.Шаблон);	
	Возврат Объект.Шаблон;
	
КонецФункции

&НаСервере
Процедура УстановитьВажностьВсехЭтапов(ВажностьЭтапов)
	
	Если Объект.Ссылка.Пустая() Тогда
		Если Не Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ЭтоФормаПроцессаСоСхемой(ЭтотОбъект) Тогда
		РаботаСКомплекснымиБизнесПроцессамиСервер.ОбновитьВажностьДляВсехНастроекСхемы(ЭтотОбъект);
	Иначе
		Для Каждого Этап Из Объект.Этапы Цикл
			ШаблонОбъект = Этап.ШаблонБизнесПроцесса.ПолучитьОбъект();
			ШаблонОбъект.Важность = ВажностьЭтапов;
			ШаблонОбъект.Записать();
		КонецЦикла;
		РаботаСКомплекснымиБизнесПроцессамиСервер.ЗаполнитьВычисляемыеПоляЭтапов(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеПроекта()
	
	ЕдиницаТрудозатрат = Константы.ОсновнаяЕдиницаТрудозатрат.Получить();
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда 
		ПроектЗадача = РаботаСПроектамиКлиентСервер.ПредставлениеПроектаЗадачи(Объект.Проект, Объект.ПроектнаяЗадача);	
		Если ЗначениеЗаполнено(Объект.ПроектнаяЗадача) Тогда 
			ЕдиницаТрудозатрат = ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
				Объект.ПроектнаяЗадача, "ТекущийПланЕдиницаТрудозатрат");
		ИначеЕсли ЗначениеЗаполнено(Объект.Проект) Тогда 
			ЕдиницаТрудозатрат = ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
				Объект.Проект, "ЕдиницаТрудозатратЗадач");
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьОписаниеТрудозатрат(ЭтотОбъект);
	
КонецПроцедуры	

&НаСервере
Процедура ОбновитьДоступностьЭлементовФормыПоСостояниюПроцесса(ПрочитатьПараметрыСостояния = Ложь) Экспорт
	
	Если ПрочитатьПараметрыСостояния Тогда
		Прочитать();
		СтартПроцессовСервер.ЗаполнитьНастройкиСтартаВФормеПроцесса(ЭтотОбъект);
	КонецЕсли;
	
	РаботаСБизнесПроцессамиВызовСервера.ОбновитьДоступностьЭлементовФормыПоСостояниюПроцесса(
		ЭтотОбъект,
		Не РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ЭтоФормаПроцессаСоСхемой(ЭтотОбъект));
	
КонецПроцедуры

&НаСервере
Функция ЭлементыДляСохранения()
	
	СохраняемыеЭлементы = Новый Структура("Контролер", Объект.Контролер);
	
	Возврат СохранениеВводимыхЗначений.СформироватьТаблицуСохраняемыхЭлементов(СохраняемыеЭлементы);
	
КонецФункции

&НаСервере
Процедура ПолучитьИнструкции()
	
	РаботаСИнструкциями.ПолучитьИнструкции(ЭтотОбъект, 75, 100);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьОписаниеТрудозатрат(Форма)
	
	Если НЕ Форма.ВестиУчетПлановыхТрудозатратВБизнесПроцессах Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОписания = Новый Структура;
	ПараметрыОписания.Вставить("Контролер", Истина);
	
	РаботаСБизнесПроцессамиКлиентСервер.ЗаполнитьОписаниеТрудозатрат(Форма, ПараметрыОписания);
	
КонецПроцедуры

&НаСервере
Функция ПредставлениеРезультата() Экспорт
	
	ПредставлениеРезультата = НСтр("ru = 'Завершен %1'");
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ПредставлениеРезультата, Формат(Объект.ДатаЗавершения, "ДФ='dd.MM.yyyy HH:mm'"));
	
КонецФункции

#КонецОбласти
