#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	ПолучениеФормыОбработано = 
		РаботаСПроцессамиПоОбработкамОбъектовСобытия.ОбработатьПолучениеФормыПроцесса(
		ВидФормы, Параметры, ВыбраннаяФорма, СтандартнаяОбработка);
	
	Если ПолучениеФормыОбработано Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидФормы = "ФормаСписка" Тогда
		
		СтандартнаяОбработка = Ложь;
		Параметры.Вставить("ТипПроцесса", "КомплексныйПроцесс");
		ВыбраннаяФорма = Метаданные.ОбщиеФормы.СписокПроцессов;
		
	ИначеЕсли ВидФормы = "ФормаВыбора" Тогда
		
		СтандартнаяОбработка = Ложь;
		Параметры.Вставить("Заголовок", НСтр("ru = 'Комплексные процессы'"));
		Параметры.Вставить("ТипПроцесса", Тип("БизнесПроцессСсылка.КомплексныйПроцесс"));
		ВыбраннаяФорма = Метаданные.ОбщиеФормы.ВыборБизнесПроцесса;
		
	ИначеЕсли ВидФормы = "ФормаОбъекта" Тогда
		СтандартнаяОбработка = Ложь;
		Если МК_ПовтИсп.ЭтоМобильныйКлиент() Тогда
			ВыбраннаяФорма = "МК_ФормаБизнесПроцесса";
		Иначе
			ВыбраннаяФорма = "ФормаБизнесПроцесса"
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ЗадачиПроцесса

// Заполняет html обзор задачи данными процесса.
//
// Параметры:
//   HTMLТекст - Строка
//   Процесс - БизнесПроцессСсылка
//   ТочкаМаршрута - ТочкаМаршрутаБизнесПроцессаСсылка
//   ЗадачаПроцесса - ЗадачаСсылка.ЗадачаИсполнителя
//   ВключатьНавигационныеСсылки - Булево
//   КодЯзыка - Строка
//
Процедура ЗаполнитьОбзорЗадачи(HTMLТекст, Процесс, ТочкаМаршрута, ЗадачаПроцесса, ВключатьНавигационныеСсылки, КодЯзыка) Экспорт
	
	// Нет специального заполнения.
	
КонецПроцедуры

Функция ПлановыеТрудозатратыИсполнителяЗадачи(БизнесПроцесс, Задача, ТочкаМаршрута) Экспорт
	
	Трудозатраты = 0;
		
	Возврат Трудозатраты;
	
КонецФункции

// Возвращает возможность выполнения задачи процесса по почте.
// 
// Параметры:
//  РеквизитыЗадачи - Структура
//    * БизнесПроцесс - БизнесПроцессСсылка.КомплексныйПроцесс
//    * ТочкаМаршрута - ТочкаМаршрутаБизнесПроцессаСсылка.КомплексныйПроцесс
//    * Ссылка - ЗадачаИсполнителя - ссылка на задачу процесса.
//
// Возвращаемое значение:
//  Булево
//
Функция ВозможноВыполнениеЗадачиПроцессаПоПочте(РеквизитыЗадачи) Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Возвращает структуру с вариантами ответов для формирования уведомлений
// с возможностью исполнения задач по почте. Варианты ответов определяются в
// зависимости от точки маршрута.
//
// Параметры:
//	ЗадачаСсылка - ЗадачаСсылка.ЗадачаИсполнителя - задача для которой определяются
//				   варианты ответов.
//	БизнесПроцессСсылка - БизнесПроцессСсылка.КомплексныйПроцесс - бизнес процесс по которому
//						  назначена задача.
//	ТочкаМаршрута - ТочкаМаршрутаБизнесПроцессаСсылка - точка маршрута в которой находится
//					БизнесПроцесс
//	КодЯзыкаПолучателя - Строка.
//
// Возвращаемое значение:
//  Структура
//	 * СписокВариантовОтветов - СписокЗначений - список значений типа
//								ПеречисленияСсылка.ВариантыВыполненияПроцессовИЗадач,
//								с заполненным представлением; в нем содержатся варианты
//								ответов.
//	 * ИспользоватьКомментарий - Булево - Принимает значение Истина, если для текущей задачи
//								 ввод комментария обязателен.
//
Функция ВариантыОтветовДляВыполненияЗадачиПоПочте(
	ЗадачаСсылка,
	БизнесПроцессСсылка,
	ТочкаМаршрута,
	КодЯзыкаПолучателя) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("СписокВариантовОтветов", Новый СписокЗначений);
	Результат.Вставить("ИспользоватьКомментарий", Ложь);
	
	ВызватьИсключение 
		НСтр("ru = 'Неожиданная точка маршрута задачи.'", КодЯзыкаПолучателя);
	
	//@skip-warning
	Возврат Результат;
	
КонецФункции

// Формирует комментарий автоматического выполнения задачи.
//
// Параметры:
//  ТочкаМаршрута - ТочкаМаршрута - Точка маршрута.
//  ВариантВыполнения - Булево - Вариант выполнения.
//
// Возвращаемое значение:
//  Строка - Комментарий автоматического выполнения задачи.
//
Функция КомментарийВыполненаАвтоматически(ТочкаМаршрута, ВариантВыполнения) Экспорт
	
	Комментарий = "";
	
	Возврат Комментарий;
	
КонецФункции

Функция ПредставлениеРезультатаЗадачи(ЗадачаОбъект) Экспорт
	
	Представление = "";
	
	Возврат Представление;
	
КонецФункции

// Возвращает признак того что процесс использует условия выполнения задач.
//
// Параметры:
//  ТочкаМаршрута - ТочкаМаршрутаСсылка - Точка маршрута.
//  Параметры - Структура - Параметры.
// 
// Возвращаемое значение:
//  Булево - Использует условия выполнения задач.
//
Функция ИспользуетУсловияЗапретаВыполненияЗадач(ТочкаМаршрута = Неопределено, Параметры = Неопределено) Экспорт
	
	Если Параметры = Неопределено Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	
	ИспользуетУсловияЗапретаВыполненияЗадач = Ложь;
	
	Возврат ИспользуетУсловияЗапретаВыполненияЗадач;
	
КонецФункции

// Обработчик, вызываемый перед выполнением задачи из процедуры
// ВыполнениеЗадачСервер.ВыполнитьЗадачуСПараметрами
//
// Параметры
//   ЗадачаСсылка  - ЗадачаСсылка.ЗадачаИсполнителя
//   БизнесПроцессСсылка - БизнесПроцессСсылка
//   ТочкаМаршрутаСсылка - точка маршрута
//   ПараметрыВыполнения - Структура
//
Процедура ОбработкаПередВыполнениемЗадачи(
	ЗадачаСсылка, БизнесПроцессСсылка, ТочкаМаршрутаБизнесПроцесса, ПараметрыВыполнения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПараметрыВыполнения.Свойство("ИдентификаторБлокировкиПроцесса") Тогда
		ПараметрыВыполнения.Вставить(
			"ИдентификаторБлокировкиПроцесса", Новый УникальныйИдентификатор());
	КонецЕсли;
	
КонецПроцедуры

// Обработчик, вызываемый после выполнением задачи из процедуры
// ВыполнениеЗадачСервер.ВыполнитьЗадачуСПараметрами
//
// Параметры
//   ЗадачаСсылка  - ЗадачаСсылка.ЗадачаИсполнителя
//   БизнесПроцессСсылка - БизнесПроцессСсылка
//   ТочкаМаршрутаСсылка - точка маршрута
//   ПараметрыВыполнения - Структура
//
//@skip-warning
Процедура ОбработкаПослеВыполненияЗадачи(
	ЗадачаСсылка, БизнесПроцессСсылка, ТочкаМаршрутаБизнесПроцесса, ПараметрыВыполнения) Экспорт

КонецПроцедуры

#КонецОбласти

#Область СлужебныеЗадачиТочекДействий

// Проверяет является ли переданная задача процесса служебной.
//
// Параметры:
//  Задача - ЗадачаОбъект.ЗадачаИсполнителя,
//           ЗадачаСсылка.ЗадачаИсполнителя,
//           Структура со свойствами Исполнитель, РольИсполнителя, ТочкаМаршрута, Наименование
//
// Возвращаемое значение:
//  Булево
//
Функция ЭтаСлужебнаяЗадачаПроцесса(ЗадачаПроцесса) Экспорт
	
	Возврат ЗадачаПроцесса.ТочкаМаршрута = ТочкиМаршрута.ВложенныйПроцесс
		Или ЗадачаПроцесса.ТочкаМаршрута = ТочкиМаршрута.ВыполнитьДействияПроцессаПоСхеме;
	
КонецФункции

#КонецОбласти

#Область Предметы

// Возвращает участников для проверки прав на предметы.
//
// Параметры:
//  Процесс - БизнесПроцессОбъект, БизнесПроцессСсылка - процесс
//
// Возвращаемое значение:
//  ТаблицаЗначений
//   * Участник
//   * Изменение
//
Функция УчастникиДляПроверкиПрав(Процесс) Экспорт
	
	ТаблицаУчастников = РаботаСРабочимиГруппами.ПолучитьПустуюТаблицуУчастников();
	
	РаботаСБизнесПроцессами.ДобавитьУчастниковКомплексногоПроцессаВТаблицу(ТаблицаУчастников, Процесс);
	
	Возврат ТаблицаУчастников;
	
КонецФункции

// Возвращает массив доступных типов основных предметов
Функция ТипыОсновныхПредметов() Экспорт
	
	ТипыПредметов = Метаданные.БизнесПроцессы.КомплексныйПроцесс.ТабличныеЧасти.Предметы.Реквизиты.Предмет.Тип.Типы();
	
	Возврат ТипыПредметов;
	
КонецФункции

// Возвращает доступные для процесса роли предметов
Функция ПолучитьДоступныеРолиПредметов() Экспорт
	
	РолиПредметов = Новый Массив;
	
	РолиПредметов.Добавить(Перечисления.РолиПредметов.Основной);
	РолиПредметов.Добавить(Перечисления.РолиПредметов.Вспомогательный);
	РолиПредметов.Добавить(Перечисления.РолиПредметов.Заполняемый);
	
	Возврат РолиПредметов;
	
КонецФункции

#КонецОбласти

#Область УправлениеДоступом

Функция ПолучитьПоляДоступа() Экспорт
	
	Возврат "Ссылка";
	
КонецФункции

// Заполняет переданный дескриптор доступа 
Процедура ЗаполнитьОсновнойДескриптор(ОбъектДоступа, ДескрипторДоступа) Экспорт
	
	ДескрипторДоступа.ОбъектДоступа = ОбъектДоступа.Ссылка;
	
КонецПроцедуры

Функция ЕстьМетодЗаполнитьДескрипторыОбъекта() Экспорт
	
	Возврат Истина;
	
КонецФункции

Процедура ЗаполнитьДескрипторыОбъекта(ОбъектДоступа, ТаблицаДескрипторов, ПротоколРасчетаПрав = Неопределено) Экспорт
	
	// Только основной дескриптор, без рабочей группы.
	ДокументооборотПраваДоступа.ЗаполнитьДескрипторОбъектаОсновной(ОбъектДоступа, ТаблицаДескрипторов);
	
КонецПроцедуры

// Возвращает признак того, что менеджер содержит метод ЗапросДляРасчетаПрав()
// 
Функция ЕстьМетодЗапросДляРасчетаПрав() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает запрос для расчета прав доступа по дескрипторам объекта
// 
// Параметры:
//  
//  Дескрипторы - Массив - массив дескрипторов, чьи права нужно рассчитать
//  ИдОбъекта - Ссылка - идентификатор объекта метаданных, назначенный переданным дескрипторам
//  МенеджерОбъектаДоступа - СправочникМенеджер, ДокументМенеджер - менеджер объекта доступа
// 
// Возвращаемое значение - Запрос - запрос, который выберет права доступа для переданного массива дескрипторов
// 
Функция ЗапросДляРасчетаПрав(Дескрипторы, ИдОбъекта, МенеджерОбъектаДоступа) Экспорт
	
	Возврат БизнесПроцессыИЗадачиСервер.ЗапросДляРасчетаПрав(Дескрипторы, ИдОбъекта, МенеджерОбъектаДоступа);
	
КонецФункции

// Заполняет протокол расчета прав дескрипторов
// 
// Параметры:
//  
//  ПротоколРасчетаПрав - Массив - протокол для заполнения
//  ЗапросПоПравам - Запрос - запрос, который использовался для расчета прав дескрипторов
//  Дескрипторы - Массив - массив дескрипторов, чьи права были рассчитаны
//  
Процедура ЗаполнитьПротоколРасчетаПрав(ПротоколРасчетаПрав, ЗапросПоПравам) Экспорт
	
	БизнесПроцессыИЗадачиСервер.ЗаполнитьПротоколРасчетаПрав(ПротоколРасчетаПрав, ЗапросПоПравам);
	
КонецПроцедуры

// Проверяет наличие метода.
// 
Функция ЕстьМетодПраваСотрудниковПоФайлам() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает права доступа пользователей к переданным файлам.
// 
Функция ПраваСотрудниковПоФайлам(Файлы, СотрудникиОтбор = Неопределено) Экспорт
	
	Возврат БизнесПроцессыИЗадачиСервер.ПраваСотрудниковПоФайлам(Файлы, СотрудникиОтбор);
	
КонецФункции

// Возвращает массив пользователей переданного бизнес-процесса,
// которые должны иметь иметь права на другие бизнес-процессы, 
// для которых данный бизнес-процесс является ведущим
Функция ПользователиВедущегоБизнесПроцесса(ВедущийБизнесПроцесс) Экспорт
	
	МассивПользователей = Новый Массив;
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВедущийБизнесПроцесс, "Автор");
	Если ЗначениеЗаполнено(Реквизиты.Автор) Тогда
		МассивПользователей.Добавить(Реквизиты.Автор);
	КонецЕсли;
				
	Возврат МассивПользователей;
	
КонецФункции

// Возвращает массив пользователей переданного бизнес-процесса,
// которые должны иметь иметь права на другие бизнес-процессы, 
// для которых данный бизнес-процесс является ведущим
Функция УчастникиПроцессаВлияющиеНаДоступКПодчиненнымОбъектам(Процесс) Экспорт
	
	МассивПользователей = Новый Массив;
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Процесс, 
		"Автор, 
		|Контролер,
		|Проект");
		
	Если ЗначениеЗаполнено(Реквизиты.Автор) Тогда
		ДанныеУчастника = Новый Структура(
			"Участник");
		ДанныеУчастника.Участник = Реквизиты.Автор;
		МассивПользователей.Добавить(ДанныеУчастника);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Реквизиты.Контролер) Тогда
		ДанныеУчастника = Новый Структура(
			"Участник");
		ДанныеУчастника.Участник = Реквизиты.Контролер;
		
		МассивПользователей.Добавить(ДанныеУчастника);
	КонецЕсли;		
	
	// Добавление руководителя проекта
	Если ЗначениеЗаполнено(Реквизиты.Проект) Тогда
		
		РуководительПроекта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.Проект, "Руководитель");
		Если ЗначениеЗаполнено(РуководительПроекта) Тогда
			
			ДанныеУчастника = Новый Структура(
				"Участник");
			ДанныеУчастника.Участник = РуководительПроекта;
			
			МассивПользователей.Добавить(ДанныеУчастника);
			
		КонецЕсли;	
			
	КонецЕсли;	
	
	Возврат МассивПользователей;
	
КонецФункции

// Возвращает массив структур, содержащих описания участников.
// Состав структуры:
//   ТабличнаяЧасть - имя ТЧ, в которой хранятся данные участников. Если данные хранятся в шапке, этот ключ отсутствует.
//   ИмяУчастника - имя реквизита шапки или ТЧ, в котором хранится ссылка на участника.
//   ВлияетНаДоступКПодчиненнымОбъектам - признак, указывающий на необходимость пересчета прав 
//   задач и дочерних процессов при изменении данного участника.
//
Функция ЗаполнитьОписанияУчастников() Экспорт
	
	МассивОписанийУчастников = Новый Массив;
	
	// Автор
	МассивОписанийУчастников.Добавить(Новый Структура(
		"ИмяУчастника,
		|ВлияетНаДоступКПодчиненнымОбъектам", 
		"Автор",
		Истина));
	
	// Контролер
	МассивОписанийУчастников.Добавить(Новый Структура(
		"ИмяУчастника,
		|ВлияетНаДоступКПодчиненнымОбъектам",
		"Контролер",
		Истина));
		
	// Проект
	МассивОписанийУчастников.Добавить(Новый Структура(
		"ИмяУчастника, 
		|ВлияетНаДоступКПодчиненнымОбъектам",
		"Проект",
		Ложь));
		
	Возврат МассивОписанийУчастников;
		
КонецФункции

#КонецОбласти

#Область РабочиеГруппы

Функция ЕстьМетодДобавитьУчастниковВТаблицу() Экспорт
	
	Возврат Истина;
	
КонецФункции

Процедура ДобавитьУчастниковВТаблицу(ТаблицаНабора, БизнесПроцесс) Экспорт
	
	РаботаСБизнесПроцессами.ДобавитьУчастниковКомплексногоПроцессаВТаблицу(ТаблицаНабора, БизнесПроцесс);
	
КонецПроцедуры	

#КонецОбласти

#Область СрокиИсполненияПроцессов

// Возвращает даты исполнения участников процесса.
//
// Параметры:
//  Процесс - БизнесПроцессСсылка.КомплексныйПроцесс - ссылка на процесс
//
// Возвращаемое значение:
//  Соответствие
//   * Ключ - Строка, ЗадачаСсылка.ЗадачаИсполнителя - имя реквизита с участником процесса или ссылка на его задачу.
//
//@skip-warning
Функция ДатыИсполненияУчастников(Процесс) Экспорт
	
	// Функция не предусмотрена для данного вида процессов.
	
КонецФункции

#КонецОбласти

#Область ПоддержкаКомплексныхПроцессов

#Область КэшДанныхДействий

// Возвращает выборку данных действий.
//
// Параметры:
//  ТаблицаДействий - ТаблицаЗначений
//   * Действие - ОпределяемыйТип.ШаблонДействияКомплексногоПроцесса
//
// Возвращаемое значение:
//  ВыборкаДанных
//
Функция ВыборкаДанныхДействий(ТаблицаДействий) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаДействий.Действие
		|ПОМЕСТИТЬ ТаблицаДействий
		|ИЗ
		|	&ТаблицаДействий КАК ТаблицаДействий
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КомплексныйПроцесс.Ссылка,
		|	КомплексныйПроцесс.Наименование,
		|	КомплексныйПроцесс.СрокИсполненияПроцесса,
		|	КомплексныйПроцесс.Состояние,
		|	КомплексныйПроцесс.Завершен,
		|	КомплексныйПроцесс.ДатаЗавершения
		|ИЗ
		|	ТаблицаДействий КАК ТаблицаДействий
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.КомплексныйПроцесс КАК КомплексныйПроцесс
		|		ПО ТаблицаДействий.Действие = КомплексныйПроцесс.Ссылка";
		
	Запрос.УстановитьПараметр("ТаблицаДействий", ТаблицаДействий);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Возвращает данные процесса, являющегося действием комплексного процесса.
//
// Параметры:
//  Объект - БизнесПроцессСсылка.КомплексныйПроцесс, ВыборкаДанных
//
// Возвращаемое значение:
//  Структура - см. функцию РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтруктураДанныхДействия
//
Функция ДанныеДействия(Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеПроцесса = РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтруктураДанныхДействия();
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Объект)) Тогда
		РеквизитыОбъекта = 
			ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				Объект, "Наименование, СрокИсполненияПроцесса, Состояние, Завершен, ДатаЗавершения");
	Иначе
		РеквизитыОбъекта = Объект;
	КонецЕсли;
	
	ДанныеПроцесса.Описание = НСтр("ru = 'Комплексный процесс: '") + РеквизитыОбъекта.Наименование;
	
	ДанныеПроцесса.СрокИсполненияПроцесса = РеквизитыОбъекта.СрокИсполненияПроцесса;
	
	ДанныеПроцесса.СостояниеПроцесса = РеквизитыОбъекта.Состояние;
	
	ДанныеПроцесса.ПроцессЗавершен = РеквизитыОбъекта.Завершен;
	
	ДанныеПроцесса.ДатаЗавершения = РеквизитыОбъекта.ДатаЗавершения;
	
	Возврат ДанныеПроцесса;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
//@skip-warning
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	
	
КонецПроцедуры

// Печать карточки шаблона комплексного процесса.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Карточка") Тогда
		
		// Формируем табличный документ и добавляем его в коллекцию печатных форм
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
			"Карточка", "Карточка комплексного процесса", 
			РаботаСКомплекснымиБизнесПроцессамиСервер.ПечатьКарточки(
				МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
		
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область Маршрутизация

#Область СхемыПроцессов

// Создает задачу обработки элемента схемы.
// 
// Параметры:
// 	НаименованиеЗадачи - Строка - наименование задачи.
//  Процесс - БизнесПроцессСсылка.КомплексныйПроцесс - процесс со схемой.
// 
// Возвращаемое значение:
// 	ЗадачаСсылка.ЗадачаИсполнителя
//
Функция СоздатьЗадачуОбработкиЭлементаСхемы(НаименованиеЗадачи, Процесс) Экспорт
	
	ЗадачаЭлементаСхемы = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
		
	ЗадачаЭлементаСхемы.БизнесПроцесс = Процесс;
	ЗадачаЭлементаСхемы.ТочкаМаршрута = ТочкиМаршрута.ВыполнитьДействияПроцессаПоСхеме;
	ЗадачаЭлементаСхемы.Дата = ТекущаяДатаСеанса();
	ЗадачаЭлементаСхемы.Наименование = НаименованиеЗадачи;
	
	РаботаСКомплекснымиБизнесПроцессамиСерверПереопределяемый.
		СоздатьПроцессПоДействиюЗаполнениеВедущейЗадачи(Процесс, ЗадачаЭлементаСхемы);
	
	ЗадачаЭлементаСхемы.Записать();
		
	Возврат ЗадачаЭлементаСхемы.Ссылка;
	
КонецФункции

// Создает задачу маршрутизации процесса по схеме.
// 
// Параметры:
//  Процесс - БизнесПроцессСсылка.КомплексныйПроцесс - процесс со схемой.
// 
// Возвращаемое значение:
// 	ЗадачаСсылка.ЗадачаИсполнителя
//
Функция СоздатьЗадачуМаршрутизацииПроцессаПоСхеме(Процесс) Экспорт
	
	ЗадачаМаршрутизации = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
		
	ЗадачаМаршрутизации.БизнесПроцесс = Процесс;
	ЗадачаМаршрутизации.ТочкаМаршрута = ТочкиМаршрута.ВыполнитьДействияПроцессаПоСхеме;
	ЗадачаМаршрутизации.Дата = ТекущаяДатаСеанса();
	ЗадачаМаршрутизации.Наименование = НСтр("ru = 'Маршрутизация процесса по схеме'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	
	РаботаСКомплекснымиБизнесПроцессамиСерверПереопределяемый.
		СоздатьПроцессПоДействиюЗаполнениеВедущейЗадачи(Процесс, ЗадачаМаршрутизации);
	
	ЗадачаМаршрутизации.Записать();
		
	Возврат ЗадачаМаршрутизации.Ссылка;
	
КонецФункции

// Завершает задачу маршрутизации процесса по схеме.
//
// Параметры:
//  ЗадачаПроцесса - ЗадачаСсылка.ЗадачаИсполнителя
//
Процедура ЗавершитьЗадачуМаршрутизацииПроцессаПоСхеме(ЗадачаПроцесса) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ЗадачаОбъект = ЗадачаПроцесса.ПолучитьОбъект();
	
	РаботаСКомплекснымиБизнесПроцессамиСервер.ОтключитьМаршрутизациюПроцессаПриВыполненииЗадачи(
		ЗадачаОбъект);
	
	ВыполнениеЗадачСервер.ВыполнитьЗадачуСПараметрамиНемедленно(ЗадачаОбъект,,,Истина);
	
КонецПроцедуры

// Возвращает все текущие задачи обработки элемента схемы.
// 
// Текущими являются те задачи, ссылки которых сохраняются при процессе.
// При вторном запуске действия, по схеме, существующие ссылки на задачи исключаются из процесса. 
// 
// Параметры:
// 	Процесс - БизнесПроцессСсылка.КомплексныйПроцесс
// 	ИмяЭлемента - Строка - имя элемента схемы процесса.
// 	
// Возвращаемое значение:
// 	ТаблицаЗначений
//   * ЗадачаПроцесса - ЗадачаСсылка.ЗадачаИсполнителя
//   * ЕстьДочерниеПроцессы - Булево - признак наличия дочерних процессов у задачи обработки. 
//
Функция ЗадачиОбработкиЭлементаСхемы(Процесс, ИмяЭлемента) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗадачиЭлементовСхемы.ЗадачаПроцесса,
		|	ИСТИНА В
		|		(ВЫБРАТЬ ПЕРВЫЕ 1
		|			ИСТИНА
		|		ИЗ
		|			РегистрСведений.ДочерниеБизнесПроцессы КАК ДочерниеБизнесПроцессы
		|		ГДЕ
		|			ДочерниеБизнесПроцессы.РодительскийПроцесс = ЗадачиЭлементовСхемы.Ссылка
		|			И ДочерниеБизнесПроцессы.СвязующаяЗадача = ЗадачиЭлементовСхемы.ЗадачаПроцесса) КАК ЕстьДочерниеПроцессы
		|ИЗ
		|	БизнесПроцесс.КомплексныйПроцесс.ЗадачиЭлементовСхемы КАК ЗадачиЭлементовСхемы
		|ГДЕ
		|	ЗадачиЭлементовСхемы.Ссылка = &Процесс
		|	И ЗадачиЭлементовСхемы.ИмяЭлемента = &ИмяЭлемента";
	Запрос.УстановитьПараметр("Процесс", Процесс);
	Запрос.УстановитьПараметр("ИмяЭлемента", ИмяЭлемента);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

#КонецОбласти

Функция ТипШаблона() Экспорт
	
	Возврат "Справочник.ШаблоныКомплексныхБизнесПроцессов";
	
КонецФункции

// Показывает, может ли процесс запускаться через привычные интерфейсы
Функция МожетЗапускатьсяИнтерактивно() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Проверяет, что процесс завершился удачно
// Параметры:
//	Ссылка - ссылка на комплексный процесс
Функция ПроцессЗавершилсяУдачно(Ссылка) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Завершен");
	
КонецФункции

// Возвращает признак наличия метода РезультатВыполненияПроцесса
Функция ЕстьМетодРезультатВыполненияПроцесса() Экспорт
	Возврат Истина;
КонецФункции

// Возвращает результат выполнения - значение перечисления ВариантыВыполненияПроцессовИЗадач
Функция РезультатВыполненияПроцесса(Ссылка) Экспорт
	
	ЗавершилсяУдачно = ПроцессЗавершилсяУдачно(Ссылка);
	
	Если ЗавершилсяУдачно Тогда
		Возврат Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно;
	Иначе
		Возврат Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно;
	КонецЕсли;
	
КонецФункции

// Проверяет, подходит ли объект к шаблону бизнес-процесса
Функция ШаблонПодходитДляАвтозапускаБизнесПроцессаПоОбъекту(ШаблонСсылка, ПредметСсылка, Подписчик, ВидСобытия, Условие) Экспорт
	
	Возврат Истина;
	
КонецФункции

// Заполняет html обзор данными процесса.
//
// Параметры:
//   HTMLТекст - Строка
//   Шаблон - БизнесПроцессСсылка.КомплексныйПроцесс - ссылка на процесс
//
Процедура ЗаполнитьОбзорПроцесса(HTMLТекст, Процесс) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Процесс,
		"СрокИсполненияПроцесса,
		|Схема,
		|Контролер,
		|Этапы,
		|ВариантМаршрутизации,
		|Стартован,
		|ВедущаяЗадача,
		|Шаблон,
		|ДатаЗавершения");
		
	СрокИсполненияПроцесса = РеквизитыПроцесса.СрокИсполненияПроцесса;
	Схема = РеквизитыПроцесса.Схема;
	Контролер = РеквизитыПроцесса.Контролер;
	ДатаЗавершения = РеквизитыПроцесса.ДатаЗавершения;
	
	ВариантМаршрутизации = РеквизитыПроцесса.ВариантМаршрутизации;
	Стартован = РеквизитыПроцесса.Стартован;
	ВедущаяЗадача = РеквизитыПроцесса.ВедущаяЗадача;
	Шаблон = РеквизитыПроцесса.Шаблон;
	
	ИспользуетсяСхема = ЗначениеЗаполнено(Схема);
	
	Если ИспользуетсяСхема
		И ТипЗнч(Схема) = Тип("СправочникСсылка.УдалитьСхемыКомплексныхПроцессов") Тогда
			
		HTMLТекст = HTMLТекст + "<p>";
		
		ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст,
			НСтр("ru = 'Отображение действий не доступно, т.к. не обновлен формат схемы маршрута.'"));
		Возврат;
	КонецЕсли;
		
	ЦветЗакрытыеНеактуальныеЗаписи = ОбзорПроцессовВызовСервера.ЦветЗакрытыеНеактуальныеЗаписи();
	
	ЦветПросроченныеДанные = ОбзорПроцессовВызовСервера.ЦветПросроченныеДанные();
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	Если ИспользоватьДатуИВремяВСрокахЗадач Тогда
		ФорматСрока = "ДФ='dd.MM.yyyy HH:mm'";
	Иначе
		ФорматСрока = "ДФ='dd.MM.yyyy'";
	КонецЕсли;
	
	// Определим вариант отображения сроков
	Если Не ЗначениеЗаполнено(ВедущаяЗадача) И Не ЗначениеЗаполнено(Шаблон)
		Или РеквизитыПроцесса.Стартован Тогда
		
		ВариантОтображенияСроков = Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
	Иначе
		ВариантОтображенияСроков = Перечисления.ВариантыУстановкиСрокаИсполнения.ОтносительныйСрок;
	КонецЕсли;
	
	Если ТипЗнч(Схема) = Тип("СправочникСсылка.УдалитьСхемыКомплексныхПроцессов") Тогда
		HTMLТекст = HTMLТекст + "<p>";
		
		ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст,
			НСтр("ru = 'Отображение действий не доступно, т.к. не обновлен формат схемы маршрута.'"));
		Возврат;
	КонецЕсли;
	
	ДатыЗавершения = СрокиИсполненияПроцессовКОРП.ДатыЗавершенияДействийКомплексногоПроцесса(Процесс);
	
	Подпроцессы = Новый ТаблицаЗначений();
	Подпроцессы.Колонки.Добавить("Настройка", Неопределено);
	Подпроцессы.Колонки.Добавить("Процесс", Неопределено);
	Подпроцессы.Колонки.Добавить("СрокИсполненияПроцесса", Новый ОписаниеТипов("Дата"));
	Подпроцессы.Колонки.Добавить("СрокИсполненияПроцессаДни", Новый ОписаниеТипов("Число"));
	Подпроцессы.Колонки.Добавить("СрокИсполненияПроцессаЧасы", Новый ОписаниеТипов("Число"));
	Подпроцессы.Колонки.Добавить("СрокИсполненияПроцессаМинуты", Новый ОписаниеТипов("Число"));
	Подпроцессы.Колонки.Добавить("ПорядокСортировки", Новый ОписаниеТипов("Число"));
	Подпроцессы.Колонки.Добавить("Текущий", Новый ОписаниеТипов("Булево"));	

	ДлительностьПроцесса = Неопределено;
	
	Если ИспользуетсяСхема Тогда
		
		ПроцессыМассив = Новый Массив;
			
		ДанныеСхемы = Справочники.СхемыПроцессов.ДанныеСхемыПроцесса(Схема);
		
		ПараметрыСхемы = Справочники.ПараметрыСхемДляКомплексныхПроцессов.ПараметрыПоСхеме(Схема);
		Если Не ЗначениеЗаполнено(ПараметрыСхемы) Тогда
			HTMLТекст = HTMLТекст + "<p>";
		
			ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст,
				НСтр("ru = 'Процесс исполняет обработку объекта.
				|Для просмотра подробностей перейдите к обработке объекта из карточки процесса.'"));
			Возврат;
		КонецЕсли;
		
		ДанныеПараметров =
			Справочники.ПараметрыСхемДляКомплексныхПроцессов.ДанныеПараметровСхемы(
			ПараметрыСхемы);
		
		ПроцессыЭлементов =
			РаботаСКомплекснымиБизнесПроцессамиСервер.ПроцессыЭлементовСхемыПоКомплексномуПроцессу(
			Процесс);
		
		ТипыНастроекДействий = Метаданные.ОпределяемыеТипы.ШаблонДействияКомплексногоПроцесса.Тип;
		
		ТипыНастроек = ТипыНастроекДействий.Типы();
		ТипыНастроек.Добавить(Тип("СправочникСсылка.ИменаПредметов"));
		ТипыНастроек = Новый ОписаниеТипов(ТипыНастроек);
		
		ДействияИВложенныеПроцессы = Новый Массив;		
		Для Каждого ИмяЭлементаИНастройка Из ДанныеПараметров.НастройкиЭлементов Цикл
			ИмяЭлемента = ИмяЭлементаИНастройка.Ключ;
			НастройкаЭлемента = ИмяЭлементаИНастройка.Значение;
			
			Если Не ТипыНастроек.СодержитТип(ТипЗнч(НастройкаЭлемента))
				Или Не ЗначениеЗаполнено(НастройкаЭлемента) Тогда
				
				Продолжить;
			КонецЕсли;
					 
			ДействияИВложенныеПроцессы.Добавить(НастройкаЭлемента);
			
			ПроцессЭлемента = ПроцессыЭлементов[ИмяЭлемента];
			Если ЗначениеЗаполнено(ПроцессЭлемента) Тогда
				ДействияИВложенныеПроцессы.Добавить(ПроцессЭлемента);
				ПроцессыМассив.Добавить(ПроцессЭлемента);
			КонецЕсли;
		КонецЦикла;
		КэшДанныхДействий =
			РаботаСКомплекснымиБизнесПроцессамиСервер.КэшДанныхДействий(ДействияИВложенныеПроцессы);
		
		ТекущиеЭлементы = 
			РаботаСКомплекснымиБизнесПроцессамиСервер.ТекущиеЭлементыСхемыВПроцессе(Процесс);
		
		СрокиЭлементов =
			РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтруктураСроковЭлементовСхемы();
		РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ЗаполнитьСрокиЭлементовСхемы(
			СрокиЭлементов,
			ДанныеПараметров.НастройкиЭлементов,
			ПроцессыЭлементов,
			КэшДанныхДействий,
			РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтруктураПроцессовЭлементовДляПрерывания(),
			СрокиЭлементов);
			
		 Для Каждого ИмяЭлементаИНастройка Из ДанныеПараметров.НастройкиЭлементов Цикл
		 	
		 	ИмяЭлемента = ИмяЭлементаИНастройка.Ключ;
			НастройкаЭлемента = ИмяЭлементаИНастройка.Значение;
			
			Если Не ТипыНастроек.СодержитТип(ТипЗнч(НастройкаЭлемента))
				Или Не ЗначениеЗаполнено(НастройкаЭлемента) Тогда
				
				Продолжить;
			КонецЕсли;
			
			СтрокаТаблицы = Подпроцессы.Добавить();
			СтрокаТаблицы.Настройка = НастройкаЭлемента;
			СтрокаТаблицы.Процесс = ПроцессыЭлементов[ИмяЭлемента];
			
			СтрокаТаблицы.Текущий = 
				РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.ЭлементСхемыТекущий(
				ТекущиеЭлементы, ИмяЭлемента);
			
			СтрокаТаблицы.ПорядокСортировки = 
				ДанныеПараметров.ПорядокСортировкиНастроекЭлементов[ИмяЭлемента];
			
			Если ТипыНастроекДействий.СодержитТип(ТипЗнч(НастройкаЭлемента)) Тогда
			
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СрокиЭлементов[ИмяЭлемента],
					"СрокИсполненияПроцесса,
					|СрокИсполненияПроцессаДни,
					|СрокИсполненияПроцессаЧасы,
					|СрокИсполненияПроцессаМинуты");
				
			КонецЕсли;
			
		 КонецЦикла;
		
		Если ВариантОтображенияСроков =
			Перечисления.ВариантыУстановкиСрокаИсполнения.ОтносительныйСрок Тогда
			
			Смещение = СрокиИсполненияПроцессовКОРП.СмещенияДатыОтсчета(Процесс);
			
			ПараметрыДляОпределенияДлительности = СрокиИсполненияПроцессовКОРП.
				ПараметрыДляОпределенияДлительностиКомплексногоПроцессаСоСхемой();
		
			ПараметрыДляОпределенияДлительности.Ссылка = Процесс;
			ПараметрыДляОпределенияДлительности.ДанныеСхемы = ДанныеСхемы;
			ПараметрыДляОпределенияДлительности.СрокиЭлементов = СрокиЭлементов;
			
			ДлительностьПроцесса = СрокиИсполненияПроцессов.ДлительностьИсполненияПроцесса(
				ПараметрыДляОпределенияДлительности, Смещение);
		КонецЕсли;
		
	Иначе
		
		ЭтапыПроцесса = РеквизитыПроцесса.Этапы.Выгрузить();
		
		ЭтапыПроцесса.Колонки.Добавить("СрокИсполненияПроцесса");
		ЭтапыПроцесса.Колонки.Добавить("СрокИсполненияПроцессаДни");
		ЭтапыПроцесса.Колонки.Добавить("СрокИсполненияПроцессаЧасы");
		ЭтапыПроцесса.Колонки.Добавить("СрокИсполненияПроцессаМинуты");
		
		СрокиИсполненияПроцессовКОРП.ЗаполнитьСрокиИсполненияЭтаповКомплексногоПроцесса(
			ЭтапыПроцесса);
		
		Для Каждого СтрокаЭтапа Из ЭтапыПроцесса Цикл
			СтрокаТаблицы = Подпроцессы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаЭтапа);
			СтрокаТаблицы.Настройка = СтрокаЭтапа.ШаблонБизнесПроцесса;
			СтрокаТаблицы.Процесс = СтрокаЭтапа.ЗапущенныйБизнесПроцесс;
			
			СтрокаТаблицы.Текущий = Не СтрокаЭтапа.ЗадачаВыполнена
				И ЗначениеЗаполнено(СтрокаЭтапа.ЗапущенныйБизнесПроцесс);
		КонецЦикла;
		
		ПроцессыМассив = ЭтапыПроцесса.ВыгрузитьКолонку("ЗапущенныйБизнесПроцесс");
		
		Если ВариантОтображенияСроков =
			Перечисления.ВариантыУстановкиСрокаИсполнения.ОтносительныйСрок Тогда
			
			ДлительностьПроцесса = СрокиИсполненияПроцессов.ДлительностьИсполненияПроцесса(Процесс);
		КонецЕсли;
		
	КонецЕсли;
	
	Подпроцессы.Сортировать("ПорядокСортировки Возр");
	
	// Формирование строк таблицы
	Если Подпроцессы.Количество() > 0 Тогда
		
		РезультатСоответствие 
			= ОбзорПроцессовВызовСервера.РезультатыВыполненияПоОбъектам(ПроцессыМассив, "Процесс");
		
		HTMLТекст = HTMLТекст + "<p>";
		
		HTMLТекст = HTMLТекст + "<table class=""frame"">";
		
		//Формирование заголовка таблицы
		HTMLТекст = HTMLТекст + "<tr>";
		
		HTMLТекст = HTMLТекст + "<td align=""center"" class=""frame"">";
		ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = '№'"));
		HTMLТекст = HTMLТекст + "</td>";
		
		Если РезультатСоответствие.Количество() <> 0 Тогда
			// статус исполнения - в шапке пусто
			HTMLТекст = HTMLТекст + "<td align=""center"" class=""frame"">";
			ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, "", "");
			HTMLТекст = HTMLТекст + "</td>";
		КонецЕсли;
		
		HTMLТекст = HTMLТекст + "<td align=""center"" class=""frame"">";
		ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = 'Действие'"));
		HTMLТекст = HTMLТекст + "</td>";
		
		HTMLТекст = HTMLТекст + "<td align=""center"" class=""frame"" width=""100"">";
		ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = 'Срок'"));
		HTMLТекст = HTMLТекст + "</td>";
		
		HTMLТекст = HTMLТекст + "</tr>";
		
		НомерШага = 0;
		
		//Заполнение таблицы действиями
		Для Каждого СтрокаТаблицы Из Подпроцессы Цикл
			
			НомерШага = НомерШага + 1;
			
			Если ЗначениеЗаполнено(СтрокаТаблицы.Процесс) Тогда
				Подпроцесс =  СтрокаТаблицы.Процесс;
			Иначе
				Если ТипЗнч(СтрокаТаблицы.Настройка) = Тип("СправочникСсылка.ИменаПредметов") Тогда
					
					ПредметыПроцесса = Мультипредметность.ПолучитьПредметыПроцесса(Процесс);
					СтрокаПредмета = ПредметыПроцесса.Найти(СтрокаТаблицы.Настройка, "ИмяПредмета");
					
					Если ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда
						ОбработкаПредмета = Справочники.ОбработкиОбъектов.ОбработкаОбъекта(СтрокаПредмета.Предмет);
						Если ЗначениеЗаполнено(ОбработкаПредмета) Тогда
							Подпроцесс = ОбработкаПредмета;
						КонецЕсли;
					КонецЕсли;
					
					Если Не ЗначениеЗаполнено(Подпроцесс) Тогда
						Подпроцесс = СтрШаблон(НСтр("ru = 'Обработка ""%1""'"), СтрокаТаблицы.Настройка);
					КонецЕсли;
				Иначе
					Подпроцесс = СтрокаТаблицы.Настройка;
				КонецЕсли;
			КонецЕсли;
			
			СнятьОтметкуТекущего = Не СтрокаТаблицы.Текущий;
						
			Если Не ЗначениеЗаполнено(Подпроцесс) Тогда
				Продолжить;
			КонецЕсли;
			
			HTMLТекст = HTMLТекст + "<tr>";
			
			HTMLТекст = HTMLТекст + "<td align=""center"" class=""frame"">";
			ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, НомерШага, "");
			HTMLТекст = HTMLТекст + "</td>";
			
			// статус исполнения
			Если РезультатСоответствие.Количество() <> 0 Тогда
				
				HTMLТекст = HTMLТекст + "<td align=""center"" class=""frame"">";
				РезультатВыполненияЗадачи = РезультатСоответствие.Получить(Подпроцесс);
				Если РезультатВыполненияЗадачи <> Неопределено Тогда
					
					Картинка = ОбзорПроцессовВызовСервера.ПолучитьКартинкуПоСтатусуВыполнения(
						РезультатВыполненияЗадачи);
					
					ОбзорОбъектовКлиентСервер.ДобавитьКартинку(HTMLТекст, Картинка);
					
				Иначе
					ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, "", "");
				КонецЕсли;	
				HTMLТекст = HTMLТекст + "</td>";
				
			КонецЕсли;	
			
			HTMLТекст = HTMLТекст + "<td class=""frame"">";
			ЦветТекста = "";
			Если СнятьОтметкуТекущего Тогда
				HTMLТекст = HTMLТекст + "<FONT color=""" + ЦветЗакрытыеНеактуальныеЗаписи + """>";
				ЦветТекста = ЦветЗакрытыеНеактуальныеЗаписи;
			КонецЕсли;
			ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, Подпроцесс, ЦветТекста);
			Если СнятьОтметкуТекущего Тогда
				HTMLТекст = HTMLТекст + "</FONT>";
			КонецЕсли;
			HTMLТекст = HTMLТекст + "</td>";
			
			// Срок исполнения действия
			HTMLТекст = HTMLТекст + "<td align=""center"" class=""frame"" width=""100"">";
			
			ПредставлениеСрока = ОбзорПроцессовВызовСервера.ПредставлениеСрокаИсполнения(
				СтрокаТаблицы.СрокИсполненияПроцесса, СтрокаТаблицы.СрокИсполненияПроцессаДни, 
				СтрокаТаблицы.СрокИсполненияПроцессаЧасы, СтрокаТаблицы.СрокИсполненияПроцессаМинуты, 
				ИспользоватьДатуИВремяВСрокахЗадач, ВариантОтображенияСроков);
			
			ДатаЗавершенияДействия = ДатыЗавершения.Получить(Подпроцесс);
			
			Если Не ЗначениеЗаполнено(ДатаЗавершенияДействия) Тогда
				ДатаЗавершенияДействия = ТекущаяДатаСеанса;
			КонецЕсли;
			
			ДатаЗавершенияДействия = ДатаЗавершенияДействия - Секунда(ДатаЗавершенияДействия);
			
			ЦветПредставленияСрока = "";
			Если СтрокаТаблицы.СрокИсполненияПроцесса < ДатаЗавершенияДействия Тогда
				ЦветПредставленияСрока = ЦветПросроченныеДанные;
			КонецЕсли;
			
			ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, ПредставлениеСрока, ЦветПредставленияСрока);
			
			HTMLТекст = HTMLТекст + "</td>";
			
			HTMLТекст = HTMLТекст + "</tr>";
			
		КонецЦикла;
		
		HTMLТекст = HTMLТекст + "</table>";
		
		// Формирование подписей под таблицей
		HTMLТекст = HTMLТекст + "<table cellpadding=""0"">";
		HTMLТекст = HTMLТекст + "<tr>";
		
		HTMLТекст = HTMLТекст + "<td>";
		Если ЗначениеЗаполнено(Схема) Тогда
			HTMLТекст = HTMLТекст + СтрШаблон(
				"<A href=v8doc:%1>%2</A>",
				ПолучитьНавигационнуюСсылку(Схема),
				НСтр("ru = 'Схема'"));
		ИначеЕсли ЗначениеЗаполнено(ВариантМаршрутизации) Тогда
			ПредставлениеРеквизитаНаправлять = НСтр("ru = 'Порядок: %1'");
			ПредставлениеРеквизитаНаправлять = 
				СтрШаблон(ПредставлениеРеквизитаНаправлять, Строка(ВариантМаршрутизации));
			ОбзорОбъектовКлиентСервер.ДобавитьЗначение(
				HTMLТекст, ПредставлениеРеквизитаНаправлять, ЦветЗакрытыеНеактуальныеЗаписи);
		КонецЕсли;
		
		HTMLТекст = HTMLТекст + "</td>";
		
		HTMLТекст = HTMLТекст + "<td align=""right"">";
		HTMLТекст = HTMLТекст + СтрШаблон(
			"<A href=v8doc:%1>%2</A>",
			"Подзадачи_" + Процесс.УникальныйИдентификатор() + "_КомплексныйПроцесс",
			НСтр("ru = 'Все задачи'"));
		HTMLТекст = HTMLТекст + "</td>";
		
		HTMLТекст = HTMLТекст + "</tr>";
		HTMLТекст = HTMLТекст + "</table>";
		
	КонецЕсли;
	
	// Контролер
	Если Не Стартован И ЗначениеЗаполнено(Контролер) Тогда
		HTMLТекст = HTMLТекст + "<p>";
		ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = 'Контролер: '"));
		ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, Контролер, "");
	КонецЕсли;
	
	// Общий срок процесса
	ПредставлениеСрока = "";
	Если ДлительностьПроцесса <> Неопределено
		И (ЗначениеЗаполнено(ДлительностьПроцесса.СрокИсполненияПроцессаДни)
			Или ЗначениеЗаполнено(ДлительностьПроцесса.СрокИсполненияПроцессаЧасы)
			Или ЗначениеЗаполнено(ДлительностьПроцесса.СрокИсполненияПроцессаМинуты)) Тогда
			
		ПредставлениеСрока = СрокиИсполненияПроцессовКлиентСервер.ПредставлениеДлительности(
			ДлительностьПроцесса.СрокИсполненияПроцессаДни,
			ДлительностьПроцесса.СрокИсполненияПроцессаЧасы,
			ДлительностьПроцесса.СрокИсполненияПроцессаМинуты);
		
	ИначеЕсли ЗначениеЗаполнено(СрокИсполненияПроцесса) Тогда
		ПредставлениеСрока = Формат(СрокИсполненияПроцесса, ФорматСрока);
	КонецЕсли;

	Если ЗначениеЗаполнено(ПредставлениеСрока) Тогда
		HTMLТекст = HTMLТекст + "<p>";
		
		Если Не ЗначениеЗаполнено(ДатаЗавершения) Тогда
			ДатаЗавершения = ТекущаяДатаСеанса;
		КонецЕсли;
		
		ДатаЗавершения = ДатаЗавершения - Секунда(ДатаЗавершения);
		
		ЦветПредставленияСрока = "";
		Если СрокИсполненияПроцесса < ДатаЗавершения Тогда
			ЦветПредставленияСрока = ЦветПросроченныеДанные;
		КонецЕсли;
		
		ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = 'Срок процесса:'"));
		ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, ПредставлениеСрока, ЦветПредставленияСрока);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает текстовое описание назначения процесса
Функция ПолучитьОписаниеПроцесса() Экспорт
	
	Возврат НСтр("ru = 'Предназначен для автоматизации составных процессов. Состоит из произвольного количества запланированных действий (типовых процессов), которые выполняются по заранее настроенному порядку и при определенных условиях.'");
	
КонецФункции

// Возвращает текущих участников процесса в виде структуры
//
// Параметры:
//   Процесс
//      БизнесПроцессОбъект
//      БизнесПроцессСсылка
//
// Возвращаемое значение:
//   Структура
//
Функция ТекущиеУчастникиПроцесса(Процесс) Экспорт
	
	РеквизитыПроцессаСтрокой = 
		"Автор,
		|Контролер,
		|СрокИсполненияПроцесса";
	
	Участники = Новый Структура(РеквизитыПроцессаСтрокой);
		
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Процесс)) Тогда
		РеквизитыПроцессаПоСсылке = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Процесс, РеквизитыПроцессаСтрокой);
		ЗаполнитьЗначенияСвойств(Участники, РеквизитыПроцессаПоСсылке);
	Иначе
		ЗаполнитьЗначенияСвойств(Участники, Процесс);
	КонецЕсли;
		
	Возврат Участники;
	
КонецФункции

// Возвращает массив всех участников процесса 
Функция ВсеУчастникиПроцесса(ПроцессСсылка) Экспорт
	
	ВсеУчастники = Новый Массив;
	
	КлючевыеУчастники = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПроцессСсылка, 
		"Автор, Контролер");
	
	// Автор
	ДанныеУчастника = Новый Структура;
	ДанныеУчастника.Вставить("Участник", КлючевыеУчастники.Автор);
	ВсеУчастники.Добавить(ДанныеУчастника);

	// Контролер
	Если ЗначениеЗаполнено(КлючевыеУчастники.Контролер) Тогда
		ДанныеУчастника = Новый Структура;
		ДанныеУчастника.Вставить("Участник", КлючевыеУчастники.Контролер);
		ВсеУчастники.Добавить(ДанныеУчастника);
	КонецЕсли;	
	
	Возврат ВсеУчастники;
	
КонецФункции

// ВерсионированиеОбъектов
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры
// Конец ВерсионированиеОбъектов

// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения. Для изменения.
//       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
КонецПроцедуры

// Возвращает признак наличия метода ДополнительныеДанныеПоЗадаче
Функция ЕстьМетодДополнительныеДанныеПоЗадаче() Экспорт
	Возврат Ложь;
КонецФункции

// Возвращает признак наличия метода РезультатВыполненияЗадачи
//
// Возвращаемое значение:
//  Булево
//
Функция ЕстьМетодРезультатВыполненияЗадачи() Экспорт
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#КонецЕсли