#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ЗаполнениеПроцесса

// Возвращает пустую структуру данных для заполнения.
//
// Возвращаемое значение:
//  Структура:
//   * Важность - ПеречислениеСсылка.ВариантыВажностиОбъектов
//   * Наименование - Строка
//   * Описание - Строка
//   * Схема - СправочникСсылка.СхемыПроцессов
//   * Автор - СправочникСсылка.Сотрудники
//   * Предметы - СправочникСсылка.ТемыОбсуждений,
//                СправочникСсылка.Контрагенты,
//                СправочникСсылка.Проекты,
//                СправочникСсылка.ПротоколыМероприятий,
//                ДокументСсылка.ВходящееПисьмо,
//                ДокументСсылка.ИсходящееПисьмо,
//                СправочникСсылка.Файлы,
//                ДокументСсылка.Бронь,
//                СправочникСсылка.ДокументыПредприятия,
//                СправочникСсылка.СообщенияОбсуждений,
//                СправочникСсылка.Мероприятия,
//                СправочникСсылка.ПроектныеЗадачи,
//                Массив из вышеперечисленных ссылок
//   * ВедущаяЗадача - ЗадачаСсылка.ЗадачаИсполнителя 
//
Функция СтруктураДанныхДляЗаполнения() Экспорт

	СтруктураДанных = Новый Структура;

	СтруктураДанных.Вставить("Важность", Перечисления.ВариантыВажностиОбъектов.ПустаяСсылка());
	СтруктураДанных.Вставить("Наименование", "");
	СтруктураДанных.Вставить("Описание", "");

	СтруктураДанных.Вставить("Схема", Справочники.СхемыПроцессов);
	СтруктураДанных.Вставить("Автор", Справочники.Сотрудники.ПустаяСсылка());
	
	СтруктураДанных.Вставить("Предметы", Неопределено);
	
	СтруктураДанных.Вставить("ВедущаяЗадача", Задачи.ЗадачаИсполнителя.ПустаяСсылка());
	
	Возврат СтруктураДанных;

КонецФункции

// Заполняет бизнес-процесс на основании шаблона бизнес-процесса.
//
// Параметры
//  ШаблонБизнесПроцесса  - шаблон бизнес-процесса
//
Процедура ЗаполнитьПоШаблону(ШаблонБизнесПроцесса, ЗаполнятьЭтапы = Ложь) Экспорт
	
	Если ЭтоНовый() Тогда 
		Дата = ТекущаяДатаСеанса();
		Если НЕ ЗначениеЗаполнено(Автор) Тогда
			Автор = Сотрудники.ОсновнойСотрудник();
		КонецЕсли;
	КонецЕсли;
	
	ОпределитьСсылкуДляНовогоПроцесса();
	
	ИспользоватьСхемуПроцесса = ЗначениеЗаполнено(ШаблонБизнесПроцесса.Схема);
	
	// заполнение контролера
	Если ТипЗнч(ШаблонБизнесПроцесса.Контролер) = Тип("СправочникСсылка.АвтоподстановкиДляПроцессов")
		И ЗначениеЗаполнено(ШаблонБизнесПроцесса.Контролер) Тогда
		
		АвтоподстановкаКонтролер = ШаблоныБизнесПроцессов.ПолучитьЗначениеАвтоподстановки(
			ШаблонБизнесПроцесса.Контролер, ЭтотОбъект);
		
		Если ТипЗнч(АвтоподстановкаКонтролер) = Тип("СправочникСсылка.Пользователи")
			Или ТипЗнч(АвтоподстановкаКонтролер) = Тип("СправочникСсылка.ПолныеРоли")
			Или ТипЗнч(АвтоподстановкаКонтролер) = Тип("СправочникСсылка.Сотрудники") Тогда
			
			Контролер = АвтоподстановкаКонтролер;
			
		ИначеЕсли ТипЗнч(АвтоподстановкаКонтролер) = Тип("Структура") Тогда
			
			Контролер = АвтоподстановкаКонтролер.РольИсполнителя;
			
		ИначеЕсли ТипЗнч(АвтоподстановкаКонтролер) = Тип("Массив") Тогда 	
			ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Автоподстановка ""%1"" не может применяться для поля ""%2"", так как возвращает массив пользователей'"),
				ШаблонБизнесПроцесса.Контролер,
				НСтр("ru = 'Контролер'"));
			ВызватьИсключение ТекстСообщения;	
		КонецЕсли;
		
	Иначе
		Контролер = ШаблонБизнесПроцесса.Контролер;
	КонецЕсли;	
	
	Если Не ИспользоватьСхемуПроцесса Тогда
		Для Каждого ПредшественникЭтапаШаблона Из ШаблонБизнесПроцесса.ПредшественникиЭтапов Цикл
			ЗаполнитьЗначенияСвойств(ПредшественникиЭтапов.Добавить(), ПредшественникЭтапаШаблона);
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.НаименованиеБизнесПроцесса) Тогда
		Наименование = ШаблонБизнесПроцесса.НаименованиеБизнесПроцесса;
		
		НаименованиеСПредметами = 
			МультипредметностьКлиентСервер.ПолучитьНаименованиеСПредметами(
			СокрЛП(Наименование), Предметы);
		
		Если ЗначениеЗаполнено(НаименованиеСПредметами)
			И ШаблонБизнесПроцесса.ДобавлятьНаименованиеПредмета Тогда
			
			Наименование = НаименованиеСПредметами;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.Описание) Тогда
		Описание = ШаблонБизнесПроцесса.Описание;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Важность) Тогда
		Важность = Перечисления.ВариантыВажностиОбъектов.Обычная;
	КонецЕсли;
	
	Если Не ИспользоватьСхемуПроцесса
		И ВариантМаршрутизации <> ШаблонБизнесПроцесса.ВариантМаршрутизации Тогда
		
		ВариантМаршрутизации = ШаблонБизнесПроцесса.ВариантМаршрутизации;
	КонецЕсли;
	
	СрокИсполненияПроцесса = ШаблонБизнесПроцесса.СрокИсполненияПроцесса;
	
	Если ШаблонБизнесПроцесса = Справочники.ШаблоныКомплексныхБизнесПроцессов.ПоУмолчанию Тогда
		// Не заполняем шаблон в процессе, если это шаблон по умолчанию.
		// Считаем, что процесс создан с нуля.
	ИначеЕсли ШаблонБизнесПроцесса.ШаблонВКомплексномПроцессе 
		И ЗначениеЗаполнено(ШаблонБизнесПроцесса.ИсходныйШаблон) Тогда
		Шаблон = ШаблонБизнесПроцесса.ИсходныйШаблон;
	ИначеЕсли Не ШаблонБизнесПроцесса.ШаблонВКомплексномПроцессе Тогда
		Шаблон = ШаблонБизнесПроцесса;
	КонецЕсли;
	
	РаботаСКомплекснымиБизнесПроцессамиСерверПереопределяемый.ЗаполнитьПоШаблону(
		ЭтотОбъект, ШаблонБизнесПроцесса);
	
	ДополнительныеСвойства.Вставить("ШаблонДляОтложенногоСтарта", ШаблонБизнесПроцесса);
	
КонецПроцедуры	

// Заполняет бизнес-процесс на основании шаблона бизнес-процесса, предмета и автора.
//
// Параметры
//  ШаблонБизнесПроцесса  - шаблон бизнес-процесса
//  Предмет - предмет бизнес-процесса
//  Автор  - автор
//
Процедура ЗаполнитьПоШаблонуИПредмету(ШаблонБизнесПроцесса, ПредметСобытия, АвторСобытия) Экспорт
	
	Мультипредметность.ЗаполнитьПредметыПроцессаПоШаблону(ШаблонБизнесПроцесса, ЭтотОбъект);
	Мультипредметность.ПередатьПредметыПроцессу(ЭтотОбъект, ПредметСобытия, Ложь, Истина);
	ЗаполнитьДействияПоШаблону(ШаблонБизнесПроцесса);
	ЗаполнитьПоШаблону(ШаблонБизнесПроцесса);
	
	Проект = МультипредметностьПереопределяемый.ПолучитьОсновнойПроектПоПредметам(ПредметСобытия);
	
	Дата = ТекущаяДатаСеанса();
	Автор = АвторСобытия;
	
КонецПроцедуры	

// Заполняет бизнес-процесс на основании проектной задачи
//
Процедура ЗаполнитьПоПроектнойЗадаче(ДанныеЗаполнения) Экспорт 
	
	Проект = ДанныеЗаполнения.Владелец;
	ПроектнаяЗадача = ДанныеЗаполнения;
	
	ДобавлятьНаименованиеПредмета = РаботаСБизнесПроцессами.ДобавлятьНаименованиеПредмета(ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(Наименование) Или Наименование = НаименованиеПроцессаПоУмолчанию(ДобавлятьНаименованиеПредмета) Тогда
		Наименование = ПроектнаяЗадача.Наименование;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Описание) Тогда 
		Описание = ПроектнаяЗадача.Описание;
	КонецЕсли;

	Если Предметы.Количество() = 0 Тогда 
		Предмет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПроектнаяЗадача, "Предмет");
		
		Если Предмет <> Неопределено И Предметы.Найти(Предмет,"Предмет") = Неопределено Тогда
			СтрокаПредметов = Предметы.Добавить();
			СтрокаПредметов.РольПредмета = Перечисления.РолиПредметов.Основной;
			СтрокаПредметов.ИмяПредмета =  МультипредметностьВызовСервера.ПолучитьСсылкуНаИмяПредметаПоСсылкеНаПредмет(
				Предмет, Предметы.ВыгрузитьКолонку("ИмяПредмета"));
			СтрокаПредметов.Предмет = Предмет;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	

// Заполняет бизнес-процесс на основании шаблона бизнес-процесса.
//
// Параметры
//  ШаблонБизнесПроцесса - шаблон бизнес-процесса
//
Процедура ЗаполнитьДействияПоШаблону(ШаблонБизнесПроцесса) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Этапы.Очистить();
	ПредшественникиЭтапов.Очистить();
	Схема = Неопределено;
	
	СсылкаНаПроцесс = СсылкаНаПроцесс();
	
	РеквизитыШаблона = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ШаблонБизнесПроцесса, "Схема, Этапы");
	
	Если ЗначениеЗаполнено(РеквизитыШаблона.Схема) Тогда
		
		РаботаСКомплекснымиБизнесПроцессамиСервер.СкопироватьСхемуКомплексногоПроцесса(
			РеквизитыШаблона, ЭтотОбъект);
		
		ОтметитьЭлементСтартаТекущими();
		
		Мультипредметность.ОбновитьПредметыЗадачКомплексногоПроцессаПослеИзмененияДействий(
			ЭтотОбъект);
		
	Иначе
		
		ЭтапыШаблона = РеквизитыШаблона.Этапы.Выгрузить();
		ЭтапыШаблона.Сортировать("НомерСтроки Возр");
	
		Для Каждого ЭтапШаблона Из ЭтапыШаблона Цикл
			НовыйЭтап = Этапы.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйЭтап, ЭтапШаблона);
			
			ЭтапШаблонаОбъект = ЭтапШаблона.ШаблонБизнесПроцесса.ПолучитьОбъект();
			
			Если Не ЗначениеЗаполнено(ЭтапШаблонаОбъект.ВладелецШаблона) Тогда
				
				//копирование общего шаблона в настройку действия этапа комплексного процесса
				//разворачивание автоподстановок
				ИмяПроцесса = Справочники[ЭтапШаблона.ШаблонБизнесПроцесса.Метаданные().Имя].ИмяПроцесса(ЭтапШаблона.ШаблонБизнесПроцесса);
				
				БизнесПроцессОбъект = БизнесПроцессы[ИмяПроцесса].СоздатьБизнесПроцесс();
				БизнесПроцессОбъект.Автор = Автор;
				БизнесПроцессОбъект.Заполнить(Новый Структура());
				Мультипредметность.ЗаполнитьПредметыПроцессаПоШаблону(ЭтапШаблона.ШаблонБизнесПроцесса, БизнесПроцессОбъект);
				Если МультипредметностьКлиентСервер.ЭтоКомплексныйПроцесс(БизнесПроцессОбъект) Тогда
					БизнесПроцессОбъект.ЗаполнитьДействияПоШаблону(ЭтапШаблона.ШаблонБизнесПроцесса);
				КонецЕсли;
				Мультипредметность.ПередатьПредметыПроцессу(БизнесПроцессОбъект, ЭтотОбъект, Истина);
				БизнесПроцессОбъект.ЗаполнитьПоШаблону(ЭтапШаблона.ШаблонБизнесПроцесса);
				
				ШаблонДляВставки = БизнесПроцессОбъект.СоздатьШаблонПоПроцессу();
				ШаблонДляВставкиОбъект = ШаблонДляВставки.ПолучитьОбъект();
				ШаблонДляВставкиОбъект.ВладелецШаблона = СсылкаНаПроцесс;
				ШаблонДляВставкиОбъект.ШаблонВКомплексномПроцессе = Истина;
				
				ШаблоныБизнесПроцессов.ЗаписатьШаблон(ШаблонДляВставкиОбъект,
					"ЗаписьСЗаполнениемСлужебныхРеквизитовКомплексныхПроцессов");
				
				СтрокиПредметовЗадач = ПредметыЗадач.НайтиСтроки(Новый Структура("ИдентификаторЭтапа, ШаблонБизнесПроцесса", 
					НовыйЭтап.ИдентификаторЭтапа, НовыйЭтап.ШаблонБизнесПроцесса));
				Для Каждого Строка Из СтрокиПредметовЗадач Цикл
					Строка.ШаблонБизнесПроцесса = ШаблонДляВставкиОбъект.Ссылка;
				КонецЦикла;
				
				НовыйЭтап.ШаблонБизнесПроцесса = ШаблонДляВставкиОбъект.Ссылка;
			Иначе
				
				ЗаполнитьИсходныйШаблон = Не ЗначениеЗаполнено(ЭтапШаблонаОбъект.КомплексныйПроцесс);
				
				ЭтапШаблонаОбъект.КомплексныйПроцесс = СсылкаНаПроцесс;
				ШаблонДействияОбъект = ЭтапШаблонаОбъект.Скопировать();
				
				Если ЗаполнитьИсходныйШаблон Тогда
					ШаблонДействияОбъект.ИсходныйШаблон = ЭтапШаблонаОбъект.Ссылка;
				КонецЕсли;
				
				ШаблонДействияОбъект.Ответственный = Сотрудники.ОсновнойСотрудник();
				ШаблонДействияОбъект.ВладелецШаблона = СсылкаНаПроцесс;
				ШаблонДействияОбъект.ШаблонВКомплексномПроцессе = Истина;
				
				ШаблоныБизнесПроцессов.ЗаписатьШаблон(ШаблонДействияОбъект,
					"ЗаписьСЗаполнениемСлужебныхРеквизитовКомплексныхПроцессов");
				
				СтрокиПредметовЗадач = ПредметыЗадач.НайтиСтроки(
					Новый Структура("ШаблонБизнесПроцесса", НовыйЭтап.ШаблонБизнесПроцесса));
				
				Для Каждого Строка Из СтрокиПредметовЗадач Цикл
					Строка.ШаблонБизнесПроцесса = ШаблонДействияОбъект.Ссылка;
				КонецЦикла;
				
				НовыйЭтап.ШаблонБизнесПроцесса = ШаблонДействияОбъект.Ссылка;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СтартПроцесса

Процедура ОтложенныйСтарт() Экспорт
	
	СтартПроцессовСервер.СтартоватьПроцессОтложенно(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОтключитьОтложенныйСтарт() Экспорт
	
	СтартПроцессовСервер.ОтключитьОтложенныйСтарт(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ЗаполнениеПроцесса

// Формирует описание процесса из общего описания вышестоящего комплексного процесса 
// и описания этого процесса.
// Параметры:
//	ОбщееОписание - строка. Описание вышестоящего комплексного процесса.
Процедура ДополнитьОписание(ОбщееОписание) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ОбщееОписание) Тогда
		Возврат;
	КонецЕсли;
	Описание = ОбщееОписание + Символы.ПС + Описание;
	
КонецПроцедуры

Функция НаименованиеПроцессаПоУмолчанию(ДобавлятьНаименованиеПредмета)
	
	НаименованиеПоУмолчанию = НСтр("ru = 'Обработка '");
	
	Если ДобавлятьНаименованиеПредмета Тогда
		НаименованиеПоУмолчанию = МультипредметностьКлиентСервер.ПолучитьНаименованиеСПредметами(
			СокрЛП(НаименованиеПоУмолчанию), Предметы);
	КонецЕсли;
	
	Возврат НаименованиеПоУмолчанию;
	
КонецФункции

// Возвращает признак процесса со схемой.
// 
// Возвращаемое значение:
// 	Булево
//
Функция ЭтоПроцессСоСхемой() Экспорт
	
	Если МК_ПовтИсп.ЭтоМобильныйКлиент() Тогда
		Возврат Ложь;
	Иначе
		Возврат (ЗначениеЗаполнено(Схема) И ТипЗнч(Схема) = Тип("СправочникСсылка.СхемыПроцессов"));	
	КонецЕсли;
	
КонецФункции

// Возвращение признак процесс с таблицей действий.
// 
// Возвращаемое значение:
// 	Булево
//
Функция ЭтоПроцессСТаблицейДействий() Экспорт
	
	Возврат Не ЗначениеЗаполнено(Схема);
	
КонецФункции

#КонецОбласти

#Область СтартПроцесса

// Проверяет что заполнены поля шаблона
Функция ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивПолей = Новый Массив;
	
	Если ЭтоПроцессСоСхемой() Тогда 
		
		ДанныеСхемы = Справочники.СхемыПроцессов.ДанныеСхемыПроцесса(Схема);
		РезультатПроверкиСхемы = СхемыПроцессовСервер.СхемаКорректна(ДанныеСхемы.Схема);
		Если Не РезультатПроверкиСхемы.НетОшибок Тогда
			МассивПолей.Добавить("Схема");
			Возврат МассивПолей;
		КонецЕсли;
		
		ПараметрыСхемы = 
			Справочники.ПараметрыСхемДляКомплексныхПроцессов.ПараметрыПоСхеме(Схема);
		Если ЗначениеЗаполнено(ПараметрыСхемы) Тогда
			
			ДанныеПараметровСхемы = 
				Справочники.ПараметрыСхемДляКомплексныхПроцессов.ДанныеПараметровСхемы(
				ПараметрыСхемы);
		
			ОшибкиНастроекСхемы = 
				РаботаСКомплекснымиБизнесПроцессамиСервер.ОшибкиЗаполненияНастроекЭлементовСхемы(
				ДанныеПараметровСхемы.НастройкиЭлементов,
				СхемыПроцессовКлиентСервер.ТипыВсехЭлементовПоДаннымСхемы(ДанныеСхемы),
				СхемыПроцессовКлиентСервер.ГрафическаяСхемаПоДаннымСхемы(ДанныеСхемы));
				
			Если ОшибкиНастроекСхемы.Количество() > 0 Тогда
				МассивПолей.Добавить("Схема");
				Возврат МассивПолей;
			КонецЕсли;
			
		КонецЕсли;
	
	ИначеЕсли ЭтоПроцессСТаблицейДействий() Тогда
	
		Для Каждого Этап Из Этапы Цикл
			
			Если ЗначениеЗаполнено(Этап.ШаблонБизнесПроцесса) Тогда
				
				ШаблонОбъект = Этап.ШаблонБизнесПроцесса.ПолучитьОбъект();
				
				МассивПолейШаблона = ШаблонОбъект.ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта();
				Если МассивПолейШаблона.Количество() = 0 Тогда
					Для Каждого ИмяПоля Из МассивПолейШаблона Цикл
						МассивПолей.Добавить(ИмяПоля);
					КонецЦикла;	
					Возврат МассивПолей;
				КонецЕсли;	
				
			КонецЕсли;	
			
		КонецЦикла;		
		
	КонецЕсли;

	Возврат МассивПолей;
	
КонецФункции	

#КонецОбласти

#Область ЗадачиПроцесса

// Возвращает признак наличия метода ИзменитьРеквизитыНевыполненныхЗадач
//
Функция ЕстьМетодИзменитьРеквизитыНевыполненныхЗадач() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Обновляет реквизиты невыполненных задач
Процедура ИзменитьРеквизитыНевыполненныхЗадач(СтарыеУчастникиПроцесса, ПараметрыЗаписи) Экспорт
	
	// В комплексном процессе отсутствуют задачи для исполнителей.
	
КонецПроцедуры

#КонецОбласти

#Область Предметы

// Проверяет права участников процесса на предметы этого процесса.
// Если у участников процесса отсутствуют права на предметы, то выводятся сообщения с привязкой
// к карточке процесса.
//
// Параметры
//  ПроцессОбъект - БизнесПроцессОбъект - процесс.
//  Отказ - Булево - в этот параметр помещается значение Истина, если кто-то из участников не имеет
//                   прав на предметы.
//  ПроверятьПриИзменении - Булево - если указано значение Истина, то проверка выполняется только если
//                          изменены участники или предметы процесса, иначе проверка выполняется всегда.
//
Процедура ПроверитьПраваУчастниковПроцессаНаПредметы(
	ПроцессОбъект, Отказ, ПроверятьПриИзменении) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если РаботаСПроцессамиПоОбработкамОбъектовСобытия.
		ОбработатьПроверкуПраваУчастниковПроцессаНаПредметы(ЭтотОбъект) Тогда
		
		Возврат;
	КонецЕсли;
	
	Если Не ДокументооборотПраваДоступаПовтИсп.ВключеноИспользованиеПравДоступа() Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроцессОбъект.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроцессОбъект.Завершен Тогда
		Возврат;
	КонецЕсли;
	
	СсылкаНаПроцесс = ПроцессОбъект.СсылкаНаПроцесс();
	
	Участники = БизнесПроцессы.КомплексныйПроцесс.УчастникиДляПроверкиПрав(ПроцессОбъект);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УчастникиКомплексногоПроцесса.Участник,
		|	УчастникиКомплексногоПроцесса.Изменение
		|ПОМЕСТИТЬ УчастникиКомплексногоПроцесса
		|ИЗ
		|	&УчастникиКомплексногоПроцесса КАК УчастникиКомплексногоПроцесса
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПредметыКомплексногоПроцесса.Предмет,
		|	ПредметыКомплексногоПроцесса.ИмяПредмета
		|ПОМЕСТИТЬ ПредметыКомплексногоПроцесса
		|ИЗ
		|	&ПредметыКомплексногоПроцесса КАК ПредметыКомплексногоПроцесса
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПредметыКомплексногоПроцесса.ИмяПредмета,
		|	УчастникиКомплексногоПроцесса.Участник,
		|	УчастникиКомплексногоПроцесса.Изменение
		|ПОМЕСТИТЬ УчастникиИПредметыКомплексногоПроцесса
		|ИЗ
		|	УчастникиКомплексногоПроцесса КАК УчастникиКомплексногоПроцесса
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПредметыКомплексногоПроцесса КАК ПредметыКомплексногоПроцесса
		|		ПО (ИСТИНА)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПредметыИУчастникиДействийКомплексныхПроцессов.ИмяПредмета,
		|	ПредметыИУчастникиДействийКомплексныхПроцессов.Участник,
		|	ПредметыИУчастникиДействийКомплексныхПроцессов.Изменение
		|ИЗ
		|	РегистрСведений.ПредметыИУчастникиДействийКомплексныхПроцессов КАК ПредметыИУчастникиДействийКомплексныхПроцессов
		|ГДЕ
		|	ПредметыИУчастникиДействийКомплексныхПроцессов.КомплексныйПроцесс = &КомплексныйПроцесс
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПредметыКомплексногоПроцесса.Предмет КАК Предмет,
		|	УчастникиИПредметыКомплексногоПроцесса.Участник,
		|	МАКСИМУМ(УчастникиИПредметыКомплексногоПроцесса.Изменение) КАК Изменение
		|ИЗ
		|	УчастникиИПредметыКомплексногоПроцесса КАК УчастникиИПредметыКомплексногоПроцесса
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПредметыКомплексногоПроцесса КАК ПредметыКомплексногоПроцесса
		|		ПО УчастникиИПредметыКомплексногоПроцесса.ИмяПредмета = ПредметыКомплексногоПроцесса.ИмяПредмета
		|
		|СГРУППИРОВАТЬ ПО
		|	УчастникиИПредметыКомплексногоПроцесса.Участник,
		|	ПредметыКомплексногоПроцесса.Предмет
		|ИТОГИ ПО
		|	Предмет";
	
	Запрос.УстановитьПараметр("КомплексныйПроцесс", СсылкаНаПроцесс);
	Запрос.УстановитьПараметр("УчастникиКомплексногоПроцесса", Участники);
	Запрос.УстановитьПараметр("ПредметыКомплексногоПроцесса", Предметы);
	
	ВыборкаПоПредметам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ПредметыИУчастники = Новый Соответствие;
	
	Пока ВыборкаПоПредметам.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(ВыборкаПоПредметам.Предмет) Тогда
			Продолжить;
		КонецЕсли;
		
		ВыборкаПоУчастникам = ВыборкаПоПредметам.Выбрать();
		
		УчастникиКоторыеДолжныИметьПраваНаПредмет = Участники.СкопироватьКолонки();
		
		Пока ВыборкаПоУчастникам.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(
				УчастникиКоторыеДолжныИметьПраваНаПредмет.Добавить(),
				ВыборкаПоУчастникам);
		КонецЦикла;
		
		ПредметыИУчастники.Вставить(ВыборкаПоПредметам.Предмет, УчастникиКоторыеДолжныИметьПраваНаПредмет);
		
	КонецЦикла;
	
	// Определим предметы для проверок
	ПредметыДляПроверкиПрав = Мультипредметность.ПредметыДляПроверкиПрав(
		ПроцессОбъект.Предметы.ВыгрузитьКолонку("Предмет"), ПроцессОбъект.Ссылка);
		
	ПредметыДляПроверкиНарушенияПолитикиДоступа =
		ПредметыДляПроверкиПрав.ДляПроверкиНарушенияПолитикиДоступа;
		
	ПредметыДляПроверкиПравДоступаУчастников =
		ПредметыДляПроверкиПрав.ДляПроверкиПравДоступаУчастников;
	
	// Проверка нарушения политики доступа при расширении рабочей группы предмета.
	Для Каждого Предмет Из ПредметыДляПроверкиНарушенияПолитикиДоступа Цикл
		
		УчастникиСДоступомКПредмету = ПредметыИУчастники.Получить(Предмет);
		
		Попытка
			Мультипредметность.ПроверитьНарушениеПолитикиДоступаПриРасширенииРабочейГруппыПредмета(
				Предмет, УчастникиСДоступомКПредмету);
		Исключение
			
			Отказ = Истина;
			
			ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			
			СтрокаПредмет = ПроцессОбъект.Предметы.Найти(Предмет, "Предмет");
			ИндексПредмета = СтрокаПредмет.НомерСтроки - 1;
			
			ПолеПредмета = "Объект.Предметы[" + ИндексПредмета + "].Описание";
			
			ОбщегоНазначения.СообщитьПользователю(
				ТекстОшибки,
				ПроцессОбъект.Ссылка,
				ПолеПредмета);
			
		КонецПопытки;
	КонецЦикла;
	
	// Проверка прав на предметы без автоматического заполнения рабочей группы.
	
	ПраваУчастниковНаПредметы = ДокументооборотПраваДоступа.ПраваСотрудниковПоОбъектам(
		ПредметыДляПроверкиПравДоступаУчастников, Истина);
	
	Для Каждого Предмет Из ПредметыДляПроверкиПравДоступаУчастников Цикл
		
		УчастникиНеИмеющиеПравДоступаНаТекущийПредмет = Новый Массив;
		
		УчастникиДляПроверки = ПредметыИУчастники.Получить(Предмет);
		
		ПользователиДляПроверкиПрав = Мультипредметность.СотрудникиДляПроверкиПрав(УчастникиДляПроверки);
		
		Для Каждого СтрокаПользователь Из ПользователиДляПроверкиПрав Цикл
			
			Отбор = Новый Структура;
			Отбор.Вставить("ОбъектДоступа", Предмет);
			Отбор.Вставить("Сотрудник", СтрокаПользователь.Участник);
			
			НайденныеПрава = ПраваУчастниковНаПредметы.НайтиСтроки(Отбор);
			Если НайденныеПрава.Количество() = 0 Тогда
				УчастникиНеИмеющиеПравДоступаНаТекущийПредмет.Добавить(СтрокаПользователь.Участник);
			КонецЕсли;
		КонецЦикла;
		
		КоличествоПользователей = УчастникиНеИмеющиеПравДоступаНаТекущийПредмет.Количество();
		
		Если КоличествоПользователей <> 0 Тогда
			
			Отказ = Истина;
			
			Если КоличествоПользователей = 1 Тогда
				
				ТекстОшибки = НСтр("ru = 'Сотрудник ""%1"" не имеет прав на предмет ""%2"".'");
				
				ТекстОшибки = 
					СтрШаблон(ТекстОшибки, УчастникиНеИмеющиеПравДоступаНаТекущийПредмет[0], Предмет);
					
			Иначе
				
				ТекстОшибки = НСтр("ru = 'Сотрудники:
					|%1
					|не имеют прав на предмет ""%2"".'");
					
				ПользователиСтрокой = "";
				
				ПереносСтроки = "";
				
				Для Каждого Пользователь Из УчастникиНеИмеющиеПравДоступаНаТекущийПредмет Цикл
					ПользователиСтрокой = ПользователиСтрокой
						+ ПереносСтроки
						+ "  "
						+ Строка(Пользователь);
						
					ПереносСтроки = Символы.ПС;
				КонецЦикла;
				
				ТекстОшибки = СтрШаблон(ТекстОшибки, ПользователиСтрокой, Предмет);
				
			КонецЕсли;
			
			СтрокаПредмет = ПроцессОбъект.Предметы.Найти(Предмет, "Предмет");
			ИндексПредмета = СтрокаПредмет.НомерСтроки - 1;
			
			ПолеПредмета = "Объект.Предметы[" + ИндексПредмета + "].Описание";
			
			ОбщегоНазначения.СообщитьПользователю(
				ТекстОшибки,
				ПроцессОбъект.Ссылка,
				ПолеПредмета);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Маршрутизация

#Область СхемыПроцессов

// Возвращает структуру обработчика схемы процесса.
// 
// Возвращаемое значение:
//  Структура:
//   * Схема - ГрафическаяСхема
//   * ТипыЭлементов - Соответствие
//     ** Ключ - Строка - Имя элемента
//     ** Значение - ПеречислениеСсылка.ТипыЭлементовСхемПроцессов
//   * ЭлементыСхемы - ТаблицаЗначений
//     ** Имя - Строка - имя элемента графической схемы
//     ** ТипЭлемента - ПеречислениеСсылка.ТипыЭлементовСхемПроцессов
//   * ОтметкиПрохожденияСхемы - Соответствие
//     ** Ключ - Строка - имя элемента графической схемы
//     ** Значение - Булево
//   * ПредшественникиЭлементов - ТаблицаЗначений
//     ** см. СхемыПроцессовСервер.ПредшественникиЭлементовПоДаннымСхемы
//   * ПутиСхемы - Массив
//     ** см. СхемыПроцессовСервер.ПутиСхемыПроцесса
//   * ЗадачиЭлементовСхемы - ТаблицаЗначений
//     ** ИмяЭлемента Строка - имя элемента графической схемы
//     ** ЗадачаПроцесса - ЗадачаСсылка.ЗадачаИсполнителя
//   * ЭлементыДляОбработки - Массив
//     ** Строка - имена элементов схемы.
//
Функция ОбработчикСхемыПроцесса() Экспорт
	
	ОбновитьСхемуОбработки = Ложь; // Проверяем, что Схема - не битая ссылка
	Если ЗначениеЗаполнено(Схема) И Не ОбщегоНазначения.СсылкаСуществует(Схема) Тогда
		ОбработкаПроцесса = РегистрыСведений.ПроцессыОбработокОбъектов.ОбработкаПоПроцессу(Ссылка);
		Если ЗначениеЗаполнено(ОбработкаПроцесса) Тогда
			ОбновитьСхемуОбработки = Истина;
			РаботаСПроцессамиПоОбработкамОбъектов.ОбновитьСхемуДляОбработкиОбъектаПоВладельцу(ОбработкаПроцесса);
		КонецЕсли;	
	КонецЕсли;
	
	Если ОбновитьСхемуОбработки Тогда
		ПараметрыСхемы = Справочники.ПараметрыСхемДляОбработокОбъектов.ПараметрыСхемыПоВладельцу(ОбработкаПроцесса);
		Если ЗначениеЗаполнено(ПараметрыСхемы) Тогда
			Схема = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыСхемы, "Схема");
		КонецЕсли;	
	КонецЕсли;		
			
	ОбработчикСхемы = Новый Структура;
	
	ДанныеСхемыПроцесса = Справочники.СхемыПроцессов.ДанныеСхемыПроцесса(Схема);
	
	// Схема
	
	ОбработчикСхемы.Вставить("Схема", ДанныеСхемыПроцесса.Схема);
	
	// ТипыЭлементов
	
	ОбработчикСхемы.Вставить("ТипыЭлементов", ДанныеСхемыПроцесса.Настройки.ТипыЭлементов);
	
	// ЭлементыСхемы
	
	ЭлементыСхемы = Новый ТаблицаЗначений;
	
	ЭлементыСхемы.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	
	ЭлементыСхемы.Колонки.Добавить(
		"ТипЭлемента", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыЭлементовСхемПроцессов"));
	
	ЭлементыСхемы.Индексы.Добавить("Имя");
	ЭлементыСхемы.Индексы.Добавить("ТипЭлемента");
	
	Для Каждого КлючЗначение Из ДанныеСхемыПроцесса.Настройки.ТипыЭлементов Цикл
		СтрокаТаблицы = ЭлементыСхемы.Добавить();
		СтрокаТаблицы.Имя = КлючЗначение.Ключ;
		СтрокаТаблицы.ТипЭлемента = КлючЗначение.Значение;
	КонецЦикла;

	ОбработчикСхемы.Вставить("ЭлементыСхемы", ЭлементыСхемы);
		
	// ОтметкиПрохожденияСхемы
		
	ОбработчикСхемы.Вставить("ОтметкиПрохожденияСхемы", Новый Соответствие);
	Если ОтметкиПрохожденияСхемы.Количество() = 0 Тогда
		Для Каждого КлючЗначение Из ДанныеСхемыПроцесса.Настройки.ТипыЭлементов Цикл
			ОбработчикСхемы.ОтметкиПрохожденияСхемы[КлючЗначение.Ключ] = Ложь;
		КонецЦикла;
	Иначе
		Для Каждого СтрокаТаблицы Из ОтметкиПрохожденияСхемы Цикл
			 ОбработчикСхемы.ОтметкиПрохожденияСхемы[СтрокаТаблицы.ИмяЭлемента] = 
			 	СтрокаТаблицы.Пройден;
		КонецЦикла;
	КонецЕсли;
	
	// ТекущиеЭлементыСхемы
	
	ОбработчикСхемы.Вставить("ТекущиеЭлементыСхемы", Новый Соответствие);
	Для Каждого СтрокаТаблицы Из ТекущиеЭлементыСхемы Цикл
		 ОбработчикСхемы.ТекущиеЭлементыСхемы[СтрокаТаблицы.ИмяЭлемента] = Истина;
	КонецЦикла;
	
	// ПредшественникиЭлементов
	
	ПредшественникиЭлементов = СхемыПроцессовСервер.ПредшественникиЭлементовПоДаннымСхемы(
		ДанныеСхемыПроцесса); 
	
	ОбработчикСхемы.Вставить("ПредшественникиЭлементов", ПредшественникиЭлементов);
	
	// ПутиСхемы
	
	СтрокаТаблицы = ОбработчикСхемы.ЭлементыСхемы.Найти(
		Перечисления.ТипыЭлементовСхемПроцессов.Старт, "ТипЭлемента");
		
	ОбработчикСхемы.Вставить("ПутиСхемы",
		СхемыПроцессовСервер.ПутиСхемыПроцесса(
		СтрокаТаблицы.Имя, ОбработчикСхемы.ПредшественникиЭлементов));
		
	// ЗадачиЭлементовСхемы
	
	ЗадачиЭлементовСхемыТаблица = ЗадачиЭлементовСхемы.Выгрузить();
	ЗадачиЭлементовСхемыТаблица.Индексы.Добавить("ИмяЭлемента");
	ЗадачиЭлементовСхемыТаблица.Индексы.Добавить("ЗадачаПроцесса");
	ОбработчикСхемы.Вставить("ЗадачиЭлементовСхемы", ЗадачиЭлементовСхемыТаблица);
	
	// ЭлементыДляОбработки
	
	ОбработчикСхемы.Вставить("ЭлементыДляОбработки", Новый Массив);
	
	// ЗадачаИнициаторМаршрутизации
	
	ОбработчикСхемы.Вставить("ЗадачаИнициаторМаршрутизации", Неопределено);
	
	Возврат ОбработчикСхемы;
	
КонецФункции

// Отмечает элемент схемы текущим.
// 
// Параметры:
//  ИмяЭлемента - Строка - имя элемента в схеме.
//  Отметка - Булево - если Истина, то элемент помечается текущим.
// 	ОбработчикСхемы - Структура - см. ОбработчикСхемыПроцесса
//
Процедура УстановитьОтметкуТекущегоЭлемента(ИмяЭлемента, Отметка, ОбработчикСхемы) Экспорт
	
	Если Отметка Тогда
		ОбработчикСхемы.ТекущиеЭлементыСхемы[ИмяЭлемента] = Истина;
	Иначе
		ОбработчикСхемы.ТекущиеЭлементыСхемы.Удалить(ИмяЭлемента);
	КонецЕсли;
	
КонецПроцедуры

// Отмечает прохождение элемент схемыы.
// 
// Параметры:
//  ИмяЭлемента - Строка - имя элемента в схеме.
//  Отметка - Булево - если Истина, то элемент пройден.
//  ОбработчикСхемы - Структура - см. ОбработчикСхемыПроцесса
//
Процедура УстановитьОтметкуПрохожденияЭлемента(ИмяЭлемента, Отметка, ОбработчикСхемы) Экспорт
	
	ОбработчикСхемы.ОтметкиПрохожденияСхемы[ИмяЭлемента] = Отметка;
	
КонецПроцедуры

// Записывает сведения обработки схемы в текущий процесс.
// 
// Параметры:
// 	ОбработчикСхемы - Структура - см. ОбработчикСхемыПроцесса
//
Процедура ЗаписатьСведенияОбработкиСхемыВПроцесс(ОбработчикСхемы) Экспорт
	
	// ОтметкиПрохожденияСхемы
	
	КэшОтметкиПрохожденияСхемы = Новый Соответствие();
	Для Каждого СтрокаТаблицы Из ОтметкиПрохожденияСхемы Цикл
		КэшОтметкиПрохожденияСхемы[СтрокаТаблицы.ИмяЭлемента] = СтрокаТаблицы; 
	КонецЦикла;
	
	Для Каждого КлючЗначение Из ОбработчикСхемы.ОтметкиПрохожденияСхемы Цикл
		
		СтрокаТаблицы = КэшОтметкиПрохожденияСхемы[КлючЗначение.Ключ];
		
		Если СтрокаТаблицы = Неопределено Тогда
			СтрокаТаблицы = ОтметкиПрохожденияСхемы.Добавить();
			СтрокаТаблицы.ИмяЭлемента = КлючЗначение.Ключ;
			СтрокаТаблицы.Пройден = КлючЗначение.Значение;
		ИначеЕсли СтрокаТаблицы.Пройден <> КлючЗначение.Значение Тогда
			СтрокаТаблицы.Пройден = КлючЗначение.Значение; 		
		КонецЕсли;
		
	КонецЦикла;
	
	// ЗадачиЭлементовСхемы
	
	ПрежниеЗадачиЭлементовСхемы = ЗадачиЭлементовСхемы.Выгрузить();
	ПрежниеЗадачиЭлементовСхемы.Индексы.Добавить("ИмяЭлемента");
	ПрежниеЗадачиЭлементовСхемы.Индексы.Добавить("ЗадачаПроцесса");
	
	Если Не ОбщегоНазначения.ДанныеСовпадают(
		ПрежниеЗадачиЭлементовСхемы, ОбработчикСхемы.ЗадачиЭлементовСхемы) Тогда
		
		ЗадачиЭлементовСхемы.Загрузить(ОбработчикСхемы.ЗадачиЭлементовСхемы);
	КонецЕсли;	
		
	// ТекущиеЭлементыСхемы
	
	ПрежниеТекущиеЭлементыСхемы = ТекущиеЭлементыСхемы.Выгрузить();
	ПрежниеТекущиеЭлементыСхемы.Индексы.Добавить("ИмяЭлемента");
	
	НовыеТекущиеЭлементыСхемы = ПрежниеТекущиеЭлементыСхемы.СкопироватьКолонки();
	Для Каждого КлючЗначение Из ОбработчикСхемы.ТекущиеЭлементыСхемы Цикл
		СтрокаТаблицы = НовыеТекущиеЭлементыСхемы.Добавить();
		СтрокаТаблицы.ИмяЭлемента = КлючЗначение.Ключ;
	КонецЦикла;
	
	Если Не ОбщегоНазначения.ДанныеСовпадают(
		ПрежниеТекущиеЭлементыСхемы, НовыеТекущиеЭлементыСхемы) Тогда
		
		ТекущиеЭлементыСхемы.Загрузить(НовыеТекущиеЭлементыСхемы);
	КонецЕсли;
		
	РаботаСБизнесПроцессами.ЗаписатьПроцесс(ЭтотОбъект, "ПростаяЗапись");
	
КонецПроцедуры

// Добавляет задачу по обработке элемента схемы.
// 
// Параметры:
// 	ИмяЭлемента - Строка - Имя элемента в схеме.
// 	ЗадачаОбработки - ЗадачаСсылка.ЗадачаИсполнителя - задача по обработке элемента.
// 	ОбработчикСхемы - Структура - см. ОбработчикСхемыПроцесса
//
Процедура ДобавитьЗадачуОбработкиЭлемента(ИмяЭлемента, ЗадачаОбработки, ОбработчикСхемы) Экспорт
	
	СтрокаТаблицы = ОбработчикСхемы.ЗадачиЭлементовСхемы.Добавить();
	СтрокаТаблицы.ИмяЭлемента = ИмяЭлемента;
	СтрокаТаблицы.ЗадачаПроцесса = ЗадачаОбработки;
	
КонецПроцедуры

// Продолжает выполнение процесса по схеме после выполнения задачи.
// 
// Параметры:
// 	Задача - ЗадачаСсылка.ЗадачаИсполнителя
//
Процедура ПродолжитьВыполнениеПроцессаПоСхемеПослеВыполненияЗадачи(Задача) Экспорт
	
	ОбработчикСхемы = ОбработчикСхемыПроцесса();
	ДобавитьЭлементДляОбработкиПослеВыполненияЗадачиПроцесса(ОбработчикСхемы, Задача);
	ВыполнитьОбработкуСхемыПроцесса(ОбработчикСхемы);
	ЗаписатьСведенияОбработкиСхемыВПроцесс(ОбработчикСхемы);
	
КонецПроцедуры

// Продолжает выполнение процесса по схеме после завершения обработки элемента.
// 
// Параметры:
// 	ИмяЭлемента - Строка - имя элемента, обработка которого завершена.
//
Процедура ПродолжитьМаршрутизациюПослеЗавершенияОбработкиЭлемента(ИмяЭлемента) Экспорт
	
	ОбработчикСхемы = ОбработчикСхемыПроцесса();
	ДобавитьЭлементыДляОбработкиПослеЗавершенияПредшетсвенника(ОбработчикСхемы, ИмяЭлемента);
	ВыполнитьОбработкуСхемыПроцесса(ОбработчикСхемы);
	ЗаписатьСведенияОбработкиСхемыВПроцесс(ОбработчикСхемы);
	
КонецПроцедуры

Процедура ПродолжитьВыполнениеПроцессаПоСхемеПослеОстановкиСлужебная() Экспорт
		
	АвторКомплексногоПроцесса =
		РаботаСБизнесПроцессами.АвторПроцессаЗадачи(ЭтотОбъект);
	
	// Проверка прав участников процесса на предметы
	МультипредметностьКОРП.ПроверитьПраваУчастниковПроцессаИОтправитьУведомления(
		ЭтотОбъект, АвторКомплексногоПроцесса);
	
	// Выполним маршрутизацию процесса.
	ОбработчикСхемы = ОбработчикСхемыПроцесса();
	ДобавитьНачальныеЭлементыДляОбработки(ОбработчикСхемы);
	ВыполнитьОбработкуСхемыПроцесса(ОбработчикСхемы);
	ЗаписатьСведенияОбработкиСхемыВПроцесс(ОбработчикСхемы);
	
	// Проверим наличие активных действий процесса.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗадачаИсполнителя.Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
		|	И ЗадачаИсполнителя.ТочкаМаршрута = ЗНАЧЕНИЕ(БизнесПроцесс.КомплексныйПроцесс.ТочкаМаршрута.ВыполнитьДействияПроцессаПоСхеме)
		|	И ЗадачаИсполнителя.Выполнена = ЛОЖЬ";
		
	Запрос.УстановитьПараметр("БизнесПроцесс", Ссылка);
	НетАктивныхДействий = Запрос.Выполнить().Пустой();
	
	// Если нет активных задач, то выполняем код точки Завершение и отмечаем процесс завершенным.
	Если НетАктивныхДействий Тогда
		
		Отказ = Ложь;
		ЗавершениеПриЗавершении(БизнесПроцессы.КомплексныйПроцесс.ТочкиМаршрута.Завершение, Отказ);
		Если Отказ Тогда
			ВызватьИсключение НСтр("ru = 'Не удалось выполнить маршрутизацию процесса.
				|Подробнее см. в журнале регистрации.'", ОбщегоНазначения.КодОсновногоЯзыка());
		КонецЕсли;
		
		Завершен = Истина;
		
		// Отключаем контроль возможности изменения состояния процесса,
		// т.к. нельзя менять состояния завершенных процессов.
		РаботаСБизнесПроцессамиВызовСервера.ОтключитьПроверкуВозможностиИзмененияСостоянияПроцесса(
			ЭтотОбъект);
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ТаблицаЭтапов

// Выполняет поиск доступных для запуска действий и стартует их
// Параметры:
//	ФормируемыеБизнесПроцессы - Массив Из БизнесПроцессОбъект - Массив объектов созданных процессов.
//	ТочкаМаршрутаБизнесПроцесса - ТочкаМаршрутаБизнесПроцессаСсылка.КомплексныйПроцесс - точка маршрута комплексного
//	                                        процесса, на которой создаются новые процессы.
//	СтартоватьСразуПослеСоздания - Булево - Флаг, показывающий, что процессы необходимо стартовать сразу после создания.
//	                                        Необходимо устанавливать в Истина, если процессы создаются вручную при 
//	                                        завершении очередного действия комплексного процесса.
//	                                        Значение Ложь необходимо установить, если старт вложенных процессов
//	                                        выполняется стандартным механизмом бизнес-процессов.
//	ПослеПроцесса - БизнесПроцессСсылка
Процедура СтартоватьНовыеДействия(ФормируемыеБизнесПроцессы, ТочкаМаршрутаБизнесПроцесса, СтартоватьСразуПослеСоздания,
	ПослеПроцесса = Неопределено) Экспорт
		
	Попытка
		НачатьТранзакцию();
		
		МассивЭтаповДляЗапуска = ЭтапыДляЗапуска(ПослеПроцесса);
		
		//для каждого этапа, который запускается, удалить признак перехода по нему
		Для Каждого ЭтапДляЗапуска Из МассивЭтаповДляЗапуска Цикл
			Для Каждого Предшественник Из ПредшественникиЭтапов Цикл
				Если Предшественник.ИдентификаторПредшественника = ЭтапДляЗапуска.ИдентификаторЭтапа Тогда
					Предшественник.УсловныйПереходБылВыполнен = Ложь;
				КонецЕсли;
				Если Предшественник.ИдентификаторПоследователя = ЭтапДляЗапуска.ИдентификаторЭтапа Тогда
					Предшественник.УсловныйПереходБылВыполнен = Истина;
				КонецЕсли;
			КонецЦикла;
			ЭтапДляЗапуска.БезусловныйПереходКСледующемуБылВыполнен = Ложь;
		КонецЦикла;
				
		Для Каждого ЭтапДляЗапуска Из МассивЭтаповДляЗапуска Цикл
			Попытка
				СоздатьПроцессПоЭтапу(ЭтапДляЗапуска, ФормируемыеБизнесПроцессы, ТочкаМаршрутаБизнесПроцесса, СтартоватьСразуПослеСоздания);
			Исключение
				Инфо = ИнформацияОбОшибке();
				Пока Инфо.Причина <> Неопределено Цикл
					Инфо = Инфо.Причина;
				КонецЦикла;
				Описание = Инфо.Описание;
				ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Эта задача не может быть выполнена.%1%2'"),
					Символы.ПС,
					Описание);
				ВызватьИсключение ТекстИсключения;
			КонецПопытки;
		КонецЦикла;
		
		Если МассивЭтаповДляЗапуска.Количество() Тогда
			Записать();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки	
	
КонецПроцедуры

Функция ЗапускЭтапаПроцессаВозможен(ЭтапПроцесса, ТолькоПроверка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если ЗначениеЗаполнено(ЭтапПроцесса.ЗапущенныйБизнесПроцесс) 
		И НЕ ЭтапПроцесса.ЗапущенныйБизнесПроцесс.Завершен Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УсловияПереходаВыполнены = УсловияПереходаДляЭтапаВыполнены(ЭтапПроцесса, ТолькоПроверка);
	Если СредиПредшественниковЭтапаЕстьТолькоТочкаСтарта(ЭтапПроцесса) Тогда	
		Возврат НЕ ЗначениеЗаполнено(ЭтапПроцесса.ЗапущенныйБизнесПроцесс) И УсловияПереходаВыполнены;
	Иначе
		Возврат УсловияПереходаВыполнены;
	КонецЕсли;
		
КонецФункции

#КонецОбласти

#КонецОбласти

// Возвращает описание задачи, специфичное для бизнес-процесса
Функция ПолучитьОписаниеУведомленияЗадачи(Задача, КодЯзыкаПолучателя) Экспорт
	
	Возврат Неопределено;
	
КонецФункции

// Создает шаблон по данному комплексному процессу. Если указана ссылка на шаблон,
// то выполняется обновление объекта по переданной ссылке, если нет - создается новый 
// шаблон комплексного процесса.
// Параметры:
//	ШаблонСсылка - ссылка на шаблон комплексного процесса.
Функция СоздатьШаблонПоПроцессу(ШаблонСсылка = Неопределено) Экспорт
	
	//перенос реквизитов в шаблон
	Если ШаблонСсылка = Неопределено ИЛИ ШаблонСсылка.Пустая() Тогда
		ИмяТипа = БизнесПроцессы[ЭтотОбъект.Метаданные().Имя].ТипШаблона();	
		ШаблонОбъект = Справочники[СтрЗаменить(ИмяТипа, "Справочник.", "")].СоздатьЭлемент();
	Иначе
		ШаблонОбъект = ШаблонСсылка.ПолучитьОбъект();
	КонецЕсли;
	ШаблонОбъект.Наименование = Наименование;
	ШаблонОбъект.НаименованиеБизнесПроцесса = Наименование;
	ШаблонОбъект.Описание = Описание;
	ШаблонОбъект.Важность = Важность;
	ШаблонОбъект.Контролер = Контролер;
	ШаблонОбъект.ВариантМаршрутизации = ВариантМаршрутизации;
	ШаблонОбъект.Ответственный = Сотрудники.ОсновнойСотрудник();
	
	ШаблонОбъект.Предметы.Загрузить(Предметы.Выгрузить());
	Для Каждого СтрокаПредмета Из ШаблонОбъект.Предметы Цикл
		Если ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда
			ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СтрокаПредмета.Предмет.Метаданные().ПолноеИмя()).ПустаяСсылка();
		КонецЕсли;
	КонецЦикла;
	ШаблонОбъект.ПредметыЗадач.Загрузить(ПредметыЗадач.Выгрузить());
	
	ШаблонОбъект.Автор = Сотрудники.ОсновнойСотрудник();	
	
	// Перенос схемы процесса
	Если ЭтоПроцессСоСхемой()Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		РаботаСКомплекснымиБизнесПроцессамиСервер.СкопироватьСхемуКомплексногоПроцесса(
			ЭтотОбъект, ШаблонОбъект);
					
		Мультипредметность.ОбновитьПредметыЗадачКомплексногоПроцессаПослеИзмененияДействий(
			ШаблонОбъект);
		
	ИначеЕсли ЭтоПроцессСТаблицейДействий() Тогда
	
		//перенос этапов в шаблон
		ШаблонОбъект.Этапы.Очистить();
		Для Каждого Этап Из Этапы Цикл
			НовыйЭтап = ШаблонОбъект.Этапы.Добавить();
			НовыйЭтап.ИдентификаторЭтапа = Этап.ИдентификаторЭтапа;
			
			НовыйШаблон = Этап.ШаблонБизнесПроцесса.ПолучитьОбъект().Скопировать();
			НовыйШаблон.Записать();
			
			НовыйЭтап.ШаблонБизнесПроцесса = НовыйШаблон.Ссылка;
			
			СтрокиПредметовЗадач = ШаблонОбъект.ПредметыЗадач.НайтиСтроки(Новый Структура("ИдентификаторЭтапа, ШаблонБизнесПроцесса", 
				Этап.ИдентификаторЭтапа, Этап.ШаблонБизнесПроцесса));
			Для Каждого Строка Из СтрокиПредметовЗадач Цикл
				Строка.ШаблонБизнесПроцесса = НовыйШаблон.Ссылка;
			КонецЦикла;
			
			НовыйЭтап.ИсполнителиЭтапаСтрокой = Этап.ИсполнителиЭтапаСтрокой;
			НовыйЭтап.ПредшественникиЭтапаСтрокой = Этап.ПредшественникиЭтапаСтрокой;
			НовыйЭтап.ПредшественникиВариантИспользования = Этап.ПредшественникиВариантИспользования;
		КонецЦикла;
		
		//перенос настройки порядка выполнения
		ШаблонОбъект.ПредшественникиЭтапов.Очистить();
		Для Каждого ЗаписьПорядка Из ПредшественникиЭтапов Цикл
			НоваяЗапись = ШаблонОбъект.ПредшественникиЭтапов.Добавить();
			НоваяЗапись.ИдентификаторПредшественника = ЗаписьПорядка.ИдентификаторПредшественника;
			НоваяЗапись.ИдентификаторПоследователя = ЗаписьПорядка.ИдентификаторПоследователя;
			НоваяЗапись.УсловиеПерехода = ЗаписьПорядка.УсловиеПерехода;
		КонецЦикла;
		
		//установка реквизита ВладелецШаблона у настроек действий на шагах
		Для Каждого Этап Из ШаблонОбъект.Этапы Цикл
			НовыйШаблон = Этап.ШаблонБизнесПроцесса.ПолучитьОбъект();
			НовыйШаблон.ВладелецШаблона = ШаблонОбъект.Ссылка;
			НовыйШаблон.ШаблонВКомплексномПроцессе = Истина;
			НовыйШаблон.Записать();
		КонецЦикла;
		
	КонецЕсли;
	
	ШаблонОбъект.Ответственный = Сотрудники.ОсновнойСотрудник();
	ШаблонОбъект.Записать();
	
	Возврат ШаблонОбъект.Ссылка;
	
КонецФункции

// Возвращает ссылку на процесс.
//
Функция СсылкаНаПроцесс() Экспорт
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		СсылкаНаПроцесс = Ссылка;
	Иначе
		СсылкаНаПроцесс = ОпределитьСсылкуДляНовогоПроцесса();
	КонецЕсли;
	
	Возврат СсылкаНаПроцесс;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ЭтоНовый() Тогда
		Дата = ТекущаяДатаСеанса();
		Если Не ЗначениеЗаполнено(Автор) Тогда
			Автор = Сотрудники.ОсновнойСотрудник();
		КонецЕсли;
	КонецЕсли;
	
	ОпределитьСсылкуДляНовогоПроцесса();
	
	Если ДанныеЗаполнения <> Неопределено И ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Тогда
		Мультипредметность.ПередатьПредметыПроцессу(ЭтотОбъект, ДанныеЗаполнения, Ложь, Истина);
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		ЗадачаСсылка = ДанныеЗаполнения;
		ЗаполнитьБизнесПроцессПоЗадаче(ЗадачаСсылка);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("ВедущаяЗадача") Тогда
			ВедущаяЗадача = ДанныеЗаполнения.ВедущаяЗадача;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Шаблон") Тогда
			Мультипредметность.ЗаполнитьПредметыПроцессаПоШаблону(ДанныеЗаполнения.Шаблон, ЭтотОбъект);
			ЗаполнитьДействияПоШаблону(ДанныеЗаполнения.Шаблон);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Предметы") Тогда
			Мультипредметность.ПередатьПредметыПроцессу(ЭтотОбъект, ДанныеЗаполнения.Предметы, Ложь, Истина);
			Проект = МультипредметностьПереопределяемый.ПолучитьОсновнойПроектПоПредметам(ДанныеЗаполнения.Предметы);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Шаблон") Тогда
			ЗаполнитьПоШаблону(ДанныеЗаполнения.Шаблон);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ЗадачаИсполнителя") Тогда
			ЗадачаСсылка = ДанныеЗаполнения.ЗадачаИсполнителя;
			ЗаполнитьБизнесПроцессПоЗадаче(ЗадачаСсылка);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ПроектнаяЗадача") Тогда
			ЗаполнитьПоПроектнойЗадаче(ДанныеЗаполнения.ПроектнаяЗадача);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Проект") Тогда
			Проект = ДанныеЗаполнения.Проект;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Важность") Тогда
			Важность = ДанныеЗаполнения.Важность;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Наименование") Тогда
			Наименование = ДанныеЗаполнения.Наименование;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Описание") Тогда
			Описание = ДанныеЗаполнения.Описание;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Автор") Тогда
			Автор = ДанныеЗаполнения.Автор;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Схема") Тогда
			Схема = ДанныеЗаполнения.Схема;
			ОтметитьЭлементСтартаТекущими();
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.ПроектныеЗадачи") Тогда 	
		
		ЗаполнитьПоПроектнойЗадаче(ДанныеЗаполнения);	
		
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(Наименование) И Предметы.Количество() > 0 Тогда
		МультипредметностьКлиентСервер.ЗаполнитьНаименованиеПроцесса(ЭтотОбъект, НСтр("ru = 'Обработка'"));
	КонецЕсли;
	
	БизнесПроцессыИЗадачиСервер.ЗаполнитьГлавнуюЗадачу(ЭтотОбъект, ДанныеЗаполнения);
	
	РаботаСКомплекснымиБизнесПроцессамиСерверПереопределяемый.ОбработкаЗаполнения(
		ЭтотОбъект,
		ДанныеЗаполнения,
		СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Мультипредметность.ПроверитьКорректностьТиповОсновныхПредметов(ЭтотОбъект, Отказ);
	
	Если ЭтоПроцессСоСхемой() Тогда
		
		// Отключим проверку заполнения таблицы этапов и вариант маршрутизации.
		Индекс = ПроверяемыеРеквизиты.Количество() - 1;
		Пока Индекс >= 0 Цикл
			
			Если ПроверяемыеРеквизиты[Индекс] = "ВариантМаршрутизации"
				Или ПроверяемыеРеквизиты[Индекс] = "Этапы"
				Или ПроверяемыеРеквизиты[Индекс] = "Этапы.ШаблонБизнесПроцесса" Тогда
				
				ПроверяемыеРеквизиты.Удалить(Индекс);
			КонецЕсли;
			
			Индекс = Индекс - 1;
			
		КонецЦикла;
		
		// Выполним проверку схемы.
		ДанныеСхемы = Справочники.СхемыПроцессов.ДанныеСхемыПроцесса(Схема);
		РезультатПроверкиСхемы = СхемыПроцессовСервер.СхемаКорректна(ДанныеСхемы.Схема);
		Если Не РезультатПроверкиСхемы.НетОшибок Тогда
			ОбщегоНазначения.СообщитьПользователю(
				РезультатПроверкиСхемы.ОписаниеОшибки,
				ЭтотОбъект,,
				"Схема",
				Отказ);
		КонецЕсли;
		
		ПараметрыСхемы = 
			Справочники.ПараметрыСхемДляКомплексныхПроцессов.ПараметрыПоСхеме(Схема);
		
		Если ЗначениеЗаполнено(ПараметрыСхемы) Тогда
			
			ДанныеПараметровСхемы = 
				Справочники.ПараметрыСхемДляКомплексныхПроцессов.ДанныеПараметровСхемы(
				ПараметрыСхемы);
		
			ОшибкиНастроекСхемы = 
				РаботаСКомплекснымиБизнесПроцессамиСервер.ОшибкиЗаполненияНастроекЭлементовСхемы(
				ДанныеПараметровСхемы.НастройкиЭлементов,
				СхемыПроцессовКлиентСервер.ТипыВсехЭлементовПоДаннымСхемы(ДанныеСхемы),
				СхемыПроцессовКлиентСервер.ГрафическаяСхемаПоДаннымСхемы(ДанныеСхемы));
				
			Для Каждого ОшибкаНастройкиСхемы Из ОшибкиНастроекСхемы Цикл
				ОбщегоНазначения.СообщитьПользователю(
					ОшибкаНастройкиСхемы,
					ЭтотОбъект,,
					"Схема",
					Отказ);
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли ЭтоПроцессСТаблицейДействий() Тогда
		
		Для Каждого Этап Из Этапы Цикл
			
			ОбъектШаблонаЭтапа = Этап.ШаблонБизнесПроцесса.ПолучитьОбъект();
			
			МассивПолей = ОбъектШаблонаЭтапа.ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта();
			Если МассивПолей.Количество() <> 0 Тогда
				
				Если МассивПолей.Найти("Схема") <> Неопределено Тогда
					
					ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Схема действия %1 ""%2"" настроена неверно. Проверьте схему'"),
						Этап.НомерСтроки,
						Строка(Этап.ШаблонБизнесПроцесса));
						
				Иначе
					СтрокаНезаполненныеПоля = МассивПолейВСтроку(МассивПолей);
					ТекстОшибки = СтрШаблон(
						НСтр("ru = 'При настройке этапа %1 ""%2"" не заполнены необходимые для запуска поля: %3'"),
						Этап.НомерСтроки,
						Строка(Этап.ШаблонБизнесПроцесса),
						СтрокаНезаполненныеПоля);
				КонецЕсли;
				
				ОбщегоНазначения.СообщитьПользователю(
					ТекстОшибки,
					ЭтотОбъект,
					"Этапы",, 
					Отказ);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПредметыДляВложеннойОбработки = МассивПредметовДляВложеннойОбработки();
	РаботаСПроцессамиПоОбработкамОбъектов.ПроверкаЗапретаНаЗапускНесколькихКП(
		СсылкаНаПроцесс(), ПредметыДляВложеннойОбработки, Отказ, Истина);

	РаботаСПроцессамиПоОбработкамОбъектов.ПроверкаЗапретаНаЗапускПоПредметуИзДругойСистемы(ЭтотОбъект, Отказ);
	
	// Проверка прав участников процесса на предметы
	Если Не РаботаСБизнесПроцессами.ЭтоФоновоеВыполнениеПроцесса() Тогда
		ПроверитьПраваУчастниковПроцессаНаПредметы(ЭтотОбъект, Отказ, Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОпределитьСсылкуДляНовогоПроцесса();
	
	ОбычнаяЗапись = Истина;
	ТолькоДобавлениеПредметовИОбновлениеРабочейГруппыПроцессов = Ложь;
	ОбновитьКонтроль = Ложь;
	Если ДополнительныеСвойства.Свойство("ВидЗаписи") Тогда
		
		ОбычнаяЗапись = Ложь;
		ТолькоДобавлениеПредметовИОбновлениеРабочейГруппыПроцессов = 
			(ДополнительныеСвойства.ВидЗаписи = 
			"ЗаписьСОбновлением_Предметов_ПредметовЗадач_Проекта_ОбщегоСпискаПроцессов_РабочихГруппПредметов_РабочихГруппПроцессов_ДопРеквизитовПоПредметам");
		
		ОбновитьКонтроль = РаботаСБизнесПроцессами.ЭтоВидЗаписиОбновленияКонтроля(ДополнительныеСвойства.ВидЗаписи);
		
		Если Не ТолькоДобавлениеПредметовИОбновлениеРабочейГруппыПроцессов И Не ОбновитьКонтроль Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если (ОбычнаяЗапись Или ТолькоДобавлениеПредметовИОбновлениеРабочейГруппыПроцессов)
		И Не МиграцияДанныхИзВнешнихСистемСервер.ЭтоОбъектИзДругойСистемы(ИсточникДанных) Тогда
		
		РеквизитыСсылки = ОбщегоНазначенияДокументооборот.ЗначенияРеквизитовОбъектаВПривилегированномРежиме(
			Ссылка, "ПометкаУдаления, Проект, ПроектнаяЗадача, Стартован, Предметы, ПометкаУдаления");
			
		ДополнительныеСвойства.Вставить("ПредыдущаяПометкаУдаления", РеквизитыСсылки.ПометкаУдаления);
		ДополнительныеСвойства.Вставить("ПредыдущийПроект", РеквизитыСсылки.Проект);
		ДополнительныеСвойства.Вставить("ПредыдущаяПроектнаяЗадача", РеквизитыСсылки.ПроектнаяЗадача);
		ДополнительныеСвойства.Вставить("Стартован", РеквизитыСсылки.Стартован);
		
		// Проверка факта добавления новых предметов.
		ДобавленыНовыеПредметы = Ложь;
			
		Если РеквизитыСсылки.Стартован = Истина Тогда
			
			ПредметыПроцессаПоСсылке = РеквизитыСсылки.Предметы.Выгрузить();
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("РольПредмета", Неопределено);
			СтруктураПоиска.Вставить("ИмяПредмета", Неопределено);
			СтруктураПоиска.Вставить("ИмяПредметаОснование", Неопределено);
			СтруктураПоиска.Вставить("Предмет", Неопределено);
			СтруктураПоиска.Вставить("ШаблонОснование", Неопределено);
			
			КоличествоЭтапов = Предметы.Количество();
			
			i = 1;
			
			Пока i < КоличествоЭтапов И НЕ ДобавленыНовыеПредметы Цикл
				
				Предмет = Предметы[КоличествоЭтапов - i];
				
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, Предмет);
				
				НайденныеСтроки = ПредметыПроцессаПоСсылке.НайтиСтроки(СтруктураПоиска);
				
				ДобавленыНовыеПредметы = НайденныеСтроки.Количество() = 0;
				
				i = i + 1;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ДополнительныеСвойства.Вставить("ДобавленыНовыеПредметы", ДобавленыНовыеПредметы);
		
		// Обновление рабочей группы предмета
		РаботаСКомплекснымиБизнесПроцессамиСерверПереопределяемый.ПередЗаписью(ЭтотОбъект);
		
	КонецЕсли;
	
	Если (ОбычнаяЗапись Или ОбновитьКонтроль)
		И Не МиграцияДанныхИзВнешнихСистемСервер.ЭтоОбъектИзДругойСистемы(ИсточникДанных) Тогда
		
		Если ОбычнаяЗапись Тогда
			
			Если ЭтоПроцессСТаблицейДействий() Тогда
				Если ПредшественникиЭтапов.Количество() = 0 И Этапы.Количество() > 0  Тогда
					НоваяСтрока = ПредшественникиЭтапов.Добавить();
					НоваяСтрока.ИдентификаторПоследователя = Этапы[0].ИдентификаторЭтапа;
					НоваяСтрока.ИдентификаторПредшественника = УникальныйИдентификаторПустой();
					НоваяСтрока.УсловиеРассмотрения = Перечисления.УсловияРассмотренияПредшественниковЭтапа.ПослеУспешногоВыполнения;
					Этапы[0].ПредшественникиЭтапаСтрокой = НСтр("ru = 'При старте процесса'");
					Этапы[0].ПредшественникиВариантИспользования = "ОдинИзПредшественников";
				КонецЕсли;
				
				РаботаСКомплекснымиБизнесПроцессамиСервер.ОбновитьПорядокСортировкиЭтапов(ЭтотОбъект);
			КонецЕсли;
			
		КонецЕсли;
		
		БылСтартован = Ложь;
		СтарыйКонтролер = Неопределено;
		СтарыйСрокИсполненияПроцесса = Дата(1,1,1);
		ПредыдущееСостояние = Неопределено;
		ПредыдущаяПометкаУдаления = Ложь;
		Если Не Ссылка.Пустая() Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, 
				"Стартован, Контролер, СрокИсполненияПроцесса, Состояние, ПометкаУдаления");
				
			БылСтартован = ЗначенияРеквизитов.Стартован;
			СтарыйКонтролер = ЗначенияРеквизитов.Контролер;
			СтарыйСрокИсполненияПроцесса = ЗначенияРеквизитов.СрокИсполненияПроцесса;
			ПредыдущееСостояние = ЗначенияРеквизитов.Состояние;
			ПредыдущаяПометкаУдаления = ЗначенияРеквизитов.ПометкаУдаления;
		КонецЕсли;
		ДополнительныеСвойства.Вставить("БылСтартован", БылСтартован);
		ДополнительныеСвойства.Вставить("СтарыйКонтролер", СтарыйКонтролер);
		ДополнительныеСвойства.Вставить("СтарыйСрокИсполненияПроцесса", СтарыйСрокИсполненияПроцесса);
		ДополнительныеСвойства.Вставить("ПредыдущаяПометкаУдаления", ПредыдущаяПометкаУдаления);
		
		Если ОбычнаяЗапись Тогда
			ЗапуститьВыполнениеПроцессаПоСхемеПослеОстановки(ПредыдущееСостояние);		
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбычнаяЗапись Тогда
		ЗаполнитьПустыеИдентификаторыУчастников();
		ПроверитьУникальностьИдентификаторовУчастников();
			
		Если Не Ссылка.Пустая() Тогда
			ПредыдущееСостояние = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Состояние");
			ДополнительныеСвойства.Вставить("ПредыдущееСостояние", ПредыдущееСостояние);
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если МиграцияДанныхИзВнешнихСистемСервер.ЭтоОбъектИзДругойСистемы(ИсточникДанных) Тогда
		Возврат;
	КонецЕсли;
	
	ОбычнаяЗапись = Истина;
	
	ПередатьПредметыИПроекВПодпроцессы = Ложь;
	ОбновитьКонтроль = Ложь;
	Если ДополнительныеСвойства.Свойство("ВидЗаписи") Тогда
		
		ОбычнаяЗапись = Ложь;
		
		ПередатьПредметыИПроекВПодпроцессы = 
			(ДополнительныеСвойства.ВидЗаписи = 
			"ЗаписьСОбновлением_Предметов_ПредметовЗадач_Проекта_ОбщегоСпискаПроцессов_РабочихГруппПредметов_РабочихГруппПроцессов_ДопРеквизитовПоПредметам");
		
		ОбновитьКонтроль = РаботаСБизнесПроцессами.ЭтоВидЗаписиОбновленияКонтроля(ДополнительныеСвойства.ВидЗаписи);
		
		Если Не ПередатьПредметыИПроекВПодпроцессы И Не ОбновитьКонтроль Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбычнаяЗапись Или ОбновитьКонтроль Тогда
		Контроль.ПриЗаписиПроцессаСКонтролером(ЭтотОбъект);
	КонецЕсли;
	
	Если ОбычнаяЗапись Тогда
		
		ОбработкаОчередиЗаданийСервер.ПриЗаписиПроцесса(ЭтотОбъект);
		
		ПредыдущаяПометкаУдаления = Ложь;
		Если ДополнительныеСвойства.Свойство("ПредыдущаяПометкаУдаления")
			И ДополнительныеСвойства.ПредыдущаяПометкаУдаления <> Неопределено Тогда
			
			ПредыдущаяПометкаУдаления = ДополнительныеСвойства.ПредыдущаяПометкаУдаления;
		КонецЕсли;
		
		Если ПометкаУдаления <> ПредыдущаяПометкаУдаления Тогда
			ПротоколированиеРаботыСотрудников.ЗаписатьПометкуУдаления(Ссылка, ПометкаУдаления);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбычнаяЗапись Или ПередатьПредметыИПроекВПодпроцессы Тогда
		
		// Распростронение проекта и проектной задачи на подпроцессы
		Если ДополнительныеСвойства.Стартован = Истина
			И ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") = Истина Тогда
			Если ДополнительныеСвойства.ПредыдущийПроект <> Проект
				Или ДополнительныеСвойства.ПредыдущаяПроектнаяЗадача <> ПроектнаяЗадача Тогда
				
				РаспространитьПроектИПроектнуюЗадачуНаПодпроцессы();
				
			КонецЕсли;
		КонецЕсли;
		
		// Добавление новых предметов в подчиненные действия.
		Если ДополнительныеСвойства.ДобавленыНовыеПредметы Тогда
			
			ШаблонТекстаОшибки = НСтр("ru = 'При обновлении предметов в подчиненном процессе %1 произошла ошибка.'");
			
			Если ЭтоПроцессСоСхемой() Тогда
				
				УстановитьПривилегированныйРежим(Истина);
				
				ПараметрыСхемы = Справочники.ПараметрыСхемДляКомплексныхПроцессов.
					ПараметрыСхемыПоВладельцу(Ссылка);
					
				Если ЗначениеЗаполнено(ПараметрыСхемы) Тогда
								
					ДанныеПараметровСхемы =
						Справочники.ПараметрыСхемДляКомплексныхПроцессов.ДанныеПараметровСхемы(
						ПараметрыСхемы);
					
					ПроцессыЭлементов = РаботаСКомплекснымиБизнесПроцессамиСервер.
						ПроцессыЭлементовСхемыПоКомплексномуПроцессу(Ссылка);
					ПодчиненныеПроцессы = Новый Массив;
					Для Каждого КлючЗначение Из ПроцессыЭлементов Цикл
						ПодчиненныеПроцессы.Добавить(КлючЗначение.Значение);
					КонецЦикла;
					ЗавершенностьПроцессов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(
						ПодчиненныеПроцессы, "Завершен");
					
					Для Каждого СтрокаНастройки Из ДанныеПараметровСхемы.НастройкиЭлементов Цикл
						
						ИмяЭлемента = СтрокаНастройки.Ключ;
						
						НастройкаЭлемента = СтрокаНастройки.Значение;
						ИдентификаторНастройки =
							ДанныеПараметровСхемы.ИдентификаторыНастроек[ИмяЭлемента];
						
						ПроцессЭлемента = ПроцессыЭлементов[ИмяЭлемента];
						
						Если Не ШаблоныБизнесПроцессовКлиентСервер.ЭтоШаблонПроцесса(НастройкаЭлемента)
							Или ПроцессЭлемента = Неопределено
							Или ЗавершенностьПроцессов[ПроцессЭлемента] = Истина Тогда
								
							Продолжить;
						КонецЕсли;
						
						Попытка
					
							ЗаблокироватьДанныеДляРедактирования(ПроцессЭлемента);
							
							ПредметыДействия =
								ПредметыДействия(ИдентификаторНастройки, НастройкаЭлемента);
					
							ПроцессЭлементаОбъект = ПроцессЭлемента.ПолучитьОбъект();
							Мультипредметность.ПередатьПредметыПроцессу(
								ПроцессЭлементаОбъект, ПредметыДействия, Истина);
								
							РаботаСБизнесПроцессами.ЗаписатьПроцесс(ПроцессЭлементаОбъект,
								"ЗаписьСОбновлением_Предметов_ПредметовЗадач_Проекта_ОбщегоСпискаПроцессов_РабочихГруппПредметов_РабочихГруппПроцессов_ДопРеквизитовПоПредметам");
							
						Исключение
							ВызватьИсключение СтрШаблон(ШаблонТекстаОшибки, ПроцессЭлемента);
						КонецПопытки;
						
					КонецЦикла;
				КонецЕсли;
				УстановитьПривилегированныйРежим(Ложь);

			ИначеЕсли ЭтоПроцессСТаблицейДействий() Тогда
				
				Для Каждого Этап ИЗ Этапы Цикл
					Если ЗначениеЗаполнено(Этап.ЗапущенныйБизнесПроцесс)
						И НЕ Этап.ЗадачаВыполнена Тогда
						
						Попытка
							
							ЗаблокироватьДанныеДляРедактирования(Этап.ЗапущенныйБизнесПроцесс);
							
							ПредметыДействия = ПредметыДействия(Этап.ИдентификаторЭтапа, Этап.ШаблонБизнесПроцесса);
							
							ПроцессОбъектПоЭтапу = Этап.ЗапущенныйБизнесПроцесс.ПолучитьОбъект();
							Мультипредметность.ПередатьПредметыПроцессу(
								ПроцессОбъектПоЭтапу, ПредметыДействия, Истина);
								
							РаботаСБизнесПроцессами.ЗаписатьПроцесс(ПроцессОбъектПоЭтапу,
								"ЗаписьСОбновлением_Предметов_ПредметовЗадач_Проекта_ОбщегоСпискаПроцессов_РабочихГруппПредметов_РабочихГруппПроцессов_ДопРеквизитовПоПредметам");
							
						Исключение
							
							ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонТекстаОшибки,
								Этап.ЗапущенныйБизнесПроцесс);
								
							ВызватьИсключение ТекстОшибки;
							
						КонецПопытки;
						
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбычнаяЗапись Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Если ЭтоПроцессСТаблицейДействий() Тогда
		
			Для Каждого Этап Из Этапы Цикл
				
				РеквизитыШаблонаЭтапа = ОбщегоНазначенияДокументооборот.
					ЗначенияРеквизитовОбъектаВПривилегированномРежиме(
						Этап.ШаблонБизнесПроцесса, "ВладелецШаблона, КомплексныйПроцесс");
					
				ВладелецШаблона = РеквизитыШаблонаЭтапа.ВладелецШаблона;
				КомплексныйПроцесс = РеквизитыШаблонаЭтапа.КомплексныйПроцесс;
				
				Если ВладелецШаблона <> Ссылка
					Или КомплексныйПроцесс <> Ссылка Тогда
					
					ШаблонОбъект = Этап.ШаблонБизнесПроцесса.ПолучитьОбъект();
					ШаблонОбъект.ВладелецШаблона = Ссылка;
					ШаблонОбъект.ШаблонВКомплексномПроцессе = Истина;
					
					ШаблоныБизнесПроцессов.ЗаписатьШаблон(ШаблонОбъект,
						"ЗаписьСЗаполнениемСлужебныхРеквизитовКомплексныхПроцессов");
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Если ПометкаУдаления <> ПредыдущаяПометкаУдаления Тогда
			УстановитьПометкуУдаленияДействиямПроцесса(ПометкаУдаления);
		КонецЕсли;
		
		УдалитьНепривязанныеШаблоны();
		РаботаСКомплекснымиБизнесПроцессамиСервер.
			УдалитьНепривязанныеНастройкиЭлементовСхемы(ЭтотОбъект);
		
		СтартПроцессовСервер.ПроцессПриЗаписи(ЭтотОбъект, Отказ);
		
		ПродолжитьВыполнениеПроцессаПоСхемеПослеОстановки();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	РаботаСПроцессамиПоОбработкамОбъектовСобытия.ПередКопированиемПроцесса(ОбъектКопирования);
	РаботаСБизнесПроцессами.ПриКопированииБизнесПроцесса(ОбъектКопирования);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИдентификаторСсылки = УникальныйИдентификаторПустой();
	
	СсылкаНаПроцесс = СсылкаНаПроцесс();
		
	// Очистим заполняемые предметы.
	Для Каждого СтрокаПредмета Из Предметы Цикл
		Если СтрокаПредмета.РольПредмета = Перечисления.РолиПредметов.Заполняемый Тогда
			СтрокаПредмета.Предмет = Неопределено;
		КонецЕсли;
	КонецЦикла;
		
	Если ЭтоПроцессСоСхемой() Тогда
		
		Схема = Справочники.СхемыПроцессов.ПустаяСсылка();
		ОчиститьСведенияОбработкиСхемыВПроцессе();
				
		РаботаСКомплекснымиБизнесПроцессамиСервер.СкопироватьСхемуКомплексногоПроцесса(
			ОбъектКопирования, ЭтотОбъект);
		
		ОтметитьЭлементСтартаТекущими();
		
		Мультипредметность.ОбновитьПредметыЗадачКомплексногоПроцессаПослеИзмененияДействий(
			ЭтотОбъект);
	
	ИначеЕсли ЭтоПроцессСТаблицейДействий() Тогда
		
		Для Каждого ЭтапОбъектаКопирования Из ОбъектКопирования.Этапы Цикл
			Для Каждого ЭтапПроцесса Из Этапы Цикл
				Если ЭтапПроцесса.ИдентификаторЭтапа = ЭтапОбъектаКопирования.ИдентификаторЭтапа Тогда
					Если ЗначениеЗаполнено(ЭтапОбъектаКопирования.ШаблонБизнесПроцесса.ВладелецШаблона) Тогда
						
						КопируемыйШаблонОбъект = ЭтапОбъектаКопирования.ШаблонБизнесПроцесса.ПолучитьОбъект();
						КопируемыйШаблонОбъект.КомплексныйПроцесс = СсылкаНаПроцесс;
						
						НовыйШаблон = КопируемыйШаблонОбъект.Скопировать();
						
						НовыйШаблон.ВладелецШаблона = СсылкаНаПроцесс;
						НовыйШаблон.ШаблонВКомплексномПроцессе = Истина;
						НовыйШаблон.Ответственный = Сотрудники.ОсновнойСотрудник();
						ШаблоныБизнесПроцессов.ЗаписатьШаблон(НовыйШаблон,
							"ЗаписьСЗаполнениемСлужебныхРеквизитовКомплексныхПроцессов");
						СтрокиЭтаповШаблона = ПредметыЗадач.НайтиСтроки(Новый Структура("ИдентификаторЭтапа", ЭтапПроцесса.ИдентификаторЭтапа));
						Для Каждого СтрокаЭтапаШаблона Из СтрокиЭтаповШаблона Цикл
							СтрокаЭтапаШаблона.ШаблонБизнесПроцесса = НовыйШаблон.Ссылка;
							СтрокаЭтапаШаблона.ДоступноУдаление = Ложь;
						КонецЦикла;
						ЭтапПроцесса.ШаблонБизнесПроцесса = НовыйШаблон.Ссылка;
					КонецЕсли;
					ЭтапПроцесса.ЗапущенныйБизнесПроцесс = Неопределено;
					ЭтапПроцесса.ЗадачаВыполнена = Ложь;
				КонецЕсли;
				ЭтапПроцесса.БезусловныйПереходКСледующемуБылВыполнен = Ложь;
			КонецЦикла;
			Для Каждого Предшественник Из ПредшественникиЭтапов Цикл
				Предшественник.УсловныйПереходБылВыполнен = Ложь;
			КонецЦикла;
		КонецЦикла;
		ПредшественникиЭтапов.Очистить();
		ВариантМаршрутизации = ОбъектКопирования.ВариантМаршрутизации;
		Для Каждого СтрокаПредшественник Из ОбъектКопирования.ПредшественникиЭтапов Цикл
			НоваяСтрока = ПредшественникиЭтапов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПредшественник);
			НоваяСтрока.УсловныйПереходБылВыполнен = Ложь;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#Область КартаМаршрута

Процедура СтартПередСтартом(ТочкаМаршрутаБизнесПроцесса, Отказ)
	
	ДатаНачала = ТекущаяДатаСеанса();
	
	Если ЭтоПроцессСТаблицейДействий() Тогда
	
		// Проверка настроек отложенного старта подпроцессов.
		// Для первого этапа должен быть хотя бы один подпроцесс без настройки отложенного старта.
		МассивЭтаповДляЗапуска = ЭтапыДляЗапуска(Неопределено);
		Если МассивЭтаповДляЗапуска.Количество() > 0 Тогда
			СписокЭтапов = Новый СписокЗначений;
			
			Для Каждого ЭтапДляЗапуска Из МассивЭтаповДляЗапуска Цикл
				СписокЭтапов.Добавить(ЭтапДляЗапуска.ШаблонБизнесПроцесса);
			КонецЦикла;
			
			СписокШаблонов = 
				СтартПроцессовСервер.СписокШаблоновСНастройкамиОтложенногоСтарта(СписокЭтапов);
			
			Если СписокШаблонов.Количество() = СписокЭтапов.Количество() Тогда
				
				ОписаниеОшибки = 
					НСтр("ru = 'На первом этапе комплексного процесса должен быть хотя бы один процесс без отложенного старта.'");
				
				Если РаботаСБизнесПроцессами.ЭтоФоновоеВыполнениеПроцесса() Тогда
					ВызватьИсключение ОписаниеОшибки;
				Иначе
					СообщениеПользователю = Новый СообщениеПользователю;
					СообщениеПользователю.Текст = ОписаниеОшибки;
					СообщениеПользователю.Поле = "Этапы";
					СообщениеПользователю.УстановитьДанные(ЭтотОбъект);
					СообщениеПользователю.Сообщить();
					Отказ = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Расчет сроков и фиксация их в действиях при старте.
	Если Не ЗначениеЗаполнено(ВедущаяЗадача) Тогда
		
		ПараметрыДляРасчетаСроков = СрокиИсполненияПроцессов.ПараметрыДляРасчетаСроков();
		ПараметрыДляРасчетаСроков.ДатаОтсчета = ДатаНачала;
			
		СрокиИсполненияПроцессовКОРП.РассчитатьСрокиКомплексногоПроцесса(
			ЭтотОбъект, ПараметрыДляРасчетаСроков);
		
	КонецЕсли;
	
КонецПроцедуры

Функция МассивПредметовДляВложеннойОбработки()

	СхемаКП = Справочники.ПараметрыСхемДляКомплексныхПроцессов.ПараметрыСхемыПоВладельцу(СсылкаНаПроцесс());
	Если Не ЗначениеЗаполнено(СхемаКП) Тогда
		Возврат Новый Массив;
	КонецЕсли;	
		
	ДанныеПараметров = Справочники.ПараметрыСхемДляКомплексныхПроцессов.ДанныеПараметровСхемы(
		СхемаКП);
	
	МассивПредметов = Новый Массив;
	
	Для Каждого СтрПредмет Из Предметы Цикл
		
		Если Не Метаданные.ОпределяемыеТипы.ПредметДействия.Тип.СодержитТип(ТипЗнч(СтрПредмет.Предмет)) Тогда
			Продолжить;
		КонецЕсли;	
	
		Для Каждого КлючИЗначение Из ДанныеПараметров.НастройкиЭлементов Цикл
			НастройкаЭлемента = КлючИЗначение.Значение;  
			Если ЗначениеЗаполнено(НастройкаЭлемента) 
				И НастройкаЭлемента = СтрПредмет.ИмяПредмета
				И ЗначениеЗаполнено(СтрПредмет.Предмет) Тогда
					МассивПредметов.Добавить(СтрПредмет.Предмет);
			КонецЕсли;	
		КонецЦикла;
	
	КонецЦикла;
	
	Возврат МассивПредметов;
	
КонецФункции	

Процедура ИспользуетсяСхемаПроцессаПроверкаУсловия(ТочкаМаршрута, Результат)
	
	Результат = ЭтоПроцессСоСхемой();
	
КонецПроцедуры

Процедура НачатьВыполнениеПроцессаПоСхемеОбработка(ТочкаМаршрута)
	
	ОбработчикСхемы = ОбработчикСхемыПроцесса();
	ДобавитьНачальныеЭлементыДляОбработки(ОбработчикСхемы);
	ДобавитьЭлементСтартаДляОбработкиПриНеобходимости(ОбработчикСхемы);
	ВыполнитьОбработкуСхемыПроцесса(ОбработчикСхемы);
	ЗаписатьСведенияОбработкиСхемыВПроцесс(ОбработчикСхемы);
	
КонецПроцедуры

Процедура ВыполнитьДействияПроцессаПоСхемеПередСозданиемЗадач(ТочкаМаршрута, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ВложенныйПроцессПередВыполнением(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписатьПроцесс = Ложь;
	Для Каждого Этап Из Этапы Цикл
		Если ЗначениеЗаполнено(Этап.ЗапущенныйБизнесПроцесс)
			И ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
			Этап.ЗапущенныйБизнесПроцесс, "Завершен") Тогда
			
			Этап.ЗадачаВыполнена = Истина;
			ЗаписатьПроцесс = Истина;
		КонецЕсли;
	КонецЦикла;
	Если ЗаписатьПроцесс Тогда
		РаботаСБизнесПроцессами.ЗаписатьПроцесс(ЭтотОбъект, "ПростаяЗапись");
	КонецЕсли;
	
КонецПроцедуры

Процедура ВложенныйПроцессПередСозданиемВложенныхБизнесПроцессов(ТочкаМаршрутаБизнесПроцесса, ФормируемыеБизнесПроцессы, Отказ)
	
	СтартоватьНовыеДействия(ФормируемыеБизнесПроцессы, ТочкаМаршрутаБизнесПроцесса, Ложь);
	
КонецПроцедуры

Процедура ЗавершениеПриЗавершении(ТочкаМаршрутаБизнесПроцесса, Отказ)
	
	ДатаЗавершения = ТекущаяДатаСеанса();
	РаботаСПроектами.ОтметитьОкончаниеВыполненияПроектнойЗадачи(ЭтотОбъект);
	
	РаботаСПроцессамиПоОбработкамОбъектовСобытия.ПриЗавершенииПроцесса(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеПроцесса

Процедура ЗаполнитьБизнесПроцессПоЗадаче(ЗадачаСсылка)
	
	Мультипредметность.ЗаполнитьПредметыПроцессаПоЗадаче(ЭтотОбъект, ЗадачаСсылка);
	Проект = ЗадачаСсылка.Проект;
	ПроектнаяЗадача = ЗадачаСсылка.ПроектнаяЗадача;
	
	РаботаСКомплекснымиБизнесПроцессамиСерверПереопределяемый.ЗаполнениеПроцессаПоЗадаче(
		ЭтотОбъект,
		ЗадачаСсылка);
	
КонецПроцедуры

// Заполняет пустые идентификаторы участников в процессе.
//
Процедура ЗаполнитьПустыеИдентификаторыУчастников()
	
	Если ИдентификаторКонтролера = УникальныйИдентификаторПустой() Тогда
		ИдентификаторКонтролера = Новый УникальныйИдентификатор;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет уникальность идентификаторов участников процесса.
// Если есть не уникальные значения, то вызывается исключение. 
//
Процедура ПроверитьУникальностьИдентификаторовУчастников()
	
	// Проверки не предусмотрено.
	
КонецПроцедуры

// Возвращает ссылку для нового, незаписанного процесса.
//
Функция ОпределитьСсылкуДляНовогоПроцесса()
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СсылкаНового = ПолучитьСсылкуНового();
	Если ЗначениеЗаполнено(СсылкаНового) Тогда
		СсылкаНаПроцесс = СсылкаНового;
	Иначе
		
		Если Не ЗначениеЗаполнено(ИдентификаторСсылки) Тогда
			ИдентификаторСсылки = Новый УникальныйИдентификатор;
		КонецЕсли;
		
		СсылкаНового = БизнесПроцессы.КомплексныйПроцесс.ПолучитьСсылку(ИдентификаторСсылки);
		
		УстановитьСсылкуНового(СсылкаНового);
	КонецЕсли;
	
	Возврат СсылкаНового;
	
КонецФункции

// Формирует строку из имен полей через запятую
Функция МассивПолейВСтроку(МассивПолей)
	
	СтрокаПолей = "";
	
	Для Индекс = 0 По МассивПолей.Количество() - 1 Цикл
		
		Если Индекс <>  0 Тогда
			СтрокаПолей = СтрокаПолей + ", ";
		КонецЕсли;	
		
		СтрокаПолей = СтрокаПолей + МассивПолей[Индекс];
		
	КонецЦикла;	
	
	Возврат СтрокаПолей;
	
КонецФункции

#КонецОбласти

#Область Маршрутизация

#Область СхемыПроцессов

// Запускает выполнение процесса по схеме, после продолжения процесса (смены реквизита Состояние).
//
// Параметры:
//  ПредыдущееСостояние - ПеречислениеСсылка.СостоянияБизнесПроцессов - предыдущее состояние процесса.
//
Процедура ЗапуститьВыполнениеПроцессаПоСхемеПослеОстановки(ПредыдущееСостояние) 
	
	// Выполнение инициируется только при смене значения состояния с Остановлен на Активен
	// для не выполненных и не удаленных процессов со схемой.
	Если Не ЗначениеЗаполнено(Ссылка)
		Или ПредыдущееСостояние <> Перечисления.СостоянияБизнесПроцессов.Остановлен
		Или Состояние <> Перечисления.СостоянияБизнесПроцессов.Активен
		Или Завершен
		Или ПометкаУдаления
		Или Не ЭтоПроцессСоСхемой() Тогда
		
		Возврат;
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ПродолжитьВыполнениеПроцессаПоСхемеПослеОстановки", Истина);
	
КонецПроцедуры

Процедура ПродолжитьВыполнениеПроцессаПоСхемеПослеОстановки() 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ДополнительныеСвойства.Свойство(
		"ПродолжитьВыполнениеПроцессаПоСхемеПослеОстановки") Тогда
		
		Возврат;
	КонецЕсли;
		
	// Выполним проверку схемы перед продолжением.
	ДанныеСхемы = Справочники.СхемыПроцессов.ДанныеСхемыПроцесса(Схема);
	РезультатПроверкиСхемы = СхемыПроцессовСервер.СхемаКорректна(ДанныеСхемы.Схема);
	
	ПараметрыСхемы = 
		Справочники.ПараметрыСхемДляКомплексныхПроцессов.ПараметрыПоСхеме(Схема);
	
	ОшибкиНастроекСхемы = Новый Массив;
	Если ЗначениеЗаполнено(ПараметрыСхемы) Тогда
		
		ДанныеПараметровСхемы = 
			Справочники.ПараметрыСхемДляКомплексныхПроцессов.ДанныеПараметровСхемы(
			ПараметрыСхемы);
	
		ОшибкиНастроекСхемы = 
			РаботаСКомплекснымиБизнесПроцессамиСервер.ОшибкиЗаполненияНастроекЭлементовСхемы(
			ДанныеПараметровСхемы.НастройкиЭлементов,
			СхемыПроцессовКлиентСервер.ТипыВсехЭлементовПоДаннымСхемы(ДанныеСхемы),
			СхемыПроцессовКлиентСервер.ГрафическаяСхемаПоДаннымСхемы(ДанныеСхемы));
		
	КонецЕсли;
	
	Если Не РезультатПроверкиСхемы.НетОшибок Или ОшибкиНастроекСхемы.Количество() > 0 Тогда
		ТекстОшибки = НСтр("ru = 'Нельзя продолжить процесс ""%1"", т.к. его схема некорректна.
			|Проверьте схему в карточке процесса.'");
		ТекстОшибки = СтрШаблон(ТекстОшибки, Наименование);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	
	Если Не ОбработкаОчередиЗаданийСервер.ОбработатьМаршрутизацияКомплексногоПроцессаПоСхемеПослеПродолжения(Ссылка) Тогда
		ПродолжитьВыполнениеПроцессаПоСхемеПослеОстановкиСлужебная();
	КонецЕсли;
	
КонецПроцедуры

// Добавляет в обработчик схемы элементы для обработки, с которых следует начать выполнение. 
// 
// Параметры:
//  ОбработчикСхемы Обработчик схемы
//
Процедура ДобавитьНачальныеЭлементыДляОбработки(ОбработчикСхемы)
	
	Для Каждого КлючЗначение Из ОбработчикСхемы.ТекущиеЭлементыСхемы Цикл
		ОбработчикСхемы.ЭлементыДляОбработки.Добавить(КлючЗначение.Ключ);
	КонецЦикла;
	
КонецПроцедуры

// Добавляет в обработчик схемы элемента старта, для начала выполнения с него. 
// 
// Параметры:
//  ОбработчикСхемы - см. ОбработчикСхемыПроцесса
//
Процедура ДобавитьЭлементСтартаДляОбработкиПриНеобходимости(ОбработчикСхемы)
	
	Если ОбработчикСхемы.ТекущиеЭлементыСхемы.Количество() = 0 Тогда
		СтрокаТаблицы = ОбработчикСхемы.ЭлементыСхемы.Найти(
			Перечисления.ТипыЭлементовСхемПроцессов.Старт, "ТипЭлемента");
		ОбработчикСхемы.ЭлементыДляОбработки.Добавить(СтрокаТаблицы.Имя);
	КонецЕсли;
	
КонецПроцедуры

// Добавляет элемент схемы для обработки после выполнения задачи процесса. 
// 
// Параметры:
// 	ОбработчикСхемы - см. ОбработчикСхемыПроцесса
// 	ЗадачаПроцесса - ЗадачаСсылка.ЗадачаИсполнителя
//
Процедура ДобавитьЭлементДляОбработкиПослеВыполненияЗадачиПроцесса(ОбработчикСхемы, ЗадачаПроцесса)
	
	ИмяЭлемента = "";
	СтрокаТаблицы = ОбработчикСхемы.ЗадачиЭлементовСхемы.Найти(ЗадачаПроцесса, "ЗадачаПроцесса");
	Если СтрокаТаблицы <> Неопределено Тогда
		ИмяЭлемента = СтрокаТаблицы.ИмяЭлемента;
	Иначе
		ИмяЭлемента = ИмяЭлементаСхемыДляЗадачиПроцесса(ЗадачаПроцесса,
			ОбработчикСхемы.ЗадачиЭлементовСхемы);
		Если Не ЗначениеЗаполнено(ИмяЭлемента) Тогда
			ТекстОшибки = НСтр("ru = 'Задача %1 отсутствует в схеме комплексного процесса,
				|см. табличная часть ""ЗадачиЭлементовСхемы"". Обратитесь к администратору.'",
					ОбщегоНазначения.КодОсновногоЯзыка());
			ВызватьИсключение СтрШаблон(ТекстОшибки, ЗадачаПроцесса);
		КонецЕсли;
		ДобавитьЗадачуОбработкиЭлемента(ИмяЭлемента, ЗадачаПроцесса, ОбработчикСхемы);
		ОбработчикСхемы.ЗадачиЭлементовСхемы.Сортировать("ИмяЭлемента");
	КонецЕсли;		
		
	НайденныеСтроки = ОбработчикСхемы.ЗадачиЭлементовСхемы.НайтиСтроки(
		Новый Структура("ИмяЭлемента", ИмяЭлемента));
		
	ЗадачиЭлемента = Новый Массив;
	Для Каждого СтрокаТаблицы Из НайденныеСтроки Цикл
		Если СтрокаТаблицы.ЗадачаПроцесса = ЗадачаПроцесса Тогда
			Продолжить;
		КонецЕсли;
		ЗадачиЭлемента.Добавить(СтрокаТаблицы.ЗадачаПроцесса);
	КонецЦикла;
	
	Если ЗадачиЭлемента.Количество() > 0 Тогда
		ОтметкиВыполненияЗадач = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(
			ЗадачиЭлемента, "Выполнена");
		Для Каждого КлючЗначение Из ОтметкиВыполненияЗадач Цикл
			Если КлючЗначение.Значение = Ложь Тогда
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли; 
	
	ОбработчикСхемы.ЗадачаИнициаторМаршрутизации = ЗадачаПроцесса;
	
	ДобавитьЭлементыДляОбработкиПослеЗавершенияПредшетсвенника(ОбработчикСхемы, ИмяЭлемента);
			
КонецПроцедуры

// Добавляет элементы схемы для обработки после завершения обработки предшествующего элемента. 
// 
// Параметры:
// 	ОбработчикСхемы - Структура - см. ОбработчикСхемыПроцесса
// 	ИмяЭлемента - Строка - имя предшествующего действия.
//
Процедура ДобавитьЭлементыДляОбработкиПослеЗавершенияПредшетсвенника(ОбработчикСхемы, ИмяЭлемента)
	
	ОбработчикСхемы.ОтметкиПрохожденияСхемы[ИмяЭлемента] = Истина;
	УстановитьОтметкуТекущегоЭлемента(ИмяЭлемента, Ложь, ОбработчикСхемы);
		
	СтрокаТаблицы = ОбработчикСхемы.ПредшественникиЭлементов.Найти(
		ИмяЭлемента, "ИмяПредшественника");
	
	Если ПереходКЭлементуСхемыВозможен(ОбработчикСхемы, ИмяЭлемента, СтрокаТаблицы.Имя) Тогда
		ОбработчикСхемы.ЭлементыДляОбработки.Добавить(СтрокаТаблицы.Имя);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает возможность перехода к следующему элементу схемы.
// 
// Параметры:
//  ОбработчикСхемы - Структура - см. ОбработчикСхемыПроцесса
// 	ПредыдущийЭлемент - Строка - имя элемента в схеме. 
// 	СледующийЭлемент - Строка - имя элемента в схеме.
// 
// Возвращаемое значение:
//  Булево
// 	
Функция ПереходКЭлементуСхемыВозможен(ОбработчикСхемы, ПредыдущийЭлемент, СледующийЭлемент)
	
	ТипыЭлементов = Новый Соответствие();
	
	СтрокаТаблицы = ОбработчикСхемы.ЭлементыСхемы.Найти(ПредыдущийЭлемент, "Имя");
	ТипыЭлементов[ПредыдущийЭлемент] = СтрокаТаблицы.ТипЭлемента;
	
	СтрокаТаблицы = ОбработчикСхемы.ЭлементыСхемы.Найти(СледующийЭлемент, "Имя");
	ТипыЭлементов[СледующийЭлемент] = СтрокаТаблицы.ТипЭлемента; 
	
	РезультатОбработки = 
		РаботаСПроцессамиПоОбработкамОбъектовСобытия.ОбработатьПроверкуВозможностиПереходаКЭлементу(
		ПредыдущийЭлемент, СледующийЭлемент, ТипыЭлементов, ЭтотОбъект);
	
	Если РезультатОбработки.СобытиеОбработано Тогда
		Возврат РезультатОбработки.ПереходВозможен;
	КонецЕсли;
	
	// Стандартная обработка.
	// Проверяется возможность перехода к следующему элементу схемы, принадлежащей текущему
	// комплекмному процессц.	
	//
	// Переход не возможен если:
	//  Текущий элемент действие с отрицательным результатом и следующий элемент является блоком
	//  выполнения.
	//
	
	Если Не СхемыПроцессовКлиентСервер.ЭтоБлокВыполненияСхемы(ТипыЭлементов[СледующийЭлемент]) 
		Или Не СхемыПроцессовКлиентСервер.ЭтоДействиеСхемы(ТипыЭлементов[ПредыдущийЭлемент]) Тогда
	
		Возврат Истина;
	КонецЕсли;
	
	ПроцессыЭлементов = РаботаСКомплекснымиБизнесПроцессамиСервер.
		ПроцессыЭлементовСхемыПоКомплексномуПроцессу(Ссылка);
		
	РезультатПроцессаЭлемента = РегистрыСведений.РезультатыВыполненияПроцессовИЗадач.
		РезультатВыполненияПоОбъекту(
		ПроцессыЭлементов[ПредыдущийЭлемент]);
		
	Если РезультатПроцессаЭлемента <>
		Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно Тогда
		
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции 

// Возвращает наличие невыполненных задач по элементу схемы.
// 
// Параметры:
//  ИмяЭлемента - Строка - имя элемента в схеме. 
//  ОбработчикСхемы - Структура - см. ОбработчикСхемыПроцесса  
// 
// Возвращаемое значение:
//  Булево
//  
Функция ЕстьНевыполненныеЗадачиПоЭлементуСхемы(ИмяЭлемента, ОбработчикСхемы)
	
	Отбор = Новый Структура("ИмяЭлемента", ИмяЭлемента);
	
	СтрокиСЗадачами = ОбработчикСхемы.ЗадачиЭлементовСхемы.НайтиСтроки(Отбор);
	
	// Не обрабатываем элементы-действия, по которым есть незавершенные задачи обработки.
	ЗадачиЭлемента = Новый Массив;
	Для Каждого СтрокаТаблицы Из СтрокиСЗадачами Цикл
		Если ОбработчикСхемы.ЗадачаИнициаторМаршрутизации = СтрокаТаблицы.ЗадачаПроцесса Тогда
			Продолжить;
		КонецЕсли;
		ЗадачиЭлемента.Добавить(СтрокаТаблицы.ЗадачаПроцесса);
	КонецЦикла;
	ЗавершенностьЗадач = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ЗадачиЭлемента, "Выполнена");		
	Для Каждого ЗадачаЭлемента Из ЗадачиЭлемента Цикл
		Если ЗавершенностьЗадач[ЗадачаЭлемента] = Ложь Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

// Удалить все задачи по элементу схемы из обрабочтика.
// 
// Параметры:
//  ИмяЭлемента - Строка - имя элемента в схеме. 
//  ОбработчикСхемы - Структура - см. ОбработчикСхемыПроцесса
//
Процедура УдалитьВсеЗадачиПоЭлементуСхемы(ИмяЭлемента, ОбработчикСхемы)
	
	Отбор = Новый Структура("ИмяЭлемента", ИмяЭлемента);
	СтрокиСЗадачами = ОбработчикСхемы.ЗадачиЭлементовСхемы.НайтиСтроки(Отбор);
	Для Каждого СтрокаТаблицы Из СтрокиСЗадачами Цикл
		ОбработчикСхемы.ЗадачиЭлементовСхемы.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

// Определяет имя элемента схемы для задачи процесса, которой нет в табличной части "ЗадачиЭлементовСхемы"
// для процессов, которые запущены обработкой объекта
// 
// Параметры:
//  ЗадачаПроцесса - ЗадачаСсылка.ЗадачаИсполнителя
//  ЗадачиЭлементовСхемы - ТаблицаЗначений:
//  * ЗадачаПроцесса - ЗадачаСсылка.ЗадачаИсполнителя
//  * ИмяЭлемента - Строка - Имя элемента схемы
// Возвращаемое значение:
//  Строка - Имя элемента схемы
//
Функция ИмяЭлементаСхемыДляЗадачиПроцесса(ЗадачаПроцесса, ЗадачиЭлементовСхемы)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПроцессыДействий.Действие КАК Действие
		|ИЗ
		|	РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПроцессыДействий КАК ПроцессыДействий
		|		ПО ДанныеБизнесПроцессов.БизнесПроцесс = ПроцессыДействий.Процесс
		|		И ДанныеБизнесПроцессов.ВедущаяЗадача = &ВедущаяЗадача";
	
	Запрос.УстановитьПараметр("ВедущаяЗадача", ЗадачаПроцесса);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат "";
	КонецЕсли;	
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Выборка.Следующий();
	ДействиеПроцесса = Выборка.Действие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗадачиЭлементовСхемы.ИмяЭлемента,
		|	ЗадачиЭлементовСхемы.ЗадачаПроцесса
		|ПОМЕСТИТЬ ВТ_ЗадачиСхемы
		|ИЗ
		|	&ЗадачиЭлементовСхемы КАК ЗадачиЭлементовСхемы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ЗадачиСхемы.ИмяЭлемента
		|ИЗ
		|	ВТ_ЗадачиСхемы КАК ВТ_ЗадачиСхемы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПроцессыДействий КАК ПроцессыДействий
		|			ПО ДанныеБизнесПроцессов.БизнесПроцесс = ПроцессыДействий.Процесс
		|			И ПроцессыДействий.Действие = &Действие
		|		ПО ВТ_ЗадачиСхемы.ЗадачаПроцесса = ДанныеБизнесПроцессов.ВедущаяЗадача";
	
	Запрос.УстановитьПараметр("Действие", ДействиеПроцесса);
	Запрос.УстановитьПараметр("ЗадачиЭлементовСхемы", ЗадачиЭлементовСхемы);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ИмяЭлемента;
	КонецЕсли;
	
	Возврат "";
		
КонецФункции	

// Выполняет обработку схемы процесса.
// 
// Параметры:
// 	ОбработчикСхемы - см. ОбработчикСхемыПроцесса
//
Процедура ВыполнитьОбработкуСхемыПроцесса(ОбработчикСхемы)
	
	// Очередь элементов обрабатываем в таком порядке:
	// 1. В начале действия и вложенные процессы.
	// 2. После скрипты.
	// 3. Условия.
	// 4. Разделения.
	// 5. Слияния.
	// 6. Остальные элементы.
	// Порядок обусловлен особенностями работы элементов. Условия,
	// разделения и слияния должны учитывать актуальные данные действий.
	
	Если Состояние <> Перечисления.СостоянияБизнесПроцессов.Активен Тогда
		ВызватьИсключение НСтр("ru = 'Запрещена маршрутизация остановленного или прерванного процесса.'");
	КонецЕсли;	
	
	Пока ОбработчикСхемы.ЭлементыДляОбработки.Количество() > 0 Цикл
		
		// Сворачиваем очередь элементов, чтобы не обрабатывать 2 раза один и те же элементы.
		// Такое возможно если несколько соединительных линий элементов схемы сходятся в слияние.
		// Слияние сработает один раз после всех действий, обработок, условий и разделений. При этом
		// будут учитываться все актуальные данные.
		ОбработчикСхемы.ЭлементыДляОбработки = 
			ОбщегоНазначенияКлиентСервер.СвернутьМассив(ОбработчикСхемы.ЭлементыДляОбработки);
		
		ИндексСледующегоДействия = Неопределено;
		ИндексСледующегоВложенногоПроцесса = Неопределено;
		ИндексСледующегоСкрипта = Неопределено;
		ИндексСледующегоУсловия = Неопределено;
		ИндексСледующегоРазделения = Неопределено;
		ИндексСледующегоСлияния = Неопределено;
		
		Для ИндексЭлемента = 0 По ОбработчикСхемы.ЭлементыДляОбработки.Количество() - 1 Цикл
			
			ИмяЭлемента = ОбработчикСхемы.ЭлементыДляОбработки[ИндексЭлемента];
			
			СтрокаЭлемента = ОбработчикСхемы.ЭлементыСхемы.Найти(ИмяЭлемента, "Имя");
			ТипЭлемента = СтрокаЭлемента.ТипЭлемента;
			
			Если ИндексСледующегоДействия = Неопределено
				И СхемыПроцессовКлиентСервер.ЭтоДействиеСхемы(ТипЭлемента) Тогда
				
				ИндексСледующегоДействия = ИндексЭлемента;
			КонецЕсли;
			
			Если ИндексСледующегоВложенногоПроцесса = Неопределено
				И СхемыПроцессовКлиентСервер.ЭтоВложенныйПроцессСхемы(ТипЭлемента) Тогда
				
				ИндексСледующегоВложенногоПроцесса = ИндексЭлемента;
			КонецЕсли;
			
			Если ИндексСледующегоСкрипта = Неопределено
				И СхемыПроцессовКлиентСервер.ЭтоСкриптСхемы(ТипЭлемента) Тогда
				
				ИндексСледующегоСкрипта = ИндексЭлемента;
			КонецЕсли;
			
			Если ИндексСледующегоУсловия = Неопределено
				И СхемыПроцессовКлиентСервер.ЭтоУсловиеСхемы(ТипЭлемента) Тогда
				
				ИндексСледующегоУсловия = ИндексЭлемента;
			КонецЕсли;
			
			Если ИндексСледующегоРазделения = Неопределено
				И СхемыПроцессовКлиентСервер.ЭтоРазделениеСхемы(ТипЭлемента) Тогда
				
				ИндексСледующегоРазделения = ИндексЭлемента;
			КонецЕсли;
			
			Если ИндексСледующегоСлияния = Неопределено
				И СхемыПроцессовКлиентСервер.ЭтоСлияниеСхемы(ТипЭлемента) Тогда
				
				ИндексСледующегоСлияния = ИндексЭлемента;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ИндексСледующегоДействия <> Неопределено Тогда
			ИндексЭлементаДляОбработки = ИндексСледующегоДействия;
		ИначеЕсли ИндексСледующегоВложенногоПроцесса <> Неопределено Тогда
			ИндексЭлементаДляОбработки = ИндексСледующегоВложенногоПроцесса;
		ИначеЕсли ИндексСледующегоСкрипта <> Неопределено Тогда
			ИндексЭлементаДляОбработки = ИндексСледующегоСкрипта;
		ИначеЕсли ИндексСледующегоУсловия <> Неопределено Тогда
			ИндексЭлементаДляОбработки = ИндексСледующегоУсловия;
		ИначеЕсли ИндексСледующегоРазделения <> Неопределено Тогда
			ИндексЭлементаДляОбработки = ИндексСледующегоРазделения;
		ИначеЕсли ИндексСледующегоСлияния <> Неопределено Тогда
			ИндексЭлементаДляОбработки = ИндексСледующегоСлияния;
		Иначе
			ИндексЭлементаДляОбработки = 0;
		КонецЕсли;
		
		// Берем элемент для обработки
		ИмяЭлемента = ОбработчикСхемы.ЭлементыДляОбработки[ИндексЭлементаДляОбработки];
		
		СтрокаЭлемента = ОбработчикСхемы.ЭлементыСхемы.Найти(ИмяЭлемента, "Имя");
		ТипЭлемента = СтрокаЭлемента.ТипЭлемента;
		
		УстановитьОтметкуТекущегоЭлемента(ИмяЭлемента, Истина, ОбработчикСхемы);
		
		// Выполняем обработку в зависимости от типа элемента.
		Если СхемыПроцессовКлиентСервер.ЭтоСтартСхемы(ТипЭлемента) Тогда
			ОбработатьЭлементСхемыСтарт(ИмяЭлемента, ОбработчикСхемы);
		ИначеЕсли СхемыПроцессовКлиентСервер.ЭтоДействиеСхемы(ТипЭлемента) Тогда
			ОбработатьЭлементСхемыДействие(ИмяЭлемента, ОбработчикСхемы);
		ИначеЕсли СхемыПроцессовКлиентСервер.ЭтоВложенныйПроцессСхемы(ТипЭлемента) Тогда
			ОбработатьЭлементСхемыВложенныйПроцесс(ИмяЭлемента, ОбработчикСхемы);
		ИначеЕсли СхемыПроцессовКлиентСервер.ЭтоСкриптСхемы(ТипЭлемента) Тогда
			ОбработатьЭлементСхемыСкрипт(ИмяЭлемента, ОбработчикСхемы);
		ИначеЕсли СхемыПроцессовКлиентСервер.ЭтоРазделениеСхемы(ТипЭлемента) Тогда
			ОбработатьЭлементСхемыРазделение(ИмяЭлемента, ОбработчикСхемы);
		ИначеЕсли СхемыПроцессовКлиентСервер.ЭтоСлияниеСхемы(ТипЭлемента) Тогда
			ОбработатьЭлементСхемыСлияние(ИмяЭлемента, ОбработчикСхемы);
		ИначеЕсли СхемыПроцессовКлиентСервер.ЭтоУсловиеСхемы(ТипЭлемента) Тогда
			ОбработатьЭлементСхемыУсловие(ИмяЭлемента, ОбработчикСхемы);
		ИначеЕсли СхемыПроцессовКлиентСервер.ЭтоЗавершениеСхемы(ТипЭлемента) Тогда 
			ОбработатьЭлементСхемыЗавершение(ИмяЭлемента, ОбработчикСхемы);
		КонецЕсли;
		
		// Удаляем элемент из очереди обработки.
		ОбработчикСхемы.ЭлементыДляОбработки.Удалить(ИндексЭлементаДляОбработки);
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет обработку элемента старта схемы процесса.
// Для элемента ищется его последователь и добавляется в ОбработчикСхемы.ЭлементыДляОбработки.
//
// Параметры:
//  ИмяЭлемента - Строка - Имя элемента в схеме.
//  ОбработчикСхемы - Структура - см. ОбработчикСхемыПроцесса
//
Процедура ОбработатьЭлементСхемыСтарт(ИмяЭлемента, ОбработчикСхемы)
	
	СтрокаТаблицы = ОбработчикСхемы.ПредшественникиЭлементов.Найти(
		ИмяЭлемента, "ИмяПредшественника");
		
	ОбработчикСхемы.ЭлементыДляОбработки.Добавить(СтрокаТаблицы.Имя);
	
	ОбработчикСхемы.ОтметкиПрохожденияСхемы[ИмяЭлемента] = Истина;
	УстановитьОтметкуТекущегоЭлемента(ИмяЭлемента, Ложь, ОбработчикСхемы);
	
КонецПроцедуры

// Выполняет обработку элемента действия схемы процесса.
// 
// Для элемента создаются служебные задачи процесса и помещает в ОбработчикСхемы.ЗадачиЭлементовСхемы.
// 
// Служебная задача удерживает комплексный процесс от завершения или перехода к след. элементам,
// пока не будут обработаны связанные объекты.
//
// Параметры:
//  ИмяЭлемента - Строка - Имя элемента в схеме.
//  ОбработчикСхемы - Структура - см. ОбработчикСхемыПроцесса
//
Процедура ОбработатьЭлементСхемыДействие(ИмяЭлемента, ОбработчикСхемы)
	
	Если ЕстьНевыполненныеЗадачиПоЭлементуСхемы(ИмяЭлемента, ОбработчикСхемы) Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьВсеЗадачиПоЭлементуСхемы(ИмяЭлемента, ОбработчикСхемы);
		
	СоздатьЗадачиОбработкиЭлементаСхемыДействие(
		ИмяЭлемента,
		ОбработчикСхемы,
		Не ОбработчикСхемы.ОтметкиПрохожденияСхемы[ИмяЭлемента]);
	
	Если ЕстьНевыполненныеЗадачиПоЭлементуСхемы(ИмяЭлемента, ОбработчикСхемы) Тогда
		ОбработчикСхемы.ОтметкиПрохожденияСхемы[ИмяЭлемента] = Ложь;
		Возврат;
	КонецЕсли;
			
	// Переходим к след. элементу, если задачи обработки элемента пропущены.
	ОбработчикСхемы.ОтметкиПрохожденияСхемы[ИмяЭлемента] = Истина;
	УстановитьОтметкуТекущегоЭлемента(ИмяЭлемента, Ложь, ОбработчикСхемы);
	СтрокаТаблицы = ОбработчикСхемы.ПредшественникиЭлементов.Найти(
		ИмяЭлемента, "ИмяПредшественника");
	ОбработчикСхемы.ЭлементыДляОбработки.Добавить(СтрокаТаблицы.Имя);
						
КонецПроцедуры

// Создает задачи обработки элемента схемы Действие и помещает их в
// ОбработчикСхемы.ЗадачиЭлементовСхемы.
// 
// Параметры:
// 	ИмяЭлемента - Строка - имя действия в схеме.
// 	ОбработчикСхемы - Структура - см. ОбработчикСхемыПроцесса
// 	ПерваяОбработкаЭлемента - Булево - признак первой обработки элемента
// 	
Процедура СоздатьЗадачиОбработкиЭлементаСхемыДействие(
	ИмяЭлемента, ОбработчикСхемы, ПерваяОбработкаЭлемента)
		
	Если РаботаСПроцессамиПоОбработкамОбъектовСобытия.ОбработатьСозданиеЗадачДляЭлементаСхемыДействие(
		ИмяЭлемента, ОбработчикСхемы, ЭтотОбъект) Тогда
		
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Стандартная обработка.
	// Создание процессов по обработке действий схемы, принадлежащей комплексному процессу. 
	
	ДанныеПараметров = Справочники.ПараметрыСхемДляКомплексныхПроцессов.ДанныеПараметровСхемы(
		Справочники.ПараметрыСхемДляКомплексныхПроцессов.ПараметрыСхемыПоВладельцу(Ссылка));
	
	НастройкаЭлемента = ДанныеПараметров.НастройкиЭлементов[ИмяЭлемента];
	Если Не ЗначениеЗаполнено(НастройкаЭлемента) Тогда
		
		ТекстИсключения = СтрШаблон( 
			НСтр("ru = 'В схеме процесса не заполнена настройка действия ""%1"".'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			ИмяЭлемента);
			
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	ШаблонНаименования = НСтр("ru = 'Обработка элемента действия ""%1""'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	НаименованиеЗадачи = СтрШаблон(ШаблонНаименования, ИмяЭлемента);
	ЗадачаОбработки = БизнесПроцессы.КомплексныйПроцесс.СоздатьЗадачуОбработкиЭлементаСхемы(
		НаименованиеЗадачи, Ссылка);
	ДобавитьЗадачуОбработкиЭлемента(ИмяЭлемента, ЗадачаОбработки, ОбработчикСхемы);
		
	ИдентификаторНастройки = ДанныеПараметров.ИдентификаторыНастроек[ИмяЭлемента];
	
	СрокОтложенногоСтартаДействия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		НастройкаЭлемента, "СрокОтложенногоСтарта");
	
	ОтложенныйСтартДействия = ЗначениеЗаполнено(СрокОтложенногоСтартаДействия);
	
	СтруктураПредметов = Мультипредметность.ПолучитьДанныеЗаполненияПредметовЭтапа(
		ЭтотОбъект, ИдентификаторНастройки, НастройкаЭлемента);
	
	МенеджерШаблона = ОбщегоНазначения.МенеджерОбъектаПоСсылке(НастройкаЭлемента);
	ИмяТипаПроцесса = МенеджерШаблона.ИмяПроцесса(НастройкаЭлемента);
	ПроцессЭлемента = БизнесПроцессы[ИмяТипаПроцесса].СоздатьБизнесПроцесс();
	
	Если ИмяТипаПроцесса = Справочники.ШаблоныСогласования.ИмяПроцесса(НастройкаЭлемента)
		Или ИмяТипаПроцесса = Справочники.ШаблоныРегистрации.ИмяПроцесса(НастройкаЭлемента)
		Или ИмяТипаПроцесса = Справочники.ШаблоныУтверждения.ИмяПроцесса(НастройкаЭлемента) Тогда
		
		ОбрабатывающийРезультат =
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаЭлемента, "ОбрабатывающийРезультат");
		
		ПроцессЭлемента.Автор = Автор;
		
		Если ЗначениеЗаполнено(ОбрабатывающийРезультат) Тогда
			ПроцессЭлемента.ОбрабатывающийРезультат = ОбрабатывающийРезультат;
		Иначе
			ПроцессЭлемента.ОбрабатывающийРезультат = Автор;
		КонецЕсли;
		
	Иначе
		
		АвторНастройкиДействия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаЭлемента, "Автор");
		
		Если ЗначениеЗаполнено(АвторНастройкиДействия) Тогда
			ПроцессЭлемента.Автор = АвторНастройкиДействия;
		Иначе
			ПроцессЭлемента.Автор = Автор;
		КонецЕсли;
		
	КонецЕсли;
	
	
	ПараметрыЗаполнения = Новый Структура();
	ПараметрыЗаполнения.Вставить("Шаблон", НастройкаЭлемента);
	ПараметрыЗаполнения.Вставить("Предметы", СтруктураПредметов.Предметы);
	ПараметрыЗаполнения.Вставить("ВедущаяЗадача", ЗадачаОбработки);
	ПроцессЭлемента.Заполнить(ПараметрыЗаполнения);
	
	ПроцессЭлемента.Дата = ТекущаяДатаСеанса();
	ПроцессЭлемента.ДополнитьОписание(Описание);
	ПроцессЭлемента.Проект = Проект;
	ПроцессЭлемента.ПроектнаяЗадача = ПроектнаяЗадача;
	
	// Рассчитываем сроки исполнения в случае если по элементу процесс стартует повторно (в цикле).
	// И в прошлый раз процесс элемента завершился корректно (элемент был отмечен пройденным). 
	// В других случаях сроки для процесса берутся как есть из настройки элемента.
	Если Не ПерваяОбработкаЭлемента Тогда
		СрокиИсполненияПроцессовКОРП.РассчитатьСрокИсполненияДляНовогоПроцесса(ПроцессЭлемента);
	КонецЕсли;
	
	РаботаСКомплекснымиБизнесПроцессамиСерверПереопределяемый.
		СоздатьПроцессПоДействиюДоЗаписиПроцесса(ЭтотОбъект, ПроцессЭлемента);
		
	Если ДополнительныеСвойства.Свойство("ОтключитьОбновлениеЗадач") Тогда
		ПроцессЭлемента.ДополнительныеСвойства.Вставить("ОтключитьОбновлениеЗадач", ДополнительныеСвойства.ОтключитьОбновлениеЗадач);
	КонецЕсли;
	ПроцессЭлемента.Записать();
	
	МультипредметностьКОРП.УдалитьДействиеКомплексногоПроцессаИзКэшаПредметовИУчастников(
		НастройкаЭлемента);
	
	РаботаСКомплекснымиБизнесПроцессамиСерверПереопределяемый.
		СоздатьПроцессПоДействиюПослеЗаписиПроцесса(ЭтотОбъект, ПроцессЭлемента);
		
	СписокПолей = ПроцессЭлемента.ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта();
	
	Если СписокПолей.Количество() > 0 Тогда
		
		Если (СписокПолей.Найти("Исполнитель") <> Неопределено 
			Или СписокПолей.Найти("Исполнители") <> Неопределено
			Или СписокПолей.Найти("Участники") <> Неопределено) Тогда
		
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Не определены исполнители следующего шага действия (""%1"").
					|Обратитесь к автору процесса или к администратору.'",
					ОбщегоНазначения.КодОсновногоЯзыка()),
				ПроцессЭлемента.Наименование);
		Иначе
			
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Имеются ошибки заполнения следующего действия (""%1"").
					|Обратитесь к автору процесса или к администратору.'",
					ОбщегоНазначения.КодОсновногоЯзыка()),
				ПроцессЭлемента.Наименование);
			
		КонецЕсли;
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	Попытка
		Если ОтложенныйСтартДействия Тогда
			ПроцессЭлемента.ОтложенныйСтарт();
		Иначе
			
			Если РаботаСЗадачами.ЭтоИсточникЗадач(ПроцессЭлемента.Ссылка) Тогда
				ПараметрыСеанса.ОтключитьОбновлениеЗадач = Истина;
			КонецЕсли;
			
			ПроцессЭлемента.Старт();
			
			ИнтеграцияЗадач.ОбновитьЗадачуПоИсточнику(ПроцессЭлемента.Ссылка);
			ПараметрыСеанса.ОтключитьОбновлениеЗадач = Ложь;
			
		КонецЕсли;
	Исключение
		
		ПараметрыСеанса.ОтключитьОбновлениеЗадач = Ложь;
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Не удалось стартовать следующее действие ""%1"" комплексного процесса.
				|Обратитесь к автору процесса или к администратору
				|
				|Причина:
				|%2'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			ПроцессЭлемента.Наименование,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки;
	
КонецПроцедуры

// Выполняет обработку элемента вложенного процесса схемы.
// 
// Для элемента создаются служебные задачи процесса и помещает в ОбработчикСхемы.ЗадачиЭлементовСхемы.
// 
// Служебная задача удерживает комплексный процесс от завершения или перехода к след. элементам,
// пока не будут обработаны связанные объекты.
//
// Параметры:
//  ИмяЭлемента - Строка - Имя элемента в схеме.
//  ОбработчикСхемы - Структура - см. ОбработчикСхемыПроцесса
//
Процедура ОбработатьЭлементСхемыВложенныйПроцесс(ИмяЭлемента, ОбработчикСхемы)
	
	Если ЕстьНевыполненныеЗадачиПоЭлементуСхемы(ИмяЭлемента, ОбработчикСхемы) Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьВсеЗадачиПоЭлементуСхемы(ИмяЭлемента, ОбработчикСхемы);
	
	СоздатьЗадачиОбработкиЭлементаСхемыВложенныйПроцесс(
		ИмяЭлемента,
		ОбработчикСхемы, 
		Не ОбработчикСхемы.ОтметкиПрохожденияСхемы[ИмяЭлемента]);
	
	Если ЕстьНевыполненныеЗадачиПоЭлементуСхемы(ИмяЭлемента, ОбработчикСхемы) Тогда
		ОбработчикСхемы.ОтметкиПрохожденияСхемы[ИмяЭлемента] = Ложь;
		Возврат;
	КонецЕсли;
			
	// Переходим к след. элементу, если задачи обработки элемента пропущены.
	ОбработчикСхемы.ОтметкиПрохожденияСхемы[ИмяЭлемента] = Истина;
	УстановитьОтметкуТекущегоЭлемента(ИмяЭлемента, Ложь, ОбработчикСхемы);
	СтрокаТаблицы = ОбработчикСхемы.ПредшественникиЭлементов.Найти(
		ИмяЭлемента, "ИмяПредшественника");
	ОбработчикСхемы.ЭлементыДляОбработки.Добавить(СтрокаТаблицы.Имя);
	
КонецПроцедуры

// Создает задачи обработки элемента схемы Вложенный процесс и помещает их в
// ОбработчикСхемы.ЗадачиЭлементовСхемы.
// 
// Параметры:
// 	ИмяЭлемента - Строка - имя действия в схеме.
// 	ОбработчикСхемы - Структура - см. ОбработчикСхемыПроцесса
// 	ПерваяОбработкаЭлемента - Булево - признак первой обработки элемента 
// 	
Процедура СоздатьЗадачиОбработкиЭлементаСхемыВложенныйПроцесс(
	ИмяЭлемента, ОбработчикСхемы, ПерваяОбработкаЭлемента)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Стандартная обработка.
	// Создание процессов по обработке элемента схемы Вложенный процесс. 
	
	ДанныеПараметров = Справочники.ПараметрыСхемДляКомплексныхПроцессов.ДанныеПараметровСхемы(
		Справочники.ПараметрыСхемДляКомплексныхПроцессов.ПараметрыСхемыПоВладельцу(Ссылка));
	
	НастройкаЭлемента = ДанныеПараметров.НастройкиЭлементов[ИмяЭлемента];
	Если Не ЗначениеЗаполнено(НастройкаЭлемента) Тогда
		
		ТекстИсключения = СтрШаблон( 
			НСтр("ru = 'В схеме не заполнена настройка вложенного процесса ""%1"".'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			ИмяЭлемента);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если ТипЗнч(НастройкаЭлемента) = Тип("СправочникСсылка.ИменаПредметов") Тогда
		
		СтрПредмета = Предметы.Найти(НастройкаЭлемента, "ИмяПредмета");
		Если СтрПредмета = Неопределено Тогда
			
			ТекстИсключения = СтрШаблон( 
				НСтр("ru = 'В процессе нет данного предмета ""%1"".'",
					ОбщегоНазначения.КодОсновногоЯзыка()),
				НастройкаЭлемента);
			
			ВызватьИсключение ТекстИсключения;
			
		КонецЕсли;
		
		Предмет = СтрПредмета.Предмет;
		Обработка = Справочники.ОбработкиОбъектов.ОбработкаОбъекта(Предмет);
		Если ЗначениеЗаполнено(Обработка) Тогда
			
			СостояниеОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Обработка, "Состояние");
			
			Если СостояниеОбработки = Перечисления.СостоянияОбработкиОбъектов.Выполняется Тогда
				ВызватьИсключение 
					СтрШаблон(НСтр("ru = 'По предмету ""%1"" уже есть активная обработка.'"), Предмет);
					
			ИначеЕсли СостояниеОбработки = Перечисления.СостоянияОбработкиОбъектов.Завершена Тогда
					
				// поместим в историю
				ОбработкиОбъектов.ПрерватьОбработкуОбъекта(Предмет, "");
				
				Обработка = Неопределено;
						
			КонецЕсли;
				
		КонецЕсли;		
			
		Если Не ЗначениеЗаполнено(Обработка) Тогда	
				
			// создадим обработку и заполним по ПОД
			Обработка = Справочники.ОбработкиОбъектов.НоваяОбработкаОбъекта(Предмет);
			
			// заполняем по ПОД
			ПравилаОбработкиСервер.ЗаполнитьДействияПрограммно(Предмет, Автор);
			
		КонецЕсли;
		
		// создаем задачу КП и начинаем обработку
		Если ЗначениеЗаполнено(Обработка) Тогда
			
			ШаблонНаименования = НСтр("ru = 'Обработка элемента вложенного процесса ""%1""'",
				ОбщегоНазначения.КодОсновногоЯзыка());
			НаименованиеЗадачи = СтрШаблон(ШаблонНаименования, ИмяЭлемента);
			ЗадачаОбработки = БизнесПроцессы.КомплексныйПроцесс.СоздатьЗадачуОбработкиЭлементаСхемы(
				НаименованиеЗадачи, Ссылка);
			ДобавитьЗадачуОбработкиЭлемента(ИмяЭлемента, ЗадачаОбработки, ОбработчикСхемы);
			
			Если Не ОбработкаОчередиЗаданийСервер.ОбработатьЗапускОбработкиПоЗадачеЭлемента(
				ЗадачаОбработки, СтрПредмета.ИмяПредмета) Тогда

				// это в файловом варианте - без диспетчера
				ОбработкаОбъект = Обработка.ПолучитьОбъект();
				ОбработкаОбъект.ДополнительныеСвойства.Вставить("ВедущаяЗадача", ЗадачаОбработки);
				ОбработкиОбъектов.НачатьОбработку(ОбработкаОбъект);
				
			КонецЕсли;
			
		КонецЕсли;	

		Возврат;
				
	КонецЕсли;	
	
	
	ШаблонНаименования = НСтр("ru = 'Обработка элемента вложенного процесса ""%1""'",
		ОбщегоНазначения.КодОсновногоЯзыка());
	НаименованиеЗадачи = СтрШаблон(ШаблонНаименования, ИмяЭлемента);
	ЗадачаОбработки = БизнесПроцессы.КомплексныйПроцесс.СоздатьЗадачуОбработкиЭлементаСхемы(
		НаименованиеЗадачи, Ссылка);
	ДобавитьЗадачуОбработкиЭлемента(ИмяЭлемента, ЗадачаОбработки, ОбработчикСхемы);
		
	ИдентификаторНастройки = ДанныеПараметров.ИдентификаторыНастроек[ИмяЭлемента];
	
	РеквизтыНастройкиДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		НастройкаЭлемента, "СрокОтложенногоСтарта, Автор");
	
	ОтложенныйСтартДействия = ЗначениеЗаполнено(РеквизтыНастройкиДействия.СрокОтложенногоСтарта);
	
	СтруктураПредметов = Мультипредметность.ПолучитьДанныеЗаполненияПредметовЭтапа(
		ЭтотОбъект, ИдентификаторНастройки, НастройкаЭлемента);
	
	ПроцессЭлемента = БизнесПроцессы.КомплексныйПроцесс.СоздатьБизнесПроцесс();
	
	Если ЗначениеЗаполнено(РеквизтыНастройкиДействия.Автор) Тогда
		ПроцессЭлемента.Автор = РеквизтыНастройкиДействия.Автор;
	Иначе
		ПроцессЭлемента.Автор = Автор;
	КонецЕсли;
	
	ПараметрыЗаполнения = Новый Структура();
	ПараметрыЗаполнения.Вставить("Шаблон", НастройкаЭлемента);
	ПараметрыЗаполнения.Вставить("Предметы", СтруктураПредметов.Предметы);
	ПроцессЭлемента.Заполнить(ПараметрыЗаполнения);
	
	ПроцессЭлемента.Дата = ТекущаяДатаСеанса();
	ПроцессЭлемента.ДополнитьОписание(Описание);
	ПроцессЭлемента.Проект = Проект;
	ПроцессЭлемента.ПроектнаяЗадача = ПроектнаяЗадача;
	
	// Рассчитываем сроки исполнения в случае если по элементу процесс стартует повторно (в цикле).
	// И в прошлый раз процесс элемента завершился корректно (элемент был отмечен пройденным). 
	// В других случаях сроки для процесса берутся как есть из настройки элемента.
	Если Не ПерваяОбработкаЭлемента Тогда
		СрокиИсполненияПроцессовКОРП.РассчитатьСрокИсполненияДляНовогоПроцесса(ПроцессЭлемента);
	КонецЕсли;
		
	РаботаСКомплекснымиБизнесПроцессамиСерверПереопределяемый.
		СоздатьПроцессПоДействиюДоЗаписиПроцесса(ЭтотОбъект, ПроцессЭлемента);
		
	ПроцессЭлемента.Записать();
	
	МультипредметностьКОРП.УдалитьДействиеКомплексногоПроцессаИзКэшаПредметовИУчастников(
		НастройкаЭлемента);
	
	РаботаСКомплекснымиБизнесПроцессамиСерверПереопределяемый.
		СоздатьПроцессПоДействиюПослеЗаписиПроцесса(ЭтотОбъект, ПроцессЭлемента);
		
	СписокПолей = ПроцессЭлемента.ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта();
	
	Если СписокПолей.Количество() > 0 Тогда
		
		Если СписокПолей.Найти("Схема") <> Неопределено Тогда
			
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Схема вложенного процесса (""%1"") настроена неверно.
					|Обратитесь к автору текущего процесса или к администратору.'",
					ОбщегоНазначения.КодОсновногоЯзыка()),
				ПроцессЭлемента.Наименование);
			
		Иначе
			
			ТекстОшибки = СтрШаблон(
				НСтр("ru = 'Имеются ошибки настройки следующего элемента схемы (""%1"").
					|Обратитесь к автору процесса или к администратору.'",
					ОбщегоНазначения.КодОсновногоЯзыка()),
				ПроцессЭлемента.Наименование);
			
		КонецЕсли;
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
			
	Попытка
		Если ОтложенныйСтартДействия Тогда
			ПроцессЭлемента.ОтложенныйСтарт();
		Иначе
			
			Если РаботаСЗадачами.ЭтоИсточникЗадач(ПроцессЭлемента.Ссылка) Тогда
				ПараметрыСеанса.ОтключитьОбновлениеЗадач = Истина;
			КонецЕсли;
			
			ПроцессЭлемента.Старт();
			
			ИнтеграцияЗадач.ОбновитьЗадачуПоИсточнику(ПроцессЭлемента.Ссылка);
			ПараметрыСеанса.ОтключитьОбновлениеЗадач = Ложь;
			
		КонецЕсли;
	Исключение
		
		ПараметрыСеанса.ОтключитьОбновлениеЗадач = Ложь;
		
		ТекстОшибки = СтрШаблон(
			НСтр("ru = 'Не удалось стартовать вложенный процесс ""%1"".
				|Обратитесь к автору процесса или к администратору
				|Причина:
				|%2'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			ПроцессЭлемента.Наименование,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ВызватьИсключение ТекстОшибки;
		
	КонецПопытки;
	
	// Ведущую задачу помещаем в процесс после старта, т.к. процесс элемента
	// может завершиться сразу при старте и нужно исключить его влияние при завершении
	// на маршрутизацию текущего процесса. Если этого не сделать, то будет коллизия.
	//
	// Процесс элемента можетзавершиться сразу, если состоит из элементов не предполагающих ожидания.
	// 
	// Если процесс элемента завершился при старте, то отмечаем ведущую задачу выполненной,
	// чтобы продолжить обход схемы в текущем сеансе. 
	
	ПроцессЭлемента.ВедущаяЗадача = ЗадачаОбработки;
	ПроцессЭлемента.Записать();
	
	Если ПроцессЭлемента.Завершен Тогда
		ЗадачаОбработкиОбъект = ЗадачаОбработки.ПолучитьОбъект();
		ЗадачаОбработкиОбъект.Выполнена = Истина;
		ЗадачаОбработкиОбъект.Записать();
	КонецЕсли;
		
КонецПроцедуры

// Выполняет обработку элемента скрипта схемы. 
//
// Параметры:
//  ИмяЭлемента - Строка - Имя элемента в схеме.
//  ОбработчикСхемы - Структура - см. ОбработчикСхемыПроцесса
//
Процедура ОбработатьЭлементСхемыСкрипт(ИмяЭлемента, ОбработчикСхемы)
	
	ВыполнитьСкриптСхемы(ИмяЭлемента, ОбработчикСхемы);
	
	СтрокаТаблицы = ОбработчикСхемы.ПредшественникиЭлементов.Найти(
		ИмяЭлемента, "ИмяПредшественника");
	
	ОбработчикСхемы.ЭлементыДляОбработки.Добавить(СтрокаТаблицы.Имя);
	
	ОбработчикСхемы.ОтметкиПрохожденияСхемы[ИмяЭлемента] = Истина;
	УстановитьОтметкуТекущегоЭлемента(ИмяЭлемента, Ложь, ОбработчикСхемы);
	
КонецПроцедуры

// Выполняет скрипт схемы.
// 
// Параметры:
//  ИмяЭлемента - Строка - Имя элемента в схеме.
//  ОбработчикСхемы - Структура - см. ОбработчикСхемыПроцесса
//
Процедура ВыполнитьСкриптСхемы(ИмяЭлемента, ОбработчикСхемы)
	
	Если РаботаСПроцессамиПоОбработкамОбъектовСобытия.ОбработатьВыполнениеСкриптаСхемы(
		ИмяЭлемента, ЭтотОбъект) Тогда
		
		Возврат;
	КонецЕсли;
	
	// Стандартная обработка.
	// Выполнение скрипта схемы, принадлежащей комплексному процессу. 
	
	ДанныеПараметров = Справочники.ПараметрыСхемДляКомплексныхПроцессов.ДанныеПараметровСхемы(
		Справочники.ПараметрыСхемДляКомплексныхПроцессов.ПараметрыСхемыПоВладельцу(Ссылка));
	
	СкриптСхемы = ДанныеПараметров.НастройкиЭлементов[ИмяЭлемента];
	Если Не ЗначениеЗаполнено(СкриптСхемы) Тогда
		ТекстИсключения = СтрШаблон(
			НСтр("ru = 'Отсутствует настройка скрипта ""%1"" в схеме комплексного процесса.'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			ИмяЭлемента);
			
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Попытка
		Справочники.СкриптыСхемДляКомплексныхПроцессов.ВыполнитьСкриптСхемы(
			СкриптСхемы, ЭтотОбъект);
	Исключение
		Инфо = ИнформацияОбОшибке();
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Выполнение скрипта схемы процесса'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,
			Ссылка,
			ПодробноеПредставлениеОшибки(Инфо));
			
		ТекстИсключения = СтрШаблон(
			НСтр("ru = 'При выполнения скрипта ""%1"" схемы возникла ошибка:
				|%2
				|Обратитесь к администратору.'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			ИмяЭлемента, 
			Инфо.Описание);
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;	
		
КонецПроцедуры

// Выполняет обработку элемента разделения схемы процесса.
// Для элемента ищутся его последователи и добавляются в ОбработчикСхемы.ЭлементыДляОбработки.
//
// Параметры:
//  ИмяЭлемента - Строка - Имя элемента в схеме.
//  ОбработчикСхемы - Структура - см. ОбработчикСхемыПроцесса
//
Процедура ОбработатьЭлементСхемыРазделение(ИмяЭлемента, ОбработчикСхемы)
	
	ПоследователиЭлемента = ОбработчикСхемы.ПредшественникиЭлементов.НайтиСтроки(
		Новый Структура("ИмяПредшественника", ИмяЭлемента));
		
	Для Каждого СтрокаТаблицы Из ПоследователиЭлемента Цикл
		ОбработчикСхемы.ЭлементыДляОбработки.Добавить(СтрокаТаблицы.Имя);
	КонецЦикла;
		
	ОбработчикСхемы.ОтметкиПрохожденияСхемы[ИмяЭлемента] = Истина;
	УстановитьОтметкуТекущегоЭлемента(ИмяЭлемента, Ложь, ОбработчикСхемы);
	
КонецПроцедуры

// Выполняет обработку элемента слияния схемы процесса.
// 
// Проверят выполняются ли (отмечены текущими) предшествующие блоки выполнения.
// Если таких нет, то добавляет в элементы для обработки последователя.
//
// Параметры:
//  ИмяЭлемента - Строка - Имя элемента в схеме.
//  ОбработчикСхемы - Структура - см. ОбработчикСхемыПроцесса
//
Процедура ОбработатьЭлементСхемыСлияние(ИмяЭлемента, ОбработчикСхемы)
	
	// Найдем все предшествующие блоки выполнения.
	ИменаПредшественников = ИменаБлоковВыполненияПредшествующихСлиянию(ИмяЭлемента, ОбработчикСхемы);
		
	// Проверим есть ли среди текущих элементов предшествующие блоки выполнения.
	
	ЕстьВыполняющиесяПредшественники = Ложь;
	
	Для Каждого ИмяПредшественника Из ИменаПредшественников Цикл
		Если ОбработчикСхемы.ТекущиеЭлементыСхемы[ИмяПредшественника] = Истина Тогда
			ЕстьВыполняющиесяПредшественники = Истина;
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	
	УстановитьОтметкуТекущегоЭлемента(ИмяЭлемента, Ложь, ОбработчикСхемы);
	
	Если ЕстьВыполняющиесяПредшественники Тогда
		Возврат;
	КонецЕсли;
	
	// Добавим последователей слияния в обрабатываемые элементы.
	СтрокаТаблицы = ОбработчикСхемы.ПредшественникиЭлементов.Найти(
		ИмяЭлемента, "ИмяПредшественника");
	ОбработчикСхемы.ЭлементыДляОбработки.Добавить(СтрокаТаблицы.Имя);
	
	// Установим признак прохождения элемента.
	ОбработчикСхемы.ОтметкиПрохожденияСхемы[ИмяЭлемента] = Истина;
	
КонецПроцедуры

// Возвращает имена блоков выполнения, которые предшествуют слиянию.
// Имена ищутся между слиянием его парным разделением.
//
// Параметры:
//  ИмяСлияния - Строка - имя слияния
//
// Возвращаемое значение:
//  Массив - массив имен (строк) блоков выполнения.
//
Функция ИменаБлоковВыполненияПредшествующихСлиянию(ИмяСлияния, ОбработчикСхемы)
	
	// Определяются все разделения которые входят во всех пути с слиянием.
	// Из найденных разделений выбирается ближайшее к слиянию - это разделение
	// является парным для слияния.
	// Далее выбираются все блоки выполнения между разделением и слиянием.
		
	ПутиССлиянием = Новый Массив;
	
	// Находим все разделения предшествующие текущему слиянию.
	ИменаРазделений = Новый Соответствие;
	
	Для Каждого Путь Из ОбработчикСхемы.ПутиСхемы Цикл
		
		// Пропускаем пути, в которых нет текущего слияния.
		Если Путь.Найти(ИмяСлияния) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Добавляем путь в список путей с текущим слиянием.
		ПутиССлиянием.Добавить(Путь);
		
		Для Каждого ЭлементПути Из Путь Цикл
			
			// Прерываем анализ элементов пути после рассматриваемого слияния.
			Если ЭлементПути = ИмяСлияния Тогда
				Прервать;
			КонецЕсли;
			
			// Пропускаем все элементы, которые не являются слиянием.			
			СтрокаЭлемента = ОбработчикСхемы.ЭлементыСхемы.Найти(ЭлементПути, "Имя");
			Если Не СхемыПроцессовКлиентСервер.ЭтоРазделениеСхемы(СтрокаЭлемента.ТипЭлемента) Тогда 
				Продолжить;
			КонецЕсли;
			
			// Переходим к следующему элементу, если
			// текущее слияние уже было добавлено имена разделений.
			Если ИменаРазделений.Получить(ЭлементПути) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			// Добавляем разделение в список всех разделений до
			// текущего слияния.
			ИменаРазделений.Вставить(ЭлементПути, ЭлементПути);
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Исключим разделения которые не входят во все пути с слиянием.
	РазделенияКИсключению = Новый Массив;
	Для Каждого ЭлементСоответствия Из ИменаРазделений Цикл
		
		Для Каждого ПутьССлиянием Из ПутиССлиянием Цикл
			
			Если ПутьССлиянием.Найти(ЭлементСоответствия.Ключ) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			РазделенияКИсключению.Добавить(ЭлементСоответствия.Ключ);
			Прервать;
		КонецЦикла;
		
	КонецЦикла;
	Для Каждого РазделениеКИсключению Из РазделенияКИсключению Цикл
		ИменаРазделений.Удалить(РазделениеКИсключению);
	КонецЦикла;
	
	// Ищем ближайшее разделение к слиянию.
	// Оно будет парным для слияния.
	ИмяРазделения = "";
	РасстояниеДоСлияния = 2147483647;
	
	Для Каждого ПутьССлиянием Из ПутиССлиянием Цикл
		
		ПозицияСлиянияВПути = ПутьССлиянием.Найти(ИмяСлияния);
		
		Для Каждого ЭлементСоответствия Из ИменаРазделений Цикл
			
			ПозицияРазделенияВПути = ПутьССлиянием.Найти(ЭлементСоответствия.Ключ);
			
			РасстояниеМеждуЭлементами = ПозицияСлиянияВПути - ПозицияРазделенияВПути;
			
			Если РасстояниеМеждуЭлементами < РасстояниеДоСлияния Тогда
				ИмяРазделения = ЭлементСоответствия.Ключ;
				РасстояниеДоСлияния = РасстояниеМеждуЭлементами;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Ищем все блоки выполнения между разделением и слиянием.
	ИменаБлоковВыполнения = Новый Массив;
	Для Каждого ПутьССлиянием Из ПутиССлиянием Цикл
		
		ИндексНачала = ПутьССлиянием.Найти(ИмяРазделения) + 1;
		ИндексОкончания = ПутьССлиянием.Найти(ИмяСлияния) - 1;
		
		Если ИндексНачала > ИндексОкончания Тогда
			Продолжить;
		КонецЕсли;
		
		Для ИндексЭлемента = ИндексНачала По ИндексОкончания Цикл
			
			ИмяЭлемента = ПутьССлиянием[ИндексЭлемента];
			
			СтрокаЭлемента = ОбработчикСхемы.ЭлементыСхемы.Найти(ИмяЭлемента, "Имя");
			Если Не СхемыПроцессовКлиентСервер.ЭтоБлокВыполненияСхемы(
				СтрокаЭлемента.ТипЭлемента) Тогда
				 
				Продолжить;
			КонецЕсли;
			
			ИменаБлоковВыполнения.Добавить(ИмяЭлемента);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ИменаБлоковВыполнения = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ИменаБлоковВыполнения);
	
	Возврат ИменаБлоковВыполнения;
	
КонецФункции

// Выполняет обработку элемента условия схемы процесса.
// 
// Вычисляет результат и в зависимости от результата помещает следующий элемент
// в ОбработчикСхемы.ЭлементыДляОбработки.
//
// Параметры:
//  ИмяЭлемента - Строка - Имя элемента в схеме.
//  ОбработчикСхемы - Структура - см. ОбработчикСхемыПроцесса
//
Процедура ОбработатьЭлементСхемыУсловие(ИмяЭлемента, ОбработчикСхемы)
	
	РезультатУсловия = РезультатУсловияСхемыПроцесса(ИмяЭлемента, ОбработчикСхемы);
	
	Отбор = Новый Структура;
	Отбор.Вставить("ИмяПредшественника", ИмяЭлемента);
	Отбор.Вставить("РезультатУсловияПерехода",
		СхемыПроцессовСервер.РезультатУсловияПереходаСтрокой(РезультатУсловия)); 
	
	ПоследователиЭлемента = ОбработчикСхемы.ПредшественникиЭлементов.НайтиСтроки(Отбор);
	
	ОбработчикСхемы.ЭлементыДляОбработки.Добавить(ПоследователиЭлемента[0].Имя);
		
	ОбработчикСхемы.ОтметкиПрохожденияСхемы[ИмяЭлемента] = Истина;
	УстановитьОтметкуТекущегоЭлемента(ИмяЭлемента, Ложь, ОбработчикСхемы);
	
	РегистрыСведений.РезультатыВыполненияУсловийСхемПроцессов.ЗаписатьРезультатУсловия(
		ИмяЭлемента, ЭтотОбъект.Ссылка, РезультатУсловия);
	
КонецПроцедуры

// Возвращает результат условия схемы процесса.
// 
// Параметры:
//  ИмяЭлемента - Строка - Имя элемента в схеме.
//  ОбработчикСхемы - Структура - см. ОбработчикСхемыПроцесса
// 	
// Возвращаемое значение:
//  Булево
// 	
Функция РезультатУсловияСхемыПроцесса(ИмяЭлемента, ОбработчикСхемы) Экспорт
	
	РезультатОбработки = 
		РаботаСПроцессамиПоОбработкамОбъектовСобытия.ОбработатьПроверкуУсловияСхемы(
		ИмяЭлемента, ОбработчикСхемы.Схема, ОбработчикСхемы.ТипыЭлементов, ЭтотОбъект);
		
	Если РезультатОбработки.Обработано Тогда
		Возврат РезультатОбработки.РезультатПроверки;
	КонецЕсли;
	
	// Стандартная обработка.
	// Выполнение условия схемы, принадлежащей комплексному процессу.
	
	РезультатУсловия = Ложь;
	
	ДанныеПараметров =
		Справочники.ПараметрыСхемДляКомплексныхПроцессов.ДанныеПараметровСхемы(
		Справочники.ПараметрыСхемДляКомплексныхПроцессов.ПараметрыСхемыПоВладельцу(Ссылка));
	
	НастройкаУсловия = ДанныеПараметров.НастройкиЭлементов[ИмяЭлемента];
	
	Если ТипЗнч(НастройкаУсловия) <> Тип("НастройкиКомпоновкиДанных")
		Или НастройкаУсловия.Отбор.Элементы.Количество() = 0  Тогда
		
		ТекстИсключения = СтрШаблон(
			НСтр("ru = 'Не заполнено условие ""%1"" в схеме комплексного процесса.'",
				ОбщегоНазначения.КодОсновногоЯзыка()),
			ИмяЭлемента);
			
		ВызватьИсключение ТекстИсключения; 
	КонецЕсли;
	
	Попытка
		РезультатУсловия = РаботаСКомплекснымиБизнесПроцессамиСервер.РезультатУсловияСхемы(
			НастройкаУсловия, ЭтотОбъект);
	Исключение
		Инфо = ИнформацияОбОшибке();
		
		ИмяСобытия = НСтр("ru = 'Проверка условия схемы комплексного процесса'",
			ОбщегоНазначения.КодОсновногоЯзыка()); 
		
		ЗаписьЖурналаРегистрации(
			ИмяСобытия,
			УровеньЖурналаРегистрации.Ошибка,,
			Ссылка,
			ПодробноеПредставлениеОшибки(Инфо));
			
		ТекстИсключения = СтрШаблон(
			НСтр("ru = 'При проверке условия ""%1"" схемы комплексного процесса возникла ошибка:
				|%2
				|Обратитесь к администратору.'", ОбщегоНазначения.КодОсновногоЯзыка()),
			ИмяЭлемента, 
			Инфо.Описание);
		ВызватьИсключение ТекстИсключения;
		
	КонецПопытки;	
			
	Возврат РезультатУсловия; 
	
КонецФункции

// Выполняет обработку элемента завершения схемы процесса.
//
// Параметры:
//  ИмяЭлемента - Строка - Имя элемента в схеме.
//  ОбработчикСхемы - Структура - см. ОбработчикСхемыПроцесса
//
Процедура ОбработатьЭлементСхемыЗавершение(ИмяЭлемента, ОбработчикСхемы)
	
	ОбработчикСхемы.ОтметкиПрохожденияСхемы[ИмяЭлемента] = Истина;
	УстановитьОтметкуТекущегоЭлемента(ИмяЭлемента, Ложь, ОбработчикСхемы);
	
КонецПроцедуры

// Очищает сведения обработки схемы в данных процесса.
//
Процедура ОчиститьСведенияОбработкиСхемыВПроцессе()
	
	ЗадачиЭлементовСхемы.Очистить();
	ОтметкиПрохожденияСхемы.Очистить();
	ТекущиеЭлементыСхемы.Очистить();
	
КонецПроцедуры

// Отмечает текущим элемент схемы с типом Старт.
//
Процедура ОтметитьЭлементСтартаТекущими()
	
	Если Не ЭтоПроцессСоСхемой() Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСхемы = Справочники.СхемыПроцессов.ДанныеСхемыПроцесса(Схема);
	ТипыВсехЭлементов = СхемыПроцессовКлиентСервер.ТипыВсехЭлементовПоДаннымСхемы(ДанныеСхемы);
	Для Каждого ИмяЭлементаИТип Из ТипыВсехЭлементов Цикл
		ИмяЭлемента = ИмяЭлементаИТип.Ключ;
		ТипЭлемента = ИмяЭлементаИТип.Значение;
		Если СхемыПроцессовКлиентСервер.ЭтоСтартСхемы(ТипЭлемента) Тогда
			СтрокаТаблицы = ТекущиеЭлементыСхемы.Добавить();
			СтрокаТаблицы.ИмяЭлемента = ИмяЭлемента;
			Прервать; 
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти

#Область ТаблицаЭтапов

Функция ЭтапыДляЗапуска(ПослеПроцесса)
	
	МассивЭтаповДляЗапуска = Новый Массив();
	
	Если ПослеПроцесса = Неопределено Тогда
		
		Для Каждого ЭтапБизнесПроцесса Из Этапы Цикл
			
			Если ЗапускЭтапаПроцессаВозможен(ЭтапБизнесПроцесса, Ложь) Тогда
				МассивЭтаповДляЗапуска.Добавить(ЭтапБизнесПроцесса);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого ЭтапПроцесса Из Этапы Цикл
			
			Если ЭтапПроцесса.ЗапущенныйБизнесПроцесс <> ПослеПроцесса Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого Предшественник Из ПредшественникиЭтапов Цикл
				
				Если Предшественник.ИдентификаторПредшественника <> ЭтапПроцесса.ИдентификаторЭтапа Тогда
					Продолжить;
				КонецЕсли;
				
				ЭтапБизнесПроцесса = ПолучитьЭтапПоИдентификатору(Предшественник.ИдентификаторПоследователя);
				
				Если ЭтапБизнесПроцесса = Неопределено Тогда 
					
					Если ВариантМаршрутизации <> Перечисления.ВариантыМаршрутизацииЗадач.Последовательно Тогда
						Продолжить;
					КонецЕсли;
					
					Индекс = Этапы.Индекс(ЭтапПроцесса);
					
					Если НЕ (Индекс < Этапы.Количество() - 1
							И ЗапускЭтапаПроцессаВозможен(Этапы[Индекс+1], Ложь)) Тогда
						
						Продолжить;
						
					КонецЕсли;
					
					МассивЭтаповДляЗапуска.Добавить(Этапы[Индекс+1]);
					
				Иначе
					
					Если ЗапускЭтапаПроцессаВозможен(ЭтапБизнесПроцесса, Ложь) Тогда
						МассивЭтаповДляЗапуска.Добавить(ЭтапБизнесПроцесса);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат МассивЭтаповДляЗапуска;
	
КонецФункции

// Процедура для создания процессов в рамках комплексного процесса
// Параметры:
//	ЭтапДляЗапуска - строка табличной части Этапы
//	ФормируемыеБизнесПроцессы - массив созданных объектов бизнес-процессов
//	ТочкаМаршрутаБизнесПроцесса - точка маршрута комплексного процесса, на которой создаются новые процессы
//	СтартоватьСразу - флаг, показывающий, что созданный процесс необходимо немедленно стартовать
//
//	Флаг "СтартоватьСразу" необходимо устанавливать в Истина, если процессы создаются вручную при 
//	завершении очередного действия комплексного процесса. Значение Ложь необходимо установить, 
//	если старт вложенных процессов выполняется стандартным механизмом бизнес-процессов.
Процедура СоздатьПроцессПоЭтапу(ЭтапДляЗапуска, ФормируемыеБизнесПроцессы, ТочкаМаршрутаБизнесПроцесса, СтартоватьСразу)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ЗначениеЗаполнено(ЭтапДляЗапуска.ШаблонБизнесПроцесса) Тогда
		
		ОтложенныйСтарт = ЗначениеЗаполнено(ЭтапДляЗапуска.ШаблонБизнесПроцесса.СрокОтложенногоСтарта);
		
		СтруктураПредметов = Мультипредметность.ПолучитьДанныеЗаполненияПредметовЭтапа(
			ЭтотОбъект, ЭтапДляЗапуска.ИдентификаторЭтапа, ЭтапДляЗапуска.ШаблонБизнесПроцесса);
		
		//создается бизнес-процесс по шаблону
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтапДляЗапуска.ШаблонБизнесПроцесса, "Автор")
			И ЗначениеЗаполнено(ЭтапДляЗапуска.ШаблонБизнесПроцесса.Автор) Тогда
			БизнесПроцесс = СоздатьБизнесПроцессПоТипуШаблонаБизнесПроцесса(
				ЭтапДляЗапуска.ШаблонБизнесПроцесса, 
				ЭтапДляЗапуска.ИдентификаторЭтапа, 
				СтруктураПредметов);
		Иначе
			БизнесПроцесс = СоздатьБизнесПроцессПоТипуШаблонаБизнесПроцесса(
				ЭтапДляЗапуска.ШаблонБизнесПроцесса, 
				ЭтапДляЗапуска.ИдентификаторЭтапа, 
				СтруктураПредметов,
				Автор);
		КонецЕсли;
				
		БизнесПроцесс.Дата = ТекущаяДатаСеанса();
		БизнесПроцесс.ДополнитьОписание(Описание);
		БизнесПроцесс.Проект = Проект;
		БизнесПроцесс.ПроектнаяЗадача = ПроектнаяЗадача;
		
		ЭтапДляЗапуска.ЗадачаВыполнена = Ложь;
		
		// Если необходимо стартовать процесс сразу, то для него вручную создается ведущая задача
		Если СтартоватьСразу ИЛИ ОтложенныйСтарт Тогда
			ВедущаяЗадачаДействия = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
			ВедущаяЗадачаДействия.Дата = ТекущаяДатаСеанса();
			ВедущаяЗадачаДействия.БизнесПроцесс = Ссылка;
			ВедущаяЗадачаДействия.ТочкаМаршрута = ТочкаМаршрутаБизнесПроцесса;
			
			РаботаСКомплекснымиБизнесПроцессамиСерверПереопределяемый.СоздатьПроцессПоДействиюЗаполнениеВедущейЗадачи(
				ЭтотОбъект, ВедущаяЗадачаДействия);
			
			ВедущаяЗадачаДействия.Записать();
			БизнесПроцесс.ВедущаяЗадача = ВедущаяЗадачаДействия.Ссылка;
		КонецЕсли;
		
		РаботаСКомплекснымиБизнесПроцессамиСерверПереопределяемый.СоздатьПроцессПоДействиюДоЗаписиПроцесса(
			ЭтотОбъект, БизнесПроцесс);
		
		БизнесПроцесс.Записать();
		
		МультипредметностьКОРП.УдалитьДействиеКомплексногоПроцессаИзКэшаПредметовИУчастников(
			ЭтапДляЗапуска.ШаблонБизнесПроцесса);
		
		РаботаСКомплекснымиБизнесПроцессамиСерверПереопределяемый.СоздатьПроцессПоДействиюПослеЗаписиПроцесса(
			ЭтотОбъект, БизнесПроцесс);
			
		СписокПолей = БизнесПроцесс.ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта();
		Если СписокПолей.Количество() > 0 Тогда
			
			Если (СписокПолей.Найти("Исполнитель") <> Неопределено 
				Или СписокПолей.Найти("Исполнители") <> Неопределено
				Или СписокПолей.Найти("Участники") <> Неопределено) Тогда
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не определены исполнители следующего шага процесса (""%1"").
						|Обратитесь к автору процесса или к администратору.'"),
					БизнесПроцесс.Наименование);
				
			ИначеЕсли СписокПолей.Найти("Схема") <> Неопределено Тогда
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Схема действия (""%1"") настроена неверно.
						| Обратитесь к автору процесса или к администратору.'"),
					БизнесПроцесс.Наименование);
			Иначе
				ТекстОшибки = СтрШаблон(
					НСтр("ru = 'Имеются ошибки заполнения следующего шага процесса (""%1"").
						|Обратитесь к автору процесса или к администратору.'"),
					БизнесПроцесс.Наименование);
			КонецЕсли;
			
			ВызватьИсключение ТекстОшибки;
		КонецЕсли;
		
		// Рассчитываем сроки исполнения действия в случае если оно стартует повторно (в цикле).
		Если ЭтапДляЗапуска.ЗапущенныйБизнесПроцесс <> Неопределено Тогда
			СрокиИсполненияПроцессовКОРП.РассчитатьСрокИсполненияДляНовогоПроцесса(БизнесПроцесс);
			РаботаСБизнесПроцессами.ЗаписатьПроцесс(БизнесПроцесс, "ЗаписьСОбновлениемОбщегоСпискаПроцессов");
		КонецЕсли;
		
		// Если необходимо стартовать процесс сразу, то выполняется его старт
		Если СтартоватьСразу ИЛИ ОтложенныйСтарт Тогда
			
			Настройка = РегистрыСведений.НастройкиОтложеногоСтартаПроцессов.ПолучитьСведенияОЗапускеПроцесса(
				БизнесПроцесс.Ссылка);
			
			Если ЗначениеЗаполнено(Настройка) Тогда
				БизнесПроцесс.ОтложенныйСтарт();
			Иначе
				
				Попытка
					СтартПроцессовСервер.СтартоватьПроцесс(БизнесПроцесс);
				Исключение
					
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось стартовать следующее действие ""%1"" комплексного процесса.
							|Обратитесь к автору процесса или к администратору'"),
						БизнесПроцесс.Наименование);
					
					ВызватьИсключение ТекстОшибки;
					
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЭтапДляЗапуска.ЗапущенныйБизнесПроцесс = БизнесПроцесс.Ссылка;
		
		// Созданный процесс добавляется в массив - для предоставления возможности
		// запуска процесса платформенной механикой
		Если НЕ ОтложенныйСтарт Тогда
			ФормируемыеБизнесПроцессы.Добавить(БизнесПроцесс);
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

Функция СоздатьБизнесПроцессПоТипуШаблонаБизнесПроцесса(Шаблон, Идентификатор, СтруктураПредметов, Автор = Неопределено)
	
	ИмяТипаПроцесса = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Шаблон).ИмяПроцесса(Шаблон);
	БизнесПроцесс = БизнесПроцессы[ИмяТипаПроцесса].СоздатьБизнесПроцесс();
	Если Автор <> Неопределено Тогда 
		БизнесПроцесс.Автор = Автор;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
				БизнесПроцесс, "ОбрабатывающийРезультат") Тогда
			
			БизнесПроцесс.ОбрабатывающийРезультат = Автор;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыЗаполнения = Новый Структура();
	ПараметрыЗаполнения.Вставить("Шаблон", Шаблон);
	ПараметрыЗаполнения.Вставить("Предметы", СтруктураПредметов.Предметы);
	БизнесПроцесс.Заполнить(ПараметрыЗаполнения);
	
	Возврат БизнесПроцесс;
	
КонецФункции

Функция УсловиеПереходаВыполнено(ПроверяемыйЭтап, УсловиеРассмотрения, УсловиеПерехода, ИмяПредметаУсловия)
	
	Если ЗначениеЗаполнено(ПроверяемыйЭтап) Тогда
		Если УсловиеРассмотренияВыполнено(ПроверяемыйЭтап.ЗапущенныйБизнесПроцесс, УсловиеРассмотрения) Тогда
			СтрокиПроверки = ПроверяемыйЭтап.ЗапущенныйБизнесПроцесс.Предметы.НайтиСтроки(Новый Структура("ИмяПредмета", ИмяПредметаУсловия));
			Если СтрокиПроверки.Количество() > 0 Тогда
				Предмет = СтрокиПроверки[0].Предмет;
			Иначе 
				Предмет = Неопределено;
			КонецЕсли;
			
			Возврат РаботаСАлгоритмамиПроверки.ПроверитьПрименимостьАлгоритмаПроверкиКОбъекту(Предмет, УсловиеПерехода);
			
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		СтрокиПроверки = Предметы.НайтиСтроки(Новый Структура("ИмяПредмета", ИмяПредметаУсловия));
		Если СтрокиПроверки.Количество() > 0 Тогда
			Предмет = СтрокиПроверки[0].Предмет;
		Иначе 
			Предмет = Неопределено;
		КонецЕсли;
		
		Возврат РаботаСАлгоритмамиПроверки.ПроверитьПрименимостьАлгоритмаПроверкиКОбъекту(Предмет, УсловиеПерехода);
		
	КонецЕсли;
		
КонецФункции

// Проверяет, что для переданного этапа выполнены все условия для старта
// Параметры:
//	ЭтапПроцесса - строка табличной части Этапы
//	ТолькоПроверка - флаг, показывающий, что необходимо выполнить только проверку 
//	без установки отметок о проверке
Функция УсловияПереходаДляЭтапаВыполнены(ЭтапПроцесса, ТолькоПроверка)
	
	Результат = Ложь;   
	Если УЭтапаЕстьПредшественники(ЭтапПроцесса.ИдентификаторЭтапа) Тогда // у этапа есть предшественники
		// Формируем массив предшественников данного этапа
		ПредшественникиЭтапа = Новый Массив;
		Для Каждого Предшественник Из ПредшественникиЭтапов Цикл
			Если Предшественник.ИдентификаторПоследователя = ЭтапПроцесса.ИдентификаторЭтапа Тогда
				ДанныеПредшественника = Новый Структура;
				ДанныеПредшественника.Вставить("ИдентификаторПредшественника", Предшественник.ИдентификаторПредшественника);
				ДанныеПредшественника.Вставить("УсловиеПерехода", Предшественник.УсловиеПерехода);
				ДанныеПредшественника.Вставить("УсловныйПереходБылВыполнен", Предшественник.УсловныйПереходБылВыполнен);
				ДанныеПредшественника.Вставить("УсловиеРассмотрения", Предшественник.УсловиеРассмотрения);
				ДанныеПредшественника.Вставить("ИмяПредметаУсловия", Предшественник.ИмяПредметаУсловия);
				ПредшественникиЭтапа.Добавить(ДанныеПредшественника);
			КонецЕсли;
		КонецЦикла;
		
		// В зависимости от варианта завершения предшественников 
		// устанавливается начальное значение результата проверки.
		Если ЭтапПроцесса.ПредшественникиВариантИспользования = "ВсеПредшественники" Тогда
			Результат = Истина;
		ИначеЕсли ЭтапПроцесса.ПредшественникиВариантИспользования = "ОдинИзПредшественников" Тогда
			Результат = Ложь;
		КонецЕсли;
		
		// Проверяем результат завершения каждого из предшественников и 
		// формируем итоговое значение результата проверки.
		Для Каждого ПредшественникЭтапа Из ПредшественникиЭтапа Цикл
			ЭтапПредшественник = ПолучитьЭтапПоИдентификатору(ПредшественникЭтапа.ИдентификаторПредшественника);
			Если ПредшественникЭтапа.ИдентификаторПредшественника = УникальныйИдентификаторПустой() И НЕ ЕстьЗапущенныеЭтапы() Тогда
				Если ЭтапПроцесса.ПредшественникиВариантИспользования = "ВсеПредшественники" Тогда
					Результат = Результат И УсловиеПереходаВыполнено(
												ЭтапПредшественник, 
												ПредшественникЭтапа.УсловиеРассмотрения, 
												ПредшественникЭтапа.УсловиеПерехода,
												ПредшественникЭтапа.ИмяПредметаУсловия);
				ИначеЕсли ЭтапПроцесса.ПредшественникиВариантИспользования = "ОдинИзПредшественников" Тогда
					Результат = Результат ИЛИ УсловиеПереходаВыполнено(
												ЭтапПредшественник, 
												ПредшественникЭтапа.УсловиеРассмотрения, 
												ПредшественникЭтапа.УсловиеПерехода,
												ПредшественникЭтапа.ИмяПредметаУсловия);
				КонецЕсли; 
			Иначе
				Если ЭтапПредшественник <> Неопределено Тогда
					ПереходОтПредшественникаВозможен = 
						// переход от предшественника еще не был выполнен
						НЕ ПредшественникЭтапа.УсловныйПереходБылВыполнен
						// по предшественнику запущен процесс
						И ЗначениеЗаполнено(ЭтапПредшественник.ЗапущенныйБизнесПроцесс)
						// действие-предшественник завершилось
						И ЭтапПредшественник.ЗапущенныйБизнесПроцесс.Завершен
						// выполнено условие перехода от предшественника к данному этапу
						И УсловиеПереходаВыполнено(
							ЭтапПредшественник, 
							ПредшественникЭтапа.УсловиеРассмотрения, 
							ПредшественникЭтапа.УсловиеПерехода, 
							ПредшественникЭтапа.ИмяПредметаУсловия);
					// Если текущее действие ожидает завершения всех предшественников 
					Если ЭтапПроцесса.ПредшественникиВариантИспользования = "ВсеПредшественники" Тогда
						Результат = Результат И ПереходОтПредшественникаВозможен;
							
					// Если текущее действие ожидает завершения одного из предшественников 
					ИначеЕсли ЭтапПроцесса.ПредшественникиВариантИспользования = "ОдинИзПредшественников" Тогда
						Результат = Результат ИЛИ ПереходОтПредшественникаВозможен;
						Если Результат Тогда
							Прервать;
						КонецЕсли;
					КонецЕсли;
				ИначеЕсли Не ПредшественникЭтапа.ИдентификаторПредшественника = УникальныйИдентификаторПустой() Тогда
					Результат = Стартован;
					Если Результат Тогда
						Прервать;
					КонецЕсли;
				ИначеЕсли ПредшественникЭтапа.ИдентификаторПредшественника = УникальныйИдентификаторПустой() Тогда 
					Если ЭтапПроцесса.ПредшественникиВариантИспользования = "ВсеПредшественники" Тогда
						Результат = Результат И 
							НЕ ЗначениеЗаполнено(ЭтапПроцесса.ЗапущенныйБизнесПроцесс)
							И УсловиеПереходаВыполнено(
								ЭтапПредшественник, 
								ПредшественникЭтапа.УсловиеРассмотрения, 
								ПредшественникЭтапа.УсловиеПерехода, 
								ПредшественникЭтапа.ИмяПредметаУсловия);
					ИначеЕсли ЭтапПроцесса.ПредшественникиВариантИспользования = "ОдинИзПредшественников" Тогда
						Результат = Результат ИЛИ
							НЕ ЗначениеЗаполнено(ЭтапПроцесса.ЗапущенныйБизнесПроцесс)
							И УсловиеПереходаВыполнено(
								ЭтапПредшественник, 
								ПредшественникЭтапа.УсловиеРассмотрения, 
								ПредшественникЭтапа.УсловиеПерехода, 
								ПредшественникЭтапа.ИмяПредметаУсловия);
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// Если ТолькоПроверка = Ложь, то у предшественников устанавливается 
		// признак выполненного перехода к текущему этапу
		Если НЕ ТолькоПроверка И Результат Тогда
			Для Каждого ПредшественникЭтапа Из ПредшественникиЭтапа Цикл
				Для Каждого ЗаписьОПереходе Из ПредшественникиЭтапов Цикл
					Если ЗаписьОПереходе.ИдентификаторПредшественника = ПредшественникЭтапа.ИдентификаторПредшественника
						И ЗаписьОПереходе.ИдентификаторПоследователя = ЭтапПроцесса.ИдентификаторЭтапа Тогда
						ЗаписьОПереходе.УсловныйПереходБылВыполнен = Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			Если ЗначениеЗаполнено(Ссылка) Тогда
				РаботаСБизнесПроцессами.ЗаписатьПроцесс(ЭтотОбъект, "ПростаяЗапись");
			Иначе
				Записать();
			КонецЕсли;
			
		КонецЕсли;
	Иначе // у действия нет предшественников, оно выполняется в порядке очереди
		ИндексЭтапа = ЭтапПроцесса.НомерСтроки - 1;
		// Для каждого из действий, расположенных выше по таблице, 
		// выполняется проверка возможности переда к данному действию
		Для Индекс = 0 по ИндексЭтапа Цикл
			ИндексПроверяемогоПредшественника = ИндексЭтапа - Индекс;
			Если ИндексПроверяемогоПредшественника = ИндексЭтапа Тогда
				Продолжить;
			КонецЕсли;
			ПроверяемыйПредшественник = Этапы[ИндексПроверяемогоПредшественника];
			// Если от расположенного выше в таблице действия не был выполнен переход
			// к следующему по порядку действию и это действие завершилось успешно,
			// формируется положительный результат проверки
			Если НЕ ПроверяемыйПредшественник.БезусловныйПереходКСледующемуБылВыполнен
				И ЗначениеЗаполнено(ПроверяемыйПредшественник.ЗапущенныйБизнесПроцесс)
				И ПроверяемыйПредшественник.ЗапущенныйБизнесПроцесс.Завершен
				И УсловиеРассмотренияВыполнено(
					ПроверяемыйПредшественник.ЗапущенныйБизнесПроцесс, 
					Перечисления.УсловияРассмотренияПредшественниковЭтапа.ПослеУспешногоВыполнения) Тогда
				
				Результат = Истина;
				
				// Если ТолькоПроверка = Ложь, у действия устанавливается признак перехода 
				// к следующему по порядку действию
				Если НЕ ТолькоПроверка Тогда
					Для Инд = 0 по ПроверяемыйПредшественник.НомерСтроки - 1 Цикл
						Этапы[Инд].БезусловныйПереходКСледующемуБылВыполнен = Истина;	
					КонецЦикла;
					
					Если ЗначениеЗаполнено(Ссылка) Тогда
						РаботаСБизнесПроцессами.ЗаписатьПроцесс(ЭтотОбъект, "ПростаяЗапись");
					Иначе
						Записать();
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

Функция ЕстьЗапущенныеЭтапы()

	Для Каждого Этап Из Этапы Цикл
		Если ПоЭтапуЕстьЗапущенныеПроцессы(Этап) Тогда
			Возврат Истина;
		КонецЕсли;	
	КонецЦикла;
	Возврат Ложь;
	
КонецФункции

Функция ПоЭтапуЕстьЗапущенныеПроцессы(ЭтапПроцесса)
	
	Если ЭтапПроцесса.ЗапущенныйБизнесПроцесс <> Неопределено
		И ЭтапПроцесса.ЗапущенныйБизнесПроцесс.Стартован = Истина Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
		
КонецФункции

Функция УсловиеРассмотренияВыполнено(БизнесПроцессСсылка, УсловиеРассмотрения)
	
	Результат = Ложь;
	МенеджерПроцесса = ОбщегоНазначения.МенеджерОбъектаПоСсылке(БизнесПроцессСсылка);
	Если УсловиеРассмотрения = Перечисления.УсловияРассмотренияПредшественниковЭтапа.НезависимоОтРезультатаВыполнения Тогда
		Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БизнесПроцессСсылка, "Завершен");
	ИначеЕсли УсловиеРассмотрения = Перечисления.УсловияРассмотренияПредшественниковЭтапа.ПослеНеуспешногоВыполнения Тогда
		Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БизнесПроцессСсылка, "Завершен")
			И НЕ МенеджерПроцесса.ПроцессЗавершилсяУдачно(БизнесПроцессСсылка);
	ИначеЕсли УсловиеРассмотрения = Перечисления.УсловияРассмотренияПредшественниковЭтапа.ПослеУспешногоВыполнения Тогда
	    Результат = МенеджерПроцесса.ПроцессЗавершилсяУдачно(БизнесПроцессСсылка);
	ИначеЕсли УсловиеРассмотрения = Перечисления.УсловияРассмотренияПредшественниковЭтапа.ПослеУспешногоСогласованияСЗамечаниями
		И ТипЗнч(БизнесПроцессСсылка) = Тип("БизнесПроцессСсылка.Согласование") Тогда	
		Результат = МенеджерПроцесса.ПроцессЗавершилсяУдачноСЗамечаниями(БизнесПроцессСсылка);
	ИначеЕсли УсловиеРассмотрения = Перечисления.УсловияРассмотренияПредшественниковЭтапа.ПослеУспешногоСогласованияБезЗамечаний
		И ТипЗнч(БизнесПроцессСсылка) = Тип("БизнесПроцессСсылка.Согласование") Тогда	
		Результат = МенеджерПроцесса.ПроцессЗавершилсяУдачноБезЗамечаний(БизнесПроцессСсылка);
	ИначеЕсли Не ЗначениеЗаполнено(УсловиеРассмотрения) Тогда
		Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БизнесПроцессСсылка, "Завершен");
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

Функция УЭтапаЕстьПредшественники(ИдентификаторЭтапа)
	
	Для каждого Предшественник Из ПредшественникиЭтапов Цикл
		Если Предшественник.ИдентификаторПоследователя = ИдентификаторЭтапа Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьЭтапПоИдентификатору(ИдентификаторЭтапа)
	
	Для Каждого Этап Из Этапы Цикл
		Если Этап.ИдентификаторЭтапа = ИдентификаторЭтапа Тогда
			Возврат Этап;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция СредиПредшественниковЭтапаЕстьТолькоТочкаСтарта(ЭтапБизнесПроцесса)
	
	ПараметрыОтбора = Новый Структура("ИдентификаторПоследователя", ЭтапБизнесПроцесса.ИдентификаторЭтапа);
	НайденныеСтроки = ПредшественникиЭтапов.НайтиСтроки(ПараметрыОтбора);
	КоличествоНайденного = НайденныеСтроки.Количество();
	Если КоличествоНайденного = 1 Тогда
		Если НайденныеСтроки[0].ИдентификаторПредшественника = УникальныйИдентификаторПустой() Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ДействияПроцесса

// Устанавливает пометку удаления действиям процесса.
//
// Параметры:
//  ПометкаУдаления - Булево
//
Процедура УстановитьПометкуУдаленияДействиямПроцесса(ПометкаУдаления)
	
	УстановитьПривилегированныйРежим(Истина);
		
	Если ЭтоПроцессСТаблицейДействий() Тогда
		Для Каждого Этап Из Этапы Цикл
			
			Если Не ЗначениеЗаполнено(Этап.ШаблонБизнесПроцесса.ВладелецШаблона) Тогда
				Продолжить;
			КонецЕсли;
			
			Этап.ШаблонБизнесПроцесса.ПолучитьОбъект().УстановитьПометкуУдаления(ПометкаУдаления);
			
		КонецЦикла;
	Иначе
		
		ПараметрыСхемы = Справочники.ПараметрыСхемДляКомплексныхПроцессов.
			ПараметрыСхемыПоВладельцу(Ссылка);
		Если ЗначениеЗаполнено(ПараметрыСхемы) Тогда
			Схема.ПолучитьОбъект().УстановитьПометкуУдаления(ПометкаУдаления);
			ПараметрыСхемы.ПолучитьОбъект().УстановитьПометкуУдаления(ПометкаУдаления);
		КонецЕсли;

	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадачаИсполнителя.Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.КомплексныйПроцесс КАК КомплексныйПроцесс
		|		ПО КомплексныйПроцесс.Ссылка = ЗадачаИсполнителя.БизнесПроцесс
		|ГДЕ
		|	КомплексныйПроцесс.Ссылка = &ПараметрСсылка";
	Запрос.УстановитьПараметр("ПараметрСсылка", Ссылка);
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МассивБизнесПроцессов = ПолучитьБизнесПроцессыПоЗадаче(ВыборкаДетальныеЗаписи.Ссылка);
		Для Каждого БизнесПроцесс Из МассивБизнесПроцессов Цикл
			БизнесПроцесс.ПолучитьОбъект().УстановитьПометкуУдаления(ПометкаУдаления);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает массив подчиненных процессов задаче.
//
// Параметры:
//  ЗадачаСсылка - ЗадачаСсылка.ЗадачаИсполнителя
//
// Возвращаемое значение:
//  Массив 
//   * БизнесПроцессСсылка
//
Функция ПолучитьБизнесПроцессыПоЗадаче(ЗадачаСсылка)
	
	МассивБП = Новый Массив;
	
	Для Каждого МетаданныеБизнесПроцесса Из Метаданные.БизнесПроцессы Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	БизнесПроцессы.Ссылка
			|ИЗ
			|	%БизнесПроцесс% КАК БизнесПроцессы
			|ГДЕ
			|   БизнесПроцессы.ВедущаяЗадача = &Задача
			|   И БизнесПроцессы.ПометкаУдаления = Ложь";
			
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "%БизнесПроцесс%", МетаданныеБизнесПроцесса.ПолноеИмя());
		Запрос.УстановитьПараметр("Задача", ЗадачаСсылка);
		Результат = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			МассивБП.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
		КонецЦикла;
	КонецЦикла;
	
	Возврат МассивБП;
	
КонецФункции

// Помечает на удаление не привязанные служебные шаблоны действий текущего процесса.
//
Процедура УдалитьНепривязанныеШаблоны()
	
	Если Не ЭтоПроцессСТаблицейДействий() Тогда
		Возврат;
	КонецЕсли;
	
	// Установка пометки удаления у шаблонов, которые были созданы, но не прикреплены к комплексному процессу.
	// Например, создали комплексный процесс, добавили действие, а затем не сохранили комплексный процесс.
	
	ТипыШаблонов = ЭтотОбъект.Метаданные().ТабличныеЧасти.Этапы.Реквизиты.ШаблонБизнесПроцесса.Тип.Типы();
	
	Запрос = Новый Запрос;
	ШаблонЗапроса = 
		"ВЫБРАТЬ
		|	ШаблоныПроцессов.Ссылка
		|ИЗ
		|	Справочник.%1 КАК ШаблоныПроцессов
		|		ЛЕВОЕ СОЕДИНЕНИЕ БизнесПроцесс.КомплексныйПроцесс.Этапы КАК ЭтапыПроцесса
		|		ПО (ЭтапыПроцесса.ШаблонБизнесПроцесса = ШаблоныПроцессов.Ссылка)
		|ГДЕ
		|	ШаблоныПроцессов.ВладелецШаблона = &ВладелецШаблона
		|	И ЭтапыПроцесса.Ссылка ЕСТЬ NULL ";
		
	Для Каждого Тип Из ТипыШаблонов Цикл
		
		ШаблонОбъект = Новый(Тип);
		
		Запрос.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонЗапроса,
			ШаблонОбъект.Метаданные().Имя);
			
		Запрос.УстановитьПараметр("ВладелецШаблона", Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ШаблонДляУдаления = Выборка.Ссылка.ПолучитьОбъект();
			ШаблонДляУдаления.УстановитьПометкуУдаления(Истина);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РаспространитьПроектИПроектнуюЗадачуНаПодпроцессы()
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеБизнесПроцессов.БизнесПроцесс
		|ИЗ
		|	РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
		|ГДЕ
		|	ДанныеБизнесПроцессов.ВедущаяЗадача.ТочкаМаршрута В (&ТочкиМаршрута)
		|	И ДанныеБизнесПроцессов.ВедущаяЗадача.БизнесПроцесс = &ПроцессСсылка
		|	И ДанныеБизнесПроцессов.ДатаЗавершения = &ДатаЗавершения";
	
	ТочкиМаршрута = Новый Массив();
	ТочкиМаршрута.Добавить(БизнесПроцессы.КомплексныйПроцесс.ТочкиМаршрута.ВложенныйПроцесс);
	ТочкиМаршрута.Добавить(БизнесПроцессы.КомплексныйПроцесс.ТочкиМаршрута.ВыполнитьДействияПроцессаПоСхеме);
	Запрос.УстановитьПараметр("ТочкиМаршрута", ТочкиМаршрута);
	Запрос.УстановитьПараметр("ДатаЗавершения", Дата(1,1,1));
	Запрос.УстановитьПараметр("ПроцессСсылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПроцессОбъект = Выборка.БизнесПроцесс.ПолучитьОбъект();
		ПроцессОбъект.Проект = Проект;
		ПроцессОбъект.ПроектнаяЗадача = ПроектнаяЗадача;
		ПроцессОбъект.Записать();
		
		СтарыеУчастникиПроцесса = БизнесПроцессыИЗадачиВызовСервера.
			ТекущиеУчастникиПроцесса(ПроцессОбъект);
		ПроцессОбъект.ИзменитьРеквизитыНевыполненныхЗадач(СтарыеУчастникиПроцесса, Новый Структура());
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает предметы действия процесса.
//
// Параметры:
//  Идентификатор - УникальныйИдентификатор - индентификатор действивия
//  Шаблон - СправочникСсылка.<ИмяШаблонаПроцесса> - сслыка на служебный шаблон действия.
//
// Возвращаемое значение:
//  ТаблицаЗначений - соответствует таблице Предметы текущего процесса.
//
Функция ПредметыДействия(Идентификатор, Шаблон)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КомплексныйПроцессПредметы.*
		|ИЗ
		|	БизнесПроцесс.КомплексныйПроцесс.Предметы КАК КомплексныйПроцессПредметы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.КомплексныйПроцесс.ПредметыЗадач КАК КомплексныйПроцессПредметыЗадач
		|		ПО КомплексныйПроцессПредметы.Ссылка = КомплексныйПроцессПредметыЗадач.Ссылка
		|			И КомплексныйПроцессПредметы.ИмяПредмета = КомплексныйПроцессПредметыЗадач.ИмяПредмета
		|			И (КомплексныйПроцессПредметыЗадач.ИдентификаторЭтапа = &ИдентификаторЭтапа)
		|			И (КомплексныйПроцессПредметыЗадач.ШаблонБизнесПроцесса = &ШаблонБизнесПроцесса)
		|ГДЕ
		|	КомплексныйПроцессПредметы.Ссылка = &Процесс";
		
	Запрос.УстановитьПараметр("Процесс", Ссылка);
	Запрос.УстановитьПараметр("ИдентификаторЭтапа", Идентификатор);
	Запрос.УстановитьПараметр("ШаблонБизнесПроцесса", Шаблон);
	
	ПредметыДействия = Запрос.Выполнить().Выгрузить();
	
	СтрокаСвертки = "";
	Разделитель = ",";
	Для Каждого Колонка Из ПредметыДействия.Колонки Цикл
		
		Если Колонка.Имя = "Ссылка" Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаСвертки = СтрокаСвертки + Разделитель + Колонка.Имя;
		
	КонецЦикла;
	
	ПредметыДействия.Свернуть(СтрокаСвертки);
	ПредметыДействия.Сортировать("НомерСтроки");
	
	Возврат ПредметыДействия;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Иначе
	ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли