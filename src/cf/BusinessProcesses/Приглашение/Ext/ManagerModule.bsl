#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает текущих участников процесса в виде структуры
//
// Параметры:
//   Процесс
//      БизнесПроцессОбъект
//      БизнесПроцессСсылка
//
// Возвращаемое значение:
//   Структура
//
Функция ТекущиеУчастникиПроцесса(Процесс) Экспорт
	
	РеквизитыПроцессаСтрокой = 
		"Автор,
		|СрокОбработкиРезультатов,
		|СрокОбработкиРезультатовДни,
		|СрокОбработкиРезультатовМинуты,
		|СрокОбработкиРезультатовЧасы,
		|Исполнители";
	
	Участники = Новый Структура(РеквизитыПроцессаСтрокой);
		
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Процесс)) Тогда
		РеквизитыПроцессаПоСсылке = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Процесс, РеквизитыПроцессаСтрокой);
			
		ЗаполнитьЗначенияСвойств(Участники, РеквизитыПроцессаПоСсылке,, "Исполнители");
		Участники.Исполнители = РеквизитыПроцессаПоСсылке.Исполнители.Выгрузить();
	Иначе
		ЗаполнитьЗначенияСвойств(Участники, Процесс,, "Исполнители");
		Участники.Исполнители = Процесс.Исполнители.Выгрузить();
	КонецЕсли;
	
	Возврат Участники;
	
КонецФункции

// Возвращает идентификаторы текущих участников процесса.
//
// Параметры:
//   Процесс
//      БизнесПроцессОбъект
//      БизнесПроцессСсылка
//
// Возвращаемое значение:
//   Массив
//    * УникальныйИдентификатор
//
Функция ИдентификаторыТекущихУчастниковПроцесса(Процесс) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИдентификаторыУчастников = Новый Массив;
	
	РеквизитыПроцессаСтрокой = 
		"Исполнители,
		|ИдентификаторОбрабатывающегоРезультат";
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Процесс)) Тогда
		РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Процесс, РеквизитыПроцессаСтрокой);
		РеквизитыПроцесса.Исполнители = РеквизитыПроцесса.Исполнители.Выгрузить();
	Иначе
		РеквизитыПроцесса = Процесс;
	КонецЕсли;
	
	Для Каждого СтрокаИсполнителя Из РеквизитыПроцесса.Исполнители Цикл
		ИдентификаторыУчастников.Добавить(СтрокаИсполнителя.ИдентификаторИсполнителя);
	КонецЦикла;
	
	ИдентификаторыУчастников.Добавить(РеквизитыПроцесса.ИдентификаторОбрабатывающегоРезультат);
	
	Возврат ИдентификаторыУчастников;
	
КонецФункции

Функция ПлановыеТрудозатратыИсполнителяЗадачи(БизнесПроцесс, Задача, ТочкаМаршрута) Экспорт
	
	РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(БизнесПроцесс,
		"ТрудозатратыПланИсполнителя, ТрудозатратыПланАвтора");
		
	Трудозатраты = 0;
		
	Если ТочкаМаршрута = ТочкиМаршрута.Пригласить
		Или ТочкаМаршрута = ТочкиМаршрута.Оповестить Тогда
		Трудозатраты = РеквизитыПроцесса.ТрудозатратыПланИсполнителя;
	ИначеЕсли ТочкаМаршрута = ТочкиМаршрута.Ознакомиться Тогда
		Трудозатраты = РеквизитыПроцесса.ТрудозатратыПланАвтора;
	КонецЕсли;
	
	Возврат Трудозатраты;
	
КонецФункции

Функция ПредставлениеРезультатаЗадачи(ЗадачаОбъект) Экспорт
	
	Представление = "";
	
	Если ЗадачаОбъект.ТочкаМаршрута = ТочкиМаршрута.Пригласить Тогда
		РезультатыПриглашения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ЗадачаОбъект.БизнесПроцесс, "РезультатыПриглашения").Выгрузить();
		НайденнаяСтрока = РезультатыПриглашения.Найти(ЗадачаОбъект.Ссылка, "ЗадачаИсполнителя");
		Если НайденнаяСтрока <> Неопределено Тогда 
			Представление = Строка(НайденнаяСтрока.РезультатПриглашения) + ".";
		КонецЕсли;
	ИначеЕсли ЗадачаОбъект.ТочкаМаршрута = ТочкиМаршрута.Оповестить Тогда
		Представление = НСтр("ru = 'Ознакомился.'");
	ИначеЕсли ЗадачаОбъект.ТочкаМаршрута = ТочкиМаршрута.Ознакомиться Тогда
		РезультатыОзнакомлений = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ЗадачаОбъект.БизнесПроцесс, "РезультатыОзнакомлений").Выгрузить();
		НайденнаяСтрока = РезультатыОзнакомлений.Найти(ЗадачаОбъект.Ссылка, "ЗадачаИсполнителя");
		Если НайденнаяСтрока <> Неопределено Тогда 
			Если НайденнаяСтрока.ОтправленоПовторноеПриглашение Тогда
				Представление = НСтр("ru = 'Отправлено на повторное приглашение.'");
			Иначе	
				Представление = НСтр("ru = 'Приглашение завершено.'");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

// Заполняет html обзор данными процесса.
//
// Параметры:
//   HTMLТекст - Строка
//   Шаблон - БизнесПроцессСсылка.Приглашение - ссылка на процесс
//
Процедура ЗаполнитьОбзорПроцесса(HTMLТекст, Процесс) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Процесс,
		"СрокИсполненияПроцесса,
		|ВариантУстановкиСрокаОбработкиРезультатов,
		|СрокОбработкиРезультатов,
		|СрокОбработкиРезультатовДни,
		|СрокОбработкиРезультатовМинуты,
		|СрокОбработкиРезультатовЧасы,
		|КоличествоИтераций,
		|Стартован,
		|Исполнители,
		|ДатаЗавершения,
		|РезультатПриглашения,
		|Завершен");
		
	СрокИсполненияПроцесса = РеквизитыПроцесса.СрокИсполненияПроцесса;
	Исполнители = РеквизитыПроцесса.Исполнители.Выгрузить();
	ДатаЗавершения = РеквизитыПроцесса.ДатаЗавершения;
	
	ЗадачаИсполнителяМассив = Исполнители.ВыгрузитьКолонку("ЗадачаИсполнителя");
	
	ДатыИсполненияУчастников = ДатыИсполненияУчастников(Процесс);
	
	ЦветЗакрытыеНеактуальныеЗаписи = ОбзорПроцессовВызовСервера.ЦветЗакрытыеНеактуальныеЗаписи();
	
	ЦветПросроченныеДанные = ОбзорПроцессовВызовСервера.ЦветПросроченныеДанные();
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	
	ДатаИсполненияПоУмолчанию = ТекущаяДатаСеанса;
	Если ЗначениеЗаполнено(ДатаЗавершения) Тогда
		ДатаИсполненияПоУмолчанию = ДатаЗавершения;
	КонецЕсли;
	
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	Если ИспользоватьДатуИВремяВСрокахЗадач Тогда
		ФорматСрока = "ДФ='dd.MM.yyyy HH:mm'";
	Иначе
		ФорматСрока = "ДФ='dd.MM.yyyy'";
	КонецЕсли;
	
	// Формирование строк таблицы
	Если Исполнители.Количество() > 0 Тогда
		
		РезультатСоответствие 
			= ОбзорПроцессовВызовСервера.РезультатыВыполненияПоОбъектам(ЗадачаИсполнителяМассив, "Задача");
		
		HTMLТекст = HTMLТекст + "<p>";
		
		HTMLТекст = HTMLТекст + "<table class=""frame"">";
		
		//Формирование заголовка таблицы
		HTMLТекст = HTMLТекст + "<tr>";
		
		Если РезультатСоответствие.Количество() <> 0 Тогда
			// статус исполнения - в шапке пусто
			HTMLТекст = HTMLТекст + "<td align=""center"" class=""frame"">";
			ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, "", "");
			HTMLТекст = HTMLТекст + "</td>";
		КонецЕсли;
		
		HTMLТекст = HTMLТекст + "<td align=""center"" class=""frame"">";
		ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = 'Исполнитель'"));
		HTMLТекст = HTMLТекст + "</td>";
		
		HTMLТекст = HTMLТекст + "<td align=""center"" class=""frame"">";
		ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = 'Срок ответа'"));
		HTMLТекст = HTMLТекст + "</td>";
		
		HTMLТекст = HTMLТекст + "<td align=""center"" class=""frame"">";
		ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = 'Явка обязательна'"));
		HTMLТекст = HTMLТекст + "</td>";
		
		HTMLТекст = HTMLТекст + "</tr>";
		
		//Заполнение таблицы исполнителями
		Для Каждого Исполнитель Из Исполнители Цикл
			HTMLТекст = HTMLТекст + "<tr>";
			
			// статус исполнения
			Если РезультатСоответствие.Количество() <> 0 Тогда
				
				HTMLТекст = HTMLТекст + "<td align=""center"" class=""frame"">";
				РезультатВыполненияЗадачи = РезультатСоответствие.Получить(Исполнитель.ЗадачаИсполнителя);
				Если РезультатВыполненияЗадачи <> Неопределено Тогда
					
					Картинка = ОбзорПроцессовВызовСервера.ПолучитьКартинкуПоСтатусуВыполнения(
						РезультатВыполненияЗадачи);
					
					ОбзорОбъектовКлиентСервер.ДобавитьКартинку(HTMLТекст, Картинка);
					
				Иначе
					ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, "", "");
				КонецЕсли;	
				HTMLТекст = HTMLТекст + "</td>";
				
			КонецЕсли;	
			
			HTMLТекст = HTMLТекст + "<td class=""frame"">";
			
			ЦветТекста = "";
			Если Исполнитель.Пройден
				Или Не ЗначениеЗаполнено(Исполнитель.ЗадачаИсполнителя) Тогда
				
				HTMLТекст = HTMLТекст + "<FONT color=""" + ЦветЗакрытыеНеактуальныеЗаписи + """>";
				ЦветТекста = ЦветЗакрытыеНеактуальныеЗаписи;
			КонецЕсли;
			
			ОбзорОбъектовКлиентСервер.ДобавитьЗадачу(HTMLТекст, Исполнитель.ЗадачаИсполнителя, 
				Исполнитель.Исполнитель);
			
			Если Исполнитель.Пройден 
				Или Не ЗначениеЗаполнено(Исполнитель.ЗадачаИсполнителя) Тогда
				
				HTMLТекст = HTMLТекст + "</FONT>";
			КонецЕсли;
			
			HTMLТекст = HTMLТекст + "</td>";
			
			HTMLТекст = HTMLТекст + "<td align=""center"" class=""frame"">";
				
			ПредставлениеСрока = ОбзорПроцессовВызовСервера.ПредставлениеСрокаИсполнения(
				Исполнитель.СрокИсполнения, Исполнитель.СрокИсполненияДни, 
				Исполнитель.СрокИсполненияЧасы, Исполнитель.СрокИсполненияМинуты, 
				ИспользоватьДатуИВремяВСрокахЗадач, Исполнитель.ВариантУстановкиСрокаИсполнения);
				
			ЦветПредставленияСрока = "";
			Если ЗначениеЗаполнено(Исполнитель.СрокИсполнения) Тогда
				ДатаИсполнения = ДатыИсполненияУчастников.Получить(Исполнитель.ЗадачаИсполнителя);
				Если ЗначениеЗаполнено(ДатаИсполнения) Тогда
					ДатаИсполнения = Мин(ДатаИсполненияПоУмолчанию, ДатаИсполнения);
				Иначе
					ДатаИсполнения = ДатаИсполненияПоУмолчанию;
				КонецЕсли;
				
				ДатаИсполнения = ДатаИсполнения - Секунда(ДатаИсполнения);
				
				Если Исполнитель.СрокИсполнения < ДатаИсполнения Тогда
					ЦветПредставленияСрока = ЦветПросроченныеДанные;
				КонецЕсли;
			КонецЕсли;
				
			ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, ПредставлениеСрока, ЦветПредставленияСрока);
				
			HTMLТекст = HTMLТекст + "</td>";
			
			HTMLТекст = HTMLТекст + "<td align=""center"" class=""frame"">";
			Если ЗначениеЗаполнено(Исполнитель.ЯвкаОбязательна) Тогда
				ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, Исполнитель.ЯвкаОбязательна, "");
			КонецЕсли;
			HTMLТекст = HTMLТекст + "</td>";
			
			HTMLТекст = HTMLТекст + "</tr>";
		КонецЦикла;
		
		HTMLТекст = HTMLТекст + "</table>";
		
		// Формирование подписей под таблицей
		HTMLТекст = HTMLТекст + "<table cellpadding=""0"">";
		HTMLТекст = HTMLТекст + "<tr>";
		
		HTMLТекст = HTMLТекст + "<td align=""right"">";
		HTMLТекст = HTMLТекст + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"<A href=v8doc:%1>%2</A>",
			"Подзадачи_" + Процесс.УникальныйИдентификатор() + "_Приглашение",
			НСтр("ru = 'Все задачи'"));
		HTMLТекст = HTMLТекст + "</td>";
		
		HTMLТекст = HTMLТекст + "</tr>";
		HTMLТекст = HTMLТекст + "</table>";
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыПроцесса.СрокОбработкиРезультатов) 
		Или ЗначениеЗаполнено(РеквизитыПроцесса.СрокОбработкиРезультатовДни) 
		Или ЗначениеЗаполнено(РеквизитыПроцесса.СрокОбработкиРезультатовМинуты) 
		Или ЗначениеЗаполнено(РеквизитыПроцесса.СрокОбработкиРезультатовЧасы) Тогда
		
		HTMLТекст = HTMLТекст + "<p>";
		
		ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = 'Срок обработки результатов:'"));
		
		ПредставлениеСрока = ОбзорПроцессовВызовСервера.ПредставлениеСрокаИсполнения(
			РеквизитыПроцесса.СрокОбработкиРезультатов, 
			РеквизитыПроцесса.СрокОбработкиРезультатовДни, 
			РеквизитыПроцесса.СрокОбработкиРезультатовЧасы, 
			РеквизитыПроцесса.СрокОбработкиРезультатовМинуты, 
			ИспользоватьДатуИВремяВСрокахЗадач, 
			РеквизитыПроцесса.ВариантУстановкиСрокаОбработкиРезультатов);
		
		ЦветПредставленияСрока = "";
		Если Не РеквизитыПроцесса.Завершен
			Или РеквизитыПроцесса.РезультатПриглашения <>
				Перечисления.ОбщиеРезультатыПриглашения.ПринятоВсемиУчастниками Тогда
			
			ДатаИсполнения = ДатыИсполненияУчастников.Получить("Автор");
			Если ЗначениеЗаполнено(ДатаИсполнения) Тогда
				ДатаИсполнения = Мин(ДатаИсполненияПоУмолчанию, ДатаИсполнения);
			Иначе
				ДатаИсполнения = ДатаИсполненияПоУмолчанию;
			КонецЕсли;
			
			ДатаИсполнения = ДатаИсполнения - Секунда(ДатаИсполнения);
			
			Если РеквизитыПроцесса.СрокОбработкиРезультатов < ДатаИсполнения Тогда
				ЦветПредставленияСрока = ЦветПросроченныеДанные;
			КонецЕсли;
			
		КонецЕсли;
		
		ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, ПредставлениеСрока, ЦветПредставленияСрока);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СрокИсполненияПроцесса) Тогда
		
		HTMLТекст = HTMLТекст + "<p>";
		
		Если Не ЗначениеЗаполнено(ДатаЗавершения) Тогда
			ДатаЗавершения = ТекущаяДатаСеанса;
		КонецЕсли;
		
		ДатаЗавершения = ДатаЗавершения - Секунда(ДатаЗавершения);
		
		ЦветПредставленияСрока = "";
		Если СрокИсполненияПроцесса < ДатаЗавершения Тогда
			ЦветПредставленияСрока = ЦветПросроченныеДанные;
		КонецЕсли;
		
		ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = 'Срок процесса:'"));
		ОбзорОбъектовКлиентСервер.ДобавитьЗначение(
			HTMLТекст, Формат(СрокИсполненияПроцесса, ФорматСрока), ЦветПредставленияСрока);
		
		Если РеквизитыПроцесса.КоличествоИтераций <> 0 Тогда
			
			HTMLТекст = HTMLТекст + " (";
			
			ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = 'Кол. циклов:'"));
			ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, 
				Формат(РеквизитыПроцесса.КоличествоИтераций, "ЧЦ=2"), "");
			
			HTMLТекст = HTMLТекст + ")";
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения. Для изменения.
//       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
КонецПроцедуры

// Возвращает признак того что процесс использует условия выполнения задач.
//
// Параметры:
//  ТочкаМаршрута - ТочкаМаршрутаСсылка - Точка маршрута.
//  Параметры - Структура - Параметры.
// 
// Возвращаемое значение:
//  Булево - Использует условия выполнения задач.
//
Функция ИспользуетУсловияЗапретаВыполненияЗадач(ТочкаМаршрута = Неопределено, Параметры = Неопределено) Экспорт
	
	Если Параметры = Неопределено Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	
	ИспользуетУсловияЗапретаВыполненияЗадач = Истина;
	
	Если ТочкаМаршрута = ТочкиМаршрута.Пригласить Тогда
		
		Если Параметры.Свойство("ВариантВыполнения") Тогда
			ИспользуетУсловияЗапретаВыполненияЗадач =
				Параметры.ВариантВыполнения <>
					Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно;
		ИначеЕсли Параметры.Свойство("РезультатПриглашения") Тогда
			ИспользуетУсловияЗапретаВыполненияЗадач =
				Параметры.РезультатПриглашения <>
					Перечисления.РезультатыПриглашения.НеПринято;
		КонецЕсли;
		
	ИначеЕсли ТочкаМаршрута = ТочкиМаршрута.Ознакомиться Тогда
		
		Если Параметры.Свойство("ВариантВыполнения") Тогда
			ИспользуетУсловияЗапретаВыполненияЗадач =
				Параметры.ВариантВыполнения =
					Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно;
			
		ИначеЕсли Параметры.Свойство("ПодтвердитьПриглашение") Тогда
			ИспользуетУсловияЗапретаВыполненияЗадач = Параметры.ПодтвердитьПриглашение;
			
		ИначеЕсли Параметры.Свойство("ПовторитьПриглашение") Тогда
			
			Если Параметры.Свойство("РезультатПриглашения")
				И Параметры.РезультатПриглашения = Перечисления.ОбщиеРезультатыПриглашения.ПринятоОбязательнымиУчастниками Тогда
				ИспользуетУсловияЗапретаВыполненияЗадач = Ложь;
				
			КонецЕсли;
			
		ИначеЕсли Параметры.Свойство("ОтложитьПриглашение") Тогда
			ИспользуетУсловияЗапретаВыполненияЗадач = Не Параметры.ОтложитьПриглашение;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИспользуетУсловияЗапретаВыполненияЗадач;
	
КонецФункции

// Формирует комментарий автоматического выполнения задачи.
//
// Параметры:
//  ТочкаМаршрута - ТочкаМаршрута - Точка маршрута.
//  ВариантВыполнения - Булево - Вариант выполнения.
//
// Возвращаемое значение:
//  Строка - Комментарий автоматического выполнения задачи.
//
Функция КомментарийВыполненаАвтоматически(ТочкаМаршрута, ВариантВыполнения) Экспорт
	
	Комментарий = "";
	
	Если ТочкаМаршрута = ТочкиМаршрута.Пригласить Тогда
		Если ВариантВыполнения Тогда
			Комментарий = НСтр("ru = 'Принято автоматически'");
		Иначе
			Комментарий = НСтр("ru = 'Не принято автоматически'");
		КонецЕсли;
	ИначеЕсли ТочкаМаршрута = ТочкиМаршрута.Ознакомиться Тогда
		Если ВариантВыполнения Тогда
			Комментарий = НСтр("ru = 'Подтверждено автоматически'");
		Иначе
			Комментарий = НСтр("ru = 'Отложено автоматически'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат Комментарий;
	
КонецФункции

// Заполняет html обзор задачи данными процесса.
//
// Параметры:
//   HTMLТекст - Строка
//   Процесс - БизнесПроцессСсылка
//   ТочкаМаршрута - ТочкаМаршрутаБизнесПроцессаСсылка
//   ЗадачаПроцесса - ЗадачаСсылка.ЗадачаИсполнителя
//   ВключатьНавигационныеСсылки - Булево
//   КодЯзыка - Строка
//
Процедура ЗаполнитьОбзорЗадачи(HTMLТекст, Процесс, ТочкаМаршрута, ЗадачаПроцесса, ВключатьНавигационныеСсылки, КодЯзыка) Экспорт
	
	РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Процесс,
		"ДатаНачалаМероприятия, ДатаОкончанияМероприятия, МестоПроведения, РезультатыПриглашения");
	
	Если Не ЗначениеЗаполнено(РеквизитыПроцесса.ДатаНачалаМероприятия)
		И Не ЗначениеЗаполнено(РеквизитыПроцесса.ДатаОкончанияМероприятия)
		И Не ЗначениеЗаполнено(РеквизитыПроцесса.МестоПроведения) Тогда
		Возврат;
	КонецЕсли;
	
	HTMLТекст = HTMLТекст + "<br>";
	
	Если ЗначениеЗаполнено(РеквизитыПроцесса.МестоПроведения) Тогда
		
		ОбзорОбъектовКлиентСервер.ДобавитьРеквизит(
			HTMLТекст,
			НСтр("ru = 'Место проведения:'", КодЯзыка),
			РеквизитыПроцесса.МестоПроведения);
		
	Конецесли;
	
	Если ЗначениеЗаполнено(РеквизитыПроцесса.ДатаНачалаМероприятия)
		Или ЗначениеЗаполнено(РеквизитыПроцесса.ДатаОкончанияМероприятия) Тогда
		
		Если НачалоДня(РеквизитыПроцесса.ДатаНачалаМероприятия) = НачалоДня(РеквизитыПроцесса.ДатаОкончанияМероприятия) Тогда 
			ВремяПроведения =
				Формат(РеквизитыПроцесса.ДатаНачалаМероприятия, "ДФ='dd MMM yyyy'")
				+ " "
				+ Формат(РеквизитыПроцесса.ДатаНачалаМероприятия, "ДФ=ЧЧ:мм")
				+ " - "
				+ Формат(РеквизитыПроцесса.ДатаОкончанияМероприятия, "ДФ=ЧЧ:мм");
		Иначе
			ВремяПроведения =
				Формат(РеквизитыПроцесса.ДатаНачалаМероприятия, "ДФ='dd.MM.yy ЧЧ:мм'")
				+ " - "
				+ Формат(РеквизитыПроцесса.ДатаОкончанияМероприятия, "ДФ='dd.MM.yy ЧЧ:мм'");
		КонецЕсли;
		
		ОбзорОбъектовКлиентСервер.ДобавитьРеквизит(
			HTMLТекст,
			НСтр("ru = 'Время проведения:'", КодЯзыка),
			ВремяПроведения);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс_РабочиеГруппы

// Возвращает признак наличия метода ДобавитьУчастниковВТаблицу у менеджера объекта
//
Функция ЕстьМетодДобавитьУчастниковВТаблицу() Экспорт
	Возврат Истина;
КонецФункции

// Добавляет участников бизнес-процесса в переданную таблицу
//
Процедура ДобавитьУчастниковВТаблицу(ТаблицаНабора, БизнесПроцесс) Экспорт
	
	РаботаСБизнесПроцессами.ДобавитьУчастниковПриглашенияВТаблицу(ТаблицаНабора, БизнесПроцесс);
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс_ВыполнениеЗадач

// Обработчик, вызываемый перед выполнением задачи из процедуры
// ВыполнениеЗадачСервер.ВыполнитьЗадачуСПараметрами
//
// Параметры
//   ЗадачаСсылка  - ЗадачаСсылка.ЗадачаИсполнителя
//   БизнесПроцессСсылка - БизнесПроцессСсылка
//   ТочкаМаршрутаСсылка - точка маршрута
//   ПараметрыВыполнения - Структура
//
Процедура ОбработкаПередВыполнениемЗадачи(
	ЗадачаСсылка, БизнесПроцессСсылка, ТочкаМаршрутаБизнесПроцесса, ПараметрыВыполнения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПараметрыВыполнения.Свойство("ИдентификаторБлокировкиПроцесса") Тогда
		ПараметрыВыполнения.Вставить(
			"ИдентификаторБлокировкиПроцесса", Новый УникальныйИдентификатор());
	КонецЕсли;
	
	Если ТочкаМаршрутаБизнесПроцесса = БизнесПроцессы.Приглашение.ТочкиМаршрута.Пригласить Тогда
		
		ЗаписатьПроцесс = ПараметрыВыполнения.Свойство("РезультатПриглашения")
			Или ПараметрыВыполнения.Свойство("ИсполнительЗадачи");
			
		Если ЗаписатьПроцесс Тогда
			ЗаблокироватьДанныеДляРедактирования(
				БизнесПроцессСсылка,,
				ПараметрыВыполнения.ИдентификаторБлокировкиПроцесса);
			
			ПриглашениеОбъект = БизнесПроцессСсылка.ПолучитьОбъект();
		КонецЕсли;
		
		Если ПараметрыВыполнения.Свойство("РезультатПриглашения") Тогда
			ПриглашениеОбъект.ДополнительныеСвойства.Вставить("ТекущаяЗадача", ЗадачаСсылка);
			ПриглашениеОбъект.ДополнительныеСвойства.Вставить(
				"РезультатПриглашения", ПараметрыВыполнения.РезультатПриглашения);
		КонецЕсли;
			
		Если ПараметрыВыполнения.Свойство("ИсполнительЗадачи") Тогда
			СтрИсполнитель = ПриглашениеОбъект.Исполнители.Найти(ЗадачаСсылка, "ЗадачаИсполнителя");
			Если СтрИсполнитель <> Неопределено
				И ТипЗнч(СтрИсполнитель.Исполнитель) <> Тип("СправочникСсылка.ПолныеРоли")
				И СтрИсполнитель.Исполнитель <> ПараметрыВыполнения.ИсполнительЗадачи Тогда
				
				СтрИсполнитель.Исполнитель = ПараметрыВыполнения.ИсполнительЗадачи;
				
			КонецЕсли;
		КонецЕсли;
		
		Если ЗаписатьПроцесс Тогда
			
			РаботаСБизнесПроцессами.ЗаписатьПроцесс(ПриглашениеОбъект, "ЗаписьСОбработкойВыполненияЗадачи");
			
			РазблокироватьДанныеДляРедактирования(
				ПриглашениеОбъект.Ссылка,
				ПараметрыВыполнения.ИдентификаторБлокировкиПроцесса);
		КонецЕсли;
		
	ИначеЕсли ТочкаМаршрутаБизнесПроцесса = БизнесПроцессы.Приглашение.ТочкиМаршрута.Ознакомиться Тогда
		
		ПовторитьПриглашение = ПараметрыВыполнения.Свойство("ПовторитьПриглашение")
			И ПараметрыВыполнения.ПовторитьПриглашение;
			
		ПодтвердитьПриглашение = ПараметрыВыполнения.Свойство("ПодтвердитьПриглашение")
			И ПараметрыВыполнения.ПодтвердитьПриглашение;
		
		Если ПовторитьПриглашение Или ПодтвердитьПриглашение Тогда
		
			ЗаблокироватьДанныеДляРедактирования(
				БизнесПроцессСсылка,,
				ПараметрыВыполнения.ИдентификаторБлокировкиПроцесса);
			
			ПриглашениеОбъект = БизнесПроцессСсылка.ПолучитьОбъект();
			ПриглашениеОбъект.ДополнительныеСвойства.Вставить("ТекущаяЗадача", ЗадачаСсылка);
			
			Если ПовторитьПриглашение Тогда
				ПриглашениеОбъект.ДополнительныеСвойства.Вставить("ПовторитьПриглашение", ПовторитьПриглашение);
			КонецЕсли;
		
			Если ПодтвердитьПриглашение Тогда
				ПриглашениеОбъект.ДополнительныеСвойства.Вставить("ПодтвердитьПриглашение", ПодтвердитьПриглашение);
			КонецЕсли;
			
			Если ПараметрыВыполнения.Свойство("МестоПроведения") Тогда
				ПриглашениеОбъект.ДополнительныеСвойства.Вставить("МестоПроведения", ПараметрыВыполнения.МестоПроведения);
			КонецЕсли;
			
			Если ПараметрыВыполнения.Свойство("ДатаНачалаМероприятия") Тогда
				ПриглашениеОбъект.ДополнительныеСвойства.Вставить("ДатаНачалаМероприятия", ПараметрыВыполнения.ДатаНачалаМероприятия);
			КонецЕсли;
			
			Если ПараметрыВыполнения.Свойство("ДатаОкончанияМероприятия") Тогда
				ПриглашениеОбъект.ДополнительныеСвойства.Вставить("ДатаОкончанияМероприятия", ПараметрыВыполнения.ДатаОкончанияМероприятия);
			КонецЕсли;
			
			Если ПараметрыВыполнения.Свойство("Исполнители") Тогда
				ПриглашениеОбъект.ДополнительныеСвойства.Вставить("Исполнители", ПараметрыВыполнения.Исполнители);
			КонецЕсли;
			
			Если ПараметрыВыполнения.Свойство("СрокИсполненияПроцесса") Тогда
				ПриглашениеОбъект.ДополнительныеСвойства.Вставить("СрокИсполненияПроцесса", ПараметрыВыполнения.СрокИсполненияПроцесса);
			КонецЕсли;
			
			Если ПараметрыВыполнения.Свойство("СрокОбработкиРезультатов") Тогда
				ПриглашениеОбъект.ДополнительныеСвойства.Вставить("СрокОбработкиРезультатов", ПараметрыВыполнения.СрокОбработкиРезультатов);
			КонецЕсли;
			Если ПараметрыВыполнения.Свойство("СрокОбработкиРезультатовДни") Тогда
				ПриглашениеОбъект.ДополнительныеСвойства.Вставить("СрокОбработкиРезультатовДни", ПараметрыВыполнения.СрокОбработкиРезультатовДни);
			КонецЕсли;
			Если ПараметрыВыполнения.Свойство("СрокОбработкиРезультатовЧасы") Тогда
				ПриглашениеОбъект.ДополнительныеСвойства.Вставить("СрокОбработкиРезультатовЧасы", ПараметрыВыполнения.СрокОбработкиРезультатовЧасы);
			КонецЕсли;
			Если ПараметрыВыполнения.Свойство("СрокОбработкиРезультатовМинуты") Тогда
				ПриглашениеОбъект.ДополнительныеСвойства.Вставить("СрокОбработкиРезультатовМинуты", ПараметрыВыполнения.СрокОбработкиРезультатовМинуты);
			КонецЕсли;
			Если ПараметрыВыполнения.Свойство("ВариантУстановкиСрокаОбработкиРезультатов") Тогда
				ПриглашениеОбъект.ДополнительныеСвойства.Вставить("ВариантУстановкиСрокаОбработкиРезультатов", ПараметрыВыполнения.ВариантУстановкиСрокаОбработкиРезультатов);
			КонецЕсли;
			
			Если ПараметрыВыполнения.Свойство("ПричинаПереносаСрока") Тогда
				ПриглашениеОбъект.ДополнительныеСвойства.Вставить("ПричинаПереносаСрока", ПараметрыВыполнения.ПричинаПереносаСрока);
			КонецЕсли;
			
			Если ПараметрыВыполнения.Свойство("КоличествоИтераций") Тогда
				ПриглашениеОбъект.ДополнительныеСвойства.Вставить("КоличествоИтераций", ПараметрыВыполнения.КоличествоИтераций);
			КонецЕсли;
			
			РаботаСБизнесПроцессами.ЗаписатьПроцесс(ПриглашениеОбъект, "ЗаписьСОбработкойВыполненияЗадачи");
			
			РазблокироватьДанныеДляРедактирования(
				БизнесПроцессСсылка,
				ПараметрыВыполнения.ИдентификаторБлокировкиПроцесса);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Обработчик, вызываемый после выполнением задачи из процедуры
// ВыполнениеЗадачСервер.ВыполнитьЗадачуСПараметрами
//
// Параметры
//   ЗадачаСсылка  - ЗадачаСсылка.ЗадачаИсполнителя
//   БизнесПроцессСсылка - БизнесПроцессСсылка
//   ТочкаМаршрутаСсылка - точка маршрута
//   ПараметрыВыполнения - Структура
//
Процедура ОбработкаПослеВыполненияЗадачи(
	ЗадачаСсылка, БизнесПроцессСсылка, ТочкаМаршрутаБизнесПроцесса, ПараметрыВыполнения) Экспорт

КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс_ПоддержкаКомплексныхПроцессов

#Область КэшДанныхДействий

// Возвращает выборку данных действий.
//
// Параметры:
//  ТаблицаДействий - ТаблицаЗначений
//   * Действие - ОпределяемыйТип.ШаблонДействияКомплексногоПроцесса
//
// Возвращаемое значение:
//  ВыборкаДанных
//
Функция ВыборкаДанныхДействий(ТаблицаДействий) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаДействий.Действие
		|ПОМЕСТИТЬ ТаблицаДействий
		|ИЗ
		|	&ТаблицаДействий КАК ТаблицаДействий
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Приглашение.Ссылка,
		|	Приглашение.Наименование,
		|	Приглашение.Исполнители,
		|	Приглашение.СрокИсполненияПроцесса,
		|	Приглашение.Состояние,
		|	Приглашение.Завершен,
		|	Приглашение.ДатаЗавершения
		|ИЗ
		|	ТаблицаДействий КАК ТаблицаДействий
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.Приглашение КАК Приглашение
		|		ПО ТаблицаДействий.Действие = Приглашение.Ссылка";
		
	Запрос.УстановитьПараметр("ТаблицаДействий", ТаблицаДействий);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Возвращает данные процесса, являющегося действием комплексного процесса.
//
// Параметры:
//  Объект - БизнесПроцессСсылка.Приглашение, ВыборкаДанных
//
// Возвращаемое значение:
//  Структура - см. функцию РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтруктураДанныхДействия
//
Функция ДанныеДействия(Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеПроцесса = РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтруктураДанныхДействия();
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Объект)) Тогда
		РеквизитыОбъекта = 
			ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				Объект, "Наименование, Исполнители, СрокИсполненияПроцесса,
					|Состояние, Завершен, ДатаЗавершения");
		Исполнители = РеквизитыОбъекта.Исполнители.Выгрузить();
	Иначе
		РеквизитыОбъекта = Объект;
		Исполнители = Объект.Исполнители.Выгрузить();
	КонецЕсли;
	
	ДанныеПроцесса.Описание = НСтр("ru = 'Приглашение: '") + РеквизитыОбъекта.Наименование;
	
	ДанныеПроцесса.СрокИсполненияПроцесса = РеквизитыОбъекта.СрокИсполненияПроцесса;
	
	МассивИсполнителей = Новый Массив;
	Для Каждого СтрокаИсполнитель Из Исполнители Цикл
		РаботаСКомплекснымиБизнесПроцессамиСервер.ДобавитьИсполнителяПроцессаВМассив(
			МассивИсполнителей, СтрокаИсполнитель.Исполнитель);
	КонецЦикла;
	
	ДанныеПроцесса.Исполнители = 
		РаботаСКомплекснымиБизнесПроцессамиСервер.ИсполнителиСтрокой(МассивИсполнителей);
	
	ДанныеПроцесса.СостояниеПроцесса = РеквизитыОбъекта.Состояние;
	
	ДанныеПроцесса.ПроцессЗавершен = РеквизитыОбъекта.Завершен;
	
	ДанныеПроцесса.ДатаЗавершения = РеквизитыОбъекта.ДатаЗавершения;
	
	Возврат ДанныеПроцесса;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ПрограммныйИнтерфейс_Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт

КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс_СрокиИсполненияПроцессов

// Возвращает даты исполнения участников процесса.
//
// Параметры:
//  Процесс - БизнесПроцессСсылка.Приглашение - ссылка на процесс
//
// Возвращаемое значение:
//  Соответствие
//   * Ключ - Строка, ЗадачаСсылка.ЗадачаИсполнителя - имя реквизита с участником процесса или ссылка на его задачу.
//
Функция ДатыИсполненияУчастников(Процесс) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДатыИсполнения = Новый Соответствие;
	
	НомерИтерации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Процесс, "НомерИтерации");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Процесс", Процесс);
	Запрос.УстановитьПараметр("НомерИтерации", НомерИтерации);
	
	// Получение дата исполнения исполнителями.
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РезультатыПриглашения.ЗадачаИсполнителя КАК ЗадачаИсполнителя,
		|	Задачи.ДатаИсполнения КАК ДатаИсполнения
		|ИЗ
		|	БизнесПроцесс.Приглашение.РезультатыПриглашения КАК РезультатыПриглашения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК Задачи
		|		ПО РезультатыПриглашения.ЗадачаИсполнителя = Задачи.Ссылка
		|ГДЕ
		|	РезультатыПриглашения.Ссылка = &Процесс
		|	И РезультатыПриглашения.НомерИтерации = &НомерИтерации";
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДатыИсполнения.Вставить(Выборка.ЗадачаИсполнителя, Выборка.ДатаИсполнения);
	КонецЦикла;
	
	// Получение даты исполнения обработки результов.
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Задачи.ДатаИсполнения КАК ДатаИсполнения
		|ИЗ
		|	БизнесПроцесс.Приглашение.РезультатыОзнакомлений КАК РезультатыОзнакомлений
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК Задачи
		|		ПО РезультатыОзнакомлений.ЗадачаИсполнителя = Задачи.Ссылка
		|ГДЕ
		|	РезультатыОзнакомлений.Ссылка = &Процесс
		|	И РезультатыОзнакомлений.НомерИтерации = &НомерИтерации";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДатыИсполнения.Вставить("Автор", Выборка.ДатаИсполнения);
	КонецЕсли;
	
	Возврат ДатыИсполнения;
	
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейс_УчетПереносовСроковИсполнения

// Устанавливает срок исполнителю задачи в процессе.
//
// Параметры:
//  Срок - Дата - новый срок исполнителя.
//  Задача - ЗадачаСсылка.ЗадачаИсполнителя - задача исполнителя.
//  Процесс - БизнесПроцессОбъект - изменяемый процесс.
//  ПараметрыИзмененногоРеквизита - Структура - параметры измененного реквизита процесса.
//   * РеквизитТаблицаСИзмененнымСроком - Строка - имя реквизита или табличной части процесса.
//   * ИндексСтроки - Число - индекс строки табличной части. Присутствует если изменяется табличная часть.
//
Процедура УстановитьСрокИсполнителяЗадачиВПроцессе(
	Срок, Задача, Процесс, ПараметрыИзмененногоРеквизита) Экспорт
	
	ПараметрыИзмененногоРеквизита = Новый Структура;
	ПараметрыИзмененногоРеквизита.Вставить("РеквизитТаблицаСИзмененнымСроком", "");
	ПараметрыИзмененногоРеквизита.Вставить("ИндексСтроки", 0);
	
	ТочкаМаршрутаЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задача, "ТочкаМаршрута");
	
	Если ТочкаМаршрутаЗадачи = ТочкиМаршрута.Пригласить Тогда
		
		СтрИсполнителя = Процесс.Исполнители.Найти(Задача, "ЗадачаИсполнителя");
			Если СтрИсполнителя <> Неопределено Тогда
				СтрИсполнителя.СрокИсполнения = Срок;
				
				СтрИсполнителя.ВариантУстановкиСрокаИсполнения = 
					Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
				
				ПараметрыИзмененногоРеквизита.РеквизитТаблицаСИзмененнымСроком = "Исполнители";
				
				ПараметрыИзмененногоРеквизита.ИндексСтроки = Процесс.Исполнители.Индекс(СтрИсполнителя);
			КонецЕсли;
		
	ИначеЕсли ТочкаМаршрутаЗадачи = ТочкиМаршрута.Ознакомиться Тогда
		Процесс.СрокОбработкиРезультатов = Срок;
		
		Процесс.ВариантУстановкиСрокаОбработкиРезультатов = 
			Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
			
		ПараметрыИзмененногоРеквизита.РеквизитТаблицаСИзмененнымСроком = "СрокОбработкиРезультатов";
	КонецЕсли;
	
КонецПроцедуры

// Переносит срок исполнения задачи процесса по заявке.
// При переносе обновляются сроки в текущем и зависимых процессах.
//
// Параметры:
//	Задача - ЗадачаСсылка.ЗадачаИсполнителя - Ссылка на задачу.
//	ПараметрыВыполнения - Структура:
//		* НовыйСрок - Дата - Новый срок задачи.
//		* Процесс - БизнесПроцессСсылка - Ссылка на процесс задачи.
//		* ПричинаПереносаСрока - Строка - Причина, по которой переносится срок задачи.
//		* ЗаявкаНаПереносСрока - БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач - Заявка на перенос срока.
//
Процедура ИзменитьСрокИсполненияЗадачи(Задача, ПараметрыВыполнения) Экспорт
	
	Процесс = ПараметрыВыполнения.Процесс;
	НовыйСрок = ПараметрыВыполнения.НовыйСрок;
	ЗаявкаНаПеренос = ПараметрыВыполнения.ЗаявкаНаПереносСрока;
	ПричинаПереносаСрока = ПараметрыВыполнения.ПричинаПереносаСрока;
	
	Если РаботаСПроцессамиПоДействиямСобытия.ОбработатьИзмениеСрокаИсполненияЗадачи(
			НовыйСрок, Задача, ПричинаПереносаСрока, ЗаявкаНаПеренос) Тогда
		
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
		
	ЗаблокироватьДанныеДляРедактирования(Процесс);
	
	ПроцессОбъект = Процесс.ПолучитьОбъект();
	
	СтарыеУчастникиПроцесса = ТекущиеУчастникиПроцесса(ПроцессОбъект);
	
	ПараметрыИзмененногоРеквизита = Новый Структура;
	
	УстановитьСрокИсполнителяЗадачиВПроцессе(
		НовыйСрок, Задача, ПроцессОбъект, ПараметрыИзмененногоРеквизита);
	
	Если ПараметрыИзмененногоРеквизита.Количество() > 0 Тогда
		
		ПараметрыЗаписи = Новый Структура;
		ПараметрыЗаписи.Вставить("ПричинаПереносаСрока", ПричинаПереносаСрока);
		ПараметрыЗаписи.Вставить("БизнесПроцессПереноса", ЗаявкаНаПеренос);
		
		ПереносСроковВыполненияЗадач.ПередатьПричинуИЗаявкуНаПереносаСрока(
			ПроцессОбъект, ПараметрыЗаписи);
		
		ПараметрыДляРасчетаСроков = СрокиИсполненияПроцессов.ПараметрыДляРасчетаСроков();
		
		ПараметрыДляРасчетаСроков.ДатаОтсчета = 
			СрокиИсполненияПроцессов.ДатаОтсчетаДляРасчетаСроковПроцесса(ПроцессОбъект);
			
		ПараметрыДляРасчетаСроков.РеквизитТаблицаСИзмененнымСроком = 
			ПараметрыИзмененногоРеквизита.РеквизитТаблицаСИзмененнымСроком;
			
		ПараметрыДляРасчетаСроков.ИндексСтроки = ПараметрыИзмененногоРеквизита.ИндексСтроки;
		
		ПараметрыДляРасчетаСроков.ТекущаяИтерация = ПроцессОбъект.НомерИтерации;
		
		СрокиИсполненияПроцессовКОРП.РассчитатьСрокиПриглашения(
			ПроцессОбъект, ПараметрыДляРасчетаСроков);
		
		РаботаСБизнесПроцессами.ЗаписатьПроцесс(
			ПроцессОбъект, "ЗаписьСОбновлениемОбщегоСпискаИПереносомСроковВИерархииПроцессов");
		
		ПроцессОбъект.ИзменитьРеквизитыНевыполненныхЗадач(СтарыеУчастникиПроцесса, ПараметрыЗаписи);
	КонецЕсли;
	
	РазблокироватьДанныеДляРедактирования(Процесс);
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область СлужебныеЗадачиТочекДействий

// Проверяет является ли переданная задача процесса служебной.
//
// Параметры:
//  Задача - ЗадачаОбъект.ЗадачаИсполнителя,
//           ЗадачаСсылка.ЗадачаИсполнителя,
//           Структура со свойствами Исполнитель, РольИсполнителя, ТочкаМаршрута, Наименование
//
// Возвращаемое значение:
//  Булево
//
Функция ЭтаСлужебнаяЗадачаПроцесса(ЗадачаПроцесса) Экспорт
	
	// Служебных задач не предусмотрено.
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область Предметы

// Возвращает участников для проверки прав на предметы.
//
// Параметры:
//  Процесс - БизнесПроцессОбъект, БизнесПроцессСсылка - процесс
//
// Возвращаемое значение:
//  ТаблицаЗначений
//   * Участник
//   * Изменение
//
Функция УчастникиДляПроверкиПрав(Процесс) Экспорт
	
	ТаблицаУчастников = РаботаСРабочимиГруппами.ПолучитьПустуюТаблицуУчастников();
	
	РаботаСБизнесПроцессами.ДобавитьУчастниковПриглашенияВТаблицу(ТаблицаУчастников, Процесс);
	
	Возврат ТаблицаУчастников;
	
КонецФункции

// Возвращает массив доступных типов основных предметов
Функция ТипыОсновныхПредметов() Экспорт
	
	ТипыПредметов = Новый Массив;
	
	ТипыПредметов.Добавить(Тип("СправочникСсылка.ДокументыПредприятия"));  
	ТипыПредметов.Добавить(Тип("СправочникСсылка.Мероприятия")); 
	ТипыПредметов.Добавить(Тип("СправочникСсылка.Проекты")); 
	ТипыПредметов.Добавить(Тип("СправочникСсылка.ПроектныеЗадачи"));
	ТипыПредметов.Добавить(Тип("СправочникСсылка.СообщенияОбсуждений")); 
	ТипыПредметов.Добавить(Тип("СправочникСсылка.ТемыОбсуждений")); 
	ТипыПредметов.Добавить(Тип("СправочникСсылка.Файлы")); 
	
	ТипыПредметов.Добавить(Тип("ДокументСсылка.ВходящееПисьмо")); 
	ТипыПредметов.Добавить(Тип("ДокументСсылка.ИсходящееПисьмо")); 
	
	Возврат ТипыПредметов;
	
КонецФункции

// Возвращает доступные для процесса роли предметов
Функция ПолучитьДоступныеРолиПредметов() Экспорт
	
	РолиПредметов = Новый Массив;
	
	РолиПредметов.Добавить(Перечисления.РолиПредметов.Основной);
	РолиПредметов.Добавить(Перечисления.РолиПредметов.Вспомогательный);
	
	Возврат РолиПредметов;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	ПолучениеФормыОбработано = РаботаСПроцессамиПоДействиямСобытия.ОбработатьПолучениеФормыПроцесса(
		ВидФормы, Параметры, ВыбраннаяФорма, СтандартнаяОбработка);
	
	Если Не ПолучениеФормыОбработано Тогда
			
		Если ВидФормы = "ФормаСписка" Тогда
			
			СтандартнаяОбработка = Ложь;
			Параметры.Вставить("ТипПроцесса", "Приглашение");
			ВыбраннаяФорма = Метаданные.ОбщиеФормы.СписокПроцессов;
			
		ИначеЕсли ВидФормы = "ФормаВыбора" Тогда
			
			СтандартнаяОбработка = Ложь;
			Параметры.Вставить("Заголовок", НСтр("ru = 'Приглашения'"));
			Параметры.Вставить("ТипПроцесса", Тип("БизнесПроцессСсылка.Приглашение"));
			ВыбраннаяФорма = Метаданные.ОбщиеФормы.ВыборБизнесПроцесса;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// УправлениеДоступом

Функция ПолучитьПоляДоступа() Экспорт
	
	Возврат "Ссылка";
	
КонецФункции

// Заполняет переданный дескриптор доступа 
Процедура ЗаполнитьОсновнойДескриптор(ОбъектДоступа, ДескрипторДоступа) Экспорт
	
	ДескрипторДоступа.ОбъектДоступа = ОбъектДоступа.Ссылка;
	
КонецПроцедуры

Функция ЕстьМетодЗаполнитьДескрипторыОбъекта() Экспорт
	
	Возврат Истина;
	
КонецФункции

Процедура ЗаполнитьДескрипторыОбъекта(ОбъектДоступа, ТаблицаДескрипторов, ПротоколРасчетаПрав = Неопределено) Экспорт
	
	// Только основной дескриптор, без рабочей группы.
	ДокументооборотПраваДоступа.ЗаполнитьДескрипторОбъектаОсновной(ОбъектДоступа, ТаблицаДескрипторов);
	
КонецПроцедуры

// Возвращает признак того, что менеджер содержит метод ЗапросДляРасчетаПрав()
// 
Функция ЕстьМетодЗапросДляРасчетаПрав() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает запрос для расчета прав доступа по дескрипторам объекта
// 
// Параметры:
//  
//  Дескрипторы - Массив - массив дескрипторов, чьи права нужно рассчитать
//  ИдОбъекта - Ссылка - идентификатор объекта метаданных, назначенный переданным дескрипторам
//  МенеджерОбъектаДоступа - СправочникМенеджер, ДокументМенеджер - менеджер объекта доступа
// 
// Возвращаемое значение - Запрос - запрос, который выберет права доступа для переданного массива дескрипторов
// 
Функция ЗапросДляРасчетаПрав(Дескрипторы, ИдОбъекта, МенеджерОбъектаДоступа) Экспорт
	
	Возврат БизнесПроцессыИЗадачиСервер.ЗапросДляРасчетаПрав(Дескрипторы, ИдОбъекта, МенеджерОбъектаДоступа);
	
КонецФункции

// Заполняет протокол расчета прав дескрипторов
// 
// Параметры:
//  
//  ПротоколРасчетаПрав - Массив - протокол для заполнения
//  ЗапросПоПравам - Запрос - запрос, который использовался для расчета прав дескрипторов
//  Дескрипторы - Массив - массив дескрипторов, чьи права были рассчитаны
//  
Процедура ЗаполнитьПротоколРасчетаПрав(ПротоколРасчетаПрав, ЗапросПоПравам) Экспорт
	
	БизнесПроцессыИЗадачиСервер.ЗаполнитьПротоколРасчетаПрав(ПротоколРасчетаПрав, ЗапросПоПравам);
	
КонецПроцедуры

// Проверяет наличие метода.
// 
Функция ЕстьМетодПраваСотрудниковПоФайлам() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает права доступа пользователей к переданным файлам.
// 
Функция ПраваСотрудниковПоФайлам(Файлы, СотрудникиОтбор = Неопределено) Экспорт
	
	Возврат БизнесПроцессыИЗадачиСервер.ПраваСотрудниковПоФайлам(Файлы, СотрудникиОтбор);
	
КонецФункции

// Конец УправлениеДоступом

// Получить структуру с описанием формы выполнения задачи.
// Вызывается при открытии формы выполнения задачи.
//
// Параметры
//   ЗадачаСсылка  - ЗадачаСсылка.ЗадачаИсполнителя - задача 
//   ТочкаМаршрутаСсылка - точка маршрута 
//
// Возвращаемое значение:
//   Структура   - структуру с описанием формы выполнения задачи.
//                 Ключ "ИмяФормы" содержит имя формы, передаваемое в метод контекста ОткрытьФорму(). 
//                 Ключ "ПараметрыФормы" содержит параметры формы. 
//
Функция ФормаВыполненияЗадачи(ЗадачаСсылка, ТочкаМаршрутаСсылка) Экспорт
	
	Если ТочкаМаршрутаСсылка = БизнесПроцессы.Приглашение.ТочкиМаршрута.Пригласить Тогда 
		ИмяФормы = "БизнесПроцесс.Приглашение.Форма.ФормаЗадачиИсполнителя";
		
	ИначеЕсли ТочкаМаршрутаСсылка = БизнесПроцессы.Приглашение.ТочкиМаршрута.Ознакомиться Тогда 
		ИмяФормы = "БизнесПроцесс.Приглашение.Форма.ФормаЗадачиОзнакомиться";
		
	ИначеЕсли ТочкаМаршрутаСсылка = БизнесПроцессы.Приглашение.ТочкиМаршрута.Оповестить Тогда 	
		ИмяФормы = "БизнесПроцесс.Приглашение.Форма.ФормаЗадачиОповестить";
		
	КонецЕсли;	
		
	Результат = Новый Структура;
	Результат.Вставить("ПараметрыФормы", Новый Структура("Ключ", ЗадачаСсылка));
	Результат.Вставить("ИмяФормы", ИмяФормы);
	Возврат Результат;	
	
КонецФункции

// Вызывается при перенаправлении задачи.
//
// Параметры
//   ЗадачаСсылка  - ЗадачаСсылка.ЗадачаИсполнителя - перенаправляемая задача.
//   ОтключитьОбновлениеЗадач - Булево.
//
Процедура ПриПеренаправленииЗадачи(ЗадачаСсылка, ОтключитьОбновлениеЗадач = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗадачаСсылка, 
		"ТочкаМаршрута, БизнесПроцесс, Исполнитель, РольИсполнителя");
		
	ТочкаМаршрута = Реквизиты.ТочкаМаршрута;
	БизнесПроцесс = Реквизиты.БизнесПроцесс;
	
	Если ТочкаМаршрута = ТочкиМаршрута.Пригласить Тогда 
	 
		БизнесПроцессОбъект = БизнесПроцесс.ПолучитьОбъект();
		БизнесПроцессОбъект.Заблокировать();
		
		СтруктураПоиска = Новый Структура("ЗадачаИсполнителя", ЗадачаСсылка);
		НайденныеСтроки = БизнесПроцессОбъект.Исполнители.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда 
			НайденнаяСтрока = НайденныеСтроки[0];
			
			Если ЗначениеЗаполнено(Реквизиты.Исполнитель) Тогда 
				НайденнаяСтрока.Исполнитель = Реквизиты.Исполнитель;
			Иначе
				НайденнаяСтрока.Исполнитель = Реквизиты.РольИсполнителя;
			КонецЕсли;
			
			// проверка дублей
			Исполнители = БизнесПроцессОбъект.Исполнители.Выгрузить();
			Исполнители.Свернуть("Исполнитель");
			Если Исполнители.Количество() < БизнесПроцессОбъект.Исполнители.Количество() Тогда 
				ВызватьИсключение  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Исполнитель ""%1"" уже находится в списке исполнителей процесса!'"),
					Строка(Реквизиты.Исполнитель));
			КонецЕсли;
			
			Если ОтключитьОбновлениеЗадач Тогда
				БизнесПроцессОбъект.ДополнительныеСвойства.Вставить("ОтключитьОбновлениеЗадач", Истина);
			КонецЕсли;
			
			БизнесПроцессОбъект.Записать();
		КонецЕсли;	
	 
 	ИначеЕсли ТочкаМаршрута = ТочкиМаршрута.Ознакомиться Тогда 
		
		Если Не ЗначениеЗаполнено(Реквизиты.Исполнитель) Тогда 
			ВызватьИсключение НСтр("ru = 'Задачу автора процесса нельзя перенаправить на роль исполнителя.'");
		КонецЕсли;	
		
		БизнесПроцессОбъект = БизнесПроцесс.ПолучитьОбъект();
		БизнесПроцессОбъект.Заблокировать();
		
		БизнесПроцессОбъект.Автор = Реквизиты.Исполнитель;
		Если ОтключитьОбновлениеЗадач Тогда
			БизнесПроцессОбъект.ДополнительныеСвойства.Вставить("ОтключитьОбновлениеЗадач", Истина);
		КонецЕсли;
		БизнесПроцессОбъект.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает массив пользователей переданного бизнес-процесса,
// которые должны иметь иметь права на другие бизнес-процессы, 
// для которых данный бизнес-процесс является ведущим
Функция ПользователиВедущегоБизнесПроцесса(ВедущийБизнесПроцесс) Экспорт
	
	МассивПользователей = Новый Массив;
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВедущийБизнесПроцесс, "Автор");
	Если ЗначениеЗаполнено(Реквизиты.Автор) Тогда
		МассивПользователей.Добавить(Реквизиты.Автор);
	КонецЕсли;
	
	Возврат МассивПользователей;
	
КонецФункции

// Возвращает тип шаблона бизнес-процесса, соответствующего данному процессу
Функция ТипШаблона() Экспорт
	
	Возврат "Справочник.ШаблоныПриглашения";
	
КонецФункции

// Показывает, может ли процесс запускаться через привычные интерфейсы
Функция МожетЗапускатьсяИнтерактивно() Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Возвращает текстовое описание назначения процесса
Функция ПолучитьОписаниеПроцесса() Экспорт
	
	Возврат НСтр("ru = 'Используется для приглашения на мероприятие, встречу, совещание или любое другое собрание.'");
	
КонецФункции

// Проверяет, что процесс завершился удачно
Функция ПроцессЗавершилсяУдачно(Ссылка) Экспорт
	
	РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Ссылка,
		"Завершен, РезультатПриглашения");
	Возврат РеквизитыПроцесса.Завершен 
		И (РеквизитыПроцесса.РезультатПриглашения = 
			Перечисления.ОбщиеРезультатыПриглашения.ПринятоВсемиУчастниками 
		ИЛИ РеквизитыПроцесса.РезультатПриглашения = 
			Перечисления.ОбщиеРезультатыПриглашения.ПринятоОбязательнымиУчастниками);
	
КонецФункции

// Возвращает признак наличия метода РезультатВыполненияПроцесса
Функция ЕстьМетодРезультатВыполненияПроцесса() Экспорт
	Возврат Истина;
КонецФункции

// Возвращает результат выполнения - значение перечисления ВариантыВыполненияПроцессовИЗадач
Функция РезультатВыполненияПроцесса(Ссылка) Экспорт
	
	РезультатПриглашения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "РезультатПриглашения");
	
	Если РезультатПриглашения = Перечисления.ОбщиеРезультатыПриглашения.ПринятоВсемиУчастниками Тогда
		Возврат Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно;
	ИначеЕсли РезультатПриглашения = Перечисления.ОбщиеРезультатыПриглашения.ПринятоОбязательнымиУчастниками Тогда
		Возврат Перечисления.ВариантыВыполненияПроцессовИЗадач.ПоложительноСЗамечаниями;
	Иначе
		Возврат Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно;
	КонецЕсли;
	
КонецФункции

// Возвращает результат выполнения в контексте процесса.
// 
// Параметры:
//  Ссылка Ссылка
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.РезультатыПриглашения
//
Функция КонтекстныйРезультатВыполненияПроцесса(Ссылка) Экспорт
	
	Возврат 
		ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
		Ссылка, "РезультатПриглашения");
	
КонецФункции

// Возвращает массив пользователей переданного бизнес-процесса,
// которые должны иметь иметь права на другие бизнес-процессы, 
// для которых данный бизнес-процесс является ведущим
Функция УчастникиПроцессаВлияющиеНаДоступКПодчиненнымОбъектам(Процесс) Экспорт
	
	МассивПользователей = Новый Массив;
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Процесс, "Автор, Проект");
	Если ЗначениеЗаполнено(Реквизиты.Автор) Тогда
		ДанныеУчастника = Новый Структура(
			"Участник");
		ДанныеУчастника.Участник = Реквизиты.Автор;
		МассивПользователей.Добавить(ДанныеУчастника);
	КонецЕсли;
	
	// Добавление руководителя проекта
	Если ЗначениеЗаполнено(Реквизиты.Проект) Тогда
		
		РуководительПроекта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.Проект, "Руководитель");
		Если ЗначениеЗаполнено(РуководительПроекта) Тогда
			
			ДанныеУчастника = Новый Структура(
				"Участник");
			ДанныеУчастника.Участник = РуководительПроекта;
			
			МассивПользователей.Добавить(ДанныеУчастника);
			
		КонецЕсли;	
			
	КонецЕсли;	
	
	Возврат МассивПользователей;
	
КонецФункции

// Возвращает массив всех участников процесса 
Функция ВсеУчастникиПроцесса(ПроцессСсылка) Экспорт
	
	ВсеУчастники = Новый Массив;
	
	// Автор
	Автор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПроцессСсылка, "Автор");
	ДанныеУчастника = Новый Структура;
	ДанныеУчастника.Вставить("Участник", Автор);
	ВсеУчастники.Добавить(ДанныеУчастника);

	// Исполнители
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Исполнители.Исполнитель
		|ИЗ
		|	БизнесПроцесс.Приглашение.Исполнители КАК Исполнители
		|ГДЕ
		|	Исполнители.Ссылка = &Ссылка";

	Запрос.УстановитьПараметр("Ссылка", ПроцессСсылка);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();

	Пока Выборка.Следующий() Цикл
		ДанныеУчастника = Новый Структура;
		ДанныеУчастника.Вставить("Участник", Выборка.Исполнитель);
		ВсеУчастники.Добавить(ДанныеУчастника);
	КонецЦикла;

	Возврат ВсеУчастники;
	
КонецФункции

// Проверяет, подходит ли объект к шаблону бизнес-процесса
Функция ШаблонПодходитДляАвтозапускаБизнесПроцессаПоОбъекту(ШаблонСсылка, ПредметСсылка, Подписчик, ВидСобытия, Условие) Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает признак наличия метода ДополнительныеДанныеПоЗадаче
Функция ЕстьМетодДополнительныеДанныеПоЗадаче() Экспорт
	Возврат Истина;
КонецФункции

// Возвращает структуру дополнительных данных переданной задачи:
//	РезультатВыполнения - результат выполнения задачи
//  КонтекстВыполненияЗадачи - Контекст выполнения задачи задачи для истории
Функция ДополнительныеДанныеПоЗадаче(Задача) Экспорт
	
	СтруктураВозврата = Новый Структура("РезультатВыполнения, КонтекстВыполненияЗадачи");

	Если Не Задача.Выполнена Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	РезультатВыполнения = Неопределено;
	
	ТочкаМаршрута = Задача.ТочкаМаршрута;
	ТочкиМаршрутаПроцесса = БизнесПроцессы.Приглашение.ТочкиМаршрута;
	
	РезультатДействия = Справочники.РезультатыДействийЗадач.ПустаяСсылка();
	ТекстРезультатаВыполнения = Задача.РезультатВыполнения;
	
	Если ТочкаМаршрута = ТочкиМаршрутаПроцесса.Пригласить Тогда
		
		РезультатВыполнения = РезультатВыполненияЗадачи(Задача);
		
		Если РезультатВыполнения = Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно Тогда
			РезультатДействия = Справочники.РезультатыДействийЗадач.ПринятоПриглашение;
		ИначеЕсли РезультатВыполнения = Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно Тогда
			РезультатДействия = Справочники.РезультатыДействийЗадач.ОтклоненоПриглашение;
		КонецЕсли;
		
	ИначеЕсли ТочкаМаршрута = ТочкиМаршрутаПроцесса.Ознакомиться Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
			|	ПриглашениеРезультатыОзнакомлений.ОтправленоПовторноеПриглашение
			|ИЗ
			|	БизнесПроцесс.Приглашение.РезультатыОзнакомлений КАК ПриглашениеРезультатыОзнакомлений
			|ГДЕ
			|	ПриглашениеРезультатыОзнакомлений.ЗадачаИсполнителя = &ЗадачаИсполнителя");
			
		Запрос.УстановитьПараметр("ЗадачаИсполнителя", Задача.Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			Если Выборка.ОтправленоПовторноеПриглашение Тогда
				РезультатДействия = Справочники.РезультатыДействийЗадач.ОтправленоПовторно;
			Иначе
				РезультатДействия = Справочники.РезультатыДействийЗадач.Ознакомился;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеИсполнителяДляИсторииВыполнения = Задача.ДанныеИсполнителяДляИсторииВыполнения();
	
	КонтекстВыполненияЗадачи = РегистрыСведений.ИсторияЗадач.КонтекстВыполнения();
	КонтекстВыполненияЗадачи.Исполнитель = ДанныеИсполнителяДляИсторииВыполнения.Исполнитель;
	КонтекстВыполненияЗадачи.ПлановыйИсполнитель = ДанныеИсполнителяДляИсторииВыполнения.ПлановыйИсполнитель;
	КонтекстВыполненияЗадачи.ОснованиеФактическогоИсполнителя =
		ДанныеИсполнителяДляИсторииВыполнения.ОснованиеФактическогоИсполнителя;
	КонтекстВыполненияЗадачи.ТекстРезультатаВыполнения = ТекстРезультатаВыполнения;
	КонтекстВыполненияЗадачи.ПриложенияРезультатаВыполнения = РаботаСЗадачами.СлепокПриложенийРезультатаПоИсточнику(Задача.Ссылка);
	КонтекстВыполненияЗадачи.РезультатДействия = РезультатДействия;
	
	СтруктураВозврата.РезультатВыполнения = РезультатВыполнения;
	СтруктураВозврата.КонтекстВыполненияЗадачи = КонтекстВыполненияЗадачи;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Возвращает признак наличия метода РезультатВыполненияЗадачи
//
// Возвращаемое значение:
//  Булево
//
Функция ЕстьМетодРезультатВыполненияЗадачи() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает результат выполнения задачи.
//
// Параметры:
//  Задача - ЗадачаОбъект.ЗадачаИсполнителя,
//           ЗадачаСсылка.ЗадачаИсполнителя
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ВариантыВыполненияПроцессовИЗадач,
//  Неопределено
//
Функция РезультатВыполненияЗадачи(Задача) Экспорт
	
	РезультатВыполнения = Неопределено;
	
	Если ТипЗнч(Задача) = Тип("ЗадачаОбъект.ЗадачаИсполнителя") Тогда
		РеквизитыЗадачи = Задача;
	Иначе
		РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Задача, "Выполнена, ТочкаМаршрута, БизнесПроцесс, Ссылка");
	КонецЕсли;
	
	Если РеквизитыЗадачи.Выполнена = Истина
		И РеквизитыЗадачи.ТочкаМаршрута = ТочкиМаршрута.Пригласить Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	ПриглашениеРезультатыПриглашения.РезультатПриглашения КАК РезультатПриглашения
			|ИЗ
			|	БизнесПроцесс.Приглашение.РезультатыПриглашения КАК ПриглашениеРезультатыПриглашения
			|ГДЕ
			|	ПриглашениеРезультатыПриглашения.Ссылка = &Процесс
			|	И ПриглашениеРезультатыПриглашения.ЗадачаИсполнителя = &ЗадачаПроцесса";
		Запрос.УстановитьПараметр("Процесс", РеквизитыЗадачи.БизнесПроцесс);
		Запрос.УстановитьПараметр("ЗадачаПроцесса", РеквизитыЗадачи.Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если Выборка.РезультатПриглашения = Перечисления.РезультатыПриглашения.Принято Тогда
				РезультатВыполнения = Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно;
			ИначеЕсли Выборка.РезультатПриглашения = Перечисления.РезультатыПриглашения.НеПринято Тогда
				РезультатВыполнения = Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

// Возвращает массив структур, содержащих описания участников.
// Состав структуры:
//   ТабличнаяЧасть - имя ТЧ, в которой хранятся данные участников. Если данные хранятся в шапке, этот ключ отсутствует.
//   ИмяУчастника - имя реквизита шапки или ТЧ, в котором хранится ссылка на участника.
//   ВлияетНаДоступКПодчиненнымОбъектам - признак, указывающий на необходимость пересчета прав 
//   задач и дочерних процессов при изменении данного участника.
//
Функция ЗаполнитьОписанияУчастников() Экспорт
	
	МассивОписанийУчастников = Новый Массив;
	
	// Автор
	МассивОписанийУчастников.Добавить(Новый Структура(
		"ИмяУчастника,
		|ВлияетНаДоступКПодчиненнымОбъектам", 
		"Автор",
		Истина));
	
	// Исполнители
	МассивОписанийУчастников.Добавить(Новый Структура(
		"ТабличнаяЧасть, ИмяУчастника,
		|ВлияетНаДоступКПодчиненнымОбъектам", 
		"Исполнители", "Исполнитель",
		Ложь));
		
	// Проект
	МассивОписанийУчастников.Добавить(Новый Структура(
		"ИмяУчастника,
		|ВлияетНаДоступКПодчиненнымОбъектам",
		"Проект",
		Ложь));
		
	Возврат МассивОписанийУчастников;
		
КонецФункции

// Возвращает возможность выполнения задачи процесса по почте.
// 
// Параметры:
//  РеквизитыЗадачи - Структура
//    * БизнесПроцесс - БизнесПроцессСсылка.Приглашение
//    * ТочкаМаршрута - ТочкаМаршрутаБизнесПроцессаСсылка.Приглашение
//    * Ссылка - ЗадачаИсполнителя - ссылка на задачу процесса.
//
// Возвращаемое значение:
//  Булево
//
Функция ВозможноВыполнениеЗадачиПроцессаПоПочте(РеквизитыЗадачи) Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает структуру с вариантами ответов для формирования уведомлений
// с возможностью исполнения задач по почте. Варианты ответов определяются в
// зависимости от точки маршрута.
//
// Параметры:
//	ЗадачаСсылка - ЗадачаСсылка.ЗадачаИсполнителя - задача для которой определяются
//				   варианты ответов.
//	БизнесПроцессСсылка - БизнесПроцессСсылка.Приглашение - бизнес процесс по которому
//						  назначена задача.
//	ТочкаМаршрута - ТочкаМаршрутаБизнесПроцессаСсылка - точка маршрута в которой находится
//					БизнесПроцесс
//	КодЯзыкаПолучателя - Строка.
//
// Возвращаемое значение:
//  Структура
//	 * СписокВариантовОтветов - СписокЗначений - список значений типа
//								ПеречисленияСсылка.ВариантыВыполненияПроцессовИЗадач,
//								с заполненным представлением; в нем содержатся варианты
//								ответов.
//	 * ИспользоватьКомментарий - Булево - Принимает значение Истина, если для текущей задачи
//								 ввод комментария обязателен.
//
Функция ВариантыОтветовДляВыполненияЗадачиПоПочте(
	ЗадачаСсылка,
	БизнесПроцессСсылка,
	ТочкаМаршрута,
	КодЯзыкаПолучателя) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("СписокВариантовОтветов", Новый СписокЗначений);
	Результат.Вставить("ИспользоватьКомментарий", Ложь);

	Если ТочкаМаршрута = ТочкиМаршрута.Пригласить Тогда
		
		Результат.СписокВариантовОтветов.Добавить(
			Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно,
			НСтр("ru = 'Принять приглашение'", КодЯзыкаПолучателя));
		Результат.СписокВариантовОтветов.Добавить(
			Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно,
			НСтр("ru = 'Отклонить приглашение'", КодЯзыкаПолучателя));
			
		Результат.ИспользоватьКомментарий = Истина;
		
	ИначеЕсли ТочкаМаршрута = ТочкиМаршрута.Ознакомиться Тогда
		
		РезультатВыполнения = РезультатВыполненияПроцесса(БизнесПроцессСсылка);
		
		Если РезультатВыполнения
				= Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно Тогда
			
			Результат.СписокВариантовОтветов.Добавить(
				Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно,
				НСтр("ru = 'Подтвердить приглашение'", КодЯзыкаПолучателя));
				
		ИначеЕсли РезультатВыполнения = 
			Перечисления.ВариантыВыполненияПроцессовИЗадач.ПоложительноСЗамечаниями Тогда
			
			Результат.СписокВариантовОтветов.Добавить(
				Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно,
				НСтр("ru = 'Повторить приглашение'", КодЯзыкаПолучателя));
			Результат.СписокВариантовОтветов.Добавить(
				Перечисления.ВариантыВыполненияПроцессовИЗадач.ПоложительноСЗамечаниями,
				НСтр("ru = 'Отменить приглашение'", КодЯзыкаПолучателя));
				
		ИначеЕсли РезультатВыполнения =
			Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно Тогда
			
			Результат.СписокВариантовОтветов.Добавить(
				Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно,
				НСтр("ru = 'Повторить приглашение'", КодЯзыкаПолучателя));
				
			Результат.СписокВариантовОтветов.Добавить(
				Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно,
				);
				
		КонецЕсли;
	ИначеЕсли ТочкаМаршрута = ТочкиМаршрута.Оповестить Тогда
		
		Результат.СписокВариантовОтветов.Добавить(
			Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно,
			НСтр("ru = 'Ознакомился'", КодЯзыкаПолучателя));
			
		Результат.ИспользоватьКомментарий = Истина;
	
	Иначе
		ВызватьИсключение 
			НСтр("ru = 'Неожиданная точка маршрута задачи.'", КодЯзыкаПолучателя);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает участника процесса, которого необходимо ознакомить с результатом завершения процесса.
//
// Параметры:
//	Процесс - БизнесПроцессСсылка, БизнесПроцессОбъект - Процесс, для которого необходимо получить ознакамливаемого c
//														 результатом завершения процесса.
//
// Возвращаемое значение:
//	СправочникСсылка.Сотрудники, СправочникСсылка.ПолныеРоли
//
Функция ОзнакамливаемыйСРезультатом(Процесс) Экспорт

	Если ТипЗнч(Процесс) = Тип("БизнесПроцессОбъект.Приглашение") Тогда
		Возврат Процесс.Автор;
	Иначе
		Возврат ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(Процесс, "Автор");
	КонецЕсли;
		
КонецФункции

// Возвращает описание результата завершения процесса.
//
// Параметры:
//	Процесс - БизнесПроцессСсылка - Процесс, для которого необходимо получить описание результата завершения.
//	КодЯзыка - Строка - Код языка пользователя
//
// Возвращаемое значение:
//	Строка - Описание результата завершения процесса.
//
Функция ОписаниеРезультатаЗавершенияПроцесса(Процесс, КодЯзыка) Экспорт

	ОписаниеРезультата = "";
	
	РезультатПриглашения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Процесс, "РезультатПриглашения");
	Если РезультатПриглашения = Перечисления.ОбщиеРезультатыПриглашения.ПринятоВсемиУчастниками
			Или РезультатПриглашения = Перечисления.ОбщиеРезультатыПриглашения.ПринятоОбязательнымиУчастниками Тогда 
		
		ОписаниеРезультата = НСтр("ru = 'Результат рассылки приглашений: Приглашения подтверждены'", КодЯзыка);
	Иначе
		ОписаниеРезультата = НСтр("ru = 'Результат рассылки приглашений: Приглашения отменены'", КодЯзыка);
	КонецЕсли;
	
	Возврат ОписаниеРезультата;
	
КонецФункции

// ВерсионированиеОбъектов
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры
// Конец ВерсионированиеОбъектов

#КонецЕсли
