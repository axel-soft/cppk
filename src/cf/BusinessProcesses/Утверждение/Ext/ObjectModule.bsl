#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает пустую структуру данных для заполнения.
//
// Возвращаемое значение:
//  Структура
//   * Важность - ПеречислениеСсылка.ВариантыВажностиОбъектов
//   * Наименование - Строка
//   * Исполнитель - СправочникСсылка.Сотрудники, СправочникСсылка.ПолныеРоли, СправочникСсылка.Пользователи
//   * ИдентификаторИсполнителя - УникальныйИдентификатор
//   * СрокИсполнения - Дата
//   * СрокИсполненияДни - Число
//   * СрокИсполненияЧасы - Число
//   * СрокИсполненияМинуты - Число
//   * Автор - СправочникСсылка.Сотрудники, СправочникСсылка.Пользователи
//   * ОбрабатывающийРезультат - СправочникСсылка.Сотрудники, СправочникСсылка.ПолныеРоли
//   * СрокОбработкиРезультатов - Дата
//   * СрокОбработкиРезультатовДни - Число
//   * СрокОбработкиРезультатовЧасы - Число
//   * СрокОбработкиРезультатовМинуты - Число
//   * КоличествоИтераций - Число
//   * ТрудозатратыПланИсполнителя - Число
//   * ТрудозатратыПланОбрабатывающегоРезультат - Число
//   * ВедущаяЗадача - ЗадачаСсылка.ЗадачаИсполнителя
//
Функция СтруктураДанныхДляЗаполнения() Экспорт
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Важность", Перечисления.ВариантыВажностиОбъектов.ПустаяСсылка());
	СтруктураДанных.Вставить("Наименование", "");
	
	СтруктураДанных.Вставить("Описание", "");
	
	СтруктураДанных.Вставить("Исполнитель", Справочники.Сотрудники.ПустаяСсылка());
	СтруктураДанных.Вставить("ИдентификаторИсполнителя", УникальныйИдентификаторПустой());
	
	СтруктураДанных.Вставить("ВариантУстановкиСрокаИсполнения",
		Перечисления.ВариантыУстановкиСрокаИсполнения.ПустаяСсылка());
	СтруктураДанных.Вставить("СрокИсполнения", Дата(1,1,1));
	СтруктураДанных.Вставить("СрокИсполненияДни", 0);
	СтруктураДанных.Вставить("СрокИсполненияЧасы", 0);
	СтруктураДанных.Вставить("СрокИсполненияМинуты", 0);
	
	СтруктураДанных.Вставить("Автор", Справочники.Сотрудники.ПустаяСсылка());
	
	СтруктураДанных.Вставить("ОбрабатывающийРезультат", Справочники.Сотрудники.ПустаяСсылка());
	СтруктураДанных.Вставить("ИдентификаторОбрабатывающегоРезультат", УникальныйИдентификаторПустой());
	
	СтруктураДанных.Вставить("ВариантУстановкиСрокаОбработкиРезультатов",
		Перечисления.ВариантыУстановкиСрокаИсполнения.ПустаяСсылка());
	СтруктураДанных.Вставить("СрокОбработкиРезультатов", Дата(1,1,1));
	СтруктураДанных.Вставить("СрокОбработкиРезультатовДни", 0);
	СтруктураДанных.Вставить("СрокОбработкиРезультатовЧасы", 0);
	СтруктураДанных.Вставить("СрокОбработкиРезультатовМинуты", 0);
	
	СтруктураДанных.Вставить("КоличествоИтераций", 0);
	
	СтруктураДанных.Вставить("ТрудозатратыПланИсполнителя", 0);
	СтруктураДанных.Вставить("ТрудозатратыПланОбрабатывающегорезультат", 0);
	
	СтруктураДанных.Вставить("Предметы", Неопределено);
	
	СтруктураДанных.Вставить("ВедущаяЗадача", Задачи.ЗадачаИсполнителя);
	
	Возврат СтруктураДанных;
	
КонецФункции

// Возвращает признак наличия метода ИзменитьРеквизитыНевыполненныхЗадач
//
Функция ЕстьМетодИзменитьРеквизитыНевыполненныхЗадач() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Обновляет значения реквизитов невыполненных задач 
// при изменении реквизитов бизнес-процесса.
//
Процедура ИзменитьРеквизитыНевыполненныхЗадач(СтарыеУчастникиПроцесса, ПараметрыЗаписи) Экспорт 

	УстановитьПривилегированныйРежим(Истина);
	
	СтарыйИсполнитель = СтарыеУчастникиПроцесса.Исполнитель;
	
	АвторИзменения = Неопределено;
	Если Не ПараметрыЗаписи.Свойство("АвторИзменения", АвторИзменения) Тогда
		АвторИзменения = ПользователиДокументооборот.ОлицетворяемыйПользователь();
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		ПараметрыСеанса.ОтключитьОбновлениеЗадач = Истина;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Задачи.Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК Задачи
		|ГДЕ
		|	Задачи.БизнесПроцесс = &БизнесПроцесс
		|	И Задачи.ПометкаУдаления = ЛОЖЬ
		|	И Задачи.Выполнена = ЛОЖЬ";
		
		Запрос.УстановитьПараметр("БизнесПроцесс", Ссылка);
		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ЗадачаОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			ЗадачаОбъект.ДополнительныеСвойства.Вставить("АвторИзменения", АвторИзменения);
			ЗаблокироватьДанныеДляРедактирования(ЗадачаОбъект.Ссылка);
			
			Если ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Утверждение.ТочкиМаршрута.Ознакомиться Тогда 
				
				Если ЗадачаОбъект.Исполнитель <> ОбрабатывающийРезультат Тогда
					
					Если ТипЗнч(ОбрабатывающийРезультат) = Тип("СправочникСсылка.Сотрудники") Тогда
						ЗадачаОбъект.Исполнитель = ОбрабатывающийРезультат;
						ЗадачаОбъект.РольИсполнителя = Неопределено;
					Иначе	
						ЗадачаОбъект.Исполнитель = Неопределено;
						ЗадачаОбъект.РольИсполнителя = ОбрабатывающийРезультат;
					КонецЕсли;
					
				КонецЕсли;
				ЗаполнитьНаименованиеИОписаниеЗадачиОзнакомиться(ЗадачаОбъект);
					
				СрокиИсполненияПроцессов.ЗаполнитьСрокИсполненияЗадачи(
					ЗадачаОбъект,
					ВариантУстановкиСрокаОбработкиРезультатов,
					СрокОбработкиРезультатов,
					СрокОбработкиРезультатовДни,
					СрокОбработкиРезультатовЧасы,
					СрокОбработкиРезультатовМинуты);
				
			Иначе
				РаботаСПроцессамиПоДействиям.ЗаполнитьНаименованиеИОписаниеЗадачи(
					ЗадачаОбъект, Наименование, Описание);
				
				// исполнитель
				Если СтарыйИсполнитель <> Исполнитель Тогда
					
					Если ЗадачаОбъект.ПринятаКИсполнению Тогда
						ЗадачаОбъект.ПринятаКИсполнению = Ложь;
						ЗадачаОбъект.ДатаПринятияКИсполнению = '00010101';
					КонецЕсли;
					
					Если ТипЗнч(Исполнитель) = Тип("СправочникСсылка.Сотрудники")
						Или ТипЗнч(Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда 
						ЗадачаОбъект.Исполнитель = Исполнитель;
						ЗадачаОбъект.РольИсполнителя = Неопределено;
					Иначе
						ЗадачаОбъект.Исполнитель = Неопределено;
						ЗадачаОбъект.РольИсполнителя = Исполнитель;
					КонецЕсли;
				КонецЕсли;
				
				СрокиИсполненияПроцессов.ЗаполнитьСрокИсполненияЗадачи(
					ЗадачаОбъект,
					ВариантУстановкиСрокаИсполнения,
					СрокИсполнения,
					СрокИсполненияДни,
					СрокИсполненияЧасы,
					СрокИсполненияМинуты);
				
			КонецЕсли;
			
			ЗадачаОбъект.Важность = Важность;
			ЗадачаОбъект.Автор 	  = Автор;
			
			ЗадачаОбъект.Проект = Проект;
			ЗадачаОбъект.ПроектнаяЗадача = ПроектнаяЗадача;
			
			ПереносСроковВыполненияЗадач.ПередатьПричинуИЗаявкуНаПереносаСрока(ЗадачаОбъект, ДополнительныеСвойства);
			ЗадачаОбъект.Записать();
		КонецЦикла;
		
		Если Не (ДополнительныеСвойства.Свойство("ОтключитьОбновлениеЗадач")
			И ДополнительныеСвойства.ОтключитьОбновлениеЗадач) Тогда
			ИнтеграцияЗадач.ОбновитьЗадачуПоИсточнику(Ссылка);
		КонецЕсли;
		ПараметрыСеанса.ОтключитьОбновлениеЗадач = Ложь;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ПараметрыСеанса.ОтключитьОбновлениеЗадач = Ложь;
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Заполняет бизнес-процесс на основании шаблона бизнес-процесса.
//
// Параметры
//  ШаблонБизнесПроцесса  - шаблон бизнес-процесса
//
Процедура ЗаполнитьПоШаблону(ШаблонБизнесПроцесса) Экспорт
	
	Если ШаблонБизнесПроцесса = Справочники.ШаблоныУтверждения.ПоУмолчанию Тогда
		// Не заполняем шаблон в процессе, если это шаблон по умолчанию.
		// Считаем, что процесс создан с нуля.
	ИначеЕсли ШаблонБизнесПроцесса.ШаблонВКомплексномПроцессе 
		И ЗначениеЗаполнено(ШаблонБизнесПроцесса.ИсходныйШаблон) Тогда
		Шаблон = ШаблонБизнесПроцесса.ИсходныйШаблон;
	ИначеЕсли НЕ ШаблонБизнесПроцесса.ШаблонВКомплексномПроцессе Тогда
		Шаблон = ШаблонБизнесПроцесса;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.НаименованиеБизнесПроцесса) Тогда 
		Наименование = ШаблонБизнесПроцесса.НаименованиеБизнесПроцесса;
		НаименованиеСПредметами = МультипредметностьКлиентСервер.ПолучитьНаименованиеСПредметами(СокрЛП(Наименование), Предметы);
		Если ЗначениеЗаполнено(НаименованиеСПредметами) И ШаблонБизнесПроцесса.ДобавлятьНаименованиеПредмета Тогда
			Наименование = НаименованиеСПредметами;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.Описание) Тогда 
		Описание = ШаблонБизнесПроцесса.Описание;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.Важность) Тогда 
		Важность = ШаблонБизнесПроцесса.Важность;
	КонецЕсли;
	
	// заполнение исполнителей
	Если ТипЗнч(ШаблонБизнесПроцесса.Исполнитель) = Тип("СправочникСсылка.АвтоподстановкиДляПроцессов")
		И ЗначениеЗаполнено(ШаблонБизнесПроцесса.Исполнитель) Тогда 
		
		АвтоподстановкаИсполнитель = ШаблоныБизнесПроцессов.ПолучитьЗначениеАвтоподстановки(
			ШаблонБизнесПроцесса.Исполнитель, ЭтотОбъект);
		
		Если ТипЗнч(АвтоподстановкаИсполнитель) = Тип("СправочникСсылка.Сотрудники")
			Или ТипЗнч(АвтоподстановкаИсполнитель) = Тип("СправочникСсылка.Пользователи")
			Или ТипЗнч(АвтоподстановкаИсполнитель) = Тип("СправочникСсылка.ПолныеРоли") Тогда 
			
			Исполнитель = АвтоподстановкаИсполнитель;
			
		ИначеЕсли ТипЗнч(АвтоподстановкаИсполнитель) = Тип("Структура") Тогда 
			
			Исполнитель = АвтоподстановкаИсполнитель.РольИсполнителя;
			
		ИначеЕсли ТипЗнч(АвтоподстановкаИсполнитель) = Тип("Массив") Тогда 	
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Автоподстановка ""%1"" не может применяться для поля ""%2"", так как возвращает массив исполнителей'"),
				ШаблонБизнесПроцесса.Исполнитель,
				НСтр("ru = 'Исполнитель'"));
			ВызватьИсключение ТекстСообщения;
			
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(ШаблонБизнесПроцесса.Исполнитель) Тогда 
		Исполнитель = ШаблонБизнесПроцесса.Исполнитель;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.ОбрабатывающийРезультат) Тогда 
		
		Если ТипЗнч(ШаблонБизнесПроцесса.ОбрабатывающийРезультат) =
				Тип("СправочникСсылка.АвтоподстановкиДляПроцессов") Тогда
			
			АвтоподстановкаОбрабатывающийРезультат = ШаблоныБизнесПроцессов.ПолучитьЗначениеАвтоподстановки(
				ШаблонБизнесПроцесса.ОбрабатывающийРезультат, ЭтотОбъект);
			
			Если ТипЗнч(АвтоподстановкаОбрабатывающийРезультат) = Тип("СправочникСсылка.Сотрудники")
				Или ТипЗнч(АвтоподстановкаОбрабатывающийРезультат) = Тип("СправочникСсылка.Пользователи")
				Или ТипЗнч(АвтоподстановкаОбрабатывающийРезультат) = Тип("СправочникСсылка.ПолныеРоли") Тогда
				
				ОбрабатывающийРезультат = АвтоподстановкаОбрабатывающийРезультат;
				
			ИначеЕсли ТипЗнч(АвтоподстановкаОбрабатывающийРезультат) = Тип("Структура") Тогда
				
				ОбрабатывающийРезультат = АвтоподстановкаОбрабатывающийРезультат.РольИсполнителя;
				
			ИначеЕсли ТипЗнч(АвтоподстановкаОбрабатывающийРезультат) = Тип("Массив") Тогда 	
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Автоподстановка ""%1"" не может применяться для поля ""%2"", так как возвращает массив пользователей'"),
					ШаблонБизнесПроцесса.ОбрабатывающийРезультат,
					НСтр("ru = 'Обрабатывающий результат'"));
				ВызватьИсключение ТекстСообщения;	
			КонецЕсли;
			
		Иначе
			ОбрабатывающийРезультат = ШаблонБизнесПроцесса.ОбрабатывающийРезультат;
		КонецЕсли;
		
	КонецЕсли;
	
	// Срок исполнения
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.ВариантУстановкиСрокаИсполнения) Тогда
		ВариантУстановкиСрокаИсполнения = ШаблонБизнесПроцесса.ВариантУстановкиСрокаИсполнения;
	КонецЕсли;
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.СрокИсполнения) Тогда
		СрокИсполнения = ШаблонБизнесПроцесса.СрокИсполнения;
	КонецЕсли;
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.СрокИсполненияДни) Тогда
		СрокИсполненияДни = ШаблонБизнесПроцесса.СрокИсполненияДни;
	КонецЕсли;
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.СрокИсполненияЧасы) Тогда
		СрокИсполненияЧасы = ШаблонБизнесПроцесса.СрокИсполненияЧасы;
	КонецЕсли;
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.СрокИсполненияМинуты) Тогда
		СрокИсполненияМинуты = ШаблонБизнесПроцесса.СрокИсполненияМинуты;
	КонецЕсли;
	
	// Срок обработки результатов
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.ВариантУстановкиСрокаОбработкиРезультатов) Тогда
		ВариантУстановкиСрокаОбработкиРезультатов = ШаблонБизнесПроцесса.ВариантУстановкиСрокаОбработкиРезультатов;
	КонецЕсли;
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.СрокОбработкиРезультатов) Тогда
		СрокОбработкиРезультатов = ШаблонБизнесПроцесса.СрокОбработкиРезультатов;
	КонецЕсли;
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.СрокОбработкиРезультатовДни) Тогда
		СрокОбработкиРезультатовДни = ШаблонБизнесПроцесса.СрокОбработкиРезультатовДни;
	КонецЕсли;
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.СрокОбработкиРезультатовЧасы) Тогда
		СрокОбработкиРезультатовЧасы = ШаблонБизнесПроцесса.СрокОбработкиРезультатовЧасы;
	КонецЕсли;
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.СрокОбработкиРезультатовМинуты) Тогда
		СрокОбработкиРезультатовМинуты = ШаблонБизнесПроцесса.СрокОбработкиРезультатовМинуты;
	КонецЕсли;
	
	// Срок исполнения процесса
	СрокИсполненияПроцесса = ШаблонБизнесПроцесса.СрокИсполненияПроцесса;
	
	// Количество итераций
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.КоличествоИтераций) Тогда
		КоличествоИтераций = ШаблонБизнесПроцесса.КоличествоИтераций;
	КонецЕсли;
	
	// Электронная подпись
	Если ЭлектроннаяПодпись.ИспользоватьЭлектронныеПодписи() Тогда
		ПодписыватьЭП = ШаблонБизнесПроцесса.ПодписыватьЭП;
		
		ТипыПредметов = Новый Массив;
		ТипыПредметов.Добавить(Тип("СправочникСсылка.ДокументыПредприятия"));
		ТипыПредметов.Добавить(Тип("СправочникСсылка.Файлы"));
		ПредметыПодписыватьЭП = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЭтотОбъект, ТипыПредметов, Истина);
		
		Если ПредметыПодписыватьЭП.Количество() = 0 Тогда
			ПодписыватьЭП = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	// трудозатраты
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда 
		ТрудозатратыПланИсполнителя = ШаблонБизнесПроцесса.ТрудозатратыПланИсполнителя;
		ТрудозатратыПланОбрабатывающегоРезультат = ШаблонБизнесПроцесса.ТрудозатратыПланОбрабатывающегоРезультат;
	КонецЕсли;
	
	РаботаСБизнесПроцессамиВызовСервера.СкопироватьЗначенияДопРеквизитов(ШаблонБизнесПроцесса, ЭтотОбъект);
	
	ДополнительныеСвойства.Вставить("ШаблонДляОтложенногоСтарта", ШаблонБизнесПроцесса);
	
КонецПроцедуры	

// Заполняет бизнес-процесс на основании проектной задачи
//
Процедура ЗаполнитьПоПроектнойЗадаче(ДанныеЗаполнения) Экспорт 
	
	Проект = ДанныеЗаполнения.Владелец;
	ПроектнаяЗадача = ДанныеЗаполнения;
	
	ДобавлятьНаименованиеПредмета = РаботаСБизнесПроцессами.ДобавлятьНаименованиеПредмета(ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(Наименование) Или
		Наименование = НаименованиеПроцессаПоУмолчанию(ДобавлятьНаименованиеПредмета) Тогда
		
		Наименование = ПроектнаяЗадача.Наименование;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Описание) Тогда 
		Описание = ПроектнаяЗадача.Описание;
	КонецЕсли;
	
	Если Предметы.Количество() = 0 Тогда 
		Предмет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПроектнаяЗадача, "Предмет");
		
		Если Предмет <> Неопределено И Предметы.Найти(Предмет,"Предмет") = Неопределено Тогда
			СтрокаПредметов = Предметы.Добавить();
			СтрокаПредметов.РольПредмета = Перечисления.РолиПредметов.Основной;
			СтрокаПредметов.ИмяПредмета =  МультипредметностьВызовСервера.ПолучитьСсылкуНаИмяПредметаПоСсылкеНаПредмет(
				Предмет, Предметы.ВыгрузитьКолонку("ИмяПредмета"));
			СтрокаПредметов.Предмет = Предмет;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеПроектнойЗадачи = РаботаСПроектами.ПолучитьСрокиПроектнойЗадачи(ПроектнаяЗадача);

	КоличествоИтераций = 1;
	
	Если СрокИсполнения = Дата(1,1,1)
		И СрокИсполненияДни = 0
		И СрокИсполненияЧасы = 0
		И СрокИсполненияМинуты = 0 Тогда
		
		СрокИсполнения = ДанныеПроектнойЗадачи.ТекущийПланОкончание;
		ВариантУстановкиСрокаИсполнения = Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
	КонецЕсли;
	
	Если СрокОбработкиРезультатов = Дата(1,1,1)
		И СрокОбработкиРезультатовДни = 0
		И СрокОбработкиРезультатовЧасы = 0
		И СрокОбработкиРезультатовМинуты = 0 Тогда
		
		СрокОбработкиРезультатов = ДанныеПроектнойЗадачи.ТекущийПланОкончание;
		ВариантУстановкиСрокаОбработкиРезультатов = Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Исполнитель) И ПроектнаяЗадача.Исполнители.Количество() > 0 Тогда 
		СтрокаИсполнитель = ПроектнаяЗадача.Исполнители[0];
		
		Если ТипЗнч(СтрокаИсполнитель.Исполнитель) = Тип("СправочникСсылка.Пользователи") 
		 Или ТипЗнч(СтрокаИсполнитель.Исполнитель) = Тип("СправочникСсылка.ПолныеРоли")
		 Или ТипЗнч(СтрокаИсполнитель.Исполнитель) = Тип("СправочникСсылка.Сотрудники") Тогда 
			Исполнитель = СтрокаИсполнитель.Исполнитель;
			ТрудозатратыПланИсполнителя = СтрокаИсполнитель.ТекущийПланТрудозатраты;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры	

// Формирует шаблон по процессу
// Параметры:
//	ВладелецШаблона - ссылка на шаблон комплексного процесса или комплексный процесс, который будет владельцем
//		создаваемого шаблона процесса
// Возвращает:
//	Ссылка на созданный шаблон
Функция СоздатьШаблонПоПроцессу(ВладелецШаблона = Неопределено) Экспорт
	
	ИмяТипа = БизнесПроцессы[ЭтотОбъект.Метаданные().Имя].ТипШаблона();	
	ШаблонОбъект = Справочники[СтрЗаменить(ИмяТипа, "Справочник.", "")].СоздатьЭлемент();
	
	// Перенос базовых реквизитов процесса
	ШаблонОбъект.Наименование = Наименование;
	ШаблонОбъект.НаименованиеБизнесПроцесса = Наименование;
	ШаблонОбъект.Описание = Описание;
	ШаблонОбъект.Важность = Важность;
	ШаблонОбъект.ВладелецШаблона = ВладелецШаблона;
	
	ШаблонОбъект.Предметы.Загрузить(Предметы.Выгрузить());
	Для Каждого СтрокаПредмета Из ШаблонОбъект.Предметы Цикл
		Если ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда
			ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СтрокаПредмета.Предмет.Метаданные().ПолноеИмя()).ПустаяСсылка();
		КонецЕсли;
	КонецЦикла;
	ШаблонОбъект.ПредметыЗадач.Загрузить(ПредметыЗадач.Выгрузить());
	
	// Перенос сроков
	ШаблонОбъект.СрокИсполненияДни = СрокИсполненияДни;
	ШаблонОбъект.СрокИсполненияЧасы = СрокИсполненияЧасы;
	ШаблонОбъект.СрокИсполненияМинуты = СрокИсполненияМинуты;
	ШаблонОбъект.ВариантУстановкиСрокаИсполнения = 
		Перечисления.ВариантыУстановкиСрокаИсполнения.ОтносительныйСрок;
		
	ШаблонОбъект.СрокОбработкиРезультатовДни = СрокОбработкиРезультатовДни;
	ШаблонОбъект.СрокОбработкиРезультатовЧасы = СрокОбработкиРезультатовЧасы;
	ШаблонОбъект.СрокОбработкиРезультатовМинуты = СрокОбработкиРезультатовМинуты;
	ШаблонОбъект.ВариантУстановкиСрокаОбработкиРезультатов = 
		Перечисления.ВариантыУстановкиСрокаИсполнения.ОтносительныйСрок;
	
	// Количество итераций
	ШаблонОбъект.КоличествоИтераций = КоличествоИтераций;
	
	// Перенос исполнителей
	ШаблонОбъект.Исполнитель = Исполнитель;
	
	// Перенос обрабатывающего результат
	ШаблонОбъект.ОбрабатывающийРезультат = ОбрабатывающийРезультат;
	
	ШаблонОбъект.Ответственный = Сотрудники.ОсновнойСотрудник();
	
	ШаблонОбъект.ПодписыватьЭП = ПодписыватьЭП;
	ШаблонОбъект.Записать();
	Возврат ШаблонОбъект.Ссылка;
	
КонецФункции

// Обновляет реквизиты активного процесса по переданной структуре
// Параметры:
//  ДанныеОбновления - Структура, см. СтруктураДанныхДляЗаполнения()
//
Процедура ОбновитьАктивныйПроцесс(ДанныеОбновления) Экспорт 
	
	Если ДанныеОбновления.Важность <> Важность Тогда
		Важность = ДанныеОбновления.Важность;
	КонецЕсли;
	
	Если ДанныеОбновления.Наименование <> Наименование Тогда
		Наименование = ДанныеОбновления.Наименование;
	КонецЕсли;
	
	Если ДанныеОбновления.Исполнитель <> Исполнитель Тогда
		Исполнитель = ДанныеОбновления.Исполнитель;
	КонецЕсли;
	
	Если ДанныеОбновления.ИдентификаторИсполнителя <> ИдентификаторИсполнителя Тогда
		ИдентификаторИсполнителя = ДанныеОбновления.ИдентификаторИсполнителя;
	КонецЕсли;
	
	СрокИзменен = Ложь;
	
	Если ДанныеОбновления.ВариантУстановкиСрокаИсполнения <> ВариантУстановкиСрокаИсполнения Тогда
		ВариантУстановкиСрокаИсполнения = ДанныеОбновления.ВариантУстановкиСрокаИсполнения;
		СрокИзменен = Истина;
	КонецЕсли;
	
	Если ДанныеОбновления.СрокИсполнения <> СрокИсполнения Тогда
		СрокИсполнения = ДанныеОбновления.СрокИсполнения;
		СрокИзменен = Истина;
	КонецЕсли;
	
	Если ДанныеОбновления.СрокИсполненияДни <> СрокИсполненияДни Тогда
		СрокИсполненияДни = ДанныеОбновления.СрокИсполненияДни;
		СрокИзменен = Истина;
	КонецЕсли;
	
	Если ДанныеОбновления.СрокИсполненияЧасы <> СрокИсполненияЧасы Тогда
		СрокИсполненияЧасы = ДанныеОбновления.СрокИсполненияЧасы;
		СрокИзменен = Истина;
	КонецЕсли;
	
	Если ДанныеОбновления.СрокИсполненияМинуты <> СрокИсполненияМинуты Тогда
		СрокИсполненияМинуты = ДанныеОбновления.СрокИсполненияМинуты;
		СрокИзменен = Истина;
	КонецЕсли;
	
	Если ДанныеОбновления.Автор <> Автор Тогда
		Автор = ДанныеОбновления.Автор;
	КонецЕсли;
	
	Если ДанныеОбновления.ОбрабатывающийРезультат <> ОбрабатывающийРезультат Тогда
		ОбрабатывающийРезультат = ДанныеОбновления.ОбрабатывающийРезультат;
	КонецЕсли;
	
	Если ДанныеОбновления.ИдентификаторОбрабатывающегоРезультат <> ИдентификаторОбрабатывающегоРезультат Тогда
		ИдентификаторОбрабатывающегоРезультат = ДанныеОбновления.ИдентификаторОбрабатывающегоРезультат;
	КонецЕсли;
	
	Если ДанныеОбновления.ВариантУстановкиСрокаОбработкиРезультатов <> ВариантУстановкиСрокаОбработкиРезультатов Тогда
		ВариантУстановкиСрокаОбработкиРезультатов = ДанныеОбновления.ВариантУстановкиСрокаОбработкиРезультатов;
		СрокИзменен = Истина;
	КонецЕсли;
	
	Если ДанныеОбновления.СрокОбработкиРезультатов <> СрокОбработкиРезультатов Тогда
		СрокОбработкиРезультатов = ДанныеОбновления.СрокОбработкиРезультатов;
		СрокИзменен = Истина;
	КонецЕсли;
	
	Если ДанныеОбновления.СрокОбработкиРезультатовДни <> СрокОбработкиРезультатовДни Тогда
		СрокОбработкиРезультатовДни = ДанныеОбновления.СрокОбработкиРезультатовДни;
		СрокИзменен = Истина;
	КонецЕсли;
	
	Если ДанныеОбновления.СрокОбработкиРезультатовЧасы <> СрокОбработкиРезультатовЧасы Тогда
		СрокОбработкиРезультатовЧасы = ДанныеОбновления.СрокОбработкиРезультатовЧасы;
		СрокИзменен = Истина;
	КонецЕсли;
	
	Если ДанныеОбновления.СрокОбработкиРезультатовМинуты <> СрокОбработкиРезультатовМинуты Тогда
		СрокОбработкиРезультатовМинуты = ДанныеОбновления.СрокОбработкиРезультатовМинуты;
		СрокИзменен = Истина;
	КонецЕсли;
	
	Если ДанныеОбновления.КоличествоИтераций <> КоличествоИтераций Тогда
		КоличествоИтераций = Макс(ДанныеОбновления.КоличествоИтераций, НомерИтерации);
	ИначеЕсли КоличествоИтераций < НомерИтерации Тогда
		КоличествоИтераций = НомерИтерации;
	КонецЕсли;
	
	Если ДанныеОбновления.ТрудозатратыПланОбрабатывающегоРезультат <> ТрудозатратыПланОбрабатывающегоРезультат Тогда
		ТрудозатратыПланОбрабатывающегоРезультат = ДанныеОбновления.ТрудозатратыПланОбрабатывающегоРезультат;
	КонецЕсли;
	
	Если ДанныеОбновления.ТрудозатратыПланИсполнителя <> ТрудозатратыПланИсполнителя Тогда
		ТрудозатратыПланИсполнителя = ДанныеОбновления.ТрудозатратыПланИсполнителя;
	КонецЕсли;
	
	Если ДанныеОбновления.ВедущаяЗадача <> ВедущаяЗадача Тогда
		ВедущаяЗадача = ДанныеОбновления.ВедущаяЗадача;
	КонецЕсли;
	
	Если СрокИзменен Тогда
		ПараметрыДляРасчетаСроков = СрокиИсполненияПроцессов.ПараметрыДляРасчетаСроков();
		ПараметрыДляРасчетаСроков.ДатаОтсчета = 
			СрокиИсполненияПроцессов.ДатаОтсчетаДляРасчетаСроковПроцесса(ЭтотОбъект,
				ПредопределенноеЗначение("БизнесПроцесс.Утверждение.ТочкаМаршрута.Ознакомиться"));
		ПараметрыДляРасчетаСроков.ТекущаяИтерация = НомерИтерации;
		ПараметрыДляРасчетаСроков.Смещение = СрокиИсполненияПроцессовКорп.СмещенияДатыОтсчета(Ссылка);
		СрокиИсполненияПроцессов.РассчитатьСрокиУтверждения(ЭтотОбъект, ПараметрыДляРасчетаСроков);
	КонецЕсли;
	
	Если Модифицированность() Тогда
		СтарыеУчастникиПроцесса = БизнесПроцессыИЗадачиВызовСервера.ТекущиеУчастникиПроцесса(Ссылка);
		
		НачатьТранзакцию();
		Попытка
			
			ПараметрыСеанса.ОтключитьОбновлениеЗадач = Истина;
			
			Записать();
			ИзменитьРеквизитыНевыполненныхЗадач(СтарыеУчастникиПроцесса, Новый Структура);
			
			ИнтеграцияЗадач.ОбновитьЗадачуПоИсточнику(Ссылка);
			ПараметрыСеанса.ОтключитьОбновлениеЗадач = Ложь;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ПараметрыСеанса.ОтключитьОбновлениеЗадач = Ложь;
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс_Предметы

// Проверяет права участников процесса на предметы этого процесса.
// Если у участников процесса отсутствуют права на предметы, то выводятся сообщения с привязкой
// к карточке процесса.
//
// Параметры
//  ПроцессОбъект - БизнесПроцессОбъект - процесс.
//  Отказ - Булево - в этот параметр помещается значение Истина, если кто-то из участников не имеет
//                   прав на предметы.
//  ПроверятьПриИзменении - Булево - если указано значение Истина, то проверка выполняется только если
//                          изменены участники или предметы процесса, иначе проверка выполняется всегда.
//
Процедура ПроверитьПраваУчастниковПроцессаНаПредметы(
	ПроцессОбъект, Отказ, ПроверятьПриИзменении) Экспорт
	
	Мультипредметность.ПроверитьПраваУчастниковПроцессаНаПредметы(
		ПроцессОбъект, Отказ, ПроверятьПриИзменении);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если ЭтоНовый() Тогда 
		Дата = ТекущаяДатаСеанса();
		Если Не ЗначениеЗаполнено(Автор) Тогда
			Автор = Сотрудники.ОсновнойСотрудник();
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ОбрабатывающийРезультат) Тогда
			ОбрабатывающийРезультат = Сотрудники.ОсновнойСотрудник();
		КонецЕсли;
		Важность = Перечисления.ВариантыВажностиОбъектов.Обычная;
		НомерИтерации = 0;
		
		Если Не ЗначениеЗаполнено(Проект) Тогда 
			Проект = РаботаСПроектами.ПолучитьПроектПоУмолчанию();
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеЗаполнения <> Неопределено И ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Тогда
		Мультипредметность.ПередатьПредметыПроцессу(ЭтотОбъект, ДанныеЗаполнения, Ложь, Истина);
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		ЗадачаСсылка = ДанныеЗаполнения;
		ЗаполнитьБизнесПроцессПоЗадаче(ЗадачаСсылка);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("ВедущаяЗадача") Тогда
			ВедущаяЗадача = ДанныеЗаполнения.ВедущаяЗадача;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Важность") Тогда
			Важность = ДанныеЗаполнения.Важность;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Наименование") Тогда
			Наименование = ДанныеЗаполнения.Наименование;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Описание") Тогда
			Описание = ДанныеЗаполнения.Описание;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Исполнитель") Тогда
			Исполнитель = ДанныеЗаполнения.Исполнитель;
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("ИдентификаторИсполнителя") Тогда
			ИдентификаторИсполнителя = ДанныеЗаполнения.ИдентификаторИсполнителя;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ВариантУстановкиСрокаИсполнения") Тогда
			ВариантУстановкиСрокаИсполнения = ДанныеЗаполнения.ВариантУстановкиСрокаИсполнения;
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("СрокИсполнения") Тогда
			СрокИсполнения = ДанныеЗаполнения.СрокИсполнения;
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("СрокИсполненияДни") Тогда
			СрокИсполненияДни = ДанныеЗаполнения.СрокИсполненияДни;
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("СрокИсполненияЧасы") Тогда
			СрокИсполненияЧасы = ДанныеЗаполнения.СрокИсполненияЧасы;
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("СрокИсполненияЧасы") Тогда
			СрокИсполненияЧасы = ДанныеЗаполнения.СрокИсполненияЧасы;
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("СрокИсполненияМинуты") Тогда
			СрокИсполненияМинуты = ДанныеЗаполнения.СрокИсполненияМинуты;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Автор") Тогда
			Автор = ДанныеЗаполнения.Автор;
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("ИдентификаторОбрабатывающегоРезультат") Тогда
			ИдентификаторОбрабатывающегоРезультат = ДанныеЗаполнения.ИдентификаторОбрабатывающегоРезультат;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ВариантУстановкиСрокаОбработкиРезультатов") Тогда
			ВариантУстановкиСрокаОбработкиРезультатов = ДанныеЗаполнения.ВариантУстановкиСрокаОбработкиРезультатов;
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("СрокОбработкиРезультатов") Тогда
			СрокОбработкиРезультатов = ДанныеЗаполнения.СрокОбработкиРезультатов;
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("СрокОбработкиРезультатовДни") Тогда
			СрокОбработкиРезультатовДни = ДанныеЗаполнения.СрокОбработкиРезультатовДни;
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("СрокОбработкиРезультатовЧасы") Тогда
			СрокОбработкиРезультатовЧасы = ДанныеЗаполнения.СрокОбработкиРезультатовЧасы;
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("СрокОбработкиРезультатовМинуты") Тогда
			СрокОбработкиРезультатовМинуты = ДанныеЗаполнения.СрокОбработкиРезультатовМинуты;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("КоличествоИтераций") Тогда
			КоличествоИтераций = ДанныеЗаполнения.КоличествоИтераций;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ТрудозатратыПланИсполнителя") Тогда
			ТрудозатратыПланИсполнителя = ДанныеЗаполнения.ТрудозатратыПланИсполнителя;
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("ТрудозатратыПланОбрабатывающегоРезультат") Тогда
			ТрудозатратыПланОбрабатывающегоРезультат = ДанныеЗаполнения.ТрудозатратыПланОбрабатывающегоРезультат;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Шаблон") Тогда
			Мультипредметность.ЗаполнитьПредметыПроцессаПоШаблону(ДанныеЗаполнения.Шаблон, ЭтотОбъект);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Предметы") Тогда
			Мультипредметность.ПередатьПредметыПроцессу(ЭтотОбъект, ДанныеЗаполнения.Предметы, Ложь, Истина);
			Проект = МультипредметностьПереопределяемый.ПолучитьОсновнойПроектПоПредметам(ДанныеЗаполнения.Предметы);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("АвторСобытия") Тогда
			Автор = ДанныеЗаполнения.АвторСобытия;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Шаблон") Тогда
			ЗаполнитьПоШаблону(ДанныеЗаполнения.Шаблон);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ЗадачаИсполнителя") Тогда
			ЗадачаСсылка = ДанныеЗаполнения.ЗадачаИсполнителя;
			ЗаполнитьБизнесПроцессПоЗадаче(ЗадачаСсылка);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ПроектнаяЗадача") Тогда
			ЗаполнитьПоПроектнойЗадаче(ДанныеЗаполнения.ПроектнаяЗадача);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Проект") Тогда
			Проект = ДанныеЗаполнения.Проект;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Исполнители") Тогда
			Исполнитель = ДанныеЗаполнения.Исполнители[0];
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ОбрабатывающийРезультат") Тогда
			ОбрабатывающийРезультат = ДанныеЗаполнения.ОбрабатывающийРезультат;
		КонецЕсли;
		
		ТипыПисем = МультипредметностьПереопределяемый.ПолучитьТипыПисем();
		ОсновныеПисьма = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЭтотОбъект, ТипыПисем, Истина);
		Для Каждого Письмо Из ОсновныеПисьма Цикл
			Тема = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Письмо, "Тема");
			Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Письмо, "Проект");
			Если Не ЗначениеЗаполнено(Наименование) Тогда
				Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Утвердить ""%1""'"),
					Тема);
			КонецЕсли;
			Прервать;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.ПроектныеЗадачи") Тогда 
		
		ЗаполнитьПоПроектнойЗадаче(ДанныеЗаполнения);
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Наименование) И Предметы.Количество() > 0 Тогда
		МультипредметностьКлиентСервер.ЗаполнитьНаименованиеПроцесса(ЭтотОбъект, НСтр("ru = 'Утвердить'"));
	КонецЕсли;
	
	БизнесПроцессыИЗадачиСервер.ЗаполнитьГлавнуюЗадачу(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ ЗначениеЗаполнено(Исполнитель) Тогда
		ОбщегоНазначения.СообщитьПользователю(
			Нстр("ru = 'Поле ""Кому"" не заполнено'"), ЭтотОбъект,,"Исполнитель", Отказ);
	КонецЕсли;
	
	Мультипредметность.ПроверитьКорректностьТиповОсновныхПредметов(ЭтотОбъект, Отказ);
	
	Для Каждого СтрокаПредмета Из Предметы Цикл
		Если СтрокаПредмета.РольПредмета = Перечисления.РолиПредметов.Основной Тогда
			Если ПодписыватьЭП
				И Не РаботаСЭП.ОбъектМожетБытьПодписанЭП(СтрокаПредмета.Предмет) Тогда
				Отказ = Истина;
				ОбщегоНазначения.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Процесс требует подписания предмета ""%1"" с помощью ЭП, но выбранный предмет не может быть подписан.'"),
						Строка(СтрокаПредмета.Предмет)),
					ЭтотОбъект,
					"Объект.Предметы[" + Формат(СтрокаПредмета.НомерСтроки - 1 ,"ЧН=0; ЧГ=0") +"].Описание",, 
					Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	РаботаСПроцессамиПоОбработкамОбъектов.ПроверкаЗапретаНаЗапускПоПредметуИзДругойСистемы(ЭтотОбъект, Отказ);
	
	// Проверка прав участников процесса на предметы
	Если Не РаботаСБизнесПроцессами.ЭтоФоновоеВыполнениеПроцесса() Тогда
		
		ПроверитьПраваУчастниковПроцессаНаПредметы(ЭтотОбъект, Отказ, Стартован);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбычнаяЗапись = Истина;
	ТолькоОбработкаВыполненияЗадачи = Ложь;
	ТолькоОбновлениеРабочейГруппыПроцессов = Ложь;
	Если ДополнительныеСвойства.Свойство("ВидЗаписи") Тогда
		
		ОбычнаяЗапись = Ложь;
		
		ТолькоОбработкаВыполненияЗадачи = (ДополнительныеСвойства.ВидЗаписи =
			"ЗаписьСОбработкойВыполненияЗадачи");
			
		ТолькоОбновлениеРабочейГруппыПроцессов = 
			(ДополнительныеСвойства.ВидЗаписи =
			"ЗаписьСОбновлением_Предметов_ПредметовЗадач_Проекта_ОбщегоСпискаПроцессов_РабочихГруппПредметов_РабочихГруппПроцессов_ДопРеквизитовПоПредметам");
		
		Если Не ТолькоОбработкаВыполненияЗадачи
			И Не ТолькоОбновлениеРабочейГруппыПроцессов Тогда
			
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбычнаяЗапись Или ТолькоОбработкаВыполненияЗадачи Тогда
		// Обработка выполнения задачи
		Если ДополнительныеСвойства.Свойство("ТекущаяЗадача") Тогда
			Если ДополнительныеСвойства.ТекущаяЗадача.ТочкаМаршрута = БизнесПроцессы.Утверждение.ТочкиМаршрута.Утвердить Тогда
				НайденнаяСтрока = РезультатыУтверждения.Найти(ДополнительныеСвойства.ТекущаяЗадача, "ЗадачаИсполнителя");
				НайденнаяСтрока.РезультатУтверждения = ДополнительныеСвойства.РезультатУтверждения;
			ИначеЕсли ДополнительныеСвойства.ТекущаяЗадача.ТочкаМаршрута = БизнесПроцессы.Утверждение.ТочкиМаршрута.Ознакомиться Тогда
				ПовторитьУтверждение = ДополнительныеСвойства.ПовторитьУтверждение;
				Если ДополнительныеСвойства.Свойство("Исполнитель") Тогда
					Исполнитель = ДополнительныеСвойства.Исполнитель;
				КонецЕсли;
				
				Если ДополнительныеСвойства.Свойство("СрокИсполненияПроцесса") Тогда
					СрокИсполненияПроцесса = ДополнительныеСвойства.СрокИсполненияПроцесса;
				КонецЕсли;
				
				Если ДополнительныеСвойства.Свойство("СрокИсполнения") Тогда
					СрокИсполнения = ДополнительныеСвойства.СрокИсполнения;
				КонецЕсли;
				Если ДополнительныеСвойства.Свойство("СрокИсполненияДни") Тогда
					СрокИсполненияДни = ДополнительныеСвойства.СрокИсполненияДни;
				КонецЕсли;
				Если ДополнительныеСвойства.Свойство("СрокИсполненияЧасы") Тогда
					СрокИсполненияЧасы = ДополнительныеСвойства.СрокИсполненияЧасы;
				КонецЕсли;
				Если ДополнительныеСвойства.Свойство("СрокИсполненияМинуты") Тогда
					СрокИсполненияМинуты = ДополнительныеСвойства.СрокИсполненияМинуты;
				КонецЕсли;
				Если ДополнительныеСвойства.Свойство("ВариантУстановкиСрокаИсполнения") Тогда
					ВариантУстановкиСрокаИсполнения = ДополнительныеСвойства.ВариантУстановкиСрокаИсполнения;
				КонецЕсли;
				
				Если ДополнительныеСвойства.Свойство("СрокОбработкиРезультатов") Тогда
					СрокОбработкиРезультатов = ДополнительныеСвойства.СрокОбработкиРезультатов;
				КонецЕсли;
				Если ДополнительныеСвойства.Свойство("СрокОбработкиРезультатовДни") Тогда
					СрокОбработкиРезультатовДни = ДополнительныеСвойства.СрокОбработкиРезультатовДни;
				КонецЕсли;
				Если ДополнительныеСвойства.Свойство("СрокОбработкиРезультатовЧасы") Тогда
					СрокОбработкиРезультатовЧасы = ДополнительныеСвойства.СрокОбработкиРезультатовЧасы;
				КонецЕсли;
				Если ДополнительныеСвойства.Свойство("СрокОбработкиРезультатовМинуты") Тогда
					СрокОбработкиРезультатовМинуты = ДополнительныеСвойства.СрокОбработкиРезультатовМинуты;
				КонецЕсли;
				Если ДополнительныеСвойства.Свойство("ВариантУстановкиСрокаОбработкиРезультатов") Тогда
					ВариантУстановкиСрокаОбработкиРезультатов = ДополнительныеСвойства.ВариантУстановкиСрокаОбработкиРезультатов;
				КонецЕсли;
				
				Если ДополнительныеСвойства.Свойство("КоличествоИтераций") Тогда
					КоличествоИтераций = ДополнительныеСвойства.КоличествоИтераций;
				КонецЕсли;
				
				НайденнаяСтрока = РезультатыОзнакомлений.Найти(ДополнительныеСвойства.ТекущаяЗадача, "ЗадачаИсполнителя");
				НайденнаяСтрока.ОтправленоНаПовторноеУтверждение = ДополнительныеСвойства.ПовторитьУтверждение;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбычнаяЗапись
		И Не МиграцияДанныхИзВнешнихСистемСервер.ЭтоОбъектИзДругойСистемы(ИсточникДанных) Тогда
	
		Если Не РаботаСБизнесПроцессамиВызовСервера.ПроверитьПередЗаписью(ЭтотОбъект) Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;	
		
		ПредыдущаяПометкаУдаления = Ложь;
		Если Не Ссылка.Пустая() Тогда
			ПредыдущаяПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ПометкаУдаления");
		КонецЕсли;
		ДополнительныеСвойства.Вставить("ПредыдущаяПометкаУдаления", ПредыдущаяПометкаУдаления);
		
		Если Не Ссылка.Пустая() Тогда
			ПредыдущееСостояние = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Состояние");
			ДополнительныеСвойства.Вставить("ПредыдущееСостояние", ПредыдущееСостояние);
		КонецЕсли;
		
		Если ПометкаУдаления <> ПредыдущаяПометкаУдаления Тогда
			РаботаСФайламиВызовСервера.ПометитьНаУдалениеПриложенныеФайлы(Ссылка, ПометкаУдаления);
		КонецЕсли;
		
	КонецЕсли;
		
	Если ОбычнаяЗапись Или ТолькоОбновлениеРабочейГруппыПроцессов Тогда
		// Обработка рабочей группы	
		РаботаСБизнесПроцессамиВызовСервера.СформироватьРабочуюГруппу(ЭтотОбъект);
	КонецЕсли;
	
	Если ОбычнаяЗапись Тогда
		ЗаполнитьПустыеИдентификаторыУчастников();
		ПроверитьУникальностьИдентификаторовУчастников();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияЗадач.ПриЗаписиИсточникаЗадачи(ЭтотОбъект);
	
	Если ДополнительныеСвойства.Свойство("ВидЗаписи") Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаОчередиЗаданийСервер.ПриЗаписиПроцесса(ЭтотОбъект);
	
	ПредыдущаяПометкаУдаления = Ложь;
	Если ДополнительныеСвойства.Свойство("ПредыдущаяПометкаУдаления") Тогда
		ПредыдущаяПометкаУдаления = ДополнительныеСвойства.ПредыдущаяПометкаУдаления;
	КонецЕсли;
	
	Если (ПометкаУдаления <> ПредыдущаяПометкаУдаления)
		И Не МиграцияДанныхИзВнешнихСистемСервер.ЭтоОбъектИзДругойСистемы(ИсточникДанных) Тогда
		
		ПротоколированиеРаботыСотрудников.ЗаписатьПометкуУдаления(Ссылка, ПометкаУдаления);
	КонецЕсли;
	
	СтартПроцессовСервер.ПроцессПриЗаписи(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	РаботаСБизнесПроцессами.ПриКопированииБизнесПроцесса(ОбъектКопирования);
	
	Дата = ТекущаяДатаСеанса();
	Автор = Сотрудники.ОсновнойСотрудник();
	НомерИтерации = 0;
	РезультатыУтверждения.Очистить();
	РезультатыОзнакомлений.Очистить();
	ДатаНачала = '00010101';
	ДатаЗавершения = '00010101';
	РезультатУтверждения = Неопределено;
	
КонецПроцедуры

/////////////////////////////
// Карта маршрута

Процедура СтартПередСтартом(ТочкаМаршрутаБизнесПроцесса, Отказ)
	
	ДатаНачала = ТекущаяДатаСеанса();
	
	РаботаСПроектами.ОтметитьНачалоВыполненияПроектнойЗадачи(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПодготовкаОбработка(ТочкаМаршрутаБизнесПроцесса)
	
	УстановитьПривилегированныйРежим(Истина);
	
	УправлениеМероприятиями.УстановитьСостояниеМероприятияИзБизнесПроцесса(
		ЭтотОбъект,
		БизнесПроцессы.Утверждение.ТочкиМаршрута.Подготовка);
	
	НомерИтерации = НомерИтерации + 1;
	ПовторитьУтверждение = Ложь;
	
	РаботаСБизнесПроцессами.ЗаписатьПроцесс(ЭтотОбъект, "ЗаписьСОбновлениемОбщегоСпискаПроцессов");
	
КонецПроцедуры

Процедура УтвердитьПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
	Задача.Дата  	= ТекущаяДатаСеанса();
	Задача.Автор 	= Автор;
	Задача.Важность = Важность;
	
	Мультипредметность.ЗадачаПередСозданием(ЭтотОбъект, Задача, ТочкаМаршрутаБизнесПроцесса);
	
	Задача.БизнесПроцесс  = Ссылка;
	Задача.ТочкаМаршрута  = ТочкаМаршрутаБизнесПроцесса;
	РаботаСПроцессамиПоДействиям.ЗаполнитьНаименованиеИОписаниеЗадачи(
		Задача, Наименование, Описание);
					
	Задача.Проект = Проект;
	Задача.ПроектнаяЗадача = ПроектнаяЗадача;
	
	Если ТипЗнч(Исполнитель) = Тип("СправочникСсылка.Сотрудники") 
		Или ТипЗнч(Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
		Задача.Исполнитель = Исполнитель;
	Иначе
		Задача.РольИсполнителя = Исполнитель;
	КонецЕсли;
	Задача.ИдентификаторИсполнителя = ИдентификаторИсполнителя;
	
	СрокиИсполненияПроцессов.ЗаполнитьСрокИсполненияЗадачи(
		Задача,
		ВариантУстановкиСрокаИсполнения,
		СрокИсполнения,
		СрокИсполненияДни,
		СрокИсполненияЧасы,
		СрокИсполненияМинуты);
	
	РаботаСБизнесПроцессамиВызовСервера.СкопироватьЗначенияДопРеквизитов(Задача.БизнесПроцесс, Задача);
	
	ЗадачаСсылка = Задачи.ЗадачаИсполнителя.ПолучитьСсылку();
	Задача.УстановитьСсылкуНового(ЗадачаСсылка);
	
	ФормируемыеЗадачи.Добавить(Задача);
	
	Если НомерИтерации > 1 Тогда 
		НайденнаяСтрока = РезультатыУтверждения.Найти(НомерИтерации-1, "НомерИтерации");
		Контроль.УстановитьНовыйИсточникВСтрокеКонтроля(Ссылка, НайденнаяСтрока.ЗадачаИсполнителя, ЗадачаСсылка);
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	НоваяСтрока = РезультатыУтверждения.Добавить();
	НоваяСтрока.НомерИтерации 	  = НомерИтерации;
	НоваяСтрока.ЗадачаИсполнителя = ЗадачаСсылка;
	
	РаботаСБизнесПроцессами.ЗаписатьПроцесс(ЭтотОбъект, "ПростаяЗапись");
	
КонецПроцедуры

Процедура ОбработкаПроверкиВыполнения(ТочкаМаршрутаБизнесПроцесса, Задача, Результат)
	
	Результат = Истина;
	
КонецПроцедуры

Процедура ОбработкаРезультатаОбработка(ТочкаМаршрутаБизнесПроцесса)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// результат утверждения
	РезультатУтверждения = Перечисления.РезультатыУтверждения.Утверждено;
	Для Каждого Элемент Из РезультатыУтверждения Цикл
		Если Элемент.НомерИтерации = НомерИтерации Тогда
			Если Элемент.РезультатУтверждения = Перечисления.РезультатыУтверждения.НеУтверждено Тогда 
				РезультатУтверждения = Перечисления.РезультатыУтверждения.НеУтверждено;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	РаботаСБизнесПроцессами.ЗаписатьПроцесс(ЭтотОбъект, "ПростаяЗапись");
	
	УправлениеМероприятиями.УстановитьСостояниеМероприятияИзБизнесПроцесса(
		ЭтотОбъект,
		БизнесПроцессы.Утверждение.ТочкиМаршрута.ОбработкаРезультата);
	
КонецПроцедуры

Процедура ОзнакомитьсяПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Если процесс завершился положительно, то задачу ознакомления не формируем.
	Если РезультатУтверждения <> Перечисления.РезультатыУтверждения.НеУтверждено Тогда
		Возврат;
	КонецЕсли;
	
	Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
	ЗаполнитьЗадачуОзнакомиться(Задача);
	
	ЗадачаСсылка = Задачи.ЗадачаИсполнителя.ПолучитьСсылку();
	Задача.УстановитьСсылкуНового(ЗадачаСсылка);
	
	ФормируемыеЗадачи.Добавить(Задача);
	
	УстановитьПривилегированныйРежим(Истина);
	НоваяСтрока = РезультатыОзнакомлений.Добавить();
	НоваяСтрока.НомерИтерации 	  = НомерИтерации;
	НоваяСтрока.ЗадачаИсполнителя = ЗадачаСсылка;
	
	РаботаСБизнесПроцессами.ЗаписатьПроцесс(ЭтотОбъект, "ПростаяЗапись");
	
КонецПроцедуры

Процедура ПовторитьУтверждениеПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = ПовторитьУтверждение;
	
КонецПроцедуры

Процедура ЗавершениеПриЗавершении(ТочкаМаршрутаБизнесПроцесса, Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	ДатаЗавершения = ТекущаяДатаСеанса();
	
	РаботаСПроектами.ОтметитьОкончаниеВыполненияПроектнойЗадачи(ЭтотОбъект);
		
	РаботаСПроцессамиПоДействиямСобытия.ПриЗавершенииПроцесса(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьБизнесПроцессПоЗадаче(ЗадачаСсылка)
	
	РаботаСБизнесПроцессами.ЗаполнитьБизнесПроцессПоЗадаче(ЭтотОбъект, ЗадачаСсылка);
	
КонецПроцедуры

// Заполняет задачу создаваемую в точке маршрута "Ознакомиться".
//
// Параметры:
//   Задача - ЗадачаОбъект.ЗадачаИсполнителя
//
Процедура ЗаполнитьЗадачуОзнакомиться(Задача)
	
	ТочкаМаршрутаБизнесПроцесса = БизнесПроцессы.Утверждение.ТочкиМаршрута.Ознакомиться;
	
	Задача.Дата  	= ТекущаяДатаСеанса();
	Задача.Важность = Важность;
	Если ЗначениеЗаполнено(Состояние) Тогда
		Задача.СостояниеБизнесПроцесса = Состояние;
	КонецЕсли;
	
	Мультипредметность.ЗадачаПередСозданием(ЭтотОбъект, Задача, ТочкаМаршрутаБизнесПроцесса);
	
	Если ТипЗнч(ОбрабатывающийРезультат) = Тип("СправочникСсылка.Сотрудники") Тогда
		Задача.Исполнитель = ОбрабатывающийРезультат;
	Иначе
		Задача.РольИсполнителя = ОбрабатывающийРезультат;
	КонецЕсли;
	Задача.ИдентификаторИсполнителя = ИдентификаторОбрабатывающегоРезультат;
	
	// Если указана дата завершения, то создается после завершения с пустым сроком,
	// т.к. она формируется для уведомления автора процесса о положительном
	// завершении и не влияет на срок исполнения всего процесса.
	Если ЗначениеЗаполнено(ДатаЗавершения) Тогда
		Задача.СрокИсполнения = Дата(1,1,1);
	Иначе
		СрокиИсполненияПроцессов.ЗаполнитьСрокИсполненияЗадачи(
			Задача,
			ВариантУстановкиСрокаОбработкиРезультатов,
			СрокОбработкиРезультатов,
			СрокОбработкиРезультатовДни,
			СрокОбработкиРезультатовЧасы,
			СрокОбработкиРезультатовМинуты);
	КонецЕсли;
	
	Задача.БизнесПроцесс  = Ссылка;
	Задача.ТочкаМаршрута  = ТочкаМаршрутаБизнесПроцесса;
	
	Задача.Проект = Проект;
	Задача.ПроектнаяЗадача = ПроектнаяЗадача;
		
	ЗаполнитьНаименованиеИОписаниеЗадачиОзнакомиться(Задача);
	
	Задача.Автор = Автор;
	
	РаботаСБизнесПроцессамиВызовСервера.СкопироватьЗначенияДопРеквизитов(Задача.БизнесПроцесс, Задача);
	
КонецПроцедуры

Процедура ЗаполнитьНаименованиеИОписаниеЗадачиОзнакомиться(Задача)
	
	ДобавлятьНаименованиеПредмета = РаботаСБизнесПроцессами.ДобавлятьНаименованиеПредмета(ЭтотОбъект);
	ПредметыСтрокой = МультипредметностьКлиентСервер.ПредметыСтрокой(Задача.Предметы, Истина, Ложь);
	НаименованиеИОписаниеПоДействию = РаботаСПроцессамиПоДействиям.НаименованиеИОписаниеЗадачиПоДействию(
		Задача, ПредметыСтрокой);
	
	Если НаименованиеИОписаниеПоДействию <> Неопределено 
		И ЗначениеЗаполнено(НаименованиеИОписаниеПоДействию.Наименование) Тогда
		Задача.Наименование = НаименованиеИОписаниеПоДействию.Наименование;

	ИначеЕсли СтрНачинаетсяС(НаименованиеПроцессаПоУмолчанию(ДобавлятьНаименованиеПредмета), Наименование)
		И ЗначениеЗаполнено(ПредметыСтрокой) Тогда
		
		Задача.Наименование = СтрШаблон(
			НСтр("ru = 'Ознакомиться с результатом утверждения %1'",
				ЛокализацияКонфигурации.КодЯзыкаИсполнителяЗадачи(Задача)),
			Строка(ПредметыСтрокой));
	Иначе
		Задача.Наименование = СтрШаблон(
			НСтр("ru = 'Ознакомиться с результатом утверждения: %1'",
				ЛокализацияКонфигурации.КодЯзыкаИсполнителяЗадачи(Задача)),
			Наименование);
	КонецЕсли;
	
	Если НаименованиеИОписаниеПоДействию <> Неопределено 
		И ЗначениеЗаполнено(НаименованиеИОписаниеПоДействию.Описание) Тогда
		Задача.Описание = НаименованиеИОписаниеПоДействию.Описание;
	Иначе
		
		Задача.Описание = Описание;
		
	КонецЕсли;

КонецПроцедуры

// Заполняет пустые идентификаторы участников в процессе.
//
Процедура ЗаполнитьПустыеИдентификаторыУчастников()
	
	Если ИдентификаторИсполнителя = УникальныйИдентификаторПустой() Тогда
		ИдентификаторИсполнителя = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	Если ИдентификаторОбрабатывающегоРезультат = УникальныйИдентификаторПустой() Тогда
		ИдентификаторОбрабатывающегоРезультат = Новый УникальныйИдентификатор;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет уникальность идентификаторов участников процесса.
// Если есть не уникальные значения, то вызывается исключение. 
//
Процедура ПроверитьУникальностьИдентификаторовУчастников()
	
	Если ИдентификаторИсполнителя = ИдентификаторОбрабатывающегоРезультат Тогда
		ВызватьИсключение НСтр("ru = 'Идентификаторы участников не уникальны.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры

// Заполняет бизнес-процесс на основании шаблона бизнес-процесса, предмета и автора.
//
// Параметры
//  ШаблонБизнесПроцесса  - шаблон бизнес-процесса
//  Предмет - предмет бизнес-процесса
//  Автор  - автор
//
Процедура ЗаполнитьПоШаблонуИПредмету(ШаблонБизнесПроцесса, ПредметСобытия, АвторСобытия) Экспорт
	
	Мультипредметность.ЗаполнитьПредметыПроцессаПоШаблону(ШаблонБизнесПроцесса, ЭтотОбъект);
	Мультипредметность.ПередатьПредметыПроцессу(ЭтотОбъект, ПредметСобытия, Ложь, Истина);
	ЗаполнитьПоШаблону(ШаблонБизнесПроцесса);
	
	Проект = МультипредметностьПереопределяемый.ПолучитьОсновнойПроектПоПредметам(ПредметСобытия);
	
	Дата = ТекущаяДатаСеанса();
	Автор = АвторСобытия;
	
	Если Не ЗначениеЗаполнено(ОбрабатывающийРезультат) Тогда
		ОбрабатывающийРезультат = АвторСобытия;
	КонецЕсли;
	
КонецПроцедуры	

// Возвращает описание задачи, специфичное для бизнес-процесса
Функция ПолучитьОписаниеУведомленияЗадачи(ЗадачаПроцесса, КодЯзыкаПолучателя) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Задача = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ЗадачаПроцесса,
		"Ссылка, БизнесПроцесс, ТочкаМаршрута, Выполнена, Исполнитель");
	
	Если Задача.БизнесПроцесс <> Ссылка Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Неопределено;
	
	Если Задача.ТочкаМаршрута = БизнесПроцессы.Утверждение.ТочкиМаршрута.Утвердить Тогда
		// Результат предыдущего утверждения
		НомерИтерацииЗадачи = Неопределено;
		
		НайденнаяСтрока = РезультатыУтверждения.Найти(Задача.Ссылка, "ЗадачаИсполнителя");
		Если НайденнаяСтрока <> Неопределено Тогда 
			НомерИтерацииЗадачи = НайденнаяСтрока.НомерИтерации - 1;
		КонецЕсли;
		
		СтрокиИтерации = РезультатыУтверждения.НайтиСтроки(Новый Структура("НомерИтерации", НомерИтерацииЗадачи));
		Для Каждого Строка Из СтрокиИтерации Цикл
			
			Если Строка.ЗадачаИсполнителя.Исполнитель = Задача.Исполнитель Тогда
				Результат = НСтр("ru = 'Задача была направлена на повторное утверждение'", КодЯзыкаПолучателя);
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		// Результат утверждения
		НайденнаяСтрока = РезультатыУтверждения.Найти(Задача.Ссылка, "ЗадачаИсполнителя");
		Если НайденнаяСтрока <> Неопределено Тогда 
			
			Если НайденнаяСтрока.РезультатУтверждения = Перечисления.РезультатыУтверждения.Утверждено Тогда
				Результат = НСтр("ru = 'Результат утверждения: Утверждено'", КодЯзыкаПолучателя);
			ИначеЕсли НайденнаяСтрока.РезультатУтверждения = Перечисления.РезультатыУтверждения.НеУтверждено Тогда
				Результат = НСтр("ru = 'Результат утверждения: Не утверждено'", КодЯзыкаПолучателя);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Задача.ТочкаМаршрута = БизнесПроцессы.Утверждение.ТочкиМаршрута.Ознакомиться Тогда
		// Результат утверждения
		НомерИтерацииЗадачи = Неопределено;
		РезультатУтвержденияПоЗадаче = Перечисления.РезультатыУтверждения.Утверждено;
		
		НайденнаяСтрока = РезультатыОзнакомлений.Найти(Задача.Ссылка, "ЗадачаИсполнителя");
		Если НайденнаяСтрока <> Неопределено Тогда 
			НомерИтерацииЗадачи = НайденнаяСтрока.НомерИтерации;
		КонецЕсли;
		
		СтрокиИтерации = РезультатыУтверждения.НайтиСтроки(Новый Структура("НомерИтерации", НомерИтерацииЗадачи));
		Для Каждого Строка Из СтрокиИтерации Цикл
			
			Если Строка.РезультатУтверждения = Перечисления.РезультатыУтверждения.НеУтверждено Тогда 
				РезультатУтвержденияПоЗадаче = Перечисления.РезультатыУтверждения.НеУтверждено;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если РезультатУтвержденияПоЗадаче = Перечисления.РезультатыУтверждения.Утверждено Тогда
			Результат = НСтр("ru = 'Результат утверждения: Утверждено'", КодЯзыкаПолучателя);
		ИначеЕсли РезультатУтвержденияПоЗадаче = Перечисления.РезультатыУтверждения.НеУтверждено Тогда
			Результат = НСтр("ru = 'Результат утверждения: Не утверждено'", КодЯзыкаПолучателя);
		КонецЕсли;
		
		// Результат ознакомления
		Если Задача.Выполнена Тогда
			
			НайденнаяСтрока = РезультатыОзнакомлений.Найти(Задача.Ссылка, "ЗадачаИсполнителя");
			Если НайденнаяСтрока <> Неопределено Тогда
				
				Если НайденнаяСтрока.ОтправленоНаПовторноеУтверждение Тогда
					РезультатОзнакомления = НСтр("ru = 'Результат ознакомления с результатом утверждения: Отправлено на повторное утверждение'",
						КодЯзыкаПолучателя);
				Иначе
					РезультатОзнакомления = НСтр("ru = 'Результат ознакомления с результатом утверждения: Ознакомился'",
						КодЯзыкаПолучателя);
				КонецЕсли;
				
				ДобавитьЗначениеКСтрокеЧерезРазделитель(
					Результат,
					Символы.ПС,
					РезультатОзнакомления);
				
				КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы со стартом процесса

Процедура ОтложенныйСтарт() Экспорт
	
	СтартПроцессовСервер.СтартоватьПроцессОтложенно(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОтключитьОтложенныйСтарт() Экспорт
	
	СтартПроцессовСервер.ОтключитьОтложенныйСтарт(ЭтотОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для поддержки комплексных процессов

// Дополняет описание процесса общим описанием
Процедура ДополнитьОписание(ОбщееОписание) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ОбщееОписание) Тогда
		Возврат;
	КонецЕсли;
	Описание = ОбщееОписание + Символы.ПС + Описание;
	
КонецПроцедуры

// Проверяет что заполнены поля шаблона
Функция ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта() Экспорт
	
	МассивПолей = Новый Массив;
	
	Если Не ЗначениеЗаполнено(Исполнитель) Тогда
		МассивПолей.Добавить("Исполнитель");
	КонецЕсли;	
	
	Возврат МассивПолей;
	
КонецФункции	

Функция НаименованиеПроцессаПоУмолчанию(ДобавлятьНаименованиеПредмета)
	
	Если ДобавлятьНаименованиеПредмета Тогда
		НаименованиеПоУмолчанию = МультипредметностьКлиентСервер.ПолучитьНаименованиеСПредметами(
			НСтр("ru = 'Утвердить'"), Предметы);
	КонецЕсли;
	
	Возврат НаименованиеПоУмолчанию;
	
КонецФункции

// Заполнит структуру возврата вместо диалога настроек процесса
//
//Параметры
//  РезультатВыполнения
//
Процедура ЗаполнитьРезультатНастроекПроцесса(СтруктураРезультата) Экспорт
	
	СтруктураРезультата.Вставить("Исполнитель", Исполнитель);
	СтруктураРезультата.Вставить("ВладелецРоли", Неопределено);
	СтруктураРезультата.Вставить("ОсновнойОбъектАдресации", Неопределено);
	СтруктураРезультата.Вставить("ДополнительныйОбъектАдресации", Неопределено);
	СтруктураРезультата.Вставить("СрокИсполнения", СрокИсполнения);
	СтруктураРезультата.Вставить("СрокИсполненияДни", СрокИсполненияДни);
	СтруктураРезультата.Вставить("СрокИсполненияЧасы", СрокИсполненияЧасы);
	СтруктураРезультата.Вставить("СрокИсполненияМинуты", СрокИсполненияМинуты);
	СтруктураРезультата.Вставить("ВариантУстановкиСрокаИсполнения", ВариантУстановкиСрокаИсполнения);
	
	СтруктураРезультата.Вставить("СрокОбработкиРезультатов", СрокОбработкиРезультатов);
	СтруктураРезультата.Вставить("СрокОбработкиРезультатовДни", СрокОбработкиРезультатовДни);
	СтруктураРезультата.Вставить("СрокОбработкиРезультатовЧасы", СрокОбработкиРезультатовЧасы);
	СтруктураРезультата.Вставить("СрокОбработкиРезультатовМинуты", СрокОбработкиРезультатовМинуты);
	СтруктураРезультата.Вставить("ВариантУстановкиСрокаОбработкиРезультатов", ВариантУстановкиСрокаОбработкиРезультатов);
	
	СтруктураРезультата.Вставить("СрокИсполненияПроцесса", СрокИсполненияПроцесса);
	
	СтруктураРезультата.Вставить("ПричинаПереносаСрока", "");
	
	СтруктураРезультата.Вставить("КоличествоИтераций", КоличествоИтераций);
	
КонецПроцедуры	

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли