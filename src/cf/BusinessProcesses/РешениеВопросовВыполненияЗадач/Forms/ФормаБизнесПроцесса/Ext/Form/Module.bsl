
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтоНовый = Объект.Ссылка.Пустая();
	
	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтаФорма, ДополнительныеПараметры);
	Мультипредметность.УстановитьЗначенияДопРеквизитовИДоступностьЭлементовФормыПроцесса(ЭтаФорма, Объект);
	
	// Обработчик механизма "Последние объекты"
	РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(Объект.Ссылка);
	
	СтартПроцессовСервер.ЗаполнитьНастройкиСтартаВФормеПроцесса(ЭтаФорма);
	
	ОбновитьДоступностьЭлементовФормыПоСостояниюПроцесса();
	
	ИзменятьЗаданияЗаднимЧислом = ПолучитьФункциональнуюОпцию("ИзменятьЗаданияЗаднимЧислом");
	ИспользоватьВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	ВестиУчетПоПроектам = ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам");
	
	ФорматДатыДляКолонок = ?(ИспользоватьВремяВСрокахЗадач, 
		"ДФ='dd.MM.yy H:mm'",
		"ДФ='dd.MM.yy'");
	
	// Инициализация списка файлов
	ОтображатьУдаленныеФайлы = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		ИмяФормы,
		"ОтображатьУдаленныеФайлы",
		Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Файлы,
		"ВладелецФайла",
		Объект.Ссылка);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Файлы,
		"ПользовательИЕгоСотрудники",
		СотрудникиВызовСервера.ПользовательИЕгоСотрудники(Пользователи.ТекущийПользователь()));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		Файлы,
		"ОтображатьУдаленные",
		ОтображатьУдаленныеФайлы);
	РаботаСФайламиВызовСервера.ЗаполнитьУсловноеОформлениеСпискаФайлов(Файлы);
	Элементы.ФайлыКонтекстноеМенюОтображатьУдаленные.Пометка = ОтображатьУдаленныеФайлы; 
	
	Задачи.Параметры.УстановитьЗначениеПараметра("ФизическоеЛицо", ПараметрыСеанса.ФизическоеЛицоПользователя);
	
	// Инициализация списка Задачи
	Элементы.ГруппаЗадачи.Видимость = Ложь;
	Если Объект.Стартован Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
			Задачи,
			"БизнесПроцесс",
			Объект.Ссылка);
			
		Элементы.ГруппаЗадачи.Видимость = Истина;
		
		Элементы.ЗадачиСрокИсполнения.Формат = ФорматДатыДляКолонок;
		Элементы.ЗадачиДатаИсполнения.Формат = ФорматДатыДляКолонок;
		
		Эл = БизнесПроцессыИЗадачиСервер.ЭлементУсловногоОформленияПоПредставлению(
			Задачи.УсловноеОформление, НСтр("ru = 'Принята к исполнению'"));
		ЭлементОтбораДанных = Эл.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПринятаКИсполнению");
		ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбораДанных.ПравоеЗначение = Ложь;
		ЭлементОтбораДанных.Использование = Истина;
		ЭлементОформления = Эл.Оформление.Элементы.Найти("Шрифт");
		ЭлементОформления.Значение = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,,,Истина);
		ЭлементОформления.Использование = Истина;
		
		Эл = БизнесПроцессыИЗадачиСервер.ЭлементУсловногоОформленияПоПредставлению(
			Задачи.УсловноеОформление, НСтр("ru = 'Просрочена'"));
		ЭлементОтбораДанных = Эл.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораДанных.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СрокИсполнения");
		ЭлементОтбораДанных.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
		ЭлементОтбораДанных.ПравоеЗначение = ТекущаяДатаСеанса();
		ЭлементОтбораДанных.Использование = Истина;
		ЭлементОформления = Эл.Оформление.Элементы.Найти("ЦветТекста");
		ЭлементОформления.Значение = ЦветаСтиля.ПросроченныеДанныеЦвет;
		ЭлементОформления.Использование = Истина;
		Поле = Эл.Поля.Элементы.Добавить();
		Поле.Поле = Новый ПолеКомпоновкиДанных("СрокИсполнения");
		
	КонецЕсли;
	
	// Если время в сроках задач не используется, скрываются соответствующие реквизиты
	Элементы.СрокИсполненияВремя.Видимость = ИспользоватьВремяВСрокахЗадач;
	
	// Сохранение вводимых значений
	СохранениеВводимыхЗначений.ОбновитьСпискиВыбора(ЭтаФорма, ЭлементыДляСохранения(), ЭтаФорма.ИмяФормы);
	
	Элементы.ФормаПометитьНаУдаление.Доступность =
		РаботаСБизнесПроцессамиВызовСервера.ДоступностьИнтерактивнойПометкиУдаленияБизнесПроцесса(Объект.Ссылка);
	
	// Заполняем строковое представление участников
	Элементы.ИнициаторПроцесса.ТолькоПросмотр = ТолькоПросмотр
		Или Объект.ВидВопроса = Перечисления.ВидыВопросовВыполненияЗадач.ПереносСрока;
		
	Элементы.ГруппаИнфо.Видимость = Не ЭтоНовый;
	Если Объект.Стартован Тогда
		Если Объект.Завершен Тогда
			Длительность = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '(выполнялся %1)'"),
				НРег(ДелопроизводствоКлиентСервер.РазностьДатВДнях(Объект.ДатаЗавершения, Объект.ДатаНачала)));
		Иначе
			Длительность = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '(выполняется %1)'"),
				НРег(ДелопроизводствоКлиентСервер.РазностьДатВДнях(ТекущаяДатаСеанса(), Объект.ДатаНачала)));
		КонецЕсли;
	КонецЕсли;
		
	Если ЭтоНовый Тогда
		Заголовок = НСтр("ru = 'Новый вопрос'");
		АвтоЗаголовок = Ложь;
		Элементы.ОтветственныйИсполнитель.Видимость = Ложь;
		
		Если Элементы.ГруппаДополнительныеРеквизиты.ПодчиненныеЭлементы.Количество() = 0 Тогда
			Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;	
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ГруппаСтарыйИНовыйСрок.Видимость = Ложь;
	Элементы.ГруппаВопросыПоЗадаче.Видимость = Ложь;
	Элементы.ГруппаПереносыСроков.Видимость = Ложь;
	
	Если ЭтоМобильныйКлиент Тогда
		Элементы.ФормаСтартИЗакрыть.Заголовок = НСтр("ru = 'Задать вопрос'");
	КонецЕсли;
	
	Если Объект.ВидВопроса = Перечисления.ВидыВопросовВыполненияЗадач.ПереносСрока Тогда
		
		Элементы.ГруппаГлавное.Заголовок = НСтр("ru = 'Запрос'");
		
		Если ЭтоНовый Тогда
			Заголовок = НСтр("ru = 'Новый запрос на перенос срока'");
			АвтоЗаголовок = Ложь;
			
			// Инициализация списка существующих вопросов по задаче и запросов на перенос сроков
			Элементы.ГруппаВопросыПоЗадаче.Видимость = Истина;
			Элементы.ГруппаПереносыСроков.Видимость = Истина;
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
				ВопросыПоЗадаче,
				"ПредметРассмотрения",
				Объект.ПредметРассмотрения);
			ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
				ПереносыСроков,
				"ПредметРассмотрения",
				Объект.ПредметРассмотрения);
			Элементы.ПереносыСроковДата.Формат = ФорматДатыДляКолонок;
			Элементы.ПереносыСроковНовыйСрок.Формат = ФорматДатыДляКолонок;
			Элементы.ВопросыПоЗадачеДата.Формат = ФорматДатыДляКолонок;
			
			// Подсчет количества уже существующих вопросов по задаче
			ПосчитатьКоличествоСуществующихВопросов();
			ПосчитатьКоличествоСуществующихЗапросовНаПереносСрока();
			
		КонецЕсли;
		
		Элементы.ГруппаСтарыйИНовыйСрок.Видимость = Истина;
		
		
		Элементы.ФормаСтартИЗакрыть.Заголовок = НСтр("ru = 'Отправить запрос и закрыть'");
		
		Если ЭтоМобильныйКлиент Тогда
			Элементы.ФормаСтартИЗакрыть.Заголовок = НСтр("ru = 'Отправить запрос'");
		КонецЕсли;
		
		СтарыйСрок = СтарыйСрокИсполненияПредметаРассмотрения(
			Объект.ПредметРассмотрения, Объект.Ссылка);
			
		ДлительностьПереноса = ПереносСроковВыполненияЗадачВызовСервера.ПолучитьПодписьДлительностьПереноса(
			Объект.Автор, 
			СтарыйСрок, 
			Объект.НовыйСрок);
		
		Элементы.Описание.ПодсказкаВвода = НСтр("ru = 'Обоснование запроса'");
		Элементы.Описание_БезПредметов.ПодсказкаВвода = Элементы.Описание.ПодсказкаВвода;
		Элементы.Описание.Подсказка = НСтр("ru = 'Обоснование запроса'");
		Элементы.Описание_БезПредметов.Подсказка = Элементы.Описание.Подсказка;
		
		Элементы.СтарыйСрокВремя.Видимость = ИспользоватьВремяВСрокахЗадач;
		Элементы.НовыйСрокВремя.Видимость = ИспользоватьВремяВСрокахЗадач;
		ДоступнаУстановкаНовогоСрока = ДоступнаУстановкаНовогоСрока(Объект.Ссылка);
		Элементы.НовыйСрокДата.ТолькоПросмотр = Не ДоступнаУстановкаНовогоСрока;
		Элементы.НовыйСрокВремя.ТолькоПросмотр = Не ДоступнаУстановкаНовогоСрока;
		
	КонецЕсли;
	
	ОбновитьВидимостьТаблицыФайлов(ЭтаФорма);
	Если Элементы.ГруппаСтарыйИНовыйСрок.Видимость Тогда
		ТекущийЭлемент = Элементы.НовыйСрокДата;
	КонецЕсли;
	
	ПроверятьОтсутствие = Отсутствия.ПредупреждатьОбОтсутствии();
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ЭтоМобильныйКлиент = ПараметрыСеанса.ЭтоМобильныйКлиент;
	Если ЭтоМобильныйКлиент Тогда
		МК_НастроитьЭлементыФормы();
	КонецЕсли;
	
	Справочники.ПравилаКоммуникаций.НастроитьПоляПредмета(ЭтаФорма, Элементы.ИнициаторПроцесса);
	
	ЭтоОбъектДругойСистемы = МиграцияДанныхИзВнешнихСистемСервер.ЭтоОбъектИзДругойСистемы(Объект.ИсточникДанных);
	Если ЭтоОбъектДругойСистемы Тогда
		Элементы.ГруппаНеРедактируется.Видимость = Истина;
		НеРедактируетсяОписание =
			НСтр("ru = 'Процесс загружен из сторонней системы, редактирование запрещено.'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтаФорма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтаФорма, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОчиститьСообщения();
	
	Если Объект.ВидВопроса = ПредопределенноеЗначение("Перечисление.ВидыВопросовВыполненияЗадач.Иное") Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Описание) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Поле ""Вопрос"" не заполнено'"),
				,
				"Объект.Описание",
				,
				Отказ);
			Возврат;
		КонецЕсли;
	Иначе
		// Проверка на правильность указания нового срока
		Если НЕ ЗначениеЗаполнено(Объект.НовыйСрок) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Не введен новый срок выполнения.'"),
				,
				"Объект.НовыйСрок",
				,
				Отказ);
		КонецЕсли;
		
		// Проверка заполнения обоснования на перенос
		Если НЕ ЗначениеЗаполнено(Объект.Описание) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Не указано основание для переноса срока.'"),
				,
				"Объект.Описание",
				,
				Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Пока процесс решения вопроса не стартован, каждая его запись будет сдвигать дату создания		
	Если (НЕ ПараметрыЗаписи.Свойство("Старт") ИЛИ НЕ ПараметрыЗаписи.Старт)
		И НЕ Объект.Стартован Тогда
		Объект.Дата = ТекущаяДата();
	КонецЕсли;
	
	ВыполнитьПроверкуНаЗанятыеФайлы = Ложь;
	
	// Перед стартом процесса проверяется занятость файлов и отсутствие исполнителя.
	Если (ПараметрыЗаписи.Свойство("Старт") И ПараметрыЗаписи.Старт)
		Или (Не Объект.Стартован И Модифицированность И ЗначениеЗаполнено(НастройкаСтарта)
			И НастройкаСтарта.Состояние = 
			ПредопределенноеЗначение("Перечисление.СостоянияПроцессовДляЗапуска.ГотовКСтарту"))
		Или ОбработкаОчередиЗаданийКлиентСервер.ЭтоСтартПроцессаЧерезОчередьЗаданий(ПараметрыЗаписи) Тогда
		
		Если НЕ ПараметрыЗаписи.Свойство("СтартоватьПриЗанятыхФайлах")
			И ЕстьЗанятыеНаРедактированиеФайлы(Объект.Ссылка) Тогда
			
			ОписаниеОповещения = Новый ОписаниеОповещения(
				"ПередЗаписьюПослеВопросаОЗанятыхНаРедактированиеФайлах", ЭтотОбъект, ПараметрыЗаписи);
				
			ТекстВопроса = НСтр("ru = 'Один из приложенных файлов занят для редактирования. Отправить вопрос автору?'");
			
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,
				КодВозвратаДиалога.Нет, НСТР("ru = 'Отправка вопроса'"));
				
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;
		
		Если Не ОтсутствияКлиент.ПроверитьОтсутствиеПоПроцессуПередЗаписью(
				ЭтаФорма, ПараметрыЗаписи, Отказ) Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПослеВопросаОЗанятыхНаРедактированиеФайлах(Результат, ПараметрыЗаписи) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("СтартоватьПриЗанятыхФайлах", Истина);
	ПараметрыОповещения = Новый Структура();
	ПараметрыОповещения.Вставить("ИдентификаторФормы", УникальныйИдентификатор);
	ПараметрыОповещения.Вставить("ПараметрыЗаписиПроцесса", ПараметрыЗаписи);
	Оповестить("СтартПроцессаПослеВопроса", ПараметрыОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Оповестить("ОбновитьСписокПоследних");
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	РаботаСБизнесПроцессамиКлиент.ОбработкаОповещенияФормаБизнесПроцесса(
		ИмяСобытия, Параметр, Источник, ЭтаФорма);
	
	// Подсистема "Свойства"
	Если ИмяСобытия = "Процесс_ВводПричиныПрерывания" И Параметр.ВладелецФормы = ЭтаФорма Тогда
		КомандыРаботыСБизнесПроцессамиКлиент.ПрерватьБизнесПроцессИзФормыОбъектаОкончание(
			ЭтаФорма, Параметр);
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Файл" И Параметр.Событие = "СозданФайл" Тогда
		Элементы.Файлы.Обновить();
		Файлы.Параметры.УстановитьЗначениеПараметра("ВладелецФайла", Объект.Ссылка);
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			
			Элементы.Файлы.Обновить();
			ОбновитьВидимостьТаблицыФайлов(ЭтаФорма);
			
			Элементы.Файлы.ТекущаяСтрока = Параметр.Файл;
			
		КонецЕсли;	
	КонецЕсли;
	
	Если ИмяСобытия = "ИмпортФайловЗавершен" И ТипЗнч(Источник) = Тип("Структура")
		И Источник.ВладелецФайлов = Объект.Ссылка Тогда
		
		Элементы.Файлы.Обновить();
		ОбновитьВидимостьТаблицыФайлов(ЭтаФорма);
		
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_Файл" И Параметр.Событие = "ДанныеФайлаИзменены" Тогда
		ВладелецФайла = Неопределено;
		Если ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("Владелец")
			 И ЗначениеЗаполнено(Параметр.Владелец)  Тогда
			ВладелецФайла = Параметр.Владелец;
		Иначе	
			ВладелецФайла = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Источник, "ВладелецФайла");
		КонецЕсли;		
		
		Если ВладелецФайла = Объект.Ссылка Тогда
			Элементы.Файлы.Обновить();
			Файлы.Параметры.УстановитьЗначениеПараметра("ВладелецФайла", Объект.Ссылка);
			ОбновитьДоступностьКомандСпискаФайлов();
		КонецЕсли;	
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменилсяФлаг"
		И ТипЗнч(Параметр[0]) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		
		Элементы.Задачи.Обновить();
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтаФорма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ОтключитьОбновлениеЗадач", Истина);
	
	РаботаСБизнесПроцессамиВызовСервера.ПередЗаписьюНаСервереФормаБизнесПроцесса(
		Отказ, ТекущийОбъект, ПараметрыЗаписи, ЭтаФорма);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ПараметрыЗаписи.Вставить("ЭтоНовыйОбъект", Не ЗначениеЗаполнено(ТекущийОбъект.Ссылка));
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ИдентификаторФормы", УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ПараметрыЗаписи.Свойство("ЭтоНовыйОбъект") И ПараметрыЗаписи.ЭтоНовыйОбъект = Истина Тогда
		РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(Объект.Ссылка);
	КонецЕсли;
	
	ОбновитьДоступностьЭлементовФормыПоСостояниюПроцесса();
	
	Если ЭтоНовый
		И Объект.ВидВопроса = Перечисления.ВидыВопросовВыполненияЗадач.ПереносСрока Тогда
		
		ПосчитатьКоличествоСуществующихВопросов();
		ПосчитатьКоличествоСуществующихЗапросовНаПереносСрока();
	КонецЕсли;
	
	ЗначениеПараметра = Файлы.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ВладелецФайла"));
	Если Не ЗначениеЗаполнено(ЗначениеПараметра.Значение) Тогда 
		Файлы.Параметры.УстановитьЗначениеПараметра("ВладелецФайла", Объект.Ссылка);
	КонецЕсли;
	
	// Обновление заголовка формы после записи
	Если НЕ ТекущийОбъект.Ссылка.Пустая() Тогда
		Заголовок = "";
		АвтоЗаголовок = Истина
	КонецЕсли;
	
	ИнтеграцияЗадач.ОбновитьЗадачуПоИсточнику(ТекущийОбъект.Ссылка);
	ЗадачаПоИсточнику = Документы.Задача.НайтиПоИсточнику(ТекущийОбъект.Ссылка);
	ПараметрыЗаписи.Вставить("ЗадачаПоИсточнику", ЗадачаПоИсточнику);
	
	Если ЗначениеЗаполнено(ЗадачаПоИсточнику) Тогда
		ВышестоящаяЗадача = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ЗадачаПоИсточнику,
			"ВышестоящаяЗадача");
	Иначе
		ВышестоящаяЗадача = Неопределено;
	КонецЕсли;
	ПараметрыЗаписи.Вставить("ВышестоящаяЗадача", ВышестоящаяЗадача);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОчиститьСообщения();
	ОповеститьОбИзменении(Объект.Ссылка);
	Оповестить("БизнесПроцессИзменен", Объект.Ссылка, ЭтаФорма);
	
	Если ПараметрыЗаписи.Свойство("ЭтоНовыйОбъект") И ПараметрыЗаписи.ЭтоНовыйОбъект = Истина Тогда
		Оповестить("ОбновитьСписокПоследних");
		Оповестить("СозданНовыйВопросВыполненияЗадачи", Объект.ПредметРассмотрения);
	КонецЕсли;
	
	Если (ПараметрыЗаписи.Свойство("Старт") И ПараметрыЗаписи.Старт)
		Или ОбработкаОчередиЗаданийКлиентСервер.ЭтоСтартПроцессаЧерезОчередьЗаданий(ПараметрыЗаписи) Тогда
		
		Если Объект.Предметы.Количество() = 0 Тогда 
			
			ИнформацияОЗапуске = Новый Структура;
			ИнформацияОЗапуске.Вставить("СсылкаНаБизнесПроцесс", Объект.Ссылка);
			ИнформацияОЗапуске.Вставить("СсылкаНаПредметБизнесПроцесса", Неопределено);
			ИнформацияОЗапуске.Вставить("ГлавнаяЗадача", Объект.ГлавнаяЗадача);
			Если ВестиУчетПоПроектам Тогда
				ИнформацияОЗапуске.Вставить("Проект", Объект.Проект);
				ИнформацияОЗапуске.Вставить("ПроектнаяЗадача", Объект.ПроектнаяЗадача);
			КонецЕсли;
			Оповестить("БизнесПроцессСтартован", ИнформацияОЗапуске);
			
		Иначе
		
			Для Каждого СтрокаПредмета из Объект.Предметы Цикл
				Если ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда
					ДелопроизводствоКлиент.ОповеститьОбИзмененииОбъекта(СтрокаПредмета.Предмет);
				КонецЕсли;
				
				ИнформацияОЗапуске = Новый Структура();
				ИнформацияОЗапуске.Вставить("СсылкаНаБизнесПроцесс", Объект.Ссылка);
				ИнформацияОЗапуске.Вставить("СсылкаНаПредметБизнесПроцесса", СтрокаПредмета.Предмет);
				ИнформацияОЗапуске.Вставить("ГлавнаяЗадача", Объект.ГлавнаяЗадача);
				Если ВестиУчетПоПроектам Тогда
					ИнформацияОЗапуске.Вставить("Проект", Объект.Проект);
					ИнформацияОЗапуске.Вставить("ПроектнаяЗадача", Объект.ПроектнаяЗадача);
				КонецЕсли;
				Оповестить("БизнесПроцессСтартован", ИнформацияОЗапуске);
			КонецЦикла;
		
		КонецЕсли;
		
	ИначеЕсли ИзменитьРеквизитыНевыполненныхЗадач Тогда 
		Оповестить("ИзмененыРеквизитыНевыполненныхЗадач", Объект.Ссылка);
	КонецЕсли;
	
	РаботаСБизнесПроцессамиКлиент.ПоказатьОповещениеПослеЗаписиПроцесса(ЭтаФорма, ПараметрыЗаписи);
	
	
	РаботаСЗадачамиКлиент.ОповеститьОЗаписиЗадачи(
		ПараметрыЗаписи.ЗадачаПоИсточнику,
		ПараметрыЗаписи.ВышестоящаяЗадача,
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если ИзменитьРеквизитыНевыполненныхЗадач Тогда 
		ТекущийОбъект.ИзменитьРеквизитыНевыполненныхЗадач();
	КонецЕсли;
	
	// Сохранение вводимых значений
	СохранениеВводимыхЗначений.ОбновитьСпискиВыбора(ЭтаФорма, ЭлементыДляСохранения(), ЭтаФорма.ИмяФормы);
	
	ОбработкаОчередиЗаданийСервер.ОбработатьЗапускПроцессаИзКарточки(
		ТекущийОбъект.Ссылка, ПараметрыЗаписи);	
	
	ИнтеграцияЗадач.ОбновитьЗадачуПоИсточнику(ТекущийОбъект.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДекорацияОписаниеНажатие(Элемент)
	
	РаботаСБизнесПроцессамиКлиент.ДекорацияОписаниеНажатие(Элемент, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредметРассмотренияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, Объект.ПредметРассмотрения);
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйСрокДатаПриИзменении(Элемент)
	
	НовыйСрокПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура НовыйСрокВремяПриИзменении(Элемент)
	
	НовыйСрокПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура СрокОтветаПриИзменении(Элемент)
	
	Если НЕ ИспользоватьВремяВСрокахЗадач Тогда
		Объект.СрокИсполнения = КонецДня(Объект.СрокИсполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СрокОтветаВремяПриИзменении(Элемент)
	
	// Если в поле "Срок ответа" вводится только время, то в дату проставляется текущая дата.
	// При вводе только времени дата автоматически принимает значение 01.01.0001 <Дата>. Это значение исправляется.
	Если ЗначениеЗаполнено(Объект.СрокИсполнения) и Объект.СрокИсполнения < Дата(1,1,2) Тогда
		ДатаНачалаДня = НачалоДня(ТекущаяДата());
		ГодНачалаДня = Год(ДатаНачалаДня);
		МесяцНачалаДня = Месяц(ДатаНачалаДня);
		ДеньНачалаДня = День(ДатаНачалаДня);
		ЧасДаты = Час(Объект.СрокИсполнения);
		МинутаДаты = Минута(Объект.СрокИсполнения);
		СекундаДаты = Секунда(Объект.СрокИсполнения);
		Объект.СрокИсполнения = Дата(
			ГодНачалаДня,
			МесяцНачалаДня,
			ДеньНачалаДня,
			ЧасДаты,
			МинутаДаты,
			СекундаДаты);	
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////
// Обработчики поля ИнициаторПроцесса

&НаКлиенте
Процедура ИнициаторПроцессаПриИзменении(Элемент)
	
	РаботаСБизнесПроцессамиКлиент.УчастникПриИзменении(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициаторПроцессаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСАдреснойКнигойКлиент.ВыбратьУчастника(ЭтаФорма, Элемент, СтандартнаяОбработка, Объект.ИнициаторПроцесса);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициаторПроцессаОчистка(Элемент, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.УчастникОчистка(СтандартнаяОбработка,
		ЭтаФорма, "ИнициаторПроцесса");
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициаторПроцессаОткрытие(Элемент, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.УчастникОткрытие(СтандартнаяОбработка,
		ЭтаФорма, "ИнициаторПроцесса");
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициаторПроцессаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не РаботаСАдреснойКнигойКлиент.ОбработатьВыборУчастника(ЭтаФорма, Элемент, ВыбранноеЗначение, СтандартнаяОбработка) Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСБизнесПроцессамиКлиент.УчастникОбработкаВыбора(
		Элемент, ВыбранноеЗначение, СтандартнаяОбработка); 
	
	СотрудникиКлиент.СотрудникОбработкаВыбора(Объект, "ИнициаторПроцесса", ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициаторПроцессаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	РаботаСАдреснойКнигойКлиент.ПодобратьУчастника(ЭтаФорма, Элемент, Текст, ДанныеВыбора, Параметры,
		Ожидание, СтандартнаяОбработка, Объект.ИнициаторПроцесса);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициаторПроцессаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	ИнициаторПроцессаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, 0, СтандартнаяОбработка)
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Файлы

&НаКлиенте
Процедура СписокФайловВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	КакОткрывать = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ДействиеПоДвойномуЩелчкуМыши;
	Если КакОткрывать = "ОткрыватьКарточку" Тогда
		ПоказатьЗначение(, ВыбраннаяСтрока);
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(
		ВыбраннаяСтрока, 
		Неопределено, 
		ЭтаФорма.УникальныйИдентификатор);
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ДанныеФайла", ДанныеФайла);
	Обработчик = Новый ОписаниеОповещения("СписокВыборПослеВыбораРежимаРедактирования", ЭтотОбъект, ПараметрыОбработчика);
	
	РаботаСФайламиКлиент.ВыбратьРежимИРедактироватьФайл(Обработчик, ДанныеФайла, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборПослеВыбораРежимаРедактирования(Результат, ПараметрыВыполнения) Экспорт
	
	РезультатОткрыть = "Открыть";
	РезультатРедактировать = "Редактировать";
	РезультатОткрытьКарточку = "ОткрытьКарточку";
	
	Обработчик = Новый ОписаниеОповещения("ОбновитьДоступностьКомандСпискаФайлов", ЭтотОбъект, ПараметрыВыполнения);
	
	Если Результат = РезультатРедактировать Тогда
		РаботаСФайламиКлиент.РедактироватьФайл(Обработчик, ПараметрыВыполнения.ДанныеФайла);
	ИначеЕсли Результат = РезультатОткрыть Тогда
		РаботаСФайламиКлиент.ОткрытьФайлСОповещением(Неопределено, ПараметрыВыполнения.ДанныеФайла, УникальныйИдентификатор); 
	ИначеЕсли Результат = РезультатОткрытьКарточку Тогда
		ПоказатьЗначение(, ПараметрыВыполнения.ДанныеФайла.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПриАктивизацииСтроки(Элемент)
	
	ОбновитьДоступностьКомандСпискаФайлов();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ВладелецФайла = Объект.Ссылка;
	ФайлОснование = Элементы.Файлы.ТекущаяСтрока;
	
	Если Не Копирование Тогда
		Попытка
			РежимСоздания = 1;
			РаботаСФайламиКлиент.ДобавитьФайл(Неопределено, ВладелецФайла, ЭтаФорма, РежимСоздания, Истина);
		Исключение
			Инфо = ИнформацияОбОшибке();
			ПоказатьПредупреждение(,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			                 НСтр("ru = 'Ошибка создания нового файла: %1'"),
			                 КраткоеПредставлениеОшибки(Инфо)));
		КонецПопытки;
	Иначе
		РаботаСФайламиКлиент.СкопироватьФайл(ВладелецФайла, ФайлОснование);
	КонецЕсли;
	Элементы.Файлы.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.Файлы.ТолькоПросмотр Тогда 
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ВладелецФайлаСписка = Объект.Ссылка;
	НеОткрыватьКарточкуПослеСозданияИзФайла = Истина;	
	РаботаСФайламиКлиент.ОбработкаПеретаскиванияВЛинейныйСписок(ПараметрыПеретаскивания, ВладелецФайлаСписка, ЭтаФорма, НеОткрыватьКарточкуПослеСозданияИзФайла);
	Элементы.Файлы.Обновить();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Задачи

&НаКлиенте
Процедура ЗадачиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.Задачи.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент = Элементы.ЗадачиНомерФлага Тогда
		РаботаСФлагамиОбъектовКлиент.ПереключитьФлагЗадачи(Элементы.Задачи.ТекущаяСтрока);
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, Элементы.Задачи.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗадачиПередНачаломИзменения(Элемент, Отказ)
	
	ПоказатьЗначение(, Элементы.Задачи.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура МК_ПоказатьСкрытьФайлы(Команда)
	
	Элементы.Файлы.Видимость = Не Элементы.Файлы.Видимость;
	МК_ПоказатьСкрытьФайлыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура МК_СтраницаВопрос(Команда)
	
	МК_СтраницаВопросНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура МК_СтраницаПереносСрока(Команда)
	
	МК_СтраницаПереносСрокаНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура МК_СтраницаДругиеВопросы(Команда)
	
	МК_СтраницаДругиеВопросыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура МК_СтраницаДополнительно(Команда)
	
	МК_СтраницаДополнительноНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура МК_СтраницаЗадачи(Команда)
	
	МК_СтраницаЗадачиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СтартоватьИЗакрыть(Команда)
	
	КомандыРаботыСБизнесПроцессамиКлиент.СтартоватьИЗакрыть(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Остановить(Команда)
	
	КомандыРаботыСБизнесПроцессамиКлиент.ОстановитьБизнесПроцессИзФормыОбъекта(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрерватьБизнесПроцесс(Команда)
	
	КомандыРаботыСБизнесПроцессамиКлиент.ПрерватьБизнесПроцессИзФормыОбъекта(ЭтаФорма);
	
КонецПроцедуры        

&НаКлиенте
Процедура ПродолжитьБизнесПроцесс(Команда)
	
	КомандыРаботыСБизнесПроцессамиКлиент.ПродолжитьБизнесПроцессИзФормыОбъекта(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдаление(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ПометитьНаУдалениеБизнесПроцесс(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ЗаписатьИЗакрыть(Команда, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПраваДоступа(Команда)
	
	ДокументооборотПраваДоступаКлиент.ОткрытьФормуПравДоступа(ЭтаФорма);
	
КонецПроцедуры

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, Объект, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Асинх Процедура ВставитьКартинкуИзБуфера(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда 
		
		Если Не Записать() Тогда 
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	КартинкаИзБуфераОбмена = Ждать СредстваБуфераОбмена.ПолучитьДанныеАсинх(СтандартныйФорматДанныхБуфераОбмена.Картинка);
	
	Если КартинкаИзБуфераОбмена = Неопределено Тогда
		ПоказатьПредупреждение(
			, НСтр(
				"ru='Буфер обмена не содержит картинки'"
				, "ru"
			)
		);
		Возврат;
	КонецЕсли;
	
	ПутьКФайлу = "";
	
#Если Не ВебКлиент Тогда 
	
	ПутьКФайлу = ПолучитьИмяВременногоФайла("png");
	КартинкаИзБуфераОбмена.Записать(ПутьКФайлу);

#КонецЕсли
	
	ВставитьКартинкуИзБуфераЗавершение(Истина, ПутьКФайлу);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьКартинкуИзБуфераЗавершение(Результат, ПутьКФайлу) Экспорт
	
	Если Результат = Истина Тогда
		
		Если Не ПустаяСтрока(ПутьКФайлу) Тогда
			
			НеОткрыватьКарточкуПослеСозданияИзФайла = Истина;
			РаботаСФайламиКлиент.СоздатьДокументНаОсновеФайла(
				ПутьКФайлу, Объект.Ссылка, ЭтаФорма, НеОткрыватьКарточкуПослеСозданияИзФайла);
				
		Иначе
			ПоказатьПредупреждение(,НСтр("ru = 'Буфер обмена не содержит картинки'"));
		КонецЕсли;
	
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы_Файлы

&НаКлиенте
Процедура ОткрытьФайл(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(Элементы.Файлы.ТекущаяСтрока, Неопределено, ЭтаФорма.УникальныйИдентификатор);
	КомандыРаботыСФайламиКлиент.Открыть(ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляСохранения(Элементы.Файлы.ТекущаяСтрока, Неопределено, ЭтаФорма.УникальныйИдентификатор);
	КомандыРаботыСФайламиКлиент.СохранитьКак(ДанныеФайла, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИзФайлаНаДиске(Команда)
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаИРабочийКаталог(Элементы.Файлы.ТекущаяСтрока);
	
	Обработчик = Новый ОписаниеОповещения("ОбновитьДоступностьКомандСпискаФайлов", ЭтотОбъект);
	РаботаСФайламиКлиент.ОбновитьИзФайлаНаДискеСОповещением(
		Обработчик,
		ДанныеФайла, ЭтаФорма.УникальныйИдентификатор);
		
КонецПроцедуры

&НаКлиенте
Процедура Редактировать(Команда)
	
	Если Объект.Ссылка.Пустая()
		И Элементы.ФайлыДобавленные.ТекущаяСтрока <> Неопределено Тогда
		Если ЭтоАдресВременногоХранилища(Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть) Тогда 
			ТекущийФайлВСпискеДобавленных = ПолучитьИзВременногоХранилища(Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть).Ссылка;
		Иначе			
			РаботаСФайламиКлиент.ЗапуститьПриложениеПоИмениФайла(
				Элементы.ФайлыДобавленные.ТекущиеДанные.ПолныйПуть);
		КонецЕсли;	
	Иначе
		
		Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
			Возврат;
		КонецЕсли;
			
		Обработчик = Новый ОписаниеОповещения("ОбновитьДоступностьКомандСпискаФайлов", ЭтотОбъект);
		РаботаСФайламиКлиент.РедактироватьСОповещением(Обработчик, Элементы.Файлы.ТекущаяСтрока);
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьРедактирование(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ОбновитьДоступностьКомандСпискаФайлов", ЭтотОбъект);
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
		
	ПараметрыОбновленияФайла = РаботаСФайламиКлиент.ПараметрыОбновленияФайла(Обработчик, 
		Элементы.Файлы.ТекущаяСтрока, ЭтаФорма.УникальныйИдентификатор);
	ПараметрыОбновленияФайла.ХранитьВерсии = ТекущиеДанные.ХранитьВерсии;
	ПараметрыОбновленияФайла.РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
	ПараметрыОбновленияФайла.Редактирует = ТекущиеДанные.Редактирует;
	РаботаСФайламиКлиент.ЗакончитьРедактированиеСОповещением(ПараметрыОбновленияФайла);
		
КонецПроцедуры

&НаКлиенте
Процедура Занять(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;

	Обработчик = Новый ОписаниеОповещения("ОбновитьДоступностьКомандСпискаФайлов", ЭтотОбъект);
	РаботаСФайламиКлиент.ЗанятьСОповещением(Обработчик, Элементы.Файлы.ТекущаяСтрока);	
	
КонецПроцедуры

&НаКлиенте
Процедура Освободить(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ОбновитьДоступностьКомандСпискаФайлов", ЭтотОбъект);
	
	ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
		
	ПараметрыОсвобожденияФайла = РаботаСФайламиКлиент.ПараметрыОсвобожденияФайла(Обработчик, 
		Элементы.Файлы.ТекущаяСтрока);
	ПараметрыОсвобожденияФайла.ХранитьВерсии = ТекущиеДанные.ХранитьВерсии;	
	ПараметрыОсвобожденияФайла.РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;	
	ПараметрыОсвобожденияФайла.Редактирует = ТекущиеДанные.Редактирует;	
	РаботаСФайламиКлиент.ОсвободитьФайлСОповещением(ПараметрыОсвобожденияФайла);
		
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИзменения(Команда)
	
	Если Элементы.Файлы.ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Обработчик = Новый ОписаниеОповещения("ОбновитьДоступностьКомандСпискаФайлов", ЭтотОбъект);
	
	РаботаСФайламиКлиент.СохранитьИзмененияФайлаСОповещением(
		Обработчик,
		Элементы.Файлы.ТекущаяСтрока, 
		ЭтаФорма.УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьУдаленныеФайлы(Команда)
	
	ОтображатьУдаленныеФайлыСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайл(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если НЕ Записать() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ВладелецФайла = Объект.Ссылка;
	ФайлОснование = Элементы.Файлы.ТекущаяСтрока;
	
	Попытка
		РежимСоздания = 1;
		РаботаСФайламиКлиент.ДобавитьФайл(Неопределено, ВладелецФайла, ЭтаФорма, РежимСоздания, Истина);
		
	Исключение
		Инфо = ИнформацияОбОшибке();
		ПоказатьПредупреждение(,СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		                 НСтр("ru = 'Ошибка создания нового файла: %1'"),
		                 КраткоеПредставлениеОшибки(Инфо)));
	КонецПопытки;
	
	Если ЭтоМобильныйКлиент Тогда
		МК_ПоказатьСкрытьФайлыНаСервере();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы_Задачи

&НаКлиенте
Процедура ЖелтыйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Желтый"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗеленыйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Зеленый"));
	
КонецПроцедуры

&НаКлиенте
Процедура КрасныйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Красный"));
	
КонецПроцедуры

&НаКлиенте
Процедура ЛиловыйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Лиловый"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОранжевыйФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Оранжевый"));
	
КонецПроцедуры

&НаКлиенте
Процедура СинийФлаг(Команда)
	
	УстановитьФлаги(ПредопределенноеЗначение("Перечисление.ФлагиОбъектов.Синий"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФлаг(Команда)
	
	УстановитьФлаги(Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОбновитьДоступностьЭлементовФормыПоСостояниюПроцесса(ПрочитатьПараметрыСостояния = Ложь) Экспорт
	
	Если ПрочитатьПараметрыСостояния Тогда
		Прочитать();
		СтартПроцессовСервер.ЗаполнитьНастройкиСтартаВФормеПроцесса(ЭтаФорма);
	КонецЕсли;
	
	ЭтоОбъектДругойСистемы = МиграцияДанныхИзВнешнихСистемСервер.ЭтоОбъектИзДругойСистемы(Объект.ИсточникДанных);
	
	ТолькоПросмотр =
		Объект.Состояние = Перечисления.СостоянияБизнесПроцессов.Прерван
		Или Объект.Состояние = Перечисления.СостоянияБизнесПроцессов.Остановлен
		Или Объект.Завершен
		Или Объект.ПометкаУдаления
		Или ЭтоОбъектДругойСистемы;
		
	Элементы.Файлы.ТолькоПросмотр = ТолькоПросмотр;
	
	// Заполнение группы ГруппаСостояниеПроцесса
	Элементы.ДекорацияСостояния.Видимость = Ложь;
	Элементы.ДекорацияОписание.Гиперссылка = Ложь;
	Элементы.ДекорацияОписание.ЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
	Элементы.ГруппаСостояниеПроцесса.Видимость = Ложь;
	
	ПроцессСтартованФоново = Ложь;
	Если ЗначениеЗаполнено(НастройкаСтарта) Тогда
		ПроцессСтартованФоново = 
			Не ЗначениеЗаполнено(НастройкаСтарта.ДатаОтложенногоСтарта)
			И НастройкаСтарта.Состояние = Перечисления.СостоянияПроцессовДляЗапуска.ГотовКСтарту;
	КонецЕсли;
	
	Если Не ЭтоНовый Тогда
		Если Объект.Завершен Тогда
			Элементы.ГруппаСостояниеПроцесса.Видимость = Истина;
			
			Элементы.ДекорацияСостояния.Видимость = Истина;
			
			Элементы.ДекорацияСостояния.Картинка = 
				БиблиотекаКартинок.РезультатВыполненияПроцессовИЗадач;
				
			ПредставлениеРезультата = НСтр("ru = 'Рассмотрение завершено %1'");
			
			ПредставлениеРезультата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ПредставлениеРезультата, Формат(Объект.ДатаЗавершения, "ДФ='dd.MM.yyyy HH:mm'"));
				
			Элементы.ДекорацияОписание.Заголовок = ПредставлениеРезультата;
			
			ТолькоПросмотр = Истина;
			
		ИначеЕсли Объект.Состояние = Перечисления.СостоянияБизнесПроцессов.Остановлен Тогда
			Элементы.ГруппаСостояниеПроцесса.Видимость = Истина;
			
			Элементы.ДекорацияСостояния.Видимость = Истина;
			Элементы.ДекорацияСостояния.Картинка = БиблиотекаКартинок.ЗнакПауза;
			
			Элементы.ДекорацияОписание.Заголовок = НСтр("ru = 'Остановлен'");
		ИначеЕсли Объект.Состояние = Перечисления.СостоянияБизнесПроцессов.Прерван Тогда
			Элементы.ГруппаСостояниеПроцесса.Видимость = Истина;
			
			Элементы.ДекорацияСостояния.Видимость = Истина;
			Элементы.ДекорацияСостояния.Картинка = БиблиотекаКартинок.ЗнакПрерванПроцесс;
			
			РаботаСБизнесПроцессамиВызовСервера.ОтобразитьНаФормеПричинуПрерывания(ЭтаФорма);
			Элементы.ДекорацияОписание.ЦветТекста = ЦветаСтиля.ИнформационнаяНадпись;
			Элементы.ДекорацияОписание.Гиперссылка = Истина;
		ИначеЕсли Объект.Стартован Тогда
			Элементы.ГруппаСостояниеПроцесса.Видимость = Истина;
			
			Элементы.ДекорацияСостояния.Видимость = Истина;
			Элементы.ДекорацияСостояния.Картинка = БиблиотекаКартинок.СформироватьОтчет;
			
			Если Объект.ВидВопроса = Перечисления.ВидыВопросовВыполненияЗадач.Иное Тогда
				ЗаголовокДекорации = НСтр("ru = 'Вопрос рассматривается с %1'");
			Иначе
				ЗаголовокДекорации = НСтр("ru = 'Запрос рассматривается с %1'");
			КонецЕсли;
			
			Элементы.ДекорацияОписание.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ЗаголовокДекорации, Формат(Объект.ДатаНачала, "ДФ='dd.MM.yyyy HH:mm'"));
		ИначеЕсли ЗначениеЗаполнено(НастройкаСтарта)
			И ЗначениеЗаполнено(НастройкаСтарта.Состояние)
			И Не ЗначениеЗаполнено(НастройкаСтарта.ДатаОтложенногоСтарта) Тогда
			
			Если НастройкаСтарта.Состояние =
				Перечисления.СостоянияПроцессовДляЗапуска.ГотовКСтарту Тогда
				
				Элементы.ГруппаСостояниеПроцесса.Видимость = Истина;
				
				Элементы.ДекорацияОписание.Заголовок = НСтр("ru = 'Ожидается старт процесса в фоновом задании.'");
				Элементы.ДекорацияОписание.Гиперссылка = Ложь;
				
			ИначеЕсли НастройкаСтарта.Состояние = 
				Перечисления.СостоянияПроцессовДляЗапуска.СтартОтменен Тогда
				
				Элементы.ГруппаСостояниеПроцесса.Видимость = Истина;
				
				Элементы.ДекорацияОписание.Заголовок =
					НастройкаСтарта.ПричинаОтменыСтарта;
				Элементы.ДекорацияОписание.ЦветТекста = ЦветаСтиля.ПоясняющийОшибкуТекст;
				Элементы.ДекорацияОписание.Гиперссылка = Истина;
				
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Элементы.ГруппаСостояниеПроцесса.Видимость = Истина;
			
			Если Объект.ВидВопроса = Перечисления.ВидыВопросовВыполненияЗадач.Иное Тогда
				Элементы.ДекорацияОписание.Заголовок = НСтр("ru = 'Вопрос не отправлен'");
			Иначе
				Элементы.ДекорацияОписание.Заголовок = НСтр("ru = 'Запрос не отправлен'");
			КонецЕсли;
			
			Элементы.ДекорацияОписание.ЦветТекста = ЦветаСтиля.ПоясняющийОшибкуТекст;
		КонецЕсли;
	КонецЕсли;
	
	// Установка видимости кнопок ФормаСтартИЗакрыть и ФормаЗаписатьИЗакрыть
	Если Объект.ПометкаУдаления
		Или Объект.Состояние = Перечисления.СостоянияБизнесПроцессов.Остановлен
		Или Объект.Состояние = Перечисления.СостоянияБизнесПроцессов.Прерван Тогда
		
		Элементы.ФормаСтартИЗакрыть.Видимость = Ложь;
		Элементы.ФормаЗаписатьИЗакрыть.Видимость = Истина;
		
	ИначеЕсли Объект.Стартован Или ПроцессСтартованФоново Тогда
		Элементы.ФормаСтартИЗакрыть.Видимость = Ложь;
		Элементы.ФормаЗаписатьИЗакрыть.Видимость = Истина;
	Иначе
		Элементы.ФормаСтартИЗакрыть.Видимость = Истина;
		Элементы.ФормаЗаписатьИЗакрыть.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ФормаЗаписатьИЗакрыть.КнопкаПоУмолчанию = 
		Элементы.ФормаЗаписатьИЗакрыть.Видимость;
		
	Элементы.ФормаСтартИЗакрыть.КнопкаПоУмолчанию = 
		Элементы.ФормаСтартИЗакрыть.Видимость;
	
	// Получение права на изменение процесса
	ПравоНаИзменениеБизнесПроцесса = Ложь;
	Если НЕ Объект.Ссылка.Пустая() Тогда
		ПравоНаИзменениеБизнесПроцесса = 
			ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(Объект.Ссылка).Изменение;
	КонецЕсли;
	
	// Доступность команд Стартов и закрыть/Записать и закрыть
	Если Не ПравоНаИзменениеБизнесПроцесса
		И ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Элементы.ФормаСтартИЗакрыть.Доступность = Ложь;
		Элементы.ФормаЗаписатьИЗакрыть.Доступность = Ложь;
	КонецЕсли;
	
	// Видимость команды Остановить
	Элементы.ФормаОстановить.Видимость = Объект.Стартован
		И ЗначениеЗаполнено(Объект.Ссылка)
		И НЕ Объект.Завершен
		И НЕ ЗначениеЗаполнено(Объект.ВедущаяЗадача)
		И ПравоНаИзменениеБизнесПроцесса
		И Объект.Состояние <> Перечисления.СостоянияБизнесПроцессов.Прерван
		И Объект.Состояние <> Перечисления.СостоянияБизнесПроцессов.Остановлен;
		
	// Видимость команды Продолжить
	Элементы.ФормаПродолжитьБизнесПроцесс.Видимость = Объект.Стартован
		И ЗначениеЗаполнено(Объект.Ссылка)
		И НЕ Объект.Завершен
		И НЕ ЗначениеЗаполнено(Объект.ВедущаяЗадача)
		И ПравоНаИзменениеБизнесПроцесса
		И Объект.Состояние <> Перечисления.СостоянияБизнесПроцессов.Прерван
		И Объект.Состояние = Перечисления.СостоянияБизнесПроцессов.Остановлен;
	
	// Видимость команды Прервать
	Элементы.ФормаПрервать.Видимость = Объект.Стартован
		И ЗначениеЗаполнено(Объект.Ссылка)
		И НЕ Объект.Завершен
		И НЕ ЗначениеЗаполнено(Объект.ВедущаяЗадача)
		И ПравоНаИзменениеБизнесПроцесса
		И Объект.Состояние <> Перечисления.СостоянияБизнесПроцессов.Прерван;
	
КонецПроцедуры

&НаСервере
Функция ЭлементыДляСохранения()
	
	СохраняемыеЭлементы = Новый Структура("ИнициаторПроцесса", Объект.ИнициаторПроцесса);
	
	Возврат СохранениеВводимыхЗначений.СформироватьТаблицуСохраняемыхЭлементов(СохраняемыеЭлементы);
	
КонецФункции

&НаСервере
Функция ПредставлениеРезультата() Экспорт
	
	Если Объект.ВидВопроса = Перечисления.ВидыВопросовВыполненияЗадач.Иное Тогда
		ПредставлениеРезультата = НСтр("ru = 'Вопрос закрыт %1'");
	Иначе
		ПредставлениеРезультата = НСтр("ru = 'Рассмотрение запроса завершено %1'");
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ПредставлениеРезультата, Формат(Объект.ДатаЗавершения, "ДФ='dd.MM.yyyy HH:mm'"));
	
КонецФункции

&НаСервереБезКонтекста
Функция ДоступнаУстановкаНовогоСрока(ЗаявкаНаПереносСрока)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДоступнаУстановкаНовогоСрока = Истина;
	
	Если ЗначениеЗаполнено(ЗаявкаНаПереносСрока) Тогда
	
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЗадачаИсполнителя.Ссылка
			|ИЗ
			|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
			|ГДЕ
			|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
			|	И ЗадачаИсполнителя.ТочкаМаршрута = &ТочкаМаршрута
			|	И ЗадачаИсполнителя.Выполнена = ЛОЖЬ";
		Запрос.УстановитьПараметр("БизнесПроцесс", ЗаявкаНаПереносСрока);
		Запрос.УстановитьПараметр("ТочкаМаршрута", 
			БизнесПроцессы.РешениеВопросовВыполненияЗадач.ТочкиМаршрута.РассмотрениеИнициатором);
			
		ДоступнаУстановкаНовогоСрока = Не Запрос.Выполнить().Пустой();
		
	КонецЕсли;
		
	Возврат ДоступнаУстановкаНовогоСрока;
	
КонецФункции

&НаСервереБезКонтекста
Функция СтарыйСрокИсполненияПредметаРассмотрения(ПредметРассмотрения, ЗаявкаНаПереносСрока)
	
	СтарыйСрок = Неопределено;
	
	Если ЗначениеЗаполнено(ЗаявкаНаПереносСрока) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПереносыСроковВыполненияПроцессовИЗадач.СтарыйСрок
			|ИЗ
			|	РегистрСведений.ПереносыСроковВыполненияПроцессовИЗадач КАК ПереносыСроковВыполненияПроцессовИЗадач
			|ГДЕ
			|	ПереносыСроковВыполненияПроцессовИЗадач.Предмет = &ПредметРассмотрения
			|	И ПереносыСроковВыполненияПроцессовИЗадач.БизнесПроцессПереноса = &ЗаявкаНаПереносСрока";
		Запрос.УстановитьПараметр("ПредметРассмотрения", ПредметРассмотрения);
		Запрос.УстановитьПараметр("ЗаявкаНаПереносСрока", ЗаявкаНаПереносСрока);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СтарыйСрок = Выборка.СтарыйСрок;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтарыйСрок) Тогда
		ДанныеПредметаРассмотрения = РаботаСВопросами.ДанныеПредметаРассмотрения(ПредметРассмотрения);
		СтарыйСрок = ДанныеПредметаРассмотрения.Срок;
	КонецЕсли;
	
	Возврат СтарыйСрок;
	
КонецФункции

&НаКлиенте
Процедура НовыйСрокПриИзменении()
	
	Если ЗначениеЗаполнено(Объект.НовыйСрок) Тогда
		ДлительностьПереноса = ПереносСроковВыполненияЗадачВызовСервера.ПолучитьПодписьДлительностьПереноса(
				Объект.Автор, 
				СтарыйСрок, 
				Объект.НовыйСрок);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтарыйСрок) Тогда
		ДлительностьПереноса = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПосчитатьКоличествоСуществующихВопросов()
	
	КоличествоВопросов = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РешениеВопросовВыполненияЗадач.Ссылка) КАК Количество
		|ИЗ
		|	БизнесПроцесс.РешениеВопросовВыполненияЗадач КАК РешениеВопросовВыполненияЗадач
		|ГДЕ
		|	РешениеВопросовВыполненияЗадач.ПредметРассмотрения = &ПредметРассмотрения
		|	И РешениеВопросовВыполненияЗадач.ПометкаУдаления = ЛОЖЬ
		|	И РешениеВопросовВыполненияЗадач.ВидВопроса <> &ВидВопроса";
			
	Запрос.УстановитьПараметр("ПредметРассмотрения", Объект.ПредметРассмотрения);
	Запрос.УстановитьПараметр("ВидВопроса", Перечисления.ВидыВопросовВыполненияЗадач.ПереносСрока);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();

	Если Выборка.Следующий() Тогда
		КоличествоВопросов = Выборка.Количество;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПосчитатьКоличествоСуществующихЗапросовНаПереносСрока()
	
	КоличествоЗапросовНаПереносСрока = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РешениеВопросовВыполненияЗадач.Ссылка) КАК Количество
		|ИЗ
		|	БизнесПроцесс.РешениеВопросовВыполненияЗадач КАК РешениеВопросовВыполненияЗадач
		|ГДЕ
		|	РешениеВопросовВыполненияЗадач.ПредметРассмотрения = &ПредметРассмотрения
		|	И РешениеВопросовВыполненияЗадач.ПометкаУдаления = ЛОЖЬ
		|	И РешениеВопросовВыполненияЗадач.ВидВопроса = &ВидВопроса";
			
	Запрос.УстановитьПараметр("ПредметРассмотрения", Объект.ПредметРассмотрения);
	Запрос.УстановитьПараметр("ВидВопроса", Перечисления.ВидыВопросовВыполненияЗадач.ПереносСрока);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();

	Если Выборка.Следующий() Тогда
		КоличествоЗапросовНаПереносСрока = Выборка.Количество;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьЗанятыеНаРедактированиеФайлы(ВопросСсылка)
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Файлы.Редактирует КАК Редактирует
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.ВладелецФайла = &Ссылка
		|	И Файлы.Редактирует <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
		|	И Файлы.Редактирует <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
		|	И Файлы.Редактирует <> НЕОПРЕДЕЛЕНО";
	Запрос.УстановитьПараметр("Ссылка", ВопросСсылка);
	РезультатЗапроса = Запрос.Выполнить();
	Возврат НЕ РезультатЗапроса.Пустой();
	
КонецФункции

&НаКлиенте
Процедура УстановитьФлаги(Флаг)
	
	Результат = РаботаСФлагамиОбъектовКлиент.УстановитьФлагиЗадачам(Элементы.Задачи.ВыделенныеСтроки, Флаг);
	
КонецПроцедуры

#Область СлужебныеПроцедурыИФункции_МобильныйКлиент

&НаСервере
Процедура МК_НастроитьЭлементыФормы()
	
	// Общее.
	СворачиваниеЭлементовПоВажности = СворачиваниеЭлементовФормыПоВажности.НеИспользовать;
	ВертикальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Половинный;
	
	Элементы.ГруппаСостояниеПроцесса.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	Элементы.ГруппаСостояниеПроцесса.ЦветФона = ЦветаСтиля.МК_ЦветФонаГруппы;
	
	Элементы.ДекорацияСостояния.ЦветРамки = ЦветаСтиля.МК_ЦветФонаГруппы;
	Элементы.ДекорацияОписание.ЦветРамки = ЦветаСтиля.МК_ЦветФонаГруппы;
	
	Элементы.МК_НижнийБлок.Видимость = Истина;
	
	Если Элементы.ФормаСтартИЗакрыть.Видимость Тогда
		Элементы.Переместить(Элементы.ФормаСтартИЗакрыть, Элементы.МК_НижнийБлок);
		МК.ОформитьАкцентнуюКнопку(Элементы.ФормаСтартИЗакрыть);
	КонецЕсли;
	
	Если Элементы.ФормаЗаписатьИЗакрыть.Видимость Тогда
		Элементы.Переместить(Элементы.ФормаЗаписатьИЗакрыть, Элементы.МК_НижнийБлок);
		МК.ОформитьАкцентнуюКнопку(Элементы.ФормаЗаписатьИЗакрыть);
	КонецЕсли;
	
	// Страницы.
	Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	
	// Команды переключения страниц.
	Элементы.МК_ЗаголовокСтраниц.Видимость = Истина;
	МК.ОформитьКнопкуФильтра(Элементы.МК_КнопкаСтраницаВопрос, Истина);
	МК.ОформитьКнопкуФильтра(Элементы.МК_КнопкаСтраницаПереносСрока, Истина);
	МК.ОформитьКнопкуФильтра(Элементы.МК_КнопкаСтраницаДругиеВопросы, Истина);
	МК.ОформитьКнопкуФильтра(Элементы.МК_КнопкаСтраницаДополнительно, Истина);
	МК.ОформитьКнопкуФильтра(Элементы.МК_КнопкаСтраницаЗадачи, Истина);
		
	Элементы.МК_КнопкаСтраницаВопрос.Видимость = Элементы.ГруппаГлавное.Видимость;
	Элементы.МК_КнопкаСтраницаДополнительно.Видимость = Элементы.ГруппаИнфо.Видимость;
	Элементы.МК_КнопкаСтраницаПереносСрока.Видимость = КоличествоЗапросовНаПереносСрока > 0;
	Элементы.МК_КнопкаСтраницаДругиеВопросы.Видимость = КоличествоВопросов > 0;
	Элементы.МК_КнопкаСтраницаЗадачи.Видимость = Элементы.ГруппаЗадачи.Видимость;
	
	Если ЭтоНовый Тогда
		
		Если Элементы.ГруппаДополнительныеРеквизиты.ПодчиненныеЭлементы.Количество() = 0  
			Или Объект.ВидВопроса = Перечисления.ВидыВопросовВыполненияЗадач.ПереносСрока Тогда
			Элементы.МК_ЗаголовокСтраниц.Видимость = Ложь;
		КонецЕсли;
			
	КонецЕсли;
		
	МК_СтраницаВопросНаСервере();
	
	// Страница "Вопрос".
	Элементы.Переместить(Элементы.ГруппаОписаниеИПредметы, Элементы.ГруппаГлавное);
	
	МК.ВыровнятьЭлементФормы(Элементы.ПредметРассмотрения);
	МК.ВыровнятьЭлементФормы(Элементы.Важность);
	МК.ВыровнятьЭлементФормы(Элементы.ИнициаторПроцесса);
	МК.ВыровнятьЭлементФормы(Элементы.ОтветственныйИсполнитель);
	МК.ВыровнятьЭлементФормы(Элементы.ПредметРассмотрения);
	
	Элементы.Описание_БезПредметов.РастягиватьПоВертикали = Истина;
	Элементы.Описание_БезПредметов.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
	Элементы.Описание_БезПредметов.ПодсказкаВвода = "";
	
	Элементы.Описание.РастягиватьПоВертикали = Истина;
	Элементы.Описание.Высота = 3;
	Элементы.Описание.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
	Элементы.Описание.ПодсказкаВвода = "";
	
	Элементы.ДекорацияПодписьСрока.Видимость = Ложь;
	Элементы.СрокИсполненияДата.Заголовок = НСтр("ru = 'Срок ответа (желаемый)'");
	Элементы.СрокИсполненияДата.Ширина = 0;
	Элементы.СрокИсполненияВремя.Ширина = 0;
	
	Элементы.ОписаниеСПредметами.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяЕслиВозможно;
	Элементы.ГруппаСрокиАвторВажность.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	// Файлы.
	Элементы.ГруппаФайлы.Видимость = Ложь;;
	Элементы.МК_ГруппаФайлы.Видимость = Истина;
	Элементы.Переместить(Элементы.Файлы, Элементы.МК_ГруппаФайлы);
	Элементы.Файлы.РастягиватьПоВертикали = Ложь;
	МК.ОформитьКнопкуФильтра(Элементы.МК_ДобавитьФайл);
	МК_ПоказатьСкрытьФайлыНаСервере();
	
	// Страница "Дополнительно".
	МК.ВыровнятьЭлементФормы(Элементы.Завершено);
	МК.ВыровнятьЭлементФормы(Элементы.Начато);
	
	Элементы.ГруппаДополнительно.ЦветФона = ЦветаСтиля.МК_ЦветФонаГруппы;
	Элементы.ГруппаИнфо.ЦветФона = ЦветаСтиля.МК_ЦветФонаГруппы;
	Элементы.ГруппаДополнительныеРеквизиты.ЦветФона = ЦветаСтиля.МК_ЦветФонаГруппы;
	
	// Страница "Задачи".
	Элементы.Задачи.ИспользованиеТекущейСтроки = ИспользованиеТекущейСтрокиТаблицы.ОтображениеВыделенияИВыбор;
	Элементы.Задачи.Шапка = Ложь;
	
	Элементы.МК_ЗадачиГруппаКолонок.Видимость = Истина;
	
	Элементы.Переместить(Элементы.ЗадачиВажность, Элементы.МК_ЗадачиПерваяКолонка);
	Элементы.Переместить(Элементы.ЗадачиРезультатЗавершения, Элементы.МК_ЗадачиПерваяКолонка);
	Элементы.Переместить(Элементы.ЗадачиНомерФлага, Элементы.МК_ЗадачиПерваяКолонка);
	
	Элементы.Переместить(Элементы.ЗадачиНаименование, Элементы.МК_ЗадачиВтораяКолонка);
	Элементы.Переместить(Элементы.ГруппаИсполнитель, Элементы.МК_ЗадачиВтораяКолонка);
	
	Элементы.Переместить(Элементы.ЗадачиДатаИсполнения, Элементы.МК_ЗадачиТретьяКолонка);
	Элементы.Переместить(Элементы.ЗадачиСрокИсполнения, Элементы.МК_ЗадачиТретьяКолонка);
	
	Элементы.ЗадачиРезультатЗавершения.КартинкаЗначений = БиблиотекаКартинок.МК_КоллекцияСостоянияПроцессовИЗадач;
	Элементы.ЗадачиВажность.КартинкаЗначений = БиблиотекаКартинок.МК_КоллекцияСтрокВариантыВажности;
	Элементы.ЗадачиНомерФлага.КартинкаЗначений = БиблиотекаКартинок.МК_КоллекцияФлаги;
	
	МК.НастроитьКолонкуСКартинкойДляСписка(Элементы.ЗадачиРезультатЗавершения);
	МК.НастроитьКолонкуСКартинкойДляСписка(Элементы.ЗадачиВажность);
	МК.НастроитьКолонкуСКартинкойДляСписка(Элементы.ЗадачиНомерФлага);
	
	МК.УстановитьПолюУсловноеОформлениеСкрытНеВидим(Задачи, "Важность", 1);
	МК.УстановитьПолюУсловноеОформлениеСкрытНеВидим(Задачи, "РезультатЗавершения", 0);
	МК.УстановитьПолюУсловноеОформлениеСкрытНеВидим(Задачи, "Флаг", -1);

	Элементы.ЗадачиНаименование.Шрифт = ШрифтыСтиля.МелкийШрифтТекста;
	
	Элементы.ЗадачиИсполнитель.Ширина = 1;
	Элементы.ЗадачиИсполнитель.Высота = 1;
	Элементы.ЗадачиИсполнитель.Шрифт = ШрифтыСтиля.МК_ШрифтАвтораИсполнителя;
	Элементы.ЗадачиИсполнитель.ЦветТекста = ЦветаСтиля.МК_ЦветАвтораИсполнителя;
	
	Элементы.ЗадачиДатаИсполнения.Высота = 1;
	Элементы.ЗадачиДатаИсполнения.Ширина = 5;
	Элементы.ЗадачиДатаИсполнения.Формат = МК.ПолучитьФорматДатыДляЗадач();
	МК.НастроитьКолонкуСДатойДляСписка(Элементы.ЗадачиДатаИсполнения);
	
	Элементы.ЗадачиСрокИсполнения.Высота = 3;
	Элементы.ЗадачиСрокИсполнения.Ширина = 5;
	Элементы.ЗадачиСрокИсполнения.Формат = МК.ПолучитьФорматСрокаДляЗадач();
	МК.НастроитьКолонкуСДатойДляСписка(Элементы.ЗадачиСрокИсполнения);
	
	// Страница "Перенос сроков".
	Элементы.ПереносыСроков.ИспользованиеТекущейСтроки = ИспользованиеТекущейСтрокиТаблицы.ОтображениеВыделенияИВыбор;
	Элементы.ПереносыСроков.Шапка = Ложь;
	
	Элементы.МК_ПереносыСроковГруппаКолонок.Видимость = Истина;
	
	Элементы.Переместить(Элементы.ПереносыСроковСостояниеКартинка, Элементы.МК_ПереносыСроковПерваяКолонка);
	Элементы.Переместить(Элементы.ПереносыСроковОписание, Элементы.МК_ПереносыСроковВтораяКолонка);
	
	Элементы.Переместить(Элементы.ПереносыСроковНовыйСрок, Элементы.МК_ПереносыСроковТретьяКолонка);
	Элементы.Переместить(Элементы.ПереносыСроковДата, Элементы.МК_ПереносыСроковТретьяКолонка);
	
	Элементы.ПереносыСроковСостояниеКартинка.КартинкаЗначений = БиблиотекаКартинок.МК_КоллекцияСостоянияПроцессовИЗадач;
	МК.НастроитьКолонкуСКартинкойДляСписка(Элементы.ПереносыСроковСостояниеКартинка);
	МК.УстановитьПолюУсловноеОформлениеСкрытНеВидим(ПереносыСроков, "СостояниеКартинка", 0);
	
	Элементы.ПереносыСроковОписание.Шрифт = ШрифтыСтиля.МелкийШрифтТекста;
	Элементы.ПереносыСроковОписание.РастягиватьПоГоризонтали = Истина;
	
	Элементы.ПереносыСроковДата.Высота = 1;
	Элементы.ПереносыСроковДата.Ширина = 5;
	Элементы.ПереносыСроковДата.Формат = МК.ПолучитьФорматДатыДляЗадач();
	МК.НастроитьКолонкуСДатойДляСписка(Элементы.ПереносыСроковДата);
	
	Элементы.ПереносыСроковНовыйСрок.Высота = 3;
	Элементы.ПереносыСроковНовыйСрок.Ширина = 5;
	Элементы.ПереносыСроковНовыйСрок.Формат = МК.ПолучитьФорматСрокаДляЗадач();
	МК.НастроитьКолонкуСДатойДляСписка(Элементы.ПереносыСроковНовыйСрок);
	
	// Страница "Другие вопросы".
	Элементы.ВопросыПоЗадаче.ИспользованиеТекущейСтроки = ИспользованиеТекущейСтрокиТаблицы.ОтображениеВыделенияИВыбор;
	Элементы.ВопросыПоЗадаче.Шапка = Ложь;
	Элементы.ВопросыПоЗадачеАвтор.Видимость = Ложь;
	
	Элементы.МК_ВопросыПоЗадачеГруппаКолонок.Видимость = Истина;
	
	Элементы.Переместить(Элементы.ВопросыПоЗадачеСостояниеКартинка, Элементы.МК_ВопросыПоЗадачеПерваяКолонка);
	
	Элементы.Переместить(Элементы.ВопросыПоЗадачеОписание, Элементы.МК_ВопросыПоЗадачеВтораяКолонка);
	Элементы.Переместить(Элементы.ВопросыПоЗадачеИнициаторПроцесса, Элементы.МК_ВопросыПоЗадачеВтораяКолонка);
	
	Элементы.Переместить(Элементы.ВопросыПоЗадачеДата, Элементы.МК_ВопросыПоЗадачеТретьяКолонка);
	
	Элементы.ВопросыПоЗадачеСостояниеКартинка.КартинкаЗначений = БиблиотекаКартинок.МК_КоллекцияСостоянияПроцессовИЗадач;
	МК.НастроитьКолонкуСКартинкойДляСписка(Элементы.ВопросыПоЗадачеСостояниеКартинка);
	МК.УстановитьПолюУсловноеОформлениеСкрытНеВидим(ВопросыПоЗадаче, "СостояниеКартинка", 0);
	
	Элементы.ВопросыПоЗадачеОписание.Шрифт = ШрифтыСтиля.МелкийШрифтТекста;
	Элементы.ВопросыПоЗадачеОписание.РастягиватьПоГоризонтали = Истина;
	
	Элементы.ВопросыПоЗадачеИнициаторПроцесса.Ширина = 1;
	Элементы.ВопросыПоЗадачеИнициаторПроцесса.Высота = 1;
	Элементы.ВопросыПоЗадачеИнициаторПроцесса.РастягиватьПоГоризонтали = Истина;
	Элементы.ВопросыПоЗадачеИнициаторПроцесса.РастягиватьПоВертикали = Ложь;
	Элементы.ВопросыПоЗадачеИнициаторПроцесса.Шрифт = ШрифтыСтиля.МелкийШрифтТекста;
	Элементы.ВопросыПоЗадачеИнициаторПроцесса.ЦветТекста = ЦветаСтиля.МК_ЦветАвтораИсполнителя;
	
	Элементы.ВопросыПоЗадачеДата.Высота = 1;
	Элементы.ВопросыПоЗадачеДата.Ширина = 5;
	Элементы.ВопросыПоЗадачеДата.Формат = МК.ПолучитьФорматДатыДляЗадач();
	МК.НастроитьКолонкуСДатойДляСписка(Элементы.ВопросыПоЗадачеДата);

КонецПроцедуры

&НаСервере
Процедура МК_СброситьОформлениеПереключателейСтраницПредпросмотра()
	
	МК.ОформитьДополнительнуюКнопкуПоСостоянию(Элементы.МК_КнопкаСтраницаВопрос, Ложь);
	МК.ОформитьДополнительнуюКнопкуПоСостоянию(Элементы.МК_КнопкаСтраницаПереносСрока, Ложь);
	МК.ОформитьДополнительнуюКнопкуПоСостоянию(Элементы.МК_КнопкаСтраницаДругиеВопросы, Ложь);
	МК.ОформитьДополнительнуюКнопкуПоСостоянию(Элементы.МК_КнопкаСтраницаДополнительно, Ложь);
	МК.ОформитьДополнительнуюКнопкуПоСостоянию(Элементы.МК_КнопкаСтраницаЗадачи, Ложь);

КонецПроцедуры

&НаСервере
Процедура МК_ПоказатьСкрытьФайлыНаСервере()
	
	КоличествоФайлов = КоличествоФайлов(Объект.Ссылка, ОтображатьУдаленныеФайлы);
	
	Если КоличествоФайлов = 0 Тогда
		Элементы.Файлы.Видимость = Ложь;
	КонецЕсли;
	
	МК_ОбновитьЗаголовокФайлов();

	МК.ОформитьКнопкуСворачиваемойГруппы(Элементы.МК_ПоказатьСкрытьФайлы, Элементы.Файлы.Видимость);
	МК.УстановитьНовуюВысотуДополнительнойТаблицы(Элементы.Файлы, КоличествоФайлов);
	
КонецПроцедуры

&НаСервере
Процедура МК_ОбновитьЗаголовокФайлов()
	
	КоличествоФайлов = КоличествоФайлов(Объект.Ссылка, ОтображатьУдаленныеФайлы);
		
	Элементы.МК_ФайлыНадпись.Заголовок = 
		СтрШаблон(
			НСтр("ru = 'Файлы (%1)'"),
			Формат(КоличествоФайлов, "ЧН=0; ЧГ="));
	
КонецПроцедуры

&НаСервере
Процедура МК_СтраницаВопросНаСервере()
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаГлавное;
	МК_СброситьОформлениеПереключателейСтраницПредпросмотра();
	МК.ОформитьДополнительнуюКнопкуПоСостоянию(Элементы.МК_КнопкаСтраницаВопрос, Истина);
	
КонецПроцедуры

&НаСервере
Процедура МК_СтраницаПереносСрокаНаСервере()
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаПереносыСроков;
	МК_СброситьОформлениеПереключателейСтраницПредпросмотра();
	МК.ОформитьДополнительнуюКнопкуПоСостоянию(Элементы.МК_КнопкаСтраницаПереносСрока, Истина);
	
КонецПроцедуры

&НаСервере
Процедура МК_СтраницаДругиеВопросыНаСервере()
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаВопросыПоЗадаче;
	МК_СброситьОформлениеПереключателейСтраницПредпросмотра();
	МК.ОформитьДополнительнуюКнопкуПоСостоянию(Элементы.МК_КнопкаСтраницаДругиеВопросы, Истина);
	
КонецПроцедуры

&НаСервере
Процедура МК_СтраницаДополнительноНаСервере()
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаДополнительно;
	МК_СброситьОформлениеПереключателейСтраницПредпросмотра();
	МК.ОформитьДополнительнуюКнопкуПоСостоянию(Элементы.МК_КнопкаСтраницаДополнительно, Истина);
	
КонецПроцедуры

&НаСервере
Процедура МК_СтраницаЗадачиНаСервере()
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаЗадачи;
	МК_СброситьОформлениеПереключателейСтраницПредпросмотра();
	МК.ОформитьДополнительнуюКнопкуПоСостоянию(Элементы.МК_КнопкаСтраницаЗадачи, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_Файлы

&НаКлиенте
Процедура ОбновитьДоступностьКомандСпискаФайлов(Результат = Неопределено, ПараметрыВыполнения = Неопределено) Экспорт
	
	УстановитьДоступностьКоманд(Элементы.Файлы.ТекущиеДанные);
	
КонецПроцедуры	

&НаКлиенте
Процедура УстановитьДоступностьКоманды(Команда, Доступность)
	
	Команда.Доступность = Доступность;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКоманд(ТекущиеДанные)
	
	Если ТекущиеДанные = Неопределено Тогда 
		
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюОткрытьФайл, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюРедактировать, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюЗакончитьРедактирование, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюЗанять, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюСохранитьИзменения, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюСохранитьКак, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюОсвободить, Ложь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюОбновитьИзФайлаНаДиске, Ложь);	
	Иначе	
		
		РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
		Редактирует = ТекущиеДанные.Редактирует;
		
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюОткрытьФайл, Истина);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюРедактировать, НЕ ТекущиеДанные.ПодписанЭП);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюЗакончитьРедактирование, РедактируетТекущийПользователь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюЗанять, Не ЗначениеЗаполнено(Редактирует));
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюСохранитьИзменения, РедактируетТекущийПользователь);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюСохранитьКак, Истина);
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюОсвободить, ЗначениеЗаполнено(Редактирует));
		УстановитьДоступностьКоманды(Элементы.ФайлыКонтекстноеМенюОбновитьИзФайлаНаДиске, Истина);		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтображатьУдаленныеФайлыСервер()
	
	РаботаСБизнесПроцессамиВызовСервера.ФормаБизнесПроцессаОтображатьУдаленныеФайлы(ЭтаФорма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КоличествоФайлов(ВладелецФайла, ОтображатьУдаленные)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Файлы.Ссылка
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.ВладелецФайла = &ВладелецФайла
		|	И (&ОтображатьУдаленные
		|			ИЛИ НЕ Файлы.ПометкаУдаления)";
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
	Запрос.УстановитьПараметр("ОтображатьУдаленные", ОтображатьУдаленные);
	
	Возврат Запрос.Выполнить().Выбрать().Количество();
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьВидимостьТаблицыФайлов(Форма)
	
	КоличествоФайлов = КоличествоФайлов(Форма.Объект.Ссылка, Форма.ОтображатьУдаленныеФайлы);
	
	ПредыдущийТекущийЭлемент = Форма.ТекущийЭлемент;
	
	Если КоличествоФайлов > 0 Тогда
		Форма.Элементы.ГруппаОписаниеИПредметы.ТекущаяСтраница = Форма.Элементы.ОписаниеСПредметами;
		Форма.ТекущийЭлемент = Форма.Элементы.Описание;
	Иначе
		Форма.Элементы.ГруппаОписаниеИПредметы.ТекущаяСтраница = Форма.Элементы.ОписаниеБезПредметов;
		Форма.ТекущийЭлемент = Форма.Элементы.Файлы;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ПодсистемаСвойств

&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтаФорма,
	РеквизитФормыВЗначение("Объект"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
      УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
 
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
      УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#КонецОбласти
