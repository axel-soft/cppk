#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ПлановыеТрудозатратыИсполнителяЗадачи(БизнесПроцесс, Задача, ТочкаМаршрута) Экспорт
	
	Трудозатраты = 0;
	
	Возврат Трудозатраты;
	
КонецФункции

Функция ПредставлениеРезультатаЗадачи(ЗадачаОбъект) Экспорт
	
	Представление = "";
	
	РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ЗадачаОбъект.БизнесПроцесс, "ВидВопроса, ОтправитьНаУточнение");
		
	ВидВопроса = РеквизитыПроцесса.ВидВопроса;
	ОтправитьНаУточнение = РеквизитыПроцесса.ОтправитьНаУточнение;
		
	Если ЗадачаОбъект.ТочкаМаршрута = ТочкиМаршрута.РассмотрениеИнициатором Тогда
		Если ВидВопроса = Перечисления.ВидыВопросовВыполненияЗадач.ПереносСрока Тогда
			РезультатВыполненияЗадачи = РегистрыСведений.РезультатыВыполненияПроцессовИЗадач.
				РезультатВыполненияПоОбъекту(ЗадачаОбъект.Ссылка);
				
			Если РезультатВыполненияЗадачи = 
				Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно Тогда
				
				Представление = НСтр("ru = 'Срок исполнения перенесен.'");
			ИначеЕсли РезультатВыполненияЗадачи = 
				Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно Тогда
				
				Представление = НСтр("ru = 'Отказано в переносе срока.'");
			КонецЕсли;
		Иначе
			Представление = НСтр("ru = 'Вопрос рассмотрен.'");
		КонецЕсли;
	ИначеЕсли ЗадачаОбъект.ТочкаМаршрута = ТочкиМаршрута.ОзнакомлениеСРезультатомРассмотрения Тогда
		Если ОтправитьНаУточнение Тогда
			Представление = НСТР("ru = 'Отправлено на уточнение.'");
		Иначе
			Представление = НСТР("ru = 'Выполнено.'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения. Для изменения.
//       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
КонецПроцедуры

// Возвращает признак того что процесс использует условия выполнения задач.
//
// Параметры:
//  ТочкаМаршрута - ТочкаМаршрутаСсылка - Точка маршрута.
//  Параметры - Структура - Параметры.
// 
// Возвращаемое значение:
//  Булево - Использует условия выполнения задач.
//
Функция ИспользуетУсловияЗапретаВыполненияЗадач(ТочкаМаршрута = Неопределено, Параметры = Неопределено) Экспорт
	
	Если Параметры = Неопределено Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	
	ИспользуетУсловияЗапретаВыполненияЗадач = Ложь;
	
	Возврат ИспользуетУсловияЗапретаВыполненияЗадач;
	
КонецФункции

// Формирует комментарий автоматического выполнения задачи.
//
// Параметры:
//  ТочкаМаршрута - ТочкаМаршрута - Точка маршрута.
//  ВариантВыполнения - Булево - Вариант выполнения.
//
// Возвращаемое значение:
//  Строка - Комментарий автоматического выполнения задачи.
//
Функция КомментарийВыполненаАвтоматически(ТочкаМаршрута, ВариантВыполнения) Экспорт
	
	Комментарий = "";
	
	Возврат Комментарий;
	
КонецФункции

// Заполняет html обзор задачи данными процесса.
//
// Параметры:
//   HTMLТекст - Строка
//   Процесс - БизнесПроцессСсылка
//   ТочкаМаршрута - ТочкаМаршрутаБизнесПроцессаСсылка
//   ЗадачаПроцесса - ЗадачаСсылка.ЗадачаИсполнителя
//   ВключатьНавигационныеСсылки - Булево
//   КодЯзыка - Строка
//
Процедура ЗаполнитьОбзорЗадачи(HTMLТекст, Процесс, ТочкаМаршрута, ЗадачаПроцесса, ВключатьНавигационныеСсылки, КодЯзыка) Экспорт
	
	РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Процесс, "ВидВопроса, ПредметРассмотрения, НовыйСрок");
	
	HTMLТекст = HTMLТекст + "<br>";
	
	// Предмет рассмотрения.
	Если ЗначениеЗаполнено(РеквизитыПроцесса.ПредметРассмотрения) Тогда
		
		ОбзорОбъектовКлиентСервер.ДобавитьРеквизит(
			HTMLТекст,
			Метаданные.БизнесПроцессы.РешениеВопросовВыполненияЗадач.Реквизиты.ПредметРассмотрения.Синоним + ":",
			РеквизитыПроцесса.ПредметРассмотрения);
		
	КонецЕсли;
	
	// Старый и новый срок.
	Если РеквизитыПроцесса.ВидВопроса = Перечисления.ВидыВопросовВыполненияЗадач.ПереносСрока
		И ТочкаМаршрута = ТочкиМаршрута.РассмотрениеИнициатором Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		ДанныеПредметаРассмотрения = РаботаСВопросами.ДанныеПредметаРассмотрения(РеквизитыПроцесса.ПредметРассмотрения);
		УстановитьПривилегированныйРежим(Ложь);
		
		ОбзорОбъектовКлиентСервер.ДобавитьРеквизит(
			HTMLТекст,
			НСтр("ru = 'Старый срок:'", КодЯзыка),
			ДанныеПредметаРассмотрения.Срок);
		
		ОбзорОбъектовКлиентСервер.ДобавитьРеквизит(
			HTMLТекст,
			Метаданные.БизнесПроцессы.РешениеВопросовВыполненияЗадач.Реквизиты.НовыйСрок.Синоним + ":",
			РеквизитыПроцесса.НовыйСрок);
		
	КонецЕсли;
	
	// История предмета рассмотрения.
	Если ЗначениеЗаполнено(РеквизитыПроцесса.ПредметРассмотрения) Тогда
		
		Если ТипЗнч(РеквизитыПроцесса.ПредметРассмотрения) = Тип("ДокументСсылка.ДействиеЗадачи") Тогда
			
			ДействиеЗадачи = РеквизитыПроцесса.ПредметРассмотрения;
			
		ИначеЕсли ТипЗнч(РеквизитыПроцесса.ПредметРассмотрения) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
			
			ДействиеЗадачи = Документы.ДействиеЗадачи.НайтиПоИсточнику(РеквизитыПроцесса.ПредметРассмотрения);
			
		Иначе
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Неизвестный тип предмета рассмотрения %1 (%2).'"),
				РеквизитыПроцесса.ПредметРассмотрения,
				ТипЗнч(РеквизитыПроцесса.ПредметРассмотрения));
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДействиеЗадачи) Тогда
			
			Задача = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДействиеЗадачи, "Задача");
			ИсторияВыполнения = РегистрыСведений.ИсторияЗадач.ИсторияВыполненияHTML(Задача, КодЯзыка);
			
			ИсторияВыполнения = СтрЗаменить(
				ИсторияВыполнения,
				"<body>",
				СтрШаблон("<body><br><b>%1:</b>", НСтр("ru = 'История предмета рассмотрения'", КодЯзыка)));
			
			РаботаС_HTML.ДобавитьТекстHTML(HTMLТекст, ИсторияВыполнения);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаголовокИОписаниеЗадачи(БизнесПроцесс, ЗадачаОзнакомления = Ложь) Экспорт
	
	РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(БизнесПроцесс,
		"ВидВопроса, ПредметРассмотрения, Описание");
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Заголовок", "");
	СтруктураВозврата.Вставить("Описание", "");
	
	ПолныйТекстСЗаголовком = "";
	Если ЗадачаОзнакомления Тогда
		
		Если РеквизитыПроцесса.ВидВопроса = Перечисления.ВидыВопросовВыполненияЗадач.ПереносСрока Тогда
			ПолныйТекстСЗаголовком = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Ознакомиться: перенос срока по задаче ""%1""'"),
				Строка(РеквизитыПроцесса.ПредметРассмотрения))
				+ Символы.ПС + СокрЛП(РеквизитыПроцесса.Описание);
		Иначе
			ПолныйТекстСЗаголовком = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Ознакомиться с ответом на вопрос: %1'"),
				СокрЛП(РеквизитыПроцесса.Описание));
		КонецЕсли;
		
	Иначе
		
		Если РеквизитыПроцесса.ВидВопроса = Перечисления.ВидыВопросовВыполненияЗадач.ПереносСрока Тогда
			ПолныйТекстСЗаголовком = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Согласовать перенос срока по задаче: %1'"),
				Строка(РеквизитыПроцесса.ПредметРассмотрения))
				+ Символы.ПС + СокрЛП(РеквизитыПроцесса.Описание);
		Иначе
			ПолныйТекстСЗаголовком = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Рассмотреть вопрос: %1'"),
				СокрЛП(РеквизитыПроцесса.Описание));
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокиТекста = СтрРазделить(ПолныйТекстСЗаголовком, Символы.ПС, Истина);
	
	Если СтрокиТекста.Количество() = 0 Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	ПерваяСтрока = СтрокиТекста[0];
	СтрокиОписания = Новый Массив;
	
	Если СтрДлина(ПерваяСтрока) > 150 Тогда
		СтруктураВозврата.Заголовок = Лев(ПерваяСтрока, 146) + " ...";
		СтрокиОписания.Добавить(ПерваяСтрока);
	Иначе
		СтруктураВозврата.Заголовок = ПерваяСтрока;
	КонецЕсли;
	
	Для Индекс = 1 По СтрокиТекста.ВГраница() Цикл
		Если СтрокиОписания.Количество() = 0 И ПустаяСтрока(СтрокиТекста[Индекс]) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиОписания.Добавить(СтрокиТекста[Индекс]);
	КонецЦикла;
	
	СтруктураВозврата.Описание = СтрСоединить(СтрокиОписания, Символы.ПС);
	
	Возврат СтруктураВозврата;
	
КонецФункции
// Находит вопросы по предмету рассмотрешния.
// 
// Параметры:
//  ПредметыРассмотрения - Массив из ЗадачаСсылка.ЗадачаИсполнителя, ДокументСсылка.ДействиеЗадачи.
// 
// Возвращаемое значение:
//  Массив из БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач.
//
Функция НайтиПоПредметуРассмотрения(ПредметыРассмотрения) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РешениеВопросовВыполненияЗадач.Ссылка КАК Вопрос
		|ИЗ
		|	БизнесПроцесс.РешениеВопросовВыполненияЗадач КАК РешениеВопросовВыполненияЗадач
		|ГДЕ
		|	РешениеВопросовВыполненияЗадач.ПредметРассмотрения В (&Задача)");
	
	Запрос.УстановитьПараметр("Задача", ПредметыРассмотрения);
	
	Вопросы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Вопрос");
	
	Возврат Вопросы;
	
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейс_РабочиеГруппы

Функция ЕстьМетодДобавитьУчастниковВТаблицу() Экспорт
	
	Возврат Истина;
	
КонецФункции

Процедура ДобавитьУчастниковВТаблицу(ТаблицаНабора, БизнесПроцесс) Экспорт
	
	РаботаСБизнесПроцессами.ДобавитьУчастниковРешенияВопросовВТаблицу(ТаблицаНабора, БизнесПроцесс);
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс_ВыполнениеЗадач

// Обработчик, вызываемый перед выполнением задачи из процедуры
// ВыполнениеЗадачСервер.ВыполнитьЗадачуСПараметрами
//
// Параметры
//   ЗадачаСсылка  - ЗадачаСсылка.ЗадачаИсполнителя
//   БизнесПроцессСсылка - БизнесПроцессСсылка
//   ТочкаМаршрутаСсылка - точка маршрута
//   ПараметрыВыполнения - Структура
//
Процедура ОбработкаПередВыполнениемЗадачи(
	ЗадачаСсылка, БизнесПроцессСсылка, ТочкаМаршрутаБизнесПроцесса, ПараметрыВыполнения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПараметрыВыполнения.Свойство("ИдентификаторБлокировкиПроцесса") Тогда
		ПараметрыВыполнения.Вставить(
			"ИдентификаторБлокировкиПроцесса", Новый УникальныйИдентификатор());
	КонецЕсли;
	
	Если ТочкаМаршрутаБизнесПроцесса = ТочкиМаршрута.ОзнакомлениеСРезультатомРассмотрения
		И ПараметрыВыполнения.Свойство("ОтправитьНаУточнение") Тогда
		
		ЗаблокироватьДанныеДляРедактирования(
			БизнесПроцессСсылка,, ПараметрыВыполнения.ИдентификаторБлокировкиПроцесса);
		
		ПроцессОбъект = БизнесПроцессСсылка.ПолучитьОбъект();
		ПроцессОбъект.ОтправитьНаУточнение = ПараметрыВыполнения.ОтправитьНаУточнение;
		
		РаботаСБизнесПроцессами.ЗаписатьПроцесс(ПроцессОбъект, "ПростаяЗапись");
		
		РазблокироватьДанныеДляРедактирования(
			БизнесПроцессСсылка, ПараметрыВыполнения.ИдентификаторБлокировкиПроцесса);
		
	ИначеЕсли ТочкаМаршрутаБизнесПроцесса = ТочкиМаршрута.РассмотрениеИнициатором
		И ПараметрыВыполнения.Свойство("ПереносСрока")
		И ПараметрыВыполнения.ПереносСрока Тогда
		
		ЗаблокироватьДанныеДляРедактирования(
			БизнесПроцессСсылка,, ПараметрыВыполнения.ИдентификаторБлокировкиПроцесса);
		
		ПроцессОбъект = БизнесПроцессСсылка.ПолучитьОбъект();
		ПроцессОбъект.НовыйСрок = ПараметрыВыполнения.НовыйСрок;
		
		РаботаСБизнесПроцессами.ЗаписатьПроцесс(ПроцессОбъект, "ПростаяЗапись");
		
		КоличествоПереносовПоЗадаче = ПереносСроковВыполненияЗадачВызовСервера.КоличествоПереносовСрокаПоЗадачеИЗаявкеНаПеренос(
			ПроцессОбъект.ПредметРассмотрения, БизнесПроцессСсылка);
			
		Если КоличествоПереносовПоЗадаче = 0 Тогда
			
			Если ПараметрыВыполнения.Свойство("ФактическийИсполнительЗадачи") Тогда
				ПеренесСрок = ПараметрыВыполнения.ФактическийИсполнительЗадачи;
			Иначе
				ПеренесСрок = Неопределено;
			КонецЕсли;
			
			ПереносСроковВыполненияЗадач.ПеренестиСрокЗадачиПоЗаявке(
				ПараметрыВыполнения.НовыйСрок, ПроцессОбъект.Описание, БизнесПроцессСсылка,
				ПеренесСрок);
			
		КонецЕсли;
		
		РазблокироватьДанныеДляРедактирования(
			БизнесПроцессСсылка, ПараметрыВыполнения.ИдентификаторБлокировкиПроцесса);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик, вызываемый после выполнением задачи из процедуры
// ВыполнениеЗадачСервер.ВыполнитьЗадачуСПараметрами
//
// Параметры
//   ЗадачаСсылка  - ЗадачаСсылка.ЗадачаИсполнителя
//   БизнесПроцессСсылка - БизнесПроцессСсылка
//   ТочкаМаршрутаСсылка - точка маршрута
//   ПараметрыВыполнения - Структура
//
Процедура ОбработкаПослеВыполненияЗадачи(
	ЗадачаСсылка, БизнесПроцессСсылка, ТочкаМаршрутаБизнесПроцесса, ПараметрыВыполнения) Экспорт

КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс_Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт

КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс_СрокиИсполненияПроцессов

// Возвращает даты исполнения участников процесса.
//
// Параметры:
//  Процесс - БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач - ссылка на процесс
//
// Возвращаемое значение:
//  Соответствие
//   * Ключ - Строка, ЗадачаСсылка.ЗадачаИсполнителя - имя реквизита с участником процесса или ссылка на его задачу.
//
Функция ДатыИсполненияУчастников(Процесс) Экспорт
	
	// Функция не предусмотрена для данного вида процессов.
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область СлужебныеЗадачиТочекДействий

// Проверяет является ли переданная задача процесса служебной.
//
// Параметры:
//  Задача - ЗадачаОбъект.ЗадачаИсполнителя,
//           ЗадачаСсылка.ЗадачаИсполнителя,
//           Структура со свойствами Исполнитель, РольИсполнителя, ТочкаМаршрута, Наименование
//
// Возвращаемое значение:
//  Булево
//
Функция ЭтаСлужебнаяЗадачаПроцесса(ЗадачаПроцесса) Экспорт
	
	// Служебных задач не предусмотрено.
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область Предметы

// Возвращает участников для проверки прав на предметы.
//
// Параметры:
//  Процесс - БизнесПроцессОбъект, БизнесПроцессСсылка - процесс
//
// Возвращаемое значение:
//  ТаблицаЗначений
//   * Участник
//   * Изменение
//
Функция УчастникиДляПроверкиПрав(Процесс) Экспорт
	
	ТаблицаУчастников = РаботаСРабочимиГруппами.ПолучитьПустуюТаблицуУчастников();
	
	РаботаСБизнесПроцессами.ДобавитьУчастниковРешенияВопросовВТаблицу(ТаблицаУчастников, Процесс);
	
	Возврат ТаблицаУчастников;
	
КонецФункции

// Возвращает массив доступных типов основных предметов
Функция ТипыОсновныхПредметов() Экспорт
	
	ТипыПредметов = Новый Массив;
	
	ТипыПредметов.Добавить(Тип("СправочникСсылка.ДокументыПредприятия"));  
	ТипыПредметов.Добавить(Тип("СправочникСсылка.Контрагенты")); 
	ТипыПредметов.Добавить(Тип("СправочникСсылка.Мероприятия")); 
	ТипыПредметов.Добавить(Тип("СправочникСсылка.Проекты")); 
	ТипыПредметов.Добавить(Тип("СправочникСсылка.ПроектныеЗадачи"));
	ТипыПредметов.Добавить(Тип("СправочникСсылка.Файлы"));
	
	Возврат ТипыПредметов;
	
КонецФункции

// Возвращает доступные для процесса роли предметов
Функция ПолучитьДоступныеРолиПредметов() Экспорт
	
	РолиПредметов = Новый Массив;
	
	РолиПредметов.Добавить(Перечисления.РолиПредметов.Основной);
	РолиПредметов.Добавить(Перечисления.РолиПредметов.Вспомогательный);
	
	Возврат РолиПредметов;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	Если ВидФормы = "ФормаВыбора" Тогда
		
		СтандартнаяОбработка = Ложь;
		Параметры.Вставить("Заголовок", НСтр("ru = 'Решения вопросов выполнения задач'"));
		Параметры.Вставить("ТипПроцесса", Тип("БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач"));
		ВыбраннаяФорма = Метаданные.ОбщиеФормы.ВыборБизнесПроцесса;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// УправлениеДоступом

Функция ПолучитьПоляДоступа() Экспорт
	
	Возврат "Ссылка";
	
КонецФункции

// Заполняет переданный дескриптор доступа 
Процедура ЗаполнитьОсновнойДескриптор(ОбъектДоступа, ДескрипторДоступа) Экспорт
	
	ДескрипторДоступа.ОбъектДоступа = ОбъектДоступа.Ссылка;
	
КонецПроцедуры

Функция ЕстьМетодЗаполнитьДескрипторыОбъекта() Экспорт
	
	Возврат Истина;
	
КонецФункции

Процедура ЗаполнитьДескрипторыОбъекта(ОбъектДоступа, ТаблицаДескрипторов, ПротоколРасчетаПрав = Неопределено) Экспорт
	
	// Только основной дескриптор, без рабочей группы.
	ДокументооборотПраваДоступа.ЗаполнитьДескрипторОбъектаОсновной(ОбъектДоступа, ТаблицаДескрипторов);
	
КонецПроцедуры

// Возвращает признак того, что менеджер содержит метод ЗапросДляРасчетаПрав()
// 
Функция ЕстьМетодЗапросДляРасчетаПрав() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает запрос для расчета прав доступа по дескрипторам объекта
// 
// Параметры:
//  
//  Дескрипторы - Массив - массив дескрипторов, чьи права нужно рассчитать
//  ИдОбъекта - Ссылка - идентификатор объекта метаданных, назначенный переданным дескрипторам
//  МенеджерОбъектаДоступа - СправочникМенеджер, ДокументМенеджер - менеджер объекта доступа
// 
// Возвращаемое значение - Запрос - запрос, который выберет права доступа для переданного массива дескрипторов
// 
Функция ЗапросДляРасчетаПрав(Дескрипторы, ИдОбъекта, МенеджерОбъектаДоступа) Экспорт
	
	Возврат БизнесПроцессыИЗадачиСервер.ЗапросДляРасчетаПрав(Дескрипторы, ИдОбъекта, МенеджерОбъектаДоступа);
	
КонецФункции

// Заполняет протокол расчета прав дескрипторов
// 
// Параметры:
//  
//  ПротоколРасчетаПрав - Массив - протокол для заполнения
//  ЗапросПоПравам - Запрос - запрос, который использовался для расчета прав дескрипторов
//  Дескрипторы - Массив - массив дескрипторов, чьи права были рассчитаны
//  
Процедура ЗаполнитьПротоколРасчетаПрав(ПротоколРасчетаПрав, ЗапросПоПравам) Экспорт
	
	БизнесПроцессыИЗадачиСервер.ЗаполнитьПротоколРасчетаПрав(ПротоколРасчетаПрав, ЗапросПоПравам);
	
КонецПроцедуры

// Проверяет наличие метода.
// 
Функция ЕстьМетодПраваСотрудниковПоФайлам() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает права доступа пользователей к переданным файлам.
// 
Функция ПраваСотрудниковПоФайлам(Файлы, СотрудникиОтбор = Неопределено) Экспорт
	
	Возврат БизнесПроцессыИЗадачиСервер.ПраваСотрудниковПоФайлам(Файлы, СотрудникиОтбор);
	
КонецФункции

// Конец УправлениеДоступом

// Получить структуру с описанием формы выполнения задачи.
// Вызывается при открытии формы выполнения задачи.
//
// Параметры
//   ЗадачаСсылка  - ЗадачаСсылка.ЗадачаИсполнителя - задача 
//   ТочкаМаршрутаСсылка - точка маршрута 
//
// Возвращаемое значение:
//   Структура   - структуру с описанием формы выполнения задачи.
//                 Ключ "ИмяФормы" содержит имя формы, передаваемое в метод контекста ОткрытьФорму().
//                 Ключ "ПараметрыФормы" содержит параметры формы.
//
Функция ФормаВыполненияЗадачи(ЗадачаСсылка, ТочкаМаршрутаСсылка) Экспорт
	
	Если ТочкаМаршрутаСсылка =
		БизнесПроцессы.РешениеВопросовВыполненияЗадач.ТочкиМаршрута.РассмотрениеИнициатором Тогда
		Если ЗадачаСсылка.БизнесПроцесс.ВидВопроса =
			Перечисления.ВидыВопросовВыполненияЗадач.ПереносСрока Тогда
			ИмяФормы = "БизнесПроцесс.РешениеВопросовВыполненияЗадач.Форма.ФормаРассмотренияПереносаСрока";
		Иначе
			ИмяФормы = "БизнесПроцесс.РешениеВопросовВыполненияЗадач.Форма.ФормаЗадачиАвтора";
		КонецЕсли;
	ИначеЕсли ТочкаМаршрутаСсылка =
		БизнесПроцессы.РешениеВопросовВыполненияЗадач.ТочкиМаршрута.ОзнакомлениеСРезультатомРассмотрения Тогда
		ИмяФормы = "БизнесПроцесс.РешениеВопросовВыполненияЗадач.Форма.ФормаЗадачиИсполнителя";
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ПараметрыФормы", Новый Структура("Ключ", ЗадачаСсылка));
	Результат.Вставить("ИмяФормы", ИмяФормы);
	Возврат Результат;
	
КонецФункции

Функция ТипШаблона() Экспорт
	
	Возврат "";
	
КонецФункции

Функция МожетЗапускатьсяИнтерактивно() Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Возвращает массив пользователей переданного бизнес-процесса,
// которые должны иметь иметь права на другие бизнес-процессы, 
// для которых данный бизнес-процесс является ведущим
Функция УчастникиПроцессаВлияющиеНаДоступКПодчиненнымОбъектам(Процесс) Экспорт
	
	МассивПользователей = Новый Массив;
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Процесс, 
		"Автор,
		|ИнициаторПроцесса,
		|Проект");
		
	Если ЗначениеЗаполнено(Реквизиты.Автор) Тогда
		ДанныеУчастника = Новый Структура(
			"Участник");
		ДанныеУчастника.Участник = Реквизиты.Автор;
		МассивПользователей.Добавить(ДанныеУчастника);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Реквизиты.ИнициаторПроцесса) Тогда
		ДанныеУчастника = Новый Структура(
			"Участник");
		ДанныеУчастника.Участник = Реквизиты.ИнициаторПроцесса;
		МассивПользователей.Добавить(ДанныеУчастника);
	КонецЕсли;
	
	// Добавление руководителя проекта
	Если ЗначениеЗаполнено(Реквизиты.Проект) Тогда
		
		РуководительПроекта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.Проект, "Руководитель");
		Если ЗначениеЗаполнено(РуководительПроекта) Тогда
			ДанныеУчастника = Новый Структура(
				"Участник");
			ДанныеУчастника.Участник = РуководительПроекта;
			МассивПользователей.Добавить(ДанныеУчастника);
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат МассивПользователей;
	
КонецФункции

// Возвращает массив всех участников процесса 
Функция ВсеУчастникиПроцесса(ПроцессСсылка) Экспорт
	
	ВсеУчастники = Новый Массив;
	
	КлючевыеУчастники = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПроцессСсылка, 
		"Автор, 
		| ИнициаторПроцесса");
	
	// Автор
	ДанныеУчастника = Новый Структура;
	ДанныеУчастника.Вставить("Участник", КлючевыеУчастники.Автор);
	ВсеУчастники.Добавить(ДанныеУчастника);

	// Инициатор
	ДанныеУчастника = Новый Структура;
	ДанныеУчастника.Вставить("Участник", КлючевыеУчастники.ИнициаторПроцесса);
	ВсеУчастники.Добавить(ДанныеУчастника);
	
	Возврат ВсеУчастники;
	
КонецФункции

// Проверяет, подходит ли объект к шаблону бизнес-процесса
Функция ШаблонПодходитДляАвтозапускаБизнесПроцессаПоОбъекту(ШаблонСсылка, ПредметСсылка, Подписчик, ВидСобытия, Условие) Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает признак наличия метода ДополнительныеДанныеПоЗадаче
Функция ЕстьМетодДополнительныеДанныеПоЗадаче() Экспорт
	Возврат Истина;
КонецФункции

// Возвращает структуру дополнительных данных переданной задачи:
//	РезультатВыполнения - результат выполнения задачи
//  КонтекстВыполненияЗадачи - Контекст выполнения задачи задачи для истории
Функция ДополнительныеДанныеПоЗадаче(Задача) Экспорт
	
	СтруктураВозврата = Новый Структура("РезультатВыполнения, КонтекстВыполненияЗадачи");
		
	Если Не Задача.Выполнена Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	РезультатВыполнения = Неопределено;
	
	ТочкаМаршрута = Задача.ТочкаМаршрута;
	ТочкиМаршрутаПроцесса = БизнесПроцессы.РешениеВопросовВыполненияЗадач.ТочкиМаршрута;
	
	РезультатДействия = Справочники.РезультатыДействийЗадач.ПустаяСсылка();
	ТекстРезультатаВыполнения = Задача.РезультатВыполнения;
	
	Если ТочкаМаршрута = ТочкиМаршрутаПроцесса.РассмотрениеИнициатором Тогда
		
		РезультатВыполнения = РезультатВыполненияЗадачи(Задача);
		
		Если РезультатВыполнения = Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно Тогда
			
			РезультатДействия = Справочники.РезультатыДействийЗадач.ПеренесенСрок;
			
			Если ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач") Тогда
				СтрокаФорматирования = "ДФ='dd.MM.yyyy ЧЧ:мм'";
			Иначе
				СтрокаФорматирования = "ДФ=dd.MM.yyyy";
			КонецЕсли;
			
			ПредметРассмотрения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Задача.БизнесПроцесс, "ПредметРассмотрения");
			ДанныеПредметаРассмотрения = РаботаСВопросами.ДанныеПредметаРассмотрения(ПредметРассмотрения);
			
			АктуальныйСрок = Формат(
				ДанныеПредметаРассмотрения.Срок,
				СтрокаФорматирования);
			
		ИначеЕсли РезультатВыполнения = Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно Тогда
			РезультатДействия = Справочники.РезультатыДействийЗадач.ОтказаноВПереносеСрока;
		Иначе
			РезультатДействия = Справочники.РезультатыДействийЗадач.Рассмотрено;
		КонецЕсли;
		
	ИначеЕсли ТочкаМаршрута = ТочкиМаршрутаПроцесса.ОзнакомлениеСРезультатомРассмотрения Тогда
		
		ОтправитьНаУточнение = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задача.БизнесПроцесс, "ОтправитьНаУточнение");
		Если ОтправитьНаУточнение Тогда
			РезультатДействия = Справочники.РезультатыДействийЗадач.ОтправленоПовторно;
		Иначе
			РезультатДействия = Справочники.РезультатыДействийЗадач.ЗакрытВопрос;
		КонецЕсли;
	
	КонецЕсли;
	
	ДанныеИсполнителяДляИсторииВыполнения = Задача.ДанныеИсполнителяДляИсторииВыполнения();
	
	КонтекстВыполненияЗадачи = РегистрыСведений.ИсторияЗадач.КонтекстВыполнения();
	КонтекстВыполненияЗадачи.Исполнитель = ДанныеИсполнителяДляИсторииВыполнения.Исполнитель;
	КонтекстВыполненияЗадачи.ПлановыйИсполнитель = ДанныеИсполнителяДляИсторииВыполнения.ПлановыйИсполнитель;
	КонтекстВыполненияЗадачи.ОснованиеФактическогоИсполнителя =
		ДанныеИсполнителяДляИсторииВыполнения.ОснованиеФактическогоИсполнителя;
	КонтекстВыполненияЗадачи.ТекстРезультатаВыполнения = ТекстРезультатаВыполнения;
	КонтекстВыполненияЗадачи.ПриложенияРезультатаВыполнения = РаботаСЗадачами.СлепокПриложенийРезультатаПоИсточнику(Задача.Ссылка);
	КонтекстВыполненияЗадачи.РезультатДействия = РезультатДействия;
	КонтекстВыполненияЗадачи.ДополнительныеСвойства.Вставить("АктуальныйСрок", АктуальныйСрок);
	КонтекстВыполненияЗадачи.ФактическийИсполнитель = 
		ДанныеИсполнителяДляИсторииВыполнения.ФактическийИсполнитель;
	
	СтруктураВозврата.РезультатВыполнения = РезультатВыполнения;
	СтруктураВозврата.КонтекстВыполненияЗадачи = КонтекстВыполненияЗадачи;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Возвращает признак наличия метода РезультатВыполненияЗадачи
//
// Возвращаемое значение:
//  Булево
//
Функция ЕстьМетодРезультатВыполненияЗадачи() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает результат выполнения задачи.
//
// Параметры:
//  Задача - ЗадачаОбъект.ЗадачаИсполнителя,
//           ЗадачаСсылка.ЗадачаИсполнителя
//
// Возвращаемое значение:
//  ПеречислениеСсылка.ВариантыВыполненияПроцессовИЗадач,
//  Неопределено
//
Функция РезультатВыполненияЗадачи(Задача) Экспорт
	
	РезультатВыполнения = Неопределено;
	
	Если ТипЗнч(Задача) = Тип("ЗадачаОбъект.ЗадачаИсполнителя") Тогда
		РеквизитыЗадачи = Задача;
	Иначе
		РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Задача, "Выполнена, ТочкаМаршрута, БизнесПроцесс");
	КонецЕсли;
	
	Если РеквизитыЗадачи.Выполнена = Истина
		И РеквизитыЗадачи.ТочкаМаршрута = ТочкиМаршрута.РассмотрениеИнициатором Тогда
		
		РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыЗадачи.БизнесПроцесс, 
			"ВидВопроса, ПредметРассмотрения");
		
		Если РеквизитыПроцесса.ВидВопроса = Перечисления.ВидыВопросовВыполненияЗадач.ПереносСрока Тогда
			
			Если ТипЗнч(Задача) = Тип("ЗадачаОбъект.ЗадачаИсполнителя")
				И Задача.ДополнительныеСвойства.Свойство("ПереносСрока")
				И Задача.ДополнительныеСвойства.ПереносСрока Тогда
				
				РезультатВыполнения = Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно;
				
			Иначе
				
				КоличествоПереносовСрока = 
					ПереносСроковВыполненияЗадачВызовСервера.КоличествоПереносовСрокаПоЗадачеИЗаявкеНаПеренос(
						РеквизитыПроцесса.ПредметРассмотрения, РеквизитыЗадачи.БизнесПроцесс, Истина);
				
				Если КоличествоПереносовСрока > 0 Тогда
					РезультатВыполнения = Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно;
				Иначе
					РезультатВыполнения = Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

// Возвращает массив структур, содержащих описания участников.
// Состав структуры:
//   ТабличнаяЧасть - имя ТЧ, в которой хранятся данные участников. Если данные хранятся в шапке, этот ключ отсутствует.
//   ИмяУчастника - имя реквизита шапки или ТЧ, в котором хранится ссылка на участника.
//   ВлияетНаДоступКПодчиненнымОбъектам - признак, указывающий на необходимость пересчета прав 
//   задач и дочерних процессов при изменении данного участника.
//
Функция ЗаполнитьОписанияУчастников() Экспорт
	
	МассивОписанийУчастников = Новый Массив;
	
	// Автор
	МассивОписанийУчастников.Добавить(Новый Структура(
		"ИмяУчастника,
		|ВлияетНаДоступКПодчиненнымОбъектам", 
		"Автор",
		Истина));
	
	// Инициатор процесса
	МассивОписанийУчастников.Добавить(Новый Структура(
		"ИмяУчастника,
		|ВлияетНаДоступКПодчиненнымОбъектам", 
		"ИнициаторПроцесса",
		Ложь));
		
	// Проект
	МассивОписанийУчастников.Добавить(Новый Структура(
		"ИмяУчастника,
		|ВлияетНаДоступКПодчиненнымОбъектам",
		"Проект",
		Ложь));
		
	Возврат МассивОписанийУчастников;
		
КонецФункции

// Возвращает возможность выполнения задачи процесса по почте.
// 
// Параметры:
//  РеквизитыЗадачи - Структура
//    * БизнесПроцесс - БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач
//    * ТочкаМаршрута - ТочкаМаршрутаБизнесПроцессаСсылка.РешениеВопросовВыполненияЗадач
//    * Ссылка - ЗадачаИсполнителя - ссылка на задачу процесса.
//
// Возвращаемое значение:
//  Булево
//
Функция ВозможноВыполнениеЗадачиПроцессаПоПочте(РеквизитыЗадачи) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(РеквизитыЗадачи.БизнесПроцесс, "ВидВопроса") =
		Перечисления.ВидыВопросовВыполненияЗадач.ПереносСрока Тогда
		
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Возвращает структуру с вариантами ответов для формирования уведомлений
// с возможностью исполнения задач по почте. Варианты ответов определяются в
// зависимости от точки маршрута.
//
// Параметры:
//	ЗадачаСсылка - ЗадачаСсылка.ЗадачаИсполнителя - задача для которой определяются
//				   варианты ответов.
//	БизнесПроцессСсылка - БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач - бизнес процесс по которому
//						  назначена задача.
//	ТочкаМаршрута - ТочкаМаршрутаБизнесПроцессаСсылка - точка маршрута в которой находится
//					БизнесПроцесс
//	КодЯзыкаПолучателя - Строка.
//
// Возвращаемое значение:
//  Структура
//	 * СписокВариантовОтветов - СписокЗначений - список значений типа
//								ПеречисленияСсылка.ВариантыВыполненияПроцессовИЗадач,
//								с заполненным представлением; в нем содержатся варианты
//								ответов.
//	 * ИспользоватьКомментарий - Булево - Принимает значение Истина, если для текущей задачи
//								 ввод комментария обязателен.
//
Функция ВариантыОтветовДляВыполненияЗадачиПоПочте(
	ЗадачаСсылка,
	БизнесПроцессСсылка,
	ТочкаМаршрута,
	КодЯзыкаПолучателя) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("СписокВариантовОтветов", Новый СписокЗначений);
	Результат.Вставить("ИспользоватьКомментарий", Ложь);
	
	Если ТочкаМаршрута = ТочкиМаршрута.РассмотрениеИнициатором Тогда
		Результат.СписокВариантовОтветов.Добавить(
			Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно,
			НСтр("ru = 'Рассмотрено'", КодЯзыкаПолучателя));
		Результат.ИспользоватьКомментарий = Истина;
	ИначеЕсли ТочкаМаршрута = ТочкиМаршрута.ОзнакомлениеСРезультатомРассмотрения Тогда
		Результат.СписокВариантовОтветов.Добавить(
			Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно,
			НСтр("ru = 'Закрыть вопрос'", КодЯзыкаПолучателя));
		Результат.СписокВариантовОтветов.Добавить(
			Перечисления.ВариантыВыполненияПроцессовИЗадач.Отрицательно,
			НСтр("ru = 'Уточнить'", КодЯзыкаПолучателя));
		Результат.ИспользоватьКомментарий = Истина;
	Иначе
		ВызватьИсключение 
			НСтр("ru = 'Неожиданная точка маршрута задачи.'", КодЯзыкаПолучателя);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает признак наличия метода РезультатВыполненияПроцесса
Функция ЕстьМетодРезультатВыполненияПроцесса() Экспорт
	Возврат Ложь;
КонецФункции

#КонецЕсли
