#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#КонецОбласти

#Область ПрограммныйИнтерфейс_Предметы

// Проверяет права участников процесса на предметы этого процесса.
// Если у участников процесса отсутствуют права на предметы, то выводятся сообщения с привязкой
// к карточке процесса.
//
// Параметры
//  ПроцессОбъект - БизнесПроцессОбъект - процесс.
//  Отказ - Булево - в этот параметр помещается значение Истина, если кто-то из участников не имеет
//                   прав на предметы.
//  ПроверятьПриИзменении - Булево - если указано значение Истина, то проверка выполняется только если
//                          изменены участники или предметы процесса, иначе проверка выполняется всегда.
//
Процедура ПроверитьПраваУчастниковПроцессаНаПредметы(
	ПроцессОбъект, Отказ, ПроверятьПриИзменении) Экспорт
	
	// В процессах решения вопросов не поддерживается мультипредметность.
	// Поэтому нет проверки.
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКопировании(ОбъектКопирования)
	
	РаботаСБизнесПроцессами.ПриКопированииБизнесПроцесса(ОбъектКопирования);
	
	Дата = ТекущаяДатаСеанса();
	Автор = Сотрудники.ОсновнойСотрудник();
	ДатаНачала = '00010101';
	ДатаЗавершения = '00010101';
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	Если ЭтоНовый() Тогда
		
		// Проверка на наличие обязательных параметров
		Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Тогда
			ТекстИсключения = НСтр("ru = 'Для создания нового процесса ""Решение вопросов"" необходимо использовать структуру с полями ""ВидВопроса"" и ""Задача"" в качестве данных заполнения.'");
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ВидВопроса")  Тогда
			ВидВопроса = ДанныеЗаполнения.ВидВопроса;
		Иначе	
			ВидВопроса = Перечисления.ВидыВопросовВыполненияЗадач.Иное;
		КонецЕсли;
		
		Если Не ДанныеЗаполнения.Свойство("Задача")  Тогда
			ТекстИсключения = НСтр("ru = 'В данных заполнения не найдено поле ""Задача"".'");
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
		
		ПредметРассмотрения = РаботаСВопросами.ПредметРассмотрения(ДанныеЗаполнения.Задача);
		
		Дата = ТекущаяДатаСеанса();
		Автор = Сотрудники.ОсновнойСотрудник();
		Важность = Перечисления.ВариантыВажностиОбъектов.Обычная;
		
		Если ДанныеЗаполнения.Свойство("Кому") Тогда
			ИнициаторПроцесса = ДанныеЗаполнения.Кому;
		КонецЕсли;
		
		// Предмет рассмотрения.
		ДанныеПредметаРассмотрения = РаботаСВопросами.ДанныеПредметаРассмотрения(ПредметРассмотрения);
		ГлавнаяЗадача = ДанныеПредметаРассмотрения.ГлавнаяЗадача;
		ИнициаторПроцесса = ДанныеПредметаРассмотрения.ИнициаторПроцесса;
		Проект = ДанныеПредметаРассмотрения.Проект;
		ПроектнаяЗадача = ДанныеПредметаРассмотрения.ПроектнаяЗадача;
		
		Если ЗначениеЗаполнено(ДанныеПредметаРассмотрения.БизнесПроцесс) Тогда
			Мультипредметность.ПередатьПредметыПроцессу(
				ЭтотОбъект,
				ДанныеПредметаРассмотрения.БизнесПроцесс);
		КонецЕсли;
		
		// Срок исполнения.
		ОпределитьСрокИсполнения = Истина;
		
		Если ВидВопроса = Перечисления.ВидыВопросовВыполненияЗадач.ПереносСрока Тогда
			
			Если Не ЗначениеЗаполнено(ДанныеПредметаРассмотрения.Срок) Тогда
				ТекстИсключения = НСтр("ru = 'Нельзя согласовать перенос срока по задаче, у которой не установлен срок исполнения.'");
				ВызватьИсключение ТекстИсключения;
			КонецЕсли;
			
			Если ДанныеПредметаРассмотрения.Выполнен Тогда
				ТекстИсключения = НСтр("ru = 'Нельзя согласовать перенос срока завершенной задачи.'");
				ВызватьИсключение ТекстИсключения;
			КонецЕсли;
			
			Если ТипЗнч(ДанныеПредметаРассмотрения.БизнесПроцесс) = Тип("БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач") Тогда
				ТекстИсключения = НСтр("ru = 'Перенос срока по процессу ""Решение вопросов выполнения задач"" не доступен.'");
				ВызватьИсключение ТекстИсключения;
			КонецЕсли;
			
			НовыйСрок = ДанныеПредметаРассмотрения.Срок + 86400;
			
			Если ТекущаяДатаСеанса() <= ДанныеПредметаРассмотрения.Срок Тогда
				СрокИсполнения = ДанныеПредметаРассмотрения.Срок;
				ОпределитьСрокИсполнения = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОпределитьСрокИсполнения Тогда
			Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьГрафикиРаботы") Тогда
				СрокИсполнения = КонецДня(ТекущаяДатаСеанса() + 3600*24);
			Иначе
				ГрафикАвтораЗадачи = ГрафикиРаботы.ГрафикРаботыСотрудника(ИнициаторПроцесса);
				СрокИсполнения = ГрафикиРаботы.ПолучитьДатуОкончанияПериода(
					ГрафикАвтораЗадачи, 
					ТекущаяДатаСеанса(), 
					1);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбычнаяЗапись = Истина;
	ТолькоЗаполнениеТаблицыПредметыЗадачИОбновлениеРабочейГруппыПроцессов = Ложь;
	
	Если ДополнительныеСвойства.Свойство("ВидЗаписи") Тогда
		
		ОбычнаяЗапись = Ложь;
		
		ТолькоЗаполнениеТаблицыПредметыЗадачИОбновлениеРабочейГруппыПроцессов = 
			(ДополнительныеСвойства.ВидЗаписи = 
			"ЗаписьСОбновлением_Предметов_ПредметовЗадач_Проекта_ОбщегоСпискаПроцессов_РабочихГруппПредметов_РабочихГруппПроцессов_ДопРеквизитовПоПредметам");
		
		Если Не ТолькоЗаполнениеТаблицыПредметыЗадачИОбновлениеРабочейГруппыПроцессов Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбычнаяЗапись
		И Не МиграцияДанныхИзВнешнихСистемСервер.ЭтоОбъектИзДругойСистемы(ИсточникДанных) Тогда
	
		Если Стартован
			И НЕ ЗначениеЗаполнено(ИнициаторПроцесса) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Поле ""Кому"" не заполнено'"), ЭтотОбъект, "ИнициаторПроцесса", , Отказ);
				
			Возврат;
			
		КонецЕсли;
		
		// Обработка выполнения задачи
		Если ДополнительныеСвойства.Свойство("ТекущаяЗадача") Тогда
			Если ДополнительныеСвойства.ТекущаяЗадача.ТочкаМаршрута = 
				БизнесПроцессы.РешениеВопросовВыполненияЗадач.ТочкиМаршрута.ОзнакомлениеСРезультатомРассмотрения Тогда
				ОтправитьНаУточнение = ДополнительныеСвойства.ОтправитьНаУточнение;
			КонецЕсли;
		КонецЕсли;
		
		ПредыдущаяПометкаУдаления = Ложь;
		Если Не Ссылка.Пустая() Тогда
			ПредыдущаяПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ПометкаУдаления");
		КонецЕсли;
		ДополнительныеСвойства.Вставить("ПредыдущаяПометкаУдаления", ПредыдущаяПометкаУдаления);
		
		Если Не Ссылка.Пустая() Тогда
			ПредыдущееСостояние = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Состояние");
			ДополнительныеСвойства.Вставить("ПредыдущееСостояние", ПредыдущееСостояние);
		КонецЕсли;
		
		ПометкаИБ = Ссылка.ПометкаУдаления;
		Если ПометкаУдаления <> ПометкаИБ И Не Ссылка.Пустая() Тогда
			// Отбираем файлы и пытаемся поставить им пометку удаления
			Запрос = Новый Запрос;
			Запрос.Текст =
				"ВЫБРАТЬ
				|	Файлы.Ссылка,
				|	Файлы.Редактирует
				|ИЗ
				|	Справочник.Файлы КАК Файлы
				|ГДЕ
				|	Файлы.ВладелецФайла = &Ссылка";
			
			Запрос.УстановитьПараметр("Ссылка", Ссылка);
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				Если ЗначениеЗаполнено(Выборка.Редактирует) Тогда
					ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Вопрос %1 нельзя удалить, т.к. к нему прикреплен файл ""%2"", занятый для редактирования.'"),
						Строка(Ссылка),
						Строка(Выборка.Ссылка));
				КонецЕсли;
				ФайлОбъект = Выборка.Ссылка.ПолучитьОбъект();
				ФайлОбъект.Заблокировать();
				ФайлОбъект.УстановитьПометкуУдаления(ПометкаУдаления);
			КонецЦикла;
		КонецЕсли;
		Если ВидВопроса = Перечисления.ВидыВопросовВыполненияЗадач.ПереносСрока Тогда
			Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Перенос срока по задаче: %1'"),
				Строка(ПредметРассмотрения));
		Иначе
			Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Рассмотрение вопроса: %1'"),
				Описание);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбычнаяЗапись Или ТолькоЗаполнениеТаблицыПредметыЗадачИОбновлениеРабочейГруппыПроцессов Тогда
		
		// Обработка рабочей группы
		РаботаСБизнесПроцессамиВызовСервера.СформироватьРабочуюГруппу(ЭтотОбъект);
		
		// Заполнение табличной части ПредметыЗадач
		Мультипредметность.ЗаполнитьПредметыТочекДействийПроцесса(ЭтотОбъект);
		
	КонецЕсли;
	
	Если ОбычнаяЗапись Тогда
		ЗаполнитьПустыеИдентификаторыУчастников();
		ПроверитьУникальностьИдентификаторовУчастников();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияЗадач.ПриЗаписиИсточникаЗадачи(ЭтотОбъект);
	
	Если ДополнительныеСвойства.Свойство("ВидЗаписи") Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаОчередиЗаданийСервер.ПриЗаписиПроцесса(ЭтотОбъект);
	
	ПредыдущаяПометкаУдаления = Ложь;
	Если ДополнительныеСвойства.Свойство("ПредыдущаяПометкаУдаления") Тогда
		ПредыдущаяПометкаУдаления = ДополнительныеСвойства.ПредыдущаяПометкаУдаления;
	КонецЕсли;
	
	Если (ПометкаУдаления <> ПредыдущаяПометкаУдаления)
		И Не МиграцияДанныхИзВнешнихСистемСервер.ЭтоОбъектИзДругойСистемы(ИсточникДанных) Тогда
		
		ПротоколированиеРаботыСотрудников.ЗаписатьПометкуУдаления(Ссылка, ПометкаУдаления);
	КонецЕсли;	
	
КонецПроцедуры

// Обработчики событий карты маршрута

Процедура СтартПередСтартом(ТочкаМаршрутаБизнесПроцесса, Отказ)
	
	ДатаНачала = ТекущаяДатаСеанса();
	
КонецПроцедуры

Процедура РассмотрениеИнициаторомПередСозданиемЗадач(
	ТочкаМаршрутаБизнесПроцесса,
	ФормируемыеЗадачи,
	СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
	Задача.Дата = ТекущаяДатаСеанса();
	Задача.Автор = Автор;
	Задача.Важность = Важность;
	
	Мультипредметность.ЗадачаПередСозданием(ЭтотОбъект, Задача, ТочкаМаршрутаБизнесПроцесса);
	
	Задача.Проект = Проект;
	Задача.ПроектнаяЗадача = ПроектнаяЗадача;
	
	Задача.СрокИсполнения = СрокИсполнения;
	Задача.БизнесПроцесс  = ЭтотОбъект.Ссылка;
	Задача.ТочкаМаршрута  = ТочкаМаршрутаБизнесПроцесса;
	
	Если ТипЗнч(ИнициаторПроцесса) = Тип("СправочникСсылка.Пользователи") 
		Или ТипЗнч(ИнициаторПроцесса) = Тип("СправочникСсылка.Сотрудники") Тогда
		Задача.Исполнитель = ИнициаторПроцесса;
	Иначе
		Задача.РольИсполнителя = ИнициаторПроцесса;
	КонецЕсли;
	Задача.ИдентификаторИсполнителя = ИдентификаторИнициатораПроцесса;
	
	ЗаголовокИОписание =
		БизнесПроцессы.РешениеВопросовВыполненияЗадач.ЗаголовокИОписаниеЗадачи(Ссылка);
	
	Задача.Наименование = ЗаголовокИОписание.Заголовок;
	Задача.Описание = ЗаголовокИОписание.Описание;
	
	РаботаСБизнесПроцессамиВызовСервера.СкопироватьЗначенияДопРеквизитов(Задача.БизнесПроцесс, Задача);
	
	ЗадачаСсылка = Задачи.ЗадачаИсполнителя.ПолучитьСсылку();
	Задача.УстановитьСсылкуНового(ЗадачаСсылка);
	
	ФормируемыеЗадачи.Добавить(Задача);

	Итерация = Итерация + 1;
	НоваяСтрока = ЦиклыРассмотрения.Добавить();
	НоваяСтрока.Цикл = Итерация;
	НоваяСтрока.Задача = ЗадачаСсылка;
	
	РаботаСБизнесПроцессами.ЗаписатьПроцесс(ЭтотОбъект, "ЗаписьСОбновлениемРезультатаВыполнения");
	
КонецПроцедуры

Процедура РассмотрениеИнициаторомПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПринятоеРешение = Задача.РезультатВыполнения;
	
	РаботаСБизнесПроцессами.ЗаписатьПроцесс(ЭтотОбъект, "ЗаписьСОбновлениемРезультатаВыполнения");
	
КонецПроцедуры

Процедура ОзнакомлениеСРезультатомРассмотренияПередСозданиемЗадач(
	ТочкаМаршрутаБизнесПроцесса,
	ФормируемыеЗадачи,
	СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
	Задача.Дата = ТекущаяДатаСеанса();
	
	Если ТипЗнч(ИнициаторПроцесса) = Тип("СправочникСсылка.Пользователи") 
		Или ТипЗнч(ИнициаторПроцесса) = Тип("СправочникСсылка.Сотрудники") Тогда
		Задача.Автор = ИнициаторПроцесса;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ЗадачаИсполнителя.Ссылка КАК ЗадачаИсполнителя,
			|	ЗадачаИсполнителя.Исполнитель КАК Исполнитель
			|ИЗ
			|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
			|ГДЕ
			|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
			|	И ЗадачаИсполнителя.Выполнена
			|	И ЗадачаИсполнителя.ТочкаМаршрута = &ТочкаМаршрута
			|	И ЗадачаИсполнителя.Дата < &ДатаЗадачи
			|
			|УПОРЯДОЧИТЬ ПО
			|	ЗадачаИсполнителя.Дата УБЫВ";
		
		Запрос.УстановитьПараметр("БизнесПроцесс", Ссылка);
		Запрос.УстановитьПараметр("ТочкаМаршрута", 
			БизнесПроцессы.РешениеВопросовВыполненияЗадач.ТочкиМаршрута.РассмотрениеИнициатором);
		Запрос.УстановитьПараметр("ДатаЗадачи", Задача.Дата);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		Задача.Автор = Выборка.Исполнитель;
	КонецЕсли;
	
	Задача.ИдентификаторИсполнителя = ИдентификаторАвтораВопроса;
	
	Задача.Важность = Важность;
	
	Мультипредметность.ЗадачаПередСозданием(ЭтотОбъект, Задача, ТочкаМаршрутаБизнесПроцесса);
	
	Задача.Проект = Проект;
	Задача.ПроектнаяЗадача = ПроектнаяЗадача;
	
	Задача.БизнесПроцесс = ЭтотОбъект.Ссылка;
	Задача.ТочкаМаршрута = ТочкаМаршрутаБизнесПроцесса;
	
	Задача.Исполнитель = Автор;
	
	ЗаголовокИОписание =
		БизнесПроцессы.РешениеВопросовВыполненияЗадач.ЗаголовокИОписаниеЗадачи(Ссылка, Истина);
	
	Задача.Наименование = ЗаголовокИОписание.Заголовок;
	Задача.Описание = ЗаголовокИОписание.Описание;
		
	ФормируемыеЗадачи.Добавить(Задача);
	РаботаСБизнесПроцессамиВызовСервера.СкопироватьЗначенияДопРеквизитов(Задача.БизнесПроцесс, Задача);
	
	ЗадачаСсылка = Задачи.ЗадачаИсполнителя.ПолучитьСсылку();
	Задача.УстановитьСсылкуНового(ЗадачаСсылка);
	
	НоваяСтрока = ЦиклыРассмотрения.Добавить();
	НоваяСтрока.Цикл = Итерация;
	НоваяСтрока.Задача = ЗадачаСсылка;
	
	РаботаСБизнесПроцессами.ЗаписатьПроцесс(ЭтотОбъект, "ЗаписьСОбновлениемРезультатаВыполнения");
	
КонецПроцедуры

Процедура ОзнакомлениеСРезультатомРассмотренияПриВыполнении(
	ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	ПринятоеРешение = Задача.РезультатВыполнения;
	
	РаботаСБизнесПроцессами.ЗаписатьПроцесс(ЭтотОбъект, "ЗаписьСОбновлениемРезультатаВыполнения");
	
КонецПроцедуры

Процедура УсловиеТребуетсяУточнениеПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Результат = ОтправитьНаУточнение;
	
КонецПроцедуры

Процедура ЗавершениеПриЗавершении(ТочкаМаршрутаБизнесПроцесса, Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	ДатаЗавершения = ТекущаяДатаСеанса();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает признак наличия метода ИзменитьРеквизитыНевыполненныхЗадач
//
Функция ЕстьМетодИзменитьРеквизитыНевыполненныхЗадач() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Обновляет значения реквизитов невыполненных задач
// при изменении реквизитов бизнес-процесса.
//
Процедура ИзменитьРеквизитыНевыполненныхЗадач() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		
		ПараметрыСеанса.ОтключитьОбновлениеЗадач = Истина;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ
			|	Задачи.Ссылка
			|ИЗ
			|	Задача.ЗадачаИсполнителя КАК Задачи
			|ГДЕ
			|	Задачи.БизнесПроцесс = &БизнесПроцесс
			|	И Задачи.ПометкаУдаления = ЛОЖЬ
			|	И Задачи.Выполнена = ЛОЖЬ";
		
		Запрос.УстановитьПараметр("БизнесПроцесс", Ссылка);
		Результат = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ЗадачаОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			ЗаблокироватьДанныеДляРедактирования(ЗадачаОбъект.Ссылка);
			ЗадачаОбъект.Важность = Важность;
			ЗадачаОбъект.СрокИсполнения = СрокИсполнения;
			ЗадачаОбъект.Описание = Описание;
			
			ЗадачаОбъект.Проект = Проект;
			ЗадачаОбъект.ПроектнаяЗадача = ПроектнаяЗадача;
			
			Если ТипЗнч(ИнициаторПроцесса) = Тип("СправочникСсылка.Пользователи") 
				Или ТипЗнч(ИнициаторПроцесса) = Тип("СправочникСсылка.Сотрудники") Тогда
				ЗадачаОбъект.Исполнитель = ИнициаторПроцесса;
				ЗадачаОбъект.РольИсполнителя = Неопределено;
			Иначе
				ЗадачаОбъект.Исполнитель = Неопределено;
				ЗадачаОбъект.РольИсполнителя = ИнициаторПроцесса;
			КонецЕсли;
			
			Если ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.
				РешениеВопросовВыполненияЗадач.ТочкиМаршрута.РассмотрениеИнициатором Тогда
				
				Если ВидВопроса = Перечисления.ВидыВопросовВыполненияЗадач.ПереносСрока Тогда
					ЗадачаОбъект.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Согласовать перенос срока по задаче: %1'",
							ЛокализацияКонфигурации.КодЯзыкаИсполнителяЗадачи(ЗадачаОбъект)),
						Строка(ПредметРассмотрения));
				Иначе
					ЗадачаОбъект.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Рассмотреть вопрос: %1'",
							ЛокализацияКонфигурации.КодЯзыкаИсполнителяЗадачи(ЗадачаОбъект)),
						Описание);
				КонецЕсли;
				
			ИначеЕсли ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.
				РешениеВопросовВыполненияЗадач.ТочкиМаршрута.ОзнакомлениеСРезультатомРассмотрения Тогда
				
				Если ВидВопроса = Перечисления.ВидыВопросовВыполненияЗадач.ПереносСрока Тогда
					ЗадачаОбъект.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Ознакомиться: перенос срока по задаче ""%1""'",
							ЛокализацияКонфигурации.КодЯзыкаИсполнителяЗадачи(ЗадачаОбъект)),
						Строка(ПредметРассмотрения));
				Иначе
					ЗадачаОбъект.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Ознакомиться с ответом на вопрос: %1'",
							ЛокализацияКонфигурации.КодЯзыкаИсполнителяЗадачи(ЗадачаОбъект)),
						Описание);
				КонецЕсли;
					
			КонецЕсли;
			
			ЗадачаОбъект.СрокИсполнения = СрокИсполнения;
			
			ЗадачаОбъект.Записать();
			
		КонецЦикла;
		
		Если Не (ДополнительныеСвойства.Свойство("ОтключитьОбновлениеЗадач")
			И ДополнительныеСвойства.ОтключитьОбновлениеЗадач) Тогда
			ИнтеграцияЗадач.ОбновитьЗадачуПоИсточнику(Ссылка);
		КонецЕсли;
		ПараметрыСеанса.ОтключитьОбновлениеЗадач = Ложь;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ПараметрыСеанса.ОтключитьОбновлениеЗадач = Ложь;
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Проверяет что заполнены поля шаблона
Функция ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта() Экспорт
	
	МассивПолей = Новый Массив;
	Возврат МассивПолей;
	
КонецФункции

// Возвращает описание задачи, специфичное для бизнес-процесса
Функция ПолучитьОписаниеУведомленияЗадачи(ЗадачаПроцесса, КодЯзыкаПолучателя) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Задача = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ЗадачаПроцесса,
		"Ссылка, БизнесПроцесс, ТочкаМаршрута, Выполнена, Исполнитель");
	
	Если Задача.БизнесПроцесс <> Ссылка Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Неопределено;
	
	Если Задача.ТочкаМаршрута = БизнесПроцессы.
		РешениеВопросовВыполненияЗадач.ТочкиМаршрута.РассмотрениеИнициатором Тогда
		
		НайденнаяСтрока = ЦиклыРассмотрения.Найти(Задача.Ссылка, "Задача");
		Если НайденнаяСтрока <> Неопределено Тогда 
			Если НайденнаяСтрока.Цикл > 1 Тогда
				Результат = НСТР("ru = 'Был задан уточняющий вопрос'", КодЯзыкаПолучателя);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Задача.ТочкаМаршрута = БизнесПроцессы.
		РешениеВопросовВыполненияЗадач.ТочкиМаршрута.ОзнакомлениеСРезультатомРассмотрения Тогда
		
		Если Задача.Выполнена Тогда
			Если ОтправитьНаУточнение Тогда
				Результат = НСТР("ru = 'Результат ознакомления с ответом: Задан уточняющий вопрос'", КодЯзыкаПолучателя);
			Иначе
				Результат = НСТР("ru = 'Результат ознакомления с ответом: Вопрос закрыт'", КодЯзыкаПолучателя);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ ЗначениеЗаполнено(ИнициаторПроцесса) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Поле ""Кому"" не заполнено", ЭтотОбъект,,"ИнициаторПроцессаСтрокой", Отказ);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет пустые идентификаторы участников в процессе.
//
Процедура ЗаполнитьПустыеИдентификаторыУчастников()
	
	Если ИдентификаторИнициатораПроцесса = УникальныйИдентификаторПустой() Тогда
		ИдентификаторИнициатораПроцесса = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	Если ИдентификаторАвтораВопроса = УникальныйИдентификаторПустой() Тогда
		ИдентификаторАвтораВопроса = Новый УникальныйИдентификатор;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет уникальность идентификаторов участников процесса.
// Если есть не уникальные значения, то вызывается исключение. 
//
Процедура ПроверитьУникальностьИдентификаторовУчастников()
	
	Если ИдентификаторИнициатораПроцесса = ИдентификаторАвтораВопроса Тогда
		ВызватьИсключение НСтр("ru = 'Идентификаторы участников не уникальны.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли