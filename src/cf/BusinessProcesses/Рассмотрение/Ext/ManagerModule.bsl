#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	ПолучениеФормыОбработано = РаботаСПроцессамиПоДействиямСобытия.ОбработатьПолучениеФормыПроцесса(
		ВидФормы, Параметры, ВыбраннаяФорма, СтандартнаяОбработка);
	
	Если Не ПолучениеФормыОбработано Тогда
		
		Если ВидФормы = "ФормаСписка" Тогда
			
			СтандартнаяОбработка = Ложь;
			Параметры.Вставить("ТипПроцесса", "Рассмотрение");
			ВыбраннаяФорма = Метаданные.ОбщиеФормы.СписокПроцессов;
			
		ИначеЕсли ВидФормы = "ФормаВыбора" Тогда
			
			СтандартнаяОбработка = Ложь;
			Параметры.Вставить("Заголовок", НСтр("ru = 'Рассмотрения'"));
			Параметры.Вставить("ТипПроцесса", Тип("БизнесПроцессСсылка.Рассмотрение"));
			ВыбраннаяФорма = Метаданные.ОбщиеФормы.ВыборБизнесПроцесса;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ЗадачиПроцессов

// Получить структуру с описанием формы выполнения задачи.
// Вызывается при открытии формы выполнения задачи.
//
// Параметры
//   ЗадачаСсылка  - ЗадачаСсылка.ЗадачаИсполнителя - задача 
//   ТочкаМаршрутаСсылка - точка маршрута 
//
// Возвращаемое значение:
//   Структура   - структуру с описанием формы выполнения задачи.
//                 Ключ "ИмяФормы" содержит имя формы, передаваемое в метод контекста ОткрытьФорму(). 
//                 Ключ "ПараметрыФормы" содержит параметры формы. 
//
Функция ФормаВыполненияЗадачи(ЗадачаСсылка, ТочкаМаршрутаСсылка) Экспорт
	
	Если ТочкаМаршрутаСсылка = БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Рассмотреть Тогда 
		ИмяФормы = "БизнесПроцесс.Рассмотрение.Форма.ФормаЗадачиИсполнителя";
	ИначеЕсли ТочкаМаршрутаСсылка = БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Ознакомиться Тогда 
		ИмяФормы = "БизнесПроцесс.Рассмотрение.Форма.ФормаЗадачиОзнакомиться";
	КонецЕсли;	
		
	Результат = Новый Структура;
	Результат.Вставить("ПараметрыФормы", Новый Структура("Ключ", ЗадачаСсылка));
	Результат.Вставить("ИмяФормы", ИмяФормы);
	Возврат Результат;	
	
КонецФункции

// Заполняет html обзор задачи данными процесса.
//
// Параметры:
//   HTMLТекст - Строка
//   Процесс - БизнесПроцессСсылка
//   ТочкаМаршрута - ТочкаМаршрутаБизнесПроцессаСсылка
//   ЗадачаПроцесса - ЗадачаСсылка.ЗадачаИсполнителя
//   ВключатьНавигационныеСсылки - Булево
//   КодЯзыка - Строка
//
Процедура ЗаполнитьОбзорЗадачи(HTMLТекст, Процесс, ТочкаМаршрута, ЗадачаПроцесса, ВключатьНавигационныеСсылки, КодЯзыка) Экспорт
	
	// Нет специального заполнения.
	
КонецПроцедуры

// Возвращает признак наличия метода объекта ПриПеренаправленииЗадачи
// 
Функция ЕстьМетодПриПеренаправленииЗадачи() Экспорт
	Возврат Истина;
КонецФункции

// Вызывается при перенаправлении задачи.
//
// Параметры
//   ЗадачаСсылка  - ЗадачаСсылка.ЗадачаИсполнителя - перенаправляемая задача.
//   ОтключитьОбновлениеЗадач - Булево.
//
Процедура ПриПеренаправленииЗадачи(ЗадачаСсылка, ОтключитьОбновлениеЗадач = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗадачаСсылка, 
		"ТочкаМаршрута, БизнесПроцесс, Исполнитель, РольИсполнителя");
		
	ТочкаМаршрута = Реквизиты.ТочкаМаршрута;
	БизнесПроцесс = Реквизиты.БизнесПроцесс;
	
	Если ТочкаМаршрута = ТочкиМаршрута.Рассмотреть Тогда 
		
		БизнесПроцессОбъект = БизнесПроцесс.ПолучитьОбъект();
		БизнесПроцессОбъект.Заблокировать();
		
		Если ЗначениеЗаполнено(Реквизиты.Исполнитель) Тогда 
			БизнесПроцессОбъект.Исполнитель = Реквизиты.Исполнитель;
		Иначе
			БизнесПроцессОбъект.Исполнитель = Реквизиты.РольИсполнителя;
		КонецЕсли;	
		
		Если ОтключитьОбновлениеЗадач Тогда
			БизнесПроцессОбъект.ДополнительныеСвойства.Вставить("ОтключитьОбновлениеЗадач", Истина);
		КонецЕсли;
		
		БизнесПроцессОбъект.Записать();
		
	ИначеЕсли ТочкаМаршрута = ТочкиМаршрута.Ознакомиться Тогда 
		
		БизнесПроцессОбъект = БизнесПроцесс.ПолучитьОбъект();
		БизнесПроцессОбъект.Заблокировать();
		
		БизнесПроцессОбъект.ОбрабатывающийРезолюцию = Реквизиты.Исполнитель;
		
		Если ОтключитьОбновлениеЗадач Тогда
			БизнесПроцессОбъект.ДополнительныеСвойства.Вставить("ОтключитьОбновлениеЗадач", Истина);
		КонецЕсли;
		
		БизнесПроцессОбъект.Записать();
		
	КонецЕсли;	
	
КонецПроцедуры

// Возвращает признак наличия метода ДополнительныеДанныеПоЗадаче
Функция ЕстьМетодДополнительныеДанныеПоЗадаче() Экспорт
	Возврат Истина;
КонецФункции

// Возвращает структуру дополнительных данных переданной задачи:
//	РезультатВыполнения - результат выполнения задачи
//  КонтекстВыполненияЗадачи - Контекст выполнения задачи задачи для истории
Функция ДополнительныеДанныеПоЗадаче(Задача) Экспорт
	
	СтруктураВозврата = Новый Структура("РезультатВыполнения, КонтекстВыполненияЗадачи");
		
	Если Не Задача.Выполнена Тогда
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	ТочкаМаршрута = Задача.ТочкаМаршрута;
	ТочкиМаршрутаПроцесса = БизнесПроцессы.Рассмотрение.ТочкиМаршрута;
	
	РезультатДействия = Справочники.РезультатыДействийЗадач.ПустаяСсылка();
	ТекстРезультатаВыполнения = Задача.РезультатВыполнения;
	
	Если ТочкаМаршрута = ТочкиМаршрутаПроцесса.Рассмотреть Тогда
		
		ВариантРассмотрения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Задача.БизнесПроцесс, "ВариантРассмотрения");
		
		Если ВариантРассмотрения = Перечисления.ВариантыРассмотрения.НаправитьПомощнику Тогда
			РезультатДействия = Справочники.РезультатыДействийЗадач.НаправленоПомощнику;
		
		ИначеЕсли ВариантРассмотрения = Перечисления.ВариантыРассмотрения.НаправитьАвтору Тогда
			РезультатДействия = Справочники.РезультатыДействийЗадач.НаправленоАвтору;
		
		ИначеЕсли ВариантРассмотрения = Перечисления.ВариантыРассмотрения.Рассмотрено Тогда
			РезультатДействия = Справочники.РезультатыДействийЗадач.Рассмотрено;
		
		ИначеЕсли ВариантРассмотрения = 
			Перечисления.ВариантыРассмотрения.НаправитьНаИсполнение Тогда
			
			РезультатДействия = Справочники.РезультатыДействийЗадач.НаправленоНаИсполнение;
			ТекстРезультатаВыполнения = "";
		
		ИначеЕсли ВариантРассмотрения = Перечисления.ВариантыРассмотрения.НаправитьНаОзнакомление Тогда
			
			РезультатДействия = Справочники.РезультатыДействийЗадач.НаправленоНаОзнакомление;
			ТекстРезультатаВыполнения = "";
		КонецЕсли;
		
	ИначеЕсли ТочкаМаршрута = ТочкиМаршрутаПроцесса.Ознакомиться Тогда
		РезультатДействия = Справочники.РезультатыДействийЗадач.ОбработанаРезолюция;
	КонецЕсли;
	
	ДанныеИсполнителяДляИсторииВыполнения = Задача.ДанныеИсполнителяДляИсторииВыполнения();
	
	КонтекстВыполненияЗадачи = РегистрыСведений.ИсторияЗадач.КонтекстВыполнения();
	КонтекстВыполненияЗадачи.Исполнитель = ДанныеИсполнителяДляИсторииВыполнения.Исполнитель;
	КонтекстВыполненияЗадачи.ПлановыйИсполнитель = 
		ДанныеИсполнителяДляИсторииВыполнения.ПлановыйИсполнитель;
	
	КонтекстВыполненияЗадачи.ОснованиеФактическогоИсполнителя =
		ДанныеИсполнителяДляИсторииВыполнения.ОснованиеФактическогоИсполнителя;
	КонтекстВыполненияЗадачи.ТекстРезультатаВыполнения = ТекстРезультатаВыполнения;
	
	КонтекстВыполненияЗадачи.ПриложенияРезультатаВыполнения = 
		РаботаСЗадачами.СлепокПриложенийРезультатаПоИсточнику(Задача.Ссылка);
	
	КонтекстВыполненияЗадачи.РезультатДействия = РезультатДействия;
	КонтекстВыполненияЗадачи.ФактическийИсполнитель = 
		ДанныеИсполнителяДляИсторииВыполнения.ФактическийИсполнитель;
	
	СтруктураВозврата.РезультатВыполнения = Неопределено;
	СтруктураВозврата.КонтекстВыполненияЗадачи = КонтекстВыполненияЗадачи;
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Возвращает признак наличия метода РезультатВыполненияЗадачи
//
// Возвращаемое значение:
//  Булево
//
Функция ЕстьМетодРезультатВыполненияЗадачи() Экспорт
	
	Возврат Ложь;
	
КонецФункции

Функция ПлановыеТрудозатратыИсполнителяЗадачи(БизнесПроцесс, Задача, ТочкаМаршрута) Экспорт
	
	РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(БизнесПроцесс,
		"ТрудозатратыПланИсполнителя, ТрудозатратыПланПомощника");
		
	Трудозатраты = 0;
		
	Если ТочкаМаршрута = ТочкиМаршрута.Рассмотреть Тогда
		Трудозатраты = РеквизитыПроцесса.ТрудозатратыПланИсполнителя;
	ИначеЕсли ТочкаМаршрута = ТочкиМаршрута.Ознакомиться Тогда
		Трудозатраты = РеквизитыПроцесса.ТрудозатратыПланПомощника;
	КонецЕсли;
	
	Возврат Трудозатраты;
	
КонецФункции

// Возвращает возможность выполнения задачи процесса по почте.
// 
// Параметры:
//  РеквизитыЗадачи - Структура
//    * БизнесПроцесс - БизнесПроцессСсылка.Рассмотрение
//    * ТочкаМаршрута - ТочкаМаршрутаБизнесПроцессаСсылка.Рассмотрение
//    * Ссылка - ЗадачаИсполнителя - ссылка на задачу процесса.
//
// Возвращаемое значение:
//  Булево
//
Функция ВозможноВыполнениеЗадачиПроцессаПоПочте(РеквизитыЗадачи) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВозможноВыполнение = Истина;
	
	Если РаботаСПроцессамиПоДействиямСобытия.ОбработатьВычислениеВозможностиВыполнениеЗадачиПроцессаРассмотренияПоПочте(
		РеквизитыЗадачи, ВозможноВыполнение) Тогда
		
		Возврат ВозможноВыполнение;
	КонецЕсли;
	
	Возврат ВозможноВыполнение;
	
КонецФункции

// Возвращает структуру с вариантами ответов для формирования уведомлений
// с возможностью исполнения задач по почте. Варианты ответов определяются в
// зависимости от точки маршрута.
//
// Параметры:
//	ЗадачаСсылка - ЗадачаСсылка.ЗадачаИсполнителя - задача для которой определяются
//				   варианты ответов.
//	БизнесПроцессСсылка - БизнесПроцессСсылка.Рассмотрение - бизнес процесс по которому
//						  назначена задача.
//	ТочкаМаршрута - ТочкаМаршрутаБизнесПроцессаСсылка - точка маршрута в которой находится
//					БизнесПроцесс
//	КодЯзыкаПолучателя - Строка.
//
// Возвращаемое значение:
//  Структура
//	 * СписокВариантовОтветов - СписокЗначений - список значений типа
//								ПеречисленияСсылка.ВариантыВыполненияПроцессовИЗадач,
//								с заполненным представлением; в нем содержатся варианты
//								ответов.
//	 * ИспользоватьКомментарий - Булево - Принимает значение Истина, если для текущей задачи
//								 ввод комментария обязателен.
//
Функция ВариантыОтветовДляВыполненияЗадачиПоПочте(
	ЗадачаСсылка,
	БизнесПроцессСсылка,
	ТочкаМаршрута,
	КодЯзыкаПолучателя) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("СписокВариантовОтветов", Новый СписокЗначений);
	Результат.Вставить("ИспользоватьКомментарий", Истина);
	
	Если ТочкаМаршрута = ТочкиМаршрута.Рассмотреть Тогда
		
		Результат.СписокВариантовОтветов.Добавить(
			Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно,
			НСтр("ru = 'Рассмотрено'", КодЯзыкаПолучателя));
		
		ДействиеЗадачи = ДействияВызовСервера.ДействиеИРеквизитыЗадачи(ЗадачаСсылка).Действие;
		
		АктуальныеПомощники = ЗамещающиеИПомощники.ПодходящиеЗамещения(ДействиеЗадачи,
			Перечисления.ВидыЗамещения.Помощники);
		
		Если АктуальныеПомощники.Количество() > 0 Тогда
			Результат.СписокВариантовОтветов.Добавить(
				Перечисления.ВариантыВыполненияПроцессовИЗадач.ПоложительноСЗамечаниями,
				НСтр("ru = 'Направить помощнику'", КодЯзыкаПолучателя));
		Иначе
			Результат.СписокВариантовОтветов.Добавить(
				Перечисления.ВариантыВыполненияПроцессовИЗадач.ПоложительноСЗамечаниями,
				НСтр("ru = 'Направить автору'", КодЯзыкаПолучателя));
		КонецЕсли;
		
	ИначеЕсли ТочкаМаршрута = ТочкиМаршрута.Ознакомиться Тогда
		
		Результат.СписокВариантовОтветов.Добавить(
			Перечисления.ВариантыВыполненияПроцессовИЗадач.Положительно,
			НСтр("ru = 'Обработано'", КодЯзыкаПолучателя));
	Иначе
		ВызватьИсключение 
			НСтр("ru = 'Неожиданная точка маршрута задачи.'", КодЯзыкаПолучателя);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Формирует комментарий автоматического выполнения задачи.
//
// Параметры:
//  ТочкаМаршрута - ТочкаМаршрута - Точка маршрута.
//  ВариантВыполнения - Булево - Вариант выполнения.
//
// Возвращаемое значение:
//  Строка - Комментарий автоматического выполнения задачи.
//
Функция КомментарийВыполненаАвтоматически(ТочкаМаршрута, ВариантВыполнения) Экспорт
	
	Комментарий = "";
	
	Если ТочкаМаршрута = ТочкиМаршрута.Рассмотреть Тогда
		Комментарий = НСтр("ru = 'Рассмотрено автоматически'");
	ИначеЕсли ТочкаМаршрута = ТочкиМаршрута.Ознакомиться Тогда
		Комментарий = НСтр("ru = 'Обработано автоматически'");
	КонецЕсли;
	
	Возврат Комментарий;
	
КонецФункции

Функция ПредставлениеРезультатаЗадачи(ЗадачаОбъект) Экспорт
	
	Представление = "";
	
	Если ЗадачаОбъект.ТочкаМаршрута = ТочкиМаршрута.Рассмотреть Тогда
		
		ВариантРассмотрения = 
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗадачаОбъект.БизнесПроцесс, "ВариантРассмотрения");
		
		Если ВариантРассмотрения = Перечисления.ВариантыРассмотрения.НаправитьНаИсполнение Тогда 
			Представление = НСтр("ru = 'Отправлено на исполнение.'");
		ИначеЕсли ВариантРассмотрения = Перечисления.ВариантыРассмотрения.НаправитьНаОзнакомление Тогда 
			Представление = НСтр("ru = 'Отправлено на ознакомление.'");
		ИначеЕсли ВариантРассмотрения = Перечисления.ВариантыРассмотрения.НаправитьПомощнику Тогда 
			Представление = НСтр("ru = 'Отправлено помощнику.'");
		ИначеЕсли ВариантРассмотрения = Перечисления.ВариантыРассмотрения.НаправитьАвтору Тогда 
			Представление = НСтр("ru = 'Отправлено автору.'");
		Иначе
			Представление = НСтр("ru = 'Рассмотрено.'");
		КонецЕсли;
		
	ИначеЕсли ЗадачаОбъект.ТочкаМаршрута = ТочкиМаршрута.Ознакомиться Тогда
		
		ВариантОбработкиРезолюции = 
			ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗадачаОбъект.БизнесПроцесс, "ВариантОбработкиРезолюции");
		
		Если ВариантОбработкиРезолюции = Перечисления.ВариантыОбработкиРезолюции.НаправитьНаИсполнение Тогда
			Представление = НСтр("ru = 'Отправлено на исполнение.'");
		ИначеЕсли ВариантОбработкиРезолюции = Перечисления.ВариантыОбработкиРезолюции.НаправитьНаОзнакомление Тогда
			Представление = НСтр("ru = 'Отправлено на ознакомление.'");
		Иначе
			Представление = НСтр("ru = 'Обработано.'");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

// Возвращает признак того что процесс использует условия выполнения задач.
//
// Параметры:
//  ТочкаМаршрута - ТочкаМаршрутаСсылка - Точка маршрута.
//  Параметры - Структура - Параметры.
// 
// Возвращаемое значение:
//  Булево - Использует условия выполнения задач.
//
Функция ИспользуетУсловияЗапретаВыполненияЗадач(ТочкаМаршрута = Неопределено, Параметры = Неопределено) Экспорт
	
	Если Параметры = Неопределено Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	
	ИспользуетУсловияЗапретаВыполненияЗадач = Истина;
	
	Возврат ИспользуетУсловияЗапретаВыполненияЗадач;
	
КонецФункции

// Возвращает обрабатывающего резолюцию по задаче рассматривающего.
//
// Параметры:
//	Задача - ЗадачаСсылка.ЗадачаИсполнителя,
//           ЗадачаОбъект.ЗадачаИсполнителя,
//           ДанныеФормыСтруктура - задачу рассматривающего.
//  ДействиеЗадачи - СправочникСсылка.ДействияЗадач, Неопределено
//
// Возвращаемое значение:
//  СправочникСсылка.Сотрудники, СправочникСсылка.ПолныеРоли
//
Функция ОбрабатывающийРезолюцию(ЗадачаПроцесса, ДействиеЗадачи) Экспорт
	
	Если ТипЗнч(ЗадачаПроцесса) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		БизнесПроцесс = ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
			ЗадачаПроцесса,
			"БизнесПроцесс");
	Иначе
		БизнесПроцесс = ЗадачаПроцесса.БизнесПроцесс;
		ЗадачаПроцесса = ЗадачаПроцесса.Задача;
	КонецЕсли;
	
	ОбрабатывающийРезолюцию = ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
		БизнесПроцесс,
		"ОбрабатывающийРезолюцию");
	
	Если ЗначениеЗаполнено(ОбрабатывающийРезолюцию) Тогда
		Возврат ОбрабатывающийРезолюцию;
	КонецЕсли;
	
	АктуальныеПомощники = ЗамещающиеИПомощники.ПодходящиеЗамещения(
		ДействиеЗадачи,
		Перечисления.ВидыЗамещения.Помощники);
	
	Если АктуальныеПомощники.Количество() > 0 Тогда
		ОбрабатывающийРезолюцию = АктуальныеПомощники[0].Замещающий;
	Иначе
		ОбрабатывающийРезолюцию = 
			ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(БизнесПроцесс, "Автор");
	КонецЕсли;
	
	Возврат ОбрабатывающийРезолюцию;

КонецФункции

// Обработчик, вызываемый перед выполнением задачи из процедуры
// ВыполнениеЗадачСервер.ВыполнитьЗадачуСПараметрами
//
// Параметры
//   ЗадачаСсылка  - ЗадачаСсылка.ЗадачаИсполнителя
//   БизнесПроцессСсылка - БизнесПроцессСсылка
//   ТочкаМаршрутаСсылка - точка маршрута
//   ПараметрыВыполнения - Структура
//
Процедура ОбработкаПередВыполнениемЗадачи(
	ЗадачаСсылка, БизнесПроцессСсылка, ТочкаМаршрутаБизнесПроцесса, ПараметрыВыполнения) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ПараметрыВыполнения.Свойство("ИдентификаторБлокировкиПроцесса") Тогда
		ПараметрыВыполнения.Вставить(
			"ИдентификаторБлокировкиПроцесса", Новый УникальныйИдентификатор());
	КонецЕсли;
	
	Если ТочкаМаршрутаБизнесПроцесса = БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Рассмотреть Тогда
		
		ЗаписатьПроцесс = ПараметрыВыполнения.Свойство("НастройкиИсполненияОзнакомления")
			Или ПараметрыВыполнения.Свойство("ИсполнительЗадачи")
			Или ПараметрыВыполнения.Свойство("РезультатВыполнения");
			
		Если ЗаписатьПроцесс Тогда
			ЗаблокироватьДанныеДляРедактирования(
				БизнесПроцессСсылка,, ПараметрыВыполнения.ИдентификаторБлокировкиПроцесса);
			
			РассмотрениеОбъект = БизнесПроцессСсылка.ПолучитьОбъект();
		КонецЕсли;
		
		Если ПараметрыВыполнения.Свойство("НастройкиИсполненияОзнакомления")
			Или ПараметрыВыполнения.Свойство("РезультатВыполнения") Тогда
			
			РассмотрениеОбъект.ДополнительныеСвойства.Вставить("ТекущаяЗадача", ЗадачаСсылка);
			РассмотрениеОбъект.ДополнительныеСвойства.Вставить("ВыполнитьЗадачу", Истина);
			
			Если ПараметрыВыполнения.Свойство("РезультатВыполнения") Тогда
				РассмотрениеОбъект.ДополнительныеСвойства.Вставить(
					"РезультатВыполнения",ПараметрыВыполнения.РезультатВыполнения);
			КонецЕсли;
				
			Если ПараметрыВыполнения.Свойство("НастройкиИсполненияОзнакомления") Тогда
				РассмотрениеОбъект.ДополнительныеСвойства.Вставить(
					"НастройкиИсполненияОзнакомления",
					ПараметрыВыполнения.НастройкиИсполненияОзнакомления);
			КонецЕсли;
			
			Если ПараметрыВыполнения.Свойство("ВариантРассмотрения") Тогда
				РассмотрениеОбъект.ДополнительныеСвойства.Вставить(
					"ВариантРассмотрения", ПараметрыВыполнения.ВариантРассмотрения);
			КонецЕсли;
			
			Если ПараметрыВыполнения.Свойство("ОбрабатывающийРезолюцию") Тогда
				РассмотрениеОбъект.ДополнительныеСвойства.Вставить(
					"ОбрабатывающийРезолюцию", ПараметрыВыполнения.ОбрабатывающийРезолюцию);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПараметрыВыполнения.Свойство("ИсполнительЗадачи")
			И ТипЗнч(РассмотрениеОбъект.Исполнитель) <> Тип("СправочникСсылка.ПолныеРоли")
			И РассмотрениеОбъект.Исполнитель <> ПараметрыВыполнения.ИсполнительЗадачи Тогда
			
			РассмотрениеОбъект.Исполнитель = ПараметрыВыполнения.ИсполнительЗадачи;
			
		КонецЕсли;
		
		Если ЗаписатьПроцесс Тогда
			РаботаСБизнесПроцессами.ЗаписатьПроцесс(РассмотрениеОбъект, "ЗаписьСОбработкойВыполненияЗадачи");
			РазблокироватьДанныеДляРедактирования(
				РассмотрениеОбъект.Ссылка, ПараметрыВыполнения.ИдентификаторБлокировкиПроцесса);
		КонецЕсли;
		
	ИначеЕсли ТочкаМаршрутаБизнесПроцесса = БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Ознакомиться Тогда
		
		ЗаписатьПроцесс = ПараметрыВыполнения.Свойство("НастройкиИсполненияОзнакомления")
			Или ПараметрыВыполнения.Свойство("ИсполнительЗадачи")
			Или ПараметрыВыполнения.Свойство("ВариантОбработкиРезолюции");
			
		Если ЗаписатьПроцесс Тогда
			
			ЗаблокироватьДанныеДляРедактирования(
				БизнесПроцессСсылка,, ПараметрыВыполнения.ИдентификаторБлокировкиПроцесса);
			
			РассмотрениеОбъект = БизнесПроцессСсылка.ПолучитьОбъект();
			
			РассмотрениеОбъект.ДополнительныеСвойства.Вставить("ТекущаяЗадача", ЗадачаСсылка);
			РассмотрениеОбъект.ДополнительныеСвойства.Вставить("ВыполнитьЗадачу", Истина);
			
			Если ПараметрыВыполнения.Свойство("ВариантОбработкиРезолюции") Тогда
				РассмотрениеОбъект.ДополнительныеСвойства.Вставить("ВариантОбработкиРезолюции",
					ПараметрыВыполнения.ВариантОбработкиРезолюции);
			КонецЕсли;
			
		КонецЕсли;
			
		Если ПараметрыВыполнения.Свойство("НастройкиИсполненияОзнакомления") Тогда
			РассмотрениеОбъект.ДополнительныеСвойства.Вставить(
				"НастройкиИсполненияОзнакомления",
				ПараметрыВыполнения.НастройкиИсполненияОзнакомления);
		КонецЕсли;
		
		Если ПараметрыВыполнения.Свойство("ИсполнительЗадачи")
			И ТипЗнч(РассмотрениеОбъект.ОбрабатывающийРезолюцию) <> Тип("СправочникСсылка.ПолныеРоли")
			И РассмотрениеОбъект.ОбрабатывающийРезолюцию <> ПараметрыВыполнения.ИсполнительЗадачи Тогда
			
			РассмотрениеОбъект.ОбрабатывающийРезолюцию = ПараметрыВыполнения.ИсполнительЗадачи;
		КонецЕсли;
		
		Если ЗаписатьПроцесс Тогда
			РаботаСБизнесПроцессами.ЗаписатьПроцесс(РассмотрениеОбъект, "ЗаписьСОбработкойВыполненияЗадачи");
			РазблокироватьДанныеДляРедактирования(
				РассмотрениеОбъект.Ссылка, ПараметрыВыполнения.ИдентификаторБлокировкиПроцесса);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик, вызываемый после выполнением задачи из процедуры
// ВыполнениеЗадачСервер.ВыполнитьЗадачуСПараметрами
//
// Параметры
//   ЗадачаСсылка  - ЗадачаСсылка.ЗадачаИсполнителя
//   БизнесПроцессСсылка - БизнесПроцессСсылка
//   ТочкаМаршрутаСсылка - точка маршрута
//   ПараметрыВыполнения - Структура
//
Процедура ОбработкаПослеВыполненияЗадачи(
	ЗадачаСсылка, БизнесПроцессСсылка, ТочкаМаршрутаБизнесПроцесса, ПараметрыВыполнения) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеЗадачиТочекДействий

// Проверяет является ли переданная задача процесса служебной.
//
// Параметры:
//  Задача - ЗадачаОбъект.ЗадачаИсполнителя,
//           ЗадачаСсылка.ЗадачаИсполнителя,
//           Структура со свойствами Исполнитель, РольИсполнителя, ТочкаМаршрута, Наименование
//
// Возвращаемое значение:
//  Булево
//
Функция ЭтаСлужебнаяЗадачаПроцесса(ЗадачаПроцесса) Экспорт
	
	// Служебных задач не предусмотрено.
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область Предметы

// Возвращает участников для проверки прав на предметы.
//
// Параметры:
//  Процесс - БизнесПроцессОбъект, БизнесПроцессСсылка - процесс
//
// Возвращаемое значение:
//  ТаблицаЗначений
//   * Участник
//   * Изменение
//
Функция УчастникиДляПроверкиПрав(Процесс) Экспорт
	
	ТаблицаУчастников = РаботаСРабочимиГруппами.ПолучитьПустуюТаблицуУчастников();
	
	РаботаСБизнесПроцессами.ДобавитьУчастниковРассмотренияВТаблицу(ТаблицаУчастников, Процесс);
	
	Возврат ТаблицаУчастников;
	
КонецФункции

// Возвращает массив доступных типов основных предметов
Функция ТипыОсновныхПредметов() Экспорт
	
	ТипыПредметов = Новый Массив;
	
	ТипыПредметов.Добавить(Тип("СправочникСсылка.ДокументыПредприятия"));  
	ТипыПредметов.Добавить(Тип("СправочникСсылка.Контрагенты")); 
	ТипыПредметов.Добавить(Тип("СправочникСсылка.Мероприятия")); 
	ТипыПредметов.Добавить(Тип("СправочникСсылка.Проекты")); 
	ТипыПредметов.Добавить(Тип("СправочникСсылка.ПроектныеЗадачи"));
	ТипыПредметов.Добавить(Тип("СправочникСсылка.СообщенияОбсуждений")); 
	ТипыПредметов.Добавить(Тип("СправочникСсылка.ТемыОбсуждений"));
	ТипыПредметов.Добавить(Тип("СправочникСсылка.Файлы"));
	
	ТипыПредметов.Добавить(Тип("ДокументСсылка.ВходящееПисьмо")); 
	ТипыПредметов.Добавить(Тип("ДокументСсылка.ИсходящееПисьмо")); 
	
	Возврат ТипыПредметов;
	
КонецФункции

// Возвращает доступные для процесса роли предметов
Функция ПолучитьДоступныеРолиПредметов() Экспорт
	
	РолиПредметов = Новый Массив;
	
	РолиПредметов.Добавить(Перечисления.РолиПредметов.Основной);
	РолиПредметов.Добавить(Перечисления.РолиПредметов.Вспомогательный);
	
	Возврат РолиПредметов;
	
КонецФункции

// Возвращает авторов резолюций Документа установленные БизнесПроцессом
//
// Возвращаемое значение:
//  Массив - массив авторов резолюций
//
Функция ПолучитьРезолюцииПоБизнесПроцессу(Документ, БизнесПроцесс) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Документ) <> Тип("СправочникСсылка.ДокументыПредприятия") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Резолюции.АвторРезолюции КАК АвторРезолюции
		|ИЗ
		|	Справочник.Резолюции КАК Резолюции
		|ГДЕ
		|	Резолюции.Источник = &Рассмотрение
		|	И Резолюции.Документ = &Ссылка";

	Запрос.УстановитьПараметр("Рассмотрение", БизнесПроцесс);
	Запрос.УстановитьПараметр("Ссылка", Документ);

	Результат = Запрос.Выполнить();
	
	Возврат Результат.Выгрузить().ВыгрузитьКолонку("АвторРезолюции");

КонецФункции

#КонецОбласти

#Область УправлениеДоступом

Функция ПолучитьПоляДоступа() Экспорт
	
	Возврат "Ссылка";
	
КонецФункции

// Заполняет переданный дескриптор доступа 
Процедура ЗаполнитьОсновнойДескриптор(ОбъектДоступа, ДескрипторДоступа) Экспорт
	
	ДескрипторДоступа.ОбъектДоступа = ОбъектДоступа.Ссылка;
	
КонецПроцедуры

Функция ЕстьМетодЗаполнитьДескрипторыОбъекта() Экспорт
	
	Возврат Истина;
	
КонецФункции

Процедура ЗаполнитьДескрипторыОбъекта(ОбъектДоступа, ТаблицаДескрипторов, ПротоколРасчетаПрав = Неопределено) Экспорт
	
	// Только основной дескриптор, без рабочей группы.
	ДокументооборотПраваДоступа.ЗаполнитьДескрипторОбъектаОсновной(ОбъектДоступа, ТаблицаДескрипторов);
	
КонецПроцедуры

// Возвращает признак того, что менеджер содержит метод ЗапросДляРасчетаПрав()
// 
Функция ЕстьМетодЗапросДляРасчетаПрав() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает запрос для расчета прав доступа по дескрипторам объекта
// 
// Параметры:
//  
//  Дескрипторы - Массив - массив дескрипторов, чьи права нужно рассчитать
//  ИдОбъекта - Ссылка - идентификатор объекта метаданных, назначенный переданным дескрипторам
//  МенеджерОбъектаДоступа - СправочникМенеджер, ДокументМенеджер - менеджер объекта доступа
// 
// Возвращаемое значение - Запрос - запрос, который выберет права доступа для переданного массива дескрипторов
// 
Функция ЗапросДляРасчетаПрав(Дескрипторы, ИдОбъекта, МенеджерОбъектаДоступа) Экспорт
	
	Возврат БизнесПроцессыИЗадачиСервер.ЗапросДляРасчетаПрав(Дескрипторы, ИдОбъекта, МенеджерОбъектаДоступа);
	
КонецФункции

// Заполняет протокол расчета прав дескрипторов
// 
// Параметры:
//  
//  ПротоколРасчетаПрав - Массив - протокол для заполнения
//  ЗапросПоПравам - Запрос - запрос, который использовался для расчета прав дескрипторов
//  Дескрипторы - Массив - массив дескрипторов, чьи права были рассчитаны
//  
Процедура ЗаполнитьПротоколРасчетаПрав(ПротоколРасчетаПрав, ЗапросПоПравам) Экспорт
	
	БизнесПроцессыИЗадачиСервер.ЗаполнитьПротоколРасчетаПрав(ПротоколРасчетаПрав, ЗапросПоПравам);
	
КонецПроцедуры

// Проверяет наличие метода.
// 
Функция ЕстьМетодПраваСотрудниковПоФайлам() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Возвращает права доступа пользователей к переданным файлам.
// 
Функция ПраваСотрудниковПоФайлам(Файлы, СотрудникиОтбор = Неопределено) Экспорт
	
	Возврат БизнесПроцессыИЗадачиСервер.ПраваСотрудниковПоФайлам(Файлы, СотрудникиОтбор);
	
КонецФункции

// Возвращает массив пользователей переданного бизнес-процесса,
// которые должны иметь иметь права на другие бизнес-процессы, 
// для которых данный бизнес-процесс является ведущим
Функция ПользователиВедущегоБизнесПроцесса(ВедущийБизнесПроцесс) Экспорт
	
	МассивПользователей = Новый Массив;
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВедущийБизнесПроцесс, "Автор");
	Если ЗначениеЗаполнено(Реквизиты.Автор) Тогда
		МассивПользователей.Добавить(Реквизиты.Автор);
	КонецЕсли;
	
	Возврат МассивПользователей;
	
КонецФункции

// Возвращает массив пользователей переданного бизнес-процесса,
// которые должны иметь иметь права на другие бизнес-процессы, 
// для которых данный бизнес-процесс является ведущим
Функция УчастникиПроцессаВлияющиеНаДоступКПодчиненнымОбъектам(Процесс) Экспорт
	
	МассивПользователей = Новый Массив;
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Процесс, "Автор, Проект");
	Если ЗначениеЗаполнено(Реквизиты.Автор) Тогда
		ДанныеУчастника = Новый Структура(
			"Участник");
		ДанныеУчастника.Участник = Реквизиты.Автор;
		МассивПользователей.Добавить(ДанныеУчастника);
	КонецЕсли;
	
	// Добавление руководителя проекта
	Если ЗначениеЗаполнено(Реквизиты.Проект) Тогда
		
		РуководительПроекта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Реквизиты.Проект, "Руководитель");
		Если ЗначениеЗаполнено(РуководительПроекта) Тогда
			ДанныеУчастника = Новый Структура(
				"Участник");
			ДанныеУчастника.Участник = РуководительПроекта;
			МассивПользователей.Добавить(ДанныеУчастника);
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат МассивПользователей;
	
КонецФункции

// Возвращает массив структур, содержащих описания участников.
// Состав структуры:
//   ТабличнаяЧасть - имя ТЧ, в которой хранятся данные участников. Если данные хранятся в шапке, этот ключ отсутствует.
//   ИмяУчастника - имя реквизита шапки или ТЧ, в котором хранится ссылка на участника.
//   ВлияетНаДоступКПодчиненнымОбъектам - признак, указывающий на необходимость пересчета прав 
//   задач и дочерних процессов при изменении данного участника.
//
Функция ЗаполнитьОписанияУчастников() Экспорт
	
	МассивОписанийУчастников = Новый Массив;
	
	// Автор
	МассивОписанийУчастников.Добавить(Новый Структура(
		"ИмяУчастника,
		|ВлияетНаДоступКПодчиненнымОбъектам", 
		"Автор",
		Истина));
	
	// ОбрабатывающийРезолюцию
	МассивОписанийУчастников.Добавить(Новый Структура(
		"ИмяУчастника,
		|ВлияетНаДоступКПодчиненнымОбъектам", 
		"ОбрабатывающийРезолюцию",
		Ложь));
	
	// Исполнитель
	МассивОписанийУчастников.Добавить(Новый Структура(
		"ИмяУчастника,
		|ВлияетНаДоступКПодчиненнымОбъектам", 
		"Исполнитель",
		Ложь));
		
	// Проект
	МассивОписанийУчастников.Добавить(Новый Структура(
		"ИмяУчастника,
		|ВлияетНаДоступКПодчиненнымОбъектам",
		"Проект",
		Ложь));
		
	Возврат МассивОписанийУчастников;
		
КонецФункции

#КонецОбласти

#Область РабочиеГруппы

// Возвращает признак наличия метода ДобавитьУчастниковВТаблицу у менеджера объекта
//
Функция ЕстьМетодДобавитьУчастниковВТаблицу() Экспорт
	Возврат Истина;
КонецФункции

// Добавляет участников бизнес-процесса в переданную таблицу
//
Процедура ДобавитьУчастниковВТаблицу(ТаблицаНабора, БизнесПроцесс) Экспорт
	
	РаботаСБизнесПроцессами.ДобавитьУчастниковРассмотренияВТаблицу(ТаблицаНабора, БизнесПроцесс);
	
КонецПроцедуры

#КонецОбласти

#Область УчетПереносовСроковИсполнения

// Устанавливает срок исполнителю задачи в процессе.
//
// Параметры:
//  Срок - Дата - новый срок исполнителя.
//  Задача - ЗадачаСсылка.ЗадачаИсполнителя - задача исполнителя.
//  Процесс - БизнесПроцессОбъект - изменяемый процесс.
//  ПараметрыИзмененногоРеквизита - Структура - параметры измененного реквизита процесса.
//   * РеквизитТаблицаСИзмененнымСроком - Строка - имя реквизита или табличной части процесса.
//   * ИндексСтроки - Число - индекс строки табличной части. Присутствует если изменяется табличная часть.
//
Процедура УстановитьСрокИсполнителяЗадачиВПроцессе(
	Срок, Задача, Процесс, ПараметрыИзмененногоРеквизита) Экспорт
	
	ПараметрыИзмененногоРеквизита = Новый Структура;
	ПараметрыИзмененногоРеквизита.Вставить("РеквизитТаблицаСИзмененнымСроком", "");
	ПараметрыИзмененногоРеквизита.Вставить("ИндексСтроки", 0);
	
	ТочкаМаршрутаЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задача, "ТочкаМаршрута");
	
	Если ТочкаМаршрутаЗадачи = ТочкиМаршрута.Рассмотреть Тогда
		Процесс.СрокИсполнения = Срок;
		
		Процесс.ВариантУстановкиСрокаИсполнения = 
			Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
		
		ПараметрыИзмененногоРеквизита.РеквизитТаблицаСИзмененнымСроком = "СрокИсполнения";
		
	ИначеЕсли ТочкаМаршрутаЗадачи = ТочкиМаршрута.Ознакомиться Тогда
		Процесс.СрокОбработкиРезультатов = Срок;
		
		Процесс.ВариантУстановкиСрокаОбработкиРезультатов = 
			Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
			
		ПараметрыИзмененногоРеквизита.РеквизитТаблицаСИзмененнымСроком = "СрокОбработкиРезультатов";
	КонецЕсли;
	
КонецПроцедуры

// Переносит срок исполнения задачи процесса по заявке.
// При переносе обновляются сроки в текущем и зависимых процессах.
//
// Параметры:
//	Задача - ЗадачаСсылка.ЗадачаИсполнителя - Ссылка на задачу.
//	ПараметрыВыполнения - Структура:
//		* НовыйСрок - Дата - Новый срок задачи.
//		* Процесс - БизнесПроцессСсылка - Ссылка на процесс задачи.
//		* ПричинаПереносаСрока - Строка - Причина, по которой переносится срок задачи.
//		* ЗаявкаНаПереносСрока - БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач - Заявка на перенос срока.
//
Процедура ИзменитьСрокИсполненияЗадачи(Задача, ПараметрыВыполнения) Экспорт
	
	Процесс = ПараметрыВыполнения.Процесс;
	НовыйСрок = ПараметрыВыполнения.НовыйСрок;
	ЗаявкаНаПеренос = ПараметрыВыполнения.ЗаявкаНаПереносСрока;
	ПричинаПереносаСрока = ПараметрыВыполнения.ПричинаПереносаСрока;
	
	Если РаботаСПроцессамиПоДействиямСобытия.ОбработатьИзмениеСрокаИсполненияЗадачи(
		НовыйСрок, Задача, ПричинаПереносаСрока, ЗаявкаНаПеренос) Тогда
		
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	ЗаблокироватьДанныеДляРедактирования(Процесс);
	
	ПроцессОбъект = Процесс.ПолучитьОбъект();
	
	СтарыеУчастникиПроцесса = ТекущиеУчастникиПроцесса(ПроцессОбъект);
	
	ПараметрыИзмененногоРеквизита = Новый Структура;
	
	УстановитьСрокИсполнителяЗадачиВПроцессе(
		НовыйСрок, Задача, ПроцессОбъект, ПараметрыИзмененногоРеквизита);
	
	Если ПараметрыИзмененногоРеквизита.Количество() > 0 Тогда
		
		ПараметрыЗаписи = Новый Структура;
		ПараметрыЗаписи.Вставить("ПричинаПереносаСрока", ПричинаПереносаСрока);
		ПараметрыЗаписи.Вставить("БизнесПроцессПереноса", ЗаявкаНаПеренос);
		
		ПереносСроковВыполненияЗадач.ПередатьПричинуИЗаявкуНаПереносаСрока(
			ПроцессОбъект, ПараметрыЗаписи);
		
		ПараметрыДляРасчетаСроков = СрокиИсполненияПроцессов.ПараметрыДляРасчетаСроков();
		
		ПараметрыДляРасчетаСроков.ДатаОтсчета = 
			СрокиИсполненияПроцессов.ДатаОтсчетаДляРасчетаСроковПроцесса(ПроцессОбъект);
			
		ПараметрыДляРасчетаСроков.РеквизитТаблицаСИзмененнымСроком = 
			ПараметрыИзмененногоРеквизита.РеквизитТаблицаСИзмененнымСроком;
		
		СрокиИсполненияПроцессов.РассчитатьСрокиРассмотрения(
			ПроцессОбъект, ПараметрыДляРасчетаСроков);
		
		РаботаСБизнесПроцессами.ЗаписатьПроцесс(
			ПроцессОбъект, "ЗаписьСОбновлениемОбщегоСпискаИПереносомСроковВИерархииПроцессов");
		
		ПроцессОбъект.ИзменитьРеквизитыНевыполненныхЗадач(СтарыеУчастникиПроцесса, ПараметрыЗаписи);
	КонецЕсли;
	
	РазблокироватьДанныеДляРедактирования(Процесс);
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

#КонецОбласти

#Область СрокиИсполненияПроцессов

// Возвращает даты исполнения участников процесса.
//
// Параметры:
//  Процесс - БизнесПроцессСсылка.Рассмотрение - ссылка на процесс
//
// Возвращаемое значение:
//  Соответствие
//   * Ключ - Строка, ЗадачаСсылка.ЗадачаИсполнителя - имя реквизита с участником процесса или ссылка на его задачу.
//
Функция ДатыИсполненияУчастников(Процесс) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДатыИсполнения = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Процесс", Процесс);
	
	// Получение даты исполнения исполнителем.
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗадачаИсполнителя.ДатаИсполнения КАК ДатаИсполнения
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс = &Процесс
		|	И ЗадачаИсполнителя.ТочкаМаршрута = ЗНАЧЕНИЕ(Бизнеспроцесс.Рассмотрение.ТочкаМаршрута.Рассмотреть)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДатыИсполнения.Вставить("Исполнитель", Выборка.ДатаИсполнения);
	КонецЕсли;
	
	// Получение даты исполнения обработки результов.
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗадачаИсполнителя.ДатаИсполнения КАК ДатаИсполнения
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс = &Процесс
		|	И ЗадачаИсполнителя.ТочкаМаршрута = ЗНАЧЕНИЕ(Бизнеспроцесс.Рассмотрение.ТочкаМаршрута.Ознакомиться)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДатыИсполнения.Вставить("ОбрабатывающийРезолюцию", Выборка.ДатаИсполнения);
	КонецЕсли;
	
	Возврат ДатыИсполнения;
	
КонецФункции

#КонецОбласти

#Область ПоддержкаКомплексныхПроцессов

#Область КэшДанныхДействий

// Возвращает выборку данных действий.
//
// Параметры:
//  ТаблицаДействий - ТаблицаЗначений
//   * Действие - ОпределяемыйТип.ШаблонДействияКомплексногоПроцесса
//
// Возвращаемое значение:
//  ВыборкаДанных
//
Функция ВыборкаДанныхДействий(ТаблицаДействий) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаДействий.Действие
		|ПОМЕСТИТЬ ТаблицаДействий
		|ИЗ
		|	&ТаблицаДействий КАК ТаблицаДействий
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Рассмотрение.Ссылка,
		|	Рассмотрение.Наименование,
		|	Рассмотрение.Исполнитель,
		|	Рассмотрение.СрокИсполненияПроцесса,
		|	Рассмотрение.Состояние,
		|	Рассмотрение.Завершен,
		|	Рассмотрение.ДатаЗавершения
		|ИЗ
		|	ТаблицаДействий КАК ТаблицаДействий
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БизнесПроцесс.Рассмотрение КАК Рассмотрение
		|		ПО ТаблицаДействий.Действие = Рассмотрение.Ссылка";
		
	Запрос.УстановитьПараметр("ТаблицаДействий", ТаблицаДействий);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

// Возвращает данные процесса, являющегося действием комплексного процесса.
//
// Параметры:
//  Объект - БизнесПроцессСсылка.Рассмотрение, ВыборкаДанных
//
// Возвращаемое значение:
//  Структура - см. функцию РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтруктураДанныхДействия
//
Функция ДанныеДействия(Объект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДанныеПроцесса = РаботаСКомплекснымиБизнесПроцессамиКлиентСервер.СтруктураДанныхДействия();
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Объект)) Тогда
		РеквизитыОбъекта = 
			ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				Объект, "Наименование, Исполнитель, СрокИсполненияПроцесса,
					|Состояние, Завершен, ДатаЗавершения");
	Иначе
		РеквизитыОбъекта = Объект;
	КонецЕсли;
	
	ДанныеПроцесса.Описание = НСтр("ru = 'Рассмотрение: '") + РеквизитыОбъекта.Наименование;
	
	ДанныеПроцесса.СрокИсполненияПроцесса = РеквизитыОбъекта.СрокИсполненияПроцесса;
	
	МассивИсполнителей = Новый Массив;
	РаботаСКомплекснымиБизнесПроцессамиСервер.ДобавитьИсполнителяПроцессаВМассив(
		МассивИсполнителей, РеквизитыОбъекта.Исполнитель);
		
	ДанныеПроцесса.Исполнители = 
		РаботаСКомплекснымиБизнесПроцессамиСервер.ИсполнителиСтрокой(МассивИсполнителей);
	
	ДанныеПроцесса.СостояниеПроцесса = РеквизитыОбъекта.Состояние;
	
	ДанныеПроцесса.ПроцессЗавершен = РеквизитыОбъекта.Завершен;
	
	ДанныеПроцесса.ДатаЗавершения = РеквизитыОбъекта.ДатаЗавершения;
	
	Возврат ДанныеПроцесса;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт

КонецПроцедуры

Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт

КонецПроцедуры

#КонецОбласти

#Область НастройкиИсполненияОзнакомления

// Возвращает пустую структуру настроек исполнения/ознакомления.
//
// Возвращаемое значение:
//  Структура:
//    * ШаблонИсполнения - СправочникСсылка.ШаблоныИсполнения
//    * НаименованиеИсполнения - Строка
//    * ОписаниеИсполнения - Строка
//    * ВажностьИсполнения - ПеречислениеСсылка.ВариантыВажностиОбъектов
//    * ВариантИсполнения - ПеречислениеСсылка.ВариантыМаршрутизацииЗадач
//    * ИсполнителиИсполнения - ТаблицаЗначений:
//       ** ВариантУстановкиСрокаИсполнения - ПеречислениеСсылка.ВариантыУстановкиСрокаИсполнения
//       ** ИдентификаторИсполнителя - УникальныйИдентификатор
//       ** Исполнитель - СправочникСсылка.Сотрудники, СправочникСсылка.ПолныеРоли, СправочникСсылка.Пользователи
//       ** Описание - Строка
//       ** Ответственный - Строка
//       ** ПорядокИсполнения - ПеречислениеСсылка.ПорядокВыполненияЗадач
//       ** СрокИсполнения - Дата
//       ** СрокИсполненияДни - Число
//       ** СрокИсполненияМинуты - Число
//       ** СрокИсполненияЧасы - Число
//       ** ТрудозатратыПланИсполнителя - Число
//    * ПроверяющийИсполнения - СправочникСсылка.Сотрудники, СправочникСсылка.ПолныеРоли, СправочникСсылка.Пользователи
//    * ИдентификаторПроверяющего - УникальныйИдентификатор
//    * ТрудозатратыПланПроверяющего - Число
//    * ВариантУстановкиСрокаОбработкиРезультатовИсполнения - ПеречислениеСсылка.ВариантыУстановкиСрокаИсполнения
//    * СрокОбработкиРезультатовИсполнения - Дата
//    * СрокОбработкиРезультатовДниИсполнения - Число
//    * СрокОбработкиРезультатовЧасыИсполнения - Число
//    * СрокОбработкиРезультатовМинутыИсполнения - Число
//    * КоличествоИтерацийИсполнения - Число
//    * КонтролерИсполнения - СправочникСсылка.Сотрудники, СправочникСсылка.ПолныеРоли, СправочникСсылка.Пользователи
//    * ИдентификаторКонтролера - УникальныйИдентификатор
//    * ТрудозатратыПланКонтролера - Число
//    * СрокИсполненияПроцессаИсполнения - Дата
//    * ШаблонОзнакомления - СправочникСсылка.ШаблоныОзнакомления
//    * НаименованиеОзнакомления - Строка
//    * ОписаниеОзнакомления - Строка
//    * ВажностьОзнакомления - ПеречислениеСсылка.ВариантыВажностиОбъектов
//    * ИсполнителиОзнакомления - ТаблицаЗначений:
//       ** ВариантУстановкиСрокаИсполнения - ПеречислениеСсылка.ВариантыУстановкиСрокаИсполнения
//       ** ИдентификаторИсполнителя - УникальныйИдентификатор
//       ** Исполнитель - СправочникСсылка.Сотрудники, СправочникСсылка.ПолныеРоли, СправочникСсылка.Пользователи
//       ** СрокИсполнения - Дата
//       ** СрокИсполненияДни - Число
//       ** СрокИсполненияМинуты - Число
//       ** СрокИсполненияЧасы - Число
//       ** ТрудозатратыПланИсполнителя - Число
//    * ТрудозатратыПланИсполнителяОзнакомления - Число
//    * СрокИсполненияПроцессаОзнакомления - Дата
//
Функция СтруктураНастройкиИсполненияОзнакомленияПроцесса() Экспорт
	
	СтруктураНастройки = Новый Структура;
	
	МетаданныеПроцесса = Метаданные.БизнесПроцессы.Рассмотрение;
	
	// Исполнение
	
	СтруктураНастройки.Вставить("ШаблонИсполнения", Справочники.ШаблоныИсполнения.ПустаяСсылка());
	СтруктураНастройки.Вставить("НаименованиеИсполнения", "");
	СтруктураНастройки.Вставить("ОписаниеИсполнения", "");
	СтруктураНастройки.Вставить("ВажностьИсполнения", Перечисления.ВариантыВажностиОбъектов.ПустаяСсылка());
	СтруктураНастройки.Вставить("ВариантИсполнения", Перечисления.ВариантыМаршрутизацииЗадач.ПустаяСсылка());
	
	ИсполнителиИсполнения = Новый ТаблицаЗначений;
	Для Каждого Колонка Из МетаданныеПроцесса.ТабличныеЧасти.ИсполнителиИсполнения.Реквизиты Цикл
		ИсполнителиИсполнения.Колонки.Добавить(
			Колонка.Имя,
			Колонка.Тип);
	КонецЦикла;
	СтруктураНастройки.Вставить("ИсполнителиИсполнения", ИсполнителиИсполнения);
	
	СтруктураНастройки.Вставить("ПроверяющийИсполнения", Неопределено);
	СтруктураНастройки.Вставить("ИдентификаторПроверяющего", УникальныйИдентификаторПустой());
	СтруктураНастройки.Вставить("ТрудозатратыПланПроверяющего", 0);
	
	СтруктураНастройки.Вставить("ВариантУстановкиСрокаОбработкиРезультатовИсполнения",
		Перечисления.ВариантыУстановкиСрокаИсполнения.ПустаяСсылка());
	
	СтруктураНастройки.Вставить("СрокОбработкиРезультатовИсполнения", Дата(1,1,1));
	СтруктураНастройки.Вставить("СрокОбработкиРезультатовДниИсполнения", 0);
	СтруктураНастройки.Вставить("СрокОбработкиРезультатовЧасыИсполнения", 0);
	СтруктураНастройки.Вставить("СрокОбработкиРезультатовМинутыИсполнения", 0);
	
	СтруктураНастройки.Вставить("КоличествоИтерацийИсполнения", 1);
	
	СтруктураНастройки.Вставить("КонтролерИсполнения", Неопределено);
	СтруктураНастройки.Вставить("ИдентификаторКонтролера", УникальныйИдентификаторПустой());
	СтруктураНастройки.Вставить("ТрудозатратыПланКонтролера", 0);
	
	СтруктураНастройки.Вставить("СрокИсполненияПроцессаИсполнения", Дата(1,1,1));
	
	// Ознакомление
	
	СтруктураНастройки.Вставить("ШаблонОзнакомления", Справочники.ШаблоныОзнакомления.ПустаяСсылка());
	СтруктураНастройки.Вставить("НаименованиеОзнакомления", "");
	СтруктураНастройки.Вставить("ОписаниеОзнакомления", "");
	СтруктураНастройки.Вставить("ВажностьОзнакомления", Перечисления.ВариантыВажностиОбъектов.ПустаяСсылка());
	
	ИсполнителиОзнакомления = Новый ТаблицаЗначений;
	Для Каждого Колонка Из МетаданныеПроцесса.ТабличныеЧасти.ИсполнителиОзнакомления.Реквизиты Цикл
		ИсполнителиОзнакомления.Колонки.Добавить(
			Колонка.Имя,
			Колонка.Тип);
	КонецЦикла;
	СтруктураНастройки.Вставить("ИсполнителиОзнакомления", ИсполнителиОзнакомления);
	
	СтруктураНастройки.Вставить("ТрудозатратыПланИсполнителяОзнакомления", 0);
	СтруктураНастройки.Вставить("СрокИсполненияПроцессаОзнакомления", Дата(1,1,1));
	
	Возврат СтруктураНастройки;
	
КонецФункции

// Возвращает настройки исполнения, ознакомления заданные в процессе рассмотрения.
//
// Параметры:
//  Процесс - БизнесПроцессСсылка.Рассмотрение - ссылка на процесс.
//
// Возвращаемое значение:
//  Структура - см. СтруктураИсполненияОзнакомленияПроцесса
//
Функция НастройкиИсполненияОзнакомленияПроцесса(Процесс) Экспорт
	
	// Заполнение настроек процессов Исполнения и Ознакомления.
	СтруктураНастройки = СтруктураНастройкиИсполненияОзнакомленияПроцесса();
	
	СтрокаРеквизитовРассмотрения = Новый Массив;
	Для Каждого КлючЗначение Из СтруктураНастройки Цикл
		СтрокаРеквизитовРассмотрения.Добавить(КлючЗначение.Ключ);
	КонецЦикла;
	
	РеквизитыРассмотрения =
		ОбщегоНазначенияДокументооборот.ЗначенияРеквизитовОбъектаВПривилегированномРежиме(
		Процесс, СтрСоединить(СтрокаРеквизитовРассмотрения, ", "));
	
	РеквизитыРассмотрения.ИсполнителиИсполнения = 
		РеквизитыРассмотрения.ИсполнителиИсполнения.Выгрузить();
	
	РеквизитыРассмотрения.ИсполнителиОзнакомления = 
		РеквизитыРассмотрения.ИсполнителиОзнакомления.Выгрузить();
	
	Возврат РеквизитыРассмотрения;
	
КонецФункции

// Записывает настройки Исполнения и Ознакомления процесса.
//
// Параметры:
//  Процесс - БизнесПроцессСсылка.Рассмотрение - ссылка на процесс.
//  Настройки - Структура - см. НастройкиИсполненияОзнакомленияПроцесса
//
Процедура ЗаписатьНастройкиИсполненияОзнакомления(Процесс, Настройки) Экспорт
	
	ЗаблокироватьДанныеДляРедактирования(Процесс);
	
	ПроцессОбъект = Процесс.ПолучитьОбъект();
	
	ЗаполнитьЗначенияСвойств(ПроцессОбъект, Настройки,,
		"ИсполнителиИсполнения, ИсполнителиОзнакомления");
	
	ПроцессОбъект.ИсполнителиИсполнения.Загрузить(
		Настройки.ИсполнителиИсполнения);
	
	ПроцессОбъект.ИсполнителиОзнакомления.Загрузить(
		Настройки.ИсполнителиОзнакомления);
	
	РаботаСБизнесПроцессами.ЗаписатьПроцесс(ПроцессОбъект, "ПростаяЗапись");
	
КонецПроцедуры

#КонецОбласти

// Возвращает тип шаблона бизнес-процесса, соответствующего данному процессу
Функция ТипШаблона() Экспорт
	
	Возврат "Справочник.ШаблоныРассмотрения";
	
КонецФункции

// Показывает, может ли процесс запускаться через привычные интерфейсы
Функция МожетЗапускатьсяИнтерактивно() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Проверяет, что процесс завершился удачно
Функция ПроцессЗавершилсяУдачно(Ссылка) Экспорт
	
	Результат = Ложь;
	РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "Завершен");
	Результат = РеквизитыПроцесса.Завершен;
	
	Возврат Результат;
	
КонецФункции

// Проверяет, подходит ли объект к шаблону бизнес-процесса
Функция ШаблонПодходитДляАвтозапускаБизнесПроцессаПоОбъекту(ШаблонСсылка, ПредметСсылка, Подписчик, ВидСобытия, Условие) Экспорт
	
	Возврат Истина;
	
КонецФункции

// Заполняет html обзор данными процесса.
//
// Параметры:
//   HTMLТекст - Строка
//   Шаблон - БизнесПроцессСсылка.Рассмотрение - ссылка на процесс
//
Процедура ЗаполнитьОбзорПроцесса(HTMLТекст, Процесс) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Процесс,
		"Исполнитель,
		|СрокИсполненияПроцесса,
		|СрокОбработкиРезультатов,
		|СрокОбработкиРезультатовДни,
		|СрокОбработкиРезультатовМинуты,
		|СрокОбработкиРезультатовЧасы,
		|СрокИсполнения,
		|СрокИсполненияДни,
		|СрокИсполненияЧасы,
		|СрокИсполненияМинуты,
		|ВариантУстановкиСрокаИсполнения,
		|ВариантУстановкиСрокаОбработкиРезультатов,
		|СрокИсполненияПроцесса,
		|ДатаЗавершения");
		
	Исполнитель = РеквизитыПроцесса.Исполнитель;
	СрокИсполненияПроцесса = РеквизитыПроцесса.СрокИсполненияПроцесса;
	ДатаЗавершения = РеквизитыПроцесса.ДатаЗавершения;
	
	ДатыИсполненияУчастников = ДатыИсполненияУчастников(Процесс);
	
	ЦветЗакрытыеНеактуальныеЗаписи = ОбзорПроцессовВызовСервера.ЦветЗакрытыеНеактуальныеЗаписи();
	
	ЦветПросроченныеДанные = ОбзорПроцессовВызовСервера.ЦветПросроченныеДанные();
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	
	ДатаИсполненияПоУмолчанию = ТекущаяДатаСеанса;
	Если ЗначениеЗаполнено(ДатаЗавершения) Тогда
		ДатаИсполненияПоУмолчанию = ДатаЗавершения;
	КонецЕсли;
	
	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	Если ИспользоватьДатуИВремяВСрокахЗадач Тогда
		ФорматСрока = "ДФ='dd.MM.yyyy HH:mm'";
	Иначе
		ФорматСрока = "ДФ='dd.MM.yyyy'";
	КонецЕсли;
	
	// Исполнитель
	Если ЗначениеЗаполнено(Исполнитель) Тогда
		HTMLТекст = HTMLТекст + "<p>";
		ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = 'Исполнитель: '"));
		
		ЗадачаИсполнителя = ОбзорПроцессовВызовСервера.ПолучитьЗадачуПроцесса(
			Процесс, БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Рассмотреть);
		Если ЗначениеЗаполнено(ЗадачаИсполнителя) Тогда
			
			ЗадачаМассив = Новый Массив;
			ЗадачаМассив.Добавить(ЗадачаИсполнителя);
			РезультатСоответствие 
				= ОбзорПроцессовВызовСервера.РезультатыВыполненияПоОбъектам(ЗадачаМассив, "Задача");
			Если РезультатСоответствие.Количество() <> 0 Тогда	
					
				РезультатВыполненияЗадачи = РезультатСоответствие.Получить(ЗадачаИсполнителя);
				Если РезультатВыполненияЗадачи <> Неопределено Тогда
					
					Картинка = ОбзорПроцессовВызовСервера.ПолучитьКартинкуПоСтатусуВыполнения(
						РезультатВыполненияЗадачи);
					
					ОбзорОбъектовКлиентСервер.ДобавитьКартинку(HTMLТекст, Картинка);
					
				КонецЕсли;
					
			КонецЕсли;		
			
		КонецЕсли;	
		
		ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, Исполнитель, "");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РеквизитыПроцесса.СрокИсполнения) 
		Или ЗначениеЗаполнено(РеквизитыПроцесса.СрокИсполненияДни) 
		Или ЗначениеЗаполнено(РеквизитыПроцесса.СрокИсполненияМинуты) 
		Или ЗначениеЗаполнено(РеквизитыПроцесса.СрокИсполненияЧасы) Тогда
		
		HTMLТекст = HTMLТекст + "<br>";
		
		ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = 'Срок рассмотрения:'"));
		
		ПредставлениеСрока = ОбзорПроцессовВызовСервера.ПредставлениеСрокаИсполнения(
			РеквизитыПроцесса.СрокИсполнения, 
			РеквизитыПроцесса.СрокИсполненияДни, 
			РеквизитыПроцесса.СрокИсполненияЧасы, 
			РеквизитыПроцесса.СрокИсполненияМинуты, 
			ИспользоватьДатуИВремяВСрокахЗадач, 
			РеквизитыПроцесса.ВариантУстановкиСрокаИсполнения);
			
		ДатаИсполнения = ДатыИсполненияУчастников.Получить("Исполнитель");
		Если ЗначениеЗаполнено(ДатаИсполнения) Тогда
			ДатаИсполнения = Мин(ДатаИсполненияПоУмолчанию, ДатаИсполнения);
		Иначе
			ДатаИсполнения = ДатаИсполненияПоУмолчанию;
		КонецЕсли;
		
		ДатаИсполнения = ДатаИсполнения - Секунда(ДатаИсполнения);
		
		ЦветПредставленияСрока = "";
		Если РеквизитыПроцесса.СрокИсполнения < ДатаИсполнения Тогда
			ЦветПредставленияСрока = ЦветПросроченныеДанные;
		КонецЕсли;
			
		ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, ПредставлениеСрока, ЦветПредставленияСрока);
		
	КонецЕсли;
		
	HTMLТекст = HTMLТекст + "<p>";
	HTMLТекст = HTMLТекст + СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		"<A href=v8doc:%1>%2</A>",
		"Подзадачи_" + Процесс.УникальныйИдентификатор() + "_Рассмотрение",
		НСтр("ru = 'Все задачи'"));
		
	Если ЗначениеЗаполнено(РеквизитыПроцесса.СрокОбработкиРезультатов) 
		Или ЗначениеЗаполнено(РеквизитыПроцесса.СрокОбработкиРезультатовДни) 
		Или ЗначениеЗаполнено(РеквизитыПроцесса.СрокОбработкиРезультатовМинуты) 
		Или ЗначениеЗаполнено(РеквизитыПроцесса.СрокОбработкиРезультатовЧасы) Тогда
		
		HTMLТекст = HTMLТекст + "<p>";
		
		ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = 'Срок обработки резолюции:'"));
		
		ПредставлениеСрока = ОбзорПроцессовВызовСервера.ПредставлениеСрокаИсполнения(
			РеквизитыПроцесса.СрокОбработкиРезультатов, 
			РеквизитыПроцесса.СрокОбработкиРезультатовДни, 
			РеквизитыПроцесса.СрокОбработкиРезультатовЧасы, 
			РеквизитыПроцесса.СрокОбработкиРезультатовМинуты, 
			ИспользоватьДатуИВремяВСрокахЗадач, 
			РеквизитыПроцесса.ВариантУстановкиСрокаОбработкиРезультатов);
			
		ДатаИсполнения = ДатыИсполненияУчастников.Получить("ОбрабатывающийРезолюцию");
		Если ЗначениеЗаполнено(ДатаИсполнения) Тогда
			ДатаИсполнения = Мин(ДатаИсполненияПоУмолчанию, ДатаИсполнения);
		Иначе
			ДатаИсполнения = ДатаИсполненияПоУмолчанию;
		КонецЕсли;
		
		ДатаИсполнения = ДатаИсполнения - Секунда(ДатаИсполнения);
		
		ЦветПредставленияСрока = "";
		Если РеквизитыПроцесса.СрокОбработкиРезультатов < ДатаИсполнения Тогда
			ЦветПредставленияСрока = ЦветПросроченныеДанные;
		КонецЕсли;
			
		ОбзорОбъектовКлиентСервер.ДобавитьЗначение(HTMLТекст, ПредставлениеСрока, ЦветПредставленияСрока);
		
	КонецЕсли;
		
	Если ЗначениеЗаполнено(СрокИсполненияПроцесса) Тогда
		
		HTMLТекст = HTMLТекст + "<p>";
		
		Если Не ЗначениеЗаполнено(ДатаЗавершения) Тогда
			ДатаЗавершения = ТекущаяДатаСеанса;
		КонецЕсли;
		
		ДатаЗавершения = ДатаЗавершения - Секунда(ДатаЗавершения);
		
		ЦветПредставленияСрока = "";
		Если СрокИсполненияПроцесса < ДатаЗавершения Тогда
			ЦветПредставленияСрока = ЦветПросроченныеДанные;
		КонецЕсли;
		
		ОбзорОбъектовКлиентСервер.ДобавитьПодпись(HTMLТекст, НСтр("ru = 'Срок процесса:'"));
		ОбзорОбъектовКлиентСервер.ДобавитьЗначение(
			HTMLТекст, Формат(СрокИсполненияПроцесса, ФорматСрока), ЦветПредставленияСрока);
		
	КонецЕсли;
		
КонецПроцедуры

// Возвращает текстовое описание назначения процесса
Функция ПолучитьОписаниеПроцесса() Экспорт
	
	Возврат НСтр("ru = 'Используется для автоматизации рассмотрения документов. Рассматривающий сотрудник оставляет резолюцию по итогам рассмотрения.'");
	
КонецФункции

// Возвращает текущих участников процесса в виде структуры
//
// Параметры:
//   Процесс
//      БизнесПроцессОбъект
//      БизнесПроцессСсылка
//
// Возвращаемое значение:
//   Структура
//
Функция ТекущиеУчастникиПроцесса(Процесс) Экспорт
	
	РеквизитыПроцессаСтрокой = 
		"Автор,
		|ОбрабатывающийРезолюцию,
		|СрокОбработкиРезультатов,
		|СрокОбработкиРезультатовДни,
		|СрокОбработкиРезультатовЧасы,
		|СрокОбработкиРезультатовМинуты,
		|Исполнитель,
		|СрокИсполнения,
		|СрокИсполненияДни,
		|СрокИсполненияЧасы,
		|СрокИсполненияМинуты";
	
	Участники = Новый Структура(РеквизитыПроцессаСтрокой);
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Процесс)) Тогда
		РеквизитыПроцессаПоСсылке = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Процесс, РеквизитыПроцессаСтрокой);
		ЗаполнитьЗначенияСвойств(Участники, РеквизитыПроцессаПоСсылке);
	Иначе
		ЗаполнитьЗначенияСвойств(Участники, Процесс);
	КонецЕсли;
	
	Возврат Участники;
	
КонецФункции

// Возвращает идентификаторы текущих участников процесса.
//
// Параметры:
//   Процесс
//      БизнесПроцессОбъект
//      БизнесПроцессСсылка
//
// Возвращаемое значение:
//   Массив
//    * УникальныйИдентификатор
//
Функция ИдентификаторыТекущихУчастниковПроцесса(Процесс) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИдентификаторыУчастников = Новый Массив;
	
	РеквизитыПроцессаСтрокой = 
		"ИдентификаторИсполнителя,
		|ИдентификаторПомощника";
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Процесс)) Тогда
		РеквизитыПроцесса = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Процесс, РеквизитыПроцессаСтрокой);
	Иначе
		РеквизитыПроцесса = Процесс;
	КонецЕсли;
	
	ИдентификаторыУчастников.Добавить(РеквизитыПроцесса.ИдентификаторИсполнителя);
	ИдентификаторыУчастников.Добавить(РеквизитыПроцесса.ИдентификаторПомощника);
	
	Возврат ИдентификаторыУчастников;
	
КонецФункции

// Возвращает массив всех участников процесса 
Функция ВсеУчастникиПроцесса(ПроцессСсылка) Экспорт
	
	ВсеУчастники = Новый Массив;
	
	КлючевыеУчастники = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПроцессСсылка,
		"Автор,
		| ОбрабатывающийРезолюцию,
		| Исполнитель,
		| КонтролерИсполнения, 
		| ПроверяющийИсполнения");
	
	// Автор
	ДанныеУчастника = Новый Структура;
	ДанныеУчастника.Вставить("Участник", КлючевыеУчастники.Автор);
	ВсеУчастники.Добавить(ДанныеУчастника);

	// Исполнитель
	ДанныеУчастника = Новый Структура;
	ДанныеУчастника.Вставить("Участник", КлючевыеУчастники.Исполнитель);
	ВсеУчастники.Добавить(ДанныеУчастника);
	
	// ОбрабатывающийРезолюцию
	Если ЗначениеЗаполнено(КлючевыеУчастники.ОбрабатывающийРезолюцию) Тогда
		ДанныеУчастника = Новый Структура;
		ДанныеУчастника.Вставить("Участник", КлючевыеУчастники.ОбрабатывающийРезолюцию);
		ВсеУчастники.Добавить(ДанныеУчастника);
	КонецЕсли;	
	
	// Контролер
	Если ЗначениеЗаполнено(КлючевыеУчастники.КонтролерИсполнения) Тогда
		ДанныеУчастника = Новый Структура;
		ДанныеУчастника.Вставить("Участник", КлючевыеУчастники.КонтролерИсполнения);
		ВсеУчастники.Добавить(ДанныеУчастника);
	КонецЕсли;	
	
	// Проверяющий
	Если ЗначениеЗаполнено(КлючевыеУчастники.ПроверяющийИсполнения) Тогда
		ДанныеУчастника = Новый Структура;
		ДанныеУчастника.Вставить("Участник", КлючевыеУчастники.ПроверяющийИсполнения);
		ВсеУчастники.Добавить(ДанныеУчастника);
	КонецЕсли;

	Возврат ВсеУчастники;
	
КонецФункции

// ВерсионированиеОбъектов
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт

КонецПроцедуры
// Конец ВерсионированиеОбъектов

// Определяет список команд заполнения.
//
// Параметры:
//   КомандыЗаполнения - ТаблицаЗначений - Таблица с командами заполнения. Для изменения.
//       См. описание 1 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ЗаполнениеОбъектовПереопределяемый.ПередДобавлениемКомандЗаполнения().
//
Процедура ДобавитьКомандыЗаполнения(КомандыЗаполнения, Параметры) Экспорт
КонецПроцедуры

// Возвращает признак наличия метода РезультатВыполненияПроцесса
Функция ЕстьМетодРезультатВыполненияПроцесса() Экспорт
	Возврат Ложь;
КонецФункции

#КонецОбласти

#КонецЕсли
