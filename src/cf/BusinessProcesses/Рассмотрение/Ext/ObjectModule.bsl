#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ЗаполнениеПроцесса

// Возвращает пустую структуру данных для заполнения.
//
// Возвращаемое значение:
//  Структура
//   * ВедущаяЗадача - ЗадачаСсылка.ЗадачаИсполнителя
//
Функция СтруктураДанныхДляЗаполнения() Экспорт
	
	СтруктураДанных = Новый Структура;

	СтруктураДанных.Вставить("Автор", Справочники.Сотрудники.ПустаяСсылка());
	СтруктураДанных.Вставить("Важность", Перечисления.ВариантыВажностиОбъектов.ПустаяСсылка());
	СтруктураДанных.Вставить("Наименование", "");
	СтруктураДанных.Вставить("Описание", "");
	
	СтруктураДанных.Вставить("ИдентификаторИсполнителя", УникальныйИдентификаторПустой());
	СтруктураДанных.Вставить("Исполнитель", Справочники.Сотрудники.ПустаяСсылка());
	
	СтруктураДанных.Вставить("ВариантУстановкиСрокаИсполнения", Перечисления.ВариантыУстановкиСрокаИсполнения.ПустаяСсылка());
	СтруктураДанных.Вставить("СрокИсполнения", Дата(1,1,1));
	СтруктураДанных.Вставить("СрокИсполненияДни", 0);
	СтруктураДанных.Вставить("СрокИсполненияЧасы", 0);
	СтруктураДанных.Вставить("СрокИсполненияМинуты", 0);
	
	СтруктураДанных.Вставить("ОбрабатывающийРезолюцию", Справочники.Сотрудники.ПустаяСсылка());
	СтруктураДанных.Вставить("ИдентификаторОбрабатывающегоРезолюцию", УникальныйИдентификаторПустой());
	
	СтруктураДанных.Вставить("ВариантУстановкиСрокаОбработкиРезультатов", Перечисления.ВариантыУстановкиСрокаИсполнения.ПустаяСсылка());
	СтруктураДанных.Вставить("СрокОбработкиРезультатов", Дата(1,1,1));
	СтруктураДанных.Вставить("СрокОбработкиРезультатовДни", 0);
	СтруктураДанных.Вставить("СрокОбработкиРезультатовЧасы", 0);
	СтруктураДанных.Вставить("СрокОбработкиРезультатовМинуты", 0);
	
	СтруктураДанных.Вставить("НастройкиИсполненияОзнакомленияПроцесса",
		БизнесПроцессы.Рассмотрение.СтруктураНастройкиИсполненияОзнакомленияПроцесса());
	
	СтруктураДанных.Вставить("Предметы", Неопределено);
	
	СтруктураДанных.Вставить("ВедущаяЗадача", Задачи.ЗадачаИсполнителя);
	
	СтруктураДанных.Вставить("Резолюция", "");
	
	Возврат СтруктураДанных;
	
КонецФункции

// Заполняет бизнес-процесс на основании шаблона бизнес-процесса.
//
// Параметры
//  ШаблонБизнесПроцесса  - шаблон бизнес-процесса
//
Процедура ЗаполнитьПоШаблону(ШаблонБизнесПроцесса) Экспорт
	
	Если ШаблонБизнесПроцесса = Справочники.ШаблоныРассмотрения.ПоУмолчанию Тогда
		// Не заполняем шаблон в процессе, если это шаблон по умолчанию.
		// Считаем, что процесс создан с нуля.
	ИначеЕсли ШаблонБизнесПроцесса.ШаблонВКомплексномПроцессе 
		И ЗначениеЗаполнено(ШаблонБизнесПроцесса.ИсходныйШаблон) Тогда
		Шаблон = ШаблонБизнесПроцесса.ИсходныйШаблон;
	ИначеЕсли НЕ ШаблонБизнесПроцесса.ШаблонВКомплексномПроцессе Тогда
		Шаблон = ШаблонБизнесПроцесса;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.НаименованиеБизнесПроцесса) Тогда 
		Наименование = ШаблонБизнесПроцесса.НаименованиеБизнесПроцесса;
		НаименованиеСПредметами = МультипредметностьКлиентСервер.ПолучитьНаименованиеСПредметами(СокрЛП(Наименование), Предметы);
		Если ЗначениеЗаполнено(НаименованиеСПредметами) И ШаблонБизнесПроцесса.ДобавлятьНаименованиеПредмета Тогда
			Наименование = НаименованиеСПредметами;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.Описание) Тогда 
		Описание = ШаблонБизнесПроцесса.Описание;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.Важность) Тогда 
		Важность = ШаблонБизнесПроцесса.Важность;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.Автор) Тогда 
		Автор = ШаблонБизнесПроцесса.Автор;
	КонецЕсли;
	
	// заполнение исполнителей
	Если ТипЗнч(ШаблонБизнесПроцесса.Исполнитель) = Тип("СправочникСсылка.АвтоподстановкиДляПроцессов")
		И ЗначениеЗаполнено(ШаблонБизнесПроцесса.Исполнитель) Тогда
		
		АвтоподстановкаИсполнитель = ШаблоныБизнесПроцессов.ПолучитьЗначениеАвтоподстановки(
			ШаблонБизнесПроцесса.Исполнитель, ЭтотОбъект);
		
		Если ТипЗнч(АвтоподстановкаИсполнитель) = Тип("СправочникСсылка.Сотрудники") 
		 Или ТипЗнч(АвтоподстановкаИсполнитель) = Тип("СправочникСсылка.Пользователи") 
		 Или ТипЗнч(АвтоподстановкаИсполнитель) = Тип("СправочникСсылка.ПолныеРоли") Тогда 
		 
			Исполнитель = АвтоподстановкаИсполнитель;
			
		ИначеЕсли ТипЗнч(АвтоподстановкаИсполнитель) = Тип("Структура") Тогда 
			
			Исполнитель = АвтоподстановкаИсполнитель.РольИсполнителя;
			
		ИначеЕсли ТипЗнч(АвтоподстановкаИсполнитель) = Тип("Массив") Тогда 	
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Автоподстановка ""%1"" не может применяться для поля ""%2"", так как возвращает массив исполнителей'"),
				ШаблонБизнесПроцесса.Исполнитель,
				НСтр("ru = 'Исполнитель'"));
			ВызватьИсключение ТекстСообщения;
			
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(ШаблонБизнесПроцесса.Исполнитель) Тогда 
		Исполнитель = ШаблонБизнесПроцесса.Исполнитель;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(ВариантРассмотрения) Тогда 
		ВариантРассмотрения = Перечисления.ВариантыРассмотрения.Рассмотрено;
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(ВариантОбработкиРезолюции) Тогда 
		ВариантОбработкиРезолюции = Перечисления.ВариантыОбработкиРезолюции.НаправитьНаИсполнение;
	КонецЕсли;	
	
	// Срок исполнения
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.ВариантУстановкиСрокаИсполнения) Тогда
		ВариантУстановкиСрокаИсполнения = ШаблонБизнесПроцесса.ВариантУстановкиСрокаИсполнения;
	КонецЕсли;
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.СрокИсполнения) Тогда
		СрокИсполнения = ШаблонБизнесПроцесса.СрокИсполнения;
	КонецЕсли;
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.СрокИсполненияДни) Тогда
		СрокИсполненияДни = ШаблонБизнесПроцесса.СрокИсполненияДни;
	КонецЕсли;
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.СрокИсполненияЧасы) Тогда
		СрокИсполненияЧасы = ШаблонБизнесПроцесса.СрокИсполненияЧасы;
	КонецЕсли;
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.СрокИсполненияМинуты) Тогда
		СрокИсполненияМинуты = ШаблонБизнесПроцесса.СрокИсполненияМинуты;
	КонецЕсли;
	
	// Срок обработки результатов
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.ВариантУстановкиСрокаОбработкиРезультатов) Тогда
		ВариантУстановкиСрокаОбработкиРезультатов = ШаблонБизнесПроцесса.ВариантУстановкиСрокаОбработкиРезультатов;
	КонецЕсли;
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.СрокОбработкиРезультатов) Тогда
		СрокОбработкиРезультатов = ШаблонБизнесПроцесса.СрокОбработкиРезультатов;
	КонецЕсли;
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.СрокОбработкиРезультатовДни) Тогда
		СрокОбработкиРезультатовДни = ШаблонБизнесПроцесса.СрокОбработкиРезультатовДни;
	КонецЕсли;
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.СрокОбработкиРезультатовЧасы) Тогда
		СрокОбработкиРезультатовЧасы = ШаблонБизнесПроцесса.СрокОбработкиРезультатовЧасы;
	КонецЕсли;
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.СрокОбработкиРезультатовМинуты) Тогда
		СрокОбработкиРезультатовМинуты = ШаблонБизнесПроцесса.СрокОбработкиРезультатовМинуты;
	КонецЕсли;
	
	// Срок исполнения процесса
	СрокИсполненияПроцесса = ШаблонБизнесПроцесса.СрокИсполненияПроцесса;
	
	// трудозатраты
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда
		ТрудозатратыПланИсполнителя = ШаблонБизнесПроцесса.ТрудозатратыПланИсполнителя;
		ТрудозатратыПланПомощника = ШаблонБизнесПроцесса.ТрудозатратыПланПомощника;
	КонецЕсли;
	
	РаботаСБизнесПроцессамиВызовСервера.СкопироватьЗначенияДопРеквизитов(ШаблонБизнесПроцесса, ЭтотОбъект);
	
	ДополнительныеСвойства.Вставить("ШаблонДляОтложенногоСтарта", ШаблонБизнесПроцесса);
	
КонецПроцедуры

// Заполняет бизнес-процесс на основании шаблона бизнес-процесса, предмета и автора.
//
// Параметры
//  ШаблонБизнесПроцесса  - шаблон бизнес-процесса
//  Предмет - предмет бизнес-процесса
//  Автор  - автор
//
Процедура ЗаполнитьПоШаблонуИПредмету(ШаблонБизнесПроцесса, ПредметСобытия, АвторСобытия) Экспорт
	
	Мультипредметность.ЗаполнитьПредметыПроцессаПоШаблону(ШаблонБизнесПроцесса, ЭтотОбъект);
	Мультипредметность.ПередатьПредметыПроцессу(ЭтотОбъект, ПредметСобытия, Ложь, Истина);
	ЗаполнитьПоШаблону(ШаблонБизнесПроцесса);
	
	Проект = МультипредметностьПереопределяемый.ПолучитьОсновнойПроектПоПредметам(ПредметСобытия);
	
	Дата = ТекущаяДатаСеанса();
	Автор = АвторСобытия;
	
КонецПроцедуры	

// Заполняет бизнес-процесс на основании проектной задачи
//
Процедура ЗаполнитьПоПроектнойЗадаче(ДанныеЗаполнения) Экспорт 
	
	Проект = ДанныеЗаполнения.Владелец;
	ПроектнаяЗадача = ДанныеЗаполнения;
	
	ДобавлятьНаименованиеПредмета = РаботаСБизнесПроцессами.ДобавлятьНаименованиеПредмета(ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(Наименование)
		Или Наименование = НаименованиеПроцессаПоУмолчанию(ДобавлятьНаименованиеПредмета) Тогда
		
		Наименование = ПроектнаяЗадача.Наименование;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Описание) Тогда 
		Описание = ПроектнаяЗадача.Описание;
	КонецЕсли;
	
	Если Предметы.Количество() = 0 Тогда 
		Предмет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПроектнаяЗадача, "Предмет");
		
		Если Предмет <> Неопределено И Предметы.Найти(Предмет,"Предмет") = Неопределено Тогда
			СтрокаПредметов = Предметы.Добавить();
			СтрокаПредметов.РольПредмета = Перечисления.РолиПредметов.Основной;
			СтрокаПредметов.ИмяПредмета =  МультипредметностьВызовСервера.ПолучитьСсылкуНаИмяПредметаПоСсылкеНаПредмет(
				Предмет, Предметы.ВыгрузитьКолонку("ИмяПредмета"));
			СтрокаПредметов.Предмет = Предмет;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Исполнитель) И ПроектнаяЗадача.Исполнители.Количество() > 0 Тогда 
		СтрокаИсполнитель = ПроектнаяЗадача.Исполнители[0];
		
		Если ТипЗнч(СтрокаИсполнитель.Исполнитель) = Тип("СправочникСсылка.Пользователи") 
		 Или ТипЗнч(СтрокаИсполнитель.Исполнитель) = Тип("СправочникСсылка.ПолныеРоли")
		 Или ТипЗнч(СтрокаИсполнитель.Исполнитель) = Тип("СправочникСсылка.Сотрудники") Тогда 
			Исполнитель = СтрокаИсполнитель.Исполнитель;
			ТрудозатратыПланИсполнителя = СтрокаИсполнитель.ТекущийПланТрудозатраты;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеПроектнойЗадачи = РаботаСПроектами.ПолучитьСрокиПроектнойЗадачи(ПроектнаяЗадача);
	СрокИсполненияУчастника = ДанныеПроектнойЗадачи.ТекущийПланОкончание;
	
	Если СрокИсполнения = Дата(1,1,1)
		И СрокИсполненияДни = 0
		И СрокИсполненияЧасы = 0
		И СрокИсполненияМинуты = 0 Тогда
		
		СрокИсполнения = ДанныеПроектнойЗадачи.ТекущийПланОкончание;
		ВариантУстановкиСрокаИсполнения = Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
	КонецЕсли;
	
	Если СрокОбработкиРезультатов = Дата(1,1,1)
		И СрокОбработкиРезультатовДни = 0
		И СрокОбработкиРезультатовЧасы = 0
		И СрокОбработкиРезультатовМинуты = 0 Тогда
		
		СрокОбработкиРезультатов = СрокИсполненияУчастника;
		ВариантУстановкиСрокаОбработкиРезультатов = 
			Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
	КонецЕсли;
	
КонецПроцедуры

// Обновляет реквизиты активного процесса по переданной структуре
// Параметры:
//  ДанныеОбновления - Структура, см. СтруктураДанныхДляЗаполнения()
//
Процедура ОбновитьАктивныйПроцесс(ДанныеОбновления) Экспорт 
	
	Если Автор <> ДанныеОбновления.Автор Тогда
		Автор = ДанныеОбновления.Автор;
	КонецЕсли;
	
	Если Важность <> ДанныеОбновления.Важность Тогда
		Важность = ДанныеОбновления.Важность;
	КонецЕсли;
	
	Если Наименование <> ДанныеОбновления.Наименование Тогда
		Наименование = ДанныеОбновления.Наименование;
	КонецЕсли;
	
	Если Описание <> ДанныеОбновления.Описание Тогда
		Описание = ДанныеОбновления.Описание;
	КонецЕсли;
	
	Если ИдентификаторИсполнителя <> ДанныеОбновления.ИдентификаторИсполнителя Тогда
		ИдентификаторИсполнителя = ДанныеОбновления.ИдентификаторИсполнителя;
	КонецЕсли;
	
	Если Исполнитель <> ДанныеОбновления.Исполнитель Тогда
		Исполнитель = ДанныеОбновления.Исполнитель;
	КонецЕсли;
	
	СрокИзменен = Ложь;
	
	Если ВариантУстановкиСрокаИсполнения <> ДанныеОбновления.ВариантУстановкиСрокаИсполнения Тогда
		ВариантУстановкиСрокаИсполнения = ДанныеОбновления.ВариантУстановкиСрокаИсполнения;
		СрокИзменен = Истина;
	КонецЕсли;
	
	Если СрокИсполнения <> ДанныеОбновления.СрокИсполнения Тогда
		СрокИсполнения = ДанныеОбновления.СрокИсполнения;
		СрокИзменен = Истина;
	КонецЕсли;
	
	Если СрокИсполненияДни <> ДанныеОбновления.СрокИсполненияДни Тогда
		СрокИсполненияДни = ДанныеОбновления.СрокИсполненияДни;
		СрокИзменен = Истина;
	КонецЕсли;
	
	Если СрокИсполненияЧасы <> ДанныеОбновления.СрокИсполненияЧасы Тогда
		СрокИсполненияЧасы = ДанныеОбновления.СрокИсполненияЧасы;
		СрокИзменен = Истина;
	КонецЕсли;
	
	Если СрокИсполненияМинуты <> ДанныеОбновления.СрокИсполненияМинуты Тогда
		СрокИсполненияМинуты = ДанныеОбновления.СрокИсполненияМинуты;
		СрокИзменен = Истина;
	КонецЕсли;
	
	Если ОбрабатывающийРезолюцию <> ДанныеОбновления.ОбрабатывающийРезолюцию Тогда
		ОбрабатывающийРезолюцию = ДанныеОбновления.ОбрабатывающийРезолюцию;
	КонецЕсли;
	
	Если ИдентификаторОбрабатывающегоРезолюцию <> ДанныеОбновления.ИдентификаторОбрабатывающегоРезолюцию Тогда
		ИдентификаторОбрабатывающегоРезолюцию = ДанныеОбновления.ИдентификаторОбрабатывающегоРезолюцию;
	КонецЕсли;
	
	Если ВариантУстановкиСрокаИсполнения <> ДанныеОбновления.ВариантУстановкиСрокаИсполнения Тогда
		ВариантУстановкиСрокаИсполнения = ДанныеОбновления.ВариантУстановкиСрокаИсполнения;
	КонецЕсли;
	
	Если СрокОбработкиРезультатов <> ДанныеОбновления.СрокОбработкиРезультатов Тогда
		СрокОбработкиРезультатов = ДанныеОбновления.СрокОбработкиРезультатов;
		СрокИзменен = Истина;
	КонецЕсли;
	
	Если СрокОбработкиРезультатовДни <> ДанныеОбновления.СрокОбработкиРезультатовДни Тогда
		СрокОбработкиРезультатовДни = ДанныеОбновления.СрокОбработкиРезультатовДни;
		СрокИзменен = Истина;
	КонецЕсли;
	
	Если СрокОбработкиРезультатовЧасы <> ДанныеОбновления.СрокОбработкиРезультатовЧасы Тогда
		СрокОбработкиРезультатовЧасы = ДанныеОбновления.СрокОбработкиРезультатовЧасы;
		СрокИзменен = Истина;
	КонецЕсли;
	
	Если СрокОбработкиРезультатовМинуты <> ДанныеОбновления.СрокОбработкиРезультатовМинуты Тогда
		СрокОбработкиРезультатовМинуты = ДанныеОбновления.СрокОбработкиРезультатовМинуты;
		СрокИзменен = Истина;
	КонецЕсли;
	
	Если ДанныеОбновления.ВедущаяЗадача <> ВедущаяЗадача Тогда
		ВедущаяЗадача = ДанныеОбновления.ВедущаяЗадача;
	КонецЕсли;
	
	Для Каждого ПараметрНастройки Из ДанныеОбновления.НастройкиИсполненияОзнакомленияПроцесса Цикл
		
		Если ТипЗнч(ПараметрНастройки.Значение) <> Тип("ТаблицаЗначений") Тогда
			Если ЭтотОбъект[ПараметрНастройки.Ключ] <> ПараметрНастройки.Значение Тогда
				ЭтотОбъект[ПараметрНастройки.Ключ] = ПараметрНастройки.Значение;
			КонецЕсли;
		Иначе
			ТекущаяТаблица = ПараметрНастройки.Значение.СкопироватьКолонки();
			Для Каждого СтрокаТекущейТаблицы Из ЭтотОбъект[ПараметрНастройки.Ключ] Цикл
				ЗаполнитьЗначенияСвойств(ТекущаяТаблица.Добавить(), СтрокаТекущейТаблицы);
			КонецЦикла;
			
			Если Не ОбщегоНазначения.ДанныеСовпадают(ТекущаяТаблица, ПараметрНастройки.Значение) Тогда
				ЭтотОбъект[ПараметрНастройки.Ключ].Загрузить(ПараметрНастройки.Значение);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СрокИзменен Тогда
		ПараметрыДляРасчетаСроков = СрокиИсполненияПроцессов.ПараметрыДляРасчетаСроков();
		ПараметрыДляРасчетаСроков.ДатаОтсчета = СрокиИсполненияПроцессов.ДатаОтсчетаДляРасчетаСроковПроцесса(ЭтотОбъект);
		ПараметрыДляРасчетаСроков.Смещение = СрокиИсполненияПроцессовКорп.СмещенияДатыОтсчета(Ссылка);
		СрокиИсполненияПроцессов.РассчитатьСрокиРассмотрения(ЭтотОбъект, ПараметрыДляРасчетаСроков);
	КонецЕсли;
	
	Если Модифицированность() Тогда
		СтарыеУчастникиПроцесса = БизнесПроцессыИЗадачиВызовСервера.ТекущиеУчастникиПроцесса(Ссылка);
		
		НачатьТранзакцию();
		Попытка
			
			ПараметрыСеанса.ОтключитьОбновлениеЗадач = Истина;
			
			Записать();
			ИзменитьРеквизитыНевыполненныхЗадач(СтарыеУчастникиПроцесса, Новый Структура);
			
			ИнтеграцияЗадач.ОбновитьЗадачуПоИсточнику(Ссылка);
			ПараметрыСеанса.ОтключитьОбновлениеЗадач = Ложь;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ПараметрыСеанса.ОтключитьОбновлениеЗадач = Ложь;
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СтартПроцесса

Процедура ОтложенныйСтарт() Экспорт
	
	СтартПроцессовСервер.СтартоватьПроцессОтложенно(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОтключитьОтложенныйСтарт() Экспорт
	
	СтартПроцессовСервер.ОтключитьОтложенныйСтарт(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ЗаполнениеПроцесса

// Дополняет описание процесса общим описанием
Процедура ДополнитьОписание(ОбщееОписание) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ОбщееОписание) Тогда
		Возврат;
	КонецЕсли;
	Описание = ОбщееОписание + Символы.ПС + Описание;
	
КонецПроцедуры

#КонецОбласти

#Область СтартПроцесса

// Проверяет что заполнены поля шаблона
Функция ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта() Экспорт
	
	МассивПолей = Новый Массив;
	
	Если Не ЗначениеЗаполнено(Исполнитель) Тогда
		МассивПолей.Добавить("Исполнитель");
	КонецЕсли;	
	
	Возврат МассивПолей;
	
КонецФункции	

#КонецОбласти

#Область ЗадачиПроцессов

// Возвращает признак наличия метода ИзменитьРеквизитыНевыполненныхЗадач
//
Функция ЕстьМетодИзменитьРеквизитыНевыполненныхЗадач() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Обновляет значения реквизитов невыполненных задач 
// при изменении реквизитов бизнес-процесса.
//
Процедура ИзменитьРеквизитыНевыполненныхЗадач(СтарыеУчастникиПроцесса, ПараметрыЗаписи) Экспорт 

	УстановитьПривилегированныйРежим(Истина);
	
	ДобавлятьНаименованиеПредмета = РаботаСБизнесПроцессами.ДобавлятьНаименованиеПредмета(ЭтотОбъект);
	
	АвторИзменения = Неопределено;
	Если Не ПараметрыЗаписи.Свойство("АвторИзменения", АвторИзменения) Тогда
		АвторИзменения = ПользователиДокументооборот.ОлицетворяемыйПользователь();
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		ПараметрыСеанса.ОтключитьОбновлениеЗадач = Истина;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Задачи.Ссылка КАК Ссылка,
			|	Задачи.ТочкаМаршрута КАК ТочкаМаршрута,
			|	Задачи.Наименование КАК Наименование,
			|	Задачи.Важность КАК Важность,
			|	Задачи.Описание КАК Описание,
			|	Задачи.Автор КАК Автор,
			|	Задачи.Проект КАК Проект,
			|	Задачи.ПроектнаяЗадача КАК ПроектнаяЗадача,
			|	Задачи.Исполнитель КАК Исполнитель,
			|	Задачи.РольИсполнителя КАК РольИсполнителя,
			|	Задачи.ИдентификаторИсполнителя КАК ИдентификаторИсполнителя
			|ИЗ
			|	Задача.ЗадачаИсполнителя КАК Задачи
			|ГДЕ
			|	Задачи.БизнесПроцесс = &БизнесПроцесс
			|	И Задачи.ПометкаУдаления = ЛОЖЬ
			|	И Задачи.Выполнена = ЛОЖЬ";
		
		Запрос.УстановитьПараметр("БизнесПроцесс", Ссылка);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если ЗначениеЗаполнено(Выборка.РольИсполнителя) Тогда
				ТекущийИсполнительЗадачи = Выборка.РольИсполнителя;
			Иначе
				ТекущийИсполнительЗадачи = Выборка.Исполнитель;
			КонецЕсли;
			
			НовыйИсполнительЗадачи = Исполнитель;
			Если Выборка.ТочкаМаршрута = БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Ознакомиться Тогда
				НовыйИсполнительЗадачи = ОбрабатывающийРезолюцию;
			КонецЕсли;
			
			НовыйАвтор = Автор;
			Если Выборка.ТочкаМаршрута = 
				БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Ознакомиться Тогда
				
				НовыйАвтор = АвторДляЗадачиПомощника();
			КонецЕсли;
			
			ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
			ЗадачаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ЗадачаОбъект.ДополнительныеСвойства.Вставить("АвторИзменения", АвторИзменения);
			Если Выборка.ТочкаМаршрута = БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Ознакомиться Тогда
				ЗаполнитьНаименованиеИОписаниеЗадачиОзнакомиться(ЗадачаОбъект);
			Иначе
				ЗаполнитьНаименованиеИОписаниеЗадачи(ЗадачаОбъект);
			КонецЕсли;
			ЗадачаОбъект.Важность = Важность;
			ЗадачаОбъект.Автор = НовыйАвтор;
			
			ЗадачаОбъект.Проект = Проект;
			ЗадачаОбъект.ПроектнаяЗадача = ПроектнаяЗадача;
			
			Если ТекущийИсполнительЗадачи <> НовыйИсполнительЗадачи Тогда
				Если ТипЗнч(НовыйИсполнительЗадачи) = Тип("СправочникСсылка.Сотрудники")
					Или ТипЗнч(НовыйИсполнительЗадачи) = Тип("СправочникСсылка.Пользователи") Тогда 
					ЗадачаОбъект.Исполнитель = НовыйИсполнительЗадачи;
					ЗадачаОбъект.РольИсполнителя = Неопределено;
				Иначе
					ЗадачаОбъект.Исполнитель = Неопределено;
					ЗадачаОбъект.РольИсполнителя = НовыйИсполнительЗадачи;
				КонецЕсли;
				Если ЗадачаОбъект.ПринятаКИсполнению Тогда
					ЗадачаОбъект.ПринятаКИсполнению = Ложь;
					ЗадачаОбъект.ДатаПринятияКИсполнению = '00010101';
				КонецЕсли;
			КонецЕсли;
						
			Если ЗначениеЗаполнено(ОбрабатывающийРезолюцию) И Выборка.Исполнитель = ОбрабатывающийРезолюцию
				И Выборка.ИдентификаторИсполнителя <> ИдентификаторОбрабатывающегоРезолюцию Тогда
				ЗадачаОбъект.ИдентификаторИсполнителя = ИдентификаторОбрабатывающегоРезолюцию;
			КонецЕсли;
			
			Если ЗадачаОбъект.ТочкаМаршрута = 
				БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Ознакомиться Тогда
				 
				СрокиИсполненияПроцессов.ЗаполнитьСрокИсполненияЗадачи(
					ЗадачаОбъект,
					ВариантУстановкиСрокаОбработкиРезультатов,
					СрокОбработкиРезультатов,
					СрокОбработкиРезультатовДни,
					СрокОбработкиРезультатовЧасы,
					СрокОбработкиРезультатовМинуты);
			Иначе
				СрокиИсполненияПроцессов.ЗаполнитьСрокИсполненияЗадачи(
					ЗадачаОбъект,
					ВариантУстановкиСрокаИсполнения,
					СрокИсполнения,
					СрокИсполненияДни,
					СрокИсполненияЧасы,
					СрокИсполненияМинуты);
			КонецЕсли;
			
			ПереносСроковВыполненияЗадач.ПередатьПричинуИЗаявкуНаПереносаСрока(
				ЗадачаОбъект, ДополнительныеСвойства);
			
			ЗадачаОбъект.Записать();
		КонецЦикла;
		
		Если Не (ДополнительныеСвойства.Свойство("ОтключитьОбновлениеЗадач")
			И ДополнительныеСвойства.ОтключитьОбновлениеЗадач) Тогда
			ИнтеграцияЗадач.ОбновитьЗадачуПоИсточнику(Ссылка);
		КонецЕсли;
		ПараметрыСеанса.ОтключитьОбновлениеЗадач = Ложь;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ПараметрыСеанса.ОтключитьОбновлениеЗадач = Ложь;
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры 

#КонецОбласти

#Область Предметы

// Проверяет права участников процесса на предметы этого процесса.
// Если у участников процесса отсутствуют права на предметы, то выводятся сообщения с привязкой
// к карточке процесса.
//
// Параметры
//  ПроцессОбъект - БизнесПроцессОбъект - процесс.
//  Отказ - Булево - в этот параметр помещается значение Истина, если кто-то из участников не имеет
//                   прав на предметы.
//  ПроверятьПриИзменении - Булево - если указано значение Истина, то проверка выполняется только если
//                          изменены участники или предметы процесса, иначе проверка выполняется всегда.
//
Процедура ПроверитьПраваУчастниковПроцессаНаПредметы(
	ПроцессОбъект, Отказ, ПроверятьПриИзменении) Экспорт
	
	Мультипредметность.ПроверитьПраваУчастниковПроцессаНаПредметы(
		ПроцессОбъект, Отказ, ПроверятьПриИзменении);
	
КонецПроцедуры

#КонецОбласти

// Возвращает описание задачи, специфичное для бизнес-процесса
Функция ПолучитьОписаниеУведомленияЗадачи(ЗадачаПроцесса, КодЯзыкаПолучателя) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Задача = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ЗадачаПроцесса,
		"Ссылка, БизнесПроцесс, ТочкаМаршрута, Выполнена, Исполнитель");
		
	Если Задача.БизнесПроцесс <> Ссылка Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Неопределено;
	
	Если Задача.ТочкаМаршрута = БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Рассмотреть Тогда
		
		Если Задача.Выполнена Тогда
			
			Если ВариантРассмотрения = Перечисления.ВариантыРассмотрения.Рассмотрено Тогда
				Результат = НСтр("ru = 'Результат рассмотрения: Рассмотрено'", КодЯзыкаПолучателя);
				ДобавитьЗначениеКСтрокеЧерезРазделитель(
					Результат,
					Символы.ПС,
					НСтр("ru = 'Резолюция'") + ": " + Резолюция);
			ИначеЕсли ВариантРассмотрения = Перечисления.ВариантыРассмотрения.НаправитьПомощнику Тогда
				Результат = НСтр("ru = 'Результат рассмотрения: Направить помощнику'", КодЯзыкаПолучателя);
				ДобавитьЗначениеКСтрокеЧерезРазделитель(
					Результат,
					Символы.ПС,
					НСтр("ru = 'Резолюция'") + ": " + Резолюция);
			ИначеЕсли ВариантРассмотрения = Перечисления.ВариантыРассмотрения.НаправитьАвтору Тогда
				Результат = НСтр("ru = 'Результат рассмотрения: Направить автору'", КодЯзыкаПолучателя);
				ДобавитьЗначениеКСтрокеЧерезРазделитель(
					Результат,
					Символы.ПС,
					НСтр("ru = 'Резолюция'") + ": " + Резолюция);
			ИначеЕсли ВариантРассмотрения = Перечисления.ВариантыРассмотрения.НаправитьНаИсполнение Тогда
				Результат = НСтр("ru = 'Результат рассмотрения: Направить на исполнение'", КодЯзыкаПолучателя);
			ИначеЕсли ВариантРассмотрения = Перечисления.ВариантыРассмотрения.НаправитьНаОзнакомление Тогда
				Результат = НСтр("ru = 'Результат рассмотрения: Направить на ознакомление'", КодЯзыкаПолучателя);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Задача.ТочкаМаршрута = БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Ознакомиться Тогда
		
		Если Задача.Выполнена Тогда
			Если ВариантОбработкиРезолюции = Перечисления.ВариантыОбработкиРезолюции.НаправитьНаИсполнение Тогда
				Результат = НСтр("ru = 'Результат обработки резолюции: Направить на исполнение'", КодЯзыкаПолучателя);
			ИначеЕсли ВариантОбработкиРезолюции = Перечисления.ВариантыОбработкиРезолюции.НаправитьНаОзнакомление Тогда
				Результат = НСтр("ru = 'Результат обработки резолюции: Направить на ознакомление'", КодЯзыкаПолучателя);
			ИначеЕсли ВариантОбработкиРезолюции = Перечисления.ВариантыОбработкиРезолюции.Обработано Тогда
				Результат = НСтр("ru = 'Результат обработки резолюции: Обработано'", КодЯзыкаПолучателя);
			КонецЕсли;
		КонецЕсли;
		
		ДобавитьЗначениеКСтрокеЧерезРазделитель(
			Результат,
			Символы.ПС,
			НСтр("ru = 'Резолюция'", КодЯзыкаПолучателя) + ": " + Резолюция);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Формирует шаблон по процессу
// Параметры:
//	ВладелецШаблона - ссылка на шаблон комплексного процесса или комплексный процесс, который будет владельцем
//		создаваемого шаблона процесса
// Возвращает:
//	Ссылка на созданный шаблон
Функция СоздатьШаблонПоПроцессу(ВладелецШаблона = Неопределено) Экспорт
	
	ИмяТипа = БизнесПроцессы[ЭтотОбъект.Метаданные().Имя].ТипШаблона();	
	ШаблонОбъект = Справочники[СтрЗаменить(ИмяТипа, "Справочник.", "")].СоздатьЭлемент();
	
	// Перенос базовых реквизитов процесса
	ШаблонОбъект.Наименование = Наименование;
	ШаблонОбъект.НаименованиеБизнесПроцесса = Наименование;
	ШаблонОбъект.Описание = Описание;
	ШаблонОбъект.Важность = Важность;
	ШаблонОбъект.Автор = Автор;
	ШаблонОбъект.ВладелецШаблона = ВладелецШаблона;
	
	ШаблонОбъект.Предметы.Загрузить(Предметы.Выгрузить());
	Для Каждого СтрокаПредмета Из ШаблонОбъект.Предметы Цикл
		Если ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда
			ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СтрокаПредмета.Предмет.Метаданные().ПолноеИмя()).ПустаяСсылка();
		КонецЕсли;
	КонецЦикла;
	ШаблонОбъект.ПредметыЗадач.Загрузить(ПредметыЗадач.Выгрузить());
	
	// Перенос сроков
	ШаблонОбъект.СрокИсполненияДни = СрокИсполненияДни;
	ШаблонОбъект.СрокИсполненияЧасы = СрокИсполненияЧасы;
	ШаблонОбъект.СрокИсполненияМинуты = СрокИсполненияМинуты;
	ШаблонОбъект.ВариантУстановкиСрокаИсполнения = 
		Перечисления.ВариантыУстановкиСрокаИсполнения.ОтносительныйСрок;
		
	ШаблонОбъект.СрокОбработкиРезультатовДни = СрокОбработкиРезультатовДни;
	ШаблонОбъект.СрокОбработкиРезультатовЧасы = СрокОбработкиРезультатовЧасы;
	ШаблонОбъект.СрокОбработкиРезультатовМинуты = СрокОбработкиРезультатовМинуты;
	ШаблонОбъект.ВариантУстановкиСрокаИсполнения = 
		Перечисления.ВариантыУстановкиСрокаИсполнения.ОтносительныйСрок;
	
	// Перенос исполнителя
	ШаблонОбъект.Исполнитель = Исполнитель;
	
	ШаблонОбъект.Ответственный = Сотрудники.ОсновнойСотрудникПользователя();
	ШаблонОбъект.Записать();
	Возврат ШаблонОбъект.Ссылка;
	
КонецФункции

// Заполнит структуру возврата вместо диалога настроек процесса
//
//Параметры
//  РезультатВыполнения
//
Процедура ЗаполнитьРезультатНастроекПроцесса(СтруктураРезультата) Экспорт
	
КонецПроцедуры	

// Возвращает главную задачу для подчиненных процессов (исполнение или ознакомления)
// 
// Возвращаемое значение:
//   ЗадачаСсылка.ЗадачаИсполнителя
// 
Функция ГлавнаяЗадачаДляПодчиненныхПроцессов() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ГлавнаяЗадачаПодчиненногоПроцесса = Задачи.ЗадачаИсполнителя.ПустаяСсылка();
	
	Если Ссылка.Пустая() Тогда
		Возврат ГлавнаяЗадачаПодчиненногоПроцесса;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗадачаИсполнителя.Ссылка КАК Задача
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
		|	И ЗадачаИсполнителя.ТочкаМаршрута = &ТочкаМаршрутаРассмотреть
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗадачаИсполнителя.Ссылка КАК Задача
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
		|	И ЗадачаИсполнителя.ТочкаМаршрута = &ТочкаМаршрутаОзнакомиться";
		
	Запрос.УстановитьПараметр(
		"ТочкаМаршрутаРассмотреть", БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Рассмотреть);
	Запрос.УстановитьПараметр(
		"ТочкаМаршрутаОзнакомиться", БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Ознакомиться);
	Запрос.УстановитьПараметр("БизнесПроцесс", Ссылка);
	
	Результат = Запрос.ВыполнитьПакет();
	ВыборкаЗадачРассмотреть = Результат[0].Выбрать();
	ВыборкаЗадачОзнакомиться = Результат[1].Выбрать();
	
	Если ВыборкаЗадачОзнакомиться.Следующий() Тогда
		ГлавнаяЗадачаПодчиненногоПроцесса = ВыборкаЗадачОзнакомиться.Задача;
	Иначе
		ВыборкаЗадачРассмотреть.Следующий();
		ГлавнаяЗадачаПодчиненногоПроцесса = ВыборкаЗадачРассмотреть.Задача;
	КонецЕсли;
	
	Возврат ГлавнаяЗадачаПодчиненногоПроцесса;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если ЭтоНовый() Тогда 
		Дата = ТекущаяДатаСеанса();
		Если Не ЗначениеЗаполнено(Автор) Тогда
			Автор = Сотрудники.ОсновнойСотрудникПользователя();
		КонецЕсли;
		Важность = Перечисления.ВариантыВажностиОбъектов.Обычная;
		ВариантРассмотрения = Перечисления.ВариантыРассмотрения.Рассмотрено;
		ВариантОбработкиРезолюции = Перечисления.ВариантыОбработкиРезолюции.НаправитьНаИсполнение;
		
		Если Не ЗначениеЗаполнено(Проект) Тогда 
			Проект = РаботаСПроектами.ПолучитьПроектПоУмолчанию();
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеЗаполнения <> Неопределено И ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Тогда
		Мультипредметность.ПередатьПредметыПроцессу(ЭтотОбъект, ДанныеЗаполнения, Ложь, Истина);
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		ЗадачаСсылка = ДанныеЗаполнения;
		ЗаполнитьБизнесПроцессПоЗадаче(ЗадачаСсылка);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("ВедущаяЗадача") Тогда
			ВедущаяЗадача = ДанныеЗаполнения.ВедущаяЗадача;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Автор") Тогда
			Автор = ДанныеЗаполнения.Автор;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Важность") Тогда
			Важность = ДанныеЗаполнения.Важность;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Наименование") Тогда
			Наименование = ДанныеЗаполнения.Наименование;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ВариантИсполнения") Тогда
			ВариантИсполнения = ДанныеЗаполнения.ВариантИсполнения;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ВариантУстановкиСрокаИсполнения") Тогда
			ВариантУстановкиСрокаИсполнения = ДанныеЗаполнения.ВариантУстановкиСрокаИсполнения;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ИдентификаторИсполнителя") Тогда
			ИдентификаторИсполнителя = ДанныеЗаполнения.ИдентификаторИсполнителя;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Исполнитель") Тогда
			Исполнитель = ДанныеЗаполнения.Исполнитель;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("КоличествоИтерацийИсполнения") Тогда
			КоличествоИтерацийИсполнения = ДанныеЗаполнения.КоличествоИтерацийИсполнения;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("НаименованиеИсполнения") Тогда
			НаименованиеИсполнения = ДанныеЗаполнения.НаименованиеИсполнения;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Описание") Тогда
			Описание = ДанныеЗаполнения.Описание;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ОписаниеИсполнения") Тогда
			ОписаниеИсполнения = ДанныеЗаполнения.ОписаниеИсполнения;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("СрокИсполнения") Тогда
			СрокИсполнения = ДанныеЗаполнения.СрокИсполнения;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("СрокИсполненияДни") Тогда
			СрокИсполненияДни = ДанныеЗаполнения.СрокИсполненияДни;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("СрокИсполненияЧасы") Тогда
			СрокИсполненияЧасы = ДанныеЗаполнения.СрокИсполненияЧасы;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("СрокИсполненияМинуты") Тогда
			СрокИсполненияМинуты = ДанныеЗаполнения.СрокИсполненияМинуты;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Шаблон") Тогда
			Мультипредметность.ЗаполнитьПредметыПроцессаПоШаблону(ДанныеЗаполнения.Шаблон, ЭтотОбъект);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Предметы") Тогда
			Мультипредметность.ПередатьПредметыПроцессу(ЭтотОбъект, ДанныеЗаполнения.Предметы, Ложь, Истина);
			Проект = МультипредметностьПереопределяемый.ПолучитьОсновнойПроектПоПредметам(ДанныеЗаполнения.Предметы);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("АвторСобытия") Тогда
			Автор = ДанныеЗаполнения.АвторСобытия;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Шаблон") Тогда
			ЗаполнитьПоШаблону(ДанныеЗаполнения.Шаблон);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ЗадачаИсполнителя") Тогда
			ЗадачаСсылка = ДанныеЗаполнения.ЗадачаИсполнителя;
			ЗаполнитьБизнесПроцессПоЗадаче(ЗадачаСсылка);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ПроектнаяЗадача") Тогда
			ЗаполнитьПоПроектнойЗадаче(ДанныеЗаполнения.ПроектнаяЗадача);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Проект") Тогда
			Проект = ДанныеЗаполнения.Проект;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Исполнители") Тогда
			Исполнитель = ДанныеЗаполнения.Исполнители[0];
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("НастройкиИсполненияОзнакомленияПроцесса") Тогда
			ЗаполнитьЗначенияСвойств(
				ЭтотОбъект,
				ДанныеЗаполнения.НастройкиИсполненияОзнакомленияПроцесса,,
				"ИсполнителиИсполнения, ИсполнителиОзнакомления");
			
			ИсполнителиИсполнения.Загрузить(
				ДанныеЗаполнения.НастройкиИсполненияОзнакомленияПроцесса.ИсполнителиИсполнения);
			
			ИсполнителиОзнакомления.Загрузить(
				ДанныеЗаполнения.НастройкиИсполненияОзнакомленияПроцесса.ИсполнителиОзнакомления);
		КонецЕсли;
		
		ТипыПисем = МультипредметностьПереопределяемый.ПолучитьТипыПисем();
		ОсновныеПисьма = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЭтотОбъект, ТипыПисем, Истина);
		Для Каждого Письмо Из ОсновныеПисьма Цикл
			Тема = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Письмо, "Тема");
			Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Письмо, "Проект");
			Если Не ЗначениеЗаполнено(Наименование) Тогда
				Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Рассмотреть ""%1""'"),
					Тема);
			КонецЕсли;
			Прервать;
		КонецЦикла;
		
		Если ДанныеЗаполнения.Свойство("Резолюция") Тогда
			Резолюция = ДанныеЗаполнения.Резолюция;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.ПроектныеЗадачи") Тогда 
		
		ЗаполнитьПоПроектнойЗадаче(ДанныеЗаполнения);
		
	ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(ДанныеЗаполнения) Тогда
		
		Предмет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения, "Предмет");
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Исполнитель) Тогда
		ТипыПредметов = Новый Массив;
		ТипыПредметов.Добавить(Тип("СправочникСсылка.ДокументыПредприятия"));
		ОбрабатываемыеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЭтотОбъект, ТипыПредметов);	

		Для Каждого Предмет Из ОбрабатываемыеПредметы Цикл
			Исполнитель = РаботаСПользователями.ПолучитьРуководителя(Автор);
			Если ЗначениеЗаполнено(Исполнитель) Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Наименование) И Предметы.Количество() > 0 Тогда
		МультипредметностьКлиентСервер.ЗаполнитьНаименованиеПроцесса(ЭтотОбъект, НСтр("ru = 'Рассмотреть'"));
	КонецЕсли;
	
	БизнесПроцессыИЗадачиСервер.ЗаполнитьГлавнуюЗадачу(ЭтотОбъект, ДанныеЗаполнения);	
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ ЗначениеЗаполнено(Исполнитель) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Поле ""Кому"" не заполнено", ЭтотОбъект,,"Исполнитель", Отказ);
	КонецЕсли;
	
	РаботаСПроцессамиПоОбработкамОбъектов.ПроверкаЗапретаНаЗапускПоПредметуИзДругойСистемы(ЭтотОбъект, Отказ);
	
	// Проверка прав участников процесса на предметы
	Если Не РаботаСБизнесПроцессами.ЭтоФоновоеВыполнениеПроцесса() Тогда
		
		ПроверитьПраваУчастниковПроцессаНаПредметы(ЭтотОбъект, Отказ, Стартован);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбычнаяЗапись = Истина;
	ТолькоОбработкаВыполненияЗадачи = Ложь;
	ТолькоОбновлениеРабочейГруппыПроцессов = Ложь;
	Если ДополнительныеСвойства.Свойство("ВидЗаписи") Тогда
		
		ОбычнаяЗапись = Ложь;
		
		ТолькоОбработкаВыполненияЗадачи = (ДополнительныеСвойства.ВидЗаписи =
			"ЗаписьСОбработкойВыполненияЗадачи");
			
		ТолькоОбновлениеРабочейГруппыПроцессов = 
			(ДополнительныеСвойства.ВидЗаписи =
			"ЗаписьСОбновлением_Предметов_ПредметовЗадач_Проекта_ОбщегоСпискаПроцессов_РабочихГруппПредметов_РабочихГруппПроцессов_ДопРеквизитовПоПредметам");
		
		Если Не ТолькоОбработкаВыполненияЗадачи
			И Не ТолькоОбновлениеРабочейГруппыПроцессов Тогда
			
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбычнаяЗапись Или ТолькоОбработкаВыполненияЗадачи Тогда
		// Обработка выполнения задачи
		Если ДополнительныеСвойства.Свойство("ТекущаяЗадача") Тогда
			Если ДополнительныеСвойства.ТекущаяЗадача.ТочкаМаршрута = БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Рассмотреть ИЛИ
					ДополнительныеСвойства.ТекущаяЗадача.ТочкаМаршрута = БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Ознакомиться Тогда
				
				Если ДополнительныеСвойства.Свойство("НастройкиИсполненияОзнакомления") Тогда
					
					ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДополнительныеСвойства.НастройкиИсполненияОзнакомления,,
						"ИсполнителиИсполнения, ИсполнителиОзнакомления");
					
					НастройкиИсполненияОзнакомления = ДополнительныеСвойства.НастройкиИсполненияОзнакомления;
					
					ИсполнителиИсполнения.Очистить();
					Для Каждого СтрокаТаблицы Из НастройкиИсполненияОзнакомления.ИсполнителиИсполнения Цикл
						ЗаполнитьЗначенияСвойств(ИсполнителиИсполнения.Добавить(), СтрокаТаблицы);
					КонецЦикла;
					
					ИсполнителиОзнакомления.Очистить();
					Для Каждого СтрокаТаблицы Из НастройкиИсполненияОзнакомления.ИсполнителиОзнакомления Цикл
						ЗаполнитьЗначенияСвойств(ИсполнителиОзнакомления.Добавить(), СтрокаТаблицы);
					КонецЦикла;
					
				КонецЕсли;
				
				Если ДополнительныеСвойства.Свойство("ВыполнитьЗадачу") И ДополнительныеСвойства.ВыполнитьЗадачу Тогда 
					
					Если ДополнительныеСвойства.Свойство("ВариантРассмотрения") Тогда
						ВариантРассмотрения = ДополнительныеСвойства.ВариантРассмотрения;
					КонецЕсли;
					
					Если ДополнительныеСвойства.Свойство("ОбрабатывающийРезолюцию") Тогда
						ОбрабатывающийРезолюцию = ДополнительныеСвойства.ОбрабатывающийРезолюцию;
					КонецЕсли;
					
					Если ДополнительныеСвойства.Свойство("ВариантОбработкиРезолюции") Тогда
						ВариантОбработкиРезолюции = ДополнительныеСвойства.ВариантОбработкиРезолюции;
					КонецЕсли;
					
					Если ДополнительныеСвойства.Свойство("РезультатВыполнения") Тогда
						Резолюция = ДополнительныеСвойства.РезультатВыполнения;
						Если ВариантРассмотрения = Перечисления.ВариантыРассмотрения.Рассмотрено
							Или ВариантРассмотрения = Перечисления.ВариантыРассмотрения.НаправитьПомощнику 
							Или ВариантРассмотрения = Перечисления.ВариантыРассмотрения.НаправитьАвтору Тогда
							ОписаниеИсполнения = ДополнительныеСвойства.РезультатВыполнения;
							ОписаниеОзнакомления = ДополнительныеСвойства.РезультатВыполнения;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбычнаяЗапись
		И Не МиграцияДанныхИзВнешнихСистемСервер.ЭтоОбъектИзДругойСистемы(ИсточникДанных) Тогда
		
		Если Не РаботаСБизнесПроцессамиВызовСервера.ПроверитьПередЗаписью(ЭтотОбъект) Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;	
		
		ПредыдущаяПометкаУдаления = Ложь;
		Если Не Ссылка.Пустая() Тогда
			ПредыдущаяПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ПометкаУдаления");
		КонецЕсли;
		ДополнительныеСвойства.Вставить("ПредыдущаяПометкаУдаления", ПредыдущаяПометкаУдаления);
		
		Если Не Ссылка.Пустая() Тогда
			ПредыдущееСостояние = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Состояние");
			ДополнительныеСвойства.Вставить("ПредыдущееСостояние", ПредыдущееСостояние);
		КонецЕсли;
		
		Если ПометкаУдаления <> ПредыдущаяПометкаУдаления Тогда
			РаботаСФайламиВызовСервера.ПометитьНаУдалениеПриложенныеФайлы(Ссылка, ПометкаУдаления);
		КонецЕсли;
		
	КонецЕсли;
		
	Если ОбычнаяЗапись Или ТолькоОбновлениеРабочейГруппыПроцессов Тогда
		// Обработка рабочей группы	
		РаботаСБизнесПроцессамиВызовСервера.СформироватьРабочуюГруппу(ЭтотОбъект);
	КонецЕсли;
	
	Если ОбычнаяЗапись Тогда
		ЗаполнитьПустыеИдентификаторыУчастников();
		ПроверитьУникальностьИдентификаторовУчастников();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияЗадач.ПриЗаписиИсточникаЗадачи(ЭтотОбъект);
	
	Если ДополнительныеСвойства.Свойство("ВидЗаписи") Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаОчередиЗаданийСервер.ПриЗаписиПроцесса(ЭтотОбъект);
	
	ПредыдущаяПометкаУдаления = Ложь;
	Если ДополнительныеСвойства.Свойство("ПредыдущаяПометкаУдаления") Тогда
		ПредыдущаяПометкаУдаления = ДополнительныеСвойства.ПредыдущаяПометкаУдаления;
	КонецЕсли;
	
	Если (ПометкаУдаления <> ПредыдущаяПометкаУдаления)
		И Не МиграцияДанныхИзВнешнихСистемСервер.ЭтоОбъектИзДругойСистемы(ИсточникДанных) Тогда
		
		ПротоколированиеРаботыСотрудников.ЗаписатьПометкуУдаления(Ссылка, ПометкаУдаления);
	КонецЕсли;
	
	СтартПроцессовСервер.ПроцессПриЗаписи(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	РаботаСБизнесПроцессами.ПриКопированииБизнесПроцесса(ОбъектКопирования);
	
	Дата = ТекущаяДатаСеанса();
	Автор = Сотрудники.ОсновнойСотрудникПользователя();
	ДатаНачала = '00010101';
	ДатаЗавершения = '00010101';
	
	ВариантРассмотрения = Перечисления.ВариантыРассмотрения.Рассмотрено;
	ВариантОбработкиРезолюции = Перечисления.ВариантыОбработкиРезолюции.НаправитьНаИсполнение;
	
	ОбрабатывающийРезолюцию = Неопределено;
	
	НаименованиеИсполнения = "";
	ОписаниеИсполнения = "";
	
	СрокИсполненияПроцессаИсполнения = Дата(1,1,1);
	ВариантУстановкиСрокаОбработкиРезультатовИсполнения = 
		Перечисления.ВариантыУстановкиСрокаИсполнения.ПустаяСсылка();
	СрокОбработкиРезультатовИсполнения = Дата(1,1,1);
	СрокОбработкиРезультатовДниИсполнения = 0;
	СрокОбработкиРезультатовЧасыИсполнения = 0;
	СрокОбработкиРезультатовМинутыИсполнения = 0;
	
	ИсполнителиИсполнения.Очистить();
	
	НаименованиеОзнакомления = "";
	ОписаниеОзнакомления = "";
	
	СрокИсполненияПроцессаОзнакомления = Дата(1,1,1);
	ИсполнителиОзнакомления.Очистить();
	
	КонтролерИсполнения = Неопределено;
	
	ПроверяющийИсполнения = Неопределено;
	
	ПроцессИсполнения = БизнесПроцессы.Исполнение.ПустаяСсылка();
	ПроцессОзнакомления = БизнесПроцессы.Ознакомление.ПустаяСсылка();
	
КонецПроцедуры

#Область КартаМаршрута

Процедура СтартПередСтартом(ТочкаМаршрутаБизнесПроцесса, Отказ)
	
	ДатаНачала = ТекущаяДатаСеанса();
	РаботаСПроектами.ОтметитьНачалоВыполненияПроектнойЗадачи(ЭтотОбъект);
	
КонецПроцедуры

Процедура РассмотретьПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
	Задача.Дата  	= ТекущаяДатаСеанса();
	Задача.Автор 	= Автор;
	Задача.Важность = Важность;
	
	Мультипредметность.ЗадачаПередСозданием(ЭтотОбъект, Задача, ТочкаМаршрутаБизнесПроцесса);
	
	Задача.РезультатВыполнения 	= Резолюция;
	Задача.БизнесПроцесс  	   	= ЭтотОбъект.Ссылка;
	Задача.ТочкаМаршрута 		= ТочкаМаршрутаБизнесПроцесса;
	ЗаполнитьНаименованиеИОписаниеЗадачи(Задача);
	
	Задача.Проект = Проект;
	Задача.ПроектнаяЗадача = ПроектнаяЗадача;
	
	Если ТипЗнч(Исполнитель) = Тип("СправочникСсылка.Сотрудники") 
		Или ТипЗнч(Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
		Задача.Исполнитель = Исполнитель;
	Иначе
		Задача.РольИсполнителя = Исполнитель;
	КонецЕсли;
	Задача.ИдентификаторИсполнителя = ИдентификаторИсполнителя;
	
	СрокиИсполненияПроцессов.ЗаполнитьСрокИсполненияЗадачи(
		Задача,
		ВариантУстановкиСрокаИсполнения,
		СрокИсполнения,
		СрокИсполненияДни,
		СрокИсполненияЧасы,
		СрокИсполненияМинуты);
	
	РаботаСБизнесПроцессамиВызовСервера.СкопироватьЗначенияДопРеквизитов(Задача.БизнесПроцесс, Задача);
	
	ФормируемыеЗадачи.Добавить(Задача);
	
КонецПроцедуры

Процедура ОбработкаПроверкиВыполнения(ТочкаМаршрутаБизнесПроцесса, Задача, Результат)
	
	Результат = Истина;
	
КонецПроцедуры

Процедура ВыборВариантаРассмотренияОбработкаВыбораВарианта(ТочкаВыбораВарианта, Результат)
	
	Если ВариантРассмотрения = Перечисления.ВариантыРассмотрения.Рассмотрено Тогда
		Результат = ТочкаВыбораВарианта.Варианты.Рассмотрено;
	ИначеЕсли ВариантРассмотрения = Перечисления.ВариантыРассмотрения.НаправитьПомощнику 
		Или ВариантРассмотрения = Перечисления.ВариантыРассмотрения.НаправитьАвтору Тогда
		Результат = ТочкаВыбораВарианта.Варианты.НаправитьПомощнику_Автору;
	ИначеЕсли ВариантРассмотрения = Перечисления.ВариантыРассмотрения.НаправитьНаИсполнение Тогда
		Результат = ТочкаВыбораВарианта.Варианты.НаправитьНаИсполнение;
	ИначеЕсли ВариантРассмотрения = Перечисления.ВариантыРассмотрения.НаправитьНаОзнакомление Тогда
		Результат = ТочкаВыбораВарианта.Варианты.НаправитьНаОзнакомление;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОзнакомитьсяПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
	Задача.Дата  	= ТекущаяДатаСеанса();
	Задача.Важность = Важность;
	
	Мультипредметность.ЗадачаПередСозданием(ЭтотОбъект, Задача, ТочкаМаршрутаБизнесПроцесса);
	
	Задача.Исполнитель = ОбрабатывающийРезолюцию;
	Задача.ИдентификаторИсполнителя = ИдентификаторОбрабатывающегоРезолюцию;
	
	СрокиИсполненияПроцессов.ЗаполнитьСрокИсполненияЗадачи(
		Задача,
		ВариантУстановкиСрокаОбработкиРезультатов,
		СрокОбработкиРезультатов,
		СрокОбработкиРезультатовДни,
		СрокОбработкиРезультатовЧасы,
		СрокОбработкиРезультатовМинуты);
	
	Задача.БизнесПроцесс  = Ссылка;
	Задача.ТочкаМаршрута  = ТочкаМаршрутаБизнесПроцесса;
	
	Задача.Проект = Проект;
	Задача.ПроектнаяЗадача = ПроектнаяЗадача;
	ЗаполнитьНаименованиеИОписаниеЗадачиОзнакомиться(Задача);
	
	// автор
	Задача.Автор = АвторДляЗадачиПомощника();
	
	РаботаСБизнесПроцессамиВызовСервера.СкопироватьЗначенияДопРеквизитов(Задача.БизнесПроцесс, Задача);
	
	ФормируемыеЗадачи.Добавить(Задача);
	
КонецПроцедуры

Процедура ЗаполнитьНаименованиеИОписаниеЗадачи(Задача)
	
	ПредметыСтрокой = МультипредметностьКлиентСервер.ПредметыСтрокой(Задача.Предметы, Истина, Ложь);
	НаименованиеИОписаниеПоДействию = РаботаСПроцессамиПоДействиям.НаименованиеИОписаниеЗадачиПоДействию(
		Задача, ПредметыСтрокой);
	
	// Описание может быть перехвачено в действии, поэтому берем его, если задано.
	Если ЗначениеЗаполнено(Описание) Тогда
		Задача.Описание = Описание;
	ИначеЕсли НаименованиеИОписаниеПоДействию <> Неопределено 
		И ЗначениеЗаполнено(НаименованиеИОписаниеПоДействию.Описание) Тогда
		Задача.Описание = НаименованиеИОписаниеПоДействию.Описание;
	КонецЕсли;
	
	Если СтрНачинаетсяС(Наименование, НаименованиеПроцессаПоУмолчанию(Ложь))
		И НаименованиеИОписаниеПоДействию <> Неопределено 
		И ЗначениеЗаполнено(НаименованиеИОписаниеПоДействию.Наименование) Тогда
		Задача.Наименование = НаименованиеИОписаниеПоДействию.Наименование;

	Иначе
		Задача.Наименование = Наименование;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьНаименованиеИОписаниеЗадачиОзнакомиться(Задача)
	
	ДобавлятьНаименованиеПредмета = РаботаСБизнесПроцессами.ДобавлятьНаименованиеПредмета(ЭтотОбъект);
	ПредметыСтрокой = МультипредметностьКлиентСервер.ПредметыСтрокой(Задача.Предметы, Истина, Ложь);
	НаименованиеИОписаниеПоДействию = РаботаСПроцессамиПоДействиям.НаименованиеИОписаниеЗадачиПоДействию(
		Задача, ПредметыСтрокой);
	
	Если НаименованиеИОписаниеПоДействию <> Неопределено 
		И ЗначениеЗаполнено(НаименованиеИОписаниеПоДействию.Наименование) Тогда
		Задача.Наименование = НаименованиеИОписаниеПоДействию.Наименование;

	ИначеЕсли СтрНачинаетсяС(НаименованиеПроцессаПоУмолчанию(ДобавлятьНаименованиеПредмета), Наименование)
		И ЗначениеЗаполнено(ПредметыСтрокой) Тогда
		
		Задача.Наименование = СтрШаблон(
			НСтр("ru = 'Обработать резолюцию %1'",
				ЛокализацияКонфигурации.КодЯзыкаИсполнителяЗадачи(Задача)),
			Строка(ПредметыСтрокой));
	Иначе
		Задача.Наименование = СтрШаблон(
			НСтр("ru = 'Обработать резолюцию: %1'",
				ЛокализацияКонфигурации.КодЯзыкаИсполнителяЗадачи(Задача)),
			Наименование);
	КонецЕсли;
	
	Если НаименованиеИОписаниеПоДействию <> Неопределено 
		И ЗначениеЗаполнено(НаименованиеИОписаниеПоДействию.Описание) Тогда
		Задача.Описание = НаименованиеИОписаниеПоДействию.Описание;
	Иначе
		
		Задача.Описание = Описание;
		
	КонецЕсли;

КонецПроцедуры

Процедура ВыборВариантаОбработкиРезолюцииОбработкаВыбораВарианта(ТочкаВыбораВарианта, Результат)
	
	Если ВариантОбработкиРезолюции = Перечисления.ВариантыОбработкиРезолюции.Обработано Тогда
		Результат = ТочкаВыбораВарианта.Варианты.Обработано;
	ИначеЕсли ВариантОбработкиРезолюции = Перечисления.ВариантыОбработкиРезолюции.НаправитьНаИсполнение Тогда
		Результат = ТочкаВыбораВарианта.Варианты.НаправитьНаИсполнение;
	ИначеЕсли ВариантОбработкиРезолюции = Перечисления.ВариантыОбработкиРезолюции.НаправитьНаОзнакомление Тогда 
		Результат = ТочкаВыбораВарианта.Варианты.НаправитьНаОзнакомление;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьИсполнениеОбработка(ТочкаМаршрутаБизнесПроцесса)
	
	// Если входит в составной процесс, то в нем предусмотрено своя настройка исполнения.
	Если ВходитВСоставнойПроцесс() Тогда
		Возврат;
	КонецЕсли;
	
	СозданиеПроцессаОбработано = 
		РаботаСПроцессамиПоДействиямСобытия.ОбработатьСозданиеПроцессаИсполненияПоРезультатамРассмотрения(
		ЭтотОбъект);
	
	Если Не СозданиеПроцессаОбработано Тогда
		ИсполнениеОбъект = БизнесПроцессы.Исполнение.СоздатьБизнесПроцесс();
		ИсполнениеОбъект.Дата = ТекущаяДатаСеанса();
		ИсполнениеОбъект.ГлавнаяЗадача = ГлавнаяЗадачаДляПодчиненныхПроцессов();
		ИсполнениеОбъект.ЗаполнитьПоРассмотрению(ЭтотОбъект);
		ИсполнениеОбъект.Состояние = Перечисления.СостоянияБизнесПроцессов.Активен;
		ИсполнениеОбъект.Записать();
		СтартПроцессовСервер.СтартоватьПроцесс(ИсполнениеОбъект);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьОзнакомлениеОбработка(ТочкаМаршрутаБизнесПроцесса)
	
	// Если входит в составной процесс, то в нем предусмотрено своя настройка ознакомления.
	Если ВходитВСоставнойПроцесс() Тогда
		Возврат;
	КонецЕсли;
	
	ОзнакомлениеОбъект = БизнесПроцессы.Ознакомление.СоздатьБизнесПроцесс();
	ОзнакомлениеОбъект.Дата = ТекущаяДатаСеанса();
	ОзнакомлениеОбъект.ГлавнаяЗадача = ГлавнаяЗадачаДляПодчиненныхПроцессов();
	ОзнакомлениеОбъект.ЗаполнитьПоРассмотрению(ЭтотОбъект);
	ОзнакомлениеОбъект.Состояние = Перечисления.СостоянияБизнесПроцессов.Активен;
	
	ОзнакомлениеОбъект.Записать();
	СтартПроцессовСервер.СтартоватьПроцесс(ОзнакомлениеОбъект);
	
КонецПроцедуры

Процедура ЗавершениеПриЗавершении(ТочкаМаршрутаБизнесПроцесса, Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	ДатаЗавершения = ТекущаяДатаСеанса();
	
	РаботаСПроектами.ОтметитьОкончаниеВыполненияПроектнойЗадачи(ЭтотОбъект);
	
	РаботаСПроцессамиПоДействиямСобытия.ПриЗавершенииПроцесса(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеПроцесса

Процедура ЗаполнитьБизнесПроцессПоЗадаче(ЗадачаСсылка)
	
	РаботаСБизнесПроцессами.ЗаполнитьБизнесПроцессПоЗадаче(ЭтотОбъект, ЗадачаСсылка);
	
КонецПроцедуры

// Заполняет пустые идентификаторы участников в процессе.
//
Процедура ЗаполнитьПустыеИдентификаторыУчастников()
	
	Если ИдентификаторИсполнителя = УникальныйИдентификаторПустой() Тогда
		ИдентификаторИсполнителя = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	Если ИдентификаторОбрабатывающегоРезолюцию = УникальныйИдентификаторПустой() Тогда
		ИдентификаторОбрабатывающегоРезолюцию = Новый УникальныйИдентификатор;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет уникальность идентификаторов участников процесса.
// Если есть не уникальные значения, то вызывается исключение. 
//
Процедура ПроверитьУникальностьИдентификаторовУчастников()
	
	Если ИдентификаторИсполнителя = ИдентификаторОбрабатывающегоРезолюцию Тогда
		ВызватьИсключение НСтр("ru = 'Идентификаторы участников не уникальны.'",
			ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;		
	
КонецПроцедуры

Функция НаименованиеПроцессаПоУмолчанию(ДобавлятьНаименованиеПредмета)
	
	НаименованиеПоУмолчанию = НСтр("ru = 'Рассмотреть '");
	
	Если ДобавлятьНаименованиеПредмета Тогда
		НаименованиеПоУмолчанию = МультипредметностьКлиентСервер.ПолучитьНаименованиеСПредметами(
			СокрЛП(НаименованиеПоУмолчанию), Предметы);
	КонецЕсли;
	
	Возврат НаименованиеПоУмолчанию;
	
КонецФункции

// Возвращает автора для задачи помощника.
//
// Возвращаемое значение:
//  СправочникСсылка.Сотрудники
//
Функция АвторДляЗадачиПомощника()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Исполнитель) = Тип("СправочникСсылка.Сотрудники") 
		Или ТипЗнч(Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
		
		Возврат Исполнитель;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗадачаИсполнителя.Ссылка КАК ЗадачаИсполнителя,
		|	ЗадачаИсполнителя.Исполнитель КАК Исполнитель
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
		|	И ЗадачаИсполнителя.ТочкаМаршрута = &ТочкаМаршрута";
	Запрос.УстановитьПараметр("БизнесПроцесс", Ссылка);
	Запрос.УстановитьПараметр("ТочкаМаршрута", БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Рассмотреть);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Исполнитель;
	
КонецФункции

#КонецОбласти

#Область Предметы

#КонецОбласти

#Область КартаМаршрута

// Возвращает признак вхождения в составной процесс:
//
// Возвращаемое значение:
//  Булево
//
Функция ВходитВСоставнойПроцесс()
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли