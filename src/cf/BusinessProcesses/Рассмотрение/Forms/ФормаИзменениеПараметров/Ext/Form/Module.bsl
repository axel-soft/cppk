#Область ОписаниеПеременных

&НаКлиенте
Перем ПолноеИмяПеретаскиваемогоФайла;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// РаспознаваниеРечи
	РаспознаваниеРечи_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	// Конец РаспознаваниеРечи
	
	ФормироватьРезолюцию = Параметры.ФормироватьРезолюцию;
	
	ВариантРассмотрения = Параметры.ВариантРассмотрения;
	Если ВариантРассмотрения = Перечисления.ВариантыРассмотрения.НаправитьНаИсполнение Тогда
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаНаИсполнение;
		
		Элементы.ФормаНаправитьНаИсполнение.Видимость = Истина;
		Элементы.ФормаНаправитьНаИсполнение.КнопкаПоУмолчанию = Истина;
		
		Элементы.ФормаНаправитьНаОзнакомление.Видимость = Ложь;
		
		КлючНазначенияИспользования = "Исполнение";
		КлючСохраненияПоложенияОкна = "Исполнение";
		
		ОписаниеИсполнения = Объект.РезультатВыполнения;
		Если НЕ ЗначениеЗаполнено(НаименованиеИсполнения) И Объект.Предметы.Количество() > 0 Тогда
			НаименованиеИсполнения = МультипредметностьКлиентСервер.ПолучитьНаименованиеСПредметами(
				НСтр("ru = 'Исполнить'"), Объект.Предметы);
		КонецЕсли;		
		
	ИначеЕсли ВариантРассмотрения = Перечисления.ВариантыРассмотрения.НаправитьНаОзнакомление Тогда
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОзнакомление;
		
		Элементы.ФормаНаправитьНаОзнакомление.Видимость = Истина;
		Элементы.ФормаНаправитьНаОзнакомление.КнопкаПоУмолчанию = Истина;
		
		Элементы.ФормаНаправитьНаИсполнение.Видимость = Ложь;
		
		КлючНазначенияИспользования = "Ознакомление";
		КлючСохраненияПоложенияОкна = "Ознакомление";
	ИначеЕсли ВариантРассмотрения = Перечисления.ВариантыРассмотрения.НаправитьПомощнику Тогда
		
		ОписаниеОбработатьРезолюцию = Объект.РезультатВыполнения;
		
		Если Не ЗначениеЗаполнено(НаименованиеНаправитьПомощнику) Тогда
			НаименованиеНаправитьПомощнику = МультипредметностьКлиентСервер.ПолучитьНаименованиеСПредметами(
				НСтр("ru = 'Обработать резолюцию'"), Объект.Предметы);
		КонецЕсли;
		
		Элементы.ФормаНаправитьНаОзнакомление.Видимость = Ложь;
		Элементы.ФормаНаправитьНаИсполнение.Видимость = Ложь;
		Элементы.ФормаНаправитьПомощнику.Видимость = Истина;
		Элементы.ФормаНаправитьПомощнику.КнопкаПоУмолчанию = Истина;
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаНаправитьПомощнику;
		КлючНазначенияИспользования = "НаправлениеПомощнику";
		КлючСохраненияПоложенияОкна = "НаправлениеПомощнику";
		
		ДействиеЗадачи = ДействияВызовСервера.ДействиеИРеквизитыЗадачи(Объект.Ссылка).Действие;
		
		АктуальныеПомощники = ЗамещающиеИПомощники.ПодходящиеЗамещения(ДействиеЗадачи,
			Перечисления.ВидыЗамещения.Помощники).ВыгрузитьКолонку("Замещающий");
		
		Элементы.Помощник.СписокВыбора.ЗагрузитьЗначения(АктуальныеПомощники);
		Помощник = АктуальныеПомощники[0];
		
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестный вариант рассмотрения %1'"),
			ВариантРассмотрения);
		
	КонецЕсли;
	
	ЗагрузитьНастройкиИсполненияОзнакомленияВФорму();
	
	Если Не ЗначениеЗаполнено(ВажностьИсполнения) Тогда 
		ВажностьИсполнения = Перечисления.ВариантыВажностиОбъектов.Обычная;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ВажностьОзнакомления) Тогда 
		ВажностьОзнакомления = Перечисления.ВариантыВажностиОбъектов.Обычная;
	КонецЕсли;
	
	Если ИдентификаторКонтролера = УникальныйИдентификаторПустой() Тогда
		ИдентификаторКонтролера = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	Если ИдентификаторПроверяющего = УникальныйИдентификаторПустой() Тогда
		ИдентификаторПроверяющего = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	КоличествоИсполнителейИсполнения = ИсполнителиИсполнения.Количество();
	КоличествоИсполнителейОзнакомления = ИсполнителиОзнакомления.Количество();
	
	СрокИсполненияДляПодчиненныхПроцессов = Неопределено;
	Если КоличествоИсполнителейИсполнения = 0
		Или КоличествоИсполнителейОзнакомления = 0 Тогда
		
		ТипыДокументов = МультипредметностьКлиентСервер.ПолучитьТипыДокументов();
		ОбрабатываемыеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(Объект, ТипыДокументов, Истина);
		Для Каждого Предмет Из ОбрабатываемыеПредметы Цикл
			Если ЗначениеЗаполнено(Предмет.СрокИсполнения) Тогда 
				СрокИсполненияДляПодчиненныхПроцессов = КонецДня(Предмет.СрокИсполнения);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СрокИсполненияДляПодчиненныхПроцессов) Тогда
		Если КоличествоИсполнителейИсполнения = 0 Тогда
			
			ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно;
			
			СтрИсполнитель = ИсполнителиИсполнения.Добавить();
			СтрИсполнитель.ПорядокИсполнения = Перечисления.ПорядокВыполненияЗадач.ВместеСПредыдущим;
			
			СтрИсполнитель.СрокИсполнения = СрокИсполненияДляПодчиненныхПроцессов;
			СтрИсполнитель.ВариантУстановкиСрокаИсполнения = 
				Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
			
		КонецЕсли;
		Если КоличествоИсполнителейОзнакомления = 0 Тогда
			
			СтрИсполнитель = ИсполнителиОзнакомления.Добавить();
			СтрИсполнитель.СрокИсполнения = СрокИсполненияДляПодчиненныхПроцессов;
			СтрИсполнитель.ВариантУстановкиСрокаИсполнения = 
				Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
			
		КонецЕсли;
		
		КоличествоИтерацийИсполнения = 1;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
	
	ВестиУчетПлановыхТрудозатратВБизнесПроцессах = 
		ПолучитьФункциональнуюОпцию("ВестиУчетПлановыхТрудозатратВБизнесПроцессах");
	Элементы.ОписаниеТрудозатратПроцессаИсполнения.Видимость = ВестиУчетПлановыхТрудозатратВБизнесПроцессах;
	Элементы.ОписаниеТрудозатратПроцессаОзнакомления.Видимость = ВестиУчетПлановыхТрудозатратВБизнесПроцессах;
	ПолучитьДанныеПроекта();
	
	Если ИсполнителиИсполнения.Количество() > 1 Тогда 
		Элементы.НазначитьОтветственным.Доступность = Истина;
	Иначе
		Элементы.НазначитьОтветственным.Доступность = Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВариантИсполнения) Тогда
		ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно;
	КонецЕсли;
	ПредыдущийВариантИсполнения = ВариантИсполнения;
	
	// Сроки исполнения
	УстановитьУсловноеОформлениеИстекшихСроков();
	ДатаОтсчетаДляРасчетаСроков = ТекущаяДата();
	ВозможенВыборТочнойДатыВСроках = Истина;
	
	ИспользоватьДатуИВремяВСрокахЗадач = 
		ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
		
	ПодсказкаВвода = СрокиИсполненияПроцессов.ПодсказкаВводаПоляСрокИсполнения(ЭтотОбъект);
	Элементы.ИсполнителиСрокИсполненияПредставление.ПодсказкаВвода = ПодсказкаВвода;
	Элементы.СрокОбработкиРезультатовИсполненияПредставление.ПодсказкаВвода = ПодсказкаВвода;
	Элементы.ИсполнителиОзнакомленияСрокИсполненияПредставление.ПодсказкаВвода = ПодсказкаВвода;
	Элементы.СрокОбработкиРезолюцииПредставление.ПодсказкаВвода = ПодсказкаВвода;
	
	ШиринаПоляСрокИсполнения = СрокиИсполненияПроцессов.ШиринаПоляСрокИсполнения(ЭтотОбъект);
	Элементы.ИсполнителиСрокИсполненияПредставление.Ширина = ШиринаПоляСрокИсполнения;
	Элементы.СрокОбработкиРезультатовИсполненияПредставление.Ширина = ШиринаПоляСрокИсполнения;
	Элементы.ИсполнителиОзнакомленияСрокИсполненияПредставление.Ширина = ШиринаПоляСрокИсполнения;
	Элементы.СрокОбработкиРезолюцииПредставление.Ширина = ШиринаПоляСрокИсполнения;
	
	ОбновитьСрокиИсполненияНаСервере(Истина);
	
	// Установка доступности
	УстановитьДоступность();
	УстановитьДоступностьПоШаблонуИсполнения();
	УстановитьДоступностьПоШаблонуОзнакомления();
	
	Если Не ЗначениеЗаполнено(ПроверяющийИсполнения) Тогда
		ПроверяющийИсполнения = Справочники.Сотрудники.ПустаяСсылка();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РаботаСБизнесПроцессамиКлиентСервер.ЗаполнитьШаг(ИсполнителиИсполнения);
	
	// РаспознаваниеРечи
	РаспознаваниеРечи_ИзменитьСостояниеФормы();
	// Конец РаспознаваниеРечи
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	// РаспознаваниеРечи
	РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
	РаботаСРечьюЖурналированиеКлиент.ОчиститьЖурнал(УникальныйИдентификатор);
	// Конец РаспознаваниеРечи
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(РезультатВыбора, ИсточникВыбора)
	
	РаботаСБизнесПроцессамиКлиентСервер.ЗаполнитьШаг(ИсполнителиИсполнения);
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьТрудозатратыУчастниковПроцесса" И Источник = ЭтотОбъект Тогда
		ЗаполнитьОписаниеТрудозатрат(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КоличествоИтерацийПриИзменении(Элемент)
	
	РаботаСБизнесПроцессамиКлиент.КоличествоИтерацийПриИзменении(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеТрудозатратПроцессаИсполненияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Настройки = Новый Структура;
	Настройки.Вставить("ЕдиницаИзмеренияТрудозатрат", ЕдиницаТрудозатрат);
	Настройки.Вставить("ВариантМаршрутизацииЗадач", ВариантИсполнения);
	Настройки.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	Настройки.Вставить("Участники", Новый Массив);
	
	Настройки.Вставить("ИмяРеквизитаОбъекта", "");
	Настройки.Вставить("ИмяТаблицыИсполнители", "ИсполнителиИсполнения");
	
	Для Каждого СтрИсполнитель ИЗ ИсполнителиИсполнения Цикл
		
		ТрудозатратыИсполнителя = РаботаСБизнесПроцессамиКлиент.
			СтруктураСтрокиТрудозатратУчастникаПроцесса(
				НСтр("ru = 'Исполнитель'"),
				"ТрудозатратыПланИсполнителя",
				СтрИсполнитель.ТрудозатратыПланИсполнителя,
				СтрИсполнитель.Исполнитель,
				СтрИсполнитель.Шаг,
				СтрИсполнитель.НомерСтроки);
		Настройки.Участники.Добавить(ТрудозатратыИсполнителя);
		
	КонецЦикла;
	
	ТрудозатратыКонтролера = РаботаСБизнесПроцессамиКлиент.
		СтруктураСтрокиТрудозатратУчастникаПроцесса(
			НСтр("ru = 'Контролер'"),
			"ТрудозатратыПланКонтролера",
			ТрудозатратыПланКонтролера,
			КонтролерИсполнения);
	Настройки.Участники.Добавить(ТрудозатратыКонтролера);
	
	ТрудозатратыПроверяющего = РаботаСБизнесПроцессамиКлиент.
		СтруктураСтрокиТрудозатратУчастникаПроцесса(
			НСтр("ru = 'Проверяющий'"),
			"ТрудозатратыПланПроверяющего",
			ТрудозатратыПланПроверяющего,
			ПроверяющийИсполнения);
	Настройки.Участники.Добавить(ТрудозатратыПроверяющего);
	
	РаботаСБизнесПроцессамиКлиент.НастроитьТрудозатратУчастниковПроцесса(ЭтотОбъект, Настройки);
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеТрудозатратПроцессаОзнакомленияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Настройки = Новый Структура;
	Настройки.Вставить("ЕдиницаИзмеренияТрудозатрат", ЕдиницаТрудозатрат);
	Настройки.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	Настройки.Вставить("Участники", Новый Массив);
	
	Настройки.Вставить("ИмяРеквизитаОбъекта", "");
	
	ТрудозатратыИсполнителей = РаботаСБизнесПроцессамиКлиент.
		СтруктураСтрокиТрудозатратУчастникаПроцесса(
			НСтр("ru = 'Исполнители'"),
			"ТрудозатратыПланИсполнителяОзнакомления",
			ТрудозатратыПланИсполнителяОзнакомления);
	Настройки.Участники.Добавить(ТрудозатратыИсполнителей);
	
	РаботаСБизнесПроцессамиКлиент.НастроитьТрудозатратУчастниковПроцесса(ЭтотОбъект, Настройки);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантИсполненияПриИзменении(Элемент)
	
	РаботаСБизнесПроцессамиКлиент.ВариантИсполненияПриИзмененииПроцессаИсполнения(
		ЭтотОбъект, Элементы.ИсполнителиИсполнения,
		ВариантИсполнения, ПредыдущийВариантИсполнения, ИсполнителиИсполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантИсполненияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверяющийПриИзменении(Элемент)
	
	ОбновитьСрокиИсполненияОтложенно("ПроверяющийИсполнения");

КонецПроцедуры

&НаКлиенте
Процедура ПроверяющийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.УчастникНачалоВыбора(
		Элемент, ПроверяющийИсполнения, СтандартнаяОбработка, ЭтотОбъект, "ПроверяющийИсполнения");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверяющийИсполненияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СотрудникиКлиент.ОбработкаВыбораКонтейнера(
		Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
	СотрудникиКлиент.СотрудникОбработкаВыбора(
		ЭтотОбъект, "ПроверяющийИсполнения", ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверяющийАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.УчастникАвтоПодбор(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверяющийОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДополнениеТипа = Новый ОписаниеТипов("СправочникСсылка.ПолныеРоли");
		ДанныеВыбора = СотрудникиВызовСервера.СформироватьДанныеВыбора(Текст, ДополнениеТипа);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СрокОбработкиРезультатовПредставлениеПриИзменении(Элемент)
	
	ДопПараметры = СрокиИсполненияПроцессовКлиент.ДопПараметрыДляИзмененияСрокаПоПредставлению();
	ДопПараметры.Форма = ЭтотОбъект;
	ДопПараметры.Поле = "СрокОбработкиРезультатовИсполненияПредставление";
	ДопПараметры.НаименованиеИзмененногоРеквизита = "СрокОбработкиРезультатов";
	ДопПараметры.Исполнитель = ПроверяющийИсполнения;
	
	СрокиИсполненияПроцессовКлиент.ИзменитьСрокИсполненияУчастникаПроцессаПоПредставлению(
		СрокОбработкиРезультатовИсполнения,
		СрокОбработкиРезультатовДниИсполнения,
		СрокОбработкиРезультатовЧасыИсполнения,
		СрокОбработкиРезультатовМинутыИсполнения,
		ВариантУстановкиСрокаОбработкиРезультатовИсполнения,
		СрокОбработкиРезультатовИсполненияПредставление,
		ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокОбработкиРезолюцииПредставлениеПриИзменении(Элемент)
	
	ДопПараметры = СрокиИсполненияПроцессовКлиент.ДопПараметрыДляИзмененияСрокаПоПредставлению();
	ДопПараметры.Форма = ЭтотОбъект;
	ДопПараметры.Поле = "СрокОбработкиРезолюцииПредставление";
	ДопПараметры.НаименованиеИзмененногоРеквизита = "СрокОбработкиРезолюции";
	ДопПараметры.Исполнитель = Помощник;
	
	СрокиИсполненияПроцессовКлиент.ИзменитьСрокИсполненияУчастникаПроцессаПоПредставлению(
		СрокОбработкиРезолюции,
		СрокОбработкиРезолюцииДни,
		СрокОбработкиРезолюцииЧасы,
		СрокОбработкиРезолюцииМинуты,
		ВариантУстановкиСрокаОбработкиРезультатовИсполнения,
		СрокОбработкиРезолюцииПредставление,
		ДопПараметры);
	
КонецПроцедуры


&НаКлиенте
Процедура СрокОбработкиРезультатовПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыВыбораСрока = СрокиИсполненияПроцессовКлиент.ПараметрыВыбораСрокаУчастникаПроцесса();
	ПараметрыВыбораСрока.Форма = ЭтотОбъект;
	ПараметрыВыбораСрока.ИмяРеквизитаСрокИсполнения = "СрокОбработкиРезультатовИсполнения";
	ПараметрыВыбораСрока.ИмяРеквизитаСрокИсполненияДни = "СрокОбработкиРезультатовДниИсполнения";
	ПараметрыВыбораСрока.ИмяРеквизитаСрокИсполненияЧасы = "СрокОбработкиРезультатовЧасыИсполнения";
	ПараметрыВыбораСрока.ИмяРеквизитаСрокИсполненияМинуты = "СрокОбработкиРезультатовМинутыИсполнения";
	ПараметрыВыбораСрока.ИмяРеквизитаВариантУстановкиСрока = "ВариантУстановкиСрокаОбработкиРезультатовИсполнения";
	ПараметрыВыбораСрока.ИмяРеквизитаПредставлениеСрока = "СрокОбработкиРезультатовИсполненияПредставление";
	ПараметрыВыбораСрока.СрокиПредшественников = ИсполнителиИсполнения;
	ПараметрыВыбораСрока.НаименованиеСрокаУчастника = "СрокОбработкиРезультатов";
	ПараметрыВыбораСрока.Участник = ПроверяющийИсполнения;
	
	СрокиИсполненияПроцессовКлиент.ВыбратьСрокУчастникаПроцесса(ПараметрыВыбораСрока);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокОбработкиРезолюцииПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыВыбораСрока = СрокиИсполненияПроцессовКлиент.ПараметрыВыбораСрокаУчастникаПроцесса();
	ПараметрыВыбораСрока.Форма = ЭтотОбъект;
	ПараметрыВыбораСрока.ИмяРеквизитаСрокИсполнения = "СрокОбработкиРезолюции";
	ПараметрыВыбораСрока.ИмяРеквизитаСрокИсполненияДни = "СрокОбработкиРезолюцииДни";
	ПараметрыВыбораСрока.ИмяРеквизитаСрокИсполненияЧасы = "СрокОбработкиРезолюцииЧасы";
	ПараметрыВыбораСрока.ИмяРеквизитаСрокИсполненияМинуты = "СрокОбработкиРезолюцииМинуты";
	ПараметрыВыбораСрока.ИмяРеквизитаВариантУстановкиСрока = "ВариантУстановкиСрокаОбработкиРезультатовИсполнения";
	ПараметрыВыбораСрока.ИмяРеквизитаПредставлениеСрока = "СрокОбработкиРезолюцииПредставление";
	ПараметрыВыбораСрока.НаименованиеСрокаУчастника = "СрокОбработкиРезультатов";
	ПараметрыВыбораСрока.Участник = Помощник;
	
	СрокиИсполненияПроцессовКлиент.ВыбратьСрокУчастникаПроцесса(ПараметрыВыбораСрока);
	
КонецПроцедуры

&НаКлиенте
Процедура СрокОбработкиРезультатовПредставлениеРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СрокиИсполненияПроцессовКлиент.ИзменитьОтносительныйСрокУчастникаПроцесса(
		ЭтотОбъект,
		СрокОбработкиРезультатовИсполнения,
		СрокОбработкиРезультатовДниИсполнения,
		СрокОбработкиРезультатовЧасыИсполнения,
		СрокОбработкиРезультатовМинутыИсполнения,
		СрокОбработкиРезультатовИсполненияПредставление,
		ВариантУстановкиСрокаОбработкиРезультатовИсполнения,
		Направление,
		"СрокОбработкиРезультатов");
	
КонецПроцедуры

&НаКлиенте
Процедура СрокОбработкиРезолюцииПредставлениеРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СрокиИсполненияПроцессовКлиент.ИзменитьОтносительныйСрокУчастникаПроцесса(
		ЭтотОбъект,
		СрокОбработкиРезолюции,
		СрокОбработкиРезолюцииДни,
		СрокОбработкиРезолюцииЧасы,
		СрокОбработкиРезолюцииМинуты,
		СрокОбработкиРезолюцииПредставление,
		ВариантУстановкиСрокаОбработкиРезультатовИсполнения,
		Направление,
		"СрокОбработкиРезолюции");
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерПриИзменении(Элемент)
	
	ОбновитьСрокиИсполненияОтложенно("КонтролерИсполнения");

КонецПроцедуры

&НаКлиенте
Процедура КонтролерНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.УчастникНачалоВыбора(
		Элемент, КонтролерИсполнения, СтандартнаяОбработка, ЭтотОбъект, "КонтролерИсполнения");
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерИсполненияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СотрудникиКлиент.ОбработкаВыбораКонтейнера(
		Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
		
	СотрудникиКлиент.СотрудникОбработкаВыбора(
		ЭтотОбъект, "КонтролерИсполнения", ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.УчастникАвтоПодбор(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтролерОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДополнениеТипа = Новый ОписаниеТипов("СправочникСсылка.ПолныеРоли");
		ДанныеВыбора = СотрудникиВызовСервера.СформироватьДанныеВыбора(Текст, ДополнениеТипа);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ИсполнителиИсполнения

&НаКлиенте
Процедура ИсполнителиИсполненияПриАктивизацииСтроки(Элемент)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнителиИсполненияПриАктивизацииСтроки(
		ЭтотОбъект, Элементы.ИсполнителиИсполнения,
		Элементы.ИсполнителиСрокИсполненияПредставление, ИсполнителиИсполнения,
		ДоступностьПоШаблонуИсполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиИсполненияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнителиПриНачалеРедактирования(
		ЭтотОбъект, НоваяСтрока,
		Элементы.ИсполнителиИсполнения,
		ИсполнителиИсполнения,
		ВариантИсполнения,
		"ПорядокИсполнения");
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиИсполненияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнителиПриОкончанииРедактирования(
		ЭтотОбъект, НоваяСтрока, ОтменаРедактирования, Элементы.ИсполнителиИсполнения, ИсполнителиИсполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиИсполненияПослеУдаления(Элемент)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнителиИсполненияПослеУдаления(
		ЭтотОбъект, Элементы.ИсполнителиИсполнения, ИсполнителиИсполнения, ВариантИсполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиИсполненияОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Поле Исполнитель

&НаКлиенте
Процедура ИсполнительИсполненияПриИзменении(Элемент)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнительПриИзменении(
		ЭтотОбъект, Элементы.ИсполнителиИсполнения, ИсполнителиИсполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительИсполненияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнительИсполненияНачалоВыбора(
		ЭтотОбъект, СтандартнаяОбработка, Элементы.ИсполнителиИсполнения,
		ИсполнителиИсполнения, ВариантИсполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительИсполненияОчистка(Элемент, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнительОчистка(
		СтандартнаяОбработка, Элементы.ИсполнителиИсполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительИсполненияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнительОбработкаВыбора(
		Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
		
	СотрудникиКлиент.СотрудникОбработкаВыбора(
		Элементы.ИсполнителиИсполнения.ТекущиеДанные, "Исполнитель", ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительИсполненияАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнительАвтоПодбор(
		ЭтотОбъект, Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительИсполненияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнительОкончаниеВводаТекста(
		ЭтотОбъект, Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

// Поле ПорядокИсполнения

&НаКлиенте
Процедура ПорядокИсполненияПриИзменении(Элемент)
	
	РаботаСБизнесПроцессамиКлиент.ПорядокИсполненияПриИзмененииТаблицыИсполнители(
		ЭтотОбъект, Элементы.ИсполнителиИсполнения, ИсполнителиИсполнения);
	
КонецПроцедуры

// Поле ИсполнителиСрокИсполненияПредставление

&НаКлиенте
Процедура ИсполнителиСрокИсполненияПредставлениеПриИзменении(Элемент)
	
	СрокиИсполненияПроцессовКлиент.ИзменитьСрокИсполненияПоПредставлениюВТаблицеИсполнители(
		ЭтотОбъект, Элементы.ИсполнителиИсполнения, ИсполнителиИсполнения, ВариантИсполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиСрокИсполненияПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СрокиИсполненияПроцессовКлиент.ВыбратьСрокИсполненияДляСтрокиТаблицыИсполнители(
		ЭтотОбъект, Элементы.ИсполнителиИсполнения, ИсполнителиИсполнения, ВариантИсполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиСрокИсполненияПредставлениеРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СрокиИсполненияПроцессовКлиент.ИзменитьСрокИсполненияВТаблицеИсполнители(
		ЭтотОбъект, Элементы.ИсполнителиИсполнения, ИсполнителиИсполнения, Направление, ВариантИсполнения);
	
КонецПроцедуры

// Шаблоны текста для наименования и описания
&НаКлиенте
Процедура НаименованиеИсполнениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	РаботаСБизнесПроцессамиКлиент.ВыбратьШаблонТекстаРеализация(ЭтотОбъект, "НаименованиеИсполнение",
		ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.ПроцессИсполнениеНаименование"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеИсполнениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьШаблонТекстаРеализация(ЭтотОбъект, "ОписаниеИсполнение",
		ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.ПроцессИсполнениеОписание"));

КонецПроцедуры

&НаКлиенте
Процедура ОписаниеНаправитьПомощникуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьШаблонТекстаРеализация(ЭтотОбъект, "ОписаниеОбработатьРезолюцию",
		ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.ПроцессРассмотрениеНаименование"));

КонецПроцедуры


&НаКлиенте
Процедура НаименованиеИсполнениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		
		ДанныеВыбора = РаботаСШаблонамиТекстовСервер.СформироватьДанныеВыбораШаблона(
			ПараметрыПолученияДанных, 
			ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.ПроцессИсполнениеНаименование"));
			
		Если ДанныеВыбора.Количество() <> 0 Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеИсполнениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура")  Тогда 
		НаименованиеИсполнения = ВыбранноеЗначение.Шаблон;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиОписаниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Область = ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.ПроцессИсполнениеОписание");
	ЗаголовокФормыВыбора = НСтр("ru = 'Выбор шаблона описания'");
	ИмяОбработчика = "ИсполнителиОписаниеНачалоВыбораПродолжение";
	
	ПараметрыФормы = Новый Структура("ОбластьПрименения, Заголовок", 
		Область,
		ЗаголовокФормыВыбора);
		
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Форма", ЭтотОбъект);
		
	ОписаниеОповещения = Новый ОписаниеОповещения(
		ИмяОбработчика,
		ЭтотОбъект,
		ДопПараметры);
		
	ОткрытьФорму("Справочник.ШаблоныТекстов.ФормаВыбора", 
		ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиОписаниеНачалоВыбораПродолжение(Результат, Параметры) Экспорт 
	
	Если ТипЗнч(Результат) = Тип("СправочникСсылка.ШаблоныТекстов")  Тогда 
		Элементы.ИсполнителиИсполнения.ТекущиеДанные.Описание = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(
			Результат, "Шаблон");
	КонецЕсли;	
		
КонецПроцедуры	

// Шаблоны текста для наименования и описания

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ИсполнителиОзнакомления

&НаКлиенте
Процедура ИсполнителиОзнакомленияПриАктивизацииСтроки(Элемент)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнителиПриАктивизацииСтроки(
		ЭтотОбъект,
		Элементы.ИсполнителиОзнакомления,
		Элементы.ИсполнителиОзнакомленияСрокИсполненияПредставление,
		ДоступностьПоШаблонуОзнакомления);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиОзнакомленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнителиПриНачалеРедактирования(
		ЭтотОбъект, НоваяСтрока,
		Элементы.ИсполнителиОзнакомления,
		ИсполнителиОзнакомления);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиОзнакомленияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнителиПриОкончанииРедактирования(
		ЭтотОбъект, НоваяСтрока, ОтменаРедактирования, Элементы.ИсполнителиОзнакомления, ИсполнителиОзнакомления);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиОзнакомленияПослеУдаления(Элемент)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнителиПослеУдаления(ЭтотОбъект, ИсполнителиОзнакомления);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиОзнакомленияОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// ИсполнительОзнакомления

&НаКлиенте
Процедура ИсполнительОзнакомленияПриИзменении(Элемент)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнительПриИзменении(
		ЭтотОбъект, Элементы.ИсполнителиОзнакомления, ИсполнителиОзнакомления);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОзнакомленияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнительНачалоВыбора(
		ЭтотОбъект, СтандартнаяОбработка,
		Элементы.ИсполнителиОзнакомления, ИсполнителиОзнакомления);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОзнакомленияОчистка(Элемент, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнительОчистка(
		СтандартнаяОбработка, Элементы.ИсполнителиОзнакомления);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОзнакомленияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнительОбработкаВыбора(
		ЭтотОбъект, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОзнакомленияАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнительАвтоПодбор(
		ЭтотОбъект, Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнительОзнакомленияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ИсполнительОкончаниеВводаТекста(
		ЭтотОбъект, Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

// Поле ИсполнителиОзнакомленияСрокИсполненияПредставление

&НаКлиенте
Процедура ИсполнителиОзнакомленияСрокИсполненияПредставлениеПриИзменении(Элемент)
	
	СрокиИсполненияПроцессовКлиент.ИзменитьСрокИсполненияПоПредставлениюВТаблицеИсполнители(
		ЭтотОбъект, Элементы.ИсполнителиОзнакомления, ИсполнителиОзнакомления);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиОзнакомленияСрокИсполненияПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СрокиИсполненияПроцессовКлиент.ВыбратьСрокИсполненияДляСтрокиТаблицыИсполнители(
		ЭтотОбъект, Элементы.ИсполнителиОзнакомления, ИсполнителиОзнакомления);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиОзнакомленияСрокИсполненияПредставлениеРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СрокиИсполненияПроцессовКлиент.ИзменитьСрокИсполненияВТаблицеИсполнители(
		ЭтотОбъект, Элементы.ИсполнителиОзнакомления, ИсполнителиОзнакомления, Направление);
		
	
КонецПроцедуры

// Шаблоны текста для наименования и описания
&НаКлиенте
Процедура НаименованиеОзнакомленияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	РаботаСБизнесПроцессамиКлиент.ВыбратьШаблонТекстаРеализация(ЭтотОбъект, "НаименованиеОзнакомления",
		ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.ПроцессОзнакомлениеНаименование"));
	
КонецПроцедуры

// Шаблоны текста для наименования и описания
&НаКлиенте
Процедура НаименованиеНаправитьПомощникуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	РаботаСБизнесПроцессамиКлиент.ВыбратьШаблонТекстаРеализация(ЭтотОбъект, "НаименованиеНаправитьПомощнику",
		ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.ПроцессРассмотрениеНаименование"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеОзнакомленияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьШаблонТекстаРеализация(ЭтотОбъект, "ОписаниеОзнакомления",
		ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.ПроцессОзнакомлениеОписание"));

КонецПроцедуры

&НаКлиенте
Процедура НаименованиеОзнакомленияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		
		ДанныеВыбора = РаботаСШаблонамиТекстовСервер.СформироватьДанныеВыбораШаблона(
			ПараметрыПолученияДанных, 
			ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.ПроцессОзнакомлениеНаименование"));
			
		Если ДанныеВыбора.Количество() <> 0 Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеОбработатьРезолюциюАвтоПодбор(Элемент,
	Текст,
	ДанныеВыбора,
	ПараметрыПолученияДанных,
	Ожидание,
	СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		
		ДанныеВыбора = РаботаСШаблонамиТекстовСервер.СформироватьДанныеВыбораШаблона(
			ПараметрыПолученияДанных, 
			ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.ЗадачаОбработатьРезолюцию"));
			
		Если ДанныеВыбора.Количество() <> 0 Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеОзнакомленияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура")  Тогда 
		НаименованиеОзнакомления = ВыбранноеЗначение.Шаблон;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеНаправитьПомощникуОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура")  Тогда 
		НаименованиеНаправитьПомощнику = ВыбранноеЗначение.Шаблон;
	КонецЕсли;	
	
КонецПроцедуры

// Шаблоны текста для наименования и описания

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область РаспознаваниеРечи

&НаКлиенте
Процедура РаспознаваниеРечи(Команда)
	
	Если ЭтотОбъект["РаспознаваниеРечи_ВыполняетсяРаспознавание"] Тогда
		РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
	Иначе
		РаспознаваниеРечи_НачатьРаспознавание();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыРаспознавания(Команда)
	
	ТекущиеПараметры = ЭтотОбъект["РаспознаваниеРечи_ПараметрыРаспознавания"];
	ПараметрыРаспознаванияРечиКлиент.ПоказатьВыборПараметровРаспознаванияРечи(ЭтотОбъект, ТекущиеПараметры, 
		Новый ОписаниеОповещения("ПриВыбореПараметровРаспознаванияРечи", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура Пожаловаться(Команда)
	
	РаботаСРечьюЖурналированиеКлиент.СформироватьПисьмо(УникальныйИдентификатор);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ЗаполнитьПоШаблонуИсполнение(Команда)
	
	Предметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(Объект,, Истина);
	ШаблоныИсполнения.ЗагрузитьЗначения(МультипредметностьВызовСервера.ПолучитьШаблоныПоПредметам(Предметы, "ШаблоныИсполнения"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗаполнитьПоШаблонуИсполнениеПродолжение",
		ЭтотОбъект);
	ШаблоныБизнесПроцессовКлиент.ВыбратьШаблонБизнесПроцесса("ШаблоныИсполнения", ШаблоныИсполнения, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблонуИсполнениеПродолжение(РезультатВыбора, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатВыбора) Тогда 
		ЗаполнитьИсполнениеПоШаблонуНаСервере(РезультатВыбора);
	КонецЕсли;
	РаботаСБизнесПроцессамиКлиентСервер.ЗаполнитьШаг(ИсполнителиИсполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблонуОзнакомление(Команда)
	
	Предметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(Объект,, Истина);
	ШаблоныОзнакомления.ЗагрузитьЗначения(МультипредметностьВызовСервера.ПолучитьШаблоныПоПредметам(Предметы, "ШаблоныОзнакомления"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ЗаполнитьПоШаблонуОзнакомлениеПродолжение",
		ЭтотОбъект);
		
	ШаблоныБизнесПроцессовКлиент.ВыбратьШаблонБизнесПроцесса("ШаблоныОзнакомления", ШаблоныОзнакомления, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблонуОзнакомлениеПродолжение(РезультатВыбора, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатВыбора) Тогда 
		ЗаполнитьОзнакомлениеПоШаблонуНаСервере(РезультатВыбора);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеИсполнениеВыборНажатие(Элемент)
	
	РаботаСБизнесПроцессамиКлиент.ВыбратьШаблонТекстаРеализация(ЭтотОбъект, "ОписаниеИсполнение",
		ПредопределенноеЗначение("Перечисление.ОбластиПримененияШаблоновТекстов.ПроцессИсполнениеОписание"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьИсполнителейИсполнения(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ПодобратьИсполнителейИсполнения(
		ЭтотОбъект, Элементы.ИсполнителиИсполнения, ИсполнителиИсполнения, ВариантИсполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВверх(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ПереместитьИсполнителяПроцессаИсполнения(
		ЭтотОбъект, Элементы.ИсполнителиИсполнения, ИсполнителиИсполнения, ВариантИсполнения, -1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВниз(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ПереместитьИсполнителяПроцессаИсполнения(
		ЭтотОбъект, Элементы.ИсполнителиИсполнения, ИсполнителиИсполнения, ВариантИсполнения, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура НазначитьОтветственным(Команда)
	
	РаботаСБизнесПроцессамиКлиент.НазначитьОтветственным(
		ЭтотОбъект,
		Элементы.ИсполнителиИсполнения,
		ИсполнителиИсполнения,
		ВариантИсполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура НаправитьНаОзнакомление(Команда)
	
	Отказ = Ложь;
	
	ОбщегоНазначенияДокументооборотКлиент.УдалитьПустыеСтрокиТаблицы(
		ИсполнителиОзнакомления, "Исполнитель");
	РаботаСБизнесПроцессамиКлиентСервер.ЗаполнитьНомерСтрокиВТаблицеИсполнителей(
		ИсполнителиОзнакомления);
	
	Если ПустаяСтрока(НаименованиеОзнакомления) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Поле ""Заголовок"" не заполнено'"),, 
			"НаименованиеОзнакомления",,Отказ);
	КонецЕсли;
	
	Если ИсполнителиОзнакомления.Количество() = 0 Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не введено ни одной строки в список ""Исполнители""'"),, 
			"ИсполнителиОзнакомления",,Отказ);
	КонецЕсли;
	
	Для Каждого Строка Из ИсполнителиОзнакомления Цикл
		Если Не ЗначениеЗаполнено(Строка.Исполнитель) Тогда 
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не заполнена колонка ""Исполнитель"" в строке %1 списка ""Исполнители""'"),
				ИсполнителиОзнакомления.Индекс(Строка)+1);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,,"ИсполнителиОзнакомления["+ИсполнителиОзнакомления.Индекс(Строка)+"].Исполнитель",,Отказ);
		КонецЕсли;
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВсеУчастники = Новый Массив;
	Для Каждого СтрокаУчастника Из ИсполнителиОзнакомления Цикл
		Если Не ЗначениеЗаполнено(СтрокаУчастника.Исполнитель) Тогда
			Продолжить;
		КонецЕсли;
		ВсеУчастники.Добавить(СтрокаУчастника.Исполнитель);
	КонецЦикла;
	
	ТекущаяДатаСеанса = ОбщегоНазначенияКлиент.ДатаСеанса();
	СрокПроверки = Макс(
		ТекущаяДатаСеанса,
		СрокИсполненияПроцессаОзнакомления);
		
	РезультатПроверкиОтсутствий = 
		ОтсутствияКлиент.ПроверитьОтсутствия(ВсеУчастники, ТекущаяДатаСеанса, СрокПроверки);
	Если РезультатПроверкиОтсутствий.ЕстьОтсутствия Тогда
		
		Обработчик = Новый ОписаниеОповещения(
			"НаправитьНаОзнакомлениеПослеПредупрежденияОбОтсутствиях",
			ЭтотОбъект);
		
		ОтсутствияКлиент.ПредупредитьОбОтсутствиях(РезультатПроверкиОтсутствий, Обработчик);
			
	Иначе
		
		ПроверитьСрокиИНаправить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаправитьНаИсполнение(Команда)
	
	Отказ = Ложь;
	
	ПодготовитьНастройкиИсполненияОзнакомленияДляЗаписи();
	
	Если ПустаяСтрока(НаименованиеИсполнения) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Поле ""Заголовок"" не заполнено'"),, 
			"НаименованиеИсполнения",,Отказ);
	КонецЕсли;	
	
	Если ИсполнителиИсполнения.Количество() = 0 Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не введено ни одной строки в список ""Исполнители""'"),, 
			"ИсполнителиИсполнения",,Отказ);
	КонецЕсли;	
	
	Для Каждого Строка Из ИсполнителиИсполнения Цикл
		Если Не ЗначениеЗаполнено(Строка.Исполнитель) Тогда 
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не заполнена колонка ""Исполнитель"" в строке %1 списка ""Исполнители""'"),
				ИсполнителиИсполнения.Индекс(Строка)+1);
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,,"ИсполнителиИсполнения["+ИсполнителиИсполнения.Индекс(Строка)+"].Исполнитель",,Отказ);
		КонецЕсли;
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	ВсеУчастники = Новый Массив;
	Для Каждого СтрокаУчастника Из ИсполнителиИсполнения Цикл
		Если Не ЗначениеЗаполнено(СтрокаУчастника.Исполнитель) Тогда
			Продолжить;
		КонецЕсли;
		ВсеУчастники.Добавить(СтрокаУчастника.Исполнитель);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ПроверяющийИсполнения) Тогда
		ВсеУчастники.Добавить(ПроверяющийИсполнения);
	КонецЕсли;
	
	ТекущаяДатаСеанса = ОбщегоНазначенияКлиент.ДатаСеанса();
	СрокПроверки = Макс(
		ТекущаяДатаСеанса,
		СрокИсполненияПроцессаИсполнения,
		СрокОбработкиРезультатовИсполнения);
		
	РезультатПроверкиОтсутствий = 
		ОтсутствияКлиент.ПроверитьОтсутствия(ВсеУчастники, ТекущаяДатаСеанса, СрокПроверки);
	Если РезультатПроверкиОтсутствий.ЕстьОтсутствия Тогда
		
		Обработчик = Новый ОписаниеОповещения(
			"НаправитьНаИсполнениеПослеПредупрежденияОбОтсутствиях",
			ЭтотОбъект);
		
		ОтсутствияКлиент.ПредупредитьОбОтсутствиях(РезультатПроверкиОтсутствий, Обработчик);
			
	Иначе
		
		ПроверитьСрокиИНаправить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НаправитьПомощнику(Команда)
	
	Отказ = Ложь;
	Если ПустаяСтрока(НаименованиеНаправитьПомощнику) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		НСтр("ru = 'Поле ""Заголовок"" не заполнено'") , , "НаименованиеНаправитьПомощнику", , Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Помощник) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не указан помощник '"),, "Помощник",,Отказ);
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ОписаниеОбработатьРезолюцию) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не указан текст резолюции'"),, "ОписаниеОбработатьРезолюцию", , Отказ);
	КонецЕсли;

	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьСрокиИНаправить();
	
КонецПроцедуры


&НаКлиенте
Процедура ПодобратьИсполнителейОзнакомления(Команда)
	
	РаботаСБизнесПроцессамиКлиент.ПодобратьИсполнителей(
		ЭтотОбъект, Элементы.ИсполнителиОзнакомления, ИсполнителиОзнакомления);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РаспознаваниеРечи

&НаСервере
Процедура РаспознаваниеРечи_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("РаспознаваниеРечи_РаспознаваниеДоступно", Новый ОписаниеТипов("Булево")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("РаспознаваниеРечи_ВыполняетсяРаспознавание", Новый ОписаниеТипов("Булево")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("РаспознаваниеРечи_РаспознаваниеФразыЗавершено", Новый ОписаниеТипов("Булево")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("РаспознаваниеРечи_ВремяНачалаРаспознавания", Новый ОписаниеТипов("Число")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("РаспознаваниеРечи_ПараметрыРаспознавания", Новый ОписаниеТипов)); // Произвольный
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("РаспознаваниеРечи_ПерезапускРаспознавания", Новый ОписаниеТипов("Булево")));
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	//
	
	ТекущиеПараметры = ПараметрыРаспознаванияРечи.ТекущиеПараметры(ЭтотОбъект);
	
	ЭтотОбъект["РаспознаваниеРечи_ПараметрыРаспознавания"] = ТекущиеПараметры;
	ЭтотОбъект["РаспознаваниеРечи_РаспознаваниеДоступно"] = ПараметрыРаспознаванияРечи.РаспознаваниеДоступно(ТекущиеПараметры);
	
	Элементы.ГруппаРаспознаваниеРечи.Видимость = ЭтотОбъект["РаспознаваниеРечи_РаспознаваниеДоступно"];
	
	ЭтотОбъект["РаспознаваниеРечи_РаспознаваниеФразыЗавершено"] = Истина;
	
	//
	
	Константы.ОбщаяГрамматикаРаботыСРечью.УстановитьГрамматикуСеанса();
	
КонецПроцедуры

&НаКлиенте
Процедура РаспознаваниеРечи_НачатьРаспознавание()
	
	ТекущиеПараметры = ЭтотОбъект["РаспознаваниеРечи_ПараметрыРаспознавания"];
	ПараметрыМодели = ПараметрыРаспознаванияРечиКлиент.ПараметрыМодели(ТекущиеПараметры);
	ВариантИспользования = ПараметрыРаспознаванияРечиКлиент.ВариантИспользования(ТекущиеПараметры);
	ПараметрыРаспознавания = ПараметрыРаспознаванияРечиКлиент.ПараметрыПотоковогоРаспознаванияРечи(ТекущиеПараметры,
		Новый ОписаниеОповещения("ПриОстановкеАудиозаписи", ЭтотОбъект));
	
	Элемент = Элементы.ОписаниеИсполнение;
		
	Контекст = Новый Структура;
	Контекст.Вставить("Форма", ЭтотОбъект);
	Контекст.Вставить("Элемент", Элемент);
	Контекст.Вставить("ИмяРеквизита", "ОписаниеИсполнения");
	
	Попытка
		РаботаСРечьюБМОКлиент.НачатьПотоковоеРаспознавание(
			УникальныйИдентификатор,
			Новый ОписаниеОповещения(
				"ПриПолученииРезультатаРаспознавания", ЭтотОбъект, Контекст,
				"ПриОбработкеОшибкиРаспознавания", ЭтотОбъект),
			ПараметрыМодели,
			ВариантИспользования,
			ПараметрыРаспознавания
		);
		
		ЭтотОбъект["РаспознаваниеРечи_ВыполняетсяРаспознавание"] = Истина;
		ЭтотОбъект["РаспознаваниеРечи_ВремяНачалаРаспознавания"] = ТекущаяУниверсальнаяДатаВМиллисекундах();
		
	Исключение
		ПриОбработкеОшибкиРаспознавания(ИнформацияОбОшибке(), Истина, Контекст);
	КонецПопытки;
	
	РаспознаваниеРечи_ИзменитьСостояниеФормы();
	ТекущийЭлемент = Элементы.ОписаниеИсполнение;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспознаваниеРечи_ИзменитьСостояниеФормы()
	
	Если ЭтотОбъект["РаспознаваниеРечи_ВыполняетсяРаспознавание"] Тогда
			
		Элементы.РаспознаваниеРечи.Картинка = БиблиотекаКартинок.КрасныйМикрофон;
		
		Если ЭтотОбъект["РаспознаваниеРечи_РаспознаваниеФразыЗавершено"] Тогда
			Элементы.РаспознаваниеРечи.ЦветФона = Новый Цвет(255, 204, 0);
		Иначе
			Элементы.РаспознаваниеРечи.ЦветФона = Новый Цвет(225, 154, 0);
		КонецЕсли;
		
	Иначе
		
		Элементы.РаспознаваниеРечи.Картинка = БиблиотекаКартинок.ЧерныйМикрофон;
		Элементы.РаспознаваниеРечи.ЦветФона = Новый Цвет;
		
	КонецЕсли;
	
	Элементы.ГруппаРаспознаваниеРечи.Видимость = ЭтотОбъект["РаспознаваниеРечи_РаспознаваниеДоступно"]
		И РаботаСРечьюБМОКлиент.ПоддерживаетсяПотоковоеРаспознавание();
	
	Элементы.ОписаниеИсполнение.Доступность = ЭтотОбъект["РаспознаваниеРечи_РаспознаваниеФразыЗавершено"];
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПолученииРезультатаРаспознавания(РезультатРаспознавания, ПродолжитьРаспознавание, Контекст) Экспорт 
	
	ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	ПоляВводаКлиент.ВставитьРезультатРаспознаванияПоКурсору(
		Контекст.Форма,
		Контекст.Элемент,
		Контекст.ИмяРеквизита,
		РезультатРаспознавания
	);
	
	ВремяКонца = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	РаботаСРечьюЖурналированиеКлиент.ДобавитьРезультатРаспознавания(
		УникальныйИдентификатор,
		РезультатРаспознавания,
		ВремяНачала,
		ВремяКонца
	);
	
	ЭтотОбъект["РаспознаваниеРечи_РаспознаваниеФразыЗавершено"] = РезультатРаспознавания.РаспознаваниеФразыЗавершено;
	РаспознаваниеРечи_ИзменитьСостояниеФормы();
	ТекущийЭлемент = Элементы.ОписаниеИсполнение;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОбработкеОшибкиРаспознавания(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	РаботаСРечьюЖурналированиеКлиент.ДобавитьИсключение(УникальныйИдентификатор, ИнформацияОбОшибке);
	
	ПоказатьИнформациюОбОшибке(ИнформацияОбОшибке);
	
	ЭтотОбъект["РаспознаваниеРечи_РаспознаваниеФразыЗавершено"] = Истина;
	РаспознаваниеРечи_ИзменитьСостояниеФормы();
	ТекущийЭлемент = Элементы.ОписаниеИсполнение;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОстановкеАудиозаписи(РезультатАудиозаписи, Контекст) Экспорт 
	
	ЭтотОбъект["РаспознаваниеРечи_ВыполняетсяРаспознавание"] = Ложь;
	ЭтотОбъект["РаспознаваниеРечи_РаспознаваниеФразыЗавершено"] = Истина;
	РаспознаваниеРечи_ИзменитьСостояниеФормы();
	ТекущийЭлемент = Элементы.ОписаниеИсполнение;
	
	ВремяКонца = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	ТекущиеПараметры = ЭтотОбъект["РаспознаваниеРечи_ПараметрыРаспознавания"];
	ПараметрыМодели = ПараметрыРаспознаванияРечиКлиент.ПараметрыМодели(ТекущиеПараметры);
	ВариантИспользования = ПараметрыРаспознаванияРечиКлиент.ВариантИспользования(ТекущиеПараметры);
	
	РаботаСРечьюЖурналированиеКлиент.ДобавитьАудио(
		УникальныйИдентификатор,
		РезультатАудиозаписи,
		ПараметрыМодели,
		ВариантИспользования,
		ЭтотОбъект["РаспознаваниеРечи_ВремяНачалаРаспознавания"],
		ВремяКонца
	);
	
	Если ЭтотОбъект["РаспознаваниеРечи_ПерезапускРаспознавания"] Тогда
		РаспознаваниеРечи_НачатьРаспознавание();
		ЭтотОбъект["РаспознаваниеРечи_ПерезапускРаспознавания"] = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореПараметровРаспознаванияРечи(Результат, Контекст) Экспорт
	
	ЭтотОбъект["РаспознаваниеРечи_ПараметрыРаспознавания"] = Результат;
	РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
	ЭтотОбъект["РаспознаваниеРечи_ПерезапускРаспознавания"] = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияРезультата(Результат, Контекст) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Свойство("Текст") Тогда
		ПоляВводаКлиент.ВставитьТекстПоКурсору(
			ЭтотОбъект, Элементы.ОписаниеИсполнение, "ОписаниеИсполнение", Результат.Текст);	
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПроверитьСрокиИНаправить()
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПродолжитьПослеПроверкиКорректностиЗаполненияСроков",
		ЭтотОбъект);
	
	Отказ = Ложь;
	СтруктураСроков = СтруктураСроковДляПроверкиКорректностиЗаполнения();
	СрокиИсполненияПроцессовКлиент.ПроверитьКорректностьЗаполненияСроковПередСтартом(
		ЭтотОбъект, СтруктураСроков, Новый Структура, Отказ, ОписаниеОповещения);
	
	Если Не Отказ Тогда
		ВыполнитьОбработкуОповещения(ОписаниеОповещения, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеПроекта()
	
	ЕдиницаТрудозатрат = Константы.ОсновнаяЕдиницаТрудозатрат.Получить();
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда 
		Если ЗначениеЗаполнено(Объект.ПроектнаяЗадача) Тогда 
			ЕдиницаТрудозатрат = ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
				Объект.ПроектнаяЗадача, "ТекущийПланЕдиницаТрудозатрат");
		ИначеЕсли ЗначениеЗаполнено(Объект.Проект) Тогда 
			ЕдиницаТрудозатрат = ОбщегоНазначенияДокументооборот.ЗначениеРеквизитаОбъектаВПривилегированномРежиме(
				Объект.Проект, "ЕдиницаТрудозатратЗадач");
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьОписаниеТрудозатрат(ЭтотОбъект);
	
КонецПроцедуры	

&НаСервере
Процедура УстановитьДоступность() Экспорт
	
	Если ИсполнителиИсполнения.Количество() > 1 Тогда 
		Элементы.НазначитьОтветственным.Доступность = Истина;
	Иначе
		Элементы.НазначитьОтветственным.Доступность = Ложь;
	КонецЕсли;
	
	Если ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Смешанно Тогда 
		Элементы.ПорядокИсполнения.Видимость = Истина;
		Элементы.Шаг.Видимость = Истина;
	ИначеЕсли ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Последовательно Тогда
		Элементы.ПорядокИсполнения.Видимость = Ложь;
		Элементы.Шаг.Видимость = Ложь;
	Иначе
		Элементы.ПорядокИсполнения.Видимость = Ложь;
		Элементы.Шаг.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПоШаблонуИсполнения()
	
	СтруктураПредметов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.БизнесПроцесс,"Предметы, ПредметыЗадач");
	
	СтруктураДоступности = Новый Структура("Шаблон, Ссылка, ВедущаяЗадача, Предметы, ПредметыЗадач", 
		ШаблонИсполнения, 
		Объект.БизнесПроцесс,
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БизнесПроцесс, "ВедущаяЗадача"),
		СтруктураПредметов.Предметы.Выгрузить(),
		СтруктураПредметов.ПредметыЗадач.Выгрузить());
	
	ДоступностьПоШаблонуИсполнения = Истина;
	
	Если Не ЗначениеЗаполнено(СтруктураДоступности.Шаблон)
		И Не ЗначениеЗаполнено(СтруктураДоступности.ВедущаяЗадача) Тогда 
		
		Возврат;
	КонецЕсли;
	
	ДоступностьПоШаблонуИсполнения = ШаблоныБизнесПроцессов.ДоступностьПоШаблону(СтруктураДоступности);
	
	Если ЗначениеЗаполнено(КонтролерИсполнения) Тогда 
		Элементы.КонтролерИсполнения.ТолькоПросмотр = Не ДоступностьПоШаблонуИсполнения;
	Иначе
		Элементы.КонтролерИсполнения.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПроверяющийИсполнения) Тогда 
		Элементы.ПроверяющийИсполнения.ТолькоПросмотр = Не ДоступностьПоШаблонуИсполнения;
	Иначе
		Элементы.ПроверяющийИсполнения.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВажностьИсполнения) Тогда 
		Элементы.ВажностьИсполнения.ТолькоПросмотр = Не ДоступностьПоШаблонуИсполнения;
	Иначе
		Элементы.ВажностьИсполнения.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	Если ИсполнителиИсполнения.Количество() > 0 Тогда
		Элементы.ИсполнителиИсполнения.ТолькоПросмотр = Не ДоступностьПоШаблонуИсполнения;
		Элементы.ПодобратьИсполнение.Доступность = ДоступностьПоШаблонуИсполнения;
	Иначе
		Элементы.ИсполнителиИсполнения.ТолькоПросмотр = Ложь;
		Элементы.ПодобратьИсполнение.Доступность = Истина;
	КонецЕсли;
	
	УстановитьДоступность();
	
	ПараметрыДоступности = 
		СрокиИсполненияПроцессовКлиентСервер.ПараметрыДоступностиЭлементаУправления();
	ПараметрыДоступности.ДоступностьПоШаблону = ДоступностьПоШаблонуИсполнения;
	
	СрокиИсполненияПроцессовКлиентСервер.НастроитьЭлементУправленияСроком(
		ЭтотОбъект,
		Элементы.СрокОбработкиРезультатовИсполненияПредставление,
		СрокОбработкиРезультатовИсполненияПредставление,
		ПараметрыДоступности);
	
	СрокиИсполненияПроцессовКлиентСервер.НастроитьЭлементУправленияСроком(
		ЭтотОбъект,
		Элементы.КоличествоИтерацийИсполнения,
		КоличествоИтерацийИсполнения,
		ПараметрыДоступности);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИсполнениеПоШаблонуНаСервере(Шаблон)
	
	ИсполнениеОбъект = БизнесПроцессы.Исполнение.СоздатьБизнесПроцесс();
	ИсполнениеОбъект.Заполнить(Новый Структура());
	
	Если ЗначениеЗаполнено(Объект.Исполнитель) Тогда
		ИсполнениеОбъект.Автор = Объект.Исполнитель;
	Иначе
		ИсполнениеОбъект.Автор = Сотрудники.ОсновнойСотрудник();
	КонецЕсли;
	
	Мультипредметность.ПередатьПредметыПроцессу(ИсполнениеОбъект, Объект.Предметы);
	
	ИсполнениеОбъект.ЗаполнитьПоШаблону(Шаблон);
	Если ЗначениеЗаполнено(ИсполнениеОбъект.Наименование) Тогда 
		НаименованиеИсполнения = ИсполнениеОбъект.Наименование;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ИсполнениеОбъект.Описание) Тогда 
		ОписаниеИсполнения = ИсполнениеОбъект.Описание;
	КонецЕсли;	
	
	// Срок обработки результатов
	Если ЗначениеЗаполнено(ИсполнениеОбъект.ВариантУстановкиСрокаОбработкиРезультатов) Тогда
		ВариантУстановкиСрокаОбработкиРезультатовИсполнения = 
			ИсполнениеОбъект.ВариантУстановкиСрокаОбработкиРезультатов;
	КонецЕсли;
	Если ЗначениеЗаполнено(ИсполнениеОбъект.СрокОбработкиРезультатовДни) Тогда
		СрокОбработкиРезультатовДниИсполнения = ИсполнениеОбъект.СрокОбработкиРезультатовДни;
	КонецЕсли;
	Если ЗначениеЗаполнено(ИсполнениеОбъект.СрокОбработкиРезультатовЧасы) Тогда
		СрокОбработкиРезультатовЧасыИсполнения = ИсполнениеОбъект.СрокОбработкиРезультатовЧасы;
	КонецЕсли;
	Если ЗначениеЗаполнено(ИсполнениеОбъект.СрокОбработкиРезультатовМинуты) Тогда
		СрокОбработкиРезультатовМинутыИсполнения = ИсполнениеОбъект.СрокОбработкиРезультатовМинуты;
	КонецЕсли;
	
	// Количество итераций
	Если ЗначениеЗаполнено(ИсполнениеОбъект.КоличествоИтераций) Тогда
		КоличествоИтерацийИсполнения = ИсполнениеОбъект.КоличествоИтераций;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИсполнениеОбъект.Важность) Тогда 
		ВажностьИсполнения = ИсполнениеОбъект.Важность;
	КонецЕсли;
	
	КонтролерИсполнения = ИсполнениеОбъект.Контролер;
	
	ПроверяющийИсполнения = ИсполнениеОбъект.Проверяющий;
	
	ИсполнителиИсполнения.Загрузить(ИсполнениеОбъект.Исполнители.Выгрузить());
	ШаблонИсполнения = Шаблон;
	
	ВариантИсполнения = ИсполнениеОбъект.ВариантИсполнения;
	
	// Сроки исполнения процессов
	ОбновитьСрокиИсполненияНаСервере();
	
	УстановитьДоступностьПоШаблонуИсполнения();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьПоШаблонуОзнакомления()
	
	СтруктураПредметов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.БизнесПроцесс,"Предметы, ПредметыЗадач");
	
	СтруктураДоступности = Новый Структура("Шаблон, Ссылка, ВедущаяЗадача, Предметы, ПредметыЗадач", 
		ШаблонОзнакомления, 
		Объект.БизнесПроцесс, 
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.БизнесПроцесс, "ВедущаяЗадача"),
		СтруктураПредметов.Предметы.Выгрузить(),
		СтруктураПредметов.ПредметыЗадач.Выгрузить());
	
	ДоступностьПоШаблонуОзнакомления = Истина;
	
	Если Не ЗначениеЗаполнено(СтруктураДоступности.Шаблон)
		И Не ЗначениеЗаполнено(СтруктураДоступности.ВедущаяЗадача) Тогда 
		
		Возврат;
	КонецЕсли;
	
	ДоступностьПоШаблонуОзнакомления = ШаблоныБизнесПроцессов.ДоступностьПоШаблону(СтруктураДоступности);
	
	Если ЗначениеЗаполнено(ВажностьОзнакомления) Тогда 
		Элементы.ВажностьОзнакомления.ТолькоПросмотр = Не ДоступностьПоШаблонуОзнакомления;
	Иначе
		Элементы.ВажностьОзнакомления.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	Если ИсполнителиОзнакомления.Количество() > 0 Тогда
		Элементы.ИсполнителиОзнакомления.ТолькоПросмотр = Не ДоступностьПоШаблонуОзнакомления;
		Элементы.ПодобратьОзнакомление.Доступность = ДоступностьПоШаблонуОзнакомления;
	Иначе
		Элементы.ИсполнителиОзнакомления.ТолькоПросмотр = Ложь;
		Элементы.ПодобратьОзнакомление.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОзнакомлениеПоШаблонуНаСервере(Шаблон)
	
	ОзнакомлениеОбъект = БизнесПроцессы.Ознакомление.СоздатьБизнесПроцесс();
	ОзнакомлениеОбъект.Заполнить(Новый Структура());
	
	Если ЗначениеЗаполнено(Объект.Исполнитель) Тогда
		ОзнакомлениеОбъект.Автор = Объект.Исполнитель;
	Иначе
		ОзнакомлениеОбъект.Автор = Сотрудники.ОсновнойСотрудник();
	КонецЕсли;
	
	Мультипредметность.ПередатьПредметыПроцессу(ОзнакомлениеОбъект, Объект.Предметы);
	
	ОзнакомлениеОбъект.ЗаполнитьПоШаблону(Шаблон);
	Если ЗначениеЗаполнено(ОзнакомлениеОбъект.Наименование) Тогда 
		НаименованиеОзнакомления = ОзнакомлениеОбъект.Наименование;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ОзнакомлениеОбъект.Описание) Тогда 
		ОписаниеОзнакомления = ОзнакомлениеОбъект.Описание;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ОзнакомлениеОбъект.Важность) Тогда 
		ВажностьОзнакомления = ОзнакомлениеОбъект.Важность;
	КонецЕсли;
	
	ИсполнителиОзнакомления.Загрузить(ОзнакомлениеОбъект.Исполнители.Выгрузить());
	ШаблонОзнакомления = Шаблон;
	
	// Сроки исполнения процессов
	ОбновитьСрокиИсполненияНаСервере();
	
	УстановитьДоступностьПоШаблонуОзнакомления();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьОписаниеТрудозатрат(Форма)
	
	Если НЕ Форма.ВестиУчетПлановыхТрудозатратВБизнесПроцессах Тогда
		Возврат;
	КонецЕсли;
	
	// Трудозатраты для процесса Исполнения
	
	ПараметрыОписания = Новый Структура;
	ПараметрыОписания.Вставить("Контролер", Истина);
	ПараметрыОписания.Вставить("Проверяющий", Истина);
	ПараметрыОписания.Вставить("Исполнители", Истина);
	ПараметрыОписания.Вставить("ПредставлениеИсполнителей", НСтр("ru = 'Исполнители'"));
	
	ПараметрыОписания.Вставить("ИмяРеквизитаОбъекта", "");
	ПараметрыОписания.Вставить("ИмяТаблицыИсполнители", "ИсполнителиИсполнения");
	
	РаботаСБизнесПроцессамиКлиентСервер.ЗаполнитьОписаниеТрудозатрат(
		Форма, ПараметрыОписания, "ОписаниеТрудозатратПроцессаИсполнения");
	
	// Трудозатраты для процесса Ознакомления
	
	ПараметрыОписания = Новый Структура;
	ПараметрыОписания.Вставить("Исполнитель", Истина);
	ПараметрыОписания.Вставить("ПредставлениеИсполнителя", НСтр("ru = 'Исполнители (для каждого)'"));
	
	ПараметрыОписания.Вставить("ИмяРеквизитаОбъекта", "");
	ПараметрыОписания.Вставить("ИмяРеквизитаТрудозатратыПланИсполнителя",
		"ТрудозатратыПланИсполнителяОзнакомления");
	
	РаботаСБизнесПроцессамиКлиентСервер.ЗаполнитьОписаниеТрудозатрат(
		Форма, ПараметрыОписания, "ОписаниеТрудозатратПроцессаОзнакомления");
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьПослеПроверкиКорректностиЗаполненияСроков(Результат, Параметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	РезультатИзмененияПараметровПроцесса = РезультатИзмененияПараметровПроцесса();
	РезультатИзмененияПараметровПроцесса.Вставить("КодВозврата", КодВозвратаДиалога.ОК);
	
	Закрыть(РезультатИзмененияПараметровПроцесса);
	
КонецПроцедуры

&НаСервере
Функция РезультатИзмененияПараметровПроцесса()
	
	УстановитьПривилегированныйРежим(Истина);

	РезультатИзмененияПараметровПроцесса = Новый Структура;
	
	Если ВариантРассмотрения = Перечисления.ВариантыРассмотрения.НаправитьПомощнику Тогда
		РезультатИзмененияПараметровПроцесса.Вставить("ОбрабатывающийРезолюцию", Помощник);
	Иначе
		НастройкиИсполненияОзнакомления = НастройкиИсполненияОзнакомленияИзФормы();
		ЗаписатьНастройкиИсполненияОзнакомления(НастройкиИсполненияОзнакомления);
		
		НастройкиИсполненияОзнакомления.ИсполнителиИсполнения = ОбщегоНазначения.ТаблицаЗначенийВМассив(
			НастройкиИсполненияОзнакомления.ИсполнителиИсполнения);
	
		НастройкиИсполненияОзнакомления.ИсполнителиОзнакомления = ОбщегоНазначения.ТаблицаЗначенийВМассив(
			НастройкиИсполненияОзнакомления.ИсполнителиОзнакомления);
	
		РезультатИзмененияПараметровПроцесса.Вставить("НастройкиИсполненияОзнакомления",
			НастройкиИсполненияОзнакомления);		
	КонецЕсли;

	Если ФормироватьРезолюцию Тогда
		РезультатИзмененияПараметровПроцесса.Вставить("ТекстРезолюции", СформироватьТекстРезолюции());
	КонецЕсли;
	
	Возврат РезультатИзмененияПараметровПроцесса;
	
КонецФункции

&НаСервере
Функция СформироватьТекстРезолюции()
	
	ТекстРезолюции = "";
	Если ВариантРассмотрения = Перечисления.ВариантыРассмотрения.НаправитьНаИсполнение Тогда
		
		ТекстРезолюции = "";
		Если ЗначениеЗаполнено(НаименованиеИсполнения) Тогда 
			ТекстРезолюции = ТекстРезолюции + НаименованиеИсполнения + Символы.ПС;
		КонецЕсли;
		Если ЗначениеЗаполнено(ОписаниеИсполнения) Тогда 
			ТекстРезолюции = ТекстРезолюции + ОписаниеИсполнения + Символы.ПС;
		КонецЕсли;
		Если ЗначениеЗаполнено(СрокИсполненияПроцессаИсполнения) Тогда
			ТекстРезолюции = ТекстРезолюции + НСтр("ru = 'Срок'") + ": " + Формат(СрокИсполненияПроцессаИсполнения, "ДФ=dd.MM.yyyy") + Символы.ПС;
		КонецЕсли;
		Если ЗначениеЗаполнено(ВажностьИсполнения) И ВажностьИсполнения <> Перечисления.ВариантыВажностиОбъектов.Обычная Тогда
			Важности = Новый Соответствие;
			Важности.Вставить(Перечисления.ВариантыВажностиОбъектов.Высокая, НСтр("ru = 'высокая'"));
			Важности.Вставить(Перечисления.ВариантыВажностиОбъектов.Обычная, НСтр("ru = 'обычная'"));
			Важности.Вставить(Перечисления.ВариантыВажностиОбъектов.Низкая,  НСтр("ru = 'низкая'"));
			
			ТекстРезолюции = ТекстРезолюции + НСтр("ru = 'Важность'") + ": " + Важности.Получить(ВажностьИсполнения) + Символы.ПС;
		КонецЕсли;
		Если ИсполнителиИсполнения.Количество() > 0 Тогда 
			ТекстРезолюции = ТекстРезолюции + НСтр("ru = 'Исполнители'") + ": " + Символы.ПС;
		КонецЕсли;
		Для Каждого Строка Из ИсполнителиИсполнения Цикл
			ТекстРезолюции = ТекстРезолюции + Строка(Строка.Исполнитель);
			Если ЗначениеЗаполнено(Строка.СрокИсполнения) Тогда 
				ТекстРезолюции = ТекстРезолюции + " " + Формат(Строка.СрокИсполнения, "ДФ=dd.MM.yyyy");
			КонецЕсли;
			ТекстРезолюции = ТекстРезолюции + " " + Строка.Описание + Символы.ПС;
		КонецЦикла;
		Если ЗначениеЗаполнено(КонтролерИсполнения) Тогда 
			ТекстРезолюции = ТекстРезолюции + НСтр("ru = 'Контролер'") + ": " + Строка(КонтролерИсполнения) + Символы.ПС;
		КонецЕсли;
		Если ЗначениеЗаполнено(ПроверяющийИсполнения) Тогда 
			ТекстРезолюции = ТекстРезолюции + НСтр("ru = 'Проверить'") + ": " + Строка(ПроверяющийИсполнения) + Символы.ПС;
		КонецЕсли;
		
	ИначеЕсли ВариантРассмотрения = Перечисления.ВариантыРассмотрения.НаправитьНаОзнакомление Тогда
		
		ТекстРезолюции = "";
		Если ЗначениеЗаполнено(НаименованиеОзнакомления) Тогда 
			ТекстРезолюции = ТекстРезолюции + НаименованиеОзнакомления + Символы.ПС;
		КонецЕсли;
		Если ЗначениеЗаполнено(ОписаниеОзнакомления) Тогда 
			ТекстРезолюции = ТекстРезолюции + ОписаниеОзнакомления + Символы.ПС;
		КонецЕсли;
		Если ЗначениеЗаполнено(СрокИсполненияПроцессаОзнакомления) Тогда
			ТекстРезолюции = ТекстРезолюции + НСтр("ru = 'Срок'") + ": " + Формат(СрокИсполненияПроцессаОзнакомления, "ДФ=dd.MM.yyyy") + Символы.ПС;
		КонецЕсли;
		Если ЗначениеЗаполнено(ВажностьОзнакомления) И ВажностьОзнакомления <> Перечисления.ВариантыВажностиОбъектов.Обычная Тогда
			Важности = Новый Соответствие;
			Важности.Вставить(Перечисления.ВариантыВажностиОбъектов.Высокая, НСтр("ru = 'высокая'"));
			Важности.Вставить(Перечисления.ВариантыВажностиОбъектов.Обычная, НСтр("ru = 'обычная'"));
			Важности.Вставить(Перечисления.ВариантыВажностиОбъектов.Низкая,  НСтр("ru = 'низкая'"));
			
			ТекстРезолюции = ТекстРезолюции + НСтр("ru = 'Важность'") + ": " + Важности.Получить(ВажностьОзнакомления) + Символы.ПС;
		КонецЕсли;
		Для Каждого Строка Из ИсполнителиОзнакомления Цикл
			ТекстРезолюции = ТекстРезолюции + Строка(Строка.Исполнитель);
		КонецЦикла;
	
	ИначеЕсли ВариантРассмотрения = Перечисления.ВариантыРассмотрения.НаправитьПомощнику Тогда
		
		ТекстРезолюции = "";
		Если ЗначениеЗаполнено(НаименованиеНаправитьПомощнику) Тогда 
			ТекстРезолюции = ТекстРезолюции + НаименованиеНаправитьПомощнику + Символы.ПС;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОписаниеОбработатьРезолюцию) Тогда 
			ТекстРезолюции = ТекстРезолюции + ОписаниеОзнакомления + Символы.ПС;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СрокОбработкиРезолюции) Тогда
			ТекстРезолюции = ТекстРезолюции + НСтр("ru = 'Срок'") + ": " + Формат(СрокОбработкиРезолюции, "ДФ=dd.MM.yyyy") + Символы.ПС;
		КонецЕсли;
	Иначе
		
		ВызватьИсключение СтрШаблон(
			НСтр("ru = 'Неизвестный вариант рассмотрения %1.'"),
			ВариантРассмотрения);
		
	КонецЕсли;
	
	Возврат ТекстРезолюции;
	
КонецФункции

&НаКлиенте
Процедура НаправитьНаИсполнениеПослеПредупрежденияОбОтсутствиях(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьСрокиИНаправить();
	
КонецПроцедуры

&НаКлиенте
Процедура НаправитьНаОзнакомлениеПослеПредупрежденияОбОтсутствиях(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьСрокиИНаправить();
	
КонецПроцедуры

#Область НастройкиИсполненияОзнакомления

&НаСервере
Процедура ЗагрузитьНастройкиИсполненияОзнакомленияВФорму()
	
	НастройкиИсполненияОзнакомления = 
		БизнесПроцессы.Рассмотрение.НастройкиИсполненияОзнакомленияПроцесса(Объект.БизнесПроцесс);
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, НастройкиИсполненияОзнакомления,,
		"ИсполнителиИсполнения, ИсполнителиОзнакомления, ОписаниеИсполнения, НаименованиеИсполнения");
	
	ИсполнителиИсполнения.Загрузить(НастройкиИсполненияОзнакомления.ИсполнителиИсполнения);
	ИсполнителиОзнакомления.Загрузить(НастройкиИсполненияОзнакомления.ИсполнителиОзнакомления);
	
	Если Не ЗначениеЗаполнено(ОписаниеИсполнения) 
		И ЗначениеЗаполнено(НастройкиИсполненияОзнакомления.ОписаниеИсполнения) Тогда
		ОписаниеИсполнения = НастройкиИсполненияОзнакомления.ОписаниеИсполнения;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НаименованиеИсполнения) 
		И ЗначениеЗаполнено(НастройкиИсполненияОзнакомления.НаименованиеИсполнения) Тогда
		НаименованиеИсполнения = НастройкиИсполненияОзнакомления.НаименованиеИсполнения;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НастройкиИсполненияОзнакомленияИзФормы()
	
	НастройкиИсполненияОзнакомления = 
		БизнесПроцессы.Рассмотрение.СтруктураНастройкиИсполненияОзнакомленияПроцесса();
	
	ЗаполнитьЗначенияСвойств(НастройкиИсполненияОзнакомления, ЭтаФорма,,
		"ИсполнителиИсполнения, ИсполнителиОзнакомления");
	
	Для Каждого СтрокаУчастника Из ИсполнителиИсполнения Цикл
		ЗаполнитьЗначенияСвойств(
			НастройкиИсполненияОзнакомления.ИсполнителиИсполнения.Добавить(),
			СтрокаУчастника);
	КонецЦикла;
	
	Для Каждого СтрокаУчастника Из ИсполнителиОзнакомления Цикл
		ЗаполнитьЗначенияСвойств(
			НастройкиИсполненияОзнакомления.ИсполнителиОзнакомления.Добавить(),
			СтрокаУчастника);
	КонецЦикла;
	
	Возврат НастройкиИсполненияОзнакомления;
	
КонецФункции

&НаСервере
Процедура ЗаписатьНастройкиИсполненияОзнакомления(Настройки)
	
	БизнесПроцессы.Рассмотрение.ЗаписатьНастройкиИсполненияОзнакомления(
		Объект.БизнесПроцесс, Настройки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодготовитьНастройкиИсполненияОзнакомленияДляЗаписи()
	
	Для Каждого СтрокаТаблицы Из ИсполнителиИсполнения Цикл
		Если СтрокаТаблицы.ИдентификаторИсполнителя = УникальныйИдентификаторПустой() Тогда
			СтрокаТаблицы.ИдентификаторИсполнителя = Новый УникальныйИдентификатор;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из ИсполнителиОзнакомления Цикл
		Если СтрокаТаблицы.ИдентификаторИсполнителя = УникальныйИдентификаторПустой() Тогда
			СтрокаТаблицы.ИдентификаторИсполнителя = Новый УникальныйИдентификатор;
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначенияДокументооборотКлиент.УдалитьПустыеСтрокиТаблицы(ИсполнителиИсполнения, "Исполнитель");
	ОбщегоНазначенияДокументооборотКлиент.УдалитьПустыеСтрокиТаблицы(ИсполнителиОзнакомления, "Исполнитель");
	
	РаботаСБизнесПроцессамиКлиентСервер.ЗаполнитьШаг(ИсполнителиИсполнения);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_СрокиИсполненияПроцессов

// Заполняет представление сроков в карточке процесса
//
&НаСервере
Процедура ОбновитьСрокиИсполненияНаСервере(ОбновитьВсеСроки = Ложь) Экспорт
	
	Если Не Объект.Выполнена Тогда
	
		Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаНаИсполнение
			Или ОбновитьВсеСроки Тогда
			
			СтруктураДляРасчета = СрокиИсполненияПроцессов.СтруктураДляРасчетаСрокаПроцессаИсполнения();
			СтруктураДляРасчета.Ссылка = БизнесПроцессы.Исполнение.ПустаяСсылка();
			СтруктураДляРасчета.ВариантИсполнения = ВариантИсполнения;
			СтруктураДляРасчета.КоличествоИтераций = КоличествоИтерацийИсполнения;
			СтруктураДляРасчета.Проверяющий = ПроверяющийИсполнения;
			СтруктураДляРасчета.ВариантУстановкиСрокаОбработкиРезультатов = ВариантУстановкиСрокаОбработкиРезультатовИсполнения;
			СтруктураДляРасчета.СрокОбработкиРезультатов = СрокОбработкиРезультатовИсполнения;
			СтруктураДляРасчета.СрокОбработкиРезультатовДни = СрокОбработкиРезультатовДниИсполнения;
			СтруктураДляРасчета.СрокОбработкиРезультатовЧасы = СрокОбработкиРезультатовЧасыИсполнения;
			СтруктураДляРасчета.СрокОбработкиРезультатовМинуты = СрокОбработкиРезультатовМинутыИсполнения;
			СтруктураДляРасчета.Исполнители = ИсполнителиИсполнения.Выгрузить();
			
			ПараметрыДляРасчетаСроков = СрокиИсполненияПроцессов.ПараметрыДляРасчетаСроков();
			ПараметрыДляРасчетаСроков.ДатаОтсчета = ДатаОтсчетаДляРасчетаСроков;
			ПараметрыДляРасчетаСроков.РеквизитТаблицаСИзмененнымСроком = РеквизитТаблицаСИзмененнымСроком;
			ПараметрыДляРасчетаСроков.ИндексСтроки = ИндексСтрокиСИзмененнымСроком;
			
			СрокиИсполненияПроцессов.РассчитатьСрокиПроцессаИсполнения(
				СтруктураДляРасчета, ПараметрыДляРасчетаСроков);
			
			СрокОбработкиРезультатовИсполнения = СтруктураДляРасчета.СрокОбработкиРезультатов;
			СрокОбработкиРезультатовДниИсполнения = СтруктураДляРасчета.СрокОбработкиРезультатовДни;
			СрокОбработкиРезультатовЧасыИсполнения = СтруктураДляРасчета.СрокОбработкиРезультатовЧасы;
			СрокОбработкиРезультатовМинутыИсполнения = СтруктураДляРасчета.СрокОбработкиРезультатовМинуты;
			
			ИндексТекущейСтроки = ИсполнителиИсполнения.Количество() - 1;
			Пока ИндексТекущейСтроки >= 0 Цикл
				ТекущаяСтрока = ИсполнителиИсполнения[ИндексТекущейСтроки];
				СтрСоСроком = СтруктураДляРасчета.Исполнители[ИндексТекущейСтроки];
				ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрСоСроком,
					"СрокИсполнения, СрокИсполненияДни, СрокИсполненияЧасы, СрокИсполненияМинуты");
				ИндексТекущейСтроки = ИндексТекущейСтроки - 1;
			КонецЦикла;
			
			СрокИсполненияПроцессаИсполнения = СтруктураДляРасчета.СрокИсполненияПроцесса;
			
		КонецЕсли;
			
		Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОзнакомление
			Или ОбновитьВсеСроки Тогда
			
			СтруктураДляРасчета = СрокиИсполненияПроцессов.СтруктураДляРасчетаСрокаОзнакомления();
			СтруктураДляРасчета.Ссылка = БизнесПроцессы.Ознакомление.ПустаяСсылка();
			СтруктураДляРасчета.Исполнители = ИсполнителиОзнакомления.Выгрузить();
			
			ПараметрыДляРасчетаСроков = СрокиИсполненияПроцессов.ПараметрыДляРасчетаСроков();
			ПараметрыДляРасчетаСроков.ДатаОтсчета = ДатаОтсчетаДляРасчетаСроков;
			
			СрокиИсполненияПроцессов.РассчитатьСрокиОзнакомления(
				СтруктураДляРасчета, ПараметрыДляРасчетаСроков);
			
			ИндексТекущейСтроки = ИсполнителиОзнакомления.Количество() - 1;
			Пока ИндексТекущейСтроки >= 0 Цикл
				ТекущаяСтрока = ИсполнителиОзнакомления[ИндексТекущейСтроки];
				СтрСоСроком = СтруктураДляРасчета.Исполнители[ИндексТекущейСтроки];
				ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтрСоСроком,
					"СрокИсполнения, СрокИсполненияДни, СрокИсполненияЧасы, СрокИсполненияМинуты");
				ИндексТекущейСтроки = ИндексТекущейСтроки - 1;
			КонецЦикла;
			
			СрокИсполненияПроцессаОзнакомления = СтруктураДляРасчета.СрокИсполненияПроцесса;
			
		КонецЕсли;
		
		Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаНаправитьПомощнику
			Или ОбновитьВсеСроки Тогда
			
			СтруктураДляРасчета = СрокиИсполненияПроцессов.СтруктураДляРасчетаСрокаРассмотрения();
			СтруктураДляРасчета.Ссылка = Объект.БизнесПроцесс;
			СтруктураДляРасчета.СрокОбработкиРезультатов = СрокОбработкиРезолюции;
			СтруктураДляРасчета.СрокОбработкиРезультатовДни = СрокОбработкиРезолюцииДни;
			СтруктураДляРасчета.СрокОбработкиРезультатовЧасы = СрокОбработкиРезолюцииЧасы;
			СтруктураДляРасчета.СрокОбработкиРезультатовМинуты = СрокОбработкиРезолюцииМинуты;
			СтруктураДляРасчета.ОбрабатывающийРезолюцию = Помощник;
			
			ПараметрыДляРасчетаСроков = СрокиИсполненияПроцессов.ПараметрыДляРасчетаСроков();
			ПараметрыДляРасчетаСроков.ДатаОтсчета = ДатаОтсчетаДляРасчетаСроков;
			ПараметрыДляРасчетаСроков.РеквизитТаблицаСИзмененнымСроком = РеквизитТаблицаСИзмененнымСроком;
			ПараметрыДляРасчетаСроков.ИндексСтроки = ИндексСтрокиСИзмененнымСроком;
			
			СрокиИсполненияПроцессов.РассчитатьСрокиРассмотрения(СтруктураДляРасчета, ПараметрыДляРасчетаСроков);
			
			СрокОбработкиРезолюции = СтруктураДляРасчета.СрокОбработкиРезультатов;
			СрокОбработкиРезолюцииДни = СтруктураДляРасчета.СрокОбработкиРезультатовДни;
			СрокОбработкиРезолюцииЧасы = СтруктураДляРасчета.СрокОбработкиРезультатовЧасы;
			СрокОбработкиРезолюцииМинуты = СтруктураДляРасчета.СрокОбработкиРезультатовМинуты;
			
		КонецЕсли;
		
		РеквизитТаблицаСИзмененнымСроком = "";
		ИндексСтрокиСИзмененнымСроком = 0;
		
	КонецЕсли;
	
	ОбновитьПризнакиИстекшихСроков();
	ЗаполнитьПредставлениеСроковИсполненияОзнакомления(ЭтотОбъект);
	
КонецПроцедуры

// см. ОбновитьСрокиИсполненияНаСервере
&НаКлиенте
Процедура ОбновитьСрокиИсполнения()
	
	ОбновитьСрокиИсполненияНаСервере();
	
КонецПроцедуры

// см. ОбновитьСрокиИсполнения
&НаКлиенте
Процедура ОбновитьСрокиИсполненияОтложенно(РеквизитТаблица = "", ИндексСтроки = 0) Экспорт
	
	РеквизитТаблицаСИзмененнымСроком = РеквизитТаблица;
	ИндексСтрокиСИзмененнымСроком = ИндексСтроки;
	
	ПодключитьОбработчикОжидания("ОбновитьСрокиИсполнения", 0.2, Истина);
	
КонецПроцедуры

// Заполняет представление сроков исполнения в карточке процесса.
//
&НаКлиенте
Процедура ЗаполнитьПредставлениеСроковИсполнения() Экспорт
	
	ЗаполнитьПредставлениеСроковИсполненияОзнакомления(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьПредставлениеСроковИсполненияОзнакомления(Форма)
	
	Если Форма.Элементы.ГруппаСтраницы.ТекущаяСтраница = Форма.Элементы.ГруппаНаИсполнение Тогда
		
		СрокиИсполненияПроцессовКлиентСервер.ЗаполнитьПредставлениеСроковВТаблицеИсполнителей(
			Форма.ИсполнителиИсполнения, Форма.ИспользоватьДатуИВремяВСрокахЗадач);
			
		СрокиИсполненияПроцессовКлиентСервер.ЗаполнитьПредставлениеСроковУчастника(
			Форма.СрокОбработкиРезультатовИсполненияПредставление,
			Форма.СрокОбработкиРезультатовИсполнения,
			Форма.СрокОбработкиРезультатовДниИсполнения,
			Форма.СрокОбработкиРезультатовЧасыИсполнения,
			Форма.СрокОбработкиРезультатовМинутыИсполнения,
			Форма.ВариантУстановкиСрокаОбработкиРезультатовИсполнения,
			Форма.ИспользоватьДатуИВремяВСрокахЗадач);
		
		СрокиИсполненияПроцессовКлиентСервер.ЗаполнитьПредставлениеСрокаИсполненияПроцесса(
			Форма.СрокИсполненияПроцессаИсполненияПредставление,
			Форма.СрокИсполненияПроцессаИсполнения, 0,0,0,
			Форма.ИспользоватьДатуИВремяВСрокахЗадач);
		
	ИначеЕсли Форма.Элементы.ГруппаСтраницы.ТекущаяСтраница = Форма.Элементы.ГруппаОзнакомление Тогда
		
		СрокиИсполненияПроцессовКлиентСервер.ЗаполнитьПредставлениеСроковВТаблицеИсполнителей(
			Форма.ИсполнителиОзнакомления, Форма.ИспользоватьДатуИВремяВСрокахЗадач);
			
		СрокиИсполненияПроцессовКлиентСервер.ЗаполнитьПредставлениеСрокаИсполненияПроцесса(
			Форма.СрокИсполненияПроцессаОзнакомленияПредставление,
			Форма.СрокИсполненияПроцессаОзнакомления, 0,0,0,
			Форма.ИспользоватьДатуИВремяВСрокахЗадач);
		
	ИначеЕсли Форма.Элементы.ГруппаСтраницы.ТекущаяСтраница = Форма.Элементы.ГруппаНаправитьПомощнику Тогда
		
		СрокиИсполненияПроцессовКлиентСервер.ЗаполнитьПредставлениеСрокаИсполненияПроцесса(
			Форма.СрокОбработкиРезолюцииПредставление,
			Форма.СрокОбработкиРезолюции, 0,0,0,
			Форма.ИспользоватьДатуИВремяВСрокахЗадач);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает сроки процесса для проверки корректности заполнения.
//
// Возвращаемое значение:
//  Структура:
//   * Исполнители - ДанныеФормыКоллекция - соотвествует реквизитам ИсполнителиИсполнения или ИсполнителиОзнакомления
//   * Проверяющий - СправочникСсылка.Пользователи,
//                   СправочникСсылка.ПолныеРоли - соотвествует реквизиту ПроверяющийИсполнения
//   * СрокОбработкиРезультатов - Дата - соотвествует реквизиту СрокОбработкиРезультатовИсполнения
//   * СрокИсполненияПроцесса - Дата - соотвествует реквизитам СрокИсполненияПроцессаИсполнения или СрокИсполненияПроцессаОзнакомления
//
&НаКлиенте
Функция СтруктураСроковДляПроверкиКорректностиЗаполнения()
	
	СтруктураСроковДляПроверки = Новый Структура;
	
	Если ВариантРассмотрения = 
		ПредопределенноеЗначение("Перечисление.ВариантыРассмотрения.НаправитьНаИсполнение") Тогда
		
		СтруктураСроковДляПроверки.Вставить("Исполнители", ИсполнителиИсполнения);
		СтруктураСроковДляПроверки.Вставить("Проверяющий", ПроверяющийИсполнения);
		СтруктураСроковДляПроверки.Вставить("СрокОбработкиРезультатов", СрокОбработкиРезультатовИсполнения);
		СтруктураСроковДляПроверки.Вставить("СрокИсполненияПроцесса", СрокИсполненияПроцессаИсполнения);
		
	ИначеЕсли ВариантРассмотрения = 
		ПредопределенноеЗначение("Перечисление.ВариантыРассмотрения.НаправитьНаОзнакомление") Тогда
		
		СтруктураСроковДляПроверки.Вставить("Исполнители", ИсполнителиОзнакомления);
		СтруктураСроковДляПроверки.Вставить("СрокИсполненияПроцесса", СрокИсполненияПроцессаОзнакомления);
		
	ИначеЕсли ВариантРассмотрения =
		ПредопределенноеЗначение("Перечисление.ВариантыРассмотрения.НаправитьПомощнику") Тогда
		СтруктураСроковДляПроверки.Вставить("ОбрабатывающийРезолюцию", Помощник);
		СтруктураСроковДляПроверки.Вставить("СрокИсполненияПроцесса", СрокОбработкиРезолюции);
	КонецЕсли;
	
	Возврат СтруктураСроковДляПроверки;
	
КонецФункции

// Устанавливает условное оформление истекших сроков.
//
&НаСервере
Процедура УстановитьУсловноеОформлениеИстекшихСроков()
	
	СрокиИсполненияПроцессов.УстановитьУсловноеОформлениеИстекшегоСрока(
		ЭтотОбъект,
		НСтр("ru = 'Срок исполнения истек (Исполнители исполнения)'"),
		"ИсполнителиИсполнения.СрокИсполненияИстек",
		"ИсполнителиСрокИсполненияПредставление");
	
	СрокиИсполненияПроцессов.УстановитьУсловноеОформлениеИстекшегоСрока(
		ЭтотОбъект,
		НСтр("ru = 'Срок обработки результатов исполнения истек'"),
		"СрокОбработкиРезультатовИсполненияИстек",
		"СрокОбработкиРезультатовИсполненияПредставление");
		
	СрокиИсполненияПроцессов.УстановитьУсловноеОформлениеИстекшегоСрока(
		ЭтотОбъект,
		НСтр("ru = 'Срок исполнения процесса исполнения истек'"),
		"СрокИсполненияПроцессаИсполненияИстек",
		"СрокИсполненияПроцессаИсполненияПредставление");
	
	СрокиИсполненияПроцессов.УстановитьУсловноеОформлениеИстекшегоСрока(
		ЭтотОбъект,
		НСтр("ru = 'Срок исполнения истек (Исполнители ознакомления)'"),
		"ИсполнителиОзнакомления.СрокИсполненияИстек",
		"ИсполнителиОзнакомленияСрокИсполненияПредставление");
	
	СрокиИсполненияПроцессов.УстановитьУсловноеОформлениеИстекшегоСрока(
		ЭтотОбъект,
		НСтр("ru = 'Срок исполнения процесса ознакомления истек'"),
		"СрокИсполненияПроцессаОзнакомленияИстек",
		"СрокИсполненияПроцессаОзнакомленияПредставление");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПризнакиИстекшихСроков()
	
	ДатаИсполненияПоУмолчанию = ?(Объект.Выполнена, Объект.ДатаИсполнения, ТекущаяДатаСеанса());
	
	Если ВариантРассмотрения = 
		ПредопределенноеЗначение("Перечисление.ВариантыРассмотрения.НаправитьНаИсполнение") Тогда
		
		СрокиИсполненияПроцессов.ОбновитьПризнакИстекшихСроковВТаблицеИсполнителей(
			ИсполнителиИсполнения, ДатаИсполненияПоУмолчанию);
		
		СрокиИсполненияПроцессов.ОбновитьПризнакИстекшегоСрокаУчастника(
			СрокОбработкиРезультатовИсполнения,
			СрокОбработкиРезультатовИсполненияИстек,
			ДатаИсполненияПоУмолчанию,
			"Проверяющий");
		
		СрокиИсполненияПроцессов.ОбновитьПризнакИстекшегоСрокаПроцесса(
			СрокИсполненияПроцессаИсполнения,
			ДатаИсполненияПоУмолчанию,
			СрокИсполненияПроцессаИсполненияИстек);
		
	ИначеЕсли ВариантРассмотрения = 
		ПредопределенноеЗначение("Перечисление.ВариантыРассмотрения.НаправитьНаОзнакомление") Тогда
		
		СрокиИсполненияПроцессов.ОбновитьПризнакИстекшихСроковВТаблицеИсполнителей(
			ИсполнителиОзнакомления, ДатаИсполненияПоУмолчанию);
			
		СрокиИсполненияПроцессов.ОбновитьПризнакИстекшегоСрокаПроцесса(
			СрокИсполненияПроцессаОзнакомления,
			ДатаИсполненияПоУмолчанию,
			СрокИсполненияПроцессаОзнакомленияИстек);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти