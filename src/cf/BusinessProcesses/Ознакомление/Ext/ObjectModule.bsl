#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает пустую структуру данных для заполнения.
//
// Возвращаемое значение:
//  Структура
//   * Важность - ПеречислениеСсылка.ВариантыВажностиОбъектов
//   * Наименование - Строка
//   * Исполнители - ТаблицаЗначений
//      - ИдентификаторИсполнителя - УникальныйИдентификатор
//      - Исполнитель - СправочникСсылка.Сотрудники, СправочникСсылка.ПолныеРоли, СправочникСсылка.Пользователи
//      - СрокИсполнения - Дата
//      - СрокИсполненияДни - Число
//      - СрокИсполненияЧасы - Число
//      - СрокИсполненияМинуты - Число
//   * Автор - СправочникСсылка.Сотрудники, СправочникСсылка.Пользователи
//   * ВедущаяЗадача - ЗадачаСсылка.ЗадачаИсполнителя
//
Функция СтруктураДанныхДляЗаполнения() Экспорт
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Важность", Перечисления.ВариантыВажностиОбъектов.ПустаяСсылка());
	СтруктураДанных.Вставить("Наименование", "");
	СтруктураДанных.Вставить("Исполнители", Исполнители.ВыгрузитьКолонки("
		|ИдентификаторИсполнителя,
		|Исполнитель,
		|СрокИсполнения,
		|СрокИсполненияДни,
		|СрокИсполненияЧасы,
		|СрокИсполненияМинуты,
		|ВариантУстановкиСрокаИсполнения,
		|Описание"));
	СтруктураДанных.Вставить("Автор", Справочники.Сотрудники.ПустаяСсылка());
	
	СтруктураДанных.Вставить("Предметы", Неопределено);
	
	СтруктураДанных.Вставить("ВедущаяЗадача", Задачи.ЗадачаИсполнителя);
	
	Возврат СтруктураДанных;
	
КонецФункции

// Заполняет бизнес-процесс на основании шаблона бизнес-процесса.
//
// Параметры
//  ШаблонБизнесПроцесса  - шаблон бизнес-процесса
//
Процедура ЗаполнитьПоШаблону(ШаблонБизнесПроцесса) Экспорт
	
	Если ШаблонБизнесПроцесса = Справочники.ШаблоныОзнакомления.ПоУмолчанию Тогда
		// Не заполняем шаблон в процессе, если это шаблон по умолчанию.
		// Считаем, что процесс создан с нуля.
	ИначеЕсли ШаблонБизнесПроцесса.ШаблонВКомплексномПроцессе 
		И ЗначениеЗаполнено(ШаблонБизнесПроцесса.ИсходныйШаблон) Тогда
		Шаблон = ШаблонБизнесПроцесса.ИсходныйШаблон;
	ИначеЕсли НЕ ШаблонБизнесПроцесса.ШаблонВКомплексномПроцессе Тогда
		Шаблон = ШаблонБизнесПроцесса;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.НаименованиеБизнесПроцесса) Тогда 
		Наименование = ШаблонБизнесПроцесса.НаименованиеБизнесПроцесса;
		НаименованиеСПредметами = МультипредметностьКлиентСервер.ПолучитьНаименованиеСПредметами(СокрЛП(Наименование), Предметы);
		Если ЗначениеЗаполнено(НаименованиеСПредметами) И ШаблонБизнесПроцесса.ДобавлятьНаименованиеПредмета Тогда
			Наименование = НаименованиеСПредметами;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.Описание) Тогда 
		Описание = ШаблонБизнесПроцесса.Описание;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.Важность) Тогда 
		Важность = ШаблонБизнесПроцесса.Важность;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.Автор) Тогда 
		Автор = ШаблонБизнесПроцесса.Автор;
	КонецЕсли;
	
	// заполнение исполнителей
	Если ШаблонБизнесПроцесса.Исполнители.Количество() > 0 Тогда 
		Исполнители.Очистить();
	КонецЕсли;
	
	ОсновныеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЭтотОбъект,, Истина); 
	
	Для Каждого Строка Из ШаблонБизнесПроцесса.Исполнители Цикл
		
		Если НЕ Строка.Условие.Пустая()
			И ШаблонБизнесПроцесса.ИспользоватьУсловия Тогда
			СтрокаПредмета = Предметы.Найти(Строка.ИмяПредметаУсловия, "ИмяПредмета");
			Если СтрокаПредмета = Неопределено Тогда
				Продолжить;
			Иначе
				Предмет = СтрокаПредмета.Предмет;
				РезультатПроверкиУсловия = РаботаСАлгоритмамиПроверки.ПроверитьПрименимостьАлгоритмаПроверкиКОбъекту(Предмет, Строка.Условие);
				Если НЕ РезультатПроверкиУсловия Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.АвтоподстановкиДляПроцессов")
			И ЗначениеЗаполнено(Строка.Исполнитель) Тогда
			
			АвтоподстановкаИсполнитель = ШаблоныБизнесПроцессов.ПолучитьЗначениеАвтоподстановки(
				Строка.Исполнитель, ЭтотОбъект);
			
			Если ТипЗнч(АвтоподстановкаИсполнитель) = Тип("СправочникСсылка.Сотрудники")
					Или ТипЗнч(АвтоподстановкаИсполнитель) = Тип("СправочникСсылка.Пользователи")Тогда 
				
				Если Исполнители.Найти(АвтоподстановкаИсполнитель, "Исполнитель") = Неопределено Тогда 
					НоваяСтрока = Исполнители.Добавить();
					НоваяСтрока.Исполнитель = АвтоподстановкаИсполнитель;
					
					НоваяСтрока.ВариантУстановкиСрокаИсполнения = Строка.ВариантУстановкиСрокаИсполнения;
					НоваяСтрока.СрокИсполнения = Строка.СрокИсполнения;
					НоваяСтрока.СрокИсполненияДни = Строка.СрокИсполненияДни;
					НоваяСтрока.СрокИсполненияЧасы = Строка.СрокИсполненияЧасы;
					НоваяСтрока.СрокИсполненияМинуты = Строка.СрокИсполненияМинуты;
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(АвтоподстановкаИсполнитель) = Тип("СправочникСсылка.ПолныеРоли") Тогда 	
				
				СтруктураОтбора = Новый Структура("Исполнитель",
					АвтоподстановкаИсполнитель);
					
				Если Исполнители.НайтиСтроки(СтруктураОтбора).Количество() = 0 Тогда 
					НоваяСтрока = Исполнители.Добавить();
					НоваяСтрока.Исполнитель = АвтоподстановкаИсполнитель;
					
					НоваяСтрока.ВариантУстановкиСрокаИсполнения = Строка.ВариантУстановкиСрокаИсполнения;
					НоваяСтрока.СрокИсполнения = Строка.СрокИсполнения;
					НоваяСтрока.СрокИсполненияДни = Строка.СрокИсполненияДни;
					НоваяСтрока.СрокИсполненияЧасы = Строка.СрокИсполненияЧасы;
					НоваяСтрока.СрокИсполненияМинуты = Строка.СрокИсполненияМинуты;
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(АвтоподстановкаИсполнитель) = Тип("Структура") Тогда 	
				
				СтруктураОтбора = Новый Структура("Исполнитель",
					АвтоподстановкаИсполнитель.РольИсполнителя);
					
				Если Исполнители.НайтиСтроки(СтруктураОтбора).Количество() = 0 Тогда 
					НоваяСтрока = Исполнители.Добавить();
					НоваяСтрока.Исполнитель = АвтоподстановкаИсполнитель.РольИсполнителя;
					
					НоваяСтрока.ВариантУстановкиСрокаИсполнения = Строка.ВариантУстановкиСрокаИсполнения;
					НоваяСтрока.СрокИсполнения = Строка.СрокИсполнения;
					НоваяСтрока.СрокИсполненияДни = Строка.СрокИсполненияДни;
					НоваяСтрока.СрокИсполненияЧасы = Строка.СрокИсполненияЧасы;
					НоваяСтрока.СрокИсполненияМинуты = Строка.СрокИсполненияМинуты;
				КонецЕсли;	
				
			ИначеЕсли ТипЗнч(АвтоподстановкаИсполнитель) = Тип("Массив") Тогда 
				
				Для Каждого ЭлементМассива Из АвтоподстановкаИсполнитель Цикл
					
					Если (ТипЗнч(ЭлементМассива) = Тип("СправочникСсылка.Сотрудники") 
						Или ТипЗнч(ЭлементМассива) = Тип("СправочникСсылка.Пользователи"))
						И ЗначениеЗаполнено(ЭлементМассива) Тогда 
						
						Если Исполнители.Найти(ЭлементМассива, "Исполнитель") = Неопределено Тогда 
							НоваяСтрока = Исполнители.Добавить();
							НоваяСтрока.Исполнитель = ЭлементМассива;
							
							НоваяСтрока.ВариантУстановкиСрокаИсполнения = Строка.ВариантУстановкиСрокаИсполнения;
							НоваяСтрока.СрокИсполнения = Строка.СрокИсполнения;
							НоваяСтрока.СрокИсполненияДни = Строка.СрокИсполненияДни;
							НоваяСтрока.СрокИсполненияЧасы = Строка.СрокИсполненияЧасы;
							НоваяСтрока.СрокИсполненияМинуты = Строка.СрокИсполненияМинуты;
						КонецЕсли;
						
					ИначеЕсли ТипЗнч(ЭлементМассива) = Тип("СправочникСсылка.ПолныеРоли") И ЗначениеЗаполнено(ЭлементМассива)	Тогда 
						
						ПараметрыОтбора = Новый Структура("Исполнитель",
							ЭлементМассива);
					
						Если Исполнители.НайтиСтроки(ПараметрыОтбора).Количество() = 0 Тогда 
							НоваяСтрока = Исполнители.Добавить();
							НоваяСтрока.Исполнитель = ЭлементМассива;
							
							НоваяСтрока.ВариантУстановкиСрокаИсполнения = Строка.ВариантУстановкиСрокаИсполнения;
							НоваяСтрока.СрокИсполнения = Строка.СрокИсполнения;
							НоваяСтрока.СрокИсполненияДни = Строка.СрокИсполненияДни;
							НоваяСтрока.СрокИсполненияЧасы = Строка.СрокИсполненияЧасы;
							НоваяСтрока.СрокИсполненияМинуты = Строка.СрокИсполненияМинуты;
						КонецЕсли;
						
					ИначеЕсли ТипЗнч(ЭлементМассива) = Тип("Структура") Тогда 	
						
						ПараметрыОтбора = Новый Структура("Исполнитель",
							ЭлементМассива.РольИсполнителя);
					
						Если Исполнители.НайтиСтроки(ПараметрыОтбора).Количество() = 0 Тогда 
							НоваяСтрока = Исполнители.Добавить();
							НоваяСтрока.Исполнитель = ЭлементМассива.РольИсполнителя;
							
							НоваяСтрока.ВариантУстановкиСрокаИсполнения = Строка.ВариантУстановкиСрокаИсполнения;
							НоваяСтрока.СрокИсполнения = Строка.СрокИсполнения;
							НоваяСтрока.СрокИсполненияДни = Строка.СрокИсполненияДни;
							НоваяСтрока.СрокИсполненияЧасы = Строка.СрокИсполненияЧасы;
							НоваяСтрока.СрокИсполненияМинуты = Строка.СрокИсполненияМинуты;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;	
		Иначе
			СтруктураОтбора = Новый Структура("Исполнитель",
				Строка.Исполнитель);
		
			НайденныеСтроки = Исполнители.НайтиСтроки(СтруктураОтбора);
			Если НайденныеСтроки.Количество() = 0 Тогда
				НоваяСтрока = Исполнители.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;	
	
	// Срок исполнения процесса
	СрокИсполненияПроцесса = ШаблонБизнесПроцесса.СрокИсполненияПроцесса;
	
	// трудозатраты
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда 
		ТрудозатратыПланИсполнителя = ШаблонБизнесПроцесса.ТрудозатратыПланИсполнителя;
	КонецЕсли;	
	
	РаботаСБизнесПроцессамиВызовСервера.СкопироватьЗначенияДопРеквизитов(ШаблонБизнесПроцесса, ЭтотОбъект);
	
	ДополнительныеСвойства.Вставить("ШаблонДляОтложенногоСтарта", ШаблонБизнесПроцесса);
	
КонецПроцедуры

// Заполняет бизнес-процесс на основании шаблона бизнес-процесса, предмета и автора.
//
// Параметры
//  ШаблонБизнесПроцесса  - шаблон бизнес-процесса
//  Предмет - предмет бизнес-процесса
//  Автор  - автор
//
Процедура ЗаполнитьПоШаблонуИПредмету(ШаблонБизнесПроцесса, ПредметСобытия, АвторСобытия) Экспорт
	
	Мультипредметность.ЗаполнитьПредметыПроцессаПоШаблону(ШаблонБизнесПроцесса, ЭтотОбъект);
	Мультипредметность.ПередатьПредметыПроцессу(ЭтотОбъект, ПредметСобытия, Ложь, Истина);
	ЗаполнитьПоШаблону(ШаблонБизнесПроцесса);
	
	Проект = МультипредметностьПереопределяемый.ПолучитьОсновнойПроектПоПредметам(ПредметСобытия);
	
	Дата = ТекущаяДатаСеанса();
	Автор = АвторСобытия;
	
КонецПроцедуры

// Заполняет бизнес-процесс на основании проектной задачи
//
Процедура ЗаполнитьПоПроектнойЗадаче(ДанныеЗаполнения) Экспорт 
	
	Проект = ДанныеЗаполнения.Владелец;
	ПроектнаяЗадача = ДанныеЗаполнения;
	
	ДобавлятьНаименованиеПредмета = РаботаСБизнесПроцессами.ДобавлятьНаименованиеПредмета(ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(Наименование)
		Или Наименование = НаименованиеПроцессаПоУмолчанию(ДобавлятьНаименованиеПредмета) Тогда
		
		Наименование = ПроектнаяЗадача.Наименование;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Описание) Тогда 
		Описание = ПроектнаяЗадача.Описание;
	КонецЕсли;
	
	Если Предметы.Количество() = 0 Тогда 
		Предмет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПроектнаяЗадача, "Предмет");
		
		Если Предмет <> Неопределено И Предметы.Найти(Предмет,"Предмет") = Неопределено Тогда
			СтрокаПредметов = Предметы.Добавить();
			СтрокаПредметов.РольПредмета = Перечисления.РолиПредметов.Основной;
			СтрокаПредметов.ИмяПредмета =  МультипредметностьВызовСервера.ПолучитьСсылкуНаИмяПредметаПоСсылкеНаПредмет(
				Предмет, Предметы.ВыгрузитьКолонку("ИмяПредмета"));
			СтрокаПредметов.Предмет = Предмет;
		КонецЕсли;
	КонецЕсли;
		
	Если Исполнители.Количество() = 0
		И ПроектнаяЗадача.Исполнители.Количество() > 0 Тогда
		
		ДанныеПроектнойЗадачи = РаботаСПроектами.ПолучитьСрокиПроектнойЗадачи(ПроектнаяЗадача);
		ТекущийПланОкончание = ДанныеПроектнойЗадачи.ТекущийПланОкончание;
		
		Для Каждого СтрокаИсполнитель Из ПроектнаяЗадача.Исполнители Цикл 
			Если ТипЗнч(СтрокаИсполнитель.Исполнитель) = Тип("СправочникСсылка.Пользователи") 
			 Или ТипЗнч(СтрокаИсполнитель.Исполнитель) = Тип("СправочникСсылка.ПолныеРоли")
			 Или ТипЗнч(СтрокаИсполнитель.Исполнитель) = Тип("СправочникСсылка.Сотрудники") Тогда 
				НоваяСтрока = Исполнители.Добавить();
				НоваяСтрока.Исполнитель = СтрокаИсполнитель.Исполнитель;
				НоваяСтрока.СрокИсполнения = ТекущийПланОкончание;
				НоваяСтрока.ВариантУстановкиСрокаИсполнения = Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	
	ТрудозатратыПланИсполнителя = РаботаСПроектами.МинимальныеТрудозатратыИсполнителей(ПроектнаяЗадача.Исполнители);
	
КонецПроцедуры

Процедура ЗаполнитьПоРассмотрению(Рассмотрение) Экспорт
	
	Если ТипЗнч(Рассмотрение.Исполнитель) = Тип("СправочникСсылка.Сотрудники")
		Или ТипЗнч(Рассмотрение.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда 
		Автор = Рассмотрение.Исполнитель;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			| ЗадачаИсполнителя.Исполнитель
			|ИЗ
			| Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
			|ГДЕ
			| ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
			| И ЗадачаИсполнителя.ТочкаМаршрута = &ТочкаМаршрута";
		Запрос.УстановитьПараметр("БизнесПроцесс", Рассмотрение.Ссылка);
		Запрос.УстановитьПараметр("ТочкаМаршрута", БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Рассмотреть);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Автор = Выборка.Исполнитель;
	КонецЕсли;
	
	Наименование = Рассмотрение.НаименованиеОзнакомления;
	
	СрокИсполненияПроцесса = Рассмотрение.СрокИсполненияПроцессаОзнакомления;
	
	Описание = Рассмотрение.ОписаниеОзнакомления;
	Важность = Рассмотрение.ВажностьОзнакомления;
	
	Мультипредметность.ПередатьПредметыПроцессу(ЭтотОбъект, Рассмотрение);
	
	ТрудозатратыПланИсполнителя = Рассмотрение.ТрудозатратыПланИсполнителяОзнакомления;
	
	Исполнители.Загрузить(Рассмотрение.ИсполнителиОзнакомления.Выгрузить());
	
	Проект = Рассмотрение.Проект;
	ПроектнаяЗадача = Рассмотрение.ПроектнаяЗадача;
	
КонецПроцедуры	

// Возвращает признак наличия метода ИзменитьРеквизитыНевыполненныхЗадач
//
Функция ЕстьМетодИзменитьРеквизитыНевыполненныхЗадач() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Обновляет значения реквизитов невыполненных задач 
// при изменении реквизитов бизнес-процесса.
//
Процедура ИзменитьРеквизитыНевыполненныхЗадач(СтарыеУчастникиПроцесса, ПараметрыЗаписи) Экспорт 

	УстановитьПривилегированныйРежим(Истина);
	
	СтарыеИсполнители = СтарыеУчастникиПроцесса.Исполнители;
	
	АвторИзменения = Неопределено;
	Если Не ПараметрыЗаписи.Свойство("АвторИзменения", АвторИзменения) Тогда
		АвторИзменения = ПользователиДокументооборот.ОлицетворяемыйПользователь();
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		ПараметрыСеанса.ОтключитьОбновлениеЗадач = Истина;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Задачи.Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК Задачи
		|ГДЕ
		|	Задачи.БизнесПроцесс = &БизнесПроцесс
		|	И Задачи.ПометкаУдаления = ЛОЖЬ
		|	И Задачи.Выполнена = ЛОЖЬ";
		Запрос.УстановитьПараметр("БизнесПроцесс", Ссылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗадачаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ЗадачаОбъект.ДополнительныеСвойства.Вставить("АвторИзменения", АвторИзменения);
			ЗаблокироватьДанныеДляРедактирования(ЗадачаОбъект.Ссылка);
			ЗадачаОбъект.Важность = Важность;
			ЗадачаОбъект.Автор = Автор;
			
			СтрИсполнителя = Исполнители.Найти(ЗадачаОбъект.Ссылка, "ЗадачаИсполнителя");
			
			Если СтрИсполнителя <> Неопределено Тогда
				
				СрокиИсполненияПроцессов.ЗаполнитьСрокИсполненияЗадачи(
					ЗадачаОбъект,
					СтрИсполнителя.ВариантУстановкиСрокаИсполнения,
					СтрИсполнителя.СрокИсполнения,
					СтрИсполнителя.СрокИсполненияДни,
					СтрИсполнителя.СрокИсполненияЧасы,
					СтрИсполнителя.СрокИсполненияМинуты);
				
				ЗаполнитьНаименованиеИОписаниеЗадачи(ЗадачаОбъект, СтрИсполнителя);
			Иначе
				ЗаполнитьНаименованиеИОписаниеЗадачи(ЗадачаОбъект, Неопределено);
			КонецЕсли;
			
			ЗадачаОбъект.Проект = Проект;
			ЗадачаОбъект.ПроектнаяЗадача = ПроектнаяЗадача;
			
			ПереносСроковВыполненияЗадач.ПередатьПричинуИЗаявкуНаПереносаСрока(ЗадачаОбъект, ДополнительныеСвойства);
			
			ЗадачаОбъект.Записать();
		КонецЦикла;
		
		// обновление исполнителей
		ДобавленныеСтроки = Новый Массив;
		УдаленныеСтроки   = Новый Массив;
		ИзмененныеСтроки  = Новый Массив;
		
		КоличествоСтрок = СтарыеИсполнители.Количество();
		Для Инд = 1 По КоличествоСтрок Цикл
			Строка = СтарыеИсполнители[КоличествоСтрок-Инд];
			Если Строка.Пройден Или Не ЗначениеЗаполнено(Строка.ЗадачаИсполнителя) Тогда 
				СтарыеИсполнители.Удалить(Строка);
			КонецЕсли;	
		КонецЦикла;	
		
		НовыеИсполнители = ЭтотОбъект.Исполнители.Выгрузить();
		КоличествоСтрок = НовыеИсполнители.Количество();
		Для Инд = 1 По КоличествоСтрок Цикл
			Строка = НовыеИсполнители[КоличествоСтрок-Инд];
			Если Строка.Пройден Тогда
				НовыеИсполнители.Удалить(Строка);
			КонецЕсли;
		КонецЦикла;	
		
		КоличествоСтрок = НовыеИсполнители.Количество();
		Для Инд = 0 По КоличествоСтрок-1 Цикл
			Строка = НовыеИсполнители[Инд];			
			Если Не ЗначениеЗаполнено(Строка.ЗадачаИсполнителя) Тогда 
				ДобавленныеСтроки.Добавить(Строка);				
			КонецЕсли;
		КонецЦикла;	
		
		Для Каждого Строка Из НовыеИсполнители Цикл
			Если Не ЗначениеЗаполнено(Строка.ЗадачаИсполнителя) Тогда 
				Продолжить;
			КонецЕсли;	
			
			НайденнаяСтрока = СтарыеИсполнители.Найти(Строка.ЗадачаИсполнителя, "ЗадачаИсполнителя");
			Если НайденнаяСтрока = Неопределено Тогда 
				Продолжить;
			КонецЕсли;	
				
			Если Строка.Исполнитель <> НайденнаяСтрока.Исполнитель Тогда 
				ИзмененныеСтроки.Добавить(Строка);
			КонецЕсли;
		КонецЦикла;	
		
		Для Каждого Строка Из СтарыеИсполнители Цикл
			НайденнаяСтрока = НовыеИсполнители.Найти(Строка.ЗадачаИсполнителя, "ЗадачаИсполнителя");
		    Если НайденнаяСтрока = Неопределено Тогда 
				УдаленныеСтроки.Добавить(Строка);
			КонецЕсли;
		КонецЦикла;	
		
		// добавленные строки
		Для Каждого Строка Из ДобавленныеСтроки Цикл
			
			Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
			Задача.ДополнительныеСвойства.Вставить("АвторИзменения", АвторИзменения);
			ЗаполнитьЗадачуОзнакомиться(Задача, Строка, БизнесПроцессы.Ознакомление.ТочкиМаршрута.Ознакомиться);
			Задача.Записать();
			
			НайденнаяСтрока = ЭтотОбъект.Исполнители.Найти(Строка.НомерСтроки, "НомерСтроки");
			Если НайденнаяСтрока <> Неопределено Тогда 
				НайденнаяСтрока.ЗадачаИсполнителя = Задача.Ссылка;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ДобавленныеСтроки.Количество() > 0 Тогда 
			Записать();
		КонецЕсли;
		
		// измененные строки
		Для Каждого Строка Из ИзмененныеСтроки Цикл	
			Задача = Строка.ЗадачаИсполнителя.ПолучитьОбъект();
			Задача.ДополнительныеСвойства.Вставить("АвторИзменения", АвторИзменения);
			Если ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.Сотрудники")
				Или ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
				
				Если Задача.ПринятаКИсполнению Тогда
					Задача.ПринятаКИсполнению = Ложь;
					Задача.ДатаПринятияКИсполнению = '00010101';
				КонецЕсли;
				
				Задача.Исполнитель = Строка.Исполнитель;
				Задача.РольИсполнителя = Неопределено;
			Иначе	
				Задача.Исполнитель = Неопределено;
				Задача.РольИсполнителя = Строка.Исполнитель;
			КонецЕсли;	
			
			Задача.Записать();
		КонецЦикла;

		// удаленные строки
		Если УдаленныеСтроки.Количество() > 0 Тогда 
		
			Для Каждого Строка Из УдаленныеСтроки Цикл	
				Задача = Строка.ЗадачаИсполнителя.ПолучитьОбъект();
				Задача.ДополнительныеСвойства.Вставить("АвторИзменения", АвторИзменения);
				Задача.ИсключитьИзПроцесса();
			КонецЦикла;	
			Прочитать();
			Записать();
			
		КонецЕсли;
		
		Если Не (ДополнительныеСвойства.Свойство("ОтключитьОбновлениеЗадач")
			И ДополнительныеСвойства.ОтключитьОбновлениеЗадач) Тогда
			ИнтеграцияЗадач.ОбновитьЗадачуПоИсточнику(Ссылка);
		КонецЕсли;
		ПараметрыСеанса.ОтключитьОбновлениеЗадач = Ложь;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ПараметрыСеанса.ОтключитьОбновлениеЗадач = Ложь;
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры 

// Формирует шаблон по процессу
// Параметры:
//	ВладелецШаблона - ссылка на шаблон комплексного процесса или комплексный процесс, который будет владельцем
//		создаваемого шаблона процесса
// Возвращает:
//	Ссылка на созданный шаблон
Функция СоздатьШаблонПоПроцессу(ВладелецШаблона = Неопределено) Экспорт
	
	ИмяТипа = БизнесПроцессы[ЭтотОбъект.Метаданные().Имя].ТипШаблона();	
	ШаблонОбъект = Справочники[СтрЗаменить(ИмяТипа, "Справочник.", "")].СоздатьЭлемент();
	
	// Перенос базовых реквизитов процесса
	ШаблонОбъект.Наименование = Наименование;
	ШаблонОбъект.НаименованиеБизнесПроцесса = Наименование;
	ШаблонОбъект.Описание = Описание;
	ШаблонОбъект.Важность = Важность;
	ШаблонОбъект.Автор = Сотрудники.ОсновнойСотрудник();
	ШаблонОбъект.ВладелецШаблона = ВладелецШаблона;
	
	ШаблонОбъект.Предметы.Загрузить(Предметы.Выгрузить());
	Для Каждого СтрокаПредмета Из ШаблонОбъект.Предметы Цикл
		Если ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда
			ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СтрокаПредмета.Предмет.Метаданные().ПолноеИмя()).ПустаяСсылка();
		КонецЕсли;
	КонецЦикла;
	ШаблонОбъект.ПредметыЗадач.Загрузить(ПредметыЗадач.Выгрузить());
	
	// Перенос исполнителей
	ШаблонОбъект.Исполнители.Очистить();
	Для Каждого Исполнитель Из Исполнители Цикл
		ИсполнительШаблона = ШаблонОбъект.Исполнители.Добавить();
		ЗаполнитьЗначенияСвойств(
			ИсполнительШаблона,
			Исполнитель,
			"Исполнитель, СрокИсполненияДни, СрокИсполненияЧасы, СрокИсполненияМинуты");
			
		ИсполнительШаблона.ВариантУстановкиСрокаИсполнения = 
			Перечисления.ВариантыУстановкиСрокаИсполнения.ОтносительныйСрок;
	КонецЦикла;
	ШаблонОбъект.Ответственный = Сотрудники.ОсновнойСотрудник();
	ШаблонОбъект.Записать();
	Возврат ШаблонОбъект.Ссылка;
	
КонецФункции

// Обновляет реквизиты активного процесса по переданной структуре
// Параметры:
//  ДанныеОбновления - Структура, см. СтруктураДанныхДляЗаполнения()
//
Процедура ОбновитьАктивныйПроцесс(ДанныеОбновления) Экспорт 
	
	КэшИсполнителей = Новый Соответствие;
	Для Каждого Исполнитель Из Исполнители Цикл
		КэшИсполнителей.Вставить(Исполнитель.ИдентификаторИсполнителя, Исполнитель);
	КонецЦикла;
	
	Если ДанныеОбновления.Важность <> Важность Тогда
		Важность = ДанныеОбновления.Важность;
	КонецЕсли;
	
	Если ДанныеОбновления.Наименование <> Наименование Тогда
		Наименование = ДанныеОбновления.Наименование;
	КонецЕсли;
	
	НовыеИсполнители = Исполнители.ВыгрузитьКолонки();
	Для Каждого Исполнитель Из ДанныеОбновления.Исполнители Цикл
		СтрокаИсполнителя = НовыеИсполнители.Добавить();
		СтрокаИсполнителя.Исполнитель = Исполнитель.Исполнитель;
		СтрокаИсполнителя.ИдентификаторИсполнителя = Исполнитель.ИдентификаторИсполнителя;
		СтрокаИсполнителя.СрокИсполнения = Исполнитель.СрокИсполнения;
		СтрокаИсполнителя.СрокИсполненияДни = Исполнитель.СрокИсполненияДни;
		СтрокаИсполнителя.СрокИсполненияЧасы = Исполнитель.СрокИсполненияЧасы;
		СтрокаИсполнителя.СрокИсполненияМинуты = Исполнитель.СрокИсполненияМинуты;
		СтрокаИсполнителя.ВариантУстановкиСрокаИсполнения = Исполнитель.ВариантУстановкиСрокаИсполнения;
		СтрокаИсполнителя.Описание = Исполнитель.Описание;
		
		//Если такой исполнитель уже был в таблице, воссстанавливаем для него этапы и задачи
		СтарыйИсполнитель = КэшИсполнителей.Получить(Исполнитель.ИдентификаторИсполнителя);
		Если СтарыйИсполнитель <> Неопределено Тогда 
			СтрокаИсполнителя.Пройден = СтарыйИсполнитель.Пройден;
			СтрокаИсполнителя.ЗадачаИсполнителя = СтарыйИсполнитель.ЗадачаИсполнителя;
		КонецЕсли;
		
	КонецЦикла;
	
	ЕстьОтличия = Ложь;
	СрокИзменен = Ложь;
	
	//Если есть отличия исполнителей в старой и новой таблице, замещаем старую новой
	Если Исполнители.Количество() = ДанныеОбновления.Исполнители.Количество() Тогда
		Для Каждого Исполнитель Из ДанныеОбновления.Исполнители Цикл
			ИндексТекущего = ДанныеОбновления.Исполнители.Индекс(Исполнитель);
			СтарыйИсполнитель = Исполнители[ИндексТекущего];
			СрокИзменен = СтрокаИсполнителя.СрокИсполнения <> Исполнитель.СрокИсполнения 
				Или СтрокаИсполнителя.СрокИсполненияДни <> Исполнитель.СрокИсполненияДни 
				Или СтрокаИсполнителя.СрокИсполненияЧасы <> Исполнитель.СрокИсполненияЧасы 
				Или СтрокаИсполнителя.СрокИсполненияМинуты <> Исполнитель.СрокИсполненияМинуты;
				
			Если СтарыйИсполнитель.Исполнитель <> Исполнитель.Исполнитель 
				Или СтарыйИсполнитель.ИдентификаторИсполнителя <> Исполнитель.ИдентификаторИсполнителя Или СрокИзменен
				Или СтрокаИсполнителя.Описание <> Исполнитель.Описание Тогда 
					ЕстьОтличия = Истина;
					Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		СрокИзменен = Ложь;
		ЕстьОтличия = Истина;
	КонецЕсли;
	
	Если ЕстьОтличия Тогда
		Исполнители.Очистить();
		Исполнители.Загрузить(НовыеИсполнители);
	КонецЕсли;
	
	Если ДанныеОбновления.Автор <> Автор Тогда
		Автор = ДанныеОбновления.Автор;
	КонецЕсли;
	
	Если ДанныеОбновления.ВедущаяЗадача <> ВедущаяЗадача Тогда
		ВедущаяЗадача = ДанныеОбновления.ВедущаяЗадача;
	КонецЕсли;
	
	Если СрокИзменен Тогда
		ПараметрыДляРасчетаСроков = СрокиИсполненияПроцессов.ПараметрыДляРасчетаСроков();
		ПараметрыДляРасчетаСроков.ДатаОтсчета = 
			СрокиИсполненияПроцессов.ДатаОтсчетаДляРасчетаСроковПроцесса(ЭтотОбъект);
		ПараметрыДляРасчетаСроков.Смещение = СрокиИсполненияПроцессовКорп.СмещенияДатыОтсчета(Ссылка);
		СрокиИсполненияПроцессов.РассчитатьСрокиОзнакомления(ЭтотОбъект, ПараметрыДляРасчетаСроков);
	КонецЕсли;
	
	Если Модифицированность() Тогда
		СтарыеУчастникиПроцесса = БизнесПроцессыИЗадачиВызовСервера.ТекущиеУчастникиПроцесса(Ссылка);
		
		НачатьТранзакцию();
		Попытка
			
			ПараметрыСеанса.ОтключитьОбновлениеЗадач = Истина;
			
			Записать();
			ИзменитьРеквизитыНевыполненныхЗадач(СтарыеУчастникиПроцесса, Новый Структура);
			
			ИнтеграцияЗадач.ОбновитьЗадачуПоИсточнику(Ссылка);
			ПараметрыСеанса.ОтключитьОбновлениеЗадач = Ложь;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ПараметрыСеанса.ОтключитьОбновлениеЗадач = Ложь;
			ВызватьИсключение;
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

// Заполнит структуру возврата вместо диалога настроек процесса
//
//Параметры
//  РезультатВыполнения
//
Процедура ЗаполнитьРезультатНастроекПроцесса(СтруктураРезультата) Экспорт
	
КонецПроцедуры	

#КонецОбласти

#Область ПрограммныйИнтерфейс_Предметы

// Проверяет права участников процесса на предметы этого процесса.
// Если у участников процесса отсутствуют права на предметы, то выводятся сообщения с привязкой
// к карточке процесса.
//
// Параметры
//  ПроцессОбъект - БизнесПроцессОбъект - процесс.
//  Отказ - Булево - в этот параметр помещается значение Истина, если кто-то из участников не имеет
//                   прав на предметы.
//  ПроверятьПриИзменении - Булево - если указано значение Истина, то проверка выполняется только если
//                          изменены участники или предметы процесса, иначе проверка выполняется всегда.
//
Процедура ПроверитьПраваУчастниковПроцессаНаПредметы(
	ПроцессОбъект, Отказ, ПроверятьПриИзменении) Экспорт
	
	Мультипредметность.ПроверитьПраваУчастниковПроцессаНаПредметы(
		ПроцессОбъект, Отказ, ПроверятьПриИзменении);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если ЭтоНовый() Тогда 
		Дата = ТекущаяДатаСеанса();
		Если Не ЗначениеЗаполнено(Автор) Тогда
			Автор = Сотрудники.ОсновнойСотрудник();
		КонецЕсли;
		Важность = Перечисления.ВариантыВажностиОбъектов.Обычная;
		
		Если Не ЗначениеЗаполнено(Проект) Тогда 
			Проект = РаботаСПроектами.ПолучитьПроектПоУмолчанию();
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеЗаполнения <> Неопределено И ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Тогда
		Мультипредметность.ПередатьПредметыПроцессу(ЭтотОбъект, ДанныеЗаполнения, Ложь, Истина);
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		ЗадачаСсылка = ДанныеЗаполнения;
		ЗаполнитьБизнесПроцессПоЗадаче(ЗадачаСсылка);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("ВедущаяЗадача") Тогда
			ВедущаяЗадача = ДанныеЗаполнения.ВедущаяЗадача;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Важность") Тогда
			Важность = ДанныеЗаполнения.Важность;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Наименование") Тогда
			Наименование = ДанныеЗаполнения.Наименование;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Автор") Тогда
			Автор = ДанныеЗаполнения.Автор;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Шаблон") Тогда
			Мультипредметность.ЗаполнитьПредметыПроцессаПоШаблону(ДанныеЗаполнения.Шаблон, ЭтотОбъект);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Предметы") Тогда
			Мультипредметность.ПередатьПредметыПроцессу(ЭтотОбъект, ДанныеЗаполнения.Предметы, Ложь, Истина);
			Проект = МультипредметностьПереопределяемый.ПолучитьОсновнойПроектПоПредметам(ДанныеЗаполнения.Предметы);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("АвторСобытия") Тогда
			Автор = ДанныеЗаполнения.АвторСобытия;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Шаблон") Тогда
			ЗаполнитьПоШаблону(ДанныеЗаполнения.Шаблон);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ЗадачаИсполнителя") Тогда
			ЗадачаСсылка = ДанныеЗаполнения.ЗадачаИсполнителя;
			ЗаполнитьБизнесПроцессПоЗадаче(ЗадачаСсылка);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ПроектнаяЗадача") Тогда
			ЗаполнитьПоПроектнойЗадаче(ДанныеЗаполнения.ПроектнаяЗадача);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Проект") Тогда
			Проект = ДанныеЗаполнения.Проект;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Исполнители") Тогда
			Если ТипЗнч(ДанныеЗаполнения.Исполнители) = Тип("ТаблицаЗначений") Тогда
				Для Каждого Исполнитель ИЗ ДанныеЗаполнения.Исполнители Цикл
					Строка = Исполнители.Добавить();
					ЗаполнитьЗначенияСвойств(Строка, Исполнитель);
				КонецЦикла;
			Иначе
				Для Каждого Исполнитель Из ДанныеЗаполнения.Исполнители Цикл
					Если ТипЗнч(Исполнитель) = Тип("Структура") Тогда
						Строка = Исполнители.Добавить();
						ЗаполнитьЗначенияСвойств(Строка, Исполнитель);
					Иначе
						Строка = Исполнители.Добавить();
						Строка.Исполнитель = Исполнитель;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		ТипыПисем = МультипредметностьПереопределяемый.ПолучитьТипыПисем();
		ОсновныеПисьма = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЭтотОбъект, ТипыПисем, Истина);
		Для Каждого Письмо Из ОсновныеПисьма Цикл
			Тема = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Письмо, "Тема");
			Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Письмо, "Проект");
			Если Не ЗначениеЗаполнено(Наименование) Тогда
				Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ознакомиться ""%1""'"),
					Тема);
			КонецЕсли;
			Прервать;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.ПроектныеЗадачи") Тогда 	
		
		ЗаполнитьПоПроектнойЗадаче(ДанныеЗаполнения);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Наименование) И Предметы.Количество() > 0 Тогда
		МультипредметностьКлиентСервер.ЗаполнитьНаименованиеПроцесса(ЭтотОбъект, НСтр("ru = 'Ознакомиться'"));
	КонецЕсли;
	
	БизнесПроцессыИЗадачиСервер.ЗаполнитьГлавнуюЗадачу(ЭтотОбъект, ДанныеЗаполнения);	
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Мультипредметность.ПроверитьКорректностьТиповОсновныхПредметов(ЭтотОбъект, Отказ);
		
	РаботаСПроцессамиПоОбработкамОбъектов.ПроверкаЗапретаНаЗапускПоПредметуИзДругойСистемы(ЭтотОбъект, Отказ);
	
	// Проверка прав участников процесса на предметы
	Если Не РаботаСБизнесПроцессами.ЭтоФоновоеВыполнениеПроцесса() Тогда
		ПроверитьПраваУчастниковПроцессаНаПредметы(ЭтотОбъект, Отказ, Стартован);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбычнаяЗапись = Истина;
	ТолькоОбновлениеРабочейГруппыПроцессов = Ложь;
	
	Если ДополнительныеСвойства.Свойство("ВидЗаписи") Тогда
		
		ОбычнаяЗапись = Ложь;
		
		ТолькоОбновлениеРабочейГруппыПроцессов = 
			(ДополнительныеСвойства.ВидЗаписи =
			"ЗаписьСОбновлением_Предметов_ПредметовЗадач_Проекта_ОбщегоСпискаПроцессов_РабочихГруппПредметов_РабочихГруппПроцессов_ДопРеквизитовПоПредметам");
		
		Если Не ТолькоОбновлениеРабочейГруппыПроцессов Тогда 
			Возврат;
		КонецЕсли;
			
	КонецЕсли;
	
	Если ОбычнаяЗапись
		И Не МиграцияДанныхИзВнешнихСистемСервер.ЭтоОбъектИзДругойСистемы(ИсточникДанных) Тогда
		
		Если Не РаботаСБизнесПроцессамиВызовСервера.ПроверитьПередЗаписью(ЭтотОбъект) Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;	
		
		ПредыдущаяПометкаУдаления = Ложь;
		Если Не Ссылка.Пустая() Тогда
			ПредыдущаяПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ПометкаУдаления");
		КонецЕсли;
		ДополнительныеСвойства.Вставить("ПредыдущаяПометкаУдаления", ПредыдущаяПометкаУдаления);
		
		Если Не Ссылка.Пустая() Тогда
			ПредыдущееСостояние = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Состояние");
			ДополнительныеСвойства.Вставить("ПредыдущееСостояние", ПредыдущееСостояние);
		КонецЕсли;
		
		Если ПометкаУдаления <> ПредыдущаяПометкаУдаления Тогда
			РаботаСФайламиВызовСервера.ПометитьНаУдалениеПриложенныеФайлы(Ссылка, ПометкаУдаления);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбычнаяЗапись Или ТолькоОбновлениеРабочейГруппыПроцессов Тогда
		// Обработка рабочей группы	
		РаботаСБизнесПроцессамиВызовСервера.СформироватьРабочуюГруппу(ЭтотОбъект);
	КонецЕсли;
	
	Если ОбычнаяЗапись Тогда
		ЗаполнитьПустыеИдентификаторыУчастников();
		ПроверитьУникальностьИдентификаторовУчастников();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияЗадач.ПриЗаписиИсточникаЗадачи(ЭтотОбъект);
	
	Если ДополнительныеСвойства.Свойство("ВидЗаписи") Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаОчередиЗаданийСервер.ПриЗаписиПроцесса(ЭтотОбъект);
	
	ПредыдущаяПометкаУдаления = Ложь;
	Если ДополнительныеСвойства.Свойство("ПредыдущаяПометкаУдаления") Тогда
		ПредыдущаяПометкаУдаления = ДополнительныеСвойства.ПредыдущаяПометкаУдаления;
	КонецЕсли;
	
	Если (ПометкаУдаления <> ПредыдущаяПометкаУдаления)
		И Не МиграцияДанныхИзВнешнихСистемСервер.ЭтоОбъектИзДругойСистемы(ИсточникДанных) Тогда
		
		ПротоколированиеРаботыСотрудников.ЗаписатьПометкуУдаления(Ссылка, ПометкаУдаления);
	КонецЕсли;
	
	СтартПроцессовСервер.ПроцессПриЗаписи(ЭтотОбъект, Отказ);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	РаботаСБизнесПроцессами.ПриКопированииБизнесПроцесса(ОбъектКопирования);
	
	Дата = ТекущаяДатаСеанса();
	Автор = Сотрудники.ОсновнойСотрудник();
	ДатаНачала = '00010101';
	ДатаЗавершения = '00010101';
	
КонецПроцедуры

/////////////////////////////
// Карта маршрута

Процедура СтартПередСтартом(ТочкаМаршрутаБизнесПроцесса, Отказ)
	
	ДатаНачала = ТекущаяДатаСеанса();
	
	УправлениеМероприятиями.УстановитьСостояниеМероприятияИзБизнесПроцесса(
		ЭтотОбъект,
		БизнесПроцессы.Ознакомление.ТочкиМаршрута.Старт);
	
	РаботаСПроектами.ОтметитьНачалоВыполненияПроектнойЗадачи(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОзнакомитьсяПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Для Каждого Строка Из Исполнители Цикл
		
		Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
		ЗаполнитьЗадачуОзнакомиться(Задача, Строка, ТочкаМаршрутаБизнесПроцесса);
		ФормируемыеЗадачи.Добавить(Задача);
		
	КонецЦикла;
	
	РаботаСБизнесПроцессами.ЗаписатьПроцесс(ЭтотОбъект, "ЗаписьСОбновлениемРезультатаВыполнения");
	
КонецПроцедуры

Процедура ОзнакомитьсяОбработкаПроверкиВыполнения(ТочкаМаршрутаБизнесПроцесса, Задача, Результат)
	
	Результат = Истина;
	
КонецПроцедуры

Процедура ОзнакомитьсяПередВыполнением(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого Исполнитель Из Исполнители Цикл
		Если Исполнитель.ЗадачаИсполнителя = Задача Тогда
			Исполнитель.Пройден = Истина;
			
			РаботаСБизнесПроцессами.ЗаписатьПроцесс(ЭтотОбъект, "ЗаписьСОбновлениемРезультатаВыполнения");
			
			Возврат;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗавершениеПриЗавершении(ТочкаМаршрутаБизнесПроцесса, Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	ДатаЗавершения = ТекущаяДатаСеанса();
	
	УправлениеМероприятиями.УстановитьСостояниеМероприятияИзБизнесПроцесса(
		ЭтотОбъект,
		БизнесПроцессы.Ознакомление.ТочкиМаршрута.Завершение);
	
	РаботаСПроектами.ОтметитьОкончаниеВыполненияПроектнойЗадачи(ЭтотОбъект);
	
	РаботаСПроцессамиПоДействиямСобытия.ПриЗавершенииПроцесса(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьЗадачуОзнакомиться(Задача, Исполнитель, ТочкаМаршрута)
	
	Задача.Дата  	= ТекущаяДатаСеанса();
	Задача.Автор 	= Автор;
	Задача.Важность	= Важность;
	Если ЗначениеЗаполнено(Состояние) Тогда
		Задача.СостояниеБизнесПроцесса = Состояние;
	КонецЕсли;
	Мультипредметность.ЗадачаПередСозданием(ЭтотОбъект, Задача, ТочкаМаршрута);
	
	Задача.БизнесПроцесс  = ЭтотОбъект.Ссылка;
	Задача.ТочкаМаршрута  = ТочкаМаршрута;
	
	ЗаполнитьНаименованиеИОписаниеЗадачи(Задача, Исполнитель);
	
	Задача.Проект = Проект;
	Задача.ПроектнаяЗадача = ПроектнаяЗадача;
	
	Если ТипЗнч(Исполнитель.Исполнитель) = Тип("СправочникСсылка.Сотрудники") 
		Или ТипЗнч(Исполнитель.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
		Задача.Исполнитель = Исполнитель.Исполнитель;
	Иначе	
		Задача.РольИсполнителя = Исполнитель.Исполнитель;
	КонецЕсли;
	Задача.ИдентификаторИсполнителя = Исполнитель.ИдентификаторИсполнителя;
	
	СрокиИсполненияПроцессов.ЗаполнитьСрокИсполненияЗадачи(
		Задача,
		Исполнитель.ВариантУстановкиСрокаИсполнения,
		Исполнитель.СрокИсполнения,
		Исполнитель.СрокИсполненияДни,
		Исполнитель.СрокИсполненияЧасы,
		Исполнитель.СрокИсполненияМинуты);
	
	РаботаСБизнесПроцессамиВызовСервера.СкопироватьЗначенияДопРеквизитов(Задача.БизнесПроцесс, Задача);
	
	ЗадачаСсылка = Задачи.ЗадачаИсполнителя.ПолучитьСсылку();
	Задача.УстановитьСсылкуНового(ЗадачаСсылка);
	
	Исполнитель.ЗадачаИсполнителя = ЗадачаСсылка;
	
КонецПроцедуры

Процедура ЗаполнитьНаименованиеИОписаниеЗадачи(Задача, ПараметрыСтроки = Неопределено)
	
	Если ПараметрыСтроки = Неопределено Тогда
		ПараметрыСтроки = Новый Структура;
		ПараметрыСтроки.Вставить("Описание", "");
	КонецЕсли;
				
	ПредметыСтрокой = МультипредметностьКлиентСервер.ПредметыСтрокой(Задача.Предметы, Истина, Ложь);
	НаименованиеИОписаниеПоДействию = РаботаСПроцессамиПоДействиям.НаименованиеИОписаниеЗадачиПоДействию(
		Задача, ПредметыСтрокой);
	
	// Описание может быть перехвачено в действии, поэтому берем его, если задано.
	Если ЗначениеЗаполнено(Описание) И ЗначениеЗаполнено(ПараметрыСтроки.Описание) Тогда
		Задача.Описание = Описание + Символы.ПС + ПараметрыСтроки.Описание;
	ИначеЕсли ЗначениеЗаполнено(ПараметрыСтроки.Описание) Тогда
		Задача.Описание = ПараметрыСтроки.Описание;
	ИначеЕсли ЗначениеЗаполнено(Описание) Тогда
		Задача.Описание = Описание;
	ИначеЕсли НаименованиеИОписаниеПоДействию <> Неопределено 
		И ЗначениеЗаполнено(НаименованиеИОписаниеПоДействию.Описание) Тогда
		Задача.Описание = НаименованиеИОписаниеПоДействию.Описание;
	КонецЕсли;
	
	Если НаименованиеИОписаниеПоДействию <> Неопределено
		И ЗначениеЗаполнено(НаименованиеИОписаниеПоДействию.Наименование) Тогда
		Задача.Наименование = НаименованиеИОписаниеПоДействию.Наименование;

	Иначе
		Задача.Наименование = Наименование;
	КонецЕсли;

КонецПроцедуры

// Заполняет пустые идентификаторы участников в процессе.
//
Процедура ЗаполнитьПустыеИдентификаторыУчастников()
	
	Для Каждого Строка Из Исполнители Цикл
		Если Строка.ИдентификаторИсполнителя = УникальныйИдентификаторПустой() Тогда
			Строка.ИдентификаторИсполнителя = Новый УникальныйИдентификатор;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Проверяет уникальность идентификаторов участников процесса.
// Если есть не уникальные значения, то вызывается исключение. 
//
Процедура ПроверитьУникальностьИдентификаторовУчастников()
	
	ПройденныеИдентификаторы = Новый Соответствие();
	
	Для Каждого СтрокаТаблицы Из Исполнители Цикл
		Если ПройденныеИдентификаторы[СтрокаТаблицы.ИдентификаторИсполнителя] <> Неопределено Тогда
			ВызватьИсключение НСтр("ru = 'Идентификаторы участников не уникальны.'",
				ОбщегоНазначения.КодОсновногоЯзыка());
		КонецЕсли;
		ПройденныеИдентификаторы[СтрокаТаблицы.ИдентификаторИсполнителя] = Истина; 
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры

Процедура ЗаполнитьБизнесПроцессПоЗадаче(ЗадачаСсылка)
	
	РаботаСБизнесПроцессами.ЗаполнитьБизнесПроцессПоЗадаче(ЭтотОбъект, ЗадачаСсылка);
	
КонецПроцедуры

// Возвращает описание задачи, специфичное для бизнес-процесса
Функция ПолучитьОписаниеУведомленияЗадачи(Задача, КодЯзыкаПолучателя) Экспорт
	
	Возврат Неопределено;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы со стартом процесса

Процедура ОтложенныйСтарт() Экспорт
	
	СтартПроцессовСервер.СтартоватьПроцессОтложенно(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОтключитьОтложенныйСтарт() Экспорт
	
	СтартПроцессовСервер.ОтключитьОтложенныйСтарт(ЭтотОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для поддержки комплексных процессов

// Дополняет описание процесса общим описанием
Процедура ДополнитьОписание(ОбщееОписание) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ОбщееОписание) Тогда
		Возврат;
	КонецЕсли;
	Описание = ОбщееОписание + Символы.ПС + Описание;
	
КонецПроцедуры



// Проверяет что заполнены поля шаблона
Функция ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта() Экспорт
	
	МассивПолей = Новый Массив;
	
	Если Исполнители.Количество() = 0 Тогда
		МассивПолей.Добавить("Исполнители");
	КонецЕсли;
	
	Возврат МассивПолей;
	
КонецФункции

Функция НаименованиеПроцессаПоУмолчанию(ДобавлятьНаименованиеПредмета)
	
	НаименованиеПоУмолчанию = НСтр("ru = 'Ознакомиться '");
	
	Если ДобавлятьНаименованиеПредмета Тогда
		НаименованиеПоУмолчанию = МультипредметностьКлиентСервер.ПолучитьНаименованиеСПредметами(
			СокрЛП(НаименованиеПоУмолчанию), Предметы);
	КонецЕсли;
	
	Возврат НаименованиеПоУмолчанию;
	
КонецФункции

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли