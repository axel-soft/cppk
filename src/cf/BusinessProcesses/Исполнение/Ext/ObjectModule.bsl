#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает пустую структуру данных для заполнения.
//
// Возвращаемое значение:
//  Структура
//   * Важность - ПеречислениеСсылка.ВариантыВажностиОбъектов
//   * Наименование - Строка
//   * Исполнители - ТаблицаЗначений
//      - ИдентификаторИсполнителя - УникальныйИдентификатор
//      - Исполнитель - СправочникСсылка.Сотрудники, СправочникСсылка.ПолныеРоли, СправочникСсылка.Пользователи
//      - ВариантУстановкиСрокаИсполнения - ПеречислениеСсылка.ВариантыУстановкиСрокаИсполнения
//      - СрокИсполнения - Дата
//      - СрокИсполненияДни - Число
//      - СрокИсполненияЧасы - Число
//      - СрокИсполненияМинуты - Число
//      - ПорядокИсполнения - ПеречислениеСсылка.ПорядокВыполненияЗадач
//      - НаименованиеЗадачи - Строка
//      - Описание - Строка
//      - Ответственный - Булево
//   * Автор - СправочникСсылка.Сотрудники, СправочникСсылка.Пользователи
//   * ИдентификаторКонтролера - УникальныйИндентификатор
//   * ИдентификаторПроверяющего - УникальныйИндентификатор
//   * ВариантУстановкиСрокаОбработкиРезультатов - ПеречислениеСсылка.ВариантыУстановкиСрокаИсполнения
//   * СрокОбработкиРезультатов - Дата
//   * СрокОбработкиРезультатовДни - Число
//   * СрокОбработкиРезультатовЧасы - Число
//   * СрокОбработкиРезультатовМинуты - Число
//   * КоличествоИтераций - Число
//   * ТрудозатратыПланКонтролера - Число
//   * ТрудозатратыПланПроверяющего - Число
//   * ВедущаяЗадача - ЗадачаСсылка.ЗадачаИсполнителя
//
Функция СтруктураДанныхДляЗаполнения() Экспорт
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("Важность", Перечисления.ВариантыВажностиОбъектов.ПустаяСсылка());
	СтруктураДанных.Вставить("Наименование", "");
	СтруктураДанных.Вставить("Описание", "");
	
	СтруктураДанных.Вставить("ВариантИсполнения", Перечисления.ВариантыМаршрутизацииЗадач.ПустаяСсылка());
	
	СтруктураДанных.Вставить("Исполнители", Исполнители.ВыгрузитьКолонки("
		|ИдентификаторИсполнителя,
		|Исполнитель,
		|ВариантУстановкиСрокаИсполнения,
		|СрокИсполнения,
		|СрокИсполненияДни,
		|СрокИсполненияЧасы,
		|СрокИсполненияМинуты,
		|ПорядокИсполнения,
		|НаименованиеЗадачи,
		|Описание,
		|Ответственный"));
	
	СтруктураДанных.Вставить("Автор", Справочники.Сотрудники.ПустаяСсылка());
	
	СтруктураДанных.Вставить("Проверяющий", Справочники.Сотрудники.ПустаяСсылка());
	СтруктураДанных.Вставить("ИдентификаторПроверяющего", УникальныйИдентификаторПустой());
	
	СтруктураДанных.Вставить("Контролер", Справочники.Сотрудники.ПустаяСсылка());
	СтруктураДанных.Вставить("ИдентификаторКонтролера", УникальныйИдентификаторПустой());
	
	СтруктураДанных.Вставить("ВариантУстановкиСрокаОбработкиРезультатов", 
		Перечисления.ВариантыУстановкиСрокаИсполнения.ПустаяСсылка());
	СтруктураДанных.Вставить("СрокОбработкиРезультатов", Дата(1,1,1));
	СтруктураДанных.Вставить("СрокОбработкиРезультатовДни", 0);
	СтруктураДанных.Вставить("СрокОбработкиРезультатовЧасы", 0);
	СтруктураДанных.Вставить("СрокОбработкиРезультатовМинуты", 0);
	
	СтруктураДанных.Вставить("КоличествоИтераций", 0);
	
	СтруктураДанных.Вставить("ТрудозатратыПланКонтролера", 0);
	СтруктураДанных.Вставить("ТрудозатратыПланПроверяющего", 0);
	
	СтруктураДанных.Вставить("Предметы", Неопределено);
	
	СтруктураДанных.Вставить("ВедущаяЗадача", Задачи.ЗадачаИсполнителя);
	
	Возврат СтруктураДанных;
	
КонецФункции

// Заполняет бизнес-процесс на основании шаблона бизнес-процесса.
//
// Параметры
//  ШаблонБизнесПроцесса  - шаблон бизнес-процесса
//
Процедура ЗаполнитьПоШаблону(ШаблонБизнесПроцесса) Экспорт
	
	Если ШаблонБизнесПроцесса = Справочники.ШаблоныИсполнения.ПоУмолчанию Тогда
		// Не заполняем шаблон в процессе, если это шаблон по умолчанию.
		// Считаем, что процесс создан с нуля.
	ИначеЕсли ШаблонБизнесПроцесса.ШаблонВКомплексномПроцессе 
		И ЗначениеЗаполнено(ШаблонБизнесПроцесса.ИсходныйШаблон) Тогда
		Шаблон = ШаблонБизнесПроцесса.ИсходныйШаблон;
	ИначеЕсли НЕ ШаблонБизнесПроцесса.ШаблонВКомплексномПроцессе Тогда
		Шаблон = ШаблонБизнесПроцесса;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.НаименованиеБизнесПроцесса) Тогда 
		Наименование = ШаблонБизнесПроцесса.НаименованиеБизнесПроцесса;
		НаименованиеСПредметами = МультипредметностьКлиентСервер.ПолучитьНаименованиеСПредметами(СокрЛП(Наименование), Предметы);
		Если ЗначениеЗаполнено(НаименованиеСПредметами) И ШаблонБизнесПроцесса.ДобавлятьНаименованиеПредмета Тогда
			Наименование = НаименованиеСПредметами;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.Описание) Тогда 
		Описание = ШаблонБизнесПроцесса.Описание;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.Важность) Тогда 
		Важность = ШаблонБизнесПроцесса.Важность;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.Автор) Тогда 
		Автор = ШаблонБизнесПроцесса.Автор;
	КонецЕсли;
	
	ВариантИсполнения = ШаблонБизнесПроцесса.ВариантИсполнения;
	
	// заполнение исполнителей
	Если ШаблонБизнесПроцесса.Исполнители.Количество() > 0 Тогда 
		Исполнители.Очистить();
	КонецЕсли;	
	НеобходимоПеренестиНачалоСледующегоШага = Ложь;
	
	ОсновныеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЭтотОбъект,, Истина); 
	
	Для Каждого Строка Из ШаблонБизнесПроцесса.Исполнители Цикл
		
		Если НеобходимоПеренестиНачалоСледующегоШага
			И Строка.ПорядокИсполнения = Перечисления.ПорядокВыполненияЗадач.ПослеПредыдущего Тогда
			
			НеобходимоПеренестиНачалоСледующегоШага = Ложь;
		КонецЕсли;
		
		Если НЕ Строка.Условие.Пустая()
			И ШаблонБизнесПроцесса.ИспользоватьУсловия Тогда
			СтрокаПредмета = Предметы.Найти(Строка.ИмяПредметаУсловия, "ИмяПредмета");
			Если СтрокаПредмета = Неопределено Тогда
				Если Строка.ПорядокИсполнения = Перечисления.ПорядокВыполненияЗадач.ПослеПредыдущего Тогда
					НеобходимоПеренестиНачалоСледующегоШага = Истина;
				КонецЕсли;
				Продолжить;
			Иначе
				Предмет = СтрокаПредмета.Предмет;
				РезультатПроверкиУсловия = РаботаСАлгоритмамиПроверки.ПроверитьПрименимостьАлгоритмаПроверкиКОбъекту(Предмет, Строка.Условие);
				Если НЕ РезультатПроверкиУсловия Тогда
					Если Строка.ПорядокИсполнения = Перечисления.ПорядокВыполненияЗадач.ПослеПредыдущего Тогда
						НеобходимоПеренестиНачалоСледующегоШага = Истина;
					КонецЕсли;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.АвтоподстановкиДляПроцессов")
			И ЗначениеЗаполнено(Строка.Исполнитель) Тогда 
			
			АвтоподстановкаИсполнитель = ШаблоныБизнесПроцессов.ПолучитьЗначениеАвтоподстановки(
				Строка.Исполнитель, ЭтотОбъект);
			Если ТипЗнч(АвтоподстановкаИсполнитель) = Тип("СправочникСсылка.Пользователи")
			 Или ТипЗнч(АвтоподстановкаИсполнитель) = Тип("СправочникСсылка.Сотрудники")
			 Или ТипЗнч(АвтоподстановкаИсполнитель) = Тип("СправочникСсылка.ПолныеРоли") Тогда 
				
				НоваяСтрока = Исполнители.Добавить();
				НоваяСтрока.Исполнитель = АвтоподстановкаИсполнитель;
				НоваяСтрока.Описание = Строка.Описание;
				НоваяСтрока.Ответственный = Строка.Ответственный;
				НоваяСтрока.НаименованиеЗадачи = Строка.НаименованиеЗадачи;
				НоваяСтрока.ПорядокИсполнения = Строка.ПорядокИсполнения;
				
				НоваяСтрока.ВариантУстановкиСрокаИсполнения = Строка.ВариантУстановкиСрокаИсполнения;
				НоваяСтрока.СрокИсполнения = Строка.СрокИсполнения;
				НоваяСтрока.СрокИсполненияДни = Строка.СрокИсполненияДни;
				НоваяСтрока.СрокИсполненияЧасы = Строка.СрокИсполненияЧасы;
				НоваяСтрока.СрокИсполненияМинуты = Строка.СрокИсполненияМинуты;
				
				// трудозатраты
				Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда 
					НоваяСтрока.ТрудозатратыПланИсполнителя = Строка.ТрудозатратыПланИсполнителя;
				КонецЕсли;	
				
			ИначеЕсли ТипЗнч(АвтоподстановкаИсполнитель) = Тип("Структура") Тогда 
				
				НоваяСтрока = Исполнители.Добавить();
				НоваяСтрока.Исполнитель = АвтоподстановкаИсполнитель.РольИсполнителя;
				НоваяСтрока.Описание = Строка.Описание;
				НоваяСтрока.Ответственный = Строка.Ответственный;
				НоваяСтрока.НаименованиеЗадачи = Строка.НаименованиеЗадачи;
				НоваяСтрока.ПорядокИсполнения = Строка.ПорядокИсполнения;
				
				НоваяСтрока.ВариантУстановкиСрокаИсполнения = Строка.ВариантУстановкиСрокаИсполнения;
				НоваяСтрока.СрокИсполнения = Строка.СрокИсполнения;
				НоваяСтрока.СрокИсполненияДни = Строка.СрокИсполненияДни;
				НоваяСтрока.СрокИсполненияЧасы = Строка.СрокИсполненияЧасы;
				НоваяСтрока.СрокИсполненияМинуты = Строка.СрокИсполненияМинуты;
				
				// трудозатраты
				Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда 
					НоваяСтрока.ТрудозатратыПланИсполнителя = Строка.ТрудозатратыПланИсполнителя;
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(АвтоподстановкаИсполнитель) = Тип("Массив") Тогда 
				
				Для Каждого ЭлементМассива Из АвтоподстановкаИсполнитель Цикл
					
					Если (ТипЗнч(ЭлементМассива) = Тип("СправочникСсылка.Пользователи") 
					  Или ТипЗнч(ЭлементМассива) = Тип("СправочникСсылка.Сотрудники")
					  Или ТипЗнч(ЭлементМассива) = Тип("СправочникСсылка.ПолныеРоли"))
						И ЗначениеЗаполнено(ЭлементМассива) Тогда 
						
						НоваяСтрока = Исполнители.Добавить();
						НоваяСтрока.Исполнитель = ЭлементМассива;
						НоваяСтрока.Описание = Строка.Описание;
						НоваяСтрока.Ответственный = Строка.Ответственный;
						НоваяСтрока.НаименованиеЗадачи = Строка.НаименованиеЗадачи;
						НоваяСтрока.ПорядокИсполнения = Строка.ПорядокИсполнения;
						
						НоваяСтрока.ВариантУстановкиСрокаИсполнения = Строка.ВариантУстановкиСрокаИсполнения;
						НоваяСтрока.СрокИсполнения = Строка.СрокИсполнения;
						НоваяСтрока.СрокИсполненияДни = Строка.СрокИсполненияДни;
						НоваяСтрока.СрокИсполненияЧасы = Строка.СрокИсполненияЧасы;
						НоваяСтрока.СрокИсполненияМинуты = Строка.СрокИсполненияМинуты;
						
						// трудозатраты
						Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда 
							НоваяСтрока.ТрудозатратыПланИсполнителя = Строка.ТрудозатратыПланИсполнителя;
						КонецЕсли;
						
					ИначеЕсли ТипЗнч(ЭлементМассива) = Тип("Структура") Тогда 
						
						НоваяСтрока = Исполнители.Добавить();
						НоваяСтрока.Исполнитель = ЭлементМассива.РольИсполнителя;
						НоваяСтрока.Описание = Строка.Описание;
						НоваяСтрока.Ответственный = Строка.Ответственный;
						НоваяСтрока.НаименованиеЗадачи = Строка.НаименованиеЗадачи;
						НоваяСтрока.ПорядокИсполнения = Строка.ПорядокИсполнения;
						
						НоваяСтрока.ВариантУстановкиСрокаИсполнения = Строка.ВариантУстановкиСрокаИсполнения;
						НоваяСтрока.СрокИсполнения = Строка.СрокИсполнения;
						НоваяСтрока.СрокИсполненияДни = Строка.СрокИсполненияДни;
						НоваяСтрока.СрокИсполненияЧасы = Строка.СрокИсполненияЧасы;
						НоваяСтрока.СрокИсполненияМинуты = Строка.СрокИсполненияМинуты;
						
						// трудозатраты
						Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда 
							НоваяСтрока.ТрудозатратыПланИсполнителя = Строка.ТрудозатратыПланИсполнителя;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;	
			
		Иначе
			
			НоваяСтрока = Исполнители.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка,, "СрокИсполнения");
			
			НоваяСтрока.ВариантУстановкиСрокаИсполнения = Строка.ВариантУстановкиСрокаИсполнения;
			НоваяСтрока.СрокИсполнения = Строка.СрокИсполнения;
			НоваяСтрока.СрокИсполненияДни = Строка.СрокИсполненияДни;
			НоваяСтрока.СрокИсполненияЧасы = Строка.СрокИсполненияЧасы;
			НоваяСтрока.СрокИсполненияМинуты = Строка.СрокИсполненияМинуты;
			
			// трудозатраты
			Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда 
				НоваяСтрока.ТрудозатратыПланИсполнителя = Строка.ТрудозатратыПланИсполнителя;
			КонецЕсли;
			
		КонецЕсли;
		
		Если НеобходимоПеренестиНачалоСледующегоШага
			И НоваяСтрока.ПорядокИсполнения = Перечисления.ПорядокВыполненияЗадач.ВместеСПредыдущим Тогда
			НоваяСтрока.ПорядокИсполнения	= Перечисления.ПорядокВыполненияЗадач.ПослеПредыдущего;
			НеобходимоПеренестиНачалоСледующегоШага = Ложь;
		КонецЕсли;
	КонецЦикла;	
	
	// Срок обработки результатов
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.ВариантУстановкиСрокаОбработкиРезультатов) Тогда
		ВариантУстановкиСрокаОбработкиРезультатов = ШаблонБизнесПроцесса.ВариантУстановкиСрокаОбработкиРезультатов;
	КонецЕсли;
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.СрокОбработкиРезультатов) Тогда
		СрокОбработкиРезультатов = ШаблонБизнесПроцесса.СрокОбработкиРезультатов;
	КонецЕсли;
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.СрокОбработкиРезультатовДни) Тогда
		СрокОбработкиРезультатовДни = ШаблонБизнесПроцесса.СрокОбработкиРезультатовДни;
	КонецЕсли;
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.СрокОбработкиРезультатовЧасы) Тогда
		СрокОбработкиРезультатовЧасы = ШаблонБизнесПроцесса.СрокОбработкиРезультатовЧасы;
	КонецЕсли;
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.СрокОбработкиРезультатовМинуты) Тогда
		СрокОбработкиРезультатовМинуты = ШаблонБизнесПроцесса.СрокОбработкиРезультатовМинуты;
	КонецЕсли;
	
	// Срок исполнения процесса
	СрокИсполненияПроцесса = ШаблонБизнесПроцесса.СрокИсполненияПроцесса;
	
	// Количество итераций
	Если ЗначениеЗаполнено(ШаблонБизнесПроцесса.КоличествоИтераций) Тогда
		КоличествоИтераций = ШаблонБизнесПроцесса.КоличествоИтераций;
	КонецЕсли;
	
	// заполнение контролера
	Если ТипЗнч(ШаблонБизнесПроцесса.Контролер) = Тип("СправочникСсылка.АвтоподстановкиДляПроцессов")
		И ЗначениеЗаполнено(ШаблонБизнесПроцесса.Контролер) Тогда
		
		АвтоподстановкаКонтролер = ШаблоныБизнесПроцессов.ПолучитьЗначениеАвтоподстановки(
			ШаблонБизнесПроцесса.Контролер, ЭтотОбъект);
		
		Если ТипЗнч(АвтоподстановкаКонтролер) = Тип("СправочникСсылка.Сотрудники")
			Или ТипЗнч(АвтоподстановкаКонтролер) = Тип("СправочникСсылка.Пользователи")
			Или ТипЗнч(АвтоподстановкаКонтролер) = Тип("СправочникСсылка.ПолныеРоли") Тогда
			
			Контролер = АвтоподстановкаКонтролер;
			
		ИначеЕсли ТипЗнч(АвтоподстановкаКонтролер) = Тип("Структура") Тогда
			
			Контролер = АвтоподстановкаКонтролер.РольИсполнителя;
			
		ИначеЕсли ТипЗнч(АвтоподстановкаКонтролер) = Тип("Массив") Тогда 	
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Автоподстановка ""%1"" не может применяться для поля ""%2"", так как возвращает массив пользователей'"),
				ШаблонБизнесПроцесса.Контролер,
				НСтр("ru = 'Контролер'"));
			ВызватьИсключение ТекстСообщения;	
		КонецЕсли;
		
	Иначе
		Контролер = ШаблонБизнесПроцесса.Контролер;
	КонецЕсли;
	
	// заполнение проверяющего
	Если ТипЗнч(ШаблонБизнесПроцесса.Проверяющий) = Тип("СправочникСсылка.АвтоподстановкиДляПроцессов")
		И ЗначениеЗаполнено(ШаблонБизнесПроцесса.Проверяющий) Тогда
		
		АвтоподстановкаПроверяющий = ШаблоныБизнесПроцессов.ПолучитьЗначениеАвтоподстановки(
			ШаблонБизнесПроцесса.Проверяющий, ЭтотОбъект);
		
		Если ТипЗнч(АвтоподстановкаПроверяющий) = Тип("СправочникСсылка.Сотрудники")
			Или ТипЗнч(АвтоподстановкаПроверяющий) = Тип("СправочникСсылка.Пользователи")
			Или ТипЗнч(АвтоподстановкаПроверяющий) = Тип("СправочникСсылка.ПолныеРоли") Тогда
			
			Проверяющий = АвтоподстановкаПроверяющий;
			
		ИначеЕсли ТипЗнч(АвтоподстановкаПроверяющий) = Тип("Структура") Тогда
			
			Проверяющий = АвтоподстановкаПроверяющий.РольИсполнителя;
			
		ИначеЕсли ТипЗнч(АвтоподстановкаПроверяющий) = Тип("Массив") Тогда 	
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Автоподстановка ""%1"" не может применяться для поля ""%2"", так как возвращает массив пользователей'"),
				ШаблонБизнесПроцесса.Проверяющий,
				НСтр("ru = 'Проверяющий'"));
			ВызватьИсключение ТекстСообщения;	
		КонецЕсли;
		
	Иначе
		Проверяющий = ШаблонБизнесПроцесса.Проверяющий;
	КонецЕсли;
	
	// трудозатраты
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда 
		ТрудозатратыПланПроверяющего = ШаблонБизнесПроцесса.ТрудозатратыПланПроверяющего;
		ТрудозатратыПланКонтролера = ШаблонБизнесПроцесса.ТрудозатратыПланКонтролера;
	КонецЕсли;
	
	РаботаСБизнесПроцессамиВызовСервера.СкопироватьЗначенияДопРеквизитов(ШаблонБизнесПроцесса, ЭтотОбъект);
	
	ДополнительныеСвойства.Вставить("ШаблонДляОтложенногоСтарта", ШаблонБизнесПроцесса);
	
КонецПроцедуры	

// Заполняет бизнес-процесс на основании шаблона бизнес-процесса, предмета и автора.
//
// Параметры
//  ШаблонБизнесПроцесса  - шаблон бизнес-процесса
//  Предмет - предмет бизнес-процесса
//  Автор  - автор
//
Процедура ЗаполнитьПоШаблонуИПредмету(ШаблонБизнесПроцесса, ПредметСобытия, АвторСобытия) Экспорт
	
	Мультипредметность.ЗаполнитьПредметыПроцессаПоШаблону(ШаблонБизнесПроцесса, ЭтотОбъект);
	Мультипредметность.ПередатьПредметыПроцессу(ЭтотОбъект, ПредметСобытия, Ложь, Истина);
	ЗаполнитьПоШаблону(ШаблонБизнесПроцесса);
	
	Проект = МультипредметностьПереопределяемый.ПолучитьОсновнойПроектПоПредметам(ПредметСобытия);
	
	Дата = ТекущаяДатаСеанса();
	Автор = АвторСобытия;
	
	Если Не ЗначениеЗаполнено(Проверяющий) Тогда
		Проверяющий = АвторСобытия;
	КонецЕсли;	
	
КонецПроцедуры	

// Заполняет бизнес-процесс на основании проектной задачи
//
//   ДанныеЗаполнения - СправочникСсылка.ПроектныеЗадачи - ссылка на проектную задачу
//
Процедура ЗаполнитьПоПроектнойЗадаче(ДанныеЗаполнения) Экспорт
	
	ПроектнаяЗадача = ДанныеЗаполнения;
	ДанныеПроектнойЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПроектнаяЗадача,
		"Владелец, Наименование, Описание, Предмет, Исполнители");
	
	Проект = ДанныеПроектнойЗадачи.Владелец;
	ДанныеПроекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Проект, "Руководитель");
	
	Автор = ДанныеПроекта.Руководитель;
	Проверяющий = ДанныеПроекта.Руководитель;
	
	ДобавлятьНаименованиеПредмета = РаботаСБизнесПроцессами.ДобавлятьНаименованиеПредмета(ЭтотОбъект);
	
	Если Не ЗначениеЗаполнено(Наименование)
			Или Наименование = НаименованиеПроцессаПоУмолчанию(ДобавлятьНаименованиеПредмета) Тогда
		Наименование = ДанныеПроектнойЗадачи.Наименование;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Описание) Тогда
		Описание = ДанныеПроектнойЗадачи.Описание;
	КонецЕсли;
	
	Если Предметы.Количество() = 0 Тогда
		Предмет = ДанныеПроектнойЗадачи.Предмет;
		
		Если Предмет <> Неопределено И Предметы.Найти(Предмет,"Предмет") = Неопределено Тогда
			СтрокаПредметов = Предметы.Добавить();
			СтрокаПредметов.РольПредмета = Перечисления.РолиПредметов.Основной;
			СтрокаПредметов.ИмяПредмета =  МультипредметностьВызовСервера.ПолучитьСсылкуНаИмяПредметаПоСсылкеНаПредмет(
				Предмет,
				Предметы.ВыгрузитьКолонку("ИмяПредмета"));
			СтрокаПредметов.Предмет = Предмет;
		КонецЕсли;
	КонецЕсли;
	
	// Заполнение сроков исполнения процесса
	СрокиПроектнойЗадачи = РаботаСПроектами.ПолучитьСрокиПроектнойЗадачи(ПроектнаяЗадача);
	СрокИсполненияУчастников = СрокиПроектнойЗадачи.ТекущийПланОкончание;
	СрокИсполненияПроцесса = СрокиПроектнойЗадачи.ТекущийПланОкончание;
	
	Если ЗначениеЗаполнено(Проверяющий)
			И СрокОбработкиРезультатов = Дата(1,1,1)
			И СрокОбработкиРезультатовДни = 0
			И СрокОбработкиРезультатовЧасы = 0
			И СрокОбработкиРезультатовМинуты = 0 Тогда
		СрокОбработкиРезультатов = СрокИсполненияУчастников;
		ВариантУстановкиСрокаОбработкиРезультатов = Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
	КонецЕсли;
	
	ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно;
	КоличествоИтераций = 1;
	
	Если Исполнители.Количество() = 0 Тогда
		Для Каждого СтрокаИсполнитель Из ДанныеПроектнойЗадачи.Исполнители.Выгрузить() Цикл
			Если ТипЗнч(СтрокаИсполнитель.Исполнитель) = Тип("СправочникСсылка.Пользователи")
					Или ТипЗнч(СтрокаИсполнитель.Исполнитель) = Тип("СправочникСсылка.ПолныеРоли") 
					Или ТипЗнч(СтрокаИсполнитель.Исполнитель) = Тип("СправочникСсылка.Сотрудники") Тогда
				НоваяСтрока = Исполнители.Добавить();
				НоваяСтрока.Исполнитель = СтрокаИсполнитель.Исполнитель;
				НоваяСтрока.ТрудозатратыПланИсполнителя = СтрокаИсполнитель.ТекущийПланТрудозатраты;
				НоваяСтрока.СрокИсполнения = СрокИсполненияУчастников;
				НоваяСтрока.ВариантУстановкиСрокаИсполнения = Перечисления.ВариантыУстановкиСрокаИсполнения.ТочныйСрок;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоРассмотрению(Рассмотрение) Экспорт
	
	Если ТипЗнч(Рассмотрение.Исполнитель) = Тип("СправочникСсылка.Сотрудники") Или
		ТипЗнч(Рассмотрение.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда 
		Автор = Рассмотрение.Исполнитель;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			| ЗадачаИсполнителя.Исполнитель
			|ИЗ
			| Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
			|ГДЕ
			| ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
			| И ЗадачаИсполнителя.ТочкаМаршрута = &ТочкаМаршрута";
		Запрос.УстановитьПараметр("БизнесПроцесс", Рассмотрение.Ссылка);
		Запрос.УстановитьПараметр("ТочкаМаршрута", БизнесПроцессы.Рассмотрение.ТочкиМаршрута.Рассмотреть);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Автор = Выборка.Исполнитель;
	КонецЕсли;
	
	Наименование = Рассмотрение.НаименованиеИсполнения;
	
	СрокОбработкиРезультатов = Рассмотрение.СрокОбработкиРезультатовИсполнения;
	СрокОбработкиРезультатовДни = Рассмотрение.СрокОбработкиРезультатовДниИсполнения;
	СрокОбработкиРезультатовЧасы = Рассмотрение.СрокОбработкиРезультатовЧасыИсполнения;
	СрокОбработкиРезультатовМинуты = Рассмотрение.СрокОбработкиРезультатовМинутыИсполнения;
	ВариантУстановкиСрокаОбработкиРезультатов = Рассмотрение.ВариантУстановкиСрокаОбработкиРезультатовИсполнения;
	
	СрокИсполненияПроцесса = Рассмотрение.СрокИсполненияПроцессаИсполнения;
	
	КоличествоИтераций = Рассмотрение.КоличествоИтерацийИсполнения;
	Если Не ЗначениеЗаполнено(КоличествоИтераций) Тогда
		КоличествоИтераций = 1;
	КонецЕсли;
	
	Описание = Рассмотрение.ОписаниеИсполнения;
	Важность = Рассмотрение.ВажностьИсполнения;
	
	Мультипредметность.ПередатьПредметыПроцессу(ЭтотОбъект, Рассмотрение);
	
	Проект = Рассмотрение.Проект;
	ПроектнаяЗадача = Рассмотрение.ПроектнаяЗадача;
	
	Проверяющий = Рассмотрение.ПроверяющийИсполнения;
	ИдентификаторПроверяющего = Рассмотрение.ИдентификаторПроверяющего;
	ТрудозатратыПланПроверяющего = Рассмотрение.ТрудозатратыПланПроверяющего;
	
	Контролер = Рассмотрение.КонтролерИсполнения;
	ИдентификаторКонтролера = Рассмотрение.ИдентификаторКонтролера;
	ТрудозатратыПланКонтролера = Рассмотрение.ТрудозатратыПланКонтролера;
	
	ВариантИсполнения = Рассмотрение.ВариантИсполнения;
	
	Исполнители.Загрузить(Рассмотрение.ИсполнителиИсполнения.Выгрузить());
	
КонецПроцедуры	

// Возвращает признак наличия метода ИзменитьРеквизитыНевыполненныхЗадач
//
Функция ЕстьМетодИзменитьРеквизитыНевыполненныхЗадач() Экспорт
	
	Возврат Истина;
	
КонецФункции

// Обновляет значения реквизитов невыполненных задач 
// при изменении реквизитов бизнес-процесса.
//
Процедура ИзменитьРеквизитыНевыполненныхЗадач(СтарыеУчастникиПроцесса, ПараметрыЗаписи) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	АвторИзменения = Неопределено;
	Если Не ПараметрыЗаписи.Свойство("АвторИзменения", АвторИзменения) Тогда
		АвторИзменения = ПользователиДокументооборот.ОлицетворяемыйПользователь();
	КонецЕсли;
	
	СтарыеИсполнители = СтарыеУчастникиПроцесса.Исполнители;
	
	СтарыйПроверяющий = СтарыеУчастникиПроцесса.Проверяющий;
		
	СтарыйКонтролер = СтарыеУчастникиПроцесса.Контролер;
		
	СтарыйСрокОбработкиРезультатов = СтарыеУчастникиПроцесса.СрокОбработкиРезультатов;
	СтарыйСрокОбработкиРезультатовДни = СтарыеУчастникиПроцесса.СрокОбработкиРезультатовДни;
	СтарыйСрокОбработкиРезультатовЧасы = СтарыеУчастникиПроцесса.СрокОбработкиРезультатовЧасы;
	СтарыйСрокОбработкиРезультатовМинуты = СтарыеУчастникиПроцесса.СрокОбработкиРезультатовМинуты;
	
	ИзмененПроверяющий = СтарыйПроверяющий <> Проверяющий;
		
	ИзмененКонтролер = СтарыйКонтролер <> Контролер;
		
	ДобавлятьНаименованиеПредмета = РаботаСБизнесПроцессами.ДобавлятьНаименованиеПредмета(ЭтотОбъект);
	
	НачатьТранзакцию();
	Попытка
		
		ПараметрыСеанса.ОтключитьОбновлениеЗадач = Истина;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Задачи.Ссылка,
		|	Задачи.ТочкаМаршрута,
		|	Задачи.Дата
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК Задачи
		|ГДЕ
		|	Задачи.БизнесПроцесс = &БизнесПроцесс
		|	И Задачи.ПометкаУдаления = ЛОЖЬ
		|	И Задачи.Выполнена = ЛОЖЬ";
		Запрос.УстановитьПараметр("БизнесПроцесс", Ссылка);
		Выборка = Запрос.Выполнить().Выбрать();
		
		ЗадачаКонтролера = Неопределено;
		ЗадачаПроверяющего = Неопределено;
		
		ЕстьНевыполненныеЗадачиВТочкеМаршрутаОтветственноеИсполнение = Ложь;
		ЕстьНевыполненныеЗадачиВТочкеМаршрутаИсполнить = Ложь;
		
		Пока Выборка.Следующий() Цикл
			
			ЗадачаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ЗадачаОбъект.ДополнительныеСвойства.Вставить("АвторИзменения", АвторИзменения);
			ЗаблокироватьДанныеДляРедактирования(ЗадачаОбъект.Ссылка);
			СтруктураПредметов = МультипредметностьКлиентСервер.ПолучитьМассивСтруктурПредметовОбъекта(ЗадачаОбъект);
			ПредметыСтрокой = МультипредметностьКлиентСервер.ПредметыСтрокой(СтруктураПредметов, Истина, Ложь);
			
			ЭтоЗадачаИсполнителя = Ложь;
			
			// Если сменилась "ответственность", то меняем точку маршрута.
			Если ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.ОтветственноеИсполнение
				Или ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Исполнить Тогда
				НайденнаяСтрока = Исполнители.Найти(Выборка.Ссылка, "ЗадачаИсполнителя");
				Если НайденнаяСтрока <> Неопределено Тогда
					Если НайденнаяСтрока.Ответственный Тогда
						Если ЗадачаОбъект.ТочкаМаршрута <> БизнесПроцессы.Исполнение.ТочкиМаршрута.ОтветственноеИсполнение Тогда
							
							Если ВариантИсполнения <> Перечисления.ВариантыМаршрутизацииЗадач.Параллельно Тогда
								ВызватьИсключение НСтр("ru = 'Порядок выполнения процесса: %1. 
													   |Изменение ответственного исполнителя невозможно.'");
							КонецЕсли;
							
							ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.ОтветственноеИсполнение;
						КонецЕсли;
					Иначе
						ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Исполнить;
					КонецЕсли;				
				КонецЕсли;
			КонецЕсли;
			
			Если ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Контролировать Тогда 
				
				ЗадачаКонтролера = ЗадачаОбъект;
				Если Не ЗначениеЗаполнено(Контролер) Тогда
					Продолжить;
				КонецЕсли;
				
				ЗадачаОбъект.Описание = Описание;
				
				ЗадачаОбъект.СрокИсполнения = СрокИсполненияПроцесса;
				
				Если ИзмененКонтролер Тогда
					
					Если ЗадачаОбъект.ПринятаКИсполнению Тогда
						ЗадачаОбъект.ПринятаКИсполнению = Ложь;
						ЗадачаОбъект.ДатаПринятияКИсполнению = '00010101';
					КонецЕсли;
					
					Если ТипЗнч(Контролер) = Тип("СправочникСсылка.Пользователи")
						Или ТипЗнч(Контролер) = Тип("СправочникСсылка.Сотрудники") Тогда
						ЗадачаОбъект.Исполнитель = Контролер;
						ЗадачаОбъект.РольИсполнителя = Неопределено;
					Иначе	
						ЗадачаОбъект.Исполнитель = Неопределено;
						ЗадачаОбъект.РольИсполнителя = Контролер;
					КонецЕсли;
					
				КонецЕсли;
			
				Если СтрНачинаетсяС(НаименованиеПроцессаПоУмолчанию(ДобавлятьНаименованиеПредмета), Наименование)
					И Не ПустаяСтрока(ПредметыСтрокой) Тогда
					
					ЗадачаОбъект.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Контролировать исполнение %1'",
							ЛокализацияКонфигурации.КодЯзыкаИсполнителяЗадачи(ЗадачаОбъект)),
						ПредметыСтрокой);
				Иначе
					ЗадачаОбъект.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Контролировать: %1'",
							ЛокализацияКонфигурации.КодЯзыкаИсполнителяЗадачи(ЗадачаОбъект)),
						Наименование);
				КонецЕсли;
					
			ИначеЕсли ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Проверить Тогда 
				
				ЗадачаПроверяющего = ЗадачаОбъект;
				Если Не ЗначениеЗаполнено(Проверяющий) Тогда
					Продолжить;
				КонецЕсли;
				
				Если ИзмененПроверяющий Тогда
					
					Если ЗадачаОбъект.ПринятаКИсполнению Тогда
						ЗадачаОбъект.ПринятаКИсполнению = Ложь;
						ЗадачаОбъект.ДатаПринятияКИсполнению = '00010101';
					КонецЕсли;
					
					Если ТипЗнч(Проверяющий) = Тип("СправочникСсылка.Сотрудники")
						Или ТипЗнч(Проверяющий) = Тип("СправочникСсылка.Пользователи") Тогда
						ЗадачаОбъект.Исполнитель = Проверяющий;
						ЗадачаОбъект.РольИсполнителя = Неопределено;
					Иначе	
						ЗадачаОбъект.Исполнитель = Неопределено;
						ЗадачаОбъект.РольИсполнителя = Проверяющий;
					КонецЕсли;
					
				КонецЕсли;
				
				НаименованиеПроцесса = Наименование;
				Если СтрНачинаетсяС(НаименованиеПроцессаПоУмолчанию(ДобавлятьНаименованиеПредмета), Наименование)
					И Не ПустаяСтрока(ПредметыСтрокой) Тогда
					
					Наименование = СтрШаблон(
						НСтр("ru = 'Проверить исполнение %1'",
							ЛокализацияКонфигурации.КодЯзыкаИсполнителяЗадачи(ЗадачаОбъект)),
						ПредметыСтрокой);
					
				ИначеЕсли СтрНачинаетсяС(Наименование, НСтр("ru = 'Исполнить пункт №'")) Тогда
		
					Наименование = СтрЗаменить(Наименование, 
						НСтр("ru = 'Исполнить пункт №'"),
						НСтр("ru = 'Проверить исполнение пункта №'"));
				Иначе
					Наименование = СтрШаблон(
						НСтр("ru = 'Проверить: %1'",
							ЛокализацияКонфигурации.КодЯзыкаИсполнителяЗадачи(ЗадачаОбъект)), 
						Наименование);
				КонецЕсли;
					
				ЗаполнитьНаименованиеИОписаниеЗадачи(ЗадачаОбъект, Ложь);
				Наименование = НаименованиеПроцесса;
				СрокиИсполненияПроцессов.ЗаполнитьСрокИсполненияЗадачи(
					ЗадачаОбъект,
					ВариантУстановкиСрокаОбработкиРезультатов,
					СрокОбработкиРезультатов,
					СрокОбработкиРезультатовДни,
					СрокОбработкиРезультатовЧасы,
					СрокОбработкиРезультатовМинуты);
				
			ИначеЕсли ЗадачаОбъект.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.ОтветственноеИсполнение Тогда 
				
				НайденнаяСтрока = Исполнители.Найти(Выборка.Ссылка, "ЗадачаИсполнителя");
				Если НайденнаяСтрока <> Неопределено Тогда 
					ЗаполнитьНаименованиеИОписаниеЗадачи(ЗадачаОбъект, ДобавлятьНаименованиеПредмета, НайденнаяСтрока);	
				Иначе
					ЗаполнитьНаименованиеИОписаниеЗадачи(ЗадачаОбъект, ДобавлятьНаименованиеПредмета);	
				КонецЕсли;
				
				ЕстьНевыполненныеЗадачиВТочкеМаршрутаОтветственноеИсполнение = Истина;
				
				ЭтоЗадачаИсполнителя = Истина;
				
			Иначе
				
				НайденнаяСтрока = Исполнители.Найти(Выборка.Ссылка, "ЗадачаИсполнителя");
				Если НайденнаяСтрока <> Неопределено Тогда 
					ЗаполнитьНаименованиеИОписаниеЗадачи(ЗадачаОбъект, ДобавлятьНаименованиеПредмета, НайденнаяСтрока);				
				Иначе
					ЗаполнитьНаименованиеИОписаниеЗадачи(ЗадачаОбъект, ДобавлятьНаименованиеПредмета);
				КонецЕсли;
				
				
				ЕстьНевыполненныеЗадачиВТочкеМаршрутаИсполнить = Истина;
				
				ЭтоЗадачаИсполнителя = Истина;
				
			КонецЕсли;
			
			Если ЭтоЗадачаИсполнителя Тогда
				СтрИсполнителя = Исполнители.Найти(ЗадачаОбъект.Ссылка, "ЗадачаИсполнителя");
				Если СтрИсполнителя <> Неопределено Тогда
					
					СрокиИсполненияПроцессов.ЗаполнитьСрокИсполненияЗадачи(
						ЗадачаОбъект,
						СтрИсполнителя.ВариантУстановкиСрокаИсполнения,
						СтрИсполнителя.СрокИсполнения,
						СтрИсполнителя.СрокИсполненияДни,
						СтрИсполнителя.СрокИсполненияЧасы,
						СтрИсполнителя.СрокИсполненияМинуты);
					
				КонецЕсли;
			КонецЕсли;
			
			ЗадачаОбъект.Важность = Важность;
			ЗадачаОбъект.Автор 	  = Автор;
			
			ЗадачаОбъект.Проект = Проект;
			ЗадачаОбъект.ПроектнаяЗадача = ПроектнаяЗадача;
			
			ПереносСроковВыполненияЗадач.ПередатьПричинуИЗаявкуНаПереносаСрока(ЗадачаОбъект, ДополнительныеСвойства);
			
			ЗадачаОбъект.Записать();
		КонецЦикла;
		
		Если ЕстьНевыполненныеЗадачиВТочкеМаршрутаИсполнить
			Или ЕстьНевыполненныеЗадачиВТочкеМаршрутаОтветственноеИсполнение Тогда
		
			// обновление исполнителей
			ДобавленныеСтроки = Новый Массив;
			УдаленныеСтроки   = Новый Массив;
			ИзмененныеСтроки  = Новый Массив;
			
			КоличествоСтрок = СтарыеИсполнители.Количество();
			Для Инд = 1 По КоличествоСтрок Цикл
				Строка = СтарыеИсполнители[КоличествоСтрок-Инд];
				Если Строка.Пройден Или Не ЗначениеЗаполнено(Строка.ЗадачаИсполнителя) Тогда 
					СтарыеИсполнители.Удалить(Строка);
				КонецЕсли;	
			КонецЦикла;	
			
			НовыеИсполнители = ЭтотОбъект.Исполнители.Выгрузить();
			КоличествоСтрок = НовыеИсполнители.Количество();
			Для Инд = 1 По КоличествоСтрок Цикл
				Строка = НовыеИсполнители[КоличествоСтрок-Инд];
				Если Строка.Пройден Тогда
					НовыеИсполнители.Удалить(Строка);
				КонецЕсли;
			КонецЦикла;	
			
			
			КоличествоСтрок = НовыеИсполнители.Количество();
			Для Инд = 0 По КоличествоСтрок-1 Цикл
				Строка = НовыеИсполнители[Инд];
				
				Если Инд > 0 Тогда 
					ПредыдущаяСтрока = НовыеИсполнители[Инд-1];
				Иначе
					ПредыдущаяСтрока = Неопределено;
				КонецЕсли;	
				
				Если Не ЗначениеЗаполнено(Строка.ЗадачаИсполнителя) Тогда 
					
					Если ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно Тогда 
						ДобавленныеСтроки.Добавить(Строка);
					ИначеЕсли ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Смешанно 
							И Строка.ПорядокИсполнения = Перечисления.ПорядокВыполненияЗадач.ВместеСПредыдущим Тогда 	
						
						Если ПредыдущаяСтрока = Неопределено 
							Или ЗначениеЗаполнено(ПредыдущаяСтрока.ЗадачаИсполнителя) 
							Или ДобавленныеСтроки.Найти(ПредыдущаяСтрока) <> Неопределено Тогда 
						
							ДобавленныеСтроки.Добавить(Строка);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;	
			
			Для Каждого Строка Из НовыеИсполнители Цикл
				Если Не ЗначениеЗаполнено(Строка.ЗадачаИсполнителя) Тогда 
					Продолжить;
				КонецЕсли;	
				
				НайденнаяСтрока = СтарыеИсполнители.Найти(Строка.ЗадачаИсполнителя, "ЗадачаИсполнителя");
				Если НайденнаяСтрока = Неопределено Тогда 
					Продолжить;
				КонецЕсли;	
					
				Если Строка.Исполнитель <> НайденнаяСтрока.Исполнитель  Тогда 
					ИзмененныеСтроки.Добавить(Строка);
				КонецЕсли;
			КонецЦикла;	
			
			Для Каждого Строка Из СтарыеИсполнители Цикл
				НайденнаяСтрока = НовыеИсполнители.Найти(Строка.ЗадачаИсполнителя, "ЗадачаИсполнителя");
			    Если НайденнаяСтрока = Неопределено Тогда 
					УдаленныеСтроки.Добавить(Строка);
				КонецЕсли;
			КонецЦикла;	
			
			// добавленные строки
			Для Каждого Строка Из ДобавленныеСтроки Цикл
							
				Если Строка.Ответственный Тогда
					ТочкаМаршрутаЗадачи = БизнесПроцессы.Исполнение.ТочкиМаршрута.ОтветственноеИсполнение;
				Иначе
					ТочкаМаршрутаЗадачи = БизнесПроцессы.Исполнение.ТочкиМаршрута.Исполнить;
				КонецЕсли;
				Задача = СоздатьЗадачу(Строка, ТочкаМаршрутаЗадачи, ДобавлятьНаименованиеПредмета);
				Задача.ДополнительныеСвойства.Вставить("АвторИзменения", АвторИзменения);
				Задача.Записать();
				
				НайденнаяСтрока = ЭтотОбъект.Исполнители.Найти(Строка.НомерСтроки, "НомерСтроки");
				Если НайденнаяСтрока <> Неопределено Тогда 
					НайденнаяСтрока.ЗадачаИсполнителя = Задача.Ссылка;
				КонецЕсли;
				
				Если Строка.ИдентификаторИсполнителя = УникальныйИдентификаторПустой() Тогда
					Строка.ИдентификаторИсполнителя = Новый УникальныйИдентификатор();
				КонецЕсли;
				
				НоваяСтрока = РезультатыИсполнения.Добавить();
				НоваяСтрока.НомерИтерации = НомерИтерации;
				НоваяСтрока.ЗадачаИсполнителя = Задача.Ссылка;
				НоваяСтрока.ИдентификаторИсполнителя = Строка.ИдентификаторИсполнителя;
				
			КонецЦикла;
			
			Если ДобавленныеСтроки.Количество() > 0 Тогда 
				Записать();
			КонецЕсли;
			
			// измененные строки
			Для Каждого Строка Из ИзмененныеСтроки Цикл	
				Задача = Строка.ЗадачаИсполнителя.ПолучитьОбъект();
				Задача.ДополнительныеСвойства.Вставить("АвторИзменения", АвторИзменения);
				ЗаблокироватьДанныеДляРедактирования(Задача.Ссылка);
				
				Если Задача.ПринятаКИсполнению Тогда
					Задача.ПринятаКИсполнению = Ложь;
					Задача.ДатаПринятияКИсполнению = '00010101';
				КонецЕсли;
				
				Если ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.Сотрудники")
					Или ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
					Задача.Исполнитель = Строка.Исполнитель;
					Задача.РольИсполнителя = Неопределено;
				Иначе	
					Задача.Исполнитель = Неопределено;
					Задача.РольИсполнителя = Строка.Исполнитель;
				КонецЕсли;
				
				Задача.Записать();
			КонецЦикла;

			// удаленные строки
			Если УдаленныеСтроки.Количество() > 0 Тогда 
			
				Для Каждого Строка Из УдаленныеСтроки Цикл	
					Задача = Строка.ЗадачаИсполнителя.ПолучитьОбъект();
					Задача.ДополнительныеСвойства.Вставить("АвторИзменения", АвторИзменения);
					Задача.ИсключитьИзПроцесса();
				КонецЦикла;
				Прочитать();
				
				Для Каждого Строка Из УдаленныеСтроки Цикл	
					НайденнаяСтрока = РезультатыИсполнения.Найти(Строка.ЗадачаИсполнителя, "ЗадачаИсполнителя");
					Если НайденнаяСтрока <> Неопределено Тогда 
						РезультатыИсполнения.Удалить(НайденнаяСтрока);
					КонецЕсли;
				КонецЦикла;
				Записать();
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТребуетсяПрочитать = Ложь;
		Если Не ЗначениеЗаполнено(Контролер) И ЗадачаКонтролера <> Неопределено Тогда
			ЗадачаКонтролера.ИсключитьИзПроцесса();
			ТребуетсяПрочитать = Истина;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Проверяющий) И ЗадачаПроверяющего <> Неопределено Тогда
			ЗадачаПроверяющего.ИсключитьИзПроцесса();
			ТребуетсяПрочитать = Истина;
		КонецЕсли;
		
		Если ТребуетсяПрочитать Тогда
			Прочитать();
		КонецЕсли;
		
		Если Не (ДополнительныеСвойства.Свойство("ОтключитьОбновлениеЗадач")
			И ДополнительныеСвойства.ОтключитьОбновлениеЗадач) Тогда
			ИнтеграцияЗадач.ОбновитьЗадачуПоИсточнику(Ссылка);
		КонецЕсли;
		ПараметрыСеанса.ОтключитьОбновлениеЗадач = Ложь;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		ОтменитьТранзакцию();
		ПараметрыСеанса.ОтключитьОбновлениеЗадач = Ложь;
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры  

// Возвращает описание задачи, специфичное для бизнес-процесса
Функция ПолучитьОписаниеУведомленияЗадачи(ЗадачаПроцесса, КодЯзыкаПолучателя) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Задача = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ЗадачаПроцесса,
		"Ссылка, БизнесПроцесс, ТочкаМаршрута, Выполнена, Исполнитель");
	
	Если Задача.БизнесПроцесс <> Ссылка Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = Неопределено;
	
	Если Задача.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Исполнить Тогда
		
		НомерИтерацииЗадачи = Неопределено;
		НайденнаяСтрока = РезультатыИсполнения.Найти(Задача.Ссылка, "ЗадачаИсполнителя");
		Если НайденнаяСтрока <> Неопределено Тогда 
			НомерИтерацииЗадачи = НайденнаяСтрока.НомерИтерации - 1;
		КонецЕсли;
		
		СтрокиИтерации =
			РезультатыИсполнения.НайтиСтроки(Новый Структура("НомерИтерации", НомерИтерацииЗадачи));
		Для Каждого Строка Из СтрокиИтерации Цикл
			
			Если Строка.ЗадачаИсполнителя.Исполнитель = Задача.Исполнитель Тогда
				Результат = НСтр("ru = 'Задача была возвращена на доработку'", КодЯзыкаПолучателя);
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли Задача.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Проверить Тогда
		
		Если Задача.Выполнена Тогда
			
			ЕстьВозвраты = Ложь;
			
			СтрокиПроверки = РезультатыПроверки.НайтиСтроки(
				Новый Структура("ЗадачаПроверяющего", Задача.Ссылка));
			Для Каждого Строка Из СтрокиПроверки Цикл
				Если Строка.ОтправленоНаДоработку Тогда
					ЕстьВозвраты = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Если ЕстьВозвраты Тогда
				Результат = НСтр("ru = 'Результат проверки: Отправлено на доработку'", КодЯзыкаПолучателя);
			Иначе
				Результат = НСтр("ru = 'Результат проверки: Проверено'", КодЯзыкаПолучателя);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы со стартом процесса

Процедура ОтложенныйСтарт() Экспорт
	
	СтартПроцессовСервер.СтартоватьПроцессОтложенно(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОтключитьОтложенныйСтарт() Экспорт
	
	СтартПроцессовСервер.ОтключитьОтложенныйСтарт(ЭтотОбъект);
	
КонецПроцедуры

// Обновляет реквизиты активного процесса по переданной структуре
// Параметры:
//  ДанныеОбновления - Структура - см. СтруктураДанныхДляЗаполнения()
//
Процедура ОбновитьАктивныйПроцесс(ДанныеОбновления) Экспорт 
	
	КэшИсполнителей = Новый Соответствие;
	Для Каждого Исполнитель Из Исполнители Цикл
		КэшИсполнителей.Вставить(Исполнитель.ИдентификаторИсполнителя, Исполнитель);
	КонецЦикла;
	
	Если ДанныеОбновления.Важность <> Важность Тогда
		Важность = ДанныеОбновления.Важность;
	КонецЕсли;
	
	Если ДанныеОбновления.Наименование <> Наименование Тогда
		Наименование = ДанныеОбновления.Наименование;
	КонецЕсли;
	
	Если ДанныеОбновления.Описание <> Описание Тогда
		Описание = ДанныеОбновления.Описание;
	КонецЕсли;
	
	НовыеИсполнители = Исполнители.ВыгрузитьКолонки();
	Для Каждого Исполнитель Из ДанныеОбновления.Исполнители Цикл
		СтрокаИсполнителя = НовыеИсполнители.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаИсполнителя, Исполнитель);
		
		//Если такой исполнитель уже был в таблице, воссстанавливаем для него этапы и задачи
		СтарыйИсполнитель = КэшИсполнителей.Получить(Исполнитель.ИдентификаторИсполнителя);
		Если СтарыйИсполнитель <> Неопределено Тогда 
			СтрокаИсполнителя.Пройден = СтарыйИсполнитель.Пройден;
			СтрокаИсполнителя.ЗадачаИсполнителя = СтарыйИсполнитель.ЗадачаИсполнителя;
		КонецЕсли;
	КонецЦикла;
	
	ЕстьОтличия = Ложь;
	СрокИзменен = Ложь;
	
	//Если есть отличия исполнителей в старой и новой таблице, замещаем старую новой
	Если Исполнители.Количество() = ДанныеОбновления.Исполнители.Количество() Тогда
		Для Каждого Исполнитель Из ДанныеОбновления.Исполнители Цикл
			ИндексТекущего = ДанныеОбновления.Исполнители.Индекс(Исполнитель);
			СтарыйИсполнитель = Исполнители[ИндексТекущего];
			СрокИзменен = СтарыйИсполнитель.ВариантУстановкиСрокаИсполнения <> Исполнитель.ВариантУстановкиСрокаИсполнения
				Или СтарыйИсполнитель.СрокИсполнения <> Исполнитель.СрокИсполнения 
				Или СтарыйИсполнитель.СрокИсполненияДни <> Исполнитель.СрокИсполненияДни 
				Или СтарыйИсполнитель.СрокИсполненияЧасы <> Исполнитель.СрокИсполненияЧасы 
				Или СтарыйИсполнитель.СрокИсполненияМинуты <> Исполнитель.СрокИсполненияМинуты 
				Или СтарыйИсполнитель.ПорядокИсполнения <> Исполнитель.ПорядокИсполнения;
				
			Если СтарыйИсполнитель.Исполнитель <> Исполнитель.Исполнитель 
				Или СтарыйИсполнитель.ИдентификаторИсполнителя <> Исполнитель.ИдентификаторИсполнителя 
				Или СрокИзменен
				Или СтарыйИсполнитель.НаименованиеЗадачи <> Исполнитель.НаименованиеЗадачи
				Или СтарыйИсполнитель.Описание <> Исполнитель.Описание
				Или СтарыйИсполнитель.Ответственный <> Исполнитель.Ответственный Тогда
					ЕстьОтличия = Истина;
					Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		СрокИзменен = Истина;
		ЕстьОтличия = Истина;
	КонецЕсли;
	
	Если ЕстьОтличия Тогда
		Исполнители.Очистить();
		Исполнители.Загрузить(НовыеИсполнители);
	КонецЕсли;
	
	Если ДанныеОбновления.Автор <> Автор Тогда
		Автор = ДанныеОбновления.Автор;
	КонецЕсли;
	
	Если ДанныеОбновления.ИдентификаторКонтролера <> ИдентификаторКонтролера Тогда
		ИдентификаторКонтролера = ДанныеОбновления.ИдентификаторКонтролера;
	КонецЕсли;
	
	Если ДанныеОбновления.Проверяющий <> Проверяющий Тогда
		Проверяющий = ДанныеОбновления.Проверяющий;
	КонецЕсли;
	
	Если ДанныеОбновления.ИдентификаторПроверяющего <> ИдентификаторПроверяющего Тогда
		ИдентификаторПроверяющего = ДанныеОбновления.ИдентификаторПроверяющего;
	КонецЕсли;
	
	Если ДанныеОбновления.ВариантУстановкиСрокаОбработкиРезультатов <>
		ВариантУстановкиСрокаОбработкиРезультатов Тогда
		ВариантУстановкиСрокаОбработкиРезультатов = 
			ДанныеОбновления.ВариантУстановкиСрокаОбработкиРезультатов;
	КонецЕсли;
	
	Если ДанныеОбновления.СрокОбработкиРезультатов <> СрокОбработкиРезультатов Тогда
		СрокОбработкиРезультатов = ДанныеОбновления.СрокОбработкиРезультатов;
		СрокИзменен = Истина;
	КонецЕсли;
	
	Если ДанныеОбновления.СрокОбработкиРезультатовДни <> СрокОбработкиРезультатовДни Тогда
		СрокОбработкиРезультатовДни = ДанныеОбновления.СрокОбработкиРезультатовДни;
		СрокИзменен = Истина;
	КонецЕсли;
	
	Если ДанныеОбновления.СрокОбработкиРезультатовЧасы <> СрокОбработкиРезультатовЧасы Тогда
		СрокОбработкиРезультатовЧасы = ДанныеОбновления.СрокОбработкиРезультатовЧасы;
		СрокИзменен = Истина;
	КонецЕсли;
	
	Если ДанныеОбновления.СрокОбработкиРезультатовМинуты <> СрокОбработкиРезультатовМинуты Тогда
		СрокОбработкиРезультатовМинуты = ДанныеОбновления.СрокОбработкиРезультатовМинуты;
		СрокИзменен = Истина;
	КонецЕсли;
	
	Если ДанныеОбновления.КоличествоИтераций <> КоличествоИтераций Тогда
		КоличествоИтераций = Макс(ДанныеОбновления.КоличествоИтераций, НомерИтерации);
	ИначеЕсли КоличествоИтераций < НомерИтерации Тогда
		КоличествоИтераций = НомерИтерации;
	КонецЕсли;
	
	Если ДанныеОбновления.ТрудозатратыПланКонтролера <> ТрудозатратыПланКонтролера Тогда
		ТрудозатратыПланКонтролера = ДанныеОбновления.ТрудозатратыПланКонтролера;
	КонецЕсли;
	
	Если ДанныеОбновления.ТрудозатратыПланПроверяющего <> ТрудозатратыПланПроверяющего Тогда
		ТрудозатратыПланПроверяющего = ДанныеОбновления.ТрудозатратыПланПроверяющего;
	КонецЕсли;
	
	Если ДанныеОбновления.ВедущаяЗадача <> ВедущаяЗадача Тогда
		ВедущаяЗадача = ДанныеОбновления.ВедущаяЗадача;
	КонецЕсли;
	
	Если СрокИзменен Тогда
		ПараметрыДляРасчетаСроков = СрокиИсполненияПроцессов.ПараметрыДляРасчетаСроков();
		ПараметрыДляРасчетаСроков.ДатаОтсчета = 
			СрокиИсполненияПроцессов.ДатаОтсчетаДляРасчетаСроковПроцесса(ЭтотОбъект,
				ПредопределенноеЗначение("БизнесПроцесс.Исполнение.ТочкаМаршрута.Проверить"));
		ПараметрыДляРасчетаСроков.ТекущаяИтерация = НомерИтерации;
		ПараметрыДляРасчетаСроков.Смещение = СрокиИсполненияПроцессовКорп.СмещенияДатыОтсчета(Ссылка);
		СрокиИсполненияПроцессов.РассчитатьСрокиПроцессаИсполнения(ЭтотОбъект, ПараметрыДляРасчетаСроков);
	КонецЕсли;
	
	Если Модифицированность() Тогда
		СтарыеУчастникиПроцесса = БизнесПроцессыИЗадачиВызовСервера.ТекущиеУчастникиПроцесса(Ссылка);
		
		НачатьТранзакцию();
		Попытка
			
			ПараметрыСеанса.ОтключитьОбновлениеЗадач = Истина;
			
			Записать();
			ИзменитьРеквизитыНевыполненныхЗадач(СтарыеУчастникиПроцесса, Новый Структура);
			
			ИнтеграцияЗадач.ОбновитьЗадачуПоИсточнику(Ссылка);
			ПараметрыСеанса.ОтключитьОбновлениеЗадач = Ложь;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ПараметрыСеанса.ОтключитьОбновлениеЗадач = Ложь;
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполнит структуру возврата вместо диалога настроек процесса
//
//Параметры
//  РезультатВыполнения
//
Процедура ЗаполнитьРезультатНастроекПроцесса(СтруктураРезультата) Экспорт
	
	ВариантыУстановкиСрока = СрокиИсполненияПроцессовКлиентСервер.ВариантыУстановкиСрокаИсполнения();
	
	СтруктураРезультата.Вставить("Исполнители", Новый Массив);
	СтруктураРезультата.Вставить("РезультатыПроверки", Новый Массив);
	СтруктураРезультата.Вставить("СрокИсполненияПроцесса", Дата(1,1,1));
	СтруктураРезультата.Вставить("СрокОбработкиРезультатов", Дата(1,1,1));
	СтруктураРезультата.Вставить("СрокОбработкиРезультатовДни", 0);
	СтруктураРезультата.Вставить("СрокОбработкиРезультатовЧасы", 0);
	СтруктураРезультата.Вставить("СрокОбработкиРезультатовМинуты", 0);
	СтруктураРезультата.Вставить("ВариантУстановкиСрокаОбработкиРезультатов",
		ВариантыУстановкиСрока.ОтносительныйСрок);
	СтруктураРезультата.Вставить("КоличествоИтераций", 0);
	СтруктураРезультата.Вставить("ПричинаПереносаСрока", "");
	
	ПоляСтр = ПоляТаблицыПроцесса("Исполнители");
	Для Каждого СтрИсполнитель Из Исполнители Цикл
		СтруктураСтр = Новый Структура(ПоляСтр);
		ЗаполнитьЗначенияСвойств(СтруктураСтр, СтрИсполнитель);
		СтруктураРезультата.Исполнители.Добавить(СтруктураСтр);
	КонецЦикла;
	
	ПоляСтр = ПоляТаблицыПроцесса("РезультатыПроверки");
	Для Каждого СтрРезультат Из РезультатыПроверки Цикл
		СтруктураСтр = Новый Структура(ПоляСтр);
		ЗаполнитьЗначенияСвойств(СтруктураСтр, СтрРезультат);
		СтруктураСтр.ОтправленоНаДоработку = Истина;
		СтруктураРезультата.РезультатыПроверки.Добавить(СтруктураСтр);
	КонецЦикла;
	
	СтруктураРезультата.СрокИсполненияПроцесса = СрокИсполненияПроцесса;
	СтруктураРезультата.СрокОбработкиРезультатов = СрокОбработкиРезультатов;
	СтруктураРезультата.СрокОбработкиРезультатовДни = СрокОбработкиРезультатовДни;
	СтруктураРезультата.СрокОбработкиРезультатовЧасы = СрокОбработкиРезультатовЧасы;
	СтруктураРезультата.СрокОбработкиРезультатовМинуты = СрокОбработкиРезультатовМинуты;
	СтруктураРезультата.ВариантУстановкиСрокаОбработкиРезультатов = ВариантУстановкиСрокаОбработкиРезультатов;
	СтруктураРезультата.КоличествоИтераций = КоличествоИтераций;
	
КонецПроцедуры	

#КонецОбласти

#Область ПрограммныйИнтерфейс_ПоддержкаКомплексныхПроцессов

// Формирует шаблон по процессу
// Параметры:
//	ВладелецШаблона - ссылка на шаблон комплексного процесса или комплексный процесс, который будет владельцем
//		создаваемого шаблона процесса
// Возвращает:
//	Ссылка на созданный шаблон
Функция СоздатьШаблонПоПроцессу(ВладелецШаблона = Неопределено) Экспорт
	
	ИмяТипа = БизнесПроцессы[ЭтотОбъект.Метаданные().Имя].ТипШаблона();	
	ШаблонОбъект = Справочники[СтрЗаменить(ИмяТипа, "Справочник.", "")].СоздатьЭлемент();
	
	// Перенос базовых реквизитов процесса
	ШаблонОбъект.Наименование = Наименование;
	ШаблонОбъект.НаименованиеБизнесПроцесса = Наименование;
	ШаблонОбъект.Описание = Описание;
	ШаблонОбъект.Важность = Важность;
	ШаблонОбъект.Автор = Сотрудники.ОсновнойСотрудник();
	ШаблонОбъект.ВладелецШаблона = ВладелецШаблона;
	ШаблонОбъект.ВариантИсполнения = ВариантИсполнения;
	ШаблонОбъект.Ответственный = Сотрудники.ОсновнойСотрудник();
	
	ШаблонОбъект.Предметы.Загрузить(Предметы.Выгрузить());
	Для Каждого СтрокаПредмета Из ШаблонОбъект.Предметы Цикл
		Если ЗначениеЗаполнено(СтрокаПредмета.Предмет) Тогда
			ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СтрокаПредмета.Предмет.Метаданные().ПолноеИмя()).ПустаяСсылка();
		КонецЕсли;
	КонецЦикла;
	ШаблонОбъект.ПредметыЗадач.Загрузить(ПредметыЗадач.Выгрузить());
	
	// Перенос срока обработки результатов
	ШаблонОбъект.СрокОбработкиРезультатов = СрокОбработкиРезультатов;
	ШаблонОбъект.СрокОбработкиРезультатовДни = СрокОбработкиРезультатовДни;
	ШаблонОбъект.СрокОбработкиРезультатовЧасы = СрокОбработкиРезультатовЧасы;
	ШаблонОбъект.СрокОбработкиРезультатовМинуты = СрокОбработкиРезультатовМинуты;
	ШаблонОбъект.ВариантУстановкиСрокаОбработкиРезультатов =
		Перечисления.ВариантыУстановкиСрокаИсполнения.ОтносительныйСрок;
	
	// Перенос количества итераций
	ШаблонОбъект.КоличествоИтераций = КоличествоИтераций;
	
	// Перенос исполнителей
	ШаблонОбъект.Исполнители.Очистить();
	Для Каждого Исполнитель Из Исполнители Цикл
		ИсполнительШаблона = ШаблонОбъект.Исполнители.Добавить();
		ЗаполнитьЗначенияСвойств(
			ИсполнительШаблона,
			Исполнитель,
			"Исполнитель, Описание, 
			|Ответственный, НаименованиеЗадачи, ПорядокИсполнения, СрокИсполненияДни, СрокИсполненияЧасы, СрокИсполненияМинуты");
			
		ИсполнительШаблона.ВариантУстановкиСрокаИсполнения =
			Перечисления.ВариантыУстановкиСрокаИсполнения.ОтносительныйСрок;
	КонецЦикла;
	
	// Перенос проверяющего
	ШаблонОбъект.Проверяющий = Проверяющий;
	
	// Перенос контролера
	ШаблонОбъект.Контролер = Контролер;	
		
	ШаблонОбъект.Записать();
	Возврат ШаблонОбъект.Ссылка;
	
КонецФункции

// Дополняет описание процесса общим описанием
Процедура ДополнитьОписание(ОбщееОписание) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ОбщееОписание) Тогда
		Возврат;
	КонецЕсли;
	Описание = ОбщееОписание + Символы.ПС + Описание;
	
КонецПроцедуры

// Проверяет что заполнены поля шаблона
Функция ПолучитьСписокНезаполненныхПолейНеобходимыхДляСтарта() Экспорт
	
	МассивПолей = Новый Массив;
	
	Если Исполнители.Количество() = 0 Тогда
		МассивПолей.Добавить("Исполнители");
	КонецЕсли;	
	
	Возврат МассивПолей;
	
КонецФункции	

#КонецОбласти

#Область ПрограммныйИнтерфейс_Предметы

// Проверяет права участников процесса на предметы этого процесса.
// Если у участников процесса отсутствуют права на предметы, то выводятся сообщения с привязкой
// к карточке процесса.
//
// Параметры
//  ПроцессОбъект - БизнесПроцессОбъект - процесс.
//  Отказ - Булево - в этот параметр помещается значение Истина, если кто-то из участников не имеет
//                   прав на предметы.
//  ПроверятьПриИзменении - Булево - если указано значение Истина, то проверка выполняется только если
//                          изменены участники или предметы процесса, иначе проверка выполняется всегда.
//
Процедура ПроверитьПраваУчастниковПроцессаНаПредметы(
	ПроцессОбъект, Отказ, ПроверятьПриИзменении) Экспорт
	
	Мультипредметность.ПроверитьПраваУчастниковПроцессаНаПредметы(
		ПроцессОбъект, Отказ, ПроверятьПриИзменении);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриКопировании(ОбъектКопирования)
	
	РаботаСБизнесПроцессами.ПриКопированииБизнесПроцесса(ОбъектКопирования);
	
	Дата = ТекущаяДатаСеанса();
	Автор = Сотрудники.ОсновнойСотрудник();
	ДатаНачала = '00010101';
	ДатаЗавершения = '00010101';
	НомерИтерации = 0;
	РезультатыИсполнения.Очистить();
	РезультатыПроверки.Очистить();
	
	Для Каждого Строка Из Исполнители Цикл     
		Строка.ЗадачаИсполнителя = Неопределено;
		Строка.Пройден = Ложь;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если ЭтоНовый() Тогда 
		Дата = ТекущаяДатаСеанса();
		Важность = Перечисления.ВариантыВажностиОбъектов.Обычная;
		НомерИтерации = 0;
		Проверяющий = Сотрудники.ОсновнойСотрудник();
		ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно;		
		Если Не ЗначениеЗаполнено(Автор) Тогда
			Автор = Сотрудники.ОсновнойСотрудник();
		КонецЕсли;		
		Если Не ЗначениеЗаполнено(Проект) Тогда 
			Проект = РаботаСПроектами.ПолучитьПроектПоУмолчанию();
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеЗаполнения <> Неопределено И ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Тогда
		Мультипредметность.ПередатьПредметыПроцессу(ЭтотОбъект, ДанныеЗаполнения, Ложь, Истина);
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		ЗадачаСсылка = ДанныеЗаполнения;
		ЗаполнитьБизнесПроцессПоЗадаче(ЗадачаСсылка);
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда 
		Описание = "";
		Резолюции = РаботаСРезолюциями.ПолучитьРезолюции(ДанныеЗаполнения);
		Если Резолюции.Количество() > 0 Тогда
			Описание = Резолюции[0].ТекстРезолюции;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если ДанныеЗаполнения.Свойство("ВедущаяЗадача") Тогда
			ВедущаяЗадача = ДанныеЗаполнения.ВедущаяЗадача;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Важность") Тогда
			Важность = ДанныеЗаполнения.Важность;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Наименование") Тогда
			Наименование = ДанныеЗаполнения.Наименование;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Шаблон") Тогда
			Мультипредметность.ЗаполнитьПредметыПроцессаПоШаблону(ДанныеЗаполнения.Шаблон, ЭтотОбъект);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Предметы") Тогда
			Мультипредметность.ПередатьПредметыПроцессу(ЭтотОбъект, ДанныеЗаполнения.Предметы, Ложь, Истина);
			Проект = МультипредметностьПереопределяемый.ПолучитьОсновнойПроектПоПредметам(ДанныеЗаполнения.Предметы);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("АвторСобытия") Тогда
			Автор = ДанныеЗаполнения.АвторСобытия;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Автор") Тогда
			Автор = ДанныеЗаполнения.Автор;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ИдентификаторКонтролера") Тогда
			ИдентификаторКонтролера = ДанныеЗаполнения.ИдентификаторКонтролера;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Проверяющий") Тогда
			Проверяющий = ДанныеЗаполнения.Проверяющий;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ИдентификаторПроверяющего") Тогда
			ИдентификаторПроверяющего = ДанныеЗаполнения.ИдентификаторПроверяющего;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Шаблон") Тогда
			ЗаполнитьПоШаблону(ДанныеЗаполнения.Шаблон);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ПроектнаяЗадача") Тогда
			ЗаполнитьПоПроектнойЗадаче(ДанныеЗаполнения.ПроектнаяЗадача);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Проект") Тогда
			Проект = ДанныеЗаполнения.Проект;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Исполнители") Тогда
			Если ТипЗнч(ДанныеЗаполнения.Исполнители) = Тип("ТаблицаЗначений") Тогда
				Для Каждого Исполнитель ИЗ ДанныеЗаполнения.Исполнители Цикл
					Строка = Исполнители.Добавить();
					Строка.Исполнитель = Исполнитель.Исполнитель;
					Строка.ИдентификаторИсполнителя = Исполнитель.ИдентификаторИсполнителя;
					Строка.ВариантУстановкиСрокаИсполнения = Исполнитель.ВариантУстановкиСрокаИсполнения;
					Строка.СрокИсполнения = Исполнитель.СрокИсполнения;
					Строка.СрокИсполненияДни = Исполнитель.СрокИсполненияДни;
					Строка.СрокИсполненияЧасы = Исполнитель.СрокИсполненияЧасы;
					Строка.СрокИсполненияМинуты = Исполнитель.СрокИсполненияМинуты;
					Строка.ПорядокИсполнения = Исполнитель.ПорядокИсполнения;
					Строка.НаименованиеЗадачи = Исполнитель.НаименованиеЗадачи;
					Строка.Описание = Исполнитель.Описание;
					Строка.Ответственный = Исполнитель.Ответственный;
				КонецЦикла;
			ИначеЕсли ТипЗнч(ДанныеЗаполнения.Исполнители)= Тип("Массив") Тогда
				Для Каждого Исполнитель Из ДанныеЗаполнения.Исполнители Цикл
					Если ТипЗнч(Исполнитель) = Тип("Структура") Тогда
						Строка = Исполнители.Добавить();
						ЗаполнитьЗначенияСвойств(Строка, Исполнитель);
					Иначе
						Строка = Исполнители.Добавить();
						Строка.Исполнитель = Исполнитель;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ВариантУстановкиСрокаОбработкиРезультатов") Тогда
			ВариантУстановкиСрокаОбработкиРезультатов = 
				ДанныеЗаполнения.ВариантУстановкиСрокаОбработкиРезультатов;
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("СрокОбработкиРезультатов") Тогда
			СрокОбработкиРезультатов = ДанныеЗаполнения.СрокОбработкиРезультатов;
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("СрокОбработкиРезультатовДни") Тогда
			СрокОбработкиРезультатовДни = ДанныеЗаполнения.СрокОбработкиРезультатовДни;
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("СрокОбработкиРезультатовЧасы") Тогда
			СрокОбработкиРезультатовЧасы = ДанныеЗаполнения.СрокОбработкиРезультатовЧасы;
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("СрокОбработкиРезультатовМинуты") Тогда
			СрокОбработкиРезультатовМинуты = ДанныеЗаполнения.СрокОбработкиРезультатовМинуты;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("КоличествоИтераций") Тогда
			КоличествоИтераций = ДанныеЗаполнения.КоличествоИтераций;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ТрудозатратыПланКонтролера") Тогда
			ТрудозатратыПланКонтролера = ДанныеЗаполнения.ТрудозатратыПланКонтролера;
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("ТрудозатратыПланПроверяющего") Тогда
			ТрудозатратыПланПроверяющего = ДанныеЗаполнения.ТрудозатратыПланПроверяющего;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Шаблон") Тогда
			Мультипредметность.ЗаполнитьПредметыПроцессаПоШаблону(ДанныеЗаполнения.Шаблон, ЭтотОбъект);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Предметы") Тогда
			Мультипредметность.ПередатьПредметыПроцессу(ЭтотОбъект, ДанныеЗаполнения.Предметы, Ложь, Истина);
			Проект = МультипредметностьПереопределяемый.ПолучитьОсновнойПроектПоПредметам(ДанныеЗаполнения.Предметы);
			ТипыПредметов = Новый Массив;
			ТипыПредметов.Добавить(Тип("СправочникСсылка.ДокументыПредприятия"));
			
			ОбрабатываемыеПредметы = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЭтотОбъект, ТипыПредметов, Истина);
			Если ОбрабатываемыеПредметы.Количество() > 0 Тогда
				Описание = "";
				Для каждого Предмет из ОбрабатываемыеПредметы Цикл
					Резолюции = РаботаСРезолюциями.ПолучитьРезолюции(Предмет);
					Если Резолюции.Количество() > 0 Тогда
						Описание = ?(ПустаяСтрока(Описание),"",Символы.ПС + Символы.ПС) 
							+ Резолюции[0].ТекстРезолюции;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("АвторСобытия") Тогда
			Автор = ДанныеЗаполнения.АвторСобытия;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Шаблон") Тогда
			ЗаполнитьПоШаблону(ДанныеЗаполнения.Шаблон);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ЗадачаИсполнителя") Тогда
			ЗадачаСсылка = ДанныеЗаполнения.ЗадачаИсполнителя;
			ЗаполнитьБизнесПроцессПоЗадаче(ЗадачаСсылка);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ПроектнаяЗадача") Тогда
			ЗаполнитьПоПроектнойЗадаче(ДанныеЗаполнения.ПроектнаяЗадача);
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Проект") Тогда
			Проект = ДанныеЗаполнения.Проект;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ЗаписиИсполнения") Тогда
			ЗаписиИсполнения = ДанныеЗаполнения.ЗаписиИсполнения;
			
			Для Каждого Запись Из ЗаписиИсполнения Цикл
				НоваяСтрока = Исполнители.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Запись);
			КонецЦикла;	
			
			Проверяющий = ЗаписиИсполнения[0].Проверяющий;
		КонецЕсли;
		
		ТипыПисем = МультипредметностьПереопределяемый.ПолучитьТипыПисем();
		ОсновныеПисьма = МультипредметностьКлиентСервер.ПолучитьМассивПредметовОбъекта(ЭтотОбъект, ТипыПисем, Истина);
		Для Каждого Письмо Из ОсновныеПисьма Цикл
			Тема = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Письмо, "Тема");
			Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Письмо, "Проект");
			Если Не ЗначениеЗаполнено(Наименование) Тогда
				Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Исполнить ""%1""'"),
					Тема);
			КонецЕсли;
			Прервать;
		КонецЦикла;
		
		Если ДанныеЗаполнения.Свойство("Описание") Тогда
			Описание = ДанныеЗаполнения.Описание;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.ПроектныеЗадачи") Тогда 
		ЗаполнитьПоПроектнойЗадаче(ДанныеЗаполнения);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Наименование) И Предметы.Количество() > 0 Тогда
		МультипредметностьКлиентСервер.ЗаполнитьНаименованиеПроцесса(ЭтотОбъект, НСтр("ru = 'Исполнить'"));
	КонецЕсли;
	
	БизнесПроцессыИЗадачиСервер.ЗаполнитьГлавнуюЗадачу(ЭтотОбъект, ДанныеЗаполнения);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Смешанно Тогда 
		ПроверяемыеРеквизиты.Добавить("Исполнители.ПорядокИсполнения");
	КонецЕсли;
	
	Мультипредметность.ПроверитьКорректностьТиповОсновныхПредметов(ЭтотОбъект, Отказ);
	ПроверитьЭтапыЗаполняемыхПредметов(Отказ);
	
	// Проверка исполнителей на дубли при смешанном и параллельном варианте исполнения
	Если ВариантИсполнения <> Перечисления.ВариантыМаршрутизацииЗадач.Последовательно Тогда
		
		ТаблицаИсполнителейДляПроверки = Исполнители.Выгрузить();
		ТаблицаИсполнителейДляПроверки.Колонки.Добавить("Шаг");
		РаботаСБизнесПроцессамиКлиентСервер.ЗаполнитьШаг(ТаблицаИсполнителейДляПроверки);
		
	КонецЕсли;
	
	// Проверка наличия одного ответственного исполнения в списке.
	Если Исполнители.Количество() = 1 И Исполнители[0].Ответственный Тогда
		
		ТекстСообщения = НСтр("ru = 'Единственный исполнитель не может быть ответственным.'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			ТекстСообщения,,
			"Объект.Исполнители[0].Исполнитель",, 
			Отказ);
		
	КонецЕсли;
	
	РаботаСПроцессамиПоОбработкамОбъектов.ПроверкаЗапретаНаЗапускПоПредметуИзДругойСистемы(ЭтотОбъект, Отказ);
	
	// Проверка прав участников процесса на предметы
	Если Не РаботаСБизнесПроцессами.ЭтоФоновоеВыполнениеПроцесса() Тогда
		ПроверитьПраваУчастниковПроцессаНаПредметы(ЭтотОбъект, Отказ, Стартован);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбычнаяЗапись = Истина;
	ТолькоЗаполнениеУИДИсполнителя = Ложь;
	ТолькоОбработкойВыполненияЗадачи = Ложь;
	ТолькоОбновлениеРабочейГруппыПроцессов = Ложь;
	ОбновитьКонтроль = Ложь;
	Если ДополнительныеСвойства.Свойство("ВидЗаписи") Тогда
		
		ОбычнаяЗапись = Ложь;
		
		ТолькоЗаполнениеУИДИсполнителя = 
			(ДополнительныеСвойства.ВидЗаписи = 
			"ЗаписьС_ОбновлениемОбщегоСпискаПроцессовИРезультатовВыполнения_ЗаполнениемУИДИсполнителей");
		
		ТолькоОбработкойВыполненияЗадачи = 
			(ДополнительныеСвойства.ВидЗаписи = "ЗаписьСОбработкойВыполненияЗадачи");
			
		ТолькоОбновлениеРабочейГруппыПроцессов = 
			(ДополнительныеСвойства.ВидЗаписи =
			"ЗаписьСОбновлением_Предметов_ПредметовЗадач_Проекта_ОбщегоСпискаПроцессов_РабочихГруппПредметов_РабочихГруппПроцессов_ДопРеквизитовПоПредметам");
		
		ОбновитьКонтроль = РаботаСБизнесПроцессами.ЭтоВидЗаписиОбновленияКонтроля(ДополнительныеСвойства.ВидЗаписи);
		
		Если Не ТолькоЗаполнениеУИДИсполнителя
			И Не ТолькоОбработкойВыполненияЗадачи
			И Не ТолькоОбновлениеРабочейГруппыПроцессов
			И Не ОбновитьКонтроль Тогда
			
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	// Обработка выполнения задачи
	Если ОбычнаяЗапись Или ТолькоОбработкойВыполненияЗадачи Тогда
	
		Если ДополнительныеСвойства.Свойство("ТекущаяЗадача") Тогда
			Если ДополнительныеСвойства.ТекущаяЗадача.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Проверить Тогда
				
				Если ДополнительныеСвойства.Свойство("Исполнители") Тогда
					Если ТипЗнч(ДополнительныеСвойства.Исполнители) = Тип("Массив") Тогда
						Исполнители.Очистить();
						Для Каждого СтрИсполнитель Из ДополнительныеСвойства.Исполнители Цикл
							ЗаполнитьЗначенияСвойств(Исполнители.Добавить(), СтрИсполнитель);
						КонецЦикла;
					Иначе
						ПараметрыОтбора = Новый Структура("ЗадачаПроверяющего", ДополнительныеСвойства.ТекущаяЗадача);
						НайденныеСтроки = РезультатыПроверки.НайтиСтроки(ПараметрыОтбора);
						Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
							РезультатыПроверки.Удалить(НайденнаяСтрока);
						КонецЦикла;
						Для Каждого Строка Из ДополнительныеСвойства.Исполнители Цикл
							НоваяСтрока = РезультатыПроверки.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				Если ДополнительныеСвойства.Свойство("РезультатыПроверки") Тогда
					РезультатыПроверки.Очистить();
					Для Каждого СтрРезультат Из ДополнительныеСвойства.РезультатыПроверки Цикл
						ЗаполнитьЗначенияСвойств(РезультатыПроверки.Добавить(), СтрРезультат);
					КонецЦикла;
				КонецЕсли;
				
				Если ДополнительныеСвойства.Свойство("СрокИсполненияПроцесса") Тогда
					СрокИсполненияПроцесса = ДополнительныеСвойства.СрокИсполненияПроцесса;
				КонецЕсли;
				
				Если ДополнительныеСвойства.Свойство("КоличествоИтераций") Тогда
					КоличествоИтераций = ДополнительныеСвойства.КоличествоИтераций;
				КонецЕсли;
				
				Если ДополнительныеСвойства.Свойство("ВариантУстановкиСрокаОбработкиРезультатов") Тогда
					ВариантУстановкиСрокаОбработкиРезультатов = ДополнительныеСвойства.ВариантУстановкиСрокаОбработкиРезультатов;
				КонецЕсли;
				Если ДополнительныеСвойства.Свойство("СрокОбработкиРезультатов") Тогда
					СрокОбработкиРезультатов = ДополнительныеСвойства.СрокОбработкиРезультатов;
				КонецЕсли;
				Если ДополнительныеСвойства.Свойство("СрокОбработкиРезультатовДни") Тогда
					СрокОбработкиРезультатовДни = ДополнительныеСвойства.СрокОбработкиРезультатовДни;
				КонецЕсли;
				Если ДополнительныеСвойства.Свойство("СрокОбработкиРезультатовЧасы") Тогда
					СрокОбработкиРезультатовЧасы = ДополнительныеСвойства.СрокОбработкиРезультатовЧасы;
				КонецЕсли;
				Если ДополнительныеСвойства.Свойство("СрокОбработкиРезультатовМинуты") Тогда
					СрокОбработкиРезультатовМинуты = ДополнительныеСвойства.СрокОбработкиРезультатовМинуты;
				КонецЕсли;
				
				Если ДополнительныеСвойства.Свойство("ОтправленоНаДоработку") Тогда
					
					Комментарий = "";
					Если ДополнительныеСвойства.Свойство("РезультатВыполнения") Тогда
						Комментарий = ДополнительныеСвойства.РезультатВыполнения;
					КонецЕсли;
					
					СтруктуруОтбора = Новый Структура;
					СтруктуруОтбора.Вставить("НомерИтерации", НомерИтерации);
					
					СтрокиДляОбработки = РезультатыПроверки.НайтиСтроки(СтруктуруОтбора);
					
					Для Каждого СтрокаДляОбработки Из СтрокиДляОбработки Цикл
						
						СтрокаДляОбработки.ОтправленоНаДоработку = Истина;
						СтрокаДляОбработки.КомментарийПроверяющего = Комментарий;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбычнаяЗапись
		И Не МиграцияДанныхИзВнешнихСистемСервер.ЭтоОбъектИзДругойСистемы(ИсточникДанных) Тогда
		
		Если Не РаботаСБизнесПроцессамиВызовСервера.ПроверитьПередЗаписью(ЭтотОбъект) Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;	
		
		ПредыдущаяПометкаУдаления = Ложь;
		Если Не Ссылка.Пустая() Тогда
			ПредыдущаяПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ПометкаУдаления");
		КонецЕсли;
		ДополнительныеСвойства.Вставить("ПредыдущаяПометкаУдаления", ПредыдущаяПометкаУдаления);
		
		Если ПометкаУдаления <> ПредыдущаяПометкаУдаления Тогда
			
			РаботаСФайламиВызовСервера.ПометитьНаУдалениеПриложенныеФайлы(Ссылка, ПометкаУдаления);
			
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("СправочникСсылка.ДокументыПредприятия"));
			
		КонецЕсли;
		
		Если Не Ссылка.Пустая() Тогда
			ПредыдущееСостояние = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Состояние");
			ДополнительныеСвойства.Вставить("ПредыдущееСостояние", ПредыдущееСостояние);
		КонецЕсли;
		
	КонецЕсли;
	
	// Заполнение рабочей группы
	Если ОбычнаяЗапись Или ТолькоОбновлениеРабочейГруппыПроцессов Тогда
		РаботаСБизнесПроцессамиВызовСервера.СформироватьРабочуюГруппу(ЭтотОбъект);
	КонецЕсли;
	
	Если ОбычнаяЗапись Или ОбновитьКонтроль Тогда
		
		БылСтартован = Ложь;
		СтарыйКонтролер = Неопределено;
		СтарыйСрокИсполненияПроцесса = Дата(1,1,1);
		ПредыдущаяПометкаУдаления = Ложь;
		Если Не Ссылка.Пустая() Тогда
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, 
				"Стартован, Контролер, СрокИсполненияПроцесса, ПометкаУдаления");
			
			БылСтартован = ЗначенияРеквизитов.Стартован;
			СтарыйКонтролер = ЗначенияРеквизитов.Контролер;
			СтарыйСрокИсполненияПроцесса = ЗначенияРеквизитов.СрокИсполненияПроцесса;
			ПредыдущаяПометкаУдаления = ЗначенияРеквизитов.ПометкаУдаления;
		КонецЕсли;
		ДополнительныеСвойства.Вставить("БылСтартован", БылСтартован);
		ДополнительныеСвойства.Вставить("СтарыйКонтролер", СтарыйКонтролер);
		ДополнительныеСвойства.Вставить("СтарыйСрокИсполненияПроцесса", СтарыйСрокИсполненияПроцесса);
		ДополнительныеСвойства.Вставить("ПредыдущаяПометкаУдаления", ПредыдущаяПометкаУдаления);
		
	КонецЕсли;
	
	Если ОбычнаяЗапись Или ТолькоЗаполнениеУИДИсполнителя Тогда
		ЗаполнитьПустыеИдентификаторыУчастников();
		ПроверитьУникальностьИдентификаторовУчастников();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияЗадач.ПриЗаписиИсточникаЗадачи(ЭтотОбъект);
	
	Если (Не ДополнительныеСвойства.Свойство("ВидЗаписи")
		Или РаботаСБизнесПроцессами.ЭтоВидЗаписиОбновленияКонтроля(ДополнительныеСвойства.ВидЗаписи))
		
		И Не МиграцияДанныхИзВнешнихСистемСервер.ЭтоОбъектИзДругойСистемы(ИсточникДанных) Тогда
		
		Контроль.ПриЗаписиПроцессаСКонтролером(ЭтотОбъект);
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ВидЗаписи") Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаОчередиЗаданийСервер.ПриЗаписиПроцесса(ЭтотОбъект);
	
	ПредыдущаяПометкаУдаления = Ложь;
	Если ДополнительныеСвойства.Свойство("ПредыдущаяПометкаУдаления") Тогда
		ПредыдущаяПометкаУдаления = ДополнительныеСвойства.ПредыдущаяПометкаУдаления;
	КонецЕсли;
	
	Если (ПометкаУдаления <> ПредыдущаяПометкаУдаления)
		И Не МиграцияДанныхИзВнешнихСистемСервер.ЭтоОбъектИзДругойСистемы(ИсточникДанных) Тогда
		
		ПротоколированиеРаботыСотрудников.ЗаписатьПометкуУдаления(Ссылка, ПометкаУдаления);
	КонецЕсли;
	
	СтартПроцессовСервер.ПроцессПриЗаписи(ЭтотОбъект, Отказ);
	
КонецПроцедуры

/////////////////////////////
// Карта маршрута

Процедура СтартПередСтартом(ТочкаМаршрутаБизнесПроцесса, Отказ)
	
	ДатаНачала = ТекущаяДатаСеанса();
	
	РаботаСПроектами.ОтметитьНачалоВыполненияПроектнойЗадачи(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПодготовкаИтерацииОбработка(ТочкаМаршрутаБизнесПроцесса)
	
	УстановитьПривилегированныйРежим(Истина);
	
	УправлениеМероприятиями.УстановитьСостояниеМероприятияИзБизнесПроцесса(ЭтотОбъект,
		БизнесПроцессы.Исполнение.ТочкиМаршрута.Старт);
	
	НомерИтерации = НомерИтерации + 1;
	Для Каждого Строка Из Исполнители Цикл
		Строка.Пройден = Ложь;
	КонецЦикла;
	
	РаботаСБизнесПроцессами.ЗаписатьПроцесс(
		ЭтотОбъект,
		"ЗаписьС_ОбновлениемОбщегоСпискаПроцессовИРезультатовВыполнения_ЗаполнениемУИДИсполнителей");
	
КонецПроцедуры

Процедура ОтветственноеИсполнениеПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УстановитьПривилегированныйРежим(Истина);
	
	ДобавлятьНаименованиеПредмета = РаботаСБизнесПроцессами.ДобавлятьНаименованиеПредмета(ЭтотОбъект);
	
	Для Каждого Строка Из Исполнители Цикл
		
		Если Не Строка.Ответственный Тогда
			Продолжить;
		КонецЕсли;	
		
		Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
		
		Задача.Дата = ТекущаяДатаСеанса();
		Задача.Автор = Автор;
		Задача.Важность = Важность;	
		Задача.БизнесПроцесс = ЭтотОбъект.Ссылка;
		Задача.ТочкаМаршрута = ТочкаМаршрутаБизнесПроцесса;
		
		Мультипредметность.ЗадачаПередСозданием(ЭтотОбъект, Задача, ТочкаМаршрутаБизнесПроцесса);
		
		Если ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.Сотрудники") 
			Или ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
			Задача.Исполнитель = Строка.Исполнитель;
		Иначе	
			Задача.РольИсполнителя = Строка.Исполнитель;
		КонецЕсли;
		Задача.ИдентификаторИсполнителя = Строка.ИдентификаторИсполнителя;
		
		ЗаполнитьНаименованиеИОписаниеЗадачи(Задача, ДобавлятьНаименованиеПредмета, Строка);
		
		// Определение срока исполнения
		СрокиИсполненияПроцессов.ЗаполнитьСрокИсполненияЗадачи(
			Задача,
			Строка.ВариантУстановкиСрокаИсполнения,
			Строка.СрокИсполнения,
			Строка.СрокИсполненияДни,
			Строка.СрокИсполненияЧасы,
			Строка.СрокИсполненияМинуты);
		
		Задача.Проект = Проект;
		Задача.ПроектнаяЗадача = ПроектнаяЗадача;
		
		РаботаСБизнесПроцессамиВызовСервера.СкопироватьЗначенияДопРеквизитов(Задача.БизнесПроцесс, Задача);

		ЗадачаСсылка = Задачи.ЗадачаИсполнителя.ПолучитьСсылку();
		Задача.УстановитьСсылкуНового(ЗадачаСсылка);

		ФормируемыеЗадачи.Добавить(Задача);
		
		Строка.ЗадачаИсполнителя = ЗадачаСсылка;
		Контроль.УстановитьНовыйИсточникВСтрокеКонтроляПоИсполнителю(Ссылка, Строка, Строка.ЗадачаИсполнителя);
		
		НоваяСтрока = РезультатыИсполнения.Добавить();
		НоваяСтрока.НомерИтерации = НомерИтерации;
		НоваяСтрока.ЗадачаИсполнителя = ЗадачаСсылка;
		НоваяСтрока.ИдентификаторИсполнителя = Строка.ИдентификаторИсполнителя;
		
		РаботаСБизнесПроцессами.ЗаписатьПроцесс(ЭтотОбъект, "ЗаписьСОбновлениемРезультатаВыполнения");
		
		Прервать;
	КонецЦикла;
	
КонецПроцедуры

Процедура ИсполнитьПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МассивСтрок = Новый Массив;
	Если ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно Тогда 
		Для Каждого Строка Из Исполнители Цикл
			МассивСтрок.Добавить(Строка);
		КонецЦикла;
		
	ИначеЕсли ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Последовательно Тогда 
		Для Каждого Строка Из Исполнители Цикл
			Если Строка.Пройден Тогда 
				Продолжить;
			КонецЕсли;
			
			Если НЕ Строка.Ответственный Тогда
				МассивСтрок.Добавить(Строка);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	
	ИначеЕсли ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Смешанно Тогда 
		Строки = Исполнители.НайтиСтроки(Новый Структура("Пройден", Ложь));
		ИндексДобавленного = 0;
		Для Каждого СтрокаМассива Из Строки Цикл 
			Если НЕ СтрокаМассива.Ответственный Тогда
				МассивСтрок.Добавить(СтрокаМассива);
				ИндексДобавленного = Строки.Найти(СтрокаМассива);
				Прервать;
			КонецЕсли;
		КонецЦикла;

		Если ИндексДобавленного < Строки.ВГраница() Тогда
			Для Инд = ИндексДобавленного + 1 По Строки.ВГраница() Цикл
				Если Строки[Инд].ПорядокИсполнения = Перечисления.ПорядокВыполненияЗадач.ВместеСПредыдущим Тогда 
					Если МассивСтрок.Найти(Строки[Инд]) = Неопределено Тогда
						МассивСтрок.Добавить(Строки[Инд]);
					КонецЕсли;
				Иначе
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ДобавлятьНаименованиеПредмета = РаботаСБизнесПроцессами.ДобавлятьНаименованиеПредмета(ЭтотОбъект);
	
	Для Каждого Строка Из МассивСтрок Цикл
		Если Строка.Ответственный Тогда
			Продолжить;
		КонецЕсли;
		
		Задача = СоздатьЗадачу(Строка, ТочкаМаршрутаБизнесПроцесса, ДобавлятьНаименованиеПредмета);
		
		ЗадачаСсылка = Задачи.ЗадачаИсполнителя.ПолучитьСсылку();
		Задача.УстановитьСсылкуНового(ЗадачаСсылка);
		
		РаботаСБизнесПроцессамиВызовСервера.СкопироватьЗначенияДопРеквизитов(Задача.БизнесПроцесс, Задача);
		
		Если ДополнительныеСвойства.Свойство("ОтключитьОбновлениеЗадач") Тогда
			Задача.ДополнительныеСвойства.Вставить("ОтключитьОбновлениеЗадач", ДополнительныеСвойства.ОтключитьОбновлениеЗадач);
		КонецЕсли;
		
		ФормируемыеЗадачи.Добавить(Задача);
		
		Строка.ЗадачаИсполнителя = ЗадачаСсылка;
		Контроль.УстановитьНовыйИсточникВСтрокеКонтроляПоИсполнителю(Ссылка, Строка, Строка.ЗадачаИсполнителя);
		
		НоваяСтрока = РезультатыИсполнения.Добавить();
		НоваяСтрока.НомерИтерации 	  = НомерИтерации;
		НоваяСтрока.ЗадачаИсполнителя = ЗадачаСсылка;
		НоваяСтрока.ИдентификаторИсполнителя = Строка.ИдентификаторИсполнителя;
	КонецЦикла;
			
	УстановитьПривилегированныйРежим(Истина);
	РаботаСБизнесПроцессами.ЗаписатьПроцесс(ЭтотОбъект, "ЗаписьСОбновлениемРезультатаВыполнения");
	
КонецПроцедуры

Процедура ПроверитьПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(Проверяющий) Тогда 
		Возврат;
	КонецЕсли;	
	
	Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
	Задача.Дата  	= ТекущаяДатаСеанса();
	Задача.Автор 	= Автор;
	Задача.Важность = Важность;
	
	Мультипредметность.ЗадачаПередСозданием(ЭтотОбъект, Задача, ТочкаМаршрутаБизнесПроцесса);
	
	Задача.БизнесПроцесс  = Ссылка;
	Задача.ТочкаМаршрута  = ТочкаМаршрутаБизнесПроцесса;
	
	Задача.Проект = Проект;
	Задача.ПроектнаяЗадача = ПроектнаяЗадача;
	
	СтруктураПредметов = МультипредметностьКлиентСервер.ПолучитьМассивСтруктурПредметовОбъекта(Задача);
	ПредметыСтрокой = МультипредметностьКлиентСервер.ПредметыСтрокой(СтруктураПредметов, Истина, Ложь);
	
	ДобавлятьНаименованиеПредмета = РаботаСБизнесПроцессами.ДобавлятьНаименованиеПредмета(ЭтотОбъект);
	
	Если ТипЗнч(Проверяющий) = Тип("СправочникСсылка.Сотрудники") 
		Или ТипЗнч(Проверяющий) = Тип("СправочникСсылка.Пользователи") Тогда
		Задача.Исполнитель = Проверяющий;
	Иначе
		Задача.РольИсполнителя = Проверяющий;
	КонецЕсли;
	Задача.ИдентификаторИсполнителя = ИдентификаторПроверяющего;

	НаименованиеПроцесса = Наименование;
	Если СтрНачинаетсяС(НаименованиеПроцессаПоУмолчанию(ДобавлятьНаименованиеПредмета), Наименование)
		И Не ПустаяСтрока(ПредметыСтрокой) Тогда
		
		Наименование = СтрШаблон(
			НСтр("ru = 'Проверить исполнение %1'",
				ЛокализацияКонфигурации.КодЯзыкаИсполнителяЗадачи(Задача)), 
			ПредметыСтрокой);
	
	ИначеЕсли СтрНачинаетсяС(Наименование, НСтр("ru = 'Исполнить пункт №'")) Тогда
		
		Наименование = СтрЗаменить(Наименование, 
			НСтр("ru = 'Исполнить пункт №'"),
			НСтр("ru = 'Проверить исполнение пункта №'"));
			
	Иначе
		Наименование = СтрШаблон(
			НСтр("ru = 'Проверить: %1'",
				ЛокализацияКонфигурации.КодЯзыкаИсполнителяЗадачи(Задача)), 
			Наименование);
	КонецЕсли;
	
	ЗаполнитьНаименованиеИОписаниеЗадачи(Задача, Ложь);
	Наименование = НаименованиеПроцесса;
	
	// Определение срока исполнения
	СрокиИсполненияПроцессов.ЗаполнитьСрокИсполненияЗадачи(
		Задача,
		ВариантУстановкиСрокаОбработкиРезультатов,
		СрокОбработкиРезультатов,
		СрокОбработкиРезультатовДни,
		СрокОбработкиРезультатовЧасы,
		СрокОбработкиРезультатовМинуты);
	
	РаботаСБизнесПроцессамиВызовСервера.СкопироватьЗначенияДопРеквизитов(Задача.БизнесПроцесс, Задача);
	
	ЗадачаСсылка = Задачи.ЗадачаИсполнителя.ПолучитьСсылку();
	Задача.УстановитьСсылкуНового(ЗадачаСсылка);
	
	ФормируемыеЗадачи.Добавить(Задача);
	
	СтруктураИсполнитель = Новый Структура;
	СтруктураИсполнитель.Вставить("Исполнитель", Проверяющий);
	
	Контроль.УстановитьНовыйИсточникВСтрокеКонтроляПоИсполнителю(Ссылка, СтруктураИсполнитель, ЗадачаСсылка);
	
	ПараметрыОтбора = Новый Структура("НомерИтерации", НомерИтерации);
	НайденныеСтроки = РезультатыИсполнения.НайтиСтроки(ПараметрыОтбора);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		НоваяСтрока = РезультатыПроверки.Добавить();
		НоваяСтрока.ЗадачаИсполнителя 	= НайденнаяСтрока.ЗадачаИсполнителя;
		НоваяСтрока.ЗадачаПроверяющего 	= ЗадачаСсылка;
		НоваяСтрока.НомерИтерации 		= НомерИтерации;
		НоваяСтрока.ИдентификаторИсполнителя = НайденнаяСтрока.ИдентификаторИсполнителя;
	КонецЦикла;	
	
	УстановитьПривилегированныйРежим(Истина);
	РаботаСБизнесПроцессами.ЗаписатьПроцесс(ЭтотОбъект, "ЗаписьСОбновлениемРезультатаВыполнения");
	
КонецПроцедуры

Процедура КонтролироватьПередСозданиемЗадач(ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(Контролер) Тогда 
		Возврат;
	КонецЕсли;	
	
	//Если ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольОбъектов") Тогда 
	Возврат;
	//КонецЕсли;
	
	НоваяЗадача = СоздатьЗадачуНаКонтролера(ТочкаМаршрутаБизнесПроцесса);
	
	ФормируемыеЗадачи.Добавить(НоваяЗадача);
	
КонецПроцедуры

Процедура ВернутьНаДоработкуПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	ЕстьНовыеИсполнители = Ложь;
	Отбор = Новый Структура;
	Отбор.Вставить("ЗадачаИсполнителя", Задачи.ЗадачаИсполнителя.ПустаяСсылка());
	НовыеИсполнители = Исполнители.НайтиСтроки(Отбор);
	ЕстьНовыеИсполнители = (НовыеИсполнители.Количество() > 0);
	
	ЕстьОтправленныеНаДоработку = Ложь;
	Отбор = Новый Структура;
	Отбор.Вставить("НомерИтерации", НомерИтерации);
	Отбор.Вставить("ОтправленоНаДоработку", Истина);
	ОтправленныеНаДоработку = РезультатыПроверки.НайтиСтроки(Отбор);
	ЕстьОтправленныеНаДоработку = (ОтправленныеНаДоработку.Количество() > 0);
	
	Результат = ЕстьНовыеИсполнители Или ЕстьОтправленныеНаДоработку;
	
КонецПроцедуры

Процедура ОбработкаПроверкиВыполнения(ТочкаМаршрутаБизнесПроцесса, Задача, Результат)
	
	Результат = Истина;
	
КонецПроцедуры

Процедура ЗавершитьКонтрольОбработка(ТочкаМаршрутаБизнесПроцесса)
	
	Если ЗначениеЗаполнено(Контролер) Тогда 
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗадачаИсполнителя.Ссылка
		|ИЗ
		|	Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|ГДЕ
		|	ЗадачаИсполнителя.БизнесПроцесс = &БизнесПроцесс
		|	И ЗадачаИсполнителя.ТочкаМаршрута = &ТочкаМаршрута
		|	И НЕ ЗадачаИсполнителя.Выполнена";
		
		Запрос.УстановитьПараметр("БизнесПроцесс", 	ЭтотОбъект.Ссылка);
		Запрос.УстановитьПараметр("ТочкаМаршрута", 	БизнесПроцессы.Исполнение.ТочкиМаршрута.Контролировать);
		
		Результат = Запрос.Выполнить();
		Если Не Результат.Пустой() Тогда 
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			
			ВыполнениеЗадачСервер.ВыполнитьЗадачу(Выборка.Ссылка, Новый Структура);
			ЭтотОбъект.Прочитать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗавершениеПриЗавершении(ТочкаМаршрутаБизнесПроцесса, Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	ДатаЗавершения = ТекущаяДатаСеанса();
	
	УправлениеМероприятиями.УстановитьСостояниеМероприятияИзБизнесПроцесса(ЭтотОбъект,
		БизнесПроцессы.Исполнение.ТочкиМаршрута.Завершение);
	
	РаботаСПроектами.ОтметитьОкончаниеВыполненияПроектнойЗадачи(ЭтотОбъект);
	
	РаботаСПроцессамиПоДействиямСобытия.ПриЗавершенииПроцесса(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СоздатьЗадачу(Строка, ТочкаМаршрутаБизнесПроцесса, ДобавлятьНаименованиеПредмета)
	
	Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
	Задача.Дата  	= ТекущаяДатаСеанса();
	Задача.Автор 	= Автор;
	Задача.Важность = Важность;
	Мультипредметность.ЗадачаПередСозданием(ЭтотОбъект, Задача, ТочкаМаршрутаБизнесПроцесса);
	Задача.БизнесПроцесс  = ЭтотОбъект.Ссылка;
	Задача.ТочкаМаршрута  = ТочкаМаршрутаБизнесПроцесса;
	Если ЗначениеЗаполнено(Состояние) Тогда
		Задача.СостояниеБизнесПроцесса = Состояние;
	КонецЕсли;
	
	ЗаполнитьНаименованиеИОписаниеЗадачи(Задача, ДобавлятьНаименованиеПредмета, Строка);
	
	Если ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.Сотрудники")
		Или ТипЗнч(Строка.Исполнитель) = Тип("СправочникСсылка.Пользователи") Тогда
		Задача.Исполнитель = Строка.Исполнитель;
	Иначе	
		Задача.РольИсполнителя = Строка.Исполнитель;
	КонецЕсли;
	Задача.ИдентификаторИсполнителя = Строка.ИдентификаторИсполнителя;
	
	// Определение срока исполнения
	СрокиИсполненияПроцессов.ЗаполнитьСрокИсполненияЗадачи(
		Задача,
		Строка.ВариантУстановкиСрокаИсполнения,
		Строка.СрокИсполнения,
		Строка.СрокИсполненияДни,
		Строка.СрокИсполненияЧасы,
		Строка.СрокИсполненияМинуты);
	
	Задача.Проект = Проект;
	Задача.ПроектнаяЗадача = ПроектнаяЗадача;
	
	РаботаСБизнесПроцессамиВызовСервера.СкопироватьЗначенияДопРеквизитов(Задача.БизнесПроцесс, Задача);
	
	Возврат Задача;
	
КонецФункции

Процедура ЗаполнитьНаименованиеИОписаниеЗадачи(Задача, ДобавлятьНаименованиеПредмета, ПараметрыСтроки = Неопределено)
	
	Если ПараметрыСтроки = Неопределено Тогда
		ПараметрыСтроки = Новый Структура;
		ПараметрыСтроки.Вставить("НаименованиеЗадачи", "");
		ПараметрыСтроки.Вставить("Описание", "");
	КонецЕсли;
	
	НаименованиеИОписаниеПоДействию = Неопределено;
	ПредметыСтрокой = МультипредметностьКлиентСервер.ПредметыСтрокой(Задача.Предметы, Истина, Ложь);
	
	// По подчиненным задачам имена определяются по старому
	Если Не ЗначениеЗаполнено(ГлавнаяЗадача) Тогда
		НаименованиеИОписаниеПоДействию = РаботаСПроцессамиПоДействиям.НаименованиеИОписаниеЗадачиПоДействию(
			Задача, ПредметыСтрокой);
	КонецЕсли;

	Если ЗначениеЗаполнено(Описание) И ЗначениеЗаполнено(ПараметрыСтроки.Описание) Тогда
		Задача.Описание = Описание + Символы.ПС + ПараметрыСтроки.Описание;
	ИначеЕсли ЗначениеЗаполнено(ПараметрыСтроки.Описание) Тогда
		Задача.Описание = ПараметрыСтроки.Описание;
	ИначеЕсли НаименованиеИОписаниеПоДействию <> Неопределено 
		И ЗначениеЗаполнено(НаименованиеИОписаниеПоДействию.Описание) Тогда
		Задача.Описание = НаименованиеИОписаниеПоДействию.Описание;
	Иначе  
		Задача.Описание = Описание;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыСтроки.НаименованиеЗадачи) Тогда
		
		Задача.Наименование = ПараметрыСтроки.НаименованиеЗадачи;
		Если ДобавлятьНаименованиеПредмета И Не ПустаяСтрока(ПредметыСтрокой) Тогда 
			Задача.Наименование = ПараметрыСтроки.НаименованиеЗадачи + " " + ПредметыСтрокой;
		КонецЕсли;		
		
	ИначеЕсли НаименованиеИОписаниеПоДействию <> Неопределено 
		И ЗначениеЗаполнено(НаименованиеИОписаниеПоДействию.Наименование) Тогда
		Задача.Наименование = НаименованиеИОписаниеПоДействию.Наименование;

	Иначе
		Задача.Наименование = Наименование;
	КонецЕсли;
		
	Если Задача.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.ОтветственноеИсполнение Тогда 
		Задача.Наименование = Задача.Наименование + НСтр("ru = ' (ответственный исполнитель)'");
	КонецЕсли;
		
КонецПроцедуры

Функция СоздатьЗадачуНаКонтролера(ТочкаМаршрутаБизнесПроцесса)
	
	Задача = Задачи.ЗадачаИсполнителя.СоздатьЗадачу();
	Задача.Дата  	= ТекущаяДатаСеанса();
	Задача.Автор 	= Автор;
	Задача.Описание = Описание;
	Задача.Важность = Важность;
	Если ЗначениеЗаполнено(Состояние) Тогда
		Задача.СостояниеБизнесПроцесса = Состояние;
	КонецЕсли;
	Мультипредметность.ЗадачаПередСозданием(ЭтотОбъект, Задача, ТочкаМаршрутаБизнесПроцесса);
	
	Задача.СрокИсполнения = СрокИсполненияПроцесса;
	Задача.БизнесПроцесс  = ЭтотОбъект.Ссылка;
	Задача.ТочкаМаршрута  = ТочкаМаршрутаБизнесПроцесса;
	
	Задача.Проект = Проект;
	Задача.ПроектнаяЗадача = ПроектнаяЗадача;
	
	СтруктураПредметов = МультипредметностьКлиентСервер.ПолучитьМассивСтруктурПредметовОбъекта(Задача);
	ПредметыСтрокой = МультипредметностьКлиентСервер.ПредметыСтрокой(СтруктураПредметов, Истина, Ложь);
	
	ДобавлятьНаименованиеПредмета = РаботаСБизнесПроцессами.ДобавлятьНаименованиеПредмета(ЭтотОбъект);
	
	Если ТипЗнч(Контролер) = Тип("СправочникСсылка.Сотрудники")
		Или ТипЗнч(Контролер) = Тип("СправочникСсылка.Пользователи") Тогда
		Задача.Исполнитель = Контролер;
	Иначе
		Задача.РольИсполнителя = Контролер;
	КонецЕсли;
	Задача.ИдентификаторИсполнителя = ИдентификаторКонтролера;
	
	Если СтрНачинаетсяС(НаименованиеПроцессаПоУмолчанию(ДобавлятьНаименованиеПредмета), Наименование)
		И Не ПустаяСтрока(ПредметыСтрокой) Тогда
		
		Задача.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Контролировать исполнение %1'",
				ЛокализацияКонфигурации.КодЯзыкаИсполнителяЗадачи(Задача)), 
			ПредметыСтрокой);
	Иначе
		Задача.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Контролировать: %1'",
				ЛокализацияКонфигурации.КодЯзыкаИсполнителяЗадачи(Задача)), 
			Наименование);
	КонецЕсли;
	
	РаботаСБизнесПроцессамиВызовСервера.СкопироватьЗначенияДопРеквизитов(Задача.БизнесПроцесс, Задача);
	
	Задача.Записать();
	
	Возврат Задача;
	
КонецФункции

Процедура ПроверитьЭтапыЗаполняемыхПредметов(Отказ)
	
	ЗаполняемыеПредметы = Предметы.НайтиСтроки(Новый Структура("РольПредмета", Перечисления.РолиПредметов.Заполняемый));
	
	Для Каждого СтрокаПредмета Из ЗаполняемыеПредметы Цикл
		Отбор = Новый Структура("ИмяПредмета, ОбязательноеЗаполнение",СтрокаПредмета.ИмяПредмета, Истина);
		ТочкиЗаполнения = ПредметыЗадач.НайтиСтроки(Отбор);
		Для Каждого СтрокаТочки Из ТочкиЗаполнения Цикл
			Если СтрокаТочки.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Контролировать 
				И Не ЗначениеЗаполнено(Контролер) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не указан Контролер для заполнения предмета ""%1"" на этапе процесса ""%2""!'"),
						СтрокаТочки.ИмяПредмета,
						СтрокаТочки.ТочкаМаршрута),
					ЭтотОбъект,,
					"Контролер",
					Отказ);
			ИначеЕсли СтрокаТочки.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Проверить 
				И Не ЗначениеЗаполнено(Проверяющий) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не указан Проверяющий для заполнения предмета ""%1"" на этапе процесса ""%2""!'"),
						СтрокаТочки.ИмяПредмета,
						СтрокаТочки.ТочкаМаршрута),
					ЭтотОбъект,,
					"Проверяющий",
					Отказ);
			ИначеЕсли СтрокаТочки.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.ОтветственноеИсполнение 
				И Исполнители.Найти(Истина, "Ответственный") = Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не указан Ответственный исполнитель для заполнения предмета ""%1"" на этапе процесса ""%2""!'"),
						СтрокаТочки.ИмяПредмета,
						СтрокаТочки.ТочкаМаршрута),
					ЭтотОбъект,
					"Исполнители",, 
					Отказ);
			ИначеЕсли СтрокаТочки.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.Исполнить 
				И Исполнители.Найти(Ложь, "Ответственный") = Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не указан Исполнитель для заполнения предмета ""%1"" на этапе процесса ""%2""!'"),
						СтрокаТочки.ИмяПредмета,
						СтрокаТочки.ТочкаМаршрута),
					ЭтотОбъект,
					"Исполнители",, 
					Отказ);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьБизнесПроцессПоЗадаче(ЗадачаСсылка)
	
	РаботаСБизнесПроцессами.ЗаполнитьБизнесПроцессПоЗадаче(ЭтотОбъект, ЗадачаСсылка);
	
КонецПроцедуры

Процедура ОбходЗавершенПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	
	Если ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Параллельно Тогда 
		Результат = Истина;
		
	ИначеЕсли ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Последовательно 
		ИЛИ ВариантИсполнения = Перечисления.ВариантыМаршрутизацииЗадач.Смешанно Тогда 
		Если РезультатыПроверки.Количество() = 0 Тогда

			Результат = Ложь;
			ПараметрыОтбора = Новый Структура("Пройден", Ложь);
			НепройденныеИсполнения= Исполнители.НайтиСтроки(ПараметрыОтбора);
			Если НепройденныеИсполнения.Количество() = 0 Тогда 
				Результат = Истина;
				Возврат;
			Иначе
				Результат = Истина;
				Для Каждого Исполнитель Из НепройденныеИсполнения Цикл
					Результат = Результат И ЗначениеЗаполнено(Исполнитель.ЗадачаИсполнителя);
				КонецЦикла;
			КонецЕсли;
		Иначе
			Для Каждого СтрокаПроверки Из РезультатыПроверки Цикл
				Если (СтрокаПроверки.НомерИтерации = НомерИтерации - 1) И СтрокаПроверки.ОтправленоНаДоработку Тогда 
					Если СтрокаПроверки.ЗадачаИсполнителя.ТочкаМаршрута = БизнесПроцессы.Исполнение.ТочкиМаршрута.ОтветственноеИсполнение Тогда
						Продолжить;
					КонецЕсли;
					Строка = Исполнители.Найти(СтрокаПроверки.ЗадачаИсполнителя, "ЗадачаИсполнителя");
					Если Строка <> Неопределено Тогда
						Результат = Ложь;
						Возврат;
					КонецЕсли;
				КонецЕсли;   
			КонецЦикла;	
			Результат = Истина;
		КонецЕсли;
		
	ИначеЕсли Не ЗначениеЗаполнено(ВариантИсполнения) Тогда 
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр(
			"ru = 'Не заполнен вариант исполнения процесса: %1'"), Строка(Ссылка));
	
	КонецЕсли;		

КонецПроцедуры

Процедура ИсполнитьПередВыполнением(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	НайденнаяСтрока = Исполнители.Найти(Задача, "ЗадачаИсполнителя");
	Если НайденнаяСтрока <> Неопределено Тогда 
		НайденнаяСтрока.Пройден = Истина;
		
		РаботаСБизнесПроцессами.ЗаписатьПроцесс(ЭтотОбъект, "ЗаписьСОбновлениемРезультатаВыполнения");
	КонецЕсли;
	
КонецПроцедуры

Функция НаименованиеПроцессаПоУмолчанию(ДобавлятьНаименованиеПредмета)
	
	НаименованиеПоУмолчанию = НСтр("ru = 'Исполнить '");
	
	Если ДобавлятьНаименованиеПредмета Тогда
		НаименованиеПоУмолчанию = МультипредметностьКлиентСервер.ПолучитьНаименованиеСПредметами(
			СокрЛП(НаименованиеПоУмолчанию), Предметы);
	КонецЕсли;
	
	Возврат НаименованиеПоУмолчанию;
	
КонецФункции

// Заполняет пустые идентификаторы участников в процессе.
//
Процедура ЗаполнитьПустыеИдентификаторыУчастников()
	
	Для Каждого Строка Из Исполнители Цикл
		Если Строка.ИдентификаторИсполнителя = УникальныйИдентификаторПустой() Тогда
			Строка.ИдентификаторИсполнителя = Новый УникальныйИдентификатор;
		КонецЕсли;
	КонецЦикла;
	
	Если ИдентификаторКонтролера = УникальныйИдентификаторПустой() Тогда
		ИдентификаторКонтролера = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	Если ИдентификаторПроверяющего = УникальныйИдентификаторПустой() Тогда
		ИдентификаторПроверяющего = Новый УникальныйИдентификатор;
	КонецЕсли;
	
КонецПроцедуры

// Проверяет уникальность идентификаторов участников процесса.
// Если есть не уникальные значения, то вызывается исключение. 
//
Процедура ПроверитьУникальностьИдентификаторовУчастников()
	
	ВсеИдентификаторы = Новый Массив;
	ВсеИдентификаторы.Добавить(ИдентификаторКонтролера);
	ВсеИдентификаторы.Добавить(ИдентификаторПроверяющего);
	
	Для Каждого СтрокаТаблицы Из Исполнители Цикл
		ВсеИдентификаторы.Добавить(СтрокаТаблицы.ИдентификаторИсполнителя);
	КонецЦикла;
		
	ПройденныеИдентификаторы = Новый Соответствие();
	Для Каждого ИдентификаторУчастника Из ВсеИдентификаторы Цикл
		Если ПройденныеИдентификаторы[ИдентификаторУчастника] <> Неопределено Тогда
			ВызватьИсключение НСтр("ru = 'Идентификаторы участников не уникальны.'",
				ОбщегоНазначения.КодОсновногоЯзыка());
		КонецЕсли;
		ПройденныеИдентификаторы[ИдентификаторУчастника] = Истина; 	
	КонецЦикла;
	
КонецПроцедуры

Функция ПоляТаблицыПроцесса(ИмяТаблицы)
	
	ПоляСтр = "";
	
	РеквизитыТабЧасти = Ссылка.Метаданные().ТабличныеЧасти[ИмяТаблицы].Реквизиты;
	
	Разделитель = "";
	
	Для Каждого СтрРеквизит Из РеквизитыТабЧасти Цикл
		ПоляСтр = ПоляСтр + Разделитель + СтрРеквизит.Имя;
		Разделитель = ",";
	КонецЦикла;
	
	Если ИмяТаблицы = "Исполнители" Тогда
		ПоляСтр = СтрШаблон("%1,ВладелецРоли,ОсновнойОбъектАдресации,ДополнительныйОбъектАдресации", ПоляСтр);
	КонецЕсли;
	
	Возврат ПоляСтр;
	
КонецФункции

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли