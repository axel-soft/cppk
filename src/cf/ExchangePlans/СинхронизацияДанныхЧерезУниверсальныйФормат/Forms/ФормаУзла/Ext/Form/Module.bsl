#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбменДаннымиСервер.ФормаУзлаПриСозданииНаСервере(ЭтотОбъект, Отказ);
	
	ПравилоОтбораСправочников = ?(Объект.ИспользоватьОтборПоОрганизациям,
		"СинхронизироватьДанныеТолькоПоВыбраннымОрганизациям",
		"СинхронизироватьДанныеПоВсемОрганизациям");
	
	Если ОбщегоНазначения.РазделениеВключено() И ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных() Тогда
		Элементы.Наименование.Видимость = Ложь;
		Элементы.Служебные.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ВерсияФорматаОбмена.СписокВыбора.Очистить();
	ВерсииФормата = ОбменДаннымиСервер.ЗначениеНастройкиПланаОбмена(
		"СинхронизацияДанныхЧерезУниверсальныйФормат", "ВерсииФорматаОбмена");
	Для Каждого ВерсияФормата Из ВерсииФормата Цикл
		Элементы.ВерсияФорматаОбмена.СписокВыбора.Добавить(ВерсияФормата.Ключ);
	КонецЦикла;
	
	УстановитьВидимостьНаСервере();
	ОбновитьНаименованиеКомандФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	Оповестить("Запись_УзелПланаОбмена");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбновитьИнтерфейс();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ОбновитьДанныеОбъекта(ВыбранноеЗначение);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ОбменДаннымиКлиент.ПередЗаписью(ЭтотОбъект, Отказ, ПараметрыЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ОбменДаннымиКлиент.ФормаНастройкиПередЗакрытием(Отказ, ЭтотОбъект, ЗавершениеРаботы);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ОбменДаннымиСервер.ФормаУзлаПриЗаписиНаСервере(ТекущийОбъект, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПереключательОтправлятьНСИАвтоматическиПриИзменении(Элемент)
	
	УстановитьВидимостьНаСервере();
	УстановитьРежимВыгрузкиСправочников();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательОтправлятьНСИПоНеобходимостиПриИзменении(Элемент)
	
	Если Объект.ПравилаОтправкиДокументов = "НеСинхронизировать" Тогда
		Объект.ПравилаОтправкиДокументов = "АвтоматическаяСинхронизация";
	КонецЕсли;
	
	УстановитьВидимостьНаСервере();
	УстановитьРежимВыгрузкиСправочников();
	УстановитьРежимВыгрузкиДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательОтправлятьНСИНикогдаПриИзменении(Элемент)
	
	Объект.ПравилаОтправкиДокументов = "НеСинхронизировать";
	УстановитьВидимостьНаСервере();
	УстановитьРежимВыгрузкиСправочников();
	УстановитьРежимВыгрузкиДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательОтбораСправочниковСОтборомПриИзменении(Элемент)
	
	УсловияОграниченияСинхронизации();
	УстановитьВидимостьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательОтбораСправочниковБезОтбораПриИзменении(Элемент)
	
	УсловияОграниченияСинхронизации();
	УстановитьВидимостьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательДокументыОтправлятьАвтоматическиПриИзменении(Элемент)
	
	УстановитьВидимостьНаСервере();
	УстановитьРежимВыгрузкиДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательДокументыОтправлятьВручнуюПриИзменении(Элемент)
	
	УстановитьВидимостьНаСервере();
	УстановитьРежимВыгрузкиДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательДокументыНеОтправлятьПриИзменении(Элемент)
	
	УстановитьВидимостьНаСервере();
	УстановитьРежимВыгрузкиДокументов();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьСписокВыбранныхОрганизаций(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ИмяЭлементаФормыДляЗаполнения", "Организации");
	ПараметрыФормы.Вставить("ИмяРеквизитаЭлементаФормыДляЗаполнения", "Организация");
	ПараметрыФормы.Вставить("ИмяТаблицыВыбора", "Справочник.Организации");
	ПараметрыФормы.Вставить("ЗаголовокФормыВыбора", НСтр("ru = 'Выберите организации для отбора'"));
	ПараметрыФормы.Вставить("МассивВыбранныхЗначений", СформироватьМассивВыбранныхЗначений(ПараметрыФормы));
	ПараметрыФормы.Вставить("ПараметрыВнешнегоСоединения", Неопределено);
	ПараметрыФормы.Вставить("КоллекцияФильтров", Неопределено);
	
	ОткрытьФорму("ПланОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат.Форма.ФормаВыбораДополнительныхУсловий",
		ПараметрыФормы,
		ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьВидимостьНаСервере()
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ДатаНачалаВыгрузкиДокументов",
		"Доступность",
		Объект.ПравилаОтправкиДокументов = "АвтоматическаяСинхронизация");
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ПереключательДокументыНеОтправлять",
		"Доступность",
		Объект.ПравилаОтправкиСправочников <> "СинхронизироватьПоНеобходимости");
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОписаниеДокументыНеОтправлять",
		"Доступность",
		Объект.ПравилаОтправкиСправочников <> "СинхронизироватьПоНеобходимости");
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы.ГруппаДокументы.ПодчиненныеЭлементы,
		"ГруппаРежимОтправкиДокументов",
		"Доступность",
		Объект.ПравилаОтправкиСправочников <> "НеСинхронизировать");
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"ОткрытьСписокВыбранныхОрганизаций",
		"Доступность",
		Объект.ИспользоватьОтборПоОрганизациям);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимВыгрузкиСправочников()
	
	// Очистка неиспользуемых реквизитов и заполнение служебных.
	Если Объект.ПравилаОтправкиСправочников = "НеСинхронизировать" Тогда
		Объект.ИспользоватьОтборПоОрганизациям = Ложь;
		Объект.РежимВыгрузкиСправочников =
			ПредопределенноеЗначение("Перечисление.РежимыВыгрузкиОбъектовОбмена.НеВыгружать");
		Объект.РежимВыгрузкиПриНеобходимости =
			ПредопределенноеЗначение("Перечисление.РежимыВыгрузкиОбъектовОбмена.НеВыгружать");
	ИначеЕсли Объект.ПравилаОтправкиСправочников = "СинхронизироватьПоНеобходимости" Тогда
		Объект.РежимВыгрузкиСправочников =
			ПредопределенноеЗначение("Перечисление.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПриНеобходимости");
		Объект.РежимВыгрузкиПриНеобходимости =
			ПредопределенноеЗначение("Перечисление.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПриНеобходимости");
	Иначе
		Объект.РежимВыгрузкиСправочников =
			ПредопределенноеЗначение("Перечисление.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПоУсловию");
		Объект.РежимВыгрузкиПриНеобходимости =
			ПредопределенноеЗначение("Перечисление.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПриНеобходимости");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимВыгрузкиДокументов()
	
	Если Объект.ПравилаОтправкиДокументов = "НеСинхронизировать" Тогда
		Объект.РежимВыгрузкиДокументов =
			ПредопределенноеЗначение("Перечисление.РежимыВыгрузкиОбъектовОбмена.НеВыгружать");
	ИначеЕсли Объект.ПравилаОтправкиДокументов = "ИнтерактивнаяСинхронизация" Тогда
		Объект.РежимВыгрузкиДокументов =
			ПредопределенноеЗначение("Перечисление.РежимыВыгрузкиОбъектовОбмена.ВыгружатьВручную");
	Иначе
		Объект.РежимВыгрузкиДокументов =
			ПредопределенноеЗначение("Перечисление.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПоУсловию");
	КонецЕсли;
	
	Если Не Объект.ИспользоватьОтборПоОрганизациям И Объект.Организации.Количество() <> 0 Тогда
		Объект.Организации.Очистить();
	ИначеЕсли Объект.Организации.Количество() = 0 И Объект.ИспользоватьОтборПоОрганизациям Тогда
		Объект.ИспользоватьОтборПоОрганизациям = Ложь;
	КонецЕсли;
	
	Если Объект.ПравилаОтправкиДокументов <> "АвтоматическаяСинхронизация" Тогда
		Объект.ДатаНачалаВыгрузкиДокументов = Дата(1,1,1,0,0,0);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеОбъекта(СтруктураПараметров)
	
	Объект[СтруктураПараметров.ИмяТаблицыДляЗаполнения].Очистить();
	
	СписокВыбранныхЗначений = ПолучитьИзВременногоХранилища(СтруктураПараметров.АдресТаблицыВоВременномХранилище); // ТаблицаЗначений
	
	Если СписокВыбранныхЗначений.Количество() > 0 Тогда
		КолонкаПредставление = СписокВыбранныхЗначений.Колонки.Представление; // КолонкаТаблицыЗначений
		КолонкаПредставление.Имя = СтруктураПараметров.ИмяКолонкиДляЗаполнения;
		Объект[СтруктураПараметров.ИмяТаблицыДляЗаполнения].Загрузить(СписокВыбранныхЗначений);
	КонецЕсли;
	
	ОбновитьНаименованиеКомандФормы();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНаименованиеКомандФормы()
	
	// Обновим заголовок выбранных организаций.
	Если Объект.Организации.Количество() > 0 Тогда
		
		ВыбранныеОрганизации = Объект.Организации.Выгрузить().ВыгрузитьКолонку("Организация");
		НовыйЗаголовокОрганизаций = СтрСоединить(ВыбранныеОрганизации, ",");
		
	Иначе
		
		НовыйЗаголовокОрганизаций = НСтр("ru = 'Выбрать организации'");
		
	КонецЕсли;
	
	Элементы.ОткрытьСписокВыбранныхОрганизаций.Заголовок = НовыйЗаголовокОрганизаций;
	
КонецПроцедуры

&НаСервере
Функция СформироватьМассивВыбранныхЗначений(ПараметрыФормы)
	
	ТабличнаяЧасть = Объект[ПараметрыФормы.ИмяЭлементаФормыДляЗаполнения];
	
	ИмяРеквизита = ПараметрыФормы.ИмяРеквизитаЭлементаФормыДляЗаполнения;
	ТаблицаВыбранныхЗначений = ТабличнаяЧасть.Выгрузить(, ИмяРеквизита);
	
	Возврат ТаблицаВыбранныхЗначений.ВыгрузитьКолонку(ИмяРеквизита);
	
КонецФункции

&НаКлиенте
Процедура УсловияОграниченияСинхронизации()
	
	Объект.ИспользоватьОтборПоОрганизациям =
		(ПравилоОтбораСправочников = "СинхронизироватьДанныеТолькоПоВыбраннымОрганизациям");
	
КонецПроцедуры

#КонецОбласти