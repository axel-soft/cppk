// Процедура-обработчик события ПриКомпоновкеРезультата. Устанавливает цвета диаграмм.
//
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	//УстановитьПривилегированныйРежим(Истина);
	ДокументРезультат.Очистить();
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	ВидДокумента = Справочники.ВидыДокументов.НайтиПоРеквизиту("ЯвляетсяЗаявкойНаВозврат",Истина);
	Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ВидДокумента",ВидДокумента);
	
	Если Настройки.ПараметрыДанных.Элементы.Найти("Сортировка").Значение = Ложь Тогда
		Для Каждого ЭлементПорядка Из Настройки.Порядок.Элементы Цикл
			Если ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных("ДатаРегистрации") Тогда
				ЭлементПорядка.Использование = Истина;
			ИначеЕсли ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных("СрокРассмотрения") Тогда
				ЭлементПорядка.Использование = Ложь;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для Каждого ЭлементПорядка Из Настройки.Порядок.Элементы Цикл
			Если ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных("ДатаРегистрации") Тогда
				ЭлементПорядка.Использование = Ложь;
			ИначеЕсли ЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных("СрокРассмотрения") Тогда
				ЭлементПорядка.Использование = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);

	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);

	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);

	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	ОбщегоНазначенияДокументооборот.УстановитьЦветаДиаграмм(ДокументРезультат);

КонецПроцедуры

