#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	ПараметрПодразделение = Настройки.ПараметрыДанных.Элементы.Найти("Подразделение");
	ПараметрИсполнители = Настройки.ПараметрыДанных.Элементы.Найти("Исполнители");
	ПараметрАвторы = Настройки.ПараметрыДанных.Элементы.Найти("Авторы");
	ПараметрЗадачиОтМеня = Настройки.ПараметрыДанных.Элементы.Найти("ЗадачиОтМеня");
	ПараметрСправкаОбИсполнительскойДисциплине = Настройки.ПараметрыДанных.Элементы.Найти("СправкаОбИсполнительскойДисциплине");
	ПараметрПоказыватьНедействительныхСотрудников = Настройки.ПараметрыДанных.Элементы.Найти("ПоказыватьНедействительныхСотрудников");
	ПараметрВидыПриложений = Настройки.ПараметрыДанных.Элементы.Найти("ВидыПриложений");
	
	ЭтоВариантЗадачиОтМеня =
		ПараметрЗадачиОтМеня.Использование = Истина
		И ПараметрЗадачиОтМеня.Значение = Истина;
	ЕстьОтборПоПодразделению =
		ПараметрПодразделение.Использование
		И ЗначениеЗаполнено(ПараметрПодразделение.Значение);
	
	Если ПараметрПоказыватьНедействительныхСотрудников.Использование Тогда
		ТолькоДействующие = Не ПараметрПоказыватьНедействительныхСотрудников.Значение;
	Иначе
		ТолькоДействующие = Истина;
	КонецЕсли;
	
	ЭтоВариантСправкаОбИсполнительскойДисциплине =
		ПараметрСправкаОбИсполнительскойДисциплине.Использование = Истина
		И ПараметрСправкаОбИсполнительскойДисциплине.Значение = Истина;
	
	Если ПараметрИсполнители.Использование = Ложь
		И (ЕстьОтборПоПодразделению 
			Или Не ЭтоВариантЗадачиОтМеня
			Или Не ЭтоВариантСправкаОбИсполнительскойДисциплине) Тогда
		
		Если ЕстьОтборПоПодразделению Тогда
			
			// Явно указано подразделение - построим отчет по его сотрудникам.
			Исполнители = Сотрудники.СотрудникиПодразделения(
				ПараметрПодразделение.Значение,
				ТолькоДействующие);
			
		ИначеЕсли ЭтоВариантЗадачиОтМеня Или Пользователи.ЭтоПолноправныйПользователь() Тогда
				
			// Администратор - построим отчет по всем пользователям.
			Исполнители = Сотрудники.ВсеСотрудники();
			
			Если Не ТолькоДействующие Тогда
				
				ВсеНедействующиеСотрудники = Сотрудники.ВсеНедействующиеСотрудники();
				
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
					Исполнители,
					ВсеНедействующиеСотрудники);
				
			КонецЕсли;
			
		Иначе
			
			Исполнители = Новый Массив;
			
			// Построим отчет по всем подчиненным сотрудникам.
			Подчиненные = РаботаСПользователями.Подчиненные(
				Пользователи.ТекущийПользователь(),
				ТолькоДействующие);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Исполнители, Подчиненные, Истина);
			
			// Построим отчет по самому себе.
			ВсеСотрудникиТекущегоПользователя = Сотрудники.ВсеСотрудникиТекущегоПользователя(
				ТолькоДействующие);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				Исполнители,
				ВсеСотрудникиТекущегоПользователя,
				Истина);
			
		КонецЕсли;
		
		ПараметрИсполнители.Использование = Истина;
		ПараметрИсполнители.Значение = Новый СписокЗначений;
		ПараметрИсполнители.Значение.ЗагрузитьЗначения(Исполнители);
		
	КонецЕсли;
	
	Если ПараметрВидыПриложений.Использование = Истина Тогда
		
		ВидыПриложений = Новый Массив;
		
		Если ТипЗнч(ПараметрВидыПриложений.Значение) = Тип("СписокЗначений") Тогда
			
			Для Каждого ВидПриложения Из ПараметрВидыПриложений.Значение.ВыгрузитьЗначения() Цикл
				
				ВидыПриложений.Добавить(ВидПриложения);
				
				Если ТипЗнч(ВидПриложения) <> Тип("СправочникСсылка.ВидыДокументов") Тогда
					Продолжить;
				КонецЕсли;
				
				НайденныеВидыДокументов = Справочники.ВидыДокументов.НайтиПоГруппе(ВидПриложения);
				
				Для Каждого НайденныйВидДокументов Из НайденныеВидыДокументов Цикл
					
					ВидыПриложений.Добавить(НайденныйВидДокументов);
					
				КонецЦикла;
				
			КонецЦикла;
			
		Иначе
			
			ВидПриложения = ПараметрВидыПриложений.Значение;
			
			ВидыПриложений.Добавить(ВидПриложения);
			
			Если ТипЗнч(ВидПриложения) = Тип("СправочникСсылка.ВидыДокументов") Тогда
				
				НайденныеВидыДокументов = Справочники.ВидыДокументов.НайтиПоГруппе(ВидПриложения);
				
				Для Каждого НайденныйВидДокументов Из НайденныеВидыДокументов Цикл
					
					ВидыПриложений.Добавить(НайденныйВидДокументов);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ПараметрВидыПриложений.Значение = Новый СписокЗначений;
		ПараметрВидыПриложений.Значение.ЗагрузитьЗначения(ВидыПриложений);
		
	КонецЕсли;
	
	ЭлементыУсловногоОформленияПроцентов = Новый Массив;
	
	КартинкаПроцентЯчейки = БиблиотекаКартинок.ПроцентЯчейки;
	Для Каждого ЭлементУсловногоОформления Из Настройки.УсловноеОформление.Элементы Цикл
		
		Если Не ЭлементУсловногоОформления.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементУсловногоОформления.Отбор.Элементы.Количество() <> 1 Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ЭлементОформления Из ЭлементУсловногоОформления.Оформление.Элементы Цикл
			
			Если Не ЭлементОформления.Использование Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЭлементОформления.Значение = КартинкаПроцентЯчейки Тогда
				
				ЭлементыУсловногоОформленияПроцентов.Добавить(ЭлементУсловногоОформления);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого УсловноеОформленияПроцентов Из ЭлементыУсловногоОформленияПроцентов Цикл
		
		Для Процент = 1 По 100 Цикл
			
			УсловноеОформленияПроцента = Настройки.УсловноеОформление.Элементы.Добавить();
			
			ЗаполнитьЗначенияСвойств(
				УсловноеОформленияПроцента,
				УсловноеОформленияПроцентов,
				"Использование, ИспользоватьВГруппировке, ИспользоватьВЗаголовке,
				|ИспользоватьВЗаголовкеОбщегоИтога, ИспользоватьВЗаголовкеПолей,
				|ИспользоватьВЗаголовкеПолейРесурсов, ИспользоватьВЗаголовкеПолейРесурсовОбщегоИтога,
				|ИспользоватьВИерархическойГруппировке, ИспользоватьВОбщемИтоге, ИспользоватьВОтборе,
				|ИспользоватьВПараметрах");
			
			Для Каждого ОформляемоеПолеПроцентов Из УсловноеОформленияПроцентов.Поля.Элементы Цикл
				
				ОформляемоеПолеПроцента = УсловноеОформленияПроцента.Поля.Элементы.Добавить();
				
				ЗаполнитьЗначенияСвойств(
					ОформляемоеПолеПроцента,
					ОформляемоеПолеПроцентов,
					"Использование, Поле");
				
			КонецЦикла;
			
			Для Каждого ОформлениеПроцентов Из УсловноеОформленияПроцентов.Оформление.Элементы Цикл
				
				Если Не ОформлениеПроцентов.Использование Тогда
					Продолжить;
				КонецЕсли;
				
				УсловноеОформленияПроцента.Оформление.УстановитьЗначениеПараметра(
					ОформлениеПроцентов.Параметр,
					ОформлениеПроцентов.Значение);
				
			КонецЦикла;
			
			УсловноеОформленияПроцента.Оформление.УстановитьЗначениеПараметра(
				"Картинка",
				БиблиотекаКартинок[Метаданные.ОбщиеКартинки.ПроцентЯчейки.Имя + Строка(Процент)]);
			
			ПолеОтбора = УсловноеОформленияПроцентов.Отбор.Элементы[0].ЛевоеЗначение;
			
			ОтборОт = УсловноеОформленияПроцента.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборОт.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
			ОтборОт.ЛевоеЗначение = ПолеОтбора;
			ОтборОт.ПравоеЗначение = Процент - 1;
			
			ОтборДо = УсловноеОформленияПроцента.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборДо.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
			ОтборДо.ЛевоеЗначение = ПолеОтбора;
			ОтборДо.ПравоеЗначение = Процент;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ПараметрАвторы.Использование = Ложь И ЭтоВариантЗадачиОтМеня Тогда
		
		МассивАвторы = Новый Массив;
		МассивАвторы.Добавить(Сотрудники.ВсеСотрудникиТекущегоПользователя());
		
		ПараметрАвторы.Использование = Истина;
		ПараметрАвторы.Значение = Новый СписокЗначений;
		ПараметрАвторы.Значение.ЗагрузитьЗначения(МассивАвторы);
		
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ВестиУчетФактическихТрудозатрат") Тогда
		
		СкрытьПоле("ПотериТрудозатрат");
		СкрытьПоле("ОтклонениеТрудозатратАбсолютное");
		СкрытьПоле("ТрудоемкостьОт");
		СкрытьПоле("ТрудоемкостьДо");
		СкрытьПоле("Трудозатраты");
		СкрытьПоле("ОтклонениеТрудозатрат");
		СкрытьПоле("КоличествоБезТрудозатрат");
		СкрытьПоле("Трудоемкость");
		СкрытьПоле("ОшибкаТрудозатрат");
		СкрытьПоле("ТрудозатратыСумма");
		
	КонецЕсли;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);
	
	ДокументРезультат.Очистить();
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	ДокументРезультат.ПоказатьУровеньГруппировокСтрок(9);
	
	ОбщегоНазначенияДокументооборот.УстановитьЦветаДиаграмм(ДокументРезультат);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Скрывает поле в схеме компоновки данных.
// 
// Параметры:
//  ИмяПоля - Строка
//
Процедура СкрытьПоле(ИмяПоля)
	
	НайденноеПоле =
		СхемаКомпоновкиДанных.НаборыДанных.ЗадачиПоИсполнителям.Поля.Найти(ИмяПоля);
	Если НайденноеПоле = Неопределено Тогда
		НайденноеПоле =
			СхемаКомпоновкиДанных.ВычисляемыеПоля.Найти(ИмяПоля);
	КонецЕсли;
	
	Если НайденноеПоле = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НайденноеПоле.ОграничениеИспользования.Группировка = Истина;
	НайденноеПоле.ОграничениеИспользования.Поле = Истина;
	НайденноеПоле.ОграничениеИспользования.Порядок = Истина;
	НайденноеПоле.ОграничениеИспользования.Условие = Истина;
	
КонецПроцедуры

#КонецОбласти

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли