#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	Сдвиг = Настройки.ПараметрыДанных.Элементы.Найти("Сдвиг");
	Период = Настройки.ПараметрыДанных.Элементы.Найти("Период");
	
	Если Сдвиг.Использование И Период.Использование Тогда
	
		КонецПериодаСоСдвигом = Период.Значение.ДатаОкончания;
		КонецПериодаСоСдвигом = КонецПериодаСоСдвигом + (86400 * Сдвиг.Значение);
		Период.Значение.ДатаОкончания = КонецПериодаСоСдвигом;
		Период.Использование = Истина;
	
	КонецЕсли; 
	
	ТекущаяДата = Настройки.ПараметрыДанных.Элементы.Найти("ТекущаяДата");
	ТекущаяДата.Значение = КонецДня(ТекущаяДата());
	ТекущаяДата.Использование = Истина;
	
	СдвигОтТекущейДаты = Настройки.ПараметрыДанных.Элементы.Найти("СдвигОтТекущейДаты");
	Если СдвигОтТекущейДаты.Использование Тогда
			
		НачалоПериодаСоСдвигом = НачалоДня(ДобавитьМесяц(ТекущаяДата(), -СдвигОтТекущейДаты.Значение));
		Период.Значение.ДатаНачала = НачалоПериодаСоСдвигом;
		СдвигВДнях = 0;
		Если Сдвиг.Использование Тогда
			СдвигВДнях = Сдвиг.Значение;
		КонецЕсли;
		КонецПериодаСоСдвигом = КонецДня(ТекущаяДата() + (86400 * СдвигВДнях));
		Период.Значение.ДатаОкончания = КонецПериодаСоСдвигом;
		Период.Использование = Истина;
		
	КонецЕсли;

	ВидДействия = Настройки.ПараметрыДанных.Элементы.Найти("ВидДействия");
	ВидДействия.Значение = Справочники.ВидыДействийЗадач.Исполнить;
	ВидДействия.Использование = Истина;
	
	ВидУчастника = Настройки.ПараметрыДанных.Элементы.Найти("ВидУчастника");
	ВидУчастника.Значение = Справочники.ВидыУчастниковЗадач.Исполнитель;
	ВидУчастника.Использование = Истина;
				
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);

	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);

	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);

	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	//ПолучитьДанныеНаОснованииСКД(СхемаКомпоновкиДанных, Настройки, ДокументРезультат,, ДанныеРасшифровки);

КонецПроцедуры

Процедура ПолучитьДанныеНаОснованииСКД(СКД, ИсполняемыеНастройки = Неопределено, ОбъектДляЗагрузки, СтруктураПараметров = Неопределено, РасшифровкаСКД = Неопределено, МакетКомпоновки = Неопределено, ВнешниеНаборыДанных = Неопределено)

    КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;

    Если ТипЗнч(ОбъектДляЗагрузки) = Тип("ТабличныйДокумент") Тогда
        ТипГенератора = Тип("ГенераторМакетаКомпоновкиДанных");
    Иначе
        ТипГенератора = Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений");
    КонецЕсли;

    Если ИсполняемыеНастройки = Неопределено Тогда
        ИсполняемыеНастройки = СКД.НастройкиПоУмолчанию;
    КонецЕсли;

    Если СтруктураПараметров <> Неопределено Тогда
        КоллекцияЗначенийПараметров = ИсполняемыеНастройки.ПараметрыДанных.Элементы;
        Для каждого Параметр Из СтруктураПараметров Цикл
            НайденноеЗначениеПараметра = КоллекцияЗначенийПараметров.Найти(Параметр.Ключ);
            Если НайденноеЗначениеПараметра <> Неопределено Тогда
                НайденноеЗначениеПараметра.Использование = Истина;
                НайденноеЗначениеПараметра.Значение = Параметр.Значение;
            КонецЕсли;
        КонецЦикла;
    КонецЕсли;
	
	МакетКомпоновкиСКД = КомпоновщикМакета.Выполнить(СКД, ИсполняемыеНастройки, РасшифровкаСКД, МакетКомпоновки, ТипГенератора);
    ПроцессорКомпановки = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКомпановки.Инициализировать(МакетКомпоновкиСКД, ВнешниеНаборыДанных, РасшифровкаСКД, Истина);
    Если ТипЗнч(ОбъектДляЗагрузки) = Тип("ТабличныйДокумент") Тогда
        ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
        ПроцессорВывода.УстановитьДокумент(ОбъектДляЗагрузки);
    Иначе
        ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
        ПроцессорВывода.УстановитьОбъект(ОбъектДляЗагрузки);
    КонецЕсли;

    ПроцессорВывода.ОтображатьПроцентВывода = Истина;
    ПроцессорВывода.Вывести(ПроцессорКомпановки, Истина);

КонецПроцедуры 

#Иначе
ВызватьИсключение НСтр("ru = 'Недопустимый вызов объекта на клиенте.'");
#КонецЕсли