
#Область ОбработчикиСобытий

&ИзменениеИКонтроль("ОбработкаЗаполнения")
Процедура ЦППК_ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	// Создание на основании.
	Основание = Неопределено;
	РежимКопирования = Ложь;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда	
		Основание = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеЗаполнения, "Основание");
		РежимКопирования = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеЗаполнения, "РежимКопирования", Ложь);
	Иначе
		Основание = ДанныеЗаполнения;
	КонецЕсли;
	
	ТипДанныхЗаполнения = Метаданные.НайтиПоТипу(ТипЗнч(Основание));	
	Если ТипДанныхЗаполнения = Неопределено
		Или Не Метаданные.Документы.Задача.ВводитсяНаОсновании.Содержит(ТипДанныхЗаполнения) Тогда
		
		Основание = Неопределено;	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Основание) Тогда
		
		Если ТипЗнч(Основание) = Тип("СправочникСсылка.ТемыОбсуждений") Тогда
			Основание = РаботаСОбсуждениями.НайтиПервоеСообщениеТемы(Основание);
		КонецЕсли;
		
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.ВходящееПисьмо")
			Или ТипЗнч(Основание) = Тип("ДокументСсылка.ИсходящееПисьмо") Тогда
			
			РеквизитыПисьма = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "Тема, Проект");
			
			Заголовок = РеквизитыПисьма.Тема;
			Если ЗначениеЗаполнено(РеквизитыПисьма.Проект) Тогда
				Проект = РеквизитыПисьма.Проект;
			КонецЕсли;
			
			НовоеФорматированноеОписание = ИнтеграцияЗадач.ОписаниеФорматированное(Основание);
			УстановитьОписаниеФорматированное(НовоеФорматированноеОписание);
			
			СтрокаПриложения = Приложения.Добавить();
			СтрокаПриложения.Приложение = Основание;
			
		ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.Задача")
			Или ТипЗнч(Основание) = Тип("ДокументСсылка.ДействиеЗадачи") Тогда
			
			Если ТипЗнч(Основание) = Тип("ДокументСсылка.ДействиеЗадачи") Тогда
				
				ВышестоящееДействие = Основание;
				ВышестоящаяЗадача = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "Задача");
				
			ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.Задача") Тогда
				
				ВышестоящаяЗадача = Основание;
				
			Иначе
				
				ВышестоящаяЗадача = Документы.Задача.ПустаяСсылка();
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВышестоящаяЗадача) Или РежимКопирования Тогда
				
				РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
					ВышестоящаяЗадача,
					"ВышестоящаяЗадача, Заголовок, Проект, Срок, ОписаниеФорматированное, Приложения, Приоритет");
				
				Проект = РеквизитыЗадачи.Проект;
				Срок = РеквизитыЗадачи.Срок;
				Приоритет = РеквизитыЗадачи.Приоритет;
				Если РежимКопирования Тогда
					Заголовок = РеквизитыЗадачи.Заголовок;
					ВышестоящаяЗадача = РеквизитыЗадачи.ВышестоящаяЗадача;
				Иначе
					Заголовок = Строка(ВышестоящаяЗадача);
				КонецЕсли;
				
				НовоеФорматированноеОписание = РеквизитыЗадачи.ОписаниеФорматированное.Получить();
				УстановитьОписаниеФорматированное(НовоеФорматированноеОписание);
				
				Для Каждого СтараяСтрокаПриложения Из РеквизитыЗадачи.Приложения.Выгрузить() Цикл
					НоваяСтрокаПриложения = Приложения.Добавить();
					НоваяСтрокаПриложения.Приложение = СтараяСтрокаПриложения.Приложение;
				КонецЦикла;
			
			КонецЕсли;
			
			Если ТипЗнч(Основание) = Тип("ДокументСсылка.ДействиеЗадачи") Тогда
				
				Действие = Неопределено;
				
				Если ИнтеграцияЗадач.ЭтоЗадачаСогласованияВРежимеЗамечаний(Основание, Действие) Тогда
					
					Предмет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Действие, "Предмет");
					
					Заголовок = СтрШаблон(
						НСтр("ru = 'Внести замечания ""%1""'"),
						РаботаСОбсуждениями.ПолучитьПредставлениеПредмета(Предмет));
					
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(Срок) Тогда
					
					РеквизитыДействияЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
						Основание,
						"ЕстьОсобыйСрок, ОсобыйСрок");
					
					Если РеквизитыДействияЗадачи.ЕстьОсобыйСрок Тогда
						
						Срок = РеквизитыДействияЗадачи.ОсобыйСрок;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Основание) = Тип("СправочникСсылка.ГруппировкиЗадач") Тогда
			
			РеквизитыГруппировки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				Основание,
				"Проект, Исполнитель, ИсполнительРазыменован");
			
			Если ЗначениеЗаполнено(РеквизитыГруппировки.Проект)
				И ТипЗнч(РеквизитыГруппировки.Проект) = Тип("СправочникСсылка.Проекты") Тогда
				Проект = РеквизитыГруппировки.Проект;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РеквизитыГруппировки.Исполнитель)
				И РеквизитыГруппировки.Исполнитель <> Перечисления.ОтборыПоУчастникамЗадач.ТекущийПользователь  Тогда
				
				Если РеквизитыГруппировки.Исполнитель = Перечисления.ОтборыПоУчастникамЗадач.Подчиненные Тогда
					Подразделение = 
						Сотрудники.ПодразделениеСотрудника(Сотрудники.ОсновнойСотрудник());
						
					НовыеИсполнители = РаботаСЗадачами.РазыменоватьОтборПоУчастнику(
						Подразделение,
						Ложь,
						Истина,
						Истина);
				Иначе
					НовыеИсполнители = РаботаСЗадачами.РазыменоватьОтборПоУчастнику(
						РеквизитыГруппировки.Исполнитель,
						РеквизитыГруппировки.ИсполнительРазыменован,
						Истина,
						Истина);
				КонецЕсли;
				
				Если ТипЗнч(НовыеИсполнители) <> Тип("Массив") Тогда
					НовыеИсполнители = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НовыеИсполнители);
				КонецЕсли;
				НовыеИсполнители = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
					НовыеИсполнители,
					Сотрудники.ВсеСотрудникиТекущегоПользователя());
				ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияТипаИзМассива(
					НовыеИсполнители,
					Тип("СправочникСсылка.ПолныеРоли"));
				
				Если НовыеИсполнители.Количество() > 0 Тогда
					УстановитьУчастников(
						НовыеИсполнители,
						Справочники.ВидыУчастниковЗадач.Исполнитель);
					УстановитьУчастника(
						Сотрудники.ОсновнойСотрудник(),
						Справочники.ВидыУчастниковЗадач.Проверяющий);
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Основание) = Тип("СправочникСсылка.СтруктураПредприятия") Тогда
			
			СотрудникиПодразделения = Сотрудники.СотрудникиПодразделения(Основание);
			ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(
				СотрудникиПодразделения,
				Сотрудники.ТекущийПользовательИСотрудники());
			
			УстановитьУчастников(
				СотрудникиПодразделения,
				Справочники.ВидыУчастниковЗадач.Исполнитель);
			УстановитьУчастника(
				Сотрудники.ОсновнойСотрудник(),
				Справочники.ВидыУчастниковЗадач.Проверяющий);
			
		ИначеЕсли ТипЗнч(Основание) = Тип("СправочникСсылка.Пользователи") Тогда
			
			УстановитьУчастника(
				ОбщегоНазначенияДокументооборот.Сотрудник(Основание),
				Справочники.ВидыУчастниковЗадач.Исполнитель);
			УстановитьУчастника(
				Сотрудники.ОсновнойСотрудник(),
				Справочники.ВидыУчастниковЗадач.Проверяющий);
			
		ИначеЕсли ТипЗнч(Основание) = Тип("СправочникСсылка.Сотрудники") Тогда
			
			УстановитьУчастника(
				Основание,
				Справочники.ВидыУчастниковЗадач.Исполнитель);
			УстановитьУчастника(
				Сотрудники.ОсновнойСотрудник(),
				Справочники.ВидыУчастниковЗадач.Проверяющий);
			
		ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.Бронь") Тогда
			
			РеквизитыБрони = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "Сотрудник, ДатаНачала");
			Заголовок = Строка(Основание) + " - " + Строка(РеквизитыБрони.Сотрудник);
			Срок = РеквизитыБрони.ДатаНачала;
			
			СтрокаПриложения = Приложения.Добавить();
			СтрокаПриложения.Приложение = Основание;
			
		ИначеЕсли ТипЗнч(Основание) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
			
			Заголовок = Строка(Основание);
			
			СтрокаПриложения = Приложения.Добавить();
			СтрокаПриложения.Приложение = Основание;
			
			РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание,
				"Важность, ВидДокумента.ИспользоватьВажность");
			Если РеквизитыДокумента.ВидДокументаИспользоватьВажность = Истина Тогда
				Приоритет = Справочники.ПриоритетыЗадач.НайтиПоВариантуВажности(РеквизитыДокумента.Важность);
			КонецЕсли;			
			
		ИначеЕсли ТипЗнч(Основание) = Тип("СправочникСсылка.Контрагенты") Тогда
			
			Заголовок = Строка(Основание);
			
			СтрокаПриложения = Приложения.Добавить();
			СтрокаПриложения.Приложение = Основание;
			
		ИначеЕсли ТипЗнч(Основание) = Тип("СправочникСсылка.Мероприятия") Тогда
			
			РеквизитыМероприятия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Основание, "ДатаНачала");
			Заголовок = Строка(Основание);
			Срок = РеквизитыМероприятия.ДатаНачала;
			
			СтрокаПриложения = Приложения.Добавить();
			СтрокаПриложения.Приложение = Основание;
			
		ИначеЕсли ТипЗнч(Основание) = Тип("СправочникСсылка.СообщенияОбсуждений") Тогда
			
			РеквизитыСообщения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				Основание,
				"ВладелецСообщения");
			Заголовок = Строка(РеквизитыСообщения.ВладелецСообщения);
			
			СтрокаПриложения = Приложения.Добавить();
			СтрокаПриложения.Приложение = Основание;
			
		ИначеЕсли ТипЗнч(Основание) = Тип("СправочникСсылка.Файлы") Тогда
			
			Заголовок = Строка(Основание);
			
			СтрокаПриложения = Приложения.Добавить();
			СтрокаПриложения.Приложение = Основание;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Автор.
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("Автор") Тогда
		Автор = ДанныеЗаполнения.Автор;
	ИначеЕсли Не ЗначениеЗаполнено(Автор) Тогда
		Автор = Сотрудники.ОсновнойСотрудник();
	Конецесли;
	
	// Вид задачи и владелец.
	СтарыйВидЗадачи = ВидЗадачи;
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ВидЗадачи")
		И ДанныеЗаполнения.Свойство("Источник") Тогда
		
		ВидЗадачи = ДанныеЗаполнения.ВидЗадачи;
		Источник = ДанныеЗаполнения.Источник;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура")
		И ДанныеЗаполнения.Свойство("ВидЗадачи") Тогда
		
		ВидЗадачи = ДанныеЗаполнения.ВидЗадачи;
		
	ИначеЕсли РаботаСЗадачами.ЭтоИсточникЗадач(ДанныеЗаполнения) Тогда
		
		ВидЗадачи = ИнтеграцияЗадач.ВидЗадачиПоИсточнику(ДанныеЗаполнения);
		Источник = ДанныеЗаполнения;
		
		ИнтеграцияЗадач.ЗаполнитьПоИсточнику(ЭтотОбъект, ДанныеЗаполнения);
		
	ИначеЕсли Не ЗначениеЗаполнено(ВидЗадачи) Тогда
		
		ВидЗадачи = Справочники.ВидыЗадач.Поручение;
		
	КонецЕсли;
	НовыйВидЗадачи = ВидЗадачи;
	ОбновитьУчастниковПриИзмененииВидаЗадачи(СтарыйВидЗадачи, НовыйВидЗадачи);
	
	
	ДанныеВидаЗадачи = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(ВидЗадачи);
	
	// Вышестоящая задача.
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ВышестоящаяЗадача") Тогда
		ВышестоящаяЗадача = ДанныеЗаполнения.ВышестоящаяЗадача;
	Конецесли;
	
	// Дата.
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("Дата") Тогда
		Дата = ДанныеЗаполнения.Дата;
	ИначеЕсли Не ЗначениеЗаполнено(Дата) Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	// Дата начала.
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ДатаНачала") Тогда
		ДатаНачала = ДанныеЗаполнения.ДатаНачала;
	КонецЕсли;
	
	// Дата выполнения.
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ДатаВыполнения") Тогда
		ДатаВыполнения = ДанныеЗаполнения.ДатаВыполнения;
	КонецЕсли;
	
	// Дата отмены.
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ДатаОтмены") Тогда
		ДатаОтмены = ДанныеЗаполнения.ДатаОтмены;
	КонецЕсли;
	
	// Заголовок.
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("Заголовок") Тогда
		Заголовок = ДанныеЗаполнения.Заголовок;
	Конецесли;
	
	// Кто отменил.
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("КтоОтменил") Тогда
		КтоОтменил = ДанныеЗаполнения.КтоОтменил;
	Конецесли;
	
	// Описание.
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("Описание") Тогда
		УстановитьОписание(ДанныеЗаполнения.Описание);
	Конецесли;
	
	// Описание форматированное.
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ОписаниеФорматированное") Тогда
		УстановитьОписаниеФорматированное(ДанныеЗаполнения.ОписаниеФорматированное);
	Конецесли;
	
	// Приоритет.
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("Приоритет") Тогда
		Приоритет = ДанныеЗаполнения.Приоритет;
	ИначеЕсли Не ЗначениеЗаполнено(Приоритет) Тогда
		Приоритет = Справочники.ПриоритетыЗадач.ПриоритетПоУмолчанию();
	Конецесли;
	
	// Причина отмены.
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ПричинаОтмены") Тогда
		ПричинаОтмены = ДанныеЗаполнения.ПричинаОтмены;
	Конецесли;
	
	// Проект.
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("Проект") Тогда
		Проект = ДанныеЗаполнения.Проект;
	ИначеЕсли Не ЗначениеЗаполнено(Проект) И ЭтоНовый() Тогда
		Проект = РаботаСПроектами.ПолучитьПроектПоУмолчанию()
	Конецесли;
	
	// Создал.
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("Создал") Тогда
		Создал = ДанныеЗаполнения.Создал;
	ИначеЕсли Не ЗначениеЗаполнено(Создал) Тогда
		Создал = Сотрудники.ОсновнойСотрудник();
	КонецЕсли;
	
	// Состояние задачи.
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("СостояниеЗадачи") Тогда
		СостояниеЗадачи = ДанныеЗаполнения.СостояниеЗадачи;
	ИначеЕсли Не ЗначениеЗаполнено(СостояниеЗадачи) Тогда
		СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиЧерновик;
	Конецесли; 
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.ДействияОзнакомления") Тогда
		
		ПомещеноВИсторию = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения, "ПомещеноВИсторию");
		Если ПомещеноВИсторию Тогда
			СостояниеЗадачи = ДанныеВидаЗадачи.СостояниеЗадачиОтменена;
		КонецЕсли;
		
	КонецЕсли;	
	
	// Срок.
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("Срок") Тогда
		Срок = ДанныеЗаполнения.Срок;
	ИначеЕсли Не ЗначениеЗаполнено(Срок) И Не ЗначениеЗаполнено(Источник) Тогда
		
		СрокПоУмолчанию = РаботаСЗадачами.ПолучитьПерсональнуюНастройку("СрокПоУмолчанию");
		Если ЗначениеЗаполнено(СрокПоУмолчанию) Тогда
			
			Срок = НачалоДня(ТекущаяДатаСеанса()) + СрокПоУмолчанию * 86400; // 86400 - число секунд в дне.
			ГрафикРаботы = ГрафикиРаботы.ГрафикРаботыСотрудника(
				Сотрудники.ОсновнойСотрудник());
			Если ЗначениеЗаполнено(ГрафикРаботы) Тогда
				Срок = ГрафикиРаботы.ПолучитьПоследнееРабочееВремяДня(ГрафикРаботы, Срок);
			Иначе
				Срок = КонецДня(Срок);
			КонецЕсли;
			
		КонецЕсли;
		
	Конецесли;
	
	// Приложения.
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("Приложения") Тогда
		
		НесколькоПроектов = Ложь;
		ВозможныйПроект = Справочники.Проекты.ПустаяСсылка();
		
		Приложения.Очистить();
		Для Каждого Приложение Из ДанныеЗаполнения.Приложения Цикл
			
			СтрокаПриложения = Приложения.Добавить();
			СтрокаПриложения.Приложение = Приложение;
			
			ПроектПриложения = ПроектПриложения(Приложение);
			Если ЗначениеЗаполнено(ПроектПриложения) Тогда
				Если Не ЗначениеЗаполнено(ВозможныйПроект) Тогда
					ВозможныйПроект = ПроектПриложения;
				ИначеЕсли ВозможныйПроект <> ПроектПриложения Тогда
					НесколькоПроектов = Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ВозможныйПроект)
			И Не НесколькоПроектов
			И Не ЗначениеЗаполнено(Проект)
			И Не ДанныеЗаполнения.Свойство("Проект") Тогда
			Проект = ВозможныйПроект;
		КонецЕсли;
		
#Вставка
		ОбрабатываемыеПриложения = ДанныеЗаполнения.Приложения;
		Для каждого Приложение из ОбрабатываемыеПриложения Цикл
			Если ТипЗнч(Приложение) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
				РевизитыВидаДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Приложение.ВидДокумента, "ЯвляетсяВходящейКорреспонденцией, ЯвляетсяЗаявкойНаВозврат");
				РевизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Приложение, "СрокИсполнения");
				Если РевизитыВидаДокумента.ЯвляетсяВходящейКорреспонденцией И НЕ РевизитыВидаДокумента.ЯвляетсяЗаявкойНаВозврат Тогда
					СрокИсполнения = РевизитыДокумента.СрокИсполнения;
				КонецЕсли; 
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(СрокИсполнения) Тогда
			//++AxelSoft Шарапова 06.01.2024 САНФ-029987
			// Смена времени исполнения на данные в константе ЦППК_ГраницаВремениСрокаИсполнения
			//--AxelSoft Шарапова 06.01.2024 САНФ-029987
			Если ЗначениеЗаполнено(СрокИсполнения) Тогда		
				СрокИсполнения = ЦППК_ОбщийМодульВызовСервера.ОбновитьСрокПоДаннымГраницыВремениСрокаИсполнения(СрокИсполнения);
			КонецЕсли;
		КонецЕсли;
#КонецВставки

	КонецЕсли;
	
	// Шаблоны задач.
	Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.ШаблоныЗадач") Тогда
		ЗаполнитьПоШаблону(ДанныеЗаполнения);
	КонецЕсли;
	
	#Вставка
	//+ЦППК САНФ-023245, САНФ-023288 30.01.2024            
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("Приложения") И ДанныеЗаполнения.Свойство("РежимРаботы") Тогда
		Если ДанныеЗаполнения.РежимРаботы = "ОтправкаОбъектов" Тогда
			Если ДанныеЗаполнения.ВидЗадачи = Справочники.ВидыЗадач.Поручение Тогда
				ЗаполнитьАвторПровяющийСрокИсполнения(ДанныеЗаполнения, Справочники.ВидыУчастниковЗадач.Проверяющий);
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ДействиеЗадачи") Тогда
		Если ВидЗадачи = Справочники.ВидыЗадач.Поручение 
			ИЛИ ВидЗадачи = Справочники.ВидыЗадач.Ознакомление
			ИЛИ ВидЗадачи = Справочники.ВидыЗадач.Рассмотрение Тогда
			
			Автор_ = ЦППК_ОбщийМодульКлиентСервер.ПолучитьПроверяющегоАвтора();
			Если Автор_ <> Неопределено Тогда
				Автор = Автор_;
				Проверяющий = Автор;
			КонецЕсли;
		КонецЕсли;
		Если ВидЗадачи = Справочники.ВидыЗадач.Поручение Тогда
			Автор_ = ЦППК_ОбщийМодульКлиентСервер.ПолучитьПроверяющегоАвтора();
			Если Автор_ <> Неопределено Тогда
				Участники.Очистить();
				СтрокаУчастники = Участники.Добавить();
				СтрокаУчастники.ВидУчастника = Справочники.ВидыУчастниковЗадач.Проверяющий;
				СтрокаУчастники.Участник = Автор_;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	//-ЦППК 30.01.2024
	#КонецВставки

	УзелОбработки = КОДПовтИсп.ИдентификаторТекущегоУзла();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьАвторПровяющийСрокИсполнения(ДанныеЗаполнения, ВидУчастника) //+ЦППК САНФ-023288 31.01.2024
	
	Автор_ = ЦППК_ОбщийМодульКлиентСервер.ПолучитьПроверяющегоАвтора();
	Если Автор_ <> Неопределено Тогда
		Автор = Автор_;
		
		Участники.Очистить();
		СтрокаУчастники = Участники.Добавить();
		СтрокаУчастники.ВидУчастника = ВидУчастника;
		СтрокаУчастники.Участник = Автор;
	КонецЕсли;
	
	ДокументПредприятия = ДанныеЗаполнения.Приложения[0];
	Если ЗначениеЗаполнено(ДокументПредприятия) Тогда 
		Срок_ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументПредприятия, "СрокИсполнения");
		Если ЗначениеЗаполнено(Срок_) Тогда 
			//++AxelSoft Шарапова 06.01.2024 САНФ-029987
			// Смена времени исполнения на конец дня
			//--AxelSoft Шарапова 06.01.2024 САНФ-029987
			Срок = КонецДня(Срок_);
		КонецЕсли;
	КонецЕсли;  
	
КонецПроцедуры //-ЦППК 31.01.2024

&ИзменениеИКонтроль("ОписаниеФорматированныйДокумент")
Функция ЦППК_ОписаниеФорматированныйДокумент(ТекущееДействиеЗадачи, ОтображатьИсториюВыполнения, ВключатьНавигационныеСсылки, КлючНазначения, КешДанных, КодЯзыка)

	//@skip-check new-font
	// Ошибка платформы - теряется жирность если использовать шрифт стиля ШрифтОписанияЗадачи
	ОбычныйШрифт = Новый Шрифт("Arial", 10);
	//@skip-check new-font
	// Ошибка платформы - теряется жирность если использовать шрифт стиля ШрифтЗаголовкаЗадачи
	ЖирныйШрифт = Новый Шрифт("Arial", 10, Истина);

	ВидСостоянияЗадачи = РаботаСЗадачамиПовтИсп.ВидСостоянияЗадач(СостояниеЗадачи);
	ЭтоВыполненнаяЗадача = Перечисления.ВидыСостоянийЗадач.ЭтоВыполненнаяЗадача(ВидСостоянияЗадачи);

	ОписаниеПоступившихОбновленийЗадачи = "";
	ЗаголовокДействия = "";
	ИсточникДействия = Неопределено;
	Исполнитель = Неопределено;
	ЕстьЗамещающие = Ложь;
	ВидЭтогоУчастника = Неопределено;
	ЭтоИсполнитель = Ложь;
	ЭтоОтветственный = Ложь;
	ОсобоеОписаниеФорматированное = Неопределено;
	ОтображаемыйСрок = Срок;
	ФактическийИсполнитель = Справочники.ФактическиеИсполнители.ПустаяСсылка();
	ВидДействия = Справочники.ВидыДействийЗадач.ПустаяСсылка();
	РезультатДействияТекстом = "";
	ФлагОтображаемый = Флаг;
	Если ЗначениеЗаполнено(ТекущееДействиеЗадачи) Тогда

		КэшОбластиПросмотра = КэшиНаВремяВызоваПовтИсп.КэшЗадачаОбластьПросмотра();

		Если КэшОбластиПросмотра.Заполнен И КэшОбластиПросмотра.ДействиеЗадачи = ТекущееДействиеЗадачи Тогда
			РеквизитыДействия = КэшОбластиПросмотра.РеквизитыДействияЗадачи;
		ИначеЕсли ТипЗнч(ТекущееДействиеЗадачи) = Тип("СтрокаТаблицыЗначений") Тогда
			РеквизитыДействия = ТекущееДействиеЗадачи;
		Иначе
			РеквизитыДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			ТекущееДействиеЗадачи,
			"ВидДействия, ВидУчастника, ЕстьОсобыйСрок, ОсобыйЗаголовок, ОсобоеОписание, ОсобоеОписаниеФорматированное,
			|ОсобыйСрок, Источник, Исполнитель, ФактическийИсполнитель, СостояниеУчастникаЗадачи, РезультатДействияТекстом,
			|Флаг");
		КонецЕсли;

		ВидСостоянияУчастниковЗадач = РаботаСЗадачамиПовтИсп.ВидСостоянияУчастниковЗадач(
		РеквизитыДействия.СостояниеУчастникаЗадачи);
		ОжидаетВыполнения = Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоОжидаемоеДействие(ВидСостоянияУчастниковЗадач);

		ЗаголовокДействия = Документы.ДействиеЗадачи.ЗаголовокДействияЗадачи(
		РеквизитыДействия.ВидДействия,
		РеквизитыДействия.ОсобыйЗаголовок,
		Строка(Ссылка));
		Исполнитель = РеквизитыДействия.Исполнитель;
		ИсточникДействия = РеквизитыДействия.Источник;
		ФактическийИсполнитель = РеквизитыДействия.ФактическийИсполнитель;
		Если ЗначениеЗаполнено(СокрЛП(РеквизитыДействия.ОсобоеОписание)) Тогда
			ОсобоеОписаниеФорматированное = РеквизитыДействия.ОсобоеОписаниеФорматированное.Получить();
		КонецЕсли;

		ОтображаемыйСрок = Документы.ДействиеЗадачи.Срок(
		РеквизитыДействия.ЕстьОсобыйСрок,
		РеквизитыДействия.ОсобыйСрок,
		Срок);

		Если ТипЗнч(ТекущееДействиеЗадачи) = Тип("СтрокаТаблицыЗначений") Тогда
			ЕстьЗамещающие = ТекущееДействиеЗадачи.ЕстьЗамещающие;
		Иначе
			ДанныеДействияЗадачи = РаботаСЗадачами.ДанныеДействияЗадачи(ТекущееДействиеЗадачи);
			Если ДанныеДействияЗадачи = Неопределено Тогда
				ЕстьЗамещающие = Ложь;
			Иначе
				ЕстьЗамещающие = ДанныеДействияЗадачи.ЕстьЗамещающие;
			КонецЕсли;
		КонецЕсли;

		ВидЭтогоУчастника = РеквизитыДействия.ВидУчастника;
		ЭтоИсполнитель = РаботаСЗадачамиПовтИсп.ЭтоИсполнитель(РеквизитыДействия.ВидУчастника);
		ЭтоОтветственный = РаботаСЗадачамиПовтИсп.ЭтоОтветственный(РеквизитыДействия.ВидУчастника);

		Если ТипЗнч(ТекущееДействиеЗадачи) = Тип("СтрокаТаблицыЗначений") Тогда
			ОписаниеПоступившихОбновленийЗадачи = ТекущееДействиеЗадачи.ОписаниеПоступившихОбновлений;
		Иначе
			ОписаниеПоступившихОбновленийЗадачи =
			РаботаСЗадачами.ОписаниеПоступившихОбновленийЗадачи(ТекущееДействиеЗадачи);
		КонецЕсли;

		ВидДействия = РеквизитыДействия.ВидДействия;
		РезультатДействияТекстом = РеквизитыДействия.РезультатДействияТекстом;
		ФлагОтображаемый = РеквизитыДействия.Флаг;

	КонецЕсли;

	Если ОжидаетВыполнения = Неопределено Тогда
		ВидСостоянияЗадачи = РаботаСЗадачамиПовтИсп.ВидСостоянияЗадач(СостояниеЗадачи);
		ОжидаетВыполнения = Перечисления.ВидыСостоянийЗадач.ЭтоОжидающаяВыполненияЗадача(ВидСостоянияЗадачи);
	КонецЕсли;

	// Описание.
	ФорматированныйДокумент = Неопределено;
	Если ОсобоеОписаниеФорматированное <> Неопределено Тогда
		ФорматированныйДокумент = ОсобоеОписаниеФорматированное;
	КонецЕсли;
	Если ФорматированныйДокумент = Неопределено Тогда
		ФорматированныйДокумент = ОписаниеФорматированное.Получить();
	КонецЕсли;
	Если ТипЗнч(ФорматированныйДокумент) <> Тип("ФорматированныйДокумент") Тогда
		ФорматированныйДокумент = Новый ФорматированныйДокумент;
	КонецЕсли;

	Если Не ПустаяСтрока(ФорматированныйДокумент.ПолучитьТекст()) Тогда
		// Нормализуем параграфы документа (для случай если используется параграф список или нумерованный).
		ТекстHTML = "";
		Вложения = Новый Структура;
		ФорматированныйДокумент.ПолучитьHTML(ТекстHTML, Вложения);

		ТекстЗаголовка = ?(ЗначениеЗаполнено(ЗаголовокДействия), ЗаголовокДействия, Заголовок);
		Если Не ЗначениеЗаполнено(ТекстЗаголовка) Тогда
			ТекстЗаголовка = " ";
		КонецЕсли;

		ТекстHTML = СтрЗаменить(ТекстHTML, "<body>", "<body><p></p>");
		ТекстHTML = СтрЗаменить(ТекстHTML, "</body>", "<p></p></body>");

		ФорматированныйДокумент.УстановитьHTML(ТекстHTML, Вложения);	
	Иначе
		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
		ФорматированныйДокумент.ПолучитьЗакладкуКонца(),
		Неопределено,
		Тип("ПереводСтрокиФорматированногоДокумента"));
	КонецЕсли;

	// Заголовок
	ЗакладкаНачала = ФорматированныйДокумент.ПолучитьЗакладкуНачала();

	ТекстЗаголовка = ?(ЗначениеЗаполнено(ЗаголовокДействия), ЗаголовокДействия, Заголовок);
	Если Не ЗначениеЗаполнено(ТекстЗаголовка) Тогда
		ТекстЗаголовка = " ";
	КонецЕсли;
	#Вставка 
	ЦППК_ЭтоВопрос = Ложь;
	Если ВидЗадачи = Справочники.ВидыЗадач.Вопрос Тогда
		Если СтрНайти(ТекстЗаголовка, "Рассмотреть вопрос:") Тогда
			ТекстЗаголовка = НСтр("ru='Рассмотреть вопрос: '");
		ИначеЕсли СтрНайти(ТекстЗаголовка, "Ознакомиться с ответом на вопрос:") Тогда
			ЦППК_ЭтоВопрос = Истина;
			ТекстЗаголовка = НСтр("ru='Ознакомиться с ответом на вопрос: '");	
		КонецЕсли;   
	КонецЕсли;
	#КонецВставки
	
	ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
	ЗакладкаНачала,
	ТекстЗаголовка,
	Тип("ТекстФорматированногоДокумента"));
	//@skip-check new-font
	// Ошибка платформы - теряется жирность если использовать шрифт стиля ШрифтЗаголовкаЗадачи
	ТекущийЭлементДокумента.Шрифт = Новый Шрифт("Arial", 10, Истина);

	КартинкаПриоритета = Справочники.ПриоритетыЗадач.КартинкаПриоритета(Приоритет);
	Если КартинкаПриоритета.Вид <> ВидКартинки.Пустая Тогда
		КартинкаПриоритета = Новый Картинка(КартинкаПриоритета.ПолучитьДвоичныеДанные());
		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
		ТекущийЭлементДокумента.ЗакладкаКонца,
		КартинкаПриоритета,
		Тип("КартинкаФорматированногоДокумента"));
	КонецЕсли;

	Если ЗначениеЗаполнено(ФлагОтображаемый) Тогда
		КартинкаФлага = Перечисления.ФлагиОбъектов.КартинкаФлага(ФлагОтображаемый);
		Если КартинкаФлага.Вид <> ВидКартинки.Пустая Тогда
			КартинкаФлага = Новый Картинка(КартинкаФлага.ПолучитьДвоичныеДанные());
			ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
			ТекущийЭлементДокумента.ЗакладкаКонца,
			КартинкаФлага,
			Тип("КартинкаФорматированногоДокумента"));
		КонецЕсли;
	КонецЕсли;

	// Поступили обновления.
	Если ЗначениеЗаполнено(ОписаниеПоступившихОбновленийЗадачи) Тогда

		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
		ТекущийЭлементДокумента.ЗакладкаКонца,
		Неопределено,
		Тип("ПереводСтрокиФорматированногоДокумента"));

		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
		ТекущийЭлементДокумента.ЗакладкаКонца,
		ОписаниеПоступившихОбновленийЗадачи,
		Тип("ТекстФорматированногоДокумента"));
		ТекущийЭлементДокумента.Шрифт = ОбычныйШрифт;
		ТекущийЭлементДокумента.ЦветТекста = ЦветаСтиля.ИнформационнаяНадпись;

	КонецЕсли;

	// Результат обработки результата.
	ЗакладкаКонца = ФорматированныйДокумент.ПолучитьЗакладкуКонца();
	ТекущийЭлементДокумента = Новый Структура("ЗакладкаКонца", ЗакладкаКонца);

	Если ЭтоИсполнитель Тогда

		РезультатОбработкиРезультата = РаботаСЗадачами.РезультатОбработкиРезультата(
		ТекущееДействиеЗадачи,
		КешДанных,
		КодЯзыка);
		Если РезультатОбработкиРезультата.ЕстьРезультат Тогда

			Если ЗначениеЗаполнено(РезультатОбработкиРезультата.РезультатТекстом) Тогда

				ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
				ТекущийЭлементДокумента.ЗакладкаКонца,
				Неопределено,
				Тип("ПереводСтрокиФорматированногоДокумента"));

				ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
				ТекущийЭлементДокумента.ЗакладкаКонца,
				СтрШаблон("%1: ", РезультатОбработкиРезультата.Заголовок),
				Тип("ТекстФорматированногоДокумента"));
				ТекущийЭлементДокумента.Шрифт = ЖирныйШрифт;

				ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
				ТекущийЭлементДокумента.ЗакладкаКонца,
				РезультатОбработкиРезультата.РезультатТекстом,
				Тип("ТекстФорматированногоДокумента"));
				ТекущийЭлементДокумента.Шрифт = ОбычныйШрифт;

			КонецЕсли;

			Для Каждого Приложение Из РезультатОбработкиРезультата.Приложения Цикл

				ПредставлениеПриложения = "";
				НавигационнаяСсылкаПриложения = "";

				Если ТипЗнч(Приложение) = Тип("СправочникСсылка.Файлы") Тогда

					РеквизитыФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
					Приложение,
					"ПолноеНаименование, ТекущаяВерсияРасширение");

					ПредставлениеПриложения = РеквизитыФайла.ПолноеНаименование;
					Если ЗначениеЗаполнено(РеквизитыФайла.ТекущаяВерсияРасширение) Тогда
						ПредставлениеПриложения = СтрШаблон(
						"%1.%2",
						ПредставлениеПриложения,
						РеквизитыФайла.ТекущаяВерсияРасширение);
					КонецЕсли;

					НавигационнаяСсылкаПриложения = СтрШаблон(
					"v8doc:tasks/ShowFile/%1",
					ПолучитьНавигационнуюСсылку(Приложение));

				Иначе

					ПредставлениеПриложения = Строка(Приложение);
					НавигационнаяСсылкаПриложения = СтрШаблон(
					"v8doc:%1",
					ПолучитьНавигационнуюСсылку(Приложение));

				КонецЕсли;

				Если Не ЗначениеЗаполнено(ПредставлениеПриложения) Тогда
					ПредставлениеПриложения = НСтр("ru = 'Приложение'", КодЯзыка);
				КонецЕсли;

				ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
				ТекущийЭлементДокумента.ЗакладкаКонца,
				Неопределено,
				Тип("ПереводСтрокиФорматированногоДокумента"));

				КартинкаСкрепка = Новый Картинка(
				БиблиотекаКартинок.Скрепка.ПолучитьДвоичныеДанные());
				ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
				ТекущийЭлементДокумента.ЗакладкаКонца,
				КартинкаСкрепка,
				Тип("КартинкаФорматированногоДокумента"));
				Если ВключатьНавигационныеСсылки  Тогда
					ТекущийЭлементДокумента.НавигационнаяСсылка = НавигационнаяСсылкаПриложения;
				КонецЕсли;

				ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
				ТекущийЭлементДокумента.ЗакладкаКонца,
				ПредставлениеПриложения,
				Тип("ТекстФорматированногоДокумента"));
				Если ВключатьНавигационныеСсылки Тогда
					ТекущийЭлементДокумента.НавигационнаяСсылка = НавигационнаяСсылкаПриложения;
				КонецЕсли;

			КонецЦикла; 

			ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
			ТекущийЭлементДокумента.ЗакладкаКонца,
			Неопределено,
			Тип("ПереводСтрокиФорматированногоДокумента"));

		КонецЕсли;

	КонецЕсли;

	// Основные реквизиты.
	ЕстьРеквизитВышестоящаяЗадача = ЗначениеЗаполнено(ВышестоящаяЗадача) Или ЗначениеЗаполнено(ВышестоящееДействие);
	ЕстьРеквизитНачалоПлан = ЗначениеЗаполнено(ДатаНачалаПлан);
	ЕстьРеквизитСрок = ЗначениеЗаполнено(ОтображаемыйСрок);
	ЕстьРеквизитАвтор = ЗначениеЗаполнено(Автор);
	ЕстьРеквизитИсполнитель = ЗначениеЗаполнено(Исполнитель);
	ЕстьРеквизитОтменил = ЗначениеЗаполнено(КтоОтменил);

	ЕстьОсновныеРеквизиты = ЕстьРеквизитВышестоящаяЗадача
	Или ЕстьРеквизитНачалоПлан
	Или ЕстьРеквизитСрок
	Или ЕстьРеквизитАвтор
	Или ЕстьРеквизитИсполнитель
	Или ЕстьРеквизитОтменил;

	Если ЕстьОсновныеРеквизиты Тогда
		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
		ТекущийЭлементДокумента.ЗакладкаКонца,
		Неопределено,
		Тип("ПереводСтрокиФорматированногоДокумента"));
	КонецЕсли;

	// Отменил.
	Если ЕстьРеквизитОтменил Тогда

		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
		ТекущийЭлементДокумента.ЗакладкаКонца,
		СтрШаблон("%1 %2 ",
		Формат(ДатаОтмены, Метаданные.Документы.Задача.Реквизиты.ДатаОтмены.Формат),
		НСтр("ru = 'отменил'", КодЯзыка)),
		Тип("ТекстФорматированногоДокумента"));
		ТекущийЭлементДокумента.Шрифт = ОбычныйШрифт;

		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
		ТекущийЭлементДокумента.ЗакладкаКонца,
		КтоОтменил,
		Тип("ТекстФорматированногоДокумента"));
		ТекущийЭлементДокумента.Шрифт = ОбычныйШрифт;
		Если ВключатьНавигационныеСсылки Тогда
			ТекущийЭлементДокумента.НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(КтоОтменил);
		КонецЕсли;

		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
		ТекущийЭлементДокумента.ЗакладкаКонца,
		Неопределено,
		Тип("ПереводСтрокиФорматированногоДокумента"));

	КонецЕсли;

	// Вышестоящая задача.
	Если ЕстьРеквизитВышестоящаяЗадача Тогда
        #Вставка 
		Если НЕ ЦППК_ЭтоВопрос Тогда		
		#КонецВставки
		ВышестоящаяЗадачаИлиДействие = ВышестоящаяЗадачаИлиДействие();

		ВидимостьВышестоящейЗадачи = ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(ВышестоящаяЗадачаИлиДействие).Чтение;

		Если ВидимостьВышестоящейЗадачи Тогда

			ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
			ТекущийЭлементДокумента.ЗакладкаКонца,
			СтрШаблон("%1: ", НСтр("ru = 'Вышестоящая задача'", КодЯзыка)),
			Тип("ТекстФорматированногоДокумента"));
			ТекущийЭлементДокумента.Шрифт = ЖирныйШрифт;

			ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
			ТекущийЭлементДокумента.ЗакладкаКонца,
			ВышестоящаяЗадачаИлиДействие,
			Тип("ТекстФорматированногоДокумента"));
			ТекущийЭлементДокумента.Шрифт = ОбычныйШрифт;
			Если ВключатьНавигационныеСсылки Тогда
				ТекущийЭлементДокумента.НавигационнаяСсылка =
				СтрШаблон(
				"v8doc:tasks/ShowTaskAction/%1",
				ПолучитьНавигационнуюСсылку(ВышестоящаяЗадачаИлиДействие));
			КонецЕсли;

			ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
			ТекущийЭлементДокумента.ЗакладкаКонца,
			Неопределено,
			Тип("ПереводСтрокиФорматированногоДокумента"));

		КонецЕсли;

		#Вставка 
		КонецЕсли;	
		#КонецВставки
	КонецЕсли;

	// Кому.
	Если ЕстьРеквизитИсполнитель Тогда

		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
		ТекущийЭлементДокумента.ЗакладкаКонца,
		СтрШаблон("%1: ", НСтр("ru = 'Кому'", КодЯзыка)),
		Тип("ТекстФорматированногоДокумента"));
		ТекущийЭлементДокумента.Шрифт = ЖирныйШрифт;

		ДанныеДействия = Новый Структура("ДействиеЗадачи, Участник, ЕстьЗамещающие, ФактическийИсполнитель");
		Если ТипЗнч(ТекущееДействиеЗадачи) = Тип("СтрокаТаблицыЗначений") Тогда
			ДанныеДействия.ДействиеЗадачи = ТекущееДействиеЗадачи.Ссылка;
		Иначе
			ДанныеДействия.ДействиеЗадачи = ТекущееДействиеЗадачи;
		КонецЕсли;
		ДанныеДействия.Участник = Исполнитель;
		ДанныеДействия.ЕстьЗамещающие = ЕстьЗамещающие;
		ДанныеДействия.ФактическийИсполнитель = ФактическийИсполнитель;
		ДанныеДействий = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеДействия);
		ПредставленияИсполнителей =
		РаботаСЗадачами.ПредставленияИсполнителейДействийЗадач(ДанныеДействий, Истина);
		ИсполнительСтрокой = ПредставленияИсполнителей[ДанныеДействия.ДействиеЗадачи];

		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
		ТекущийЭлементДокумента.ЗакладкаКонца,
		ИсполнительСтрокой,
		Тип("ТекстФорматированногоДокумента"));
		ТекущийЭлементДокумента.Шрифт = ОбычныйШрифт;
		Если ВключатьНавигационныеСсылки Тогда
			ТекущийЭлементДокумента.НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Исполнитель);
		КонецЕсли;

		Если ЭтоОтветственный Тогда
			ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
			ТекущийЭлементДокумента.ЗакладкаКонца,
			СтрШаблон(" (%1)", НСтр("ru = 'ответственный'", КодЯзыка)),
			Тип("ТекстФорматированногоДокумента"));
		КонецЕсли;

		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
		ТекущийЭлементДокумента.ЗакладкаКонца,
		Неопределено,
		Тип("ПереводСтрокиФорматированногоДокумента"));

	КонецЕсли;

	// Дата начала план.
	Если ЕстьРеквизитНачалоПлан Тогда

		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
		ТекущийЭлементДокумента.ЗакладкаКонца,
		СтрШаблон("%1: ", НСтр("ru = 'Начало (план)'", КодЯзыка)),
		Тип("ТекстФорматированногоДокумента"));
		ТекущийЭлементДокумента.Шрифт = ЖирныйШрифт;

		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
		ТекущийЭлементДокумента.ЗакладкаКонца,
		Формат(ДатаНачалаПлан, РаботаСЗадачами.ФорматСрока()),
		Тип("ТекстФорматированногоДокумента"));
		ТекущийЭлементДокумента.Шрифт = ОбычныйШрифт;

		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
		ТекущийЭлементДокумента.ЗакладкаКонца,
		Неопределено,
		Тип("ПереводСтрокиФорматированногоДокумента"));

	КонецЕсли;

	// Срок.
	Если ЕстьРеквизитСрок Тогда

		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
		ТекущийЭлементДокумента.ЗакладкаКонца,
		СтрШаблон("%1: ", НСтр("ru = 'Срок'", КодЯзыка)),
		Тип("ТекстФорматированногоДокумента"));
		ТекущийЭлементДокумента.Шрифт = ЖирныйШрифт;

		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
		ТекущийЭлементДокумента.ЗакладкаКонца,
		Формат(ОтображаемыйСрок, РаботаСЗадачами.ФорматСрока()),
		Тип("ТекстФорматированногоДокумента"));
		ТекущийЭлементДокумента.Шрифт = ОбычныйШрифт;
		Если ОтображаемыйСрок < ТекущаяДатаСеанса() И ОжидаетВыполнения Тогда
			ТекущийЭлементДокумента.ЦветТекста = ЦветаСтиля.ПросроченныеДанныеЦвет;
		КонецЕсли;
		Если Не ЭтоВыполненнаяЗадача
			И ПолучитьФункциональнуюОпцию("ВестиУчетПереносовСроковЗадач")
			И ВключатьНавигационныеСсылки Тогда
			Если ЗначениеЗаполнено(ТекущееДействиеЗадачи)
				И ТипЗнч(ТекущееДействиеЗадачи) = Тип("СтрокаТаблицыЗначений") Тогда
				ТекущийЭлементДокументаСсылка = ТекущееДействиеЗадачи.Ссылка;
			ИначеЕсли ЗначениеЗаполнено(ТекущееДействиеЗадачи) Тогда
				ТекущийЭлементДокументаСсылка = ТекущееДействиеЗадачи;
			Иначе
				ТекущийЭлементДокументаСсылка = Ссылка;
			КонецЕсли;
			ТекущийЭлементДокумента.НавигационнаяСсылка = СтрШаблон(
			"v8doc:tasks/ChangeDueDate/%1",
			ПолучитьНавигационнуюСсылку(ТекущийЭлементДокументаСсылка));
		КонецЕсли;

		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
		ТекущийЭлементДокумента.ЗакладкаКонца,
		Неопределено,
		Тип("ПереводСтрокиФорматированногоДокумента"));

	КонецЕсли;

	// Автор.
	Если ЕстьРеквизитАвтор Тогда

		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
		ТекущийЭлементДокумента.ЗакладкаКонца,
		СтрШаблон("%1: ", НСтр("ru = 'Автор'", КодЯзыка)),
		Тип("ТекстФорматированногоДокумента"));
		ТекущийЭлементДокумента.Шрифт = ЖирныйШрифт;

		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
		ТекущийЭлементДокумента.ЗакладкаКонца,
		Автор,
		Тип("ТекстФорматированногоДокумента"));
		ТекущийЭлементДокумента.Шрифт = ОбычныйШрифт;
		Если ВключатьНавигационныеСсылки Тогда
			ТекущийЭлементДокумента.НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Автор);
		КонецЕсли;

		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
		ТекущийЭлементДокумента.ЗакладкаКонца,
		Неопределено,
		Тип("ПереводСтрокиФорматированногоДокумента"));

	КонецЕсли;

	// Перенаправил.
	Если ТипЗнч(ТекущееДействиеЗадачи) = Тип("СтрокаТаблицыЗначений") Тогда
		СведенияОПеренаправлении = ТекущееДействиеЗадачи.СведенияОПеренаправлении;
	Иначе
		СведенияОПеренаправлении = РегистрыСведений.ИсторияЗадач.СведенияОПеренаправлении(Ссылка, ТекущееДействиеЗадачи);
	КонецЕсли;
	Если СведенияОПеренаправлении.БылоПеренаправление Тогда

		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
		ТекущийЭлементДокумента.ЗакладкаКонца,
		СтрШаблон("%1: ", НСтр("ru = 'Перенаправил'", КодЯзыка)),
		Тип("ТекстФорматированногоДокумента"));
		ТекущийЭлементДокумента.Шрифт = ЖирныйШрифт;

		ЕстьКтоПеренаправил = Ложь;
		Если ЗначениеЗаполнено(СведенияОПеренаправлении.КтоПеренаправил) Тогда

			ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
			ТекущийЭлементДокумента.ЗакладкаКонца,
			СведенияОПеренаправлении.КтоПеренаправил,
			Тип("ТекстФорматированногоДокумента"));
			ТекущийЭлементДокумента.Шрифт = ОбычныйШрифт;
			Если ВключатьНавигационныеСсылки Тогда
				ТекущийЭлементДокумента.НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(
				СведенияОПеренаправлении.КтоПеренаправил);
			КонецЕсли;

			ЕстьКтоПеренаправил = Истина;

		КонецЕсли;

		Если ЗначениеЗаполнено(СведенияОПеренаправлении.Комментарий) Тогда

			ШаблонКомментария = ?(ЕстьКтоПеренаправил, ", %1", "%1");

			ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
			ТекущийЭлементДокумента.ЗакладкаКонца,
			СтрШаблон(ШаблонКомментария, СведенияОПеренаправлении.Комментарий),
			Тип("ТекстФорматированногоДокумента"));
			ТекущийЭлементДокумента.Шрифт = ОбычныйШрифт;

		КонецЕсли;

		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
		ТекущийЭлементДокумента.ЗакладкаКонца,
		Неопределено,
		Тип("ПереводСтрокиФорматированногоДокумента"));

	КонецЕсли; 


	// проект резолюции.
	Если ЗначениеЗаполнено(РезультатДействияТекстом) 
		И ВидДействия = Справочники.ВидыДействийЗадач.Рассмотреть Тогда

		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
		ТекущийЭлементДокумента.ЗакладкаКонца,
		СтрШаблон("%1: ", НСтр("ru = 'Проект резолюции'", КодЯзыка)),
		Тип("ТекстФорматированногоДокумента"));
		ТекущийЭлементДокумента.Шрифт = ЖирныйШрифт;

		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
		ТекущийЭлементДокумента.ЗакладкаКонца,
		РезультатДействияТекстом,
		Тип("ТекстФорматированногоДокумента"));
		ТекущийЭлементДокумента.Шрифт = ОбычныйШрифт;

		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
		ТекущийЭлементДокумента.ЗакладкаКонца,
		Неопределено,
		Тип("ПереводСтрокиФорматированногоДокумента"));

	КонецЕсли;


	// Проект.
	Если ЗначениеЗаполнено(Проект) Тогда

		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
		ТекущийЭлементДокумента.ЗакладкаКонца,
		СтрШаблон("%1: ", НСтр("ru = 'Проект'", КодЯзыка)),
		Тип("ТекстФорматированногоДокумента"));
		ТекущийЭлементДокумента.Шрифт = ЖирныйШрифт;

		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
		ТекущийЭлементДокумента.ЗакладкаКонца,
		Проект,
		Тип("ТекстФорматированногоДокумента"));
		ТекущийЭлементДокумента.Шрифт = ОбычныйШрифт;
		Если ВключатьНавигационныеСсылки Тогда
			ТекущийЭлементДокумента.НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Проект);
		КонецЕсли;

		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
		ТекущийЭлементДокумента.ЗакладкаКонца,
		Неопределено,
		Тип("ПереводСтрокиФорматированногоДокумента"));

	КонецЕсли;

	// Цикл и история.
	ДанныеЦиклов = ИнтеграцияЗадач.ДанныеЦиклов(ИсточникДействия, КешДанных);
	Если ДанныеЦиклов <> Неопределено Тогда

		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
		ТекущийЭлементДокумента.ЗакладкаКонца,
		Неопределено,
		Тип("ПереводСтрокиФорматированногоДокумента"));

		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
		ТекущийЭлементДокумента.ЗакладкаКонца,
		СтрШаблон("%1: ", НСтр("ru = 'Цикл'", КодЯзыка)),
		Тип("ТекстФорматированногоДокумента"));
		ТекущийЭлементДокумента.Шрифт = ЖирныйШрифт;
		Если ВключатьНавигационныеСсылки Тогда
			ТекущийЭлементДокумента.НавигационнаяСсылка = ДанныеЦиклов.НавигационнаяСсылкаИстории;
		КонецЕсли;

		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
		ТекущийЭлементДокумента.ЗакладкаКонца,
		ДанныеЦиклов.НомерИтерации,
		Тип("ТекстФорматированногоДокумента"));
		ТекущийЭлементДокумента.Шрифт = ОбычныйШрифт;
		Если ВключатьНавигационныеСсылки Тогда
			ТекущийЭлементДокумента.НавигационнаяСсылка = ДанныеЦиклов.НавигационнаяСсылкаИстории;
		КонецЕсли;

		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
		ТекущийЭлементДокумента.ЗакладкаКонца,
		Неопределено,
		Тип("ПереводСтрокиФорматированногоДокумента"));

	КонецЕсли;

	// Общий результат.
	ДанныеСоисполнителей = РаботаСЗадачами.ДанныеСоисполнителей(
	Ссылка,
	ТекущееДействиеЗадачи,
	КлючНазначения,
	КешДанных);
	Если ЗначениеЗаполнено(ДанныеСоисполнителей.ПредставлениеОбщегоРезультата) Тогда

		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
		ТекущийЭлементДокумента.ЗакладкаКонца,
		Неопределено,
		Тип("ПереводСтрокиФорматированногоДокумента"));

		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
		ТекущийЭлементДокумента.ЗакладкаКонца,
		СтрШаблон("%1: ", НСтр("ru = 'Результат'", КодЯзыка)),
		Тип("ТекстФорматированногоДокумента"));
		ТекущийЭлементДокумента.Шрифт = ЖирныйШрифт;

		// Картинка состояния.
		Если ЗначениеЗаполнено(ДанныеСоисполнителей.ХарактерОбщегоРезультата) Тогда

			КартинкаСостояния =
			Перечисления.ХарактерыРезультатов.КартинкаСостояния(
			ДанныеСоисполнителей.ХарактерОбщегоРезультата);
			КартинкаСостояния = Новый Картинка(КартинкаСостояния.ПолучитьДвоичныеДанные());
			ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
			ТекущийЭлементДокумента.ЗакладкаКонца,
			КартинкаСостояния,
			Тип("КартинкаФорматированногоДокумента"));

		КонецЕсли;

		// Представление общего результата.
		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
		ТекущийЭлементДокумента.ЗакладкаКонца,
		ДанныеСоисполнителей.ПредставлениеОбщегоРезультата,
		Тип("ТекстФорматированногоДокумента"));

		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
		ТекущийЭлементДокумента.ЗакладкаКонца,
		СтрШаблон(" (%1)", НСтр("ru = 'подробнее'", КодЯзыка)),
		Тип("ТекстФорматированногоДокумента"));
		Если ВключатьНавигационныеСсылки Тогда
			ТекущийЭлементДокумента.НавигационнаяСсылка =
			СтрШаблон(
			"v8doc:tasks/ShowCoperformers");
		КонецЕсли;

	КонецЕсли;

	// Соисполнители.
	Для Каждого ДанныеЭтапа Из ДанныеСоисполнителей.Этапы Цикл

		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
		ТекущийЭлементДокумента.ЗакладкаКонца,
		Неопределено,
		Тип("ПереводСтрокиФорматированногоДокумента"));

		ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
		ТекущийЭлементДокумента.ЗакладкаКонца,
		СтрШаблон("%1: ", ДанныеЭтапа.Представление),
		Тип("ТекстФорматированногоДокумента"));
		ТекущийЭлементДокумента.Шрифт = ЖирныйШрифт;

		ДанныеСоисполнителейЭтапа = ДанныеСоисполнителей.СоисполнителиПоЭтапам[ДанныеЭтапа.Этап];
		Для Каждого ДанныеСоисполнителя Из ДанныеСоисполнителейЭтапа Цикл

			// Картинка состояния.
			Если ЗначениеЗаполнено(ДанныеСоисполнителя.ХарактерРезультата) Тогда

				КартинкаСостояния =
				Перечисления.ХарактерыРезультатов.КартинкаСостояния(
				ДанныеСоисполнителя.ХарактерРезультата);
				КартинкаСостояния = Новый Картинка(КартинкаСостояния.ПолучитьДвоичныеДанные());
				ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
				ТекущийЭлементДокумента.ЗакладкаКонца,
				КартинкаСостояния,
				Тип("КартинкаФорматированногоДокумента"));
				Если ВключатьНавигационныеСсылки
					И ЗначениеЗаполнено(ДанныеСоисполнителя.ДействиеЗадачи) Тогда
					ТекущийЭлементДокумента.НавигационнаяСсылка =
					СтрШаблон(
					"v8doc:tasks/ShowTaskAction/%1",
					ПолучитьНавигационнуюСсылку(ДанныеСоисполнителя.ДействиеЗадачи));
				КонецЕсли;

			КонецЕсли;

			// Картинка приложения.
			Если ДанныеСоисполнителя.ЕстьПриложения Тогда

				КартинкаСкрепка = Новый Картинка(
				БиблиотекаКартинок.Скрепка.ПолучитьДвоичныеДанные());
				ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
				ТекущийЭлементДокумента.ЗакладкаКонца,
				КартинкаСкрепка,
				Тип("КартинкаФорматированногоДокумента"));
				Если ВключатьНавигационныеСсылки
					И ЗначениеЗаполнено(ДанныеСоисполнителя.ДействиеЗадачи) Тогда
					ТекущийЭлементДокумента.НавигационнаяСсылка =
					СтрШаблон(
					"v8doc:tasks/ShowTaskAction/%1",
					ПолучитьНавигационнуюСсылку(ДанныеСоисполнителя.ДействиеЗадачи));
				КонецЕсли;

			КонецЕсли;

			// Картинка ответственный.
			Если ДанныеСоисполнителя.ЭтоОтветственный Тогда

				КартинкаОтветственныйИсполнитель =
				Новый Картинка(
				БиблиотекаКартинок.ОтветственныйИсполнительPNG.ПолучитьДвоичныеДанные());
				ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
				ТекущийЭлементДокумента.ЗакладкаКонца,
				КартинкаОтветственныйИсполнитель,
				Тип("КартинкаФорматированногоДокумента"));
				Если ВключатьНавигационныеСсылки
					И ЗначениеЗаполнено(ДанныеСоисполнителя.ДействиеЗадачи) Тогда
					ТекущийЭлементДокумента.НавигационнаяСсылка =
					СтрШаблон(
					"v8doc:tasks/ShowTaskAction/%1",
					ПолучитьНавигационнуюСсылку(ДанныеСоисполнителя.ДействиеЗадачи));
				КонецЕсли;

			КонецЕсли;

			// Представление исполнителя.
				
			ЧислоСтрок = СтрЧислоСтрок(ДанныеСоисполнителя.Представление);
			Для НомерСтроки = 1 По ЧислоСтрок Цикл

				ОчереднаяСтрока =
				СтрПолучитьСтроку(
				ДанныеСоисполнителя.Представление,
				НомерСтроки);
#Вставка  
				ЦППК_Представление = 
				СтрПолучитьСтроку(
				ДанныеСоисполнителя.ЦППК_Представление,
				НомерСтроки);

				Если НомерСтроки = 1 Тогда
					
					ЦППК_Исполнитель =
					СтрПолучитьСтроку(
					ДанныеСоисполнителя.ЦППК_Исполнитель,
					НомерСтроки);
					
					Если ЗначениеЗаполнено(ЦППК_Исполнитель) Тогда
						
						ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
						ТекущийЭлементДокумента.ЗакладкаКонца,
						ЦППК_Исполнитель,
						Тип("ТекстФорматированногоДокумента"));
						Если ВключатьНавигационныеСсылки Тогда
							ТекущийЭлементДокумента.НавигационнаяСсылка =
							СтрШаблон(
							"v8doc:tasks/ShowTaskAction/%1",
							ПолучитьНавигационнуюСсылку(ДанныеСоисполнителя.ДействиеЗадачи));
						КонецЕсли;
						
						ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
						ТекущийЭлементДокумента.ЗакладкаКонца,
						Неопределено,
						Тип("ПереводСтрокиФорматированногоДокумента"));
						
						ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
						ТекущийЭлементДокумента.ЗакладкаКонца,
						Неопределено,
						Тип("ПереводСтрокиФорматированногоДокумента"));
					КонецЕсли;
					
				КонецЕсли;

				Если ЗначениеЗаполнено(ЦППК_Представление) Тогда
					
					Если НомерСтроки = 1 Тогда
					
						ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
						ТекущийЭлементДокумента.ЗакладкаКонца,
						"Результат: ",
						Тип("ТекстФорматированногоДокумента"));
						ТекущийЭлементДокумента.Шрифт = Новый Шрифт("Arial", 12, Истина);
						
						ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
						ТекущийЭлементДокумента.ЗакладкаКонца,
						Неопределено,
						Тип("ПереводСтрокиФорматированногоДокумента"));
						
					КонецЕсли;
					
					ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
					ТекущийЭлементДокумента.ЗакладкаКонца,
					ЦППК_Представление,
					Тип("ТекстФорматированногоДокумента"));
					ТекущийЭлементДокумента.Шрифт = Новый Шрифт("Arial", 12);    
					
					ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
					ТекущийЭлементДокумента.ЗакладкаКонца,
					Неопределено,
					Тип("ПереводСтрокиФорматированногоДокумента"));
					
				КонецЕсли;		
				
				Если НомерСтроки = ЧислоСтрок Тогда
				
					ЦППК_Результат =
					СтрПолучитьСтроку(
					ДанныеСоисполнителя.ЦППК_Результат,
					1);

					Если ЗначениеЗаполнено(ЦППК_Результат) Тогда
						ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
						ТекущийЭлементДокумента.ЗакладкаКонца,
						ЦППК_Результат,
						Тип("ТекстФорматированногоДокумента"));
					КонецЕсли;		
				
				КонецЕсли;
				
				#КонецВставки
#Удаление
				Если ЗначениеЗаполнено(ОчереднаяСтрока) Тогда
					ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
					ТекущийЭлементДокумента.ЗакладкаКонца,
					ОчереднаяСтрока,
					Тип("ТекстФорматированногоДокумента"));
					Если ВключатьНавигационныеСсылки Тогда
						ТекущийЭлементДокумента.НавигационнаяСсылка =
						СтрШаблон(
						"v8doc:tasks/ShowTaskAction/%1",
						ПолучитьНавигационнуюСсылку(ДанныеСоисполнителя.ДействиеЗадачи));
					КонецЕсли;
				КонецЕсли;
#КонецУдаления
				ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
				ТекущийЭлементДокумента.ЗакладкаКонца,
				Неопределено,
				Тип("ПереводСтрокиФорматированногоДокумента"));

			КонецЦикла;

		КонецЦикла;

	КонецЦикла;

	ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
	ТекущийЭлементДокумента.ЗакладкаКонца,
	Неопределено,
	Тип("ПереводСтрокиФорматированногоДокумента"));
	
	#Вставка 
	Если ЦППК_ЭтоВопрос Тогда
		ЦППК_ОтобразитьВышестоящуюЗадачуВопроса(ЕстьРеквизитВышестоящаяЗадача, ФорматированныйДокумент, ТекущийЭлементДокумента, ЖирныйШрифт, ОбычныйШрифт, ВключатьНавигационныеСсылки, КодЯзыка);
	КонецЕсли;
	#КонецВставки

	// Вставки перед и после текста.
	ФорматированныйДокумент.Вставить(
	ЗакладкаНачала,
	МеткаНачала(),
	Тип("ТекстФорматированногоДокумента"));

	ФорматированныйДокумент.Вставить(
	ЗакладкаКонца,
	МеткаКонца(),
	Тип("ТекстФорматированногоДокумента"));

	// Корректировка авто-шрифтов и навигационных ссылок.
	ВсеЭлементы = ФорматированныйДокумент.ПолучитьЭлементы(ЗакладкаНачала, ЗакладкаКонца);
	Для Каждого Элемент Из ВсеЭлементы Цикл

		Если ТипЗнч(Элемент) = Тип("ТекстФорматированногоДокумента")
			И Элемент.Шрифт.Вид = ВидШрифта.АвтоШрифт Тогда

			// Обход ошибки платформы - полностью авто шрифт едет при преобразовании в HTML шрифта ШрифтОписанияЗадачи.
			//@skip-check new-font
			Элемент.Шрифт = Новый Шрифт(
			?(ЗначениеЗаполнено(Элемент.Шрифт.Имя), Элемент.Шрифт.Имя, "Arial"), // ИмяШрифта
			?(Элемент.Шрифт.Размер > 0, Элемент.Шрифт.Размер, 10), // Размер
			?(Элемент.Шрифт.Полужирный <> Неопределено, Элемент.Шрифт.Полужирный, Ложь), // Полужирный
			?(Элемент.Шрифт.Наклонный <> Неопределено, Элемент.Шрифт.Наклонный, Ложь), // Наклонный
			?(Элемент.Шрифт.Подчеркивание <> Неопределено, Элемент.Шрифт.Подчеркивание, Ложь), // Подчеркнутый
			?(Элемент.Шрифт.Зачеркивание <> Неопределено, Элемент.Шрифт.Зачеркивание, Ложь), // Зачеркнутый
			?(Элемент.Шрифт.Масштаб <> 100, Элемент.Шрифт.Масштаб, 100)); // Масштаб

		КонецЕсли;

		Если (ТипЗнч(Элемент) = Тип("ТекстФорматированногоДокумента")
			Или ТипЗнч(Элемент) = Тип("КартинкаФорматированногоДокумента"))
			И (СтрНачинаетсяС(Элемент.НавигационнаяСсылка, "e1cib/")
			Или СтрНачинаетсяС(Элемент.НавигационнаяСсылка, "e1ccs/")) Тогда

			Элемент.НавигационнаяСсылка = "v8doc:" + Элемент.НавигационнаяСсылка;

		КонецЕсли;

	КонецЦикла;

	Возврат ФорматированныйДокумент;

КонецФункции

Процедура ЦППК_ОтобразитьВышестоящуюЗадачуВопроса(ЕстьРеквизитВышестоящаяЗадача, ФорматированныйДокумент, ТекущийЭлементДокумента, ЖирныйШрифт, ОбычныйШрифт, ВключатьНавигационныеСсылки, КодЯзыка)

	// Вышестоящая задача.
	Если ЕстьРеквизитВышестоящаяЗадача Тогда
		
		ВышестоящаяЗадачаИлиДействие = ВышестоящаяЗадачаИлиДействие();
		
		ВидимостьВышестоящейЗадачи = ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(ВышестоящаяЗадачаИлиДействие).Чтение;
		
		Если ВидимостьВышестоящейЗадачи Тогда
			
			ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
			ТекущийЭлементДокумента.ЗакладкаКонца,
			Неопределено,
			Тип("ПереводСтрокиФорматированногоДокумента"));
			
			ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
			ТекущийЭлементДокумента.ЗакладкаКонца,
			Неопределено,
			Тип("ПереводСтрокиФорматированногоДокумента"));
			
			ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
			ТекущийЭлементДокумента.ЗакладкаКонца,
			СтрШаблон("%1: ", НСтр("ru = 'Вышестоящая задача'", КодЯзыка)),
			Тип("ТекстФорматированногоДокумента"));
			ТекущийЭлементДокумента.Шрифт = ЖирныйШрифт;
			
			ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
			ТекущийЭлементДокумента.ЗакладкаКонца,
			ВышестоящаяЗадачаИлиДействие,
			Тип("ТекстФорматированногоДокумента"));
			ТекущийЭлементДокумента.Шрифт = ОбычныйШрифт;
			Если ВключатьНавигационныеСсылки Тогда
				ТекущийЭлементДокумента.НавигационнаяСсылка =
				СтрШаблон(
				"v8doc:tasks/ShowTaskAction/%1",
				ПолучитьНавигационнуюСсылку(ВышестоящаяЗадачаИлиДействие));
			КонецЕсли;
			
			ТекущийЭлементДокумента = ФорматированныйДокумент.Вставить(
			ТекущийЭлементДокумента.ЗакладкаКонца,
			Неопределено,
			Тип("ПереводСтрокиФорматированногоДокумента"));
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры   

#КонецОбласти

