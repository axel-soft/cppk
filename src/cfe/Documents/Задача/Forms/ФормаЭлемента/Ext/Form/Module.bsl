
&НаСервере
&ИзменениеИКонтроль("ПриСозданииНаСервере")
Процедура ЦППК_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтоМобильныйКлиент = ПараметрыСеанса.ЭтоМобильныйКлиент;
	
	Если ЭтоМобильныйКлиент Тогда
		МК_ЭлементыСтиля = МК_ПовтИсп.ЭлементыСтиля();
	КонецЕсли;
	
	Исполнитель = Справочники.Сотрудники.ПустаяСсылка();
	Проверяющий = Справочники.Сотрудники.ПустаяСсылка();
	
	НастроитьФормуПоВидуЗадачи();
	
	ПротоколированиеРаботыСотрудников.ЗаписатьОткрытие(Объект.Ссылка);
	
	ЭтоНоваяЗадача = Не ЗначениеЗаполнено(Объект.Ссылка);
	Если ЭтоНоваяЗадача Тогда
		
		Если ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.ВходящееПисьмо")
			Или ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.ИсходящееПисьмо")
			Или ТипЗнч(Параметры.Основание) = Тип("СправочникСсылка.ТемыОбсуждений")
			Или ТипЗнч(Параметры.Основание) = Тип("СправочникСсылка.СообщенияОбсуждений") Тогда
			
			ОписаниеФорматированное = ИнтеграцияЗадач.ОписаниеФорматированное(Параметры.Основание);
			
		ИначеЕсли ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.Задача")
			Или ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.ДействиеЗадачи") Тогда
			
			ОснованиеЗадача = Неопределено;
			Если ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.ДействиеЗадачи") Тогда
				
				РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
					Параметры.Основание,
					"Задача, СостояниеУчастникаЗадачи");
				
				ОснованиеЗадача = РеквизитыОснования.Задача;
				
				ВидСостоянияУчастниковЗадач = 
					РаботаСЗадачамиПовтИсп.ВидСостоянияУчастниковЗадач(РеквизитыОснования.СостояниеУчастникаЗадачи);
				Если Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоНовоеДействие(ВидСостоянияУчастниковЗадач) Тогда
					
					РезультатВзятияВРаботу = РаботаСЗадачами.ВзятьВРаботу(
						Параметры.Основание,
						Сотрудники.ОсновнойСотрудник());
					
					Если РезультатВзятияВРаботу.ВзятиеВРаботуОбработано Тогда
						ОповеститьОбИзмененииПриСозданииПодзадачи = Истина;
					ИначеЕсли РезультатВзятияВРаботу.НужноВыбратьФактическогоИсполнителя Тогда
						ВзятьВРаботуПриСозданииПодзадачи = Истина;
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.Задача") Тогда
				
				ОснованиеЗадача = Параметры.Основание;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ОснованиеЗадача) Тогда
				ОписаниеФорматированное = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					ОснованиеЗадача, "ОписаниеФорматированное").Получить();
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Параметры.Основание) = Тип("Структура")
			И Параметры.Основание.Свойство("Основание")
			И ТипЗнч(Параметры.Основание.Основание) = Тип("ДокументСсылка.Задача") Тогда
			
			ОписаниеФорматированное = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Параметры.Основание.Основание, "ОписаниеФорматированное").Получить();
			
		ИначеЕсли ТипЗнч(Параметры.ЗначенияЗаполнения) = Тип("Структура")
			И Параметры.ЗначенияЗаполнения.Свойство("ШаблонЗадачи") Тогда
			
			ЗаполнитьПоШаблонуНаСервере(Параметры.ЗначенияЗаполнения.ШаблонЗадачи);
			
		КонецЕсли;
		
		Если Параметры.Свойство("МассивИсполнителей") Тогда
			Для Каждого ИсполнительСтр Из Параметры.МассивИсполнителей Цикл 
				НовСтр = Объект.Участники.Добавить();
				НовСтр.Участник = ИсполнительСтр;
				НовСтр.ВидУчастника = ВидУчастникаИсполнитель;
			КонецЦикла;	
		КонецЕсли;	

		Если Параметры.Свойство("Заголовок") Тогда
			Объект.Заголовок = Параметры.Заголовок;
		КонецЕсли;	
		
#Удаление
		Если Не ЗначениеЗаполнено(Объект.Заголовок) Тогда
			
			ДанныеВидаЗадачи = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(Объект.ВидЗадачи);
			Объект.Заголовок = ЗаголовокПоШаблону(ДанныеВидаЗадачи.ШаблонЗаголовка);
			
		КонецЕсли;
#КонецУдаления
#Вставка
		ДанныеВидаЗадачи = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(Объект.ВидЗадачи);
		Объект.Заголовок = ЗаголовокПоШаблону(ДанныеВидаЗадачи.ШаблонЗаголовка);
#КонецВставки
		
		Обновить();
		
	КонецЕсли;	
		
	ОбновитьРежимТаблицы();
	
	РаботаСЗадачами.УстановитьУсловноеОформлениеПодзадач(УсловноеОформление);
	
	// Учет трудозатрат
	ПереключитьХронометражНеМеняяПодсказку = Новый Структура("Подсказка");
	УчетВремени.ПроинициализироватьПараметрыУчетаВремени(
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ОпцияИспользоватьУчетВремени,
		Объект.Ссылка,
		ВидыРабот,
		СпособУказанияВремени,
		ПереключитьХронометражНеМеняяПодсказку,
		Элементы.ПереключитьХронометраж,
		Элементы.УказатьТрудозатраты);
	
	Элементы.УчастникиУчастник.СписокВыбора.Добавить(Сотрудники.ОсновнойСотрудник());
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Элементы.Автор.АвтоОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	Справочники.ПравилаКоммуникаций.НастроитьПоляПредмета(
		ЭтотОбъект, 
		"УчастникиУчастник, Исполнитель, Проверяющий");
	
	ОбновитьПриоритетПредставление(Объект.Приоритет, ЭтотОбъект, ПриоритетПредставление);
	
	// МобильныйКлиент
	МК_НастроитьЭлементыФормы();
	
	ПоддерживаетсяМобильныйСканер =
		РегистрыСведений.КэшМобильныхСканов.ПоддерживаетсяМобильныйСканер();
	// КонецМобильныйКлиент
	
	// РаспознаваниеРечи
	РаспознаваниеРечи_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	// Конец РаспознаваниеРечи
	
	ИспользоватьДатуИВремяВСрокахЗадач =
		ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	Элементы.ЗначениеНачалоПлан.Формат = РаботаСЗадачами.ФорматСрокаПолный();
	Элементы.ЗначениеНачалоПлан.ФорматРедактирования = РаботаСЗадачами.ФорматСрокаПолный();
	Элементы.ЗначениеНачалоФакт.Формат = РаботаСЗадачами.ФорматСрокаПолный();
	Элементы.ЗначениеНачалоФакт.ФорматРедактирования = РаботаСЗадачами.ФорматСрокаПолный();
	Элементы.ЗначениеСрокПлан.Формат = РаботаСЗадачами.ФорматСрокаПолный();
	Элементы.ЗначениеСрокПлан.ФорматРедактирования = РаботаСЗадачами.ФорматСрокаПолный();
	Элементы.ЗначениеСрокФакт.Формат = РаботаСЗадачами.ФорматСрокаПолный();
	Элементы.ЗначениеСрокФакт.ФорматРедактирования = РаботаСЗадачами.ФорматСрокаПолный();
	
	Элементы.ГруппаПланФактЧелЧасов.Видимость =
		ПолучитьФункциональнуюОпцию("ВестиУчетФактическихТрудозатрат")
		И ПолучитьФункциональнуюОпцию("ИспользоватьЕжедневныеОтчеты");
#Вставка     
	ЦППК_ПодключаемыеКоманды.ЦППК_ПриСозданииНаСервере(ЭтаФорма, Неопределено);
	Если НЕ ЭтоНоваяЗадача И НЕ ОбщегоНазначенияДокументооборотВызовСервера.РолиДоступны("ЦППК_ИзменениеПроцессовБезОграничений") Тогда
	
		ЭтаФорма.ТолькоПросмотр = Истина;			
	
	КонецЕсли; 
	
	//++AxelSoft Шарапова 14.03.2025 САНФ-032751
	Если Пользователи.РолиДоступны("ЦППК_ВыполнениеЗакрытияЗадач") Тогда
		Элементы.ФормаЗакрыть.Видимость = Истина;
	Иначе
		Элементы.ФормаЗакрыть.Видимость = Ложь;
	КонецЕсли;
	//--AxelSoft Шарапова 14.03.2025 САНФ-032751
	
#КонецВставки

КонецПроцедуры

&НаСервере
&ИзменениеИКонтроль("ВидЗадачиПриИзмененииКонвертировать")
Процедура ЦППК_ВидЗадачиПриИзмененииКонвертировать()

	Если НастроенныйВидЗадачи = Объект.ВидЗадачи Тогда
		Возврат;
	КонецЕсли;

	СтарыеДанныеВида = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(НастроенныйВидЗадачи);
	НовыеДанныеВида = РаботаСЗадачамиПовтИсп.ДанныеВидаЗадачи(Объект.ВидЗадачи);

	// Конвертация заголовка.
	СтарыйЗаголовокПоШаблону = ЗаголовокПоШаблону(СтарыеДанныеВида.ШаблонЗаголовка);
#Удаление
	Если Объект.Заголовок = СтарыйЗаголовокПоШаблону Тогда
		Объект.Заголовок = ЗаголовокПоШаблону(НовыеДанныеВида.ШаблонЗаголовка);
	КонецЕсли;
#КонецУдаления

#Вставка
	Объект.Заголовок = ЗаголовокПоШаблону(НовыеДанныеВида.ШаблонЗаголовка);
#КонецВставки

	// Конвертация участников.
	Если Элементы.СтраницыУчастники.ТекущаяСтраница = Элементы.СтраницаПоля Тогда

		ИсполнительПодходит = ПроверитьУчастникаПоПравиламКоммуникаций(
		Исполнитель,
		НовыеДанныеВида.ВидУчастникаИсполнитель);
		Если Не ИсполнительПодходит Тогда
			Исполнитель = Неопределено;
			ИсполнительПредставление = "";
		КонецЕсли;

		ПроверяющийПодходит = ПроверитьУчастникаПоПравиламКоммуникаций(
		Проверяющий,
		НовыеДанныеВида.ВидУчастникаПроверяющий);
		Если Не ПроверяющийПодходит Тогда
			Проверяющий = Неопределено;
			ПроверяющийПредставление = "";
		КонецЕсли;

		// Нужно перезаполнить табличную часть участники. Иначе остаются сведения от старого ВидаЗадачи.
		Объект.Участники.Очистить();

		Если ИсполнительПодходит Тогда
			СтрокаУчастника = Объект.Участники.Добавить();
			СтрокаУчастника.ВидУчастника = НовыеДанныеВида.ВидУчастникаИсполнитель;
			СтрокаУчастника.Участник = Исполнитель;
		КонецЕсли;

		Если ПроверяющийПодходит Тогда
			СтрокаУчастника = Объект.Участники.Добавить();
			СтрокаУчастника.ВидУчастника = НовыеДанныеВида.ВидУчастникаПроверяющий;
			СтрокаУчастника.Участник = Проверяющий;
		КонецЕсли;

	Иначе

		ЕстьИсполнитель = Ложь;
		ЕстьПроверяющий = Ложь;
		КоличествоЭлементов = Объект.Участники.Количество();
		Для Индекс = 1 По КоличествоЭлементов Цикл

			ОбратныйИндекс = КоличествоЭлементов - Индекс;
			СтрокаУчастника = Объект.Участники[ОбратныйИндекс];

			СтрокаАктуальна = Ложь;
			Если СтрокаУчастника.ВидУчастника = СтарыеДанныеВида.ВидУчастникаОтветственный Тогда

				Если ЗначениеЗаполнено(НовыеДанныеВида.ВидУчастникаОтветственный) Тогда
					СтрокаУчастника.ВидУчастника = НовыеДанныеВида.ВидУчастникаОтветственный;
				Иначе
					СтрокаУчастника.ВидУчастника = НовыеДанныеВида.ВидУчастникаИсполнитель;
				КонецЕсли;

				УчастникПодходит = ПроверитьУчастникаПоПравиламКоммуникаций(
				СтрокаУчастника.Участник,
				НовыеДанныеВида.ВидУчастникаИсполнитель);
				Если УчастникПодходит Тогда
					СтрокаАктуальна = Истина;
					ЕстьИсполнитель = Истина;
				КонецЕсли;

			ИначеЕсли СтрокаУчастника.ВидУчастника = СтарыеДанныеВида.ВидУчастникаИсполнитель Тогда

				СтрокаУчастника.ВидУчастника = НовыеДанныеВида.ВидУчастникаИсполнитель;

				УчастникПодходит = ПроверитьУчастникаПоПравиламКоммуникаций(
				СтрокаУчастника.Участник,
				СтрокаУчастника.ВидУчастника);
				Если УчастникПодходит Тогда
					СтрокаАктуальна = Истина;
					ЕстьИсполнитель = Истина;
				КонецЕсли;

			ИначеЕсли СтрокаУчастника.ВидУчастника = СтарыеДанныеВида.ВидУчастникаПроверяющий Тогда

				СтрокаУчастника.ВидУчастника = НовыеДанныеВида.ВидУчастникаПроверяющий;

				УчастникПодходит = ПроверитьУчастникаПоПравиламКоммуникаций(
				СтрокаУчастника.Участник,
				СтрокаУчастника.ВидУчастника);
				Если УчастникПодходит Тогда
					СтрокаАктуальна = Истина;
					ЕстьПроверяющий = Истина;
				КонецЕсли;

			КонецЕсли;

			Если СтрокаАктуальна Тогда
				Продолжить;
			КонецЕсли;

			Объект.Участники.Удалить(ОбратныйИндекс);

		КонецЦикла;

		Если ЗначениеЗаполнено(НовыеДанныеВида.ВидУчастникаИсполнитель) И Не ЕстьИсполнитель Тогда

			СтрокаУчастника = Объект.Участники.Вставить(0);
			СтрокаУчастника.Участник = Справочники.Сотрудники.ПустаяСсылка();
			СтрокаУчастника.ВидУчастника = НовыеДанныеВида.ВидУчастникаИсполнитель;

		КонецЕсли;

		Если ЗначениеЗаполнено(НовыеДанныеВида.ВидУчастникаПроверяющий) И Не ЕстьПроверяющий Тогда

			СтрокаУчастника = Объект.Участники.Добавить();
			СтрокаУчастника.Участник = Справочники.Сотрудники.ПустаяСсылка();
			СтрокаУчастника.ВидУчастника = НовыеДанныеВида.ВидУчастникаПроверяющий;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаСервере
&ИзменениеИКонтроль("ЗаголовокПоШаблону")
Функция ЦППК_ЗаголовокПоШаблону(ШаблонЗаголовка)

	ЗаголовокПоШаблону = "";

#Удаление
	Если Не ЗначениеЗаполнено(ШаблонЗаголовка) Тогда

		Если ЗначениеЗаполнено(Объект.ВышестоящаяЗадача) Тогда
			ЗаголовокПоШаблону = Строка(Объект.ВышестоящаяЗадача);
		ИначеЕсли Объект.Приложения.Количество() > 0 Тогда
			ЗаголовокПоШаблону = Строка(Объект.Приложения[0].Приложение);
		КонецЕсли;

		Возврат ЗаголовокПоШаблону;

	КонецЕсли;
#КонецУдаления
#Вставка
	ДанныеВидаЗадачи = Справочники.ВидыЗадач.ДанныеВидаЗадачи(Объект.ВидЗадачи); 
	ШаблонЗаголовка = Строка(ДанныеВидаЗадачи.ВидДействияИсполнителя);
#КонецВставки

	ЗаголовокПоШаблону = ШаблонЗаголовка;

	Если Объект.Приложения.Количество() = 0 Тогда
		Возврат ЗаголовокПоШаблону;
	КонецЕсли;

	ЗаголовокПоШаблону = СтрШаблон("%1 ""%2""", ЗаголовокПоШаблону, Строка(Объект.Приложения[0].Приложение));

	Возврат ЗаголовокПоШаблону;

КонецФункции

&НаКлиенте
Процедура ЦППК_ВставитьИзБуфераПосле(Команда) 
	
	БуферОбмена = ПрочитатьИзБуфера();
	
	Если ЗначениеЗаполнено(БуферОбмена) Тогда
		ОписаниеФорматированное.Добавить(БуферОбмена);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Функция ПрочитатьИзБуфера()
	
	Результат = Неопределено;
	
	#Если НЕ ВебКлиент Тогда
	Попытка
		
		WScriptShell = Новый COMОбъект("WScript.Shell");

		ИмяВременногоФайла = ПолучитьИмяВременногоФайла();

		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		ТекстовыйДокумент.Записать(ИмяВременногоФайла);;

		СтрокаЗапуска = "powershell -c Get-Clipboard | Out-File """ + ИмяВременногоФайла + """";
		WScriptShell.Run(СтрокаЗапуска, 0, 1);

		ТекстовыйДокумент.Прочитать(ИмяВременногоФайла);
		Результат = ТекстовыйДокумент.ПолучитьТекст();
 		Результат = Сред(Результат, 1, СтрДлина(Результат) - 1);
		
		НачатьУдалениеФайлов(, ИмяВременногоФайла);  
		
	Исключение
	КонецПопытки;
	#КонецЕсли
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
&После("ПеренестиПоляВТаблицуИсполнителей")
Процедура ЦППК_ПеренестиПоляВТаблицуИсполнителей(ПереноситьПустыхУчастников)
	
	//++AxelSoft Шарапова 20.05.2025 САНФ-033767
	Объект.Участники.Сортировать("ВидУчастника");
	//--AxelSoft Шарапова 20.05.2025 САНФ-033767
	
КонецПроцедуры
