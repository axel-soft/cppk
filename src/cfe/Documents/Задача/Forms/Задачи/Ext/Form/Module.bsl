
#Область ОбработчикиСобытийФормы

&НаСервере
&После("ПриСозданииНаСервере")
Процедура ЦППК_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка) 
	
	СписокДействияЗадач.ТекстЗапроса = СписокДействияЗадачТекстЗапроса();
	СписокДействияЗадач.Параметры.УстановитьЗначениеПараметра("ТекущаяДата", ТекущаяДата());
	
	//++AxelSoft Шарапова 14.03.2025 САНФ-032751
	Если Пользователи.РолиДоступны("ЦППК_ВыполнениеЗакрытияЗадач") Тогда
		Элементы.СписокЗадачЗакрыть.Видимость = Истина;
	Иначе
		Элементы.СписокЗадачЗакрыть.Видимость = Ложь;
	КонецЕсли;
	//--AxelSoft Шарапова 14.03.2025 САНФ-032751

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ЦППК_ПустаяСсыкаСправочникаФайлы()
	Возврат Справочники.Файлы.ПустаяСсылка();	
КонецФункции

&НаСервереБезКонтекста
Функция ЦППК_ДокументЗарегистрирован(ПоследнийДокумент)
	Возврат ЗначениеЗаполнено(ПоследнийДокумент.РегистрационныйНомер);
КонецФункции

&НаСервереБезКонтекста
Функция ЦППК_ПолучитьКонстантуКомментарий()
	Возврат Константы.ОбяательноеЗаполнениеКомментарияВИсполнении.Получить();
КонецФункции

&НаСервереБезКонтекста
Функция ЦППК_УзнатьОбИспользованииФормыПодписи(ПоследнийДокумент)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыДокументов.цппк_ИспользоватьФормуПодписиФайлов КАК цппк_ИспользоватьФормуПодписиФайлов
		|ИЗ
		|	Справочник.ДокументыПредприятия КАК ДокументыПредприятия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументов КАК ВидыДокументов
		|		ПО ДокументыПредприятия.ВидДокумента = ВидыДокументов.Ссылка
		|ГДЕ
		|	ДокументыПредприятия.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ПоследнийДокумент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
      Возврат  Выборка.цппк_ИспользоватьФормуПодписиФайлов; 
	КонецЕсли;
	
    Возврат Ложь;
	
КонецФункции

&НаСервереБезКонтекста 
Функция ЦППК_ПолучитьПоследнийДокумент(ТекущаяЗадача)
	
	ПоследнийДокумент = Справочники.ДокументыПредприятия.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗадачаПриложения.Приложение КАК Приложение
		|ИЗ
		|	Документ.Задача.Приложения КАК ЗадачаПриложения
		|ГДЕ
		|	ЗадачаПриложения.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗадачаПриложения.НомерСтроки";
	
	Запрос.УстановитьПараметр("Ссылка", ТекущаяЗадача);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		Если ТипЗнч(Выборка.Приложение) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
			ПоследнийДокумент = Выборка.Приложение; 
		КонецЕсли;  
	КонецЦикла;
	
	Возврат ПоследнийДокумент;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЦППК_ПолучитьРезультатЗадачи()
	Возврат	Справочники.РезультатыДействийЗадач.Подписано;	
КонецФункции

&НаСервере
Функция ЦППК_ЭтоЗадачаБезСогласованияСЗамечаниями(ДействиеЗадачи) 
	
	Если Не ЗначениеЗаполнено(ДействиеЗадачи) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Действие = Неопределено;
	
	УстановитьПривилегированныйРежим(Истина);
	
	БезСогласованияСЗамечаниями = Ложь;	
	
	КорневаяЗадача = РаботаСЗадачами.КорневаяЗадача(ДействиеЗадачи);
	
	Если Не ЗначениеЗаполнено(КорневаяЗадача) И ЗначениеЗаполнено(ДействиеЗадачи) Тогда
		КорневаяЗадача = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДействиеЗадачи, "Задача");
	КонецЕсли;	
	
	БизнесПроцесс = РаботаСЗадачами.ИсточникЗадачи(КорневаяЗадача);
	Если ЗначениеЗаполнено(БизнесПроцесс) Тогда
		
		Действие = РаботаСПроцессамиПоДействиям.ДействиеПоПроцессу(БизнесПроцесс);	
		Если ЗначениеЗаполнено(Действие) И ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияСогласования") Тогда 
			
			Если ОбщегоНазначения.СсылкаСуществует(Действие.НастройкаДействия) Тогда
				БезСогласованияСЗамечаниями = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Действие.НастройкаДействия, "ЦППК_БезСогласованияСЗамечаниями");
			Иначе
				БезСогласованияСЗамечаниями = НЕ Действие.СогласованиеВРежимеЗамечаний;
			КонецЕсли;		
			
		КонецЕсли;		

	КонецЕсли;		
	
	Возврат БезСогласованияСЗамечаниями;
	
КонецФункции

&НаСервере
Функция ЦППК_ПолучитьКнопкуВыполненияПоКоду(КодРезультатаДействийЗадач) 
	
	ЦППК_КнопкиВыполнения = Элементы.ГруппаКомандыДляВыполнения.ПодчиненныеЭлементы;
	
	ИдентификаторРезультата = Справочники.РезультатыДействийЗадач[КодРезультатаДействийЗадач].УникальныйИдентификатор();
	
	ПрефиксИмениКомандыРезультата = РаботаСЗадачамиКлиентСервер.ПрефиксИмениКомандыРезультата();
	ИмяКнопкиВыполнения = РаботаСЗадачамиКлиентСервер.ИмяКомандыВыполнения(
							ПрефиксИмениКомандыРезультата,
							ИдентификаторРезультата);				
	
	Возврат ЦППК_КнопкиВыполнения[ИмяКнопкиВыполнения];
	
КонецФункции

&НаКлиенте
&После("ОбновитьОбластьПросмотраНаКлиенте")
Процедура ЦППК_ОбновитьОбластьПросмотраНаКлиенте()
	
	//++AxelSoft Шарапова 24.01.2025 САНФ-030728
	// Удален реквизит ТекущаяЗадачаПодзадач, присвоено значение от реквизита ТекущаяЗадача
	// Перенесена процедура на Сервер
	ЦППК_ОбновитьОбластьПросмотраНаСервере();
	//--AxelSoft Шарапова 24.01.2025 САНФ-030728
	
КонецПроцедуры

&НаСервере
Процедура ЦППК_ОбновитьОбластьПросмотраНаСервере()
	
	ТекущаяЗадачаПодзадач = ТекущаяЗадача;
	Если ТекущаяЗадачаПодзадач.ВидЗадачи = Справочники.ВидыЗадач.Рассмотрение 
		И ТекущаяЗадачаПодзадач.СостояниеЗадачи <> Справочники.СостоянияЗадач.НаОбработкеРезолюции Тогда
		
		КнопкаНаправленоАвтору = ЦППК_ПолучитьКнопкуВыполненияПоКоду("НаправленоАвтору"); 
		Если КнопкаНаправленоАвтору.Доступность Тогда
			КнопкаНаправленоАвтору.Заголовок = "Рассмотрено";	
		КонецЕсли;
		
		КнопкаРассмотрено = ЦППК_ПолучитьКнопкуВыполненияПоКоду("Рассмотрено"); 
		Если КнопкаРассмотрено.Доступность Тогда
			КнопкаРассмотрено.Видимость = Ложь;	
		КонецЕсли;
		
		КнопкаНаправленоНаИсполнение = ЦППК_ПолучитьКнопкуВыполненияПоКоду("НаправленоНаИсполнение"); 
		Если КнопкаНаправленоНаИсполнение.Доступность Тогда
			КнопкаНаправленоНаИсполнение.Видимость = ПолучитьРольДляКнопки();	
		КонецЕсли;
		
		//Элементы.ВыполнитьДействиеЗадачиВариант2.Заголовок = "Рассмотрено";
		////Элементы.ВыполнитьДействиеЗадачиВариант1.Видимость = Ложь;
		//Элементы.ВыполнитьДействиеЗадачиВариант3.Видимость = ПолучитьРольДляКнопки();

	ИначеЕсли Не ТипЗнч(ТекущаяЗадачаИлиДействие) = Тип("ДокументСсылка.ДействиеЗадачи") 
		Или Не ТекущаяЗадачаПодзадач.ВидЗадачи = Справочники.ВидыЗадач.Согласование Тогда
		 Возврат;
	КонецЕсли;
	
	Если ТекущаяЗадачаПодзадач <> ТекущаяЗадача Тогда
		ТекущаяЗадачаПодзадач = ТекущаяЗадача;
	КонецЕсли;
	
	ТекущееДействиеЗадачи =
	?(ТипЗнч(ТекущаяЗадачаИлиДействие) = Тип("ДокументСсылка.ДействиеЗадачи"),
	ТекущаяЗадачаИлиДействие,
	Неопределено);  
	
	КнопкаСогласованоСЗамечаниями = ЦППК_ПолучитьКнопкуВыполненияПоКоду("СогласованоСЗамечаниями"); 
	Если КнопкаСогласованоСЗамечаниями.Доступность 
		И КнопкаСогласованоСЗамечаниями.Видимость 
		И ТекущееДействиеЗадачи <> Неопределено Тогда
		КнопкаСогласованоСЗамечаниями.Видимость = Не ЦППК_ЭтоЗадачаБезСогласованияСЗамечаниями(ТекущееДействиеЗадачи);	
	КонецЕсли;
	
	//Если ТекущееДействиеЗадачи <> Неопределено
	//	И Элементы.ВыполнитьДействиеЗадачиВариант2.Видимость
	//	И Элементы.ВыполнитьДействиеЗадачиВариант2.Заголовок = "Согласовано с замечаниями" Тогда
	//	Элементы.ВыполнитьДействиеЗадачиВариант2.Видимость = Не ЦППК_ЭтоЗадачаБезСогласованияСЗамечаниями(ТекущееДействиеЗадачи);
	//КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТекстЗапроса()

	ТекстЗапроса = "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДействияЗадач.Задача.ВышестоящаяЗадача КАК ЗадачаВышестоящаяЗадача,
		|	ИСТИНА КАК ЕстьВыполненныеПодзадачи
		|ПОМЕСТИТЬ ВТ_ВыполненныеПодзадачи
		|ИЗ
		|	РегистрСведений.ДействияЗадач КАК ДействияЗадач
		|ГДЕ
		|	ДействияЗадач.Выполнено
		|	И НЕ ДействияЗадач.Задача.ВышестоящаяЗадача.Ссылка ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	ДействияЗадач.Задача.ВышестоящаяЗадача
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РегистрСведенийДействияЗадач.Регистратор КАК Регистратор,
		|	РегистрСведенийДействияЗадач.НомерСтроки КАК НомерСтроки,
		|	РегистрСведенийДействияЗадач.Активность КАК Активность,
		|	РегистрСведенийДействияЗадач.Исполнитель КАК Исполнитель,
		|	ВЫБОР
		|		КОГДА ИСТИНА
		|			ТОГДА РегистрСведенийДействияЗадач.Исполнитель
		|		ИНАЧЕ ВЫРАЗИТЬ("""" КАК СТРОКА(250))
		|	КОНЕЦ КАК ИсполнительСтрокой,
		|	РегистрСведенийДействияЗадач.Дата КАК Дата,
		|	РегистрСведенийДействияЗадач.ДействиеЗадачи КАК ДействиеЗадачи,
		|	РегистрСведенийДействияЗадач.Автор КАК Автор,
		|	ВЫБОР
		|		КОГДА ИСТИНА
		|			ТОГДА РегистрСведенийДействияЗадач.Автор
		|		ИНАЧЕ ВЫРАЗИТЬ("""" КАК СТРОКА(250))
		|	КОНЕЦ КАК АвторСтрокой,
		|	РегистрСведенийДействияЗадач.ВидДействия КАК ВидДействия,
		|	РегистрСведенийДействияЗадач.Заголовок КАК Заголовок,
		|	РегистрСведенийДействияЗадач.Заголовок КАК МК_Заголовок,
		|	РегистрСведенийДействияЗадач.Задача КАК Задача,
		|	РегистрСведенийДействияЗадач.ОжидаетВыполнения КАК ОжидаетВыполнения,
		|	РегистрСведенийДействияЗадач.Приоритет КАК Приоритет,
		|	ВЫБОР
		|		КОГДА РегистрСведенийДействияЗадач.Приоритет = ЗНАЧЕНИЕ(Справочник.ПриоритетыЗадач.Высокий)
		|			ТОГДА 2
		|		КОГДА РегистрСведенийДействияЗадач.Приоритет = ЗНАЧЕНИЕ(Справочник.ПриоритетыЗадач.Обычный)
		|			ТОГДА 1
		|		КОГДА РегистрСведенийДействияЗадач.Приоритет = ЗНАЧЕНИЕ(Справочник.ПриоритетыЗадач.Низкий)
		|			ТОГДА 0
		|		ИНАЧЕ -1
		|	КОНЕЦ КАК ИндексКартинкиПриоритета,
		|	РегистрСведенийДействияЗадач.Проект КАК Проект,
		|	РегистрСведенийДействияЗадач.Срок КАК Срок,
		|	РегистрСведенийДействияЗадач.Флаг КАК Флаг,
		|	ВЫБОР
		|		КОГДА РегистрСведенийДействияЗадач.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Лиловый)
		|			ТОГДА 6
		|		КОГДА РегистрСведенийДействияЗадач.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Оранжевый)
		|			ТОГДА 5
		|		КОГДА РегистрСведенийДействияЗадач.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Зеленый)
		|			ТОГДА 4
		|		КОГДА РегистрСведенийДействияЗадач.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Желтый)
		|			ТОГДА 3
		|		КОГДА РегистрСведенийДействияЗадач.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Синий)
		|			ТОГДА 2
		|		КОГДА РегистрСведенийДействияЗадач.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Красный)
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ИндексКартинкиФлага,
		|	РегистрСведенийДействияЗадач.Новое КАК Новое,
		|	РегистрСведенийДействияЗадач.Просрочено КАК Просрочено,
		|	РегистрСведенийДействияЗадач.ВидСостоянияУчастниковЗадач КАК ВидСостоянияУчастниковЗадач,
		|	-1 КАК ИндексКартинкиСостояния,
		|	РегистрСведенийДействияЗадач.СостояниеУчастникаЗадачи КАК СостояниеУчастникаЗадачи,
		|	РегистрСведенийДействияЗадач.ЕстьПодзадачи КАК ЕстьПодзадачи,
		|	РегистрСведенийДействияЗадач.Выполнено КАК Выполнено,
		|	""              "" КАК ПустаяСтрока,
		|	РегистрСведенийДействияЗадач.ТрудоемкостьОт КАК ТрудоемкостьОт,
		|	ВЫБОР
		|		КОГДА ИСТИНА
		|			ТОГДА РегистрСведенийДействияЗадач.ТрудоемкостьОт
		|		ИНАЧЕ ""              ""
		|	КОНЕЦ КАК Трудоемкость,
		|	РегистрСведенийДействияЗадач.ТрудоемкостьДо КАК ТрудоемкостьДо,
		|	РегистрСведенийДействияЗадач.СостояниеКонтроля КАК СостояниеКонтроля,
		|	-1 КАК ИндексКартинкиКонтроля,
		|	РегистрСведенийДействияЗадач.КонтрольныйСрок КАК КонтрольныйСрок,
		|	РегистрСведенийДействияЗадач.КонтрольныйСрокОбщий КАК КонтрольныйСрокОбщий,
		|	РегистрСведенийДействияЗадач.РезультатДействия КАК РезультатДействия,
		|	РегистрСведенийДействияЗадач.ВидПриложения КАК ВидПриложения,
		|	РегистрСведенийДействияЗадач.ТипПриложения КАК ТипПриложения,
		|	РегистрСведенийДействияЗадач.ВидЗадачи КАК ВидЗадачи,
		|	РегистрСведенийДействияЗадач.ОписаниеПоступившихОбновлений КАК ОписаниеПоступившихОбновлений,
		|	РегистрСведенийДействияЗадач.ЕстьЗамещающие КАК ЕстьЗамещающие,
		|	ЛОЖЬ КАК ЭтоЧерновик,
		|	ВТ_ВыполненныеПодзадачи.ЗадачаВышестоящаяЗадача КАК ЗадачаВышестоящаяЗадача,
		|	ВТ_ВыполненныеПодзадачи.ЕстьВыполненныеПодзадачи КАК ЕстьВыполненныеПодзадачи
		|ИЗ
		|	РегистрСведений.ДействияЗадач КАК РегистрСведенийДействияЗадач
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВыполненныеПодзадачи КАК ВТ_ВыполненныеПодзадачи
		|		ПО (РегистрСведенийДействияЗадач.Задача = ВТ_ВыполненныеПодзадачи.ЗадачаВышестоящаяЗадача)
		|{ГДЕ
		|	(ИСТИНА В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				РегистрСведений.ВсеИсполнителиДействийЗадач КАК ВсеИсполнителиДействийЗадач
		|			ГДЕ
		|				ВсеИсполнителиДействийЗадач.ДействиеЗадачи = РегистрСведенийДействияЗадач.ДействиеЗадачи
		|				И ВсеИсполнителиДействийЗадач.Исполнитель В (&ИсполнительБезЗамещаемых))) КАК Поле2,
		|	(РегистрСведенийДействияЗадач.ЕстьЗамещающие = &ЕстьЗамещающие
		|			ИЛИ РегистрСведенийДействияЗадач.Исполнитель В (&Замещаемые)) КАК Поле4}";
	
	Возврат  ТекстЗапроса;
КонецФункции

Функция СписокДействияЗадачТекстЗапроса()

	Возврат
	"ВЫБРАТЬ
	|	РегистрСведенийДействияЗадач.Исполнитель КАК Исполнитель,
	|	ВЫБОР
	|		КОГДА ИСТИНА
	|			ТОГДА РегистрСведенийДействияЗадач.Исполнитель
	|		ИНАЧЕ ВЫРАЗИТЬ("""" КАК СТРОКА(250))
	|	КОНЕЦ КАК ИсполнительСтрокой,
	|	РегистрСведенийДействияЗадач.РеестрЗадач КАК РеестрЗадач,
	|	РегистрСведенийДействияЗадач.Дата КАК Дата,
	|	РегистрСведенийДействияЗадач.ДействиеЗадачи КАК ДействиеЗадачи,
	|	РегистрСведенийДействияЗадач.Автор КАК Автор,
	|	ВЫБОР
	|		КОГДА ИСТИНА
	|			ТОГДА РегистрСведенийДействияЗадач.Автор
	|		ИНАЧЕ ВЫРАЗИТЬ("""" КАК СТРОКА(250))
	|	КОНЕЦ КАК АвторСтрокой,
	|	РегистрСведенийДействияЗадач.ВидДействия КАК ВидДействия,
	|	РегистрСведенийДействияЗадач.Заголовок КАК Заголовок,
	|	РегистрСведенийДействияЗадач.Заголовок КАК МК_Заголовок,
	|	РегистрСведенийДействияЗадач.Задача КАК Задача,
	|	РегистрСведенийДействияЗадач.ОжидаетВыполнения КАК ОжидаетВыполнения,
	|	РегистрСведенийДействияЗадач.Приоритет КАК Приоритет,
	|	ВЫБОР
	|		КОГДА РегистрСведенийДействияЗадач.Приоритет = ЗНАЧЕНИЕ(Справочник.ПриоритетыЗадач.Высокий)
	|			ТОГДА 2
	|		КОГДА РегистрСведенийДействияЗадач.Приоритет = ЗНАЧЕНИЕ(Справочник.ПриоритетыЗадач.Обычный)
	|			ТОГДА 1
	|		КОГДА РегистрСведенийДействияЗадач.Приоритет = ЗНАЧЕНИЕ(Справочник.ПриоритетыЗадач.Низкий)
	|			ТОГДА 0
	|		ИНАЧЕ -1
	|	КОНЕЦ КАК ИндексКартинкиПриоритета,
	|	РегистрСведенийДействияЗадач.Проект КАК Проект,
	|	РегистрСведенийДействияЗадач.Срок КАК Срок,
	|	РегистрСведенийДействияЗадач.Флаг КАК Флаг,
	|	ВЫБОР
	|		КОГДА РегистрСведенийДействияЗадач.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Лиловый)
	|			ТОГДА 6
	|		КОГДА РегистрСведенийДействияЗадач.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Оранжевый)
	|			ТОГДА 5
	|		КОГДА РегистрСведенийДействияЗадач.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Зеленый)
	|			ТОГДА 4
	|		КОГДА РегистрСведенийДействияЗадач.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Желтый)
	|			ТОГДА 3
	|		КОГДА РегистрСведенийДействияЗадач.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Синий)
	|			ТОГДА 2
	|		КОГДА РегистрСведенийДействияЗадач.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Красный)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ИндексКартинкиФлага,
	|	РегистрСведенийДействияЗадач.Новое КАК Новое,
	|	РегистрСведенийДействияЗадач.Просрочено КАК Просрочено,
	|	РегистрСведенийДействияЗадач.ВидСостоянияУчастниковЗадач КАК ВидСостоянияУчастниковЗадач,
	|	-1 КАК ИндексКартинкиСостояния,
	|	РегистрСведенийДействияЗадач.СостояниеУчастникаЗадачи КАК СостояниеУчастникаЗадачи,
	|	РегистрСведенийДействияЗадач.ЕстьПодзадачи КАК ЕстьПодзадачи,
	|	""              "" КАК ПустаяСтрока,
	|	РегистрСведенийДействияЗадач.ТрудоемкостьОт КАК ТрудоемкостьОт,
	|	ВЫБОР
	|		КОГДА ИСТИНА
	|			ТОГДА РегистрСведенийДействияЗадач.ТрудоемкостьОт
	|		ИНАЧЕ ""              ""
	|	КОНЕЦ КАК Трудоемкость,
	|	РегистрСведенийДействияЗадач.ТрудоемкостьДо КАК ТрудоемкостьДо,
	|	РегистрСведенийДействияЗадач.СостояниеКонтроля КАК СостояниеКонтроля,
	|	-1 КАК ИндексКартинкиКонтроля,
	|	РегистрСведенийДействияЗадач.КонтрольныйСрок КАК КонтрольныйСрок,
	|	РегистрСведенийДействияЗадач.КонтрольныйСрокОбщий КАК КонтрольныйСрокОбщий,
	|	РегистрСведенийДействияЗадач.РезультатДействия КАК РезультатДействия,
	|	РегистрСведенийДействияЗадач.ВидПриложения КАК ВидПриложения,
	|	РегистрСведенийДействияЗадач.ТипПриложения КАК ТипПриложения,
	|	РегистрСведенийДействияЗадач.ВидЗадачи КАК ВидЗадачи,
	|	РегистрСведенийДействияЗадач.ОписаниеПоступившихОбновлений КАК ОписаниеПоступившихОбновлений,
	|	РегистрСведенийДействияЗадач.ЕстьЗамещающие КАК ЕстьЗамещающие,
	|	ЛОЖЬ КАК ЭтоЧерновик,
	|	РАЗНОСТЬДАТ(&ТекущаяДата, РегистрСведенийДействияЗадач.Срок, ДЕНЬ) КАК ДнейДо
	|ИЗ
	|	РегистрСведений.РеестрЗадачПоИсполнителям КАК РегистрСведенийДействияЗадач
	|ГДЕ
	|	РегистрСведенийДействияЗадач.РеестрЗадач = &РеестрЗадач
	|{ГДЕ
	|	РегистрСведенийДействияЗадач.Исполнитель В (&ИсполнителиСРолями)}";
	
КонецФункции

&НаСервере
Функция ПолучитьРольДляКнопки()

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|		ПолномочияСотрудников.Полномочия КАК Полномочия,
		|		ПолномочияСотрудников.Владелец КАК Владелец
		|	ПОМЕСТИТЬ СписокУчастниковРоли
		|	ИЗ
		|		Справочник.ПрофилиГруппДоступа КАК ПрофилиГруппДоступа
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПолномочияСотрудников КАК ПолномочияСотрудников
		|			ПО (ПрофилиГруппДоступа.Ссылка = ПолномочияСотрудников.Полномочия)
		|	ГДЕ
		|		ПрофилиГруппДоступа.Ссылка = &Роль
		|	;
		|	
		|	////////////////////////////////////////////////////////////////////////////////
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		СписокУчастниковРоли.Полномочия КАК Полномочия,
		|		СписокУчастниковРоли.Владелец КАК Участник
		|	ПОМЕСТИТЬ РазвернутыеУчастники
		|	ИЗ
		|		СписокУчастниковРоли КАК СписокУчастниковРоли
		|	ГДЕ
		|		ТИПЗНАЧЕНИЯ(СписокУчастниковРоли.Владелец) = ТИП(Справочник.Сотрудники)
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		СписокУчастниковРоли.Полномочия,
		|		РабочиеГруппыСостав.Участник
		|	ИЗ
		|		СписокУчастниковРоли КАК СписокУчастниковРоли
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РабочиеГруппы.Состав КАК РабочиеГруппыСостав
		|			ПО СписокУчастниковРоли.Владелец = РабочиеГруппыСостав.Ссылка
		|	ГДЕ
		|		ТИПЗНАЧЕНИЯ(СписокУчастниковРоли.Владелец) = ТИП(Справочник.РабочиеГруппы)
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		СписокУчастниковРоли.Полномочия,
		|		Сотрудники.Ссылка
		|	ИЗ
		|		СписокУчастниковРоли КАК СписокУчастниковРоли
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|			ПО СписокУчастниковРоли.Владелец = Сотрудники.Подразделение
		|	ГДЕ
		|		ТИПЗНАЧЕНИЯ(СписокУчастниковРоли.Владелец) = ТИП(Справочник.СтруктураПредприятия)
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		СписокУчастниковРоли.Полномочия,
		|		ИсполнителиРолей.Исполнитель
		|	ИЗ
		|		СписокУчастниковРоли КАК СписокУчастниковРоли
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиРолей КАК ИсполнителиРолей
		|			ПО СписокУчастниковРоли.Владелец = ИсполнителиРолей.РольИсполнителя
		|	ГДЕ
		|		ТИПЗНАЧЕНИЯ(СписокУчастниковРоли.Владелец) = ТИП(Справочник.ПолныеРоли)
		|	;
		|	
		|	////////////////////////////////////////////////////////////////////////////////
		|	ВЫБРАТЬ
		|		СотрудникиПользователей.Пользователь КАК Пользователь,
		|		РазвернутыеУчастники.Полномочия КАК Полномочия
		|	ПОМЕСТИТЬ Пользователи
		|	ИЗ
		|		РазвернутыеУчастники КАК РазвернутыеУчастники
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиПользователей КАК СотрудникиПользователей
		|			ПО (РазвернутыеУчастники.Участник = СотрудникиПользователей.Сотрудник)
		|	;
		|	
		|	////////////////////////////////////////////////////////////////////////////////
		|	ВЫБРАТЬ
		|		Пользователи.Пользователь КАК Пользователь
		|	ИЗ
		|		Пользователи КАК Пользователи
		|	ГДЕ
		|		НЕ Пользователи.Пользователь ЕСТЬ NULL  
		|		И Пользователи.Пользователь = &ТекущийПользователь";
	
	Запрос.УстановитьПараметр("Роль", Справочники.ПрофилиГруппДоступа.ПолучитьСсылку(Новый УникальныйИдентификатор("3799f4c0-ed2d-11ee-9399-005056bf28da")));
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.ТекущийПользователь());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Результат = Ложь;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Результат = Истина;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;

КонецФункции 

&НаКлиенте
&ИзменениеИКонтроль("ВыполнитьДействиеЗадачиНаКлиентеВФорме")
Процедура ЦППК_ВыполнитьДействиеЗадачиНаКлиентеВФорме(РезультатДействия)

	ОценкаПроизводительностиКлиент.ЗамерВремени("ДействиеЗадачиВыполнениеИзСпискаЗадачиМне");

	ОтключитьОбработчикОжидания("ВзятьВРаботуСВыборомИсполнителя");
	ДействиеДляОтложенногоВзятияВРаботу = Неопределено;

	// РаспознаваниеРечи
	РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
	РаботаСРечьюЖурналированиеКлиент.ОчиститьЖурнал(УникальныйИдентификатор);
	// Конец РаспознаваниеРечи

	Если НужноСохранитьРезультатДействия Тогда
		РезультатДействияСохранен = СохранитьРезультатДействия();
		Если Не РезультатДействияСохранен Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
#Вставка
	// { *Грошев (ТТС) [29.06.2020]
	Если ТекущийИсточникДействия <> Неопределено И НЕ ТекущийИсточникДействияДанные.ТочкаМаршрута = ПредопределенноеЗначение("БизнесПроцесс.Исполнение.ТочкаМаршрута.Проверить") Тогда
	
		ЕстьОшибки = ТТС_РаботаСБизнесПроцессамиВызовСервера.ПроверитьВозможностьИсполнения(ТекущийИсточникДействияДанные);
		Если ЕстьОшибки Тогда
			Возврат;
		КонецЕсли;	
	
	КонецЕсли;
	// }
	// ++ЦППК
	// ЦППК_Перов + 
	Если ЦППК_ПолучитьКонстантуКомментарий() И РезультатДействия = ПредопределенноеЗначение("Справочник.РезультатыДействийЗадач.Выполнена") 
		И НЕ ЗначениеЗаполнено(РезультатДействияТекстом) Тогда 
		ОчиститьСообщения();
		ОбщегоНазначенияКлиент.СообщитьПользователю(
		НСтр("ru = 'Укажите комментарий'"),, 
		"РезультатДействияТекстом");
		Возврат;
	КонецЕсли; 
	// ЦППК_Перов -
	// --ЦППК
#КонецВставки

	СписокЗанятыеWordФайлы = Новый Массив;
	МассивЗахваченныхФайлов = Новый Массив;
	Если ЕстьЗанятыеФайлы() Тогда
		МассивЗахваченныхФайлов = РаботаСФайламиВызовСервера.ПолучитьСписокЗанятыхФайлов(ТекущаяЗадачаИлиДействие);

		СписокЗанятыеWordФайлы = РаботаСФайламиКлиент.ПолучитьЗанятыеWordФайлы(
		ТекущаяЗадачаИлиДействие, УникальныйИдентификатор, 
		МассивЗахваченныхФайлов);
	КонецЕсли;	

	Если СписокЗанятыеWordФайлы.Количество() <> 0 Тогда

		СтрокаФайлов = "";	
		Для Каждого ИмяРасширение Из СписокЗанятыеWordФайлы Цикл
			Если Не ПустаяСтрока(СтрокаФайлов) Тогда
				СтрокаФайлов = СтрокаФайлов + Символы.ВК;
			КонецЕсли;	
			СтрокаФайлов = СтрокаФайлов + ИмяРасширение;
		КонецЦикла;	

		Если СписокЗанятыеWordФайлы.Количество() > 1 Тогда
			ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Чтобы с файлами могли работать другие пользователи, закройте файлы:  
			| 
			|%1.'"),
			СтрокаФайлов);
		Иначе	

			ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Чтобы с файлом могли работать другие пользователи, закройте файл:  
			| 
			|%1.'"),
			СтрокаФайлов);

		КонецЕсли;	

		Обработчик = Новый ОписаниеОповещения("ПослеВопросаФайлыЗанятыWordПередЗакрытием", 
		ЭтотОбъект, Новый Структура("РезультатДействия", РезультатДействия));
		ПоказатьПредупреждение(Обработчик, ТекстСообщения);

		Возврат;

	КонецЕсли;	

	ДелопроизводствоКлиент.ПоместитьИзмененияФайлов(ТекущаяЗадачаИлиДействие, УникальныйИдентификатор, 
	МассивЗахваченныхФайлов);

	ВерсииДанныхЗадач = Новый Соответствие;
	ВерсииДанныхЗадач.Вставить(ТекущаяЗадачаИлиДействие, ВерсияДанныхТекущегоДействияЗадачи);

	РаботаСЗадачамиКлиент.ВыполнитьДействиеЗадачи(
	ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущаяЗадачаИлиДействие),
	РезультатДействия,
	ЭтотОбъект,
	ВерсииДанныхЗадач);

КонецПроцедуры

&НаСервере
&ИзменениеИКонтроль("УстановитьПараметрыГруппировкиНаСервере")
Процедура ЦППК_УстановитьПараметрыГруппировкиНаСервере()
	
	Если РежимДерева Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтбораСписка = ПараметрыОтбораСписка();
	
	СписокДействияЗадач.Параметры.УстановитьЗначениеПараметра("РеестрЗадач", ПараметрыОтбораСписка.РеестрЗадач);
	СписокЗадач.Параметры.УстановитьЗначениеПараметра("РеестрЗадач", ПараметрыОтбораСписка.РеестрЗадач);
	
	Если ПараметрыОтбораСписка.ТипОтбора = Перечисления.ТипыОтбораГруппировокЗадач.Задачи Тогда
		Элементы.СтраницыСписка.ТекущаяСтраница = Элементы.СтраницаСписокЗадач;
	ИначеЕсли ПараметрыОтбораСписка.ТипОтбора = Перечисления.ТипыОтбораГруппировокЗадач.ДействияЗадач
		И Не РежимДерева Тогда
		Элементы.СтраницыСписка.ТекущаяСтраница = Элементы.СтраницаСписокДействияЗадач;
	КонецЕсли;
	
	Элементы.ФормаСтрокаПоискаВСпискеЗадач.Видимость =
		(ПараметрыОтбораСписка.ТипОтбора = Перечисления.ТипыОтбораГруппировокЗадач.Задачи);
	Элементы.ФормаНастройкаСпискаЗадач.Видимость =
		(ПараметрыОтбораСписка.ТипОтбора = Перечисления.ТипыОтбораГруппировокЗадач.Задачи);
	Элементы.ВывестиСписокЗадачПоАвторам.Видимость =
		(ПараметрыОтбораСписка.ТипОтбора = Перечисления.ТипыОтбораГруппировокЗадач.Задачи);
	Элементы.ФормаСтрокаПоискаВСпискеДействийЗадач.Видимость =
		(ПараметрыОтбораСписка.ТипОтбора = Перечисления.ТипыОтбораГруппировокЗадач.ДействияЗадач);
	Элементы.ФормаНастройкаСпискаДействийЗадач.Видимость =
		(ПараметрыОтбораСписка.ТипОтбора = Перечисления.ТипыОтбораГруппировокЗадач.ДействияЗадач);
	Элементы.ВывестиСписокЗадачПоИсполнителям.Видимость =
		(ПараметрыОтбораСписка.ТипОтбора = Перечисления.ТипыОтбораГруппировокЗадач.ДействияЗадач);
	Элементы.КоманднаяПанельСписокЗадач.Видимость =
		Элементы.СтраницыСписка.ТекущаяСтраница = Элементы.СтраницаСписокЗадач;
	Элементы.ФормаДокументЗадачаПеренаправить.Видимость =
		Элементы.СтраницыСписка.ТекущаяСтраница = Элементы.СтраницаСписокЗадач;
	Элементы.КоманднаяПанельСписокДействий.Видимость =
		Элементы.СтраницыСписка.ТекущаяСтраница = Элементы.СтраницаСписокДействияЗадач;
	Элементы.ФормаДокументДействиеЗадачиПеренаправить.Видимость =
		Элементы.СтраницыСписка.ТекущаяСтраница = Элементы.СтраницаСписокДействияЗадач;
	Элементы.ФормаДокументДействиеЗадачиОтменитьВзятиеВРаботу.Видимость =
		Элементы.СтраницыСписка.ТекущаяСтраница = Элементы.СтраницаСписокДействияЗадач;
	Элементы.ВзятьВРаботу.Видимость =
		Элементы.СтраницыСписка.ТекущаяСтраница = Элементы.СтраницаСписокДействияЗадач
		Или Элементы.СтраницыСписка.ТекущаяСтраница = Элементы.СтраницаДеревоЗадач;
	Если Элементы.СтраницыСписка.ТекущаяСтраница = Элементы.СтраницаСписокЗадач Тогда
		СпискиВыбораБыстрогоПоиска["ВидДействия"] = СпискиВыбораБыстрогоПоиска["ВидЗадачи"]; 
	ИначеЕсли Элементы.СтраницыСписка.ТекущаяСтраница = Элементы.СтраницаСписокДействияЗадач Тогда
		СпискиВыбораБыстрогоПоиска["ВидДействия"] = СпискиВыбораБыстрогоПоиска["ВидДействияЗадачи"];
	КонецЕсли;
	
	Элементы.СписокДействияЗадачКомпоновщикНастроекПользовательскиеНастройки.Видимость =
		Элементы.СтраницыСписка.ТекущаяСтраница = Элементы.СтраницаСписокДействияЗадач;
	Элементы.СписокЗадачКомпоновщикЗадачНастроекПользовательскиеНастройки.Видимость =
		Элементы.СтраницыСписка.ТекущаяСтраница = Элементы.СтраницаСписокЗадач;
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокДействияЗадач,
		"Задача");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокДействияЗадач,
		"ОжидаетВыполнения");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокДействияЗадач,
		"Новое");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокДействияЗадач,
		"ПросроченоИОжидаетВыполнения");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокДействияЗадач,
		"ПоступилиОбновления");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокДействияЗадач,
		"ВРаботе");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокДействияЗадач,
		"Истекает");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокДействияЗадач,
		"ВСрок");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокДействияЗадач,
		"ОжидаетПроверки");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокДействияЗадач,
		"Выполнено");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокДействияЗадач,
		"ВидСостоянияУчастниковЗадач");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокЗадач,
		"ОжидаетВыполнения");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокЗадач,
		"Задача");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокЗадач,
		"Новая");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокЗадач,
		"ПросроченаИОжидаетВыполнения");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокЗадач,
		"ВРаботе");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокЗадач,
		"ВСрок");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокЗадач,
		"Истекает");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокЗадач,
		"ОжидаетПроверки");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокЗадач,
		"Выполнена");
		
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокЗадач,
		"ЭтоЧерновик");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокДействияЗадач,
		"ЭтоЧерновик");
		
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокЗадач,
		"ВидСостоянияЗадачи");
	
	ПредставлениеГруппаНоваяИлиВРаботе = ПредставлениеГруппаНоваяИлиВРаботе();
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокДействияЗадач,
		"",
		ПредставлениеГруппаНоваяИлиВРаботе);
		
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокДействияЗадач,
		"",
		"Все условия по ИЛИ");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокЗадач,
		"",
		"Все условия по ИЛИ");
		
	Если ПараметрыОтбораСписка.Состояние <> Неопределено Тогда
		
		Если ПараметрыОтбораСписка.Состояние = Перечисления.ОтборыПоСтатусуЗадач.НеВыполненные Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				СписокДействияЗадач,
				"ОжидаетВыполнения",
				Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				СписокЗадач,
				"ОжидаетВыполнения",
				Истина);
			
		ИначеЕсли ПараметрыОтбораСписка.Состояние = Перечисления.ОтборыПоСтатусуЗадач.НеНачатые
			Или ПараметрыОтбораСписка.Состояние = Справочники.СостоянияЗадач.Новая Тогда
			
			ГруппаНоваяИлиВРаботе = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
				СписокДействияЗадач.Отбор.Элементы,
				ПредставлениеГруппаНоваяИлиВРаботе,
				ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
			
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
				ГруппаНоваяИлиВРаботе,
				"Новое",
				ВидСравненияКомпоновкиДанных.Равно,
				Истина,
				НСтр("ru = 'Новая или в работе - Новая'"),
				Истина);
			
			ПредставлениеГруппаВРаботе = ПредставлениеГруппаВРаботе();
			ГруппаВРаботе = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
				ГруппаНоваяИлиВРаботе,
				ПредставлениеГруппаВРаботе,
				ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
			
			ПоказыватьВзятуюВРаботуТекущуюЗадачу =
				ЗначениеЗаполнено(ТекущаяЗадачаИлиДействие)
				И ТипЗнч(ТекущаяЗадачаИлиДействие) = Тип("ДокументСсылка.ДействиеЗадачи");
			ПредставлениеОтбораВРаботе = ПредставлениеОтбораВРаботе();
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
				ГруппаВРаботе,
				"ВРаботе",
				ВидСравненияКомпоновкиДанных.Равно,
				Истина,
				ПредставлениеОтбораВРаботе,
				ПоказыватьВзятуюВРаботуТекущуюЗадачу);
			ПредставлениеОтбораДействиеЗадачи = ПредставлениеОтбораДействиеЗадачи();
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
				ГруппаВРаботе,
				"ДействиеЗадачи",
				ВидСравненияКомпоновкиДанных.Равно,
				ТекущаяЗадачаИлиДействие,
				ПредставлениеОтбораДействиеЗадачи,
				ПоказыватьВзятуюВРаботуТекущуюЗадачу);
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				СписокЗадач,
				"Новая",
				Истина);
			
		ИначеЕсли ПараметрыОтбораСписка.Состояние = Перечисления.ОтборыПоСтатусуЗадач.ПоступилиОбновления Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				СписокДействияЗадач,
				"ПоступилиОбновления",
				Истина);
			
		ИначеЕсли ПараметрыОтбораСписка.Состояние = Перечисления.ОтборыПоСтатусуЗадач.Просроченные Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				СписокДействияЗадач,
				"ПросроченоИОжидаетВыполнения",
				Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				СписокЗадач,
				"ПросроченаИОжидаетВыполнения",
				Истина);
			
		ИначеЕсли ПараметрыОтбораСписка.Состояние = Справочники.СостоянияЗадач.ВРаботе Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				СписокДействияЗадач,
				"ВРаботе",
				Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				СписокЗадач,
				"ВРаботе",
				Истина);
			
		ИначеЕсли ПараметрыОтбораСписка.Состояние = Перечисления.ОтборыПоСтатусуЗадач.ВСрок Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				СписокДействияЗадач,
				"ВСрок",
				Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				СписокЗадач,
				"ВСрок",
				Истина);
			
		ИначеЕсли ПараметрыОтбораСписка.Состояние = Перечисления.ОтборыПоСтатусуЗадач.Истекающие Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				СписокДействияЗадач,
				"Истекает",
				Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				СписокЗадач,
				"Истекает",
				Истина);
			
		ИначеЕсли ПараметрыОтбораСписка.Состояние = Справочники.СостоянияЗадач.НаПроверке Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				СписокДействияЗадач,
				"ОжидаетПроверки",
				Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				СписокЗадач,
				"ОжидаетПроверки",
				Истина);
			
		ИначеЕсли ПараметрыОтбораСписка.Состояние = Справочники.СостоянияЗадач.Закрыта Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				СписокДействияЗадач,
				"Выполнено",
				Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				СписокЗадач,
				"Выполнена",
				Истина);
			
		ИначеЕсли ПараметрыОтбораСписка.Состояние = Справочники.СостоянияЗадач.Отменена Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				СписокДействияЗадач,
				"ВидСостоянияУчастниковЗадач",
				Перечисления.ВидыСостоянийУчастниковЗадач.Отменена);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				СписокЗадач,
				"ВидСостоянияЗадачи",
				Перечисления.ВидыСостоянийЗадач.Отменена);
			
		ИначеЕсли ПараметрыОтбораСписка.Состояние = Справочники.СостоянияЗадач.Черновик Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				СписокЗадач,
				"ЭтоЧерновик",
				Истина);

			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				СписокДействияЗадач,
				"ЭтоЧерновик",
				Истина);
			
		ИначеЕсли ПараметрыОтбораСписка.Состояние = Перечисления.ОтборыПоСтатусуЗадач.Все Тогда
			
			// Без отбора по состоянию
			
		ИначеЕсли ТипЗнч(ПараметрыОтбораСписка.Состояние) = Тип("СписокЗначений") Тогда
			
			Если ПараметрыОтбораСписка.Состояние.Количество() <> 0 Тогда
			
				ГруппаИЛИСписокДействияЗадач = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
					СписокДействияЗадач.Отбор.Элементы,
					"Все условия по ИЛИ",
					ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);	

				ГруппаИЛИСписокЗадач = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
					СписокЗадач.Отбор.Элементы,
					"Все условия по ИЛИ",
					ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли); 
					
				Для Каждого ЗначениеСтр Из ПараметрыОтбораСписка.Состояние Цикл
						
					Состояние = ЗначениеСтр.Значение;
					
					Если Состояние = Перечисления.ОтборыПоСтатусуЗадач.НеВыполненные Тогда     
						
						ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
							ГруппаИЛИСписокДействияЗадач,
							"ОжидаетВыполнения",
							ВидСравненияКомпоновкиДанных.Равно,
							Истина,,
							Истина,
							РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);		

						ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
							ГруппаИЛИСписокДействияЗадач,
							"ОжидаетПроверки",
							ВидСравненияКомпоновкиДанных.Равно,
							Истина,,
							Истина,
							РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);		

						ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
							ГруппаИЛИСписокЗадач,
							"ОжидаетВыполнения",
							ВидСравненияКомпоновкиДанных.Равно,
							Истина,,
							Истина,
							РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);		
							
					ИначеЕсли Состояние = Перечисления.ОтборыПоСтатусуЗадач.НеНачатые
						Или Состояние = Справочники.СостоянияЗадач.Новая Тогда     	                

						ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
							ГруппаИЛИСписокДействияЗадач,
							"Новое",
							ВидСравненияКомпоновкиДанных.Равно,
							Истина,,
							Истина,
							РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);		

						ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
							ГруппаИЛИСписокЗадач,
							"Новая",
							ВидСравненияКомпоновкиДанных.Равно,
							Истина,,
							Истина,
							РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);		
							
					ИначеЕсли Состояние = Перечисления.ОтборыПоСтатусуЗадач.ПоступилиОбновления	Тогда

						ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
							ГруппаИЛИСписокДействияЗадач,
							"ПоступилиОбновления",
							ВидСравненияКомпоновкиДанных.Равно,
							Истина,,
							Истина,
							РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);		
							
					ИначеЕсли Состояние = Перечисления.ОтборыПоСтатусуЗадач.Просроченные Тогда
						
						ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
							ГруппаИЛИСписокДействияЗадач,
							"ПросроченоИОжидаетВыполнения",
							ВидСравненияКомпоновкиДанных.Равно,
							Истина,,
							Истина,
							РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);		

						ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
							ГруппаИЛИСписокЗадач,
							"ПросроченаИОжидаетВыполнения",
							ВидСравненияКомпоновкиДанных.Равно,
							Истина,,
							Истина,
							РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);		
						
					ИначеЕсли Состояние = Справочники.СостоянияЗадач.ВРаботе Тогда

						ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
							ГруппаИЛИСписокДействияЗадач,
							"ВРаботе",
							ВидСравненияКомпоновкиДанных.Равно,
							Истина,,
							Истина,
							РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);		

						ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
							ГруппаИЛИСписокЗадач,
							"ВРаботе",
							ВидСравненияКомпоновкиДанных.Равно,
							Истина,,
							Истина,
							РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);		
						
					ИначеЕсли Состояние = Перечисления.ОтборыПоСтатусуЗадач.ВСрок Тогда
						
						ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
							ГруппаИЛИСписокДействияЗадач,
							"ВСрок",
							ВидСравненияКомпоновкиДанных.Равно,
							Истина,,
							Истина,
							РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);		

						ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
							ГруппаИЛИСписокЗадач,
							"ВСрок",
							ВидСравненияКомпоновкиДанных.Равно,
							Истина,,
							Истина,
							РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);		
						
					ИначеЕсли Состояние = Перечисления.ОтборыПоСтатусуЗадач.Истекающие Тогда
						
						ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
							ГруппаИЛИСписокДействияЗадач,
							"Истекает",
							ВидСравненияКомпоновкиДанных.Равно,
							Истина,,
							Истина,
							РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);		

						ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
							ГруппаИЛИСписокЗадач,
							"Истекает",
							ВидСравненияКомпоновкиДанных.Равно,
							Истина,,
							Истина,
							РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);		
						
					ИначеЕсли Состояние = Справочники.СостоянияЗадач.НаПроверке Тогда
						
						ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
							ГруппаИЛИСписокДействияЗадач,
							"ОжидаетПроверки",
							ВидСравненияКомпоновкиДанных.Равно,
							Истина,,
							Истина,
							РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);		

						ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
							ГруппаИЛИСписокЗадач,
							"ОжидаетПроверки",
							ВидСравненияКомпоновкиДанных.Равно,
							Истина,,
							Истина,
							РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);		
						
					ИначеЕсли Состояние = Справочники.СостоянияЗадач.Закрыта Тогда
						
						ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
							ГруппаИЛИСписокДействияЗадач,
							"Выполнено",
							ВидСравненияКомпоновкиДанных.Равно,
							Истина,,
							Истина,
							РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);		

						ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
							ГруппаИЛИСписокЗадач,
							"Выполнена",
							ВидСравненияКомпоновкиДанных.Равно,
							Истина,,
							Истина,
							РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);		
						
					ИначеЕсли Состояние = Справочники.СостоянияЗадач.Отменена Тогда
						
						ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
							ГруппаИЛИСписокДействияЗадач,
							"ВидСостоянияУчастниковЗадач",
							ВидСравненияКомпоновкиДанных.Равно,
							Перечисления.ВидыСостоянийУчастниковЗадач.Отменена,,
							Истина,
							РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);		

						ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
							ГруппаИЛИСписокЗадач,
							"ВидСостоянияЗадачи",
							ВидСравненияКомпоновкиДанных.Равно,
							Перечисления.ВидыСостоянийЗадач.Отменена,,
							Истина,
							РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);		
						
					ИначеЕсли Состояние = Справочники.СостоянияЗадач.Черновик Тогда
						
						ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
							ГруппаИЛИСписокЗадач,
							"ЭтоЧерновик",
							ВидСравненияКомпоновкиДанных.Равно,
							Истина,,
							Истина,
							РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);		
						
						ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
							ГруппаИЛИСписокДействияЗадач,
							"ЭтоЧерновик",
							ВидСравненияКомпоновкиДанных.Равно,
							Истина,,
							Истина,
							РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный);		
						
					КонецЕсли;	
					
				КонецЦикла;	
					
			КонецЕсли;	
			
		Иначе
			
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'Неизвестный отбор по состоянию %1'"),
				ПараметрыОтбораСписка.Состояние);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокДействияЗадач,
		"Автор");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокЗадач,
		"Автор");
	Если ПараметрыОтбораСписка.Автор <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			СписокДействияЗадач,
			"Автор",
			ПараметрыОтбораСписка.Автор);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			СписокЗадач,
			"Автор",
			ПараметрыОтбораСписка.Автор);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокЗадач,
		"ВидЗадачи");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокДействияЗадач,
		"ВидЗадачи");
	Если ПараметрыОтбораСписка.ВидЗадачи <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			СписокЗадач,
			"ВидЗадачи",
			ПараметрыОтбораСписка.ВидЗадачи);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			СписокДействияЗадач,
			"ВидЗадачи",
			ПараметрыОтбораСписка.ВидЗадачи);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокДействияЗадач,
		"ВидДействия");
	Если ПараметрыОтбораСписка.ВидДействия <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			СписокДействияЗадач,
			"ВидДействия",
			ПараметрыОтбораСписка.ВидДействия);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокДействияЗадач,
		"ВидПриложения");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокЗадач,
		"ВидПриложения");
	Если ПараметрыОтбораСписка.ВидПриложения <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			СписокДействияЗадач,
			"ВидПриложения",
			ПараметрыОтбораСписка.ВидПриложения);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			СписокЗадач,
			"ВидПриложения",
			ПараметрыОтбораСписка.ВидПриложения);
	КонецЕсли;
	
	// УстановитьЭлементОтбораДинамическогоСписка может некорректно работать при указании то 1 элемент, то массива.
	// Нужна предварительная очистка.
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокДействияЗадач, "Исполнитель");
	Если ПараметрыОтбораСписка.Исполнитель <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			СписокДействияЗадач,
			"Исполнитель",
			ПараметрыОтбораСписка.Исполнитель);
#Вставка
//++AxelSoft Шарапова 24.01.2025 САНФ-030728
	// Типовые отборы, регулирующие отображение задач, переданных замещающим.
	//ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
	//СписокДействияЗадач, "ЕстьЗамещающие");
	//ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
	//СписокДействияЗадач, "ЕстьЗамещающие",, Ложь);
	//ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
	//СписокДействияЗадач, "Замещаемые",, Ложь);
	//Если ПараметрыОтбора.Исполнитель <> Неопределено Тогда
	//	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
	//	СписокДействияЗадач,
	//	"Исполнитель",
	//	ПараметрыОтбора.Исполнитель);
	//	КолИсполнителей = ?(ТипЗнч(ПараметрыОтбора.Исполнитель) = Тип("Массив"), 
	//	ПараметрыОтбора.Исполнитель.Количество(), 1);
	//	КолИсполнителейБезЗамещаемых = ?(ТипЗнч(ПараметрыОтбора.ИсполнительБезЗамещаемых) = Тип("Массив"), 
	//	ПараметрыОтбора.ИсполнительБезЗамещаемых.Количество(), 1);
	//	ЕстьЗамещаемые = КолИсполнителей > КолИсполнителейБезЗамещаемых;
	//	Если ЕстьЗамещаемые Тогда
	//		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
	//		СписокДействияЗадач, "ИсполнительБезЗамещаемых", ПараметрыОтбора.ИсполнительБезЗамещаемых);
	//	КонецЕсли;
	//	
	// ЦППК
	//	//Если ЦППК_ИсполнителиКОтбору.Количество() = 0 Тогда
	//		Если Не ЕстьЗамещаемые Тогда
	//			Если ТипЗнч(ПараметрыОтбора.ИсполнительБезЗамещаемых) = Тип("Массив") Тогда
	//				ЦППК_ИсполнителиКОтбору.ЗагрузитьЗначения(ПараметрыОтбора.ИсполнительБезЗамещаемых);
	//			Иначе
	//				ЦППК_ИсполнителиКОтбору.Добавить(ПараметрыОтбора.ИсполнительБезЗамещаемых);
	//			КонецЕсли;
	//		Иначе
	//			Если ТипЗнч(ПараметрыОтбора.Исполнитель) = Тип("Массив") Тогда
	//				ЦППК_ИсполнителиКОтбору.ЗагрузитьЗначения(ПараметрыОтбора.Исполнитель);
	//			Иначе
	//				ЦППК_ИсполнителиКОтбору.Добавить(ПараметрыОтбора.Исполнитель);
	//			КонецЕсли;				
	//		КонецЕсли;
	//		
	//		//ЦППК_ИсполнителиКОтбору.ЗагрузитьЗначения(?(Не ПоказыватьПереданныеЗамещающим, ПараметрыОтбора.ИсполнительБезЗамещаемых, ПараметрыОтбора.Исполнитель));
	//		Запрос = Новый Запрос;
	//		Запрос.Текст = 
	//		"ВЫБРАТЬ
	//		|	ИсполнителиРолей.РольИсполнителя КАК РольИсполнителя
	//		|ИЗ
	//		|	РегистрСведений.ИсполнителиРолей КАК ИсполнителиРолей
	//		|ГДЕ
	//		|	ИсполнителиРолей.Исполнитель В(&Исполнители)";
	//		
	//		Запрос.УстановитьПараметр("Исполнители", ЦППК_ИсполнителиКОтбору);
	//		
	//		Выборка = Запрос.Выполнить().Выбрать();
	//		
	//		Пока Выборка.Следующий() Цикл
	//			ЦППК_ИсполнителиКОтбору.Добавить(Выборка.РольИсполнителя);
	//		КонецЦикла;
	//	//КонецЕсли;
	//	
	//	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
	//		СписокДействияЗадач, "ИсполнителиСРолями", ЦППК_ИсполнителиКОтбору.ВыгрузитьЗначения());		
//--AxelSoft Шарапова 24.01.2025 САНФ-030728
#КонецВставки
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокДействияЗадач,
		"ДатаОкончанияУчета");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокЗадач,
		"ДатаОкончанияУчета");
	Если ПараметрыОтбораСписка.ДатаС <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			СписокДействияЗадач,
			"ДатаОкончанияУчета",
			НачалоДня(ПараметрыОтбораСписка.ДатаС),
			ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			СписокЗадач,
			"ДатаОкончанияУчета",
			НачалоДня(ПараметрыОтбораСписка.ДатаС),
			ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокДействияЗадач,
		"ДатаНачалаУчета");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокЗадач,
		"ДатаНачалаУчета");
	Если ПараметрыОтбораСписка.ДатаПо <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			СписокДействияЗадач,
			"ДатаНачалаУчета",
			КонецДня(ПараметрыОтбораСписка.ДатаПо),
			ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			СписокЗадач,
			"ДатаНачалаУчета",
			КонецДня(ПараметрыОтбораСписка.ДатаПо),
			ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокДействияЗадач,
		"Проект");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокЗадач,
		"Проект");
	Если ПараметрыОтбораСписка.Проект <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			СписокДействияЗадач,
			"Проект",
			ПараметрыОтбораСписка.Проект);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			СписокЗадач,
			"Проект",
			ПараметрыОтбораСписка.Проект);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокДействияЗадач,
		"ТипПриложения");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокЗадач,
		"ТипПриложения");
	Если ПараметрыОтбораСписка.ТипПриложения <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			СписокДействияЗадач,
			"ТипПриложения",
			ПараметрыОтбораСписка.ТипПриложения);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			СписокЗадач,
			"ТипПриложения",
			ПараметрыОтбораСписка.ТипПриложения);
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокДействияЗадач,
		"Флаг");
	ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
		СписокЗадач,
		"Флаг");
	Если ПараметрыОтбораСписка.Флаг <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			СписокДействияЗадач,
			"Флаг",
			ПараметрыОтбораСписка.Флаг);
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			СписокЗадач,
			"Флаг",
			ПараметрыОтбораСписка.Флаг);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборПоПриложению) Тогда
		ВызватьИсключение НСтр("ru = 'Отбор по приложению не поддерживаются в списке.'");
	КонецЕсли;
	
	ОбновитьИтоги();
	ОбновитьЭлементыСтрокиГруппировок();
	
КонецПроцедуры

// ЦППК Горбачев А.В. 08.07.2024
//
// Открывает форму для групповой обработки задач.
//
// ++
&НаКлиенте
Процедура ЦППК_ГрупповоеЗакрытиеЗадач()
	
	ОткрытьФорму("ОбщаяФорма.ЦППК_ФормаГрупповойОбработкиРезультатаДействия");
	
КонецПроцедуры
// --

&НаСервере
&ИзменениеИКонтроль("ЗаполнитьГруппировкиПоАвтору")
Процедура ЦППК_ЗаполнитьГруппировкиПоАвтору(ДанныеГруппировок, КлючНазначения, Раздел,
		ПараметрыОтбораИтогов, ОсновнаяГруппировка = Неопределено)
	
	ЭтоОсновнаяГруппировка = Не ЗначениеЗаполнено(ОсновнаяГруппировка);
	
	ЗадачиИтогиПоАвторам =
		ЗадачиИтогиПоАвторам(ПараметрыОтбораИтогов, КлючНазначения);
	
#Вставка
	//MDK + Оптимизация группировки по авторам
	АвторыЗадач = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ЗадачиИтогиПоАвторам.ВыгрузитьКолонку("Автор"));
	//Создаем кэш для обращений, только потом используем функцию ГруппировкаПоАвтору
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ГруппировкиЗадач.Автор КАК Автор,
		|	ГруппировкиЗадач.Ссылка КАК Группировка
		|ИЗ
		|	Справочник.ГруппировкиЗадач КАК ГруппировкиЗадач
		|ГДЕ
		|	ГруппировкиЗадач.Родитель = &Раздел
		|	И ГруппировкиЗадач.Автор В(&Авторы)";
	
	Запрос.УстановитьПараметр("Авторы", АвторыЗадач);
	Запрос.УстановитьПараметр("Раздел", Раздел);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаГруппировки = РезультатЗапроса.Выбрать();
	КэшГруппировки = Новый Соответствие;
	Пока ВыборкаГруппировки.Следующий() Цикл
		КэшГруппировки.Вставить(ВыборкаГруппировки.Автор, ВыборкаГруппировки.Группировка);
	КонецЦикла;
	//MDK
#КонецВставки

	Для Каждого ЗадачиИтогиПоАвтору Из ЗадачиИтогиПоАвторам Цикл
		
		ДанныеГруппировки = ДанныеГруппировки();
		
#Удаление
		УстанавливаемаяГруппировка = Справочники.ГруппировкиЗадач.ГруппировкаПоАвтору(
			Раздел,
			ЗадачиИтогиПоАвтору.Автор);
#КонецУдаления
#Вставка
		УстанавливаемаяГруппировка = КэшГруппировки[ЗадачиИтогиПоАвтору.Автор]; 
		Если УстанавливаемаяГруппировка = Неопределено Тогда
			УстанавливаемаяГруппировка = Справочники.ГруппировкиЗадач.ГруппировкаПоАвтору(
			Раздел,
			ЗадачиИтогиПоАвтору.Автор);
		КонецЕсли;	
#КонецВставки
		
		Если ЭтоОсновнаяГруппировка Тогда
			ДанныеГруппировки.Группировка = УстанавливаемаяГруппировка;
			ДанныеГруппировки.Представление = Строка(ДанныеГруппировки.Группировка);
			ДанныеГруппировки.Родитель.Группировка = Раздел;
		Иначе
			ДанныеГруппировки.Группировка = ОсновнаяГруппировка;
			ДанныеГруппировки.ДополнительнаяГруппировка = УстанавливаемаяГруппировка;
			ДанныеГруппировки.Представление = Строка(ДанныеГруппировки.ДополнительнаяГруппировка);
			ДанныеГруппировки.Родитель.Группировка = ОсновнаяГруппировка;
		КонецЕсли;
		
		ДанныеГруппировки.Порядок = ДанныеГруппировки.Представление;
		ДанныеГруппировки.ИндексКартинки = -1;
		ДанныеГруппировки.ОтображатьПустую = ОтображатьПустуюГруппировки(КлючНазначения);
		
		ДанныеГруппировки.Количество = КоличествоГруппировки(ЗадачиИтогиПоАвтору, КлючНазначения);
		
		ДанныеГруппировок.Добавить(ДанныеГруппировки);
		
		Если ЭтоОсновнаяГруппировка Тогда
			ЗаполнитьДополнительныеГруппировки(ДанныеГруппировок, КлючНазначения,
				Раздел, ПараметрыОтбораИтогов, ДанныеГруппировки.Группировка);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// ЦППК Горбачев А.В. 26.07.2024 - САНФ-027024
//
// ++
&НаКлиенте
&После("ОбновитьОбластьДействия")
Процедура ЦППК_ОбновитьОбластьДействия(ДанныеОбластиДействия)
	
	ЦППК_ОбновитьОбластьДействияСервер();
	
КонецПроцедуры

&НаСервере
Процедура ЦППК_ОбновитьОбластьДействияСервер()
	
	//++AxelSoft Шарапова 22.08.2024 САНФ-027979
	ВыводитьОценку = Ложь;
	Если ТипЗнч(ТекущаяЗадачаИлиДействие) = Тип("ДокументСсылка.ДействиеЗадачи") Тогда
	
		ВыводитьОценку = ЗначениеЗаполнено(ТекущаяЗадачаИлиДействие)
		//++AxelSoft NM 12.08.2024 САНФ-027688
		//И РольДоступна("ЦППК_УказаниеОценкиПриСогласовании")
		И (РольДоступна("ЦППК_УказаниеОценкиПриСогласовании") ИЛИ РольДоступна("АдминистраторСистемы") ИЛИ РольДоступна("ПолныеПрава"))
		//--AxelSoft NM 12.08.2024 САНФ-027688
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяЗадачаИлиДействие, "ВидДействия") = Справочники.ВидыДействийЗадач.Согласовать;
	
	ИначеЕсли ТипЗнч(ТекущаяЗадачаИлиДействие) = Тип("ДокументСсылка.Задача") Тогда
		
		ВыводитьОценку = ЗначениеЗаполнено(ТекущаяЗадачаИлиДействие)
		//++AxelSoft NM 12.08.2024 САНФ-027688
		//И РольДоступна("ЦППК_УказаниеОценкиПриСогласовании")
		И (РольДоступна("ЦППК_УказаниеОценкиПриСогласовании") ИЛИ РольДоступна("АдминистраторСистемы") ИЛИ РольДоступна("ПолныеПрава"))
		//--AxelSoft NM 12.08.2024 САНФ-027688
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущаяЗадачаИлиДействие, "ВидЗадачи") = Справочники.ВидыЗадач.Согласование;
		
	КонецЕсли;
	//--AxelSoft Шарапова 22.08.2024 САНФ-027979
		
	ЭлементыВыведены = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элементы, "ЦППК_ОценкаВыполнения");
	
	Если ВыводитьОценку Тогда
		
		Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтаФорма, "ЦППК_ВыбраннаяОценка") Тогда
			ЦППК_ПодключаемыеКоманды.ЦППК_ДобавитьРеквизитДляОценкиЗадачи(ЭтаФорма);
		КонецЕсли;
		
		Если НЕ ЭлементыВыведены Тогда
			ЦППК_ПодключаемыеКоманды.ЦППК_ДобавитьЭлементыФормыДляОценкиЗадачи(ЭтаФорма);
		КонецЕсли;
		
		Элементы["ЦППК_ОценкаВыполнения"].Видимость = Истина;
		ЭтаФорма["ЦППК_ВыбраннаяОценка"] = РегистрыСведений.ЦППК_ОценкиДействийЗадач.ОценкаДействияЗадачи(ТекущаяЗадачаИлиДействие);
		
	Иначе
		
		Если ЭлементыВыведены Тогда
			Элементы["ЦППК_ОценкаВыполнения"].Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	//++AxelSoft Шарапова 21.08.2024 САНФ-027859
	Если ТекущийИсточникДействия <> Неопределено Тогда
		
		//++AxelSoft Шарапова 11.09.2024 САНФ-028571
		СписокПредопределенныхОбъектов = Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений.ПолучитьИменаПредопределенных();
		МетаданныеОбъекта = ТекущийИсточникДействия.Метаданные();
		ИмяОбъектаМетаданных = МетаданныеОбъекта.Имя;
		ВидОбъектаМетаданных = ОбщегоНазначения.ВидОбъектаПоСсылке(ТекущийИсточникДействия);
		
		ИмяЭлемента = ВидОбъектаМетаданных + "_" + ИмяОбъектаМетаданных;
		
		Если СписокПредопределенныхОбъектов.Найти(ИмяЭлемента) <> Неопределено Тогда
		//--AxelSoft Шарапова 11.09.2024 САНФ-028571
			
			СвойстваОбъекта = УправлениеСвойствами.СвойстваОбъекта(ТекущийИсточникДействия);
			Если СвойстваОбъекта.Количество() = 0 Тогда
				
				ТекущийИсточникДействияОбъект = ТекущийИсточникДействия.ПолучитьОбъект();
				ЗначениеВРеквизитФормы(ТекущийИсточникДействияОбъект, "ТекущийИсточникДействияДанные");
				
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЕсли;
	//--AxelSoft Шарапова 21.08.2024 САНФ-027859

КонецПроцедуры

&НаКлиенте
&После("ОбновитьОбластьПросмотра")
Процедура ЦППК_ОбновитьОбластьПросмотра()
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтаФорма, "ЦППК_ВыбраннаяОценка")
		И Элементы["ЦППК_ОценкаВыполнения"].Видимость Тогда
		ЦППК_ОбработкаЗвезды(ЭтаФорма["ЦППК_ВыбраннаяОценка"]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦППК_ОбработкаЗвезды(ВыбраннаяЗвезда)
	
	ТТС_ОбщийМодуль.ЦППК_ОбработкаЗвездыОценкиЗадачи(ЭтаФорма, ВыбраннаяЗвезда);
	//++AxelSoft Шарапова 22.08.2024 САНФ-027979
	Если ТипЗнч(ТекущаяЗадачаИлиДействие) = Тип("ДокументСсылка.ДействиеЗадачи") Тогда
		ЦППК_ЗаписатьОценку(ТекущаяЗадачаИлиДействие, ЭтаФорма["ЦППК_ВыбраннаяОценка"]);
	КонецЕсли;
	//--AxelSoft Шарапова 22.08.2024 САНФ-027979
			
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЦППК_ЗаписатьОценку(ДействиеЗадачи, Оценка)
	
	РегистрыСведений.ЦППК_ОценкиДействийЗадач.ЗаписатьОбновитьОценкуДействияЗадачи(ДействиеЗадачи, Оценка);
	
КонецПроцедуры

&НаКлиенте
&ИзменениеИКонтроль("СписокДействияЗадачВыбор")
Процедура ЦППК_СписокДействияЗадачВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	Если ЭтоМобильныйКлиент Тогда
		Если Не РежимВыбора 
			И ЭтоМобильноеУстройствоСБольшимЭкраном 
			И Не ОтображениеКарточкиЗадачи = ПредопределенноеЗначение("Перечисление.ВариантыОтображенияОбластиЧтения.НеОтображать") Тогда

			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если ТипЗнч(Элемент.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат;
	КонецЕсли;

	ТекущиеДанные = Элементы.СписокДействияЗадач.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СтандартнаяОбработка = Ложь;

	Если РежимВыбора Тогда

		ОбработатьВыбор();

	ИначеЕсли Поле = Элементы.СписокДействияЗадачИндексКартинкиФлага Тогда

		РаботаСЗадачамиКлиент.ПереключитьФлаг(ТекущиеДанные.ДействиеЗадачи);

	Иначе

		#Удаление
		РаботаСЗадачамиКлиент.ОткрытьКарточкуИсполнителяЗадачи(ТекущиеДанные.ДействиеЗадачи);
		#КонецУдаления

		#Вставка       
		//++AxelSoft Шарапова 01.04.2025 САНФ-033171	
		ДопПараметрыОткрытия = Новый Структура();
		Если СтрНачинаетсяС(КлючНазначенияИспользования, "ЗадачиМне") Тогда
			ДопПараметрыОткрытия.Вставить("ФормаЗадачиМне", Истина);
		КонецЕсли;
		РаботаСЗадачамиКлиент.ОткрытьКарточкуИсполнителяЗадачи(ТекущиеДанные.ДействиеЗадачи, ДопПараметрыОткрытия);
		//--AxelSoft Шарапова 01.04.2025 САНФ-033171	
		#КонецВставки

	КонецЕсли;

КонецПроцедуры

// --    
#КонецОбласти
