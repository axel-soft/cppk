
#Область ОбработчикиФормы

&НаСервере
Процедура ЦППК_ПриСозданииНаСервереПосле(Отказ, СтандартнаяОбработка)
	
	 //++AxelSoft Шарапова 24.01.2025 САНФ-030728	
	//Если Элементы.ВыполнитьДействиеЗадачиВариант2.Видимость И Элементы.ВыполнитьДействиеЗадачиВариант2.Заголовок = "Согласовано с замечаниями" Тогда
	//	Элементы.ВыполнитьДействиеЗадачиВариант2.Видимость = Не ЦППК_ЭтоЗадачаБезСогласованияСЗамечаниями(ТекущееДействиеЗадачи);
	//КонецЕсли;
	 //--AxelSoft Шарапова 24.01.2025 САНФ-030728	
	
	// ЦППК Горбачев А.В. 26.07.2024 - САНФ-027024
	//
	// ++
	Если ЗначениеЗаполнено(ТекущееДействиеЗадачи)
		//++AxelSoft NM 12.08.2024 САНФ-027688
		//И РольДоступна("ЦППК_УказаниеОценкиПриСогласовании")
		И (РольДоступна("ЦППК_УказаниеОценкиПриСогласовании") ИЛИ РольДоступна("АдминистраторСистемы") ИЛИ РольДоступна("ПолныеПрава"))
		//--AxelSoft NM 12.08.2024 САНФ-027688
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущееДействиеЗадачи, "ВидДействия") = Справочники.ВидыДействийЗадач.Согласовать Тогда
		
		ЭтаФорма["ЦППК_ВыбраннаяОценка"] = РегистрыСведений.ЦППК_ОценкиДействийЗадач.ОценкаДействияЗадачи(ТекущееДействиеЗадачи);
		
	КонецЕсли;
	// --
	
	//++AxelSoft Шарапова 01.04.2025 САНФ-033171	
	ДобавляемыеРеквизиты = Новый Массив;
	НовыйРеквизит = Новый РеквизитФормы("ЦППК_РодительФормыЗадачиМне", Новый ОписаниеТипов("Булево"));
	ДобавляемыеРеквизиты.Добавить(НовыйРеквизит);
	
	ЭтаФорма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	Если Параметры.Свойство("ФормаЗадачиМне") Тогда
		ЭтаФорма.ЦППК_РодительФормыЗадачиМне = Истина;
	Иначе
		ЭтаФорма.ЦППК_РодительФормыЗадачиМне = Ложь;
	КонецЕсли;
	//--AxelSoft Шарапова 01.04.2025 САНФ-033171	
	
КонецПроцедуры

&НаКлиенте
Процедура ЦППК_ПриОткрытииПосле(Отказ)     
	
	// ++ЦППК  2.2.1.5. Адаптация по блоку НСИ и администрированию 
	//++AxelSoft Шарапова 28.11.2024 САНФ-030503
	// Расширена возможность взятие задач по всем БП
	
	Если ЭтаФорма.ЦППК_РодительФормыЗадачиМне Тогда
		//Если (ТИПЗНЧ(ТекущийИсточникДействияДанные.БизнесПроцесс) = Тип("БизнесПроцессСсылка.Исполнение") 
		Если (НЕ ТекущийИсточникДействияДанные.Отменена
			//--AxelSoft Шарапова 28.11.2024 САНФ-030503
			И НЕ ТекущийИсточникДействияДанные.ПометкаУдаления 
			И НЕ ТекущийИсточникДействияДанные.ПринятаКИсполнению
			И НЕ ТекущийИсточникДействияДанные.Выполнена
			И СотрудникиВызовСервера.ЭтоСотрудникПользователя(ТекущийИсточникДействияДанные.Исполнитель))
			ИЛИ
			(ТекущийИсточникДействияДанные.БизнесПроцесс = Неопределено 
			И НЕ ТекущийИсточникДействияДанные.Отменена
			И НЕ ТекущийИсточникДействияДанные.ПометкаУдаления 
			И НЕ ТекущийИсточникДействияДанные.Выполнена 
			И НЕ ТекущийИсточникДействияДанные.ПринятаКИсполнению) Тогда
			
			Если ЦППК_АвтоматическиПриниматьКИсполнению(ТекущееДействиеЗадачи) Тогда
				
				РаботаСЗадачамиКлиент.ВзятьВРаботу(
				ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущееДействиеЗадачи),
				ЭтотОбъект);
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// --ЦППК
	
	// ЦППК Горбачев А.В. 26.07.2024 - САНФ-027024
	//
	// ++
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтаФорма, "ЦППК_ВыбраннаяОценка") Тогда
		ЦППК_ОбработкаЗвезды(ЭтаФорма["ЦППК_ВыбраннаяОценка"]);
	КонецЕсли;
	// --
	
КонецПроцедуры

&НаКлиенте
&После("ПередЗакрытием")
Процедура ЦППК_ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	// ЦППК Горбачев А.В. 26.07.2024 - САНФ-027024
	//
	// ++
	Если НЕ ЗавершениеРаботы
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтаФорма, "ЦППК_ВыбраннаяОценка") Тогда
		ЦППК_ЗаписатьОценку(ТекущееДействиеЗадачи, ЭтаФорма["ЦППК_ВыбраннаяОценка"]);
	КонецЕсли;
	// --
	
КонецПроцедуры

#КонецОбласти

#Область КомандыФормы

&НаКлиенте
&ИзменениеИКонтроль("ВыполнитьДействиеЗадачиНаКлиентеВФорме")
Процедура ЦППК_ВыполнитьДействиеЗадачиНаКлиентеВФорме(РезультатДействия)

	ОценкаПроизводительностиКлиент.ЗамерВремени("ДействиеЗадачиВыполнениеИзФормыОбъекта");

	ОтключитьОбработчикОжидания("ВзятьВРаботуСВыборомИсполнителя");
	ДействиеДляОтложенногоВзятияВРаботу = Неопределено;

	// РаспознаваниеРечи
	РаботаСРечьюБМОКлиент.ОстановитьПотоковоеРаспознавание(УникальныйИдентификатор);
	РаботаСРечьюЖурналированиеКлиент.ОчиститьЖурнал(УникальныйИдентификатор);
	// Конец РаспознаваниеРечи

	Если НужноСохранитьРезультатДействия Тогда
		РезультатДействияСохранен = СохранитьРезультатДействия();
		Если Не РезультатДействияСохранен Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(РезультатДействия) Тогда
		ВызватьИсключение СтрШаблон(
		НСтр("ru = 'Не указан результат действия %1 (%2).'"),
		РезультатДействия,
		ТипЗнч(РезультатДействия));
	КонецЕсли;
#Вставка
	// { *Грошев (ТТС) [29.06.2020]
	Если ТекущийИсточникДействия <> Неопределено И НЕ ТекущийИсточникДействияДанные.ТочкаМаршрута = ПредопределенноеЗначение("БизнесПроцесс.Исполнение.ТочкаМаршрута.Проверить") Тогда
		ЕстьОшибки = ТТС_РаботаСБизнесПроцессамиВызовСервера.ПроверитьВозможностьИсполнения(ТекущийИсточникДействияДанные);
		Если ЕстьОшибки Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	// }
	// ++ЦППК
	// ЦППК_Перов + 
	Если ЦППК_ПолучитьКонстантуКомментарий() И РезультатДействия = ПредопределенноеЗначение("Справочник.РезультатыДействийЗадач.Выполнена") 
		И НЕ ЗначениеЗаполнено(РезультатДействияТекстом) Тогда 
		ОчиститьСообщения();
		ОбщегоНазначенияКлиент.СообщитьПользователю(
		НСтр("ru = 'Укажите комментарий'"),, 
		"РезультатДействияТекстом");
		Возврат;
	КонецЕсли;
	// ЦППК_Перов -
	// --ЦППК  
	
	
	// Котляров 26.08.2025 САНФ-035983  Перенос сроков договора.
	Если ТекущийИсточникДействияДанные.Предметы.Количество() = 1 Тогда
		ПервыйДокумент = ТекущийИсточникДействияДанные.Предметы[0].Предмет;
		Если ТипЗнч(ПервыйДокумент) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
			ВидДокумента = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(ПервыйДокумент, "ВидДокумента");
			Если РезультатДействия = ПредопределенноеЗначение("Справочник.РезультатыДействийЗадач.Зарегистрировано") И 
				(ВидДокумента = ЦППК_ОбщийМодульВызовСервера.ПолучитьСсылкуИзНавигационной("e1cib/data/Справочник.ВидыДокументов?ref=9b4a000c29a6903a11ee62157cdf020c")
				ИЛИ ВидДокумента =  ЦППК_ОбщийМодульВызовСервера.ПолучитьСсылкуИзНавигационной("e1cib/data/Справочник.ВидыДокументов?ref=a88d005056bf474411e5cef9e0013665") 
				ИЛИ ВидДокумента =  ЦППК_ОбщийМодульВызовСервера.ПолучитьСсылкуИзНавигационной("e1cib/data/Справочник.ВидыДокументов?ref=8c09005056bf28da11eeaf2f10f10606")
				)
				Тогда  
				
				ИзменяетСрок = ПолучитСвойствоИзменяет(ПервыйДокумент); //УправлениеСвойствами.ЗначениеСвойства(Объект.Ссылка, "ИзменяетСрокДоговора");
				
				Если Значениезаполнено(ИзменяетСрок) И ИзменяетСрок Тогда
					РезультатИ_ПорядокПродления = ЦППК_ОбщийМодульВызовСервера.УжеЕстьИзменяющееДопСоглашение(ТекущееДействиеЗадачи);
					
					Если РезультатИ_ПорядокПродления.ЕстьИзменяющие Тогда
						Режим = РежимДиалогаВопрос.ДаНет;
						Ответ = Вопрос("Срок действия Договора ранее уже был изменен другим документом ." + Символы.ПС + "Продолжить регистрацию?", Режим, 0);
						Если Ответ = КодВозвратаДиалога.Нет Тогда
							Возврат;
						КонецЕсли;			
					КонецЕсли;
					
					Если (РезультатИ_ПорядокПродления.ПорядокПродления <> ПредопределенноеЗначение("Перечисление.ПорядокПродления.ДопускаетПродление") 
						И ЗначениеЗаполнено(РезультатИ_ПорядокПродления.ПорядокПродления))
						ИЛИ 
						(НЕ РезультатИ_ПорядокПродления.ДоИсполненияОбязательств И 
						НЕ ЗначениеЗаполнено(РезультатИ_ПорядокПродления.ПорядокПродления))
						Тогда
						Режим = РежимДиалогаВопрос.ДаНет;
						Ответ = Вопрос("Договор не предусматривает продления." + Символы.ПС+ "Сроки не будут скорректированы доп.соглашением." + Символы.ПС + "Продолжить регистрацию?", Режим, 0);
						Если Ответ = КодВозвратаДиалога.Нет Тогда
							Возврат;
						КонецЕсли;			
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	

	
#КонецВставки

	ВерсииДанных = Новый Соответствие;
	ВерсииДанных[ТекущееДействиеЗадачи] = ТекущаяВерсияДанныхДействияЗадачи;

	РаботаСЗадачамиКлиент.ВыполнитьДействиеЗадачи(
	ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущееДействиеЗадачи),
	РезультатДействия,
	ЭтотОбъект,
	ВерсииДанных);

КонецПроцедуры  

&НаСервереБезКонтекста
Функция ПолучитСвойствоИзменяет(Ссылка)
	Возврат УправлениеСвойствами.ЗначениеСвойства(Ссылка, "ИзменяетСрокДоговора");
КонецФункции // ПолучитСвойство()

&НаКлиенте
Процедура ЦППК_ОбойтиДеревоРекурсивно(ЭлементыДерева)
	
	//Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
	//	
	//	Если ТипЗнч(ЭлементДерева.Приложение) = Тип("СправочникСсылка.Файлы") И ЭлементДерева.Приложение <> ЦППК_ПустаяСсыкаСправочникаФайлы() Тогда
	//		НовСтрока = ЭтотОбъект.ЦППК_Файлы.Добавить();
	//		НовСтрока.Файл = ЭлементДерева.Приложение;
	//	КонецЕсли;
	//	
	//	ЦППК_ОбойтиДеревоРекурсивно(ЭлементДерева.ПолучитьЭлементы());
	//КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ЦППК_ПолучитьКонстантуКомментарий()
	Возврат Константы.ОбяательноеЗаполнениеКомментарияВИсполнении.Получить();
КонецФункции

&НаСервереБезКонтекста
Функция ЦППК_ПустаяСсыкаСправочникаФайлы()
	Возврат Справочники.Файлы.ПустаяСсылка();	
КонецФункции

&НаСервереБезКонтекста
Функция ЦППК_УзнатьОбИспользованииФормыПодписи(ПоследнийДокумент)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыДокументов.цппк_ИспользоватьФормуПодписиФайлов КАК цппк_ИспользоватьФормуПодписиФайлов
	|ИЗ
	|	Справочник.ДокументыПредприятия КАК ДокументыПредприятия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыДокументов КАК ВидыДокументов
	|		ПО ДокументыПредприятия.ВидДокумента = ВидыДокументов.Ссылка
	|ГДЕ
	|	ДокументыПредприятия.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ПоследнийДокумент);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат  Выборка.цппк_ИспользоватьФормуПодписиФайлов; 
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервереБезКонтекста 
Функция ЦППК_ПолучитьПоследнийДокумент(ТекущаяЗадача) //Перов3
	
	ПоследнийДокумент = Справочники.ДокументыПредприятия.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗадачаПриложения.Приложение КАК Приложение
		|ИЗ
		|	Документ.Задача.Приложения КАК ЗадачаПриложения
		|ГДЕ
		|	ЗадачаПриложения.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗадачаПриложения.НомерСтроки";
	
	Запрос.УстановитьПараметр("Ссылка", ТекущаяЗадача);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		Если ТипЗнч(Выборка.Приложение) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
			ПоследнийДокумент = Выборка.Приложение; 
		КонецЕсли;  
	КонецЦикла;
	
	Возврат ПоследнийДокумент;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЦППК_ПолучитьРезультатЗадачи() //Перов3
	Возврат	Справочники.РезультатыДействийЗадач.Подписано;	
КонецФункции

&НаСервереБезКонтекста
Функция ЦППК_АвтоматическиПриниматьКИсполнению(ТекущееДействиеЗадачи)
	
	ПриниматьКИсполнению = Ложь;
	
	ТТС_АвтоматическиПриниматьКИсполнению = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
	"ТТС_НастройкиАвтопринятия",
	"ТТС_АвтоматическиПриниматьКИсполнению",
	Ложь);
	
	//++AxelSoft Шарапова 28.11.2024 САНФ-030503
	// Расширена возможность взятие задач по всем БП
	Возврат НЕ ТТС_АвтоматическиПриниматьКИсполнению; 
	//--AxelSoft Шарапова 28.11.2024 САНФ-030503
	
	ПроверкаВидаДействия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущееДействиеЗадачи, "ВидДействия");
	
	Если (ПроверкаВидаДействия = Справочники.ВидыДействийЗадач.Проверить
		ИЛИ ПроверкаВидаДействия = Справочники.ВидыДействийЗадач.Ознакомиться
		ИЛИ ПроверкаВидаДействия = Справочники.ВидыДействийЗадач.Исполнить)
		И НЕ ТТС_АвтоматическиПриниматьКИсполнению Тогда
		ПриниматьКИсполнению = Истина;
	КонецЕсли;
	
	Возврат ПриниматьКИсполнению;
	
КонецФункции

&НаСервере
Функция ЦППК_ЭтоЗадачаБезСогласованияСЗамечаниями(ДействиеЗадачи) 
	
	Если Не ЗначениеЗаполнено(ДействиеЗадачи) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Действие = Неопределено;
	
	УстановитьПривилегированныйРежим(Истина);
	
	БезСогласованияСЗамечаниями = Ложь;	
	
	КорневаяЗадача = РаботаСЗадачами.КорневаяЗадача(ДействиеЗадачи);
	
	Если Не ЗначениеЗаполнено(КорневаяЗадача) И ЗначениеЗаполнено(ДействиеЗадачи) Тогда
		КорневаяЗадача = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДействиеЗадачи, "Задача");
	КонецЕсли;	
	
	БизнесПроцесс = РаботаСЗадачами.ИсточникЗадачи(КорневаяЗадача);
	Если ЗначениеЗаполнено(БизнесПроцесс) Тогда
		
		Действие = РаботаСПроцессамиПоДействиям.ДействиеПоПроцессу(БизнесПроцесс);	
		Если ЗначениеЗаполнено(Действие) И ТипЗнч(Действие) = Тип("СправочникСсылка.ДействияСогласования") Тогда 
			
			Если ОбщегоНазначения.СсылкаСуществует(Действие.НастройкаДействия) Тогда
				БезСогласованияСЗамечаниями = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Действие.НастройкаДействия, "ЦППК_БезСогласованияСЗамечаниями");
			Иначе
				БезСогласованияСЗамечаниями = НЕ Действие.СогласованиеВРежимеЗамечаний;
			КонецЕсли;		
			
		КонецЕсли;		
		
	КонецЕсли;		
	
	Возврат БезСогласованияСЗамечаниями;
	
КонецФункции

&НаСервере
Функция ПолучитьРольДляКнопки()

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|		ПолномочияСотрудников.Полномочия КАК Полномочия,
		|		ПолномочияСотрудников.Владелец КАК Владелец
		|	ПОМЕСТИТЬ СписокУчастниковРоли
		|	ИЗ
		|		Справочник.ПрофилиГруппДоступа КАК ПрофилиГруппДоступа
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПолномочияСотрудников КАК ПолномочияСотрудников
		|			ПО (ПрофилиГруппДоступа.Ссылка = ПолномочияСотрудников.Полномочия)
		|	ГДЕ
		|		ПрофилиГруппДоступа.Ссылка = &Роль
		|	;
		|	
		|	////////////////////////////////////////////////////////////////////////////////
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		СписокУчастниковРоли.Полномочия КАК Полномочия,
		|		СписокУчастниковРоли.Владелец КАК Участник
		|	ПОМЕСТИТЬ РазвернутыеУчастники
		|	ИЗ
		|		СписокУчастниковРоли КАК СписокУчастниковРоли
		|	ГДЕ
		|		ТИПЗНАЧЕНИЯ(СписокУчастниковРоли.Владелец) = ТИП(Справочник.Сотрудники)
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		СписокУчастниковРоли.Полномочия,
		|		РабочиеГруппыСостав.Участник
		|	ИЗ
		|		СписокУчастниковРоли КАК СписокУчастниковРоли
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РабочиеГруппы.Состав КАК РабочиеГруппыСостав
		|			ПО СписокУчастниковРоли.Владелец = РабочиеГруппыСостав.Ссылка
		|	ГДЕ
		|		ТИПЗНАЧЕНИЯ(СписокУчастниковРоли.Владелец) = ТИП(Справочник.РабочиеГруппы)
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		СписокУчастниковРоли.Полномочия,
		|		Сотрудники.Ссылка
		|	ИЗ
		|		СписокУчастниковРоли КАК СписокУчастниковРоли
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Сотрудники КАК Сотрудники
		|			ПО СписокУчастниковРоли.Владелец = Сотрудники.Подразделение
		|	ГДЕ
		|		ТИПЗНАЧЕНИЯ(СписокУчастниковРоли.Владелец) = ТИП(Справочник.СтруктураПредприятия)
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		СписокУчастниковРоли.Полномочия,
		|		ИсполнителиРолей.Исполнитель
		|	ИЗ
		|		СписокУчастниковРоли КАК СписокУчастниковРоли
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсполнителиРолей КАК ИсполнителиРолей
		|			ПО СписокУчастниковРоли.Владелец = ИсполнителиРолей.РольИсполнителя
		|	ГДЕ
		|		ТИПЗНАЧЕНИЯ(СписокУчастниковРоли.Владелец) = ТИП(Справочник.ПолныеРоли)
		|	;
		|	
		|	////////////////////////////////////////////////////////////////////////////////
		|	ВЫБРАТЬ
		|		СотрудникиПользователей.Пользователь КАК Пользователь,
		|		РазвернутыеУчастники.Полномочия КАК Полномочия
		|	ПОМЕСТИТЬ Пользователи
		|	ИЗ
		|		РазвернутыеУчастники КАК РазвернутыеУчастники
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СотрудникиПользователей КАК СотрудникиПользователей
		|			ПО (РазвернутыеУчастники.Участник = СотрудникиПользователей.Сотрудник)
		|	;
		|	
		|	////////////////////////////////////////////////////////////////////////////////
		|	ВЫБРАТЬ
		|		Пользователи.Пользователь КАК Пользователь
		|	ИЗ
		|		Пользователи КАК Пользователи
		|	ГДЕ
		|		НЕ Пользователи.Пользователь ЕСТЬ NULL  
		|		И Пользователи.Пользователь = &ТекущийПользователь";
	
	Запрос.УстановитьПараметр("Роль", Справочники.ПрофилиГруппДоступа.ПолучитьСсылку(Новый УникальныйИдентификатор("3799f4c0-ed2d-11ee-9399-005056bf28da")));
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.ТекущийПользователь());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Результат = Ложь;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Результат = Истина;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;

КонецФункции 

&НаКлиенте
Процедура ОбработкаВыполненияКомандыПодписатьЗавершение(Результат, ДополнительныеПараметры) Экспорт

	//Если Результат <> Неопределено И Результат.ФайлыПодписаны Тогда
	//	ЦППК_ВыполнитьДействиеЗадачиНаКлиентеВФорме(РезультатВарианта1);
	//КонецЕсли;  
	//
	//Если Элементы.ВыполнитьДействиеЗадачиВариант2.Видимость И Элементы.ВыполнитьДействиеЗадачиВариант2.Заголовок = "Согласовано с замечаниями" Тогда
	//	Элементы.ВыполнитьДействиеЗадачиВариант2.Видимость = Не ЦППК_ЭтоЗадачаБезСогласованияСЗамечаниями(ТекущееДействиеЗадачи);
	//КонецЕсли;
	

КонецПроцедуры

// ЦППК Горбачев А.В. 26.07.2024 - САНФ-027024
//
// ++
&НаКлиенте
Процедура ЦППК_ОбработкаЗвезды(ВыбраннаяЗвезда)
	
	ТТС_ОбщийМодуль.ЦППК_ОбработкаЗвездыОценкиЗадачи(ЭтаФорма, ВыбраннаяЗвезда);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЦППК_ЗаписатьОценку(ДействиеЗадачи, Оценка)
	
	РегистрыСведений.ЦППК_ОценкиДействийЗадач.ЗаписатьОбновитьОценкуДействияЗадачи(ДействиеЗадачи, Оценка);
	
КонецПроцедуры

// --

&НаСервере
&После("ОбновитьОбластьДействия")
Процедура ЦППК_ОбновитьОбластьДействия()

	//++AxelSoft Шарапова 24.01.2025 САНФ-030728	

	Если ТекущаяЗадача.ВидЗадачи = Справочники.ВидыЗадач.Рассмотрение  
		И ТекущаяЗадача.СостояниеЗадачи <> Справочники.СостоянияЗадач.НаОбработкеРезолюции Тогда	
		
		КнопкаНаправленоАвтору = ЦППК_ПолучитьКнопкуВыполненияПоКоду("НаправленоАвтору"); 
		Если КнопкаНаправленоАвтору.Доступность Тогда
			КнопкаНаправленоАвтору.Заголовок = "Рассмотрено";	
		КонецЕсли;
		
		КнопкаРассмотрено = ЦППК_ПолучитьКнопкуВыполненияПоКоду("Рассмотрено"); 
		Если КнопкаРассмотрено.Доступность Тогда
			КнопкаРассмотрено.Видимость = Ложь;	
		КонецЕсли;
		
		КнопкаНаправленоНаИсполнение = ЦППК_ПолучитьКнопкуВыполненияПоКоду("НаправленоНаИсполнение"); 
		Если КнопкаНаправленоНаИсполнение.Доступность Тогда
			КнопкаНаправленоНаИсполнение.Видимость = ПолучитьРольДляКнопки();	
		КонецЕсли;
		
	КонецЕсли;
	
	КнопкаСогласованоСЗамечаниями = ЦППК_ПолучитьКнопкуВыполненияПоКоду("СогласованоСЗамечаниями"); 
	Если КнопкаСогласованоСЗамечаниями.Доступность 
		И КнопкаСогласованоСЗамечаниями.Видимость Тогда
		КнопкаСогласованоСЗамечаниями.Видимость = Не ЦППК_ЭтоЗадачаБезСогласованияСЗамечаниями(ТекущееДействиеЗадачи);	
	КонецЕсли;
	
	//--AxelSoft Шарапова 24.01.2025 САНФ-030728	

КонецПроцедуры

&НаСервере
Функция ЦППК_ПолучитьКнопкуВыполненияПоКоду(КодРезультатаДействийЗадач) 
	
	ЦППК_КнопкиВыполнения = Элементы.ГруппаКомандыДляВыполнения.ПодчиненныеЭлементы;
	
	ИдентификаторРезультата = Справочники.РезультатыДействийЗадач[КодРезультатаДействийЗадач].УникальныйИдентификатор();
	
	ПрефиксИмениКомандыРезультата = РаботаСЗадачамиКлиентСервер.ПрефиксИмениКомандыРезультата();
	ИмяКнопкиВыполнения = РаботаСЗадачамиКлиентСервер.ИмяКомандыВыполнения(
							ПрефиксИмениКомандыРезультата,
							ИдентификаторРезультата);				
	
	Возврат ЦППК_КнопкиВыполнения[ИмяКнопкиВыполнения];
	
КонецФункции

#КонецОбласти
