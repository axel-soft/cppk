
#Если НЕ ВебКлиент И Не МобильныйКлиент Тогда
	
Функция ЗаполнитьСтрокуСрокИсполнения(СтрокаТЧ, СрокИсполнения, Дата) Экспорт //+ЦППК САНФ-023288 31.01.2024

	Если ЗначениеЗаполнено(СрокИсполнения) И СтрокаТЧ <> Неопределено Тогда
		СтрокаТЧ.ВариантУстановкиСрокаИсполнения = ПредопределенноеЗначение("Перечисление.ВариантыУстановкиСрокаИсполнения.ТочныйСрок");
		СтрокаТЧ.СрокИсполнения = СрокИсполнения;
		СтрокаТЧ.СрокИсполненияДни = 0;//(НачалоДня(СрокИсполнения) - НачалоДня(Дата)) / (60 * 60 * 24);
		СтрокаТЧ.СрокИсполненияМинуты = 0;//Минута(СрокИсполнения);   
		СтрокаТЧ.СрокИсполненияЧасы = 0;//Час(СрокИсполнения);
	КонецЕсли;

КонецФункции

#КонецЕсли


#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
	Функция ПолучитьПроверяющегоАвтора() Экспорт //+ЦППК САНФ-023245 02.02.2024
		
		МассивСотрудников = Сотрудники.ТекущийПользовательИСотрудники();
		
		Если ЗначениеЗаполнено(МассивСотрудников) Тогда
			
			Сотрудник = МассивСотрудников[0];
			ОтКогоДелегировали = ДляКогоЯвляетсяПомощником(Сотрудник);
			Если ОтКогоДелегировали <> Неопределено Тогда
				Возврат ОтКогоДелегировали;
			Иначе
				Возврат Сотрудник;
			КонецЕсли;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	КонецФункции
	
	Функция ДляКогоЯвляетсяПомощником(Сотрудник) //+ЦППК САНФ-023245 02.02.2024
		
		//Запрос = Новый Запрос;
		//Запрос.Текст = 
		//"ВЫБРАТЬ
		//|	ЗамещающиеИПомощники.Сотрудник КАК Сотрудник,
		//|	ЗамещающиеИПомощники.ДатаНачала КАК ДатаНачала,
		//|	ЗамещающиеИПомощники.ДатаОкончания КАК ДатаОкончания
		//|ИЗ
		//|	Справочник.ЗамещающиеИПомощники КАК ЗамещающиеИПомощники
		//|ГДЕ
		//|	ЗамещающиеИПомощники.Замещающий = &Замещающий
		//|	И ЗамещающиеИПомощники.ВидЗамещения = ЗНАЧЕНИЕ(Перечисление.ВидыЗамещения.Помощники)
		//|	И (ЗамещающиеИПомощники.ДатаОкончания > &ДатаДок
		//|			ИЛИ ЗамещающиеИПомощники.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
		//|	И ЗамещающиеИПомощники.ДатаНачала <= &ДатаДок";
		//
		//Запрос.УстановитьПараметр("ДатаДок", ТекущаяДата());
		//Запрос.УстановитьПараметр("Замещающий", Сотрудник);
		//
		//РезультатЗапроса = Запрос.Выполнить();
		//
		//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		//
		//Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		//	Возврат ВыборкаДетальныеЗаписи.Сотрудник;
		//КонецЦикла;
		//
		//Возврат Неопределено;
		
		Возврат Сотрудник;
		
	КонецФункции	
	
	Функция ПолучитьДокументПредприятияПоБизнесПроцессу(ТипБизнесПроцесса, БизнесПроцесс) Экспорт //+ЦППК САНФ-023289, 02.02.2023
		
		ТекстЗапроса = "ВЫБРАТЬ
		|	&ТипБизнесПроцессаПредметы.Предмет КАК Предмет
		|ИЗ
		|	БизнесПроцесс.&ТипБизнесПроцесса.Предметы КАК &ТипБизнесПроцессаПредметы
		|ГДЕ
		|	&ТипБизнесПроцессаПредметы.Ссылка = &Ссылка";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТипБизнесПроцесса", ТипБизнесПроцесса);
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		
		Запрос.УстановитьПараметр("Ссылка", БизнесПроцесс);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Возврат ВыборкаДетальныеЗаписи.Предмет;
		КонецЦикла;
		
		Возврат Неопределено;
		
	КонецФункции
	
	Функция ПолучитьДокументПредприятияПоЗадаче(Задача) Экспорт 
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ЗадачаПриложения.Приложение КАК Предмет
		|ИЗ
		|	Документ.Задача.Приложения КАК ЗадачаПриложения
		|ГДЕ
		|	ЗадачаПриложения.Ссылка = &Ссылка
		| 	И ТипЗначения(ЗадачаПриложения.Приложение) = Тип(Справочник.ДокументыПредприятия)";
		Запрос.УстановитьПараметр("Ссылка", Задача);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Возврат ВыборкаДетальныеЗаписи.Предмет;
		КонецЦикла;
		
		Возврат Неопределено;
		
	КонецФункции
	
	Функция ПолучитьДокументПредприятияПоДействиюЗадачи(Задача) Экспорт 
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ЗадачаПриложения.Приложение КАК Предмет
		|ИЗ
		|	Документ.ДействиеЗадачи КАК ДействиеЗадачи
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Задача.Приложения КАК ЗадачаПриложения
		|		ПО (ДействиеЗадачи.Задача = ЗадачаПриложения.Ссылка)
		|ГДЕ
		|	ДействиеЗадачи.Ссылка = &Ссылка
		|	И ТИПЗНАЧЕНИЯ(ЗадачаПриложения.Приложение) = ТИП(Справочник.ДокументыПредприятия)";
		Запрос.УстановитьПараметр("Ссылка", Задача);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Возврат ВыборкаДетальныеЗаписи.Предмет;
		КонецЦикла;
		
		Возврат Неопределено;
		
	КонецФункции
	
Функция ПреобразоватьРимскийЧислоВЧисло(Разряд) Экспорт
    // Котляров 09.07.2025 изменено САНФ-035027

	ИндексСоответствие = Новый Соответствие;
	ИндексСоответствие.Вставить("I", 		1);
	ИндексСоответствие.Вставить("II", 		2);
	ИндексСоответствие.Вставить("III", 		3);
	ИндексСоответствие.Вставить("IV", 		4);
	ИндексСоответствие.Вставить("V", 		5);
	ИндексСоответствие.Вставить("VI", 		6);
	ИндексСоответствие.Вставить("VII", 		7);
	ИндексСоответствие.Вставить("VIII", 	8);
	ИндексСоответствие.Вставить("IX", 		9);
	ИндексСоответствие.Вставить("X", 		10);
	ИндексСоответствие.Вставить("XI", 		11);
	ИндексСоответствие.Вставить("XII", 		12);
	ИндексСоответствие.Вставить("XIII", 	13);
	ИндексСоответствие.Вставить("XIV", 		14);
	ИндексСоответствие.Вставить("XV", 		15);
	ИндексСоответствие.Вставить("XVI", 		16);
	ИндексСоответствие.Вставить("XVII", 	17);
	ИндексСоответствие.Вставить("XVIII", 	18);
	ИндексСоответствие.Вставить("XIX", 		19);
	ИндексСоответствие.Вставить("XX", 		20);
	ИндексСоответствие.Вставить("XXI", 		21);
	ИндексСоответствие.Вставить("XXII", 	22);
	ИндексСоответствие.Вставить("XXIII", 	23);
	ИндексСоответствие.Вставить("XXIV", 	24);
	ИндексСоответствие.Вставить("XXV", 		25);
	ИндексСоответствие.Вставить("XXVI", 	26);
	ИндексСоответствие.Вставить("XXVII", 	27);
	ИндексСоответствие.Вставить("XXVIII", 	28);
	ИндексСоответствие.Вставить("XXIX",		29);
	ИндексСоответствие.Вставить("XXX", 		30);
	
	Результат = ИндексСоответствие[Разряд];
	Если ЗначениеЗаполнено(Результат) Тогда
		Возврат Результат;
	Иначе
		Возврат Число(Разряд); 
	КонецЕсли;  
	
КонецФункции

// Вычисляет разряд порядка на основе индекса документа
//
// Параметры:
//  Индекс - Строка - индекс документа (может содержать цифры, римские цифры, разделители)
// 
// Возвращаемое значение:
//  Число - вычисленный разряд порядка для сортировки
Функция РассчитатьРазрядПорядка(Индекс) Экспорт
	МаксимальныИндексМассива = 3;
	
    // Нормализация индекса - удаление незначащих символов
    Индекс = СтрЗаменить(Индекс, "-", "");
    
    // Разбиваем индекс на части по разделителям
    МассивЧастей = СтрРазделить(Индекс, ".,");
    
    // Инициализируем массив для хранения 4 частей индекса
    ЧастиИндекса = Новый Массив(МаксимальныИндексМассива + 1);
    Для НомерЧасти = 0 По МаксимальныИндексМассива Цикл
        ЧастиИндекса[НомерЧасти] = 0;
    КонецЦикла;
    
    // Заполняем массив частями индекса
    Для НомерЧасти = 0 По МассивЧастей.Количество() - 1 Цикл
        Если НомерЧасти > МаксимальныИндексМассива Тогда
            Прервать;
        КонецЕсли;
        
        ЧастиИндекса[НомерЧасти] = ?(МассивЧастей[НомерЧасти] = "", 
                                    0, 
                                    МассивЧастей[НомерЧасти]);
    КонецЦикла;
    
    // Преобразуем римские цифры в арабские
    Для НомерЧасти = 0 По 3 Цикл
        ЧастиИндекса[НомерЧасти] = ЦППК_ОбщийМодульКлиентСервер.ПреобразоватьРимскийЧислоВЧисло(
            ЧастиИндекса[НомерЧасти]);
    КонецЦикла;
    
    // Вычисляем итоговый разряд порядка
    РазрядПорядка = ЧастиИндекса[0] * Pow(10, 6) 
                  + ЧастиИндекса[1] * Pow(10, 4) 
                  + ЧастиИндекса[2] * Pow(10, 2) 
                  + ЧастиИндекса[3] * Pow(10, 0);
    
    Возврат РазрядПорядка;
КонецФункции

#КонецЕсли

