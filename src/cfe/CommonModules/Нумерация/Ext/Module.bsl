
&ИзменениеИКонтроль("СформироватьПримерНомера")
Функция ЦППК_СформироватьПримерНомера(ФорматНомера, Пример, ОписаниеОшибки)

	ТекущаяДата = ТекущаяДатаСеанса();

	День  = День(ТекущаяДата);
	Месяц = Месяц(ТекущаяДата);
	Год4  = Год(ТекущаяДата);
	Год2  = Прав(Строка(Год4), 2);

	Если 	  Месяц <= 3 Тогда Квартал = 1;
	ИначеЕсли Месяц <= 6 Тогда Квартал = 2;
	ИначеЕсли Месяц <= 9 Тогда Квартал = 3;
	Иначе Квартал = 4; КонецЕсли;

	ЗначенияПараметровНомера = Новый Структура;
	ЗначенияПараметровНомера.Вставить("Номер", 		12345);
	ЗначенияПараметровНомера.Вставить("День", 		Формат(День,"ЧЦ=2; ЧВН="));
	ЗначенияПараметровНомера.Вставить("Месяц", 		Формат(Месяц,"ЧЦ=2; ЧВН="));
	ЗначенияПараметровНомера.Вставить("Год4", 		Год4);
	ЗначенияПараметровНомера.Вставить("Год2", 		Год2);
	ЗначенияПараметровНомера.Вставить("Квартал",	Квартал);

	ЗначенияПараметровНомера.Вставить("ИндексОрганизации", 			НСтр("ru = 'ОРГ'")); 
	ЗначенияПараметровНомера.Вставить("ИндексВидаДокумента", 		НСтр("ru = 'АКТ'")); 
	ЗначенияПараметровНомера.Вставить("ИндексПодразделения", 		НСтр("ru = 'БУХ'")); 
	ЗначенияПараметровНомера.Вставить("ИндексКонтрагента", 			НСтр("ru = 'АДМ ОБЛ'")); 
	ЗначенияПараметровНомера.Вставить("ИндексВопросаДеятельности", 	НСтр("ru = 'СОЦ'"));
	ЗначенияПараметровНомера.Вставить("ИндексНоменклатурыДел", 		"01-02");
	ЗначенияПараметровНомера.Вставить("НомерСвязанногоДокумента", 	НСтр("ru = 'СВЯЗ-123'")); 
	ЗначенияПараметровНомера.Вставить("ИндексОтветственного",		НСтр("ru = 'ОТВ'"));
	ЗначенияПараметровНомера.Вставить("ИндексПроекта", 				НСтр("ru = 'ПР'"));
	ЗначенияПараметровНомера.Вставить("ИндексГрифаДоступа",			НСтр("ru = 'ГД'"));

	ЗначенияПараметровНомера.Вставить("ИндексТематики", 			НСтр("ru = 'ТЕМА'"));
	ЗначенияПараметровНомера.Вставить("КодУзлаОбмена", 			НСтр("ru = 'ЦУ'"));
#Вставка
	// { *Грошев (ТТС) [29.06.2020]
	ЗначенияПараметровНомера.Вставить("ИндексНаправления",		НСтр("ru = 'НАПР'"));
	// }
#КонецВставки

	ОписаниеОшибки = "";
	СтруктураФорматаНомера = ""; 

	Если Не РазобратьФорматНомера(ФорматНомера, ОписаниеОшибки, СтруктураФорматаНомера) Тогда
		Пример = "";
		Возврат Ложь;
	КонецЕсли;

	Пример = СформироватьНомерДокументаПоФормату(СтруктураФорматаНомера, ЗначенияПараметровНомера);
	Возврат Истина;

КонецФункции

&ИзменениеИКонтроль("ОсвободитьНомер")
Процедура ЦППК_ОсвободитьНомер(СтруктураПараметров)

	ЧисловойНомер = СтруктураПараметров.ЧисловойНомер;
	Если ЧисловойНомер = 0 Или ЧисловойНомер = -1 Тогда 
		Возврат;
	КонецЕсли;

	Нумератор = ПолучитьНумераторДокумента(СтруктураПараметров);
	Если Не ЗначениеЗаполнено(Нумератор) Тогда
		Возврат;
	КонецЕсли;

	РеквизитыНумератора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Нумератор,
	"Периодичность, ТипСвязи, НезависимаяНумерацияПоОрганизациям,
	|НезависимаяНумерацияПоСвязанномуДокументу,
	|НезависимаяНумерацияПоПодразделению,
	|НезависимаяНумерацияПоПроекту,
	|НезависимаяНумерацияПоВопросуДеятельности,
	|НезависимаяНумерацияПоВидуДокумента,
	|НезависимаяНумерацияПоТематике,
	|НезависимаяНумерацияПоГрифуДоступа,
	|НезависимаяНумерацияПоУзлуКОД");

	ПериодНумерации = НачалоПериодаНумерации(РеквизитыНумератора.Периодичность, СтруктураПараметров.ДатаРегистрации);

	Если РеквизитыНумератора.НезависимаяНумерацияПоОрганизациям
		И ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") Тогда 
		Организация = СтруктураПараметров.Организация;
	Иначе
		Организация = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;

	СвязанныйДокумент = Справочники.ДокументыПредприятия.ПустаяСсылка();
	Если РеквизитыНумератора.НезависимаяНумерацияПоСвязанномуДокументу Тогда 
		Если ЗначениеЗаполнено(СтруктураПараметров.Ссылка) Тогда 
			СвязанныйДокумент = СвязиОбъектов.ПолучитьСвязанныйОбъект(СтруктураПараметров.Ссылка, РеквизитыНумератора.ТипСвязи);
		Иначе
			ИмяТипаСвязи = Справочники.ТипыСвязей.ПолучитьИмяПредопределенного(РеквизитыНумератора.ТипСвязи);
			Если ЗначениеЗаполнено(ИмяТипаСвязи) И СтруктураПараметров.Свойство(ИмяТипаСвязи) Тогда 
				СвязанныйДокумент = СтруктураПараметров[ИмяТипаСвязи];
			КонецЕсли;	
		КонецЕсли;	

		Если Не ЗначениеЗаполнено(СвязанныйДокумент) И СтруктураПараметров.Свойство("СвязанныйДокумент") Тогда
			СвязанныйДокумент = СтруктураПараметров.СвязанныйДокумент;
		КонецЕсли;

		Если Не ЗначениеЗаполнено(СвязанныйДокумент) Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для документа ведется независимая нумерация по связанному документу. 
			|Не указан связанный документ с типом связи ""%1""'"),
			РеквизитыНумератора.ТипСвязи);

			Если ОбработкаЗапросовXDTO.ЭтоВебСервис() Тогда
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;

			ВызватьИсключение ТекстСообщения; 
		КонецЕсли;	
	КонецЕсли;

	Если РеквизитыНумератора.НезависимаяНумерацияПоПодразделению Тогда 
		Подразделение = СтруктураПараметров.Подразделение;
	Иначе
		Подразделение = Справочники.СтруктураПредприятия.ПустаяСсылка();
	КонецЕсли;

	Если РеквизитыНумератора.НезависимаяНумерацияПоВидуДокумента Тогда 
		ВидДокументаНумератора = СтруктураПараметров.ВидДокумента;
	Иначе
		ВидДокументаНумератора = Справочники.ВидыДокументов.ПустаяСсылка();
	КонецЕсли;

	Если РеквизитыНумератора.НезависимаяНумерацияПоПроекту
		И ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда 
		Проект = СтруктураПараметров.Проект;
	Иначе
		Проект = Справочники.Проекты.ПустаяСсылка();
	КонецЕсли;

	Если РеквизитыНумератора.НезависимаяНумерацияПоГрифуДоступа
		И ПолучитьФункциональнуюОпцию("ИспользоватьГрифыДоступа") Тогда 
		ГрифДоступа = СтруктураПараметров.ГрифДоступа;
	Иначе
		ГрифДоступа = Справочники.ГрифыДоступа.ПустаяСсылка();
	КонецЕсли;

	Если РеквизитыНумератора.НезависимаяНумерацияПоВопросуДеятельности
		И ПолучитьФункциональнуюОпцию("ИспользоватьВопросыДеятельности") Тогда 
		ВопросДеятельности = СтруктураПараметров.ВопросДеятельности;
	Иначе
		ВопросДеятельности = Справочники.ВопросыДеятельности.ПустаяСсылка();
	КонецЕсли;

	Если РеквизитыНумератора.НезависимаяНумерацияПоТематике Тогда
		Тематика = СтруктураПараметров.Тематика;
	Иначе
		Тематика = Справочники.ТематикиДокументов.ПустаяСсылка();
	КонецЕсли;

	Если РеквизитыНумератора.НезависимаяНумерацияПоУзлуКОД
		И ПолучитьФункциональнуюОпцию("ИспользоватьКОД") Тогда 
		УзелКОД = Справочники.УзлыКОД.ЭтотУзел;
	Иначе
		УзелКОД = Справочники.УзлыКОД.ПустаяСсылка();
	КонецЕсли;
#Вставка
	// { *Грошев (ТТС) [29.06.2020]
	Если Нумератор.ТТС_НезависимаяНумерацияПоНаправлению Тогда 
		ТТС_Направление = СтруктураПараметров.ТТС_Направление;
	Иначе
		ТТС_Направление = Справочники.ТТС_Направления.ПустаяСсылка();
	КонецЕсли;
	// }
#КонецВставки

	СтруктураИзмерений = Новый Структура;
	СтруктураИзмерений.Вставить("Нумератор", 		  Нумератор);
	СтруктураИзмерений.Вставить("ПериодНумерации", 	  ПериодНумерации);
	СтруктураИзмерений.Вставить("Организация", 		  Организация);
	СтруктураИзмерений.Вставить("СвязанныйДокумент",  СвязанныйДокумент);
	СтруктураИзмерений.Вставить("Подразделение", 	  Подразделение);
	СтруктураИзмерений.Вставить("ВидДокумента", 	  ВидДокументаНумератора);
	СтруктураИзмерений.Вставить("Проект", 			  Проект);
	СтруктураИзмерений.Вставить("ВопросДеятельности", ВопросДеятельности);
	СтруктураИзмерений.Вставить("Тематика", 		  Тематика);
	СтруктураИзмерений.Вставить("ГрифДоступа", 		  ГрифДоступа);
	СтруктураИзмерений.Вставить("УзелКОД",	 		  УзелКОД);
#Вставка
	// { *Грошев (ТТС) [29.06.2020]
	СтруктураИзмерений.Вставить("ТТС_Направление", 	  ТТС_Направление);
	// }
#КонецВставки

	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.Нумерация");
		ЭлементБлокировки.УстановитьЗначение("Нумератор", 		  	Нумератор);
		ЭлементБлокировки.УстановитьЗначение("ПериодНумерации",   	ПериодНумерации);
		ЭлементБлокировки.УстановитьЗначение("Организация", 	  	Организация);
		ЭлементБлокировки.УстановитьЗначение("СвязанныйДокумент", 	СвязанныйДокумент);
		ЭлементБлокировки.УстановитьЗначение("Подразделение", 	  	Подразделение);
		ЭлементБлокировки.УстановитьЗначение("ВидДокумента", 	  	ВидДокументаНумератора);
		ЭлементБлокировки.УстановитьЗначение("Проект", 			  	Проект);
		ЭлементБлокировки.УстановитьЗначение("ВопросДеятельности",	ВопросДеятельности);
		ЭлементБлокировки.УстановитьЗначение("Тематика",			Тематика);
		ЭлементБлокировки.УстановитьЗначение("ГрифДоступа",			ГрифДоступа);
		ЭлементБлокировки.УстановитьЗначение("УзелКОД",				УзелКОД);
#Вставка
		// { *Грошев (ТТС) [29.06.2020]
		ЭлементБлокировки.УстановитьЗначение("ТТС_Направление", 	  ТТС_Направление);
		// }
#КонецВставки
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();

		ТекущийНомер = РегистрыСведений.Нумерация.Получить(СтруктураИзмерений).ТекущийНомер;

		Если ТекущийНомер = ЧисловойНомер Тогда // уменьшить номер в регистре
			МенеджерЗаписи = РегистрыСведений.Нумерация.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтруктураИзмерений);
			МенеджерЗаписи.ТекущийНомер = ТекущийНомер - 1;
#Вставка
			// { *Грошев (ТТС) [29.06.2020]
			МенеджерЗаписи.ТТС_Направление = ТТС_Направление;
			// }
#КонецВставки
			МенеджерЗаписи.Записать();
		ИначеЕсли ТекущийНомер > ЧисловойНомер Тогда
			Если ИспользуютсяПропущенныеНомера(Нумератор) Тогда
				РегистрыСведений.ПропускиРегистрационныхНомеров.ЗафиксироватьПропущенныйНомер(ЧисловойНомер,
				СтруктураИзмерений);
			КонецЕсли;
		КонецЕсли;

		ЗафиксироватьТранзакцию();	
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

&ИзменениеИКонтроль("ПолучитьЗначенияПараметровНомера")
Функция ЦППК_ПолучитьЗначенияПараметровНомера(Объект, СтруктураФорматаНомера, ОписанияОшибок)

	ПараметрыНомера = Новый Структура;

	Если ТипЗнч(Объект) = Тип("Структура")
		И Объект.Свойство("Назначение") Тогда
		Назначение = Объект.Назначение;
	Иначе
		Назначение = Перечисления.НазначенияНумераторов.РегистрационныйНомер;
	КонецЕсли;

	Если Назначение = Перечисления.НазначенияНумераторов.РегистрационныйНомер Тогда
		ПредставлениеОшибкиДаты = НСтр("ru = 'Не заполнено поле ""Дата регистрации""'");
		ИмяПоляДаты = "ДатаРегистрации";
	Иначе
		ПредставлениеОшибкиДаты = НСтр("ru = 'Не заполнено поле ""Дата создания""'");
		ИмяПоляДаты = "ДатаСоздания";
	КонецЕсли;
	ДатаДляНумерации = Объект[ИмяПоляДаты];

	Для Каждого ЭлементФормата Из СтруктураФорматаНомера Цикл
		Если ЭлементФормата.Ключ <> "СлужебноеПоле" Тогда
			Продолжить;
		КонецЕсли;	

		СлужебноеПоле = ЭлементФормата.Значение;
		ЗначениеПоля = "";

		Если СлужебноеПоле = "Номер" Тогда
			ЗначениеПоля = Объект.ЧисловойНомер;

		ИначеЕсли СлужебноеПоле = "День" Тогда
			Если Не ЗначениеЗаполнено(ДатаДляНумерации) Тогда 
				ОписанияОшибок.Добавить("ДатаРегистрации", ПредставлениеОшибкиДаты);
			Иначе
				ЗначениеПоля = Формат(День(ДатаДляНумерации), "ЧЦ=2; ЧВН=");
			КонецЕсли;	

		ИначеЕсли СлужебноеПоле = "Месяц" Тогда
			Если Не ЗначениеЗаполнено(ДатаДляНумерации) Тогда 
				ОписанияОшибок.Добавить("ДатаРегистрации", ПредставлениеОшибкиДаты);
			Иначе
				ЗначениеПоля = Формат(Месяц(ДатаДляНумерации), "ЧЦ=2; ЧВН=");
			КонецЕсли;

		ИначеЕсли СлужебноеПоле = "Квартал" Тогда
			Если Не ЗначениеЗаполнено(ДатаДляНумерации) Тогда 
				ОписанияОшибок.Добавить("ДатаРегистрации", ПредставлениеОшибкиДаты);
			Иначе
				Месяц = Месяц(ДатаДляНумерации);
				Если 	  Месяц <= 3 Тогда ЗначениеПоля = 1;
				ИначеЕсли Месяц <= 6 Тогда ЗначениеПоля = 2;
				ИначеЕсли Месяц <= 9 Тогда ЗначениеПоля = 3;
				Иначе ЗначениеПоля = 4; КонецЕсли;
			КонецЕсли;	

		ИначеЕсли СлужебноеПоле = "Год4" Тогда
			Если Не ЗначениеЗаполнено(ДатаДляНумерации) Тогда 
				ОписанияОшибок.Добавить("ДатаРегистрации", ПредставлениеОшибкиДаты);
			Иначе
				ЗначениеПоля = Год(ДатаДляНумерации);
			КонецЕсли;

		ИначеЕсли СлужебноеПоле = "Год2" Тогда
			Если Не ЗначениеЗаполнено(ДатаДляНумерации) Тогда 
				ОписанияОшибок.Добавить("ДатаРегистрации", ПредставлениеОшибкиДаты);
			Иначе
				ЗначениеПоля = Прав(Строка(Год(ДатаДляНумерации)), 2);
			КонецЕсли;	

		ИначеЕсли СлужебноеПоле = "ИндексВидаДокумента" Тогда 
			Если ЗначениеЗаполнено(Объект.ВидДокумента) Тогда
				ЗначениеПоля = ПолучитьИндексОбъекта(Объект.ВидДокумента);
			КонецЕсли;

		ИначеЕсли СлужебноеПоле = "ИндексОтветственного" Тогда 
			Если ЗначениеЗаполнено(Объект.Ответственный) Тогда

				ЗначениеПоля = ПолучитьИндексОбъекта(Объект.Ответственный);

				Если Не ЗначениеЗаполнено(ЗначениеПоля) Тогда
					ЗначениеПоля = ПолучитьИндексОбъекта(
					Сотрудники.ЛюбойПользовательСотрудника(Объект.Ответственный));
				КонецЕсли;

			КонецЕсли;

		ИначеЕсли СлужебноеПоле = "ИндексВопросаДеятельности" Тогда 
			Если ЗначениеЗаполнено(Объект.ВопросДеятельности) Тогда
				ЗначениеПоля = ПолучитьИндексОбъекта(Объект.ВопросДеятельности);
			КонецЕсли;	

		ИначеЕсли СлужебноеПоле = "ИндексПодразделения" Тогда 
			Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
				ЗначениеПоля = ПолучитьИндексОбъекта(Объект.Подразделение);
			КонецЕсли;	

		ИначеЕсли СлужебноеПоле = "ИндексОрганизации" Тогда 
			Если ЗначениеЗаполнено(Объект.Организация) Тогда
				ЗначениеПоля = ПолучитьИндексОбъекта(Объект.Организация);
			КонецЕсли;	

		ИначеЕсли СлужебноеПоле = "ИндексНоменклатурыДел" Тогда 
			Если ЗначениеЗаполнено(Объект.НоменклатураДел) Тогда
				ЗначениеПоля = СокрЛП(Объект.НоменклатураДел.Индекс);
			КонецЕсли;	

		ИначеЕсли СлужебноеПоле = "ИндексКонтрагента" Тогда 
			Если ЗначениеЗаполнено(Объект.Контрагент) Тогда 
				ЗначениеПоля = ПолучитьИндексОбъекта(Объект.Контрагент);
			КонецЕсли;

		ИначеЕсли СлужебноеПоле = "ИндексПроекта" Тогда 
			Если ЗначениеЗаполнено(Объект.Проект) Тогда
				ЗначениеПоля = ПолучитьИндексОбъекта(Объект.Проект);
			КонецЕсли;

		ИначеЕсли СлужебноеПоле = "ИндексГрифаДоступа" Тогда 
			Если ЗначениеЗаполнено(Объект.ГрифДоступа) Тогда
				ЗначениеПоля = ПолучитьИндексОбъекта(Объект.ГрифДоступа);
			КонецЕсли;

		ИначеЕсли СлужебноеПоле = "НомерСвязанногоДокумента" Тогда 

			Нумератор = ПолучитьНумераторДокумента(Объект);
			Если ЗначениеЗаполнено(Нумератор) Тогда 
				СвязанныйДокумент = Справочники.ДокументыПредприятия.ПустаяСсылка();
				Если ЗначениеЗаполнено(Объект.Ссылка) Тогда 
					СвязанныйДокумент = СвязиОбъектов.ПолучитьСвязанныйОбъект(Объект.Ссылка, Нумератор.ТипСвязи);
				Иначе
					ИмяТипаСвязи = Справочники.ТипыСвязей.ПолучитьИмяПредопределенного(Нумератор.ТипСвязи);
					Если ЗначениеЗаполнено(ИмяТипаСвязи) И Объект.Свойство(ИмяТипаСвязи) Тогда 
						СвязанныйДокумент = Объект[ИмяТипаСвязи];
					КонецЕсли;
				КонецЕсли;

				Если Не ЗначениеЗаполнено(СвязанныйДокумент) И Объект.Свойство("СвязанныйДокумент") Тогда
					СвязанныйДокумент = Объект.СвязанныйДокумент;
				КонецЕсли;	

				Если ЗначениеЗаполнено(СвязанныйДокумент) Тогда 
					ЗначениеПоля = СокрЛП(СвязанныйДокумент.РегистрационныйНомер);
				КонецЕсли;
			КонецЕсли;	

		ИначеЕсли СлужебноеПоле = "ИндексТематики" Тогда
			Если ЗначениеЗаполнено(Объект.Тематика) Тогда 
				ЗначениеПоля = ПолучитьИндексОбъекта(Объект.Тематика);
			КонецЕсли;

		ИначеЕсли СлужебноеПоле = "КодУзлаОбмена" Тогда
			ЗначениеПоля = КОДПовтИсп.КодТекущегоУзла();
#Вставка
			// { *Грошев (ТТС) [29.06.2020]
		ИначеЕсли СлужебноеПоле = "ИндексНаправления" Тогда 		
			Если ЗначениеЗаполнено(Объект.ТТС_Направление) Тогда
				ЗначениеПоля = ПолучитьИндексОбъекта(Объект.ТТС_Направление);
			КонецЕсли;	
			// }
#КонецВставки

		КонецЕсли;

		ПараметрыНомера.Вставить(СлужебноеПоле, ЗначениеПоля);

	КонецЦикла;	

	Возврат ПараметрыНомера;

КонецФункции

&ИзменениеИКонтроль("ПолучитьСписокСлужебныхПолей")
Функция ЦППК_ПолучитьСписокСлужебныхПолей()

	СписокПолей = Новый СписокЗначений; // значение - служебное поле в строке формата
	// представление - представление служебного поля

	СписокПолей.Добавить(НСтр("ru = 'День'"), 	"День");  	// день месяца
	СписокПолей.Добавить(НСтр("ru = 'Месяц'"),	"Месяц"); 	// номер месяца
	СписокПолей.Добавить(НСтр("ru = 'Квартал'"),"Квартал"); // номер квартала
	СписокПолей.Добавить(НСтр("ru = 'Год4'"), 	"Год4");  	// год 4 знака
	СписокПолей.Добавить(НСтр("ru = 'Год2'"), 	"Год2");  	// год 2 знака

	СписокПолей.Добавить(НСтр("ru = 'ИндексОрг'"),		"ИндексОрганизации"); 
	СписокПолей.Добавить(НСтр("ru = 'ИндексВидаДок'"),	"ИндексВидаДокумента"); 
	СписокПолей.Добавить(НСтр("ru = 'ИндексПодр'"), 	"ИндексПодразделения"); 
	СписокПолей.Добавить(НСтр("ru = 'ИндексКонтр'"), 	"ИндексКонтрагента");  
	СписокПолей.Добавить(НСтр("ru = 'ИндексВопрДеят'"),	"ИндексВопросаДеятельности");
	СписокПолей.Добавить(НСтр("ru = 'ИндексНомДел'"),	"ИндексНоменклатурыДел");
	СписокПолей.Добавить(НСтр("ru = 'НомерСвязДок'"),	"НомерСвязанногоДокумента");
	СписокПолей.Добавить(НСтр("ru = 'ИндексОтв'"),		"ИндексОтветственного");
	СписокПолей.Добавить(НСтр("ru = 'ИндексПроекта'"),	"ИндексПроекта");
	СписокПолей.Добавить(НСтр("ru = 'ИндексГрифаДоступа'"),	"ИндексГрифаДоступа");

	СписокПолей.Добавить(НСтр("ru = 'Номер'"),   	"Номер"); 	// числовой номер
#Вставка
	// { *Грошев (ТТС) [29.06.2020]
	СписокПолей.Добавить(НСтр("ru = 'ИндексНапр'"),		"ИндексНаправления");
	// }
#КонецВставки
	СписокПолей.Добавить(НСтр("ru = 'ИндексТематики'"),	"ИндексТематики");
	СписокПолей.Добавить(НСтр("ru = 'КодУзлаОбмена'"),	"КодУзлаОбмена");

	Возврат СписокПолей;

КонецФункции

&ИзменениеИКонтроль("СформироватьЧисловойНомерДокумента")
Процедура ЦППК_СформироватьЧисловойНомерДокумента(СтруктураПараметров, СформированныйНомер)

	// ручная нумерация
	Нумератор = ПолучитьНумераторДокумента(СтруктураПараметров);
	Если Не ЗначениеЗаполнено(Нумератор) Тогда
		СформированныйНомер = 0;
		Возврат;
	КонецЕсли;

	РеквизитыНумератора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Нумератор,
	"Периодичность, ТипСвязи, НезависимаяНумерацияПоОрганизациям,
	|НезависимаяНумерацияПоСвязанномуДокументу,
	|НезависимаяНумерацияПоПодразделению,
	|НезависимаяНумерацияПоПроекту,
	|НезависимаяНумерацияПоВопросуДеятельности,
	|НезависимаяНумерацияПоВидуДокумента,
	|НезависимаяНумерацияПоТематике,
	|НезависимаяНумерацияПоГрифуДоступа,
	|НезависимаяНумерацияПоУзлуКОД");

	// измерения нумерации
	ПериодНумерации = НачалоПериодаНумерации(РеквизитыНумератора.Периодичность,
	?(ЗначениеЗаполнено(СтруктураПараметров.ДатаРегистрации),
	СтруктураПараметров.ДатаРегистрации,
	СтруктураПараметров.ДатаСоздания));

	Если РеквизитыНумератора.НезависимаяНумерацияПоОрганизациям И ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") Тогда 
		Организация = СтруктураПараметров.Организация;
	Иначе
		Организация = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;

	СвязанныйДокумент = Справочники.ДокументыПредприятия.ПустаяСсылка();
	Если РеквизитыНумератора.НезависимаяНумерацияПоСвязанномуДокументу Тогда 
		Если ЗначениеЗаполнено(СтруктураПараметров.Ссылка) Тогда 
			СвязанныйДокумент = СвязиОбъектов.ПолучитьСвязанныйОбъект(СтруктураПараметров.Ссылка, РеквизитыНумератора.ТипСвязи);
		Иначе
			ИмяТипаСвязи = Справочники.ТипыСвязей.ПолучитьИмяПредопределенного(РеквизитыНумератора.ТипСвязи);
			Если ЗначениеЗаполнено(ИмяТипаСвязи) И СтруктураПараметров.Свойство(ИмяТипаСвязи) Тогда 
				СвязанныйДокумент = СтруктураПараметров[ИмяТипаСвязи];
			КонецЕсли;	
		КонецЕсли;	

		Если Не ЗначениеЗаполнено(СвязанныйДокумент) И СтруктураПараметров.Свойство("СвязанныйДокумент") Тогда
			СвязанныйДокумент = СтруктураПараметров.СвязанныйДокумент;
		КонецЕсли;

		Если Не ЗначениеЗаполнено(СвязанныйДокумент) Тогда
			ТекстСообщения = СтрШаблон(
			НСтр("ru = 'Для документа ведется независимая нумерация по связанному документу. 
			|Не указан связанный документ с типом связи ""%1""'"),
			РеквизитыНумератора.ТипСвязи);

			Если ОбработкаЗапросовXDTO.ЭтоВебСервис() Тогда
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;

			ВызватьИсключение ТекстСообщения; 
		КонецЕсли;
	КонецЕсли;

	Если РеквизитыНумератора.НезависимаяНумерацияПоПодразделению Тогда 
		Подразделение = СтруктураПараметров.Подразделение;
	Иначе
		Подразделение = Справочники.СтруктураПредприятия.ПустаяСсылка();
	КонецЕсли;

	Если РеквизитыНумератора.НезависимаяНумерацияПоВидуДокумента Тогда 
		ВидДокументаНумератора = СтруктураПараметров.ВидДокумента;
	Иначе
		ВидДокументаНумератора = Справочники.ВидыДокументов.ПустаяСсылка();
	КонецЕсли;

	Если РеквизитыНумератора.НезависимаяНумерацияПоПроекту 
		И ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда 
		Проект = СтруктураПараметров.Проект;
	Иначе
		Проект = Справочники.Проекты.ПустаяСсылка();
	КонецЕсли;

	Если РеквизитыНумератора.НезависимаяНумерацияПоГрифуДоступа 
		И ПолучитьФункциональнуюОпцию("ИспользоватьГрифыДоступа") Тогда 
		ГрифДоступа = СтруктураПараметров.ГрифДоступа;
	Иначе
		ГрифДоступа = Справочники.ГрифыДоступа.ПустаяСсылка();
	КонецЕсли;

	Если РеквизитыНумератора.НезависимаяНумерацияПоВопросуДеятельности 
		И ПолучитьФункциональнуюОпцию("ИспользоватьВопросыДеятельности") Тогда 
		ВопросДеятельности = СтруктураПараметров.ВопросДеятельности;
	Иначе
		ВопросДеятельности = Справочники.ВопросыДеятельности.ПустаяСсылка();
	КонецЕсли;

	Если РеквизитыНумератора.НезависимаяНумерацияПоТематике Тогда 
		Тематика = СтруктураПараметров.Тематика;
	Иначе
		Тематика = Справочники.ТематикиДокументов.ПустаяСсылка();
	КонецЕсли;

	Если РеквизитыНумератора.НезависимаяНумерацияПоУзлуКОД
		И ПолучитьФункциональнуюОпцию("ИспользоватьКОД") Тогда 
		Если ЗначениеЗаполнено(СтруктураПараметров.Ссылка)
			И Не КОДСервер.ОбъектЭтогоУзла(СтруктураПараметров.Ссылка) Тогда
			ТекстСообщения = НСтр("ru = 'Для документа ведется независимая нумерация по узлу обмена. 
			|Документ должен быть зарегистрирован в узле, в котором был создан.'");

			Если ОбработкаЗапросовXDTO.ЭтоВебСервис() Тогда
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
			КонецЕсли;

			ВызватьИсключение ТекстСообщения; 
		КонецЕсли;

		УзелКОД = Справочники.УзлыКОД.ЭтотУзел;
	Иначе
		УзелКОД = Справочники.УзлыКОД.ПустаяСсылка();
	КонецЕсли;
#Вставка
	// { *Грошев (ТТС) [29.06.2020]
	Если Нумератор.ТТС_НезависимаяНумерацияПоНаправлению Тогда 
		ТТС_Направление = СтруктураПараметров.ТТС_Направление;
	Иначе
		ТТС_Направление = Справочники.ТТС_Направления.ПустаяСсылка();
	КонецЕсли;
	// }
#КонецВставки

	СтруктураИзмерений = Новый Структура;
	СтруктураИзмерений.Вставить("Нумератор", 		  Нумератор);
	СтруктураИзмерений.Вставить("ПериодНумерации", 	  ПериодНумерации);
	СтруктураИзмерений.Вставить("Организация", 		  Организация);
	СтруктураИзмерений.Вставить("СвязанныйДокумент",  СвязанныйДокумент);
	СтруктураИзмерений.Вставить("Подразделение", 	  Подразделение);
	СтруктураИзмерений.Вставить("ВидДокумента", 	  ВидДокументаНумератора);
#Вставка
	// { *Грошев (ТТС) [29.06.2020]
	СтруктураИзмерений.Вставить("ТТС_Направление", 	  ТТС_Направление);
	// }
#КонецВставки
	СтруктураИзмерений.Вставить("Проект", 			  Проект);
	СтруктураИзмерений.Вставить("ВопросДеятельности", ВопросДеятельности);
	СтруктураИзмерений.Вставить("Тематика",			  Тематика);
	СтруктураИзмерений.Вставить("ГрифДоступа",		  ГрифДоступа);
	СтруктураИзмерений.Вставить("УзелКОД",			  УзелКОД);

	// перерегистрация
	Если СформированныйНомер > 0 Тогда 

		СменаПериодаНумерации = ПроверитьСменуПериодаНумерации(
		СтруктураПараметров.ДатаРегистрации, 
		СтруктураПараметров.Ссылка.ДатаРегистрации, 
		Нумератор);

		Если Не СменаПериодаНумерации Тогда 	
			ТекущийНомер = РегистрыСведений.Нумерация.Получить(СтруктураИзмерений).ТекущийНомер; 
			Если ТекущийНомер = СформированныйНомер Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;	

	// автоматическая нумерация
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.Нумерация");
		ЭлементБлокировки.УстановитьЗначение("Нумератор", 		  Нумератор);
		ЭлементБлокировки.УстановитьЗначение("ПериодНумерации",   ПериодНумерации);
		ЭлементБлокировки.УстановитьЗначение("Организация", 	  Организация);
		ЭлементБлокировки.УстановитьЗначение("СвязанныйДокумент", СвязанныйДокумент);
		ЭлементБлокировки.УстановитьЗначение("Подразделение", 	  Подразделение);
		ЭлементБлокировки.УстановитьЗначение("ВидДокумента", 	  ВидДокументаНумератора);
		ЭлементБлокировки.УстановитьЗначение("Проект", 			  Проект);
		ЭлементБлокировки.УстановитьЗначение("ВопросДеятельности",ВопросДеятельности);
#Вставка
		// { *Грошев (ТТС) [29.06.2020]
		ЭлементБлокировки.УстановитьЗначение("ТТС_Направление",	ТТС_Направление);
		// }
#КонецВставки
		ЭлементБлокировки.УстановитьЗначение("Тематика",		  Тематика);
		ЭлементБлокировки.УстановитьЗначение("ГрифДоступа",		  ГрифДоступа);
		ЭлементБлокировки.УстановитьЗначение("УзелКОД",			  УзелКОД);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		Блокировка.Заблокировать();

		ТекущийНомер = РегистрыСведений.Нумерация.Получить(СтруктураИзмерений).ТекущийНомер;
		СформированныйНомер = ТекущийНомер + 1;

		МенеджерЗаписи = РегистрыСведений.Нумерация.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтруктураИзмерений);
		МенеджерЗаписи.ТекущийНомер = СформированныйНомер;
		МенеджерЗаписи.Записать();

		ЗафиксироватьТранзакцию();	
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры
