
#Область ПрограммныйИнтерфейс

&ИзменениеИКонтроль("ПечатьЛистаСогласованияИзДокумента")
Функция ЦППК_ПечатьЛистаСогласованияИзДокумента(Знач МассивОбъектов, ОбъектыПечати, История = Ложь,
		БесшовнаяИнтеграция = Ложь) Экспорт
	
	// Создаем табличный документ и устанавливаем имя параметров печати.
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПараметрыПечати_ЛистСогласования";
	
#Удаление
	Если История = Истина Тогда
		Макет = УправлениеПечатью.МакетПечатнойФормы("БизнесПроцесс.Согласование.ПФ_MXL_ЛистСогласованияСИсторией");
	Иначе
		Макет = УправлениеПечатью.МакетПечатнойФормы("БизнесПроцесс.Согласование.ПФ_MXL_ЛистСогласования");
	КонецЕсли;
#КонецУдаления
#Вставка
	// Замена макета печати листов согласования
	Если История = Истина Тогда 
		Макет = УправлениеПечатью.МакетПечатнойФормы("БизнесПроцесс.Согласование.ЦППК_ПФ_MXL_ЛистСогласованияСИсторией_ТТС_ФИО_Должность");
	Иначе 
		Макет = УправлениеПечатью.МакетПечатнойФормы("БизнесПроцесс.Согласование.ЦППК_ПФ_MXL_ЛистСогласования_ТТС_ФИО_Должность");
	КонецЕсли;
#КонецВставки
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьИсполнителиШапка = Макет.ПолучитьОбласть("ИсполнителиШапка");
	ОбластьИсполнители = Макет.ПолучитьОбласть("Исполнители");
	ОбластьИсполнителиПодпись = Макет.ПолучитьОбласть("ИсполнителиПодпись");
	Если История Тогда
		ОбластьЗаголовокИстории = Макет.ПолучитьОбласть("ЗаголовокИстории");
	КонецЕсли;
	ОбластьНеЗапускалось = Макет.ПолучитьОбласть("НеЗапускалось");
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаДляЛистаСогласования(История);
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	
	Результат = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Действие = Неопределено;
	
	ИДУчастникаИРолиСоответствие = Новый Соответствие; // ключ ИДУчастника, значение - Роль
	
	ДействияСоответствие = Новый Соответствие;
	ВсеВизыСогласования = Новый Массив;
	// Сперва найдем все Действия.
	Для Каждого СтрокаСсылка Из Результат.Строки Цикл
		Для Каждого СтрокаИсполнитель Из СтрокаСсылка.Строки Цикл
			
			Действие = СтрокаИсполнитель.Источник;
			Ветка = СогласованиеВРежимеЗамечанийСервер.НайтиВеткуОбработки(Действие);
			Если ЗначениеЗаполнено(Ветка) Тогда
				ДействияСоответствие[Действие] = Ветка;
			Иначе
				ДействияСоответствие[Действие] = 1;
			КонецЕсли;
			
			Если ВсеВизыСогласования.Найти(СтрокаИсполнитель.ВизаСогласования) = Неопределено Тогда
				ВсеВизыСогласования.Добавить(СтрокаИсполнитель.ВизаСогласования);
			КонецЕсли;
			
			ИДУчастникаИРолиСоответствие[СтрокаИсполнитель.ИдентификаторУчастника] = СтрокаИсполнитель.РольИсполнителя;
			
		КонецЦикла;
	КонецЦикла;
	ВеткиМассив = Новый Массив;
	Для Каждого КлючИЗначение Из ДействияСоответствие Цикл
		ВеткиМассив.Добавить(КлючИЗначение.Значение);
	КонецЦикла;
	Замечания = ЗамечанияПоВеткам(ВеткиМассив);
	
	НомерИтерации = РегистрыСведений.ИтерацииДействий.НомерИтерации(Действие);
	Разногласия = ВсеРазногласия(Действие, НомерИтерации);
	ВерсииСогласованныхФайлов = РегистрыСведений.ВерсииСогласованныхФайлов.ВсеВерсииПоСпискуВиз(ВсеВизыСогласования);
	
	ОбластьРазногласияШапка = Макет.ПолучитьОбласть("РазногласияШапка");
	ОбластьРазногласия = Макет.ПолучитьОбласть("Разногласия");
	
	ОбластьЗаголовокРазногласия = Макет.ПолучитьОбласть("ЗаголовокРазногласия");
	
	ПервыйДокумент = Истина;
	Для Каждого СтрокаСсылка Из Результат.Строки Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		// Запомним номер строки с которой начали выводить текущий документ.
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		Предмет = СтрокаСсылка.Ссылка;
		
		Если ЗначениеЗаполнено(Предмет) Тогда
			МассивОбъектов.Удалить(МассивОбъектов.Найти(Предмет));
			
#Удаление
			ОбластьШапка.Параметры.Предмет = СтрШаблон("%1 ""%2""", Предмет.Метаданные().ПредставлениеОбъекта, Предмет);
					
			РеквизитыПредмета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Предмет,
				"Подготовил, Ответственный,ДатаСоздания,ДатаРегистрации");
			ДатаУчета = Делопроизводство.ДатаУчетаДокумента(РеквизитыПредмета);
			Если История Тогда
				Если ЗначениеЗаполнено(РеквизитыПредмета.Ответственный) Тогда 
					ОбластьШапка.Параметры.Ответственный =
						СтрШаблон(НСтр("ru = 'Ответственный: %1'"), 
						Сотрудники.ПредставлениеСотрудникаНаДату(РеквизитыПредмета.Ответственный, ДатаУчета));
				Иначе
					ОбластьШапка.Параметры.Ответственный =
						СтрШаблон(НСтр("ru = 'Ответственный: %1'"),
						Сотрудники.ПредставлениеСотрудникаНаДату(РеквизитыПредмета.Подготовил, ДатаУчета));
				КонецЕсли;
			КонецЕсли;
#КонецУдаления
#Вставка
		// Котляров 2025.07.25 САНФ-035395		QR-8248900-1
		// Замена параметров шапки макета печати листов согласования
		ОбластьШапка.Параметры.РегистрационныйНомер = Предмет.РегистрационныйНомер;
		ОбластьШапка.Параметры.ДатаРегистрации =  Предмет.ДатаРегистрации; 
		ОбластьШапка.Параметры.Содержание = "«" + Предмет.Заголовок + "»";
		ОбластьШапка.Параметры.НаименованиеВидаДокумента = Предмет.ВидДокумента;
#КонецВставки
			
			ТабличныйДокумент.Вывести(ОбластьШапка);
		КонецЕсли;
		
		Если История Тогда
			ТаблицаСроков = СтрокаСсылка.Строки;
			
			ДатаПомещенияВИсторию = Дата(1,1,1);
			ПериодИРезультат = ОпределитьПериодИРезультатЦиклаВизы(ТаблицаСроков, ДатаПомещенияВИсторию);
			ОбластьИсполнителиШапка.Параметры.Период = ПериодИРезультат.Период;
			ОбластьИсполнителиШапка.Параметры.РезультатСогласования = ПериодИРезультат.РезультатСогласования;
			
			ТабличныйДокумент.Вывести(ОбластьИсполнителиШапка);
			
			Для Каждого СтрокаИсполнитель Из СтрокаСсылка.Строки Цикл
				
				Если Не ДатыДоМинутСовпадают(ДатаПомещенияВИсторию, СтрокаИсполнитель.ДатаПомещенияВИсторию) Тогда
					Если Не ЗначениеЗаполнено(ДатаПомещенияВИсторию) Тогда 
						ТабличныйДокумент.Вывести(ОбластьЗаголовокИстории);
					КонецЕсли;
					
					ДатаПомещенияВИсторию = СтрокаИсполнитель.ДатаПомещенияВИсторию;
					
					ПериодИРезультат = ОпределитьПериодИРезультатЦиклаВизы(ТаблицаСроков, ДатаПомещенияВИсторию);
					ОбластьИсполнителиШапка.Параметры.Период = ПериодИРезультат.Период;
					ОбластьИсполнителиШапка.Параметры.РезультатСогласования = ПериодИРезультат.РезультатСогласования;
					
					ТабличныйДокумент.Вывести(ОбластьИсполнителиШапка);
				КонецЕсли;
				
				ОбластьИсполнителиИспользуемый = ОбластьИсполнители;
				
				Если ЗначениеЗаполнено(СтрокаИсполнитель.РезультатСогласования) Тогда
					ОбластьИсполнителиИспользуемый = ОбластьИсполнителиПодпись;
#Удаление
					ОбластьИсполнителиИспользуемый.Параметры.Подпись = "";
#КонецУдаления
				КонецЕсли;
				
				ОбластьИсполнителиИспользуемый.Параметры.Заполнить(СтрокаИсполнитель);
				
				ОтслеживаниеВерсийПроизводилось = Ложь;
				Если ЗначениеЗаполнено(СтрокаИсполнитель.ФактическийИсполнитель) Тогда
					ПредставленияПравок = Новый Массив;
					
					Если Не СтрокаИсполнитель.ПомещенаВИсторию Тогда
						
						ДанныеОбИзмененииФайлов = ДанныеОбИзмененииФайловПоВизеСогласования(ВерсииСогласованныхФайлов, 
							СтрокаИсполнитель.ВизаСогласования);
#Удаление
						ВерсииИзменились = ДанныеОбИзмененииФайлов.ВерсииОтличаются; 
						ОтслеживаниеВерсийПроизводилось = ДанныеОбИзмененииФайлов.ОтслеживаниеВерсийПроизводилось;
						
						ТекстЗамечания = "";
						Если ВерсииИзменились И ОтслеживаниеВерсийПроизводилось Тогда
							
							ТекстЗамечания = ТекстЗамечанияОбИзмененииВерсии();
							
						КонецЕсли;
						
						Если ЗначениеЗаполнено(СтрокаИсполнитель.РезультатСогласования) Тогда
							ОбластьИсполнителиИспользуемый.Параметры.ЗамечаниеОбИзмененииФайлов = ТекстЗамечания;
						КонецЕсли;
#КонецУдаления
						
					КонецЕсли;
					
					Ветка = ДействияСоответствие.Получить(СтрокаИсполнитель.Источник);
					
					Если ЗначениеЗаполнено(СтрокаИсполнитель.РезультатСогласования)
							И ЗначениеЗаполнено(СтрокаИсполнитель.Источник)
							И Не ЗначениеЗаполнено(СтрокаИсполнитель.ПравилоЭскалации) Тогда
						
						ПодписыватьУЭП = Ложь;
						
						Если ТипЗнч(СтрокаИсполнитель.Источник) = Тип("СправочникСсылка.ДействияСогласования") Тогда
							ПодписыватьУЭП = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
								СтрокаИсполнитель.Источник, "ПодписыватьУЭП");
						ИначеЕсли ТипЗнч(СтрокаИсполнитель.Источник) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
							БизнесПроцесс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
								СтрокаИсполнитель.Источник, "БизнесПроцесс");
							
							Если ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Согласование") Тогда	
								ПодписыватьУЭП = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
									БизнесПроцесс, "ПодписыватьЭП");
							КонецЕсли;
						КонецЕсли;
						
#Удаление
						ТекстПодписи = ТекстШтампаЛистаСогласования(СтрокаИсполнитель, ПодписыватьУЭП);
						
						ОбластьИсполнителиИспользуемый.Параметры.Подпись = ТекстПодписи;
						
						Если ПодписыватьУЭП Тогда
							
							ОбластьИсполнителиИспользуемый.Параметры.ПодписьРасшифровка = РаботаСЭП.СсылкаНаФормуЭПОбъекта(
								СтрокаИсполнитель.ВизаСогласования);
							
						КонецЕсли;
#КонецУдаления
						
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Ветка)
							И ТипЗнч(Ветка) = Тип("СправочникСсылка.ВеткиОбработки") Тогда // Это согл. в режиме замечаний.
						
						СтруктураПоиска = Новый Структура("ВеткаОбработки, ТипЗамечания, НомерЭтапа",
							Ветка,
							Неопределено,
							СтрокаИсполнитель.НомерИтерации);
						
						СтруктураПоиска.Вставить("ИдентификаторАвтора", СтрокаИсполнитель.ИдентификаторУчастника);
						
						// Замечания.
						СтруктураПоиска.ТипЗамечания = Перечисления.ТипыЗамечаний.Замечание;
						ЗамечанияСтроки = Замечания.НайтиСтроки(СтруктураПоиска);
						
						Для Каждого Замечание Из ЗамечанияСтроки Цикл
							ПредставленияПравок.Добавить(ПредставлениеЗамечания(Замечание));
						КонецЦикла;
						
						// Комментарии.
						СтруктураПоиска.ТипЗамечания = Перечисления.ТипыЗамечаний.Комментарий;
						КомментарииСтроки = Замечания.НайтиСтроки(СтруктураПоиска);
						
						ВыделятьКомментарий =
							(СтрокаИсполнитель.РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано);
						
						Для Каждого Комментарий Из КомментарииСтроки Цикл 
							ПредставленияПравок.Добавить(ПредставлениеЗамечания(Комментарий, ВыделятьКомментарий));
						КонецЦикла;
						
					ИначеЕсли ЗначениеЗаполнено(СтрокаИсполнитель.РезультатВыполнения) Тогда
						ПредставленияПравок.Добавить(СтрокаИсполнитель.РезультатВыполнения);
					КонецЕсли;
					
					Если ПредставленияПравок.Количество() Тогда
						ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(ПредставленияПравок, "");
						ОбластьИсполнителиИспользуемый.Параметры.РезультатВыполнения = СтрСоединить(ПредставленияПравок, Символы.ПС);
					КонецЕсли;
					
#Удаление
					Если Не БесшовнаяИнтеграция И ОтслеживаниеВерсийПроизводилось Тогда
						
						ВывестиСсылкуФормаСравненияВерсий = ВерсииИзменились;
						Если Не ВерсииИзменились Тогда
							
							КоличествоВерсийФайлов = ВерсииСогласованныхФайлов.НайтиСтроки(
								Новый Структура("ВизаСогласования", СтрокаИсполнитель.ВизаСогласования)).Количество();
							
							ВывестиСсылкуФормаСравненияВерсий = КоличествоВерсийФайлов > 0;
							
						КонецЕсли;
						
						Если ВывестиСсылкуФормаСравненияВерсий Тогда
							ОбластьИсполнителиИспользуемый.Параметры.ОтличияВерсийВизСогласования = СтрШаблон(
								"v8doc:MXLDetails/ShowApprovedFileVersions/%1",
								ПолучитьНавигационнуюСсылку(СтрокаИсполнитель.ВизаСогласования));
						КонецЕсли;
						
					КонецЕсли;
#КонецУдаления
					
				КонецЕсли;
				
				ФИОДолжность = СтрокаИсполнитель.ПредставлениеФактическогоИсполнителя;
				Если Не ЗначениеЗаполнено(ФИОДолжность) Тогда
					ФИОДолжность = Строка(СтрокаИсполнитель.ФактическийИсполнитель); 
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаИсполнитель.Исполнитель) Тогда
					
					Если Не ЗначениеЗаполнено(СтрокаИсполнитель.ФактическийИсполнитель) Тогда
#Удаление
						ОбластьИсполнителиИспользуемый.Параметры.ФИОДолжность = СтрокаИсполнитель.Исполнитель;
#КонецУдаления
#Вставка
						ОбластьИсполнителиИспользуемый.Параметры.ФИО = СтрокаИсполнитель.ФИОИсполнитель; 
						ОбластьИсполнителиИспользуемый.Параметры.Должность = СтрокаИсполнитель.Должность;
#КонецВставки
					Иначе
#Удаление
						ОбластьИсполнителиИспользуемый.Параметры.ФИОДолжность = ФИОДолжность;
#КонецУдаления
#Вставка
						ОбластьИсполнителиИспользуемый.Параметры.ФИО = СтрокаИсполнитель.ФИОИсполнительФакт; 
						ОбластьИсполнителиИспользуемый.Параметры.Должность = СтрокаИсполнитель.ДолжностьФакт;						
						Если СтрНайти(ОбластьИсполнителиИспользуемый.Параметры.ФИО, "Отметил(а):") > 0 Тогда
							ОбластьИсполнителиИспользуемый.Параметры.ФИО = СтрокаИсполнитель.ФИОИсполнитель; 
							ОбластьИсполнителиИспользуемый.Параметры.Должность = СтрокаИсполнитель.Должность;							
						КонецЕсли;
#КонецВставки
					КонецЕсли;
#Вставка
					Если СтрокаИсполнитель.Исполнитель.Должность.Наименование = СтрокаИсполнитель.Исполнитель.Подразделение.Наименование Тогда
						ПодстрокаПоиска = СтрШаблон(", %1", СтрокаИсполнитель.Исполнитель.Должность.Наименование); 
						ОбластьИсполнителиИспользуемый.Параметры.Должность = СтрЗаменить(ОбластьИсполнителиИспользуемый.Параметры.Должность, ПодстрокаПоиска, ", Руководство");	 
					КонецЕсли;
					//++AxelSoft NM 14.08.2024 САНФ-027516
					Если ЗначениеЗаполнено(СтрокаИсполнитель.ФИОИсполнитель) И ЗначениеЗаполнено(СтрокаИсполнитель.ФИОИсполнительФакт)
						И НЕ СтрокаИсполнитель.ФИОИсполнитель = СтрокаИсполнитель.ФИОИсполнительФакт Тогда
						ИсполнительВРодительном = СклонениеПредставленийОбъектов.ПросклонятьФИО(СтрокаИсполнитель.ФИОИсполнитель, 2);
						ОбластьИсполнителиИспользуемый.Параметры.ФИО = СтрокаИсполнитель.ФИОИсполнительФакт + " за " + ИсполнительВРодительном;
					КонецЕсли;
					//--AxelSoft NM 14.08.2024 САНФ-027516
#КонецВставки
					
				Иначе
					Если ЗначениеЗаполнено(СтрокаИсполнитель.ФактическийИсполнитель) Тогда
#Удаление
						ОбластьИсполнителиИспользуемый.Параметры.ФИОДолжность = СтрШаблон("%1 (%2)",
							ФИОДолжность,
							СтрокаИсполнитель.РольИсполнителя);
#КонецУдаления
#Вставка
						ОбластьИсполнителиИспользуемый.Параметры.ФИО = СтрокаИсполнитель.ФИОИсполнительФакт; 
						ОбластьИсполнителиИспользуемый.Параметры.Должность = СтрокаИсполнитель.ДолжностьФакт;
						Если СтрНайти(ОбластьИсполнителиИспользуемый.Параметры.ФИО, "Отметил(а):") > 0 Тогда
							ОбластьИсполнителиИспользуемый.Параметры.ФИО = СтрокаИсполнитель.ФИОИсполнительФакт; 
							ОбластьИсполнителиИспользуемый.Параметры.Должность = СтрокаИсполнитель.ДолжностьФакт;
  						КонецЕсли;

						Если СтрокаИсполнитель.ФактическийИсполнитель.Факт.Должность.Наименование = СтрокаИсполнитель.ФактическийИсполнитель.Факт.Подразделение.Наименование Тогда
							ПодстрокаПоиска = СтрШаблон(", %1", СтрокаИсполнитель.ФактическийИсполнитель.Факт.Должность.Наименование); 
							ОбластьИсполнителиИспользуемый.Параметры.Должность = СтрЗаменить(ОбластьИсполнителиИспользуемый.Параметры.Должность, ПодстрокаПоиска, ", Руководство");	 
						КонецЕсли;
						//++AxelSoft NM 14.08.2024 САНФ-027516
						Если ЗначениеЗаполнено(СтрокаИсполнитель.ФИОИсполнитель) И ЗначениеЗаполнено(СтрокаИсполнитель.ФИОИсполнительФакт)
							И НЕ СтрокаИсполнитель.ФИОИсполнитель = СтрокаИсполнитель.ФИОИсполнительФакт Тогда
							ИсполнительВРодительном = СклонениеПредставленийОбъектов.ПросклонятьФИО(СтрокаИсполнитель.ФИОИсполнитель, 2);
							ОбластьИсполнителиИспользуемый.Параметры.ФИО = СтрокаИсполнитель.ФИОИсполнительФакт + " за " + ИсполнительВРодительном;
						КонецЕсли;
						//--AxelSoft NM 14.08.2024 САНФ-027516
#КонецВставки
					Иначе
#Удаление
						ОбластьИсполнителиИспользуемый.Параметры.ФИОДолжность = СтрокаИсполнитель.РольИсполнителя;
#КонецУдаления
#Вставка
						ОбластьИсполнителиИспользуемый.Параметры.ФИО = СтрокаИсполнитель.РольИсполнителя;
#КонецВставки
					КонецЕсли;
				КонецЕсли;
				
				ТабличныйДокумент.Вывести(ОбластьИсполнителиИспользуемый);
			КонецЦикла;
			
		Иначе
			
			ТабличныйДокумент.Вывести(ОбластьИсполнителиШапка);
			
			Для Каждого СтрокаИсполнитель Из СтрокаСсылка.Строки Цикл
				
				ОбластьИсполнителиИспользуемый = ОбластьИсполнители;
				
				Если ЗначениеЗаполнено(СтрокаИсполнитель.РезультатСогласования) Тогда
					ОбластьИсполнителиИспользуемый = ОбластьИсполнителиПодпись;
#Удаление
					ОбластьИсполнителиИспользуемый.Параметры.Подпись = "";
#КонецУдаления
				КонецЕсли;
				
				ОбластьИсполнителиИспользуемый.Параметры.Заполнить(СтрокаИсполнитель);
				
				Если ЗначениеЗаполнено(СтрокаИсполнитель.ФактическийИсполнитель) Тогда
					
					ПредставленияПравок = Новый Массив;
					ДанныеОбИзмененииФайлов = ДанныеОбИзмененииФайловПоВизеСогласования(ВерсииСогласованныхФайлов, 
						СтрокаИсполнитель.ВизаСогласования);
					
#Удаление
					ВерсииИзменились = ДанныеОбИзмененииФайлов.ВерсииОтличаются; 
					ОтслеживаниеВерсийПроизводилось = ДанныеОбИзмененииФайлов.ОтслеживаниеВерсийПроизводилось;
					
					ТекстЗамечания = "";
					Если ВерсииИзменились И ОтслеживаниеВерсийПроизводилось Тогда
						
						ТекстЗамечания = ТекстЗамечанияОбИзмененииВерсии(); 
						
					КонецЕсли; 
					
					Если ЗначениеЗаполнено(СтрокаИсполнитель.РезультатСогласования) Тогда
						ОбластьИсполнителиИспользуемый.Параметры.ЗамечаниеОбИзмененииФайлов = ТекстЗамечания; 
					КонецЕсли;
#КонецУдаления
					
					Ветка = ДействияСоответствие.Получить(СтрокаИсполнитель.Источник);
					
					Если ЗначениеЗаполнено(СтрокаИсполнитель.РезультатСогласования)
							И ЗначениеЗаполнено(СтрокаИсполнитель.Источник)
							И Не ЗначениеЗаполнено(СтрокаИсполнитель.ПравилоЭскалации) Тогда
						
						ПодписыватьУЭП = Ложь;
						
						Если ТипЗнч(СтрокаИсполнитель.Источник) = Тип("СправочникСсылка.ДействияСогласования") Тогда
							ПодписыватьУЭП = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
								СтрокаИсполнитель.Источник, "ПодписыватьУЭП");
						ИначеЕсли ТипЗнч(СтрокаИсполнитель.Источник) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
							БизнесПроцесс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
								СтрокаИсполнитель.Источник, "БизнесПроцесс");
								
							Если ТипЗнч(БизнесПроцесс) = Тип("БизнесПроцессСсылка.Согласование") Тогда	
								ПодписыватьУЭП = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
									БизнесПроцесс, "ПодписыватьЭП");
							КонецЕсли;
						КонецЕсли;
						
#Удаление
						ТекстПодписи = ТекстШтампаЛистаСогласования(СтрокаИсполнитель, ПодписыватьУЭП);
						
						Если ЗначениеЗаполнено(СтрокаИсполнитель.РезультатСогласования) Тогда
							
							ОбластьИсполнителиИспользуемый.Параметры.Подпись = ТекстПодписи;
							Если ПодписыватьУЭП Тогда
								ОбластьИсполнителиИспользуемый.Параметры.ПодписьРасшифровка = РаботаСЭП.СсылкаНаФормуЭПОбъекта(
									СтрокаИсполнитель.ВизаСогласования);
							КонецЕсли;
							
						КонецЕсли;
#КонецУдаления
						
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Ветка)
							И ТипЗнч(Ветка) = Тип("СправочникСсылка.ВеткиОбработки") Тогда // Это согл. в режиме замечаний.
						
						СтруктураПоиска = Новый Структура("ВеткаОбработки, ТипЗамечания, НомерЭтапа",
							Ветка,
							Неопределено,
							СтрокаИсполнитель.НомерИтерации);
						
						СтруктураПоиска.Вставить("ИдентификаторАвтора", СтрокаИсполнитель.ИдентификаторУчастника);
						
						// Замечания.
						СтруктураПоиска.ТипЗамечания = Перечисления.ТипыЗамечаний.Замечание;
						ЗамечанияСтроки = Замечания.НайтиСтроки(СтруктураПоиска);
						
						Для Каждого Замечание Из ЗамечанияСтроки Цикл 
							ПредставленияПравок.Добавить(ПредставлениеЗамечания(Замечание));
						КонецЦикла;
						
						// Комментарии.
						СтруктураПоиска.ТипЗамечания = Перечисления.ТипыЗамечаний.Комментарий;
						КомментарииСтроки = Замечания.НайтиСтроки(СтруктураПоиска);
						
						ВыделятьКомментарий =
							СтрокаИсполнитель.РезультатСогласования = Перечисления.РезультатыСогласования.НеСогласовано;
						
						Для Каждого Комментарий Из КомментарииСтроки Цикл
							ПредставленияПравок.Добавить(ПредставлениеЗамечания(Комментарий, ВыделятьКомментарий));
						КонецЦикла;
						
					ИначеЕсли ЗначениеЗаполнено(СтрокаИсполнитель.РезультатВыполнения) Тогда
						ПредставленияПравок.Добавить(СтрокаИсполнитель.РезультатВыполнения);
					КонецЕсли;
					
					Если ПредставленияПравок.Количество() > 0 Тогда
						ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(ПредставленияПравок, "");
						ОбластьИсполнителиИспользуемый.Параметры.РезультатВыполнения = СтрСоединить(ПредставленияПравок, Символы.ПС);
					КонецЕсли;
					
#Удаление
					Если Не БесшовнаяИнтеграция И ОтслеживаниеВерсийПроизводилось Тогда
						
						ВывестиСсылкуФормаСравненияВерсий = ВерсииИзменились;
						Если Не ВерсииИзменились Тогда
							
							КоличествоВерсийФайлов = ВерсииСогласованныхФайлов.НайтиСтроки(
								Новый Структура("ВизаСогласования", СтрокаИсполнитель.ВизаСогласования)).Количество();
							
							ВывестиСсылкуФормаСравненияВерсий = КоличествоВерсийФайлов > 0;
							
						КонецЕсли;
							
						Если ВывестиСсылкуФормаСравненияВерсий Тогда
							ОбластьИсполнителиИспользуемый.Параметры.ОтличияВерсийВизСогласования = СтрШаблон(
								"v8doc:MXLDetails/ShowApprovedFileVersions/%1",
								ПолучитьНавигационнуюСсылку(СтрокаИсполнитель.ВизаСогласования));
						КонецЕсли;
						
					КонецЕсли;
#КонецУдаления
					
				КонецЕсли;
				
				ФИОДолжность = СтрокаИсполнитель.ПредставлениеФактическогоИсполнителя;
				Если Не ЗначениеЗаполнено(ФИОДолжность) Тогда
					ФИОДолжность = Строка(СтрокаИсполнитель.ФактическийИсполнитель); 
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаИсполнитель.Исполнитель) Тогда
					
					Если Не ЗначениеЗаполнено(СтрокаИсполнитель.ФактическийИсполнитель) Тогда
#Удаление
						ОбластьИсполнителиИспользуемый.Параметры.ФИОДолжность = СтрокаИсполнитель.Исполнитель;
#КонецУдаления
#Вставка
						ОбластьИсполнителиИспользуемый.Параметры.ФИО = СтрокаИсполнитель.ФИОИсполнитель; 
						ОбластьИсполнителиИспользуемый.Параметры.Должность = СтрокаИсполнитель.Должность;
#КонецВставки
					Иначе
#Удаление
						ОбластьИсполнителиИспользуемый.Параметры.ФИОДолжность = ФИОДолжность;
#КонецУдаления
#Вставка
						ОбластьИсполнителиИспользуемый.Параметры.ФИО = СтрокаИсполнитель.ФИОИсполнительФакт;
						ОбластьИсполнителиИспользуемый.Параметры.Должность = СтрокаИсполнитель.ДолжностьФакт;
						
						 Если СтрНайти(СтрокаИсполнитель.ПредставлениеДляСортировки, " за ") > 0 Тогда
							ОбластьИсполнителиИспользуемый.Параметры.ФИО = СтрокаИсполнитель.ФИОИсполнительФакт + " за " + СтрокаИсполнитель.ФИОИсполнитель; 
							ОбластьИсполнителиИспользуемый.Параметры.Должность = СтрокаИсполнитель.ДолжностьФакт;						 
						 КонецЕсли;
						 Если СтрНайти(ОбластьИсполнителиИспользуемый.Параметры.ФИО, "Отметил(а):") > 0 Тогда
							ОбластьИсполнителиИспользуемый.Параметры.ФИО = СтрокаИсполнитель.ФИОИсполнитель; 
							ОбластьИсполнителиИспользуемый.Параметры.Должность = СтрокаИсполнитель.Должность;						   
						КонецЕсли;
						//++AxelSoft NM 14.08.2024 САНФ-027516
						Если ЗначениеЗаполнено(СтрокаИсполнитель.ФИОИсполнитель) И ЗначениеЗаполнено(СтрокаИсполнитель.ФИОИсполнительФакт)
							И НЕ СтрокаИсполнитель.ФИОИсполнитель = СтрокаИсполнитель.ФИОИсполнительФакт Тогда
							ИсполнительВРодительном = СклонениеПредставленийОбъектов.ПросклонятьФИО(СтрокаИсполнитель.ФИОИсполнитель, 2);
							ОбластьИсполнителиИспользуемый.Параметры.ФИО = СтрокаИсполнитель.ФИОИсполнительФакт + " за " + ИсполнительВРодительном;
						КонецЕсли;
						//--AxelSoft NM 14.08.2024 САНФ-027516
#КонецВставки
					КонецЕсли;

#Вставка
					Если СтрокаИсполнитель.Исполнитель.Должность.Наименование = СтрокаИсполнитель.Исполнитель.Подразделение.Наименование Тогда
						ПодстрокаПоиска = СтрШаблон(", %1", СтрокаИсполнитель.Исполнитель.Должность.Наименование); 
						ОбластьИсполнителиИспользуемый.Параметры.Должность = СтрЗаменить(ОбластьИсполнителиИспользуемый.Параметры.Должность, ПодстрокаПоиска, ", Руководство");	 
						ОбластьИсполнителиИспользуемый.Параметры.ФИО = СтрокаИсполнитель.ФИОИсполнитель; 					
					КонецЕсли;
#КонецВставки
				Иначе
					Если ЗначениеЗаполнено(СтрокаИсполнитель.ФактическийИсполнитель) Тогда
#Удаление
						ОбластьИсполнителиИспользуемый.Параметры.ФИОДолжность =
							СтрШаблон("%1 (%2)",
							ФИОДолжность,
							СтрокаИсполнитель.РольИсполнителя);
#КонецУдаления
#Вставка
						ОбластьИсполнителиИспользуемый.Параметры.ФИО = СтрокаИсполнитель.ФИОИсполнительФакт; 
						ОбластьИсполнителиИспользуемый.Параметры.Должность = СтрокаИсполнитель.ДолжностьФакт;						
						Если СтрНайти(ОбластьИсполнителиИспользуемый.Параметры.ФИО, "Отметил(а):") > 0 Тогда
							ОбластьИсполнителиИспользуемый.Параметры.ФИО = СтрокаИсполнитель.ФИОИсполнительФакт; 
							ОбластьИсполнителиИспользуемый.Параметры.Должность = СтрокаИсполнитель.ДолжностьФакт;	
						КонецЕсли;

						Если СтрокаИсполнитель.ФактическийИсполнитель.Факт.Должность.Наименование = СтрокаИсполнитель.ФактическийИсполнитель.Факт.Подразделение.Наименование Тогда
							ПодстрокаПоиска = СтрШаблон(", %1", СтрокаИсполнитель.ФактическийИсполнитель.Факт.Должность.Наименование); 
							ОбластьИсполнителиИспользуемый.Параметры.Должность = СтрЗаменить(ОбластьИсполнителиИспользуемый.Параметры.Должность, ПодстрокаПоиска, ", Руководство");	 
							ОбластьИсполнителиИспользуемый.Параметры.ФИО = СтрокаИсполнитель.ФИОИсполнительФакт; 
						КонецЕсли;
						//++AxelSoft NM 14.08.2024 САНФ-027516
						Если ЗначениеЗаполнено(СтрокаИсполнитель.ФИОИсполнитель) И ЗначениеЗаполнено(СтрокаИсполнитель.ФИОИсполнительФакт)
							И НЕ СтрокаИсполнитель.ФИОИсполнитель = СтрокаИсполнитель.ФИОИсполнительФакт Тогда
							ИсполнительВРодительном = СклонениеПредставленийОбъектов.ПросклонятьФИО(СтрокаИсполнитель.ФИОИсполнитель, 2);
							ОбластьИсполнителиИспользуемый.Параметры.ФИО = СтрокаИсполнитель.ФИОИсполнительФакт + " за " + ИсполнительВРодительном;
						КонецЕсли;
						//--AxelSoft NM 14.08.2024 САНФ-027516
#КонецВставки
					Иначе
#Удаление
						ОбластьИсполнителиИспользуемый.Параметры.ФИОДолжность = СтрокаИсполнитель.РольИсполнителя;
#КонецУдаления
#Вставка
						ОбластьИсполнителиИспользуемый.Параметры.ФИО = СтрокаИсполнитель.ФИОИсполнитель;
#КонецВставки
					КонецЕсли;
				КонецЕсли;
				
				ТабличныйДокумент.Вывести(ОбластьИсполнителиИспользуемый);
			КонецЦикла;
			
		КонецЕсли;
		
		Если Разногласия.Количество() <> 0 Тогда
			
			ТабличныйДокумент.Вывести(ОбластьЗаголовокРазногласия);
			ТабличныйДокумент.Вывести(ОбластьРазногласияШапка);
			
			Номер = 1;
			Для Каждого СтрокаРазногласия Из Разногласия Цикл
				ОбластьРазногласия.Параметры.Заполнить(СтрокаРазногласия);
				ОбластьРазногласия.Параметры.Дата = Формат(СтрокаРазногласия.Дата, "ДФ='dd.MM.yyyy ЧЧ:мм';");
				ОбластьРазногласия.Параметры.Номер = Номер;
				
				РольИсполнителя = ИДУчастникаИРолиСоответствие[СтрокаРазногласия.ИдентификаторАвтора];
				Если ЗначениеЗаполнено(РольИсполнителя) Тогда
					ОбластьРазногласия.Параметры.Автор = СтрШаблон("%1 (%2)",
						СтрокаРазногласия.Автор,
						РольИсполнителя);
				КонецЕсли;
				
				ТабличныйДокумент.Вывести(ОбластьРазногласия);
				
				Номер = Номер + 1;
			КонецЦикла;
			
		КонецЕсли;
		
#Вставка
		// Вывод подвала в новом макете печати согласования
		ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
		УстановитьПривилегированныйРежим(Истина);
		СведенияПользователей = РегистрыСведений.СведенияОПользователях.Получить(Новый Структура("Пользователь", СтрокаСсылка.Ссылка.Подготовил));
		ОбластьПодвал.Параметры.ДолжностьИсполнителя = РаботаСПользователями.ПолучитьДолжность(СтрокаСсылка.Ссылка.Подготовил);
		ОбластьПодвал.Параметры.ФИОИсполнителя		 = ФизическиеЛица.ФамилияИнициалыФизЛица(СтрокаСсылка.Ссылка.Подготовил.Наименование);
		Телефон = ЦППК_ПолучитьТелефонОбъекта(СтрокаСсылка.Ссылка.Подготовил);
		Если ЗначениеЗаполнено(Телефон) тогда
			ОбластьПодвал.Параметры.Телефон =Телефон;		
		КонецЕсли;
		ТабличныйДокумент.Вывести(ОбластьПодвал);
#КонецВставки

		// В табличном документе зададим имя области в которую был выведен объект.
		// Нужно для возможности печати по-комплектно.
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(
			ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, СтрокаСсылка.Ссылка);
	КонецЦикла;
	
	// Выведем предметы, согласование которых не запускалось.
	Для Каждого Предмет Из МассивОбъектов Цикл
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
#Удаление		
		ОбластьШапка.Параметры.Предмет = СтрШаблон("%1 ""%2""", Предмет.Метаданные().ПредставлениеОбъекта, Предмет);
		Если История Тогда
			Если ТипЗнч(Предмет) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
				РеквизитыПредмета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Предмет, "Подготовил, Ответственный");
				Если ЗначениеЗаполнено(РеквизитыПредмета.Ответственный) Тогда 
					ОбластьШапка.Параметры.Ответственный = СтрШаблон(НСтр("ru = 'Ответственный: %1'"),
						РеквизитыПредмета.Ответственный);
				Иначе
					ОбластьШапка.Параметры.Ответственный = СтрШаблон(НСтр("ru = 'Ответственный: %1'"),
						РеквизитыПредмета.Подготовил);
				КонецЕсли;
			ИначеЕсли ТипЗнч(Предмет) = Тип("СправочникСсылка.Мероприятия") Тогда
				ОбластьШапка.Параметры.Ответственный = СтрШаблон(НСтр("ru = 'Ответственный: %1'"),
					ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Предмет, "Организатор"));
			КонецЕсли;
		КонецЕсли;
#КонецУдаления
#Вставка 
		// Котляров 2025.07.25 САНФ-035395		QR-8248900-1
		// Замена параметров шапки макета печати листов согласования
		ОбластьШапка.Параметры.РегистрационныйНомер = Предмет.РегистрационныйНомер;
		ОбластьШапка.Параметры.ДатаРегистрации =  Предмет.ДатаРегистрации; 
		ОбластьШапка.Параметры.Содержание = "«" + Предмет.Заголовок + "»";
		ОбластьШапка.Параметры.НаименованиеВидаДокумента = Предмет.ВидДокумента;		
#КонецВставки
		ТабличныйДокумент.Вывести(ОбластьШапка);
		ТабличныйДокумент.Вывести(ОбластьНеЗапускалось);
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, Предмет);
	КонецЦикла;
	
	ТабличныйДокумент.ТолькоПросмотр = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЦППК_ПолучитьТелефонОбъекта(Пользователь)
	
	КонтактнаяИнформация = Новый Структура;
	Емайл = "";Телефон = "";
	
	Телефон = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Пользователь, 
			Справочники.ВидыКонтактнойИнформации.ТелефонПользователя);
	
	Если ЗначениеЗаполнено(Телефон) Тогда 
		Телефон = СтрШаблон(НСтр("ru = 'Телефон: %1'"), Телефон);	
	КонецЕсли;			

	Возврат Телефон;
	
КонецФункции	

&ИзменениеИКонтроль("ТекстЗапросаДляЛистаСогласования")
Функция ЦППК_ТекстЗапросаДляЛистаСогласования(История = Ложь) Экспорт
	
#Удаление
	ЗапросТекст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВизыСогласования.Документ КАК Ссылка,
	|	ВизыСогласования.Ссылка КАК ВизаСогласования,
	|	ВизыСогласования.Исполнитель КАК Исполнитель,
	|	ВизыСогласования.УстановилРезультат КАК ФактическийИсполнитель,
	|	ВизыСогласования.РольИсполнителя.Владелец КАК РольИсполнителя,
	|	ВизыСогласования.РольИсполнителя.ОсновнойОбъектАдресации КАК ОсновнойОбъектАдресации,
	|	ВизыСогласования.РольИсполнителя.ДополнительныйОбъектАдресации КАК ДополнительныйОбъектАдресации,
	|	ВизыСогласования.РезультатСогласования КАК РезультатСогласования,
	|	ВизыСогласования.ДатаИсполнения КАК ДатаИсполнения,
	|	ВЫРАЗИТЬ(ВизыСогласования.Исполнитель КАК Справочник.Сотрудники).Должность КАК Должность,
	|	ВизыСогласования.Комментарий КАК РезультатВыполнения,
	|	ВизыСогласования.Источник КАК Источник,
	|	ВизыСогласования.ПомещенаВИсторию КАК ПомещенаВИсторию,
	|	ВизыСогласования.ДатаПомещенияВИсторию КАК ДатаПомещенияВИсторию,
	|	ВизыСогласования.ДатаСоздания КАК ДатаСозданияВизы,
	|	ВизыСогласования.Порядок КАК Порядок,
	|	ВизыСогласования.ИдентификаторУчастника КАК ИдентификаторУчастника,
	|	ВизыСогласования.НомерИтерации КАК НомерИтерации,
	|	ЭскалированныеДействия.ПравилоЭскалации КАК ПравилоЭскалации,
	|	ВЫБОР
	|		КОГДА СведенияОбУчастникахДействий.ПредставлениеФактическогоИсполнителя <> """"
	|				И НЕ СведенияОбУчастникахДействий.ПредставлениеФактическогоИсполнителя ЕСТЬ NULL
	|				И СведенияОбУчастникахДействий.ФактическийИсполнитель = ВизыСогласования.УстановилРезультат
	|			ТОГДА СведенияОбУчастникахДействий.ПредставлениеФактическогоИсполнителя
	|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ВизыСогласования.УстановилРезультат)
	|	КОНЕЦ КАК ПредставлениеФактическогоИсполнителя,
	|	ВЫБОР
	|		КОГДА СведенияОбУчастникахДействий.ФактическийИсполнитель = ВизыСогласования.УстановилРезультат
	|			ТОГДА СведенияОбУчастникахДействий.ПредставлениеСотрудникаДляПЭП
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ПредставлениеСотрудникаДляПЭП
	|ИЗ
	|	Справочник.ВизыСогласования КАК ВизыСогласования
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбУчастникахДействий КАК СведенияОбУчастникахДействий
	|		ПО ВизыСогласования.Источник = СведенияОбУчастникахДействий.Действие
	|			И ВизыСогласования.ИдентификаторУчастника = СведенияОбУчастникахДействий.ИдентификаторУчастника
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭскалированныеДействия КАК ЭскалированныеДействия
	|		ПО ВизыСогласования.Источник = ЭскалированныеДействия.Действие
	|			И ВизыСогласования.ИдентификаторУчастника = ЭскалированныеДействия.ИдентификаторУчастника
	|ГДЕ
	|	ВизыСогласования.Документ В(&МассивОбъектов)
	|	И НЕ ВизыСогласования.ПометкаУдаления
	|	И НЕ ВизыСогласования.Удалена
	|	И НЕ(ВизыСогласования.Источник ССЫЛКА Справочник.ДействияСогласования
	|				И ВизыСогласования.Источник.ПомещеноВИсторию)";
#КонецУдаления
#Вставка
	Если История Тогда
		
		ЗапросТекст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВизыСогласования.Документ КАК Ссылка,
		|	ВизыСогласования.Ссылка КАК ВизаСогласования,
		|	ВизыСогласования.Исполнитель КАК Исполнитель,
		|	ВизыСогласования.УстановилРезультат КАК ФактическийИсполнитель,
		|	ВизыСогласования.РольИсполнителя.Владелец КАК РольИсполнителя,
		|	ВизыСогласования.РольИсполнителя.ОсновнойОбъектАдресации КАК ОсновнойОбъектАдресации,
		|	ВизыСогласования.РольИсполнителя.ДополнительныйОбъектАдресации КАК ДополнительныйОбъектАдресации,
		|	ВизыСогласования.РезультатСогласования КАК РезультатСогласования,
		|	ВизыСогласования.ДатаИсполнения КАК ДатаИсполнения,
		|	ВЫРАЗИТЬ(ВизыСогласования.УстановилРезультат.Факт КАК Справочник.Сотрудники).ПредставлениеВПереписке КАК ФИОИсполнительФакт,
		|	ВЫРАЗИТЬ(ВизыСогласования.УстановилРезультат.Факт КАК Справочник.Сотрудники).Должность КАК ДолжностьФакт,
		|	ВЫРАЗИТЬ(ВизыСогласования.Исполнитель КАК Справочник.Сотрудники).ПредставлениеВПереписке КАК ФИОИсполнитель,		
		|	ВЫРАЗИТЬ(ВизыСогласования.Исполнитель КАК Справочник.Сотрудники).Должность КАК Должность,
		|	ВизыСогласования.Комментарий КАК РезультатВыполнения,
		|	ВизыСогласования.Источник КАК Источник,
		|	ВизыСогласования.ПомещенаВИсторию КАК ПомещенаВИсторию,
		|	ВизыСогласования.ДатаПомещенияВИсторию КАК ДатаПомещенияВИсторию,
		|	ВизыСогласования.ДатаСоздания КАК ДатаСозданияВизы,
		|	ВизыСогласования.Порядок КАК Порядок,
		|	ВизыСогласования.ИдентификаторУчастника КАК ИдентификаторУчастника,
		|	ВизыСогласования.НомерИтерации КАК НомерИтерации,
		|	ЭскалированныеДействия.ПравилоЭскалации КАК ПравилоЭскалации,
		|	ВЫБОР
		|	КОГДА СведенияОбУчастникахДействий.ФактическийИсполнитель.Ссылка ЕСТЬ NULL
		|		ТОГДА ""я""
		|	ИНАЧЕ СведенияОбУчастникахДействий.ФактическийИсполнитель.Ссылка
		|	КОНЕЦ КАК ПредставлениеДляСортировки,
		|	ВЫБОР
		|		КОГДА СведенияОбУчастникахДействий.ПредставлениеФактическогоИсполнителя <> """"
		|				И НЕ СведенияОбУчастникахДействий.ПредставлениеФактическогоИсполнителя ЕСТЬ NULL
		|				И СведенияОбУчастникахДействий.ФактическийИсполнитель = ВизыСогласования.УстановилРезультат
		|			ТОГДА СведенияОбУчастникахДействий.ПредставлениеФактическогоИсполнителя
		|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ВизыСогласования.УстановилРезультат)
		|	КОНЕЦ КАК ПредставлениеФактическогоИсполнителя,
		|	ВЫБОР
		|		КОГДА СведенияОбУчастникахДействий.ФактическийИсполнитель = ВизыСогласования.УстановилРезультат
		|			ТОГДА СведенияОбУчастникахДействий.ПредставлениеСотрудникаДляПЭП
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК ПредставлениеСотрудникаДляПЭП
		|ИЗ
		|	Справочник.ВизыСогласования КАК ВизыСогласования
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбУчастникахДействий КАК СведенияОбУчастникахДействий
		|		ПО ВизыСогласования.Источник = СведенияОбУчастникахДействий.Действие
		|			И ВизыСогласования.ИдентификаторУчастника = СведенияОбУчастникахДействий.ИдентификаторУчастника
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭскалированныеДействия КАК ЭскалированныеДействия
		|		ПО ВизыСогласования.Источник = ЭскалированныеДействия.Действие
		|			И ВизыСогласования.ИдентификаторУчастника = ЭскалированныеДействия.ИдентификаторУчастника
		|ГДЕ
		|	ВизыСогласования.Документ В(&МассивОбъектов)
		|	И НЕ ВизыСогласования.ПометкаУдаления
		|	И НЕ ВизыСогласования.Удалена
		|	И НЕ(ВизыСогласования.Источник ССЫЛКА Справочник.ДействияСогласования
		|				И ВизыСогласования.Источник.ПомещеноВИсторию)";
		
	Иначе
		
		ЗапросТекст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВизыСогласования.Документ КАК Ссылка,
		|	ВизыСогласования.Ссылка КАК ВизаСогласования,
		|	ВизыСогласования.Исполнитель КАК Исполнитель,
		|	ВизыСогласования.УстановилРезультат КАК ФактическийИсполнитель,
		|	ВизыСогласования.РольИсполнителя.Владелец КАК РольИсполнителя,
		|	ВизыСогласования.РольИсполнителя.ОсновнойОбъектАдресации КАК ОсновнойОбъектАдресации,
		|	ВизыСогласования.РольИсполнителя.ДополнительныйОбъектАдресации КАК ДополнительныйОбъектАдресации,
		|	ВизыСогласования.РезультатСогласования КАК РезультатСогласования,
		|	ВизыСогласования.ДатаИсполнения КАК ДатаИсполнения,
		|	ВЫРАЗИТЬ(ВизыСогласования.УстановилРезультат.Факт КАК Справочник.Сотрудники).ПредставлениеВПереписке КАК ФИОИсполнительФакт,
		|	ВЫРАЗИТЬ(ВизыСогласования.УстановилРезультат.Факт КАК Справочник.Сотрудники).Должность КАК ДолжностьФакт,
		|	ВЫРАЗИТЬ(ВизыСогласования.Исполнитель КАК Справочник.Сотрудники).ПредставлениеВПереписке КАК ФИОИсполнитель,		
		|	ВЫРАЗИТЬ(ВизыСогласования.Исполнитель КАК Справочник.Сотрудники).Должность КАК Должность,
		|	ВизыСогласования.Комментарий КАК РезультатВыполнения,
		|	ВизыСогласования.Источник КАК Источник,
		|	ВизыСогласования.Источник.Ссылка КАК ИсточникНомер,
		|	ВизыСогласования.ПомещенаВИсторию КАК ПомещенаВИсторию,
		|	ВизыСогласования.ДатаПомещенияВИсторию КАК ДатаПомещенияВИсторию,
		|	ВизыСогласования.ДатаСоздания КАК ДатаСозданияВизы,
		|	ВизыСогласования.Порядок КАК Порядок,
		|	ВизыСогласования.ИдентификаторУчастника КАК ИдентификаторУчастника,
		|	ВизыСогласования.НомерИтерации КАК НомерИтерации,
		|	ЭскалированныеДействия.ПравилоЭскалации КАК ПравилоЭскалации,
		|	ВЫБОР
		|	КОГДА СведенияОбУчастникахДействий.ФактическийИсполнитель.Ссылка ЕСТЬ NULL
		|		ТОГДА ""я""
		|	ИНАЧЕ СведенияОбУчастникахДействий.ФактическийИсполнитель.Ссылка
		|	КОНЕЦ КАК ПредставлениеДляСортировки,
		|	ВЫБОР
		|		КОГДА СведенияОбУчастникахДействий.ПредставлениеФактическогоИсполнителя <> """"
		|				И НЕ СведенияОбУчастникахДействий.ПредставлениеФактическогоИсполнителя ЕСТЬ NULL
		|				И СведенияОбУчастникахДействий.ФактическийИсполнитель = ВизыСогласования.УстановилРезультат
		|			ТОГДА СведенияОбУчастникахДействий.ПредставлениеФактическогоИсполнителя
		|		ИНАЧЕ ПРЕДСТАВЛЕНИЕ(ВизыСогласования.УстановилРезультат)
		|	КОНЕЦ КАК ПредставлениеФактическогоИсполнителя,
		|	ВЫБОР
		|		КОГДА СведенияОбУчастникахДействий.ФактическийИсполнитель = ВизыСогласования.УстановилРезультат
		|			ТОГДА СведенияОбУчастникахДействий.ПредставлениеСотрудникаДляПЭП
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК ПредставлениеСотрудникаДляПЭП
		|ПОМЕСТИТЬ ВсеУчастники
		|ИЗ
		|	Справочник.ВизыСогласования КАК ВизыСогласования
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОбУчастникахДействий КАК СведенияОбУчастникахДействий
		|		ПО ВизыСогласования.Источник = СведенияОбУчастникахДействий.Действие
		|			И ВизыСогласования.ИдентификаторУчастника = СведенияОбУчастникахДействий.ИдентификаторУчастника
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЭскалированныеДействия КАК ЭскалированныеДействия
		|		ПО ВизыСогласования.Источник = ЭскалированныеДействия.Действие
		|			И ВизыСогласования.ИдентификаторУчастника = ЭскалированныеДействия.ИдентификаторУчастника
		|ГДЕ
		|	ВизыСогласования.Документ В(&МассивОбъектов)
		|	И НЕ ВизыСогласования.ПометкаУдаления
		|	И НЕ ВизыСогласования.Удалена
		|	И НЕ(ВизыСогласования.Источник ССЫЛКА Справочник.ДействияСогласования
		|				И ВизыСогласования.Источник.ПомещеноВИсторию)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ВсеУчастники.Исполнитель = НЕОПРЕДЕЛЕНО
		|			ТОГДА ВсеУчастники.РольИсполнителя
		|		ИНАЧЕ ВсеУчастники.Исполнитель
		|	КОНЕЦ КАК Исполнитель,
		|	ВсеУчастники.РезультатСогласования КАК РезультатСогласования,
		|	ВсеУчастники.ДатаСозданияВизы КАК ДатаСозданияВизы
		|ПОМЕСТИТЬ РазделеныНаИсторию
		|ИЗ
		|	ВсеУчастники КАК ВсеУчастники
		|ГДЕ
		|	НЕ ВсеУчастники.ПомещенаВИсторию
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ВсеУчастники.Исполнитель = НЕОПРЕДЕЛЕНО
		|			ТОГДА ВсеУчастники.РольИсполнителя
		|		ИНАЧЕ ВсеУчастники.Исполнитель
		|	КОНЕЦ,
		|	ВсеУчастники.РезультатСогласования,
		|	ВсеУчастники.ДатаСозданияВизы
		|ИЗ
		|	ВсеУчастники КАК ВсеУчастники
		|ГДЕ
		|	ВсеУчастники.ПомещенаВИсторию
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РазделеныНаИсторию.Исполнитель КАК Исполнитель,
		|	МАКСИМУМ(РазделеныНаИсторию.ДатаСозданияВизы) КАК ДатаСозданияВизы
		|ПОМЕСТИТЬ СгруппированныеИсполнители
		|ИЗ
		|	РазделеныНаИсторию КАК РазделеныНаИсторию
		|
		|СГРУППИРОВАТЬ ПО
		|	РазделеныНаИсторию.Исполнитель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсеУчастники.Ссылка КАК Ссылка,
		|	ВсеУчастники.ВизаСогласования КАК ВизаСогласования,
		|	ВсеУчастники.Исполнитель КАК Исполнитель,
		|	ВсеУчастники.ФактическийИсполнитель КАК ФактическийИсполнитель,
		|	ВсеУчастники.РольИсполнителя КАК РольИсполнителя,
		|	ВсеУчастники.ОсновнойОбъектАдресации КАК ОсновнойОбъектАдресации,
		|	ВсеУчастники.ДополнительныйОбъектАдресации КАК ДополнительныйОбъектАдресации,
		|	ВсеУчастники.РезультатСогласования КАК РезультатСогласования,
		|	ВсеУчастники.ДатаИсполнения КАК ДатаИсполнения,
		|	ВсеУчастники.Должность КАК Должность,   
		|	ВсеУчастники.ФИОИсполнитель КАК  ФИОИсполнитель,
		|	ВсеУчастники.ФИОИсполнительФакт КАК ФИОИсполнительФакт,
		|	ВсеУчастники.ДолжностьФакт КАК ДолжностьФакт,		
		|	ВсеУчастники.РезультатВыполнения КАК РезультатВыполнения,
		|	ВсеУчастники.Источник КАК Источник,
		|	ВсеУчастники.ИсточникНомер КАК ИсточникНомер,
		|	ВсеУчастники.ПомещенаВИсторию КАК ПомещенаВИсторию,
		|	ВсеУчастники.ДатаПомещенияВИсторию КАК ДатаПомещенияВИсторию,
		|	ВсеУчастники.ДатаСозданияВизы КАК ДатаСозданияВизы,
		|	ВсеУчастники.Порядок КАК Порядок,
		|	ВсеУчастники.ИдентификаторУчастника КАК ИдентификаторУчастника,
		|	ВсеУчастники.НомерИтерации КАК НомерИтерации,
		|	ВсеУчастники.ПравилоЭскалации КАК ПравилоЭскалации,
		|	ВсеУчастники.ПредставлениеДляСортировки КАК ПредставлениеДляСортировки,
		|	ВсеУчастники.ПредставлениеФактическогоИсполнителя КАК ПредставлениеФактическогоИсполнителя,
		|	ВсеУчастники.ПредставлениеСотрудникаДляПЭП КАК ПредставлениеСотрудникаДляПЭП
		|ИЗ
		|	СгруппированныеИсполнители КАК СгруппированныеИсполнители
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсеУчастники КАК ВсеУчастники
		|		ПО ((ВсеУчастники.Исполнитель = СгруппированныеИсполнители.Исполнитель
		|				ИЛИ ВсеУчастники.РольИсполнителя = СгруппированныеИсполнители.Исполнитель)
		|				И СгруппированныеИсполнители.ДатаСозданияВизы = ВсеУчастники.ДатаСозданияВизы)";
		
	КонецЕсли;
#КонецВставки

#Удаление
	Если Не История Тогда 
		ЗапросТекст = ЗапросТекст + "
		|И Не ВизыСогласования.ПомещенаВИсторию";
	КонецЕсли;
	
	ЗапросТекст = МультиязычностьДокументооборот.ТекстЗапросаСведенийОбУчастникахСУчетомЯзыка(ЗапросТекст);
	
	ЗапросТекст = ЗапросТекст + "
		|УПОРЯДОЧИТЬ ПО
		|	ПомещенаВИсторию,
		|	ДатаПомещенияВИсторию УБЫВ
		|ИТОГИ ПО
		|	Ссылка ";
#КонецУдаления
#Вставка
	ЗапросТекст = ЗапросТекст + "
	|УПОРЯДОЧИТЬ ПО
	|	ДатаИсполнения 
	|ИТОГИ ПО
	|	Ссылка";
#КонецВставки
	
	Возврат ЗапросТекст;
	
КонецФункции

#КонецОбласти
