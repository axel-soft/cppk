
&После("ЗаменитьЗначения")
Процедура ЦППК_ЗаменитьЗначения(Метаданное, Порция, Замены, Настройки)
	
	Если Метаданное = Метаданные.ПланыВидовХарактеристик.ВидыДоступа Тогда
		
		Для Каждого Строка ИЗ Порция Цикл
			
			Если Строка.ИмяПредопределенныхДанных = "ГруппыДоступаКорреспондентов" Тогда
				Строка.ИмяПредопределенныхДанных = "ГруппаДоступаКонтрагентов";
				Строка.Наименование = "Группа доступа контрагентов";
				Строка._ТипЗначения_СсылочныеОбъекты = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("Справочник.ГруппыДоступаКонтрагентов");
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры

&Вместо("ЗагрузитьПорциюСсылочныйОбъект")
Процедура ЦППК_ЗагрузитьПорциюСсылочныйОбъект(Метаданное, Порция, Замены, Настройки, ИмяОбъекта, ИмяИсточника, ЕстьУдаление)

	ПараметрыМетаданного = ЗаполнитьКешМетаданных(Метаданное, Порция, Настройки, ИмяОбъекта);

	Изменения = Новый ТаблицаЗначений;

	// сперва пробуем все сразу получить изменения
	НачатьТранзакцию();
	Попытка
		Изменения = ОтметкиВремени.ПроверитьИзменения(Порция, Метаданное, Настройки.УзелИсточник);
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Причина = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Изменения = Новый ТаблицаЗначений;
	КонецПопытки;		

	Для Каждого Источник Из Порция Цикл

		Настройки.Сообщение.ПоследнийКлюч = Источник.Ссылка;
		Изменение = Неопределено;
		Приемник = Неопределено;

		// пишем ссылочный объект - один из массива
		НачатьТранзакцию();
		Попытка

			ИсточникССылкаПрежний = Источник.Ссылка;

			СтандартнаяОбработка = Истина;
			ПараметрыЗагрузки = Новый Структура;
			ПараметрыЗагрузки.Вставить("ИмяОбъекта", ИмяОбъекта);
			ПараметрыЗагрузки.Вставить("Замены", Замены);
			ПараметрыЗагрузки.Вставить("Настройки", Настройки);
			ПараметрыЗагрузки.Вставить("Загрузка", Настройки.ЗагружатьСПостОбработкой);
			//MDK Режим загрузки данных
			ПараметрыЗагрузки.Вставить("ПричинаЗагрузки", "");				
			ПараметрыЗагрузки.Вставить("ПараметрыМетаданного", ПараметрыМетаданного);
			ПараметрыЗагрузки.Вставить("Изменение", Изменение);
			ПараметрыЗагрузки.Вставить("ИмяИсточникаОригинальное", ИмяИсточника);
			ПараметрыЗагрузки.Вставить("ДополнительныеСвойства", Новый Структура);
			ПараметрыЗагрузки.Вставить("ЗаполнятьИсточникДанных", Истина);

			ПараметрыЗагрузки.Вставить("Изменения", Изменения);

			МиграцияДанныхИзВнешнихСистемДО21.ЗагрузкаДанных_ДО8_2_1(
			Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);

			Если СтандартнаяОбработка = Истина Тогда

				ЗаблокироватьДанныеДляРедактирования(Источник.Ссылка);
				СтандартноЗаписатьОдинЭлемент(Источник, Приемник, Порция, ПараметрыЗагрузки);
				РазблокироватьДанныеДляРедактирования(Источник.Ссылка);

			КонецЕсли;
			
			//mdk
			Если Настройки.ЗагружатьСПостОбработкой И Приемник <> Неопределено Тогда
				
				ЗагруженныйОбъект = Приемник.Ссылка;
				
				// запишем в очередь.
				Объект = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(ЗагруженныйОбъект));
				РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(
				ЗагруженныйОбъект, Причина, Объект);
				
			КонецЕсли;			
			//mdk

			ЗафиксироватьТранзакцию();
			// в коде могут быть не закрытые транзакции - нарушения стандарта						
			Пока ТранзакцияАктивна() Цикл

				ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Переход'"), 
				УровеньЖурналаРегистрации.Ошибка,
				,
				, 
				НСтр("ru = 'В коде есть не закрытые транзакции'"));

				ЗафиксироватьТранзакцию();
			КонецЦикла;

		Исключение

			ОтменитьТранзакцию();
			// в коде могут быть не закрытые транзакции - нарушения стандарта
			Пока ТранзакцияАктивна() Цикл

				ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Переход'"), 
				УровеньЖурналаРегистрации.Ошибка,
				,
				, 
				НСтр("ru = 'В коде есть не закрытые транзакции'"));

				Попытка
					ОтменитьТранзакцию();
				Исключение
				КонецПопытки;
			КонецЦикла;

			Причина = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			// пишем в очередь отложенной обработки. и продолжаем работу.

			Если ПараметрыЗагрузки.Изменение <> Неопределено 
				И ПараметрыЗагрузки.Изменение.Удаление Тогда // удаление не пишем в очередь постобработки
				ВызватьИсключение;
			КонецЕсли;	

			Источник.Ссылка = ИсточникССылкаПрежний;

			// запишем с Загрузка Истина и добавим в очередь 
			НачатьТранзакцию();
			Попытка

				Приемник = Неопределено;
				ЗагруженныйОбъект = Неопределено;

				СтандартнаяОбработка = Истина;

				ПараметрыЗагрузки = Новый Структура;
				ПараметрыЗагрузки.Вставить("ИмяОбъекта", ИмяОбъекта);
				ПараметрыЗагрузки.Вставить("Замены", Замены);
				ПараметрыЗагрузки.Вставить("Настройки", Настройки);
				ПараметрыЗагрузки.Вставить("Загрузка", Истина);
				ПараметрыЗагрузки.Вставить("ПричинаЗагрузки", Причина);
				ПараметрыЗагрузки.Вставить("ПараметрыМетаданного", ПараметрыМетаданного);
				ПараметрыЗагрузки.Вставить("Изменение", Неопределено);
				ПараметрыЗагрузки.Вставить("ИмяИсточникаОригинальное", ИмяИсточника);
				ПараметрыЗагрузки.Вставить("ДополнительныеСвойства", Новый Структура);
				ПараметрыЗагрузки.Вставить("ЗаполнятьИсточникДанных", Истина);

				ПараметрыЗагрузки.Вставить("Изменения", Изменения);

				МиграцияДанныхИзВнешнихСистемДО21.ЗагрузкаДанных_ДО8_2_1(
				Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);

				Если СтандартнаяОбработка = Истина Тогда

					ЗаблокироватьДанныеДляРедактирования(Источник.Ссылка);
					СтандартноЗаписатьОдинЭлемент(Источник, Приемник, Порция, ПараметрыЗагрузки);
					РазблокироватьДанныеДляРедактирования(Источник.Ссылка);

				КонецЕсли;	

				Если Приемник <> Неопределено Тогда
					ЗагруженныйОбъект = Приемник.Ссылка;

					// запишем в очередь.
					Объект = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(ЗагруженныйОбъект));
					РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(
					ЗагруженныйОбъект, Причина, Объект);
				КонецЕсли;

				ЗафиксироватьТранзакцию();
				// в коде могут быть не закрытые транзакции - нарушения стандарта						
				Пока ТранзакцияАктивна() Цикл

					ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Переход'"), 
					УровеньЖурналаРегистрации.Ошибка,
					,
					, 
					НСтр("ru = 'В коде есть не закрытые транзакции'"));

					ЗафиксироватьТранзакцию();
				КонецЦикла;

			Исключение

				Причина = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());

				ОтменитьТранзакцию();
				// в коде могут быть не закрытые транзакции - нарушения стандарта
				Пока ТранзакцияАктивна() Цикл

					ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Переход'"), 
					УровеньЖурналаРегистрации.Ошибка,
					,
					, 
					НСтр("ru = 'В коде есть не закрытые транзакции'"));

					Попытка
						ОтменитьТранзакцию();
					Исключение
					КонецПопытки;
				КонецЦикла;

				ВызватьИсключение; 

			КонецПопытки;			

		КонецПопытки;	

	КонецЦикла;

КонецПроцедуры

&Вместо("ЗагрузитьФайл")
Функция ЦППК_ЗагрузитьФайл(Файл, ЭтоИзменения, Настройки)

	ЗаписьЖурналаРегистрации(
	НСтр("ru = 'Переход ЗагрузитьФайл начало'"), 
	УровеньЖурналаРегистрации.Предупреждение,
	,
	, 
	Файл.ПолноеИмя);

	МоментНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Кортеж = СтрРазделить(Файл.Имя, "."); //Номер.Последовательность.Период.КодКласса.Имя.Расширение
	НомерСообщения = Число(Кортеж[0]);
	ИмяИсточника = КлассОбъектаИзЧисла(Кортеж[4]) + "." + Кортеж[5];

	Сообщение = Новый Структура("НомерСообщения,ИмяИсточника,ЭтоИзменения,ДатаЗагрузки,ПоследнийКлюч",
	НомерСообщения, ИмяИсточника, ЭтоИзменения, ТекущаяДатаСеанса());
	Сообщение.Вставить("Последовательность", Число(Кортеж[1]));
	Сообщение.Вставить("Период", ?(Кортеж[2]="0", Неопределено, Дата(Кортеж[2] + "01")));
	Сообщение.Вставить("Последнее", Кортеж[3]="1");
	Настройки.Вставить("Сообщение", Сообщение);
	Настройки.Вставить("ИмяФайла", Файл.Имя);

	Настройки.Вставить("Событие", НСтр("ru = 'Чтение'"));

	Чтение = Новый ЧтениеJSON();

	Попытка

		Чтение.ОткрытьФайл(Файл.ПолноеИмя);

	Исключение

		Если Файл.Существует() Или ЭтоИзменения Тогда
			ВызватьИсключение;
			//Иначе уже загружен параллельно.
		КонецЕсли;

		Настройки.Удалить("Сообщение");

		Возврат Ложь;
	КонецПопытки;

	Попытка

		Порция = СериализаторXDTO.ПрочитатьJSON(Чтение);

	Исключение

		Первопричина = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Чтение.Закрыть();

		//Проверяем удаленные типы значений.
		Пакет = ОбработатьТипыЗначений(Файл.ПолноеИмя, Настройки);

		Если Не Пакет.Модифицированность Тогда
			//Проблема не в типах.
			ВызватьИсключение Первопричина;
		КонецЕсли;

		Чтение = Новый ЧтениеJSON();
		Чтение.УстановитьСтроку(Пакет.Тело);
		Порция = СериализаторXDTO.ПрочитатьJSON(Чтение);
		Пакет.Тело = Неопределено;

	КонецПопытки;

	Чтение.Закрыть();

	Настройки.Событие = НСтр("ru = 'ПередЗагрузкой'");

	СтандартнаяОбработка = Истина;
	Если Пакет = Неопределено Тогда
		Замены = НоваяТаблицаЗамены();
	Иначе
		Замены = Пакет.Замены;
		Пакет.Очистить();
	КонецЕсли;

	ИмяОбъекта = Настройки.Переименования.Получить(ИмяИсточника);	
	
	Если ИмяОбъекта = Неопределено Тогда
		ИмяОбъекта = ИмяИсточника;
	ИначеЕсли ИмяОбъекта = Null Тогда
		//Больше не нужен.
		Журналировать(НСтр("ru = 'Загрузка'"), НСтр("ru = 'Пропущен'"),, ИмяИсточника, НомерСообщения,, Истина);
		Сообщение.Очистить();
		Настройки.Удалить("Сообщение");
		Возврат Истина;
	КонецЕсли;
	
	//MDK + многих констант нет в новой базе, чтобы не ловить исключения
	Если СтрНайти(ИмяОбъекта, "Константа.") > 0 Тогда
		Если Метаданные.НайтиПоПолномуИмени(ИмяОбъекта) = Неопределено Тогда
			//Константы нет
			Журналировать(НСтр("ru = 'Загрузка'"), НСтр("ru = 'Пропущен'"),, ИмяИсточника, НомерСообщения,, Истина);
			Сообщение.Очистить();
			Настройки.Удалить("Сообщение");
			Возврат Истина;
		КонецЕсли;
	ИначеЕсли ИмяОбъекта = "РегистрСведений.ФайлыВРабочемКаталогеКомпьютера" Тогда
		Порция.Колонки.Добавить("Идентификатор");
	ИначеЕсли ИмяОбъекта = "РегистрСведений.РабочиеКаталогиФайловКомпьютера" Тогда
		Порция.Колонки.Добавить("Идентификатор");		
	КонецЕсли;
	//MDK -

	Если Порция.Колонки.Найти("_Отказ") = Неопределено Тогда 
		Порция.Колонки.Добавить("_Отказ", Новый ОписаниеТипов("Булево"));
	КонецЕсли;	  

	Если СтандартнаяОбработка
		И Настройки.УдаленныеОбъекты.Получить(ИмяИсточника) = Неопределено Тогда

		Настройки.Событие = НСтр("ru = 'Загрузка'");

		Метаданное = Метаданные.НайтиПоПолномуИмени(ИмяОбъекта);

		Если Метаданное = Неопределено Тогда

			Причина = НСтр("ru = 'Объект отсутствует в новой конфигурации'") + ": " + ИмяОбъекта;
			ВызватьИсключение Причина;

		КонецЕсли;

		Если ЭтоСсылочныйОбъект(Метаданное) Тогда
			//Конвертируем ссылку из ИД в прикладной тип.
			Менеджер = Новый(СтрЗаменить(Метаданное.ПолноеИмя(), ".", "Менеджер."));
			ЕстьРодитель = Порция.Колонки.Найти("Родитель") <> Неопределено;
			Для Каждого Источник Из Порция Цикл
				Источник.Ссылка = Менеджер.ПолучитьСсылку(Источник.Ссылка);
				Если ЕстьРодитель И ЗначениеЗаполнено(Источник.Родитель) Тогда
					Источник.Родитель = Менеджер.ПолучитьСсылку(Источник.Родитель);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

		Попытка

			Если Метаданное <> Неопределено Тогда
				ЗаменитьЗначения(Метаданное, Порция, Замены, Настройки);
			КонецЕсли;

			Если Порция.Количество() Тогда
				ЗагрузитьПорцию(Метаданное, Порция, Замены, Настройки, ИмяОбъекта, ИмяИсточника);
			КонецЕсли;

			Настройки.Событие = НСтр("ru = 'ПослеЗагрузки'");

		Исключение

			ВызватьИсключение;

		КонецПопытки;

	КонецЕсли;	

	Настройки.Событие = НСтр("ru = 'ПослеЗагрузки'");

	//ЛогированиеПоОбъектам(ИмяИсточника);

	Набор = РегистрыСведений.МиграцияДанныхИзВнешнихСистемЖурнал.СоздатьНаборЗаписей();
	Запись = Набор.Добавить();
	Запись.Период = ТекущаяДатаСеанса();
	Запись.Момент = ТекущаяУниверсальнаяДатаВМиллисекундах();
	Запись.Сеанс = НомерСоединенияИнформационнойБазы();
	Запись.Идентификатор = Новый УникальныйИдентификатор();
	Запись.Изменения = Сообщение.ЭтоИзменения;
	Запись.Принято = Истина;
	Запись.Последнее = Сообщение.Последнее;
	Запись.Событие = СобытиеЗагрузка();
	Запись.НомерСообщения = НомерСообщения;

	Запись.Описание = ИмяОбъекта;
	Если Порция.Количество() = 1 Тогда
		Попытка
			Если Порция.Колонки.Найти("Ссылка") <> Неопределено 
				И ЗначениеЗаполнено(Порция[0].Ссылка) Тогда
				НавСсылка = ПолучитьНавигационнуюСсылку(Порция[0].Ссылка);
				Запись.Описание = Запись.Описание + Символы.ПС + НавСсылка;
			КонецЕсли;
		Исключение
		КонецПопытки;	
	КонецЕсли;	 

	Запись.Источник = ИмяИсточника;
	Запись.Количество = Порция.Количество();
	Запись.Продолжительность = (ТекущаяУниверсальнаяДатаВМиллисекундах() - МоментНачала) / 1000;
	Запись.Поток = Настройки.Поток;
	Запись.Последовательность = Сообщение.Последовательность;
	Запись.ГраницаПериода = Сообщение.Период;
	ЗаписатьСлужебныеДанные(Набор, Ложь);

	//ЛогированиеПоОбъектам(ИмяИсточника);

	Набор.Очистить(); Набор = Неопределено;

	Порция.Очистить();
	Замены.Очистить();
	Кортеж.Очистить();
	Сообщение.Очистить();
	Настройки.Удалить("Сообщение");

	Возврат Истина;

КонецФункции

&Вместо("ЗагрузитьПорциюРегистры")
Процедура ЦППК_ЗагрузитьПорциюРегистры(Метаданное, Порция, Замены, Настройки, ИмяОбъекта, ИмяИсточника, ЕстьУдаление)

	Менеджер = Новый(СтрЗаменить(Метаданное.ПолноеИмя(), ".", "Менеджер."));
	Приемник = Менеджер.СоздатьНаборЗаписей();

	ТипКлюча = ОтметкиВремени.ТипКлючаОбъекта(Метаданное);
	ИОМССылка = ИОМ(Метаданное.ПолноеИмя(), Настройки.ИОМ);
	КлючевоеПоле = ОтметкиВремени.КлючевоеПолеИсточника(ИОМССылка, ТипКлюча);
	Если КлючевоеПоле = "-" Тогда
		Возврат; // не загружаем. с диска удаляем.
	КонецЕсли;	

	Причина = "";
	Изменение = Неопределено;

	ПараметрыМетаданного = Новый Структура(
	"Метаданное, Менеджер, ИмяОбъектаДляКешаМетаданных, ЕстьУдаление", 
	Метаданное, Менеджер, ИмяОбъекта, ЕстьУдаление);

	ПоляИсключения = Новый Соответствие();
	Для Каждого Реквизит Из Метаданные.ОбщиеРеквизиты Цикл
		Если Реквизит.РазделениеДанных = Метаданные.СвойстваОбъектов.РазделениеДанныхОбщегоРеквизита.Разделять Тогда
			ПоляИсключения.Вставить(Реквизит.Имя, 1);
		КонецЕсли;

		Поле = Реквизит.Состав.Найти(Метаданное);
		Если Поле = Неопределено
			Или Поле.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.НеИспользовать
			Или (Поле.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Авто 
			И Реквизит.АвтоИспользование = Метаданные.СвойстваОбъектов.АвтоИспользованиеОбщегоРеквизита.НеИспользовать) Тогда
			ПоляИсключения.Вставить(Реквизит.Имя, 1);
		КонецЕсли;

	КонецЦикла;	

	ПараметрыМетаданного.Вставить("ПоляИсключения", ПоляИсключения);	
	Настройки.Вставить("ПоляИсключения", ПоляИсключения);

	Если КлючевоеПоле = "ОтметкиВремениИдентификаторНабораЗаписей"
		Или КлючевоеПоле = "НомерСтроки" Тогда
		//Независимый регистр.
		// тут неважно, как обход делать. Можно и по Порция. В Изменения будет столько же элементов.

		Изменения = Новый ТаблицаЗначений;

		НачатьТранзакцию();
		Попытка
			Изменения = ОтметкиВремени.ПроверитьИзменения(Порция, Метаданное, Настройки.УзелИсточник);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			Причина = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			Изменения = Новый ТаблицаЗначений;
		КонецПопытки;		

		НомерСтроки = 0;
		Для Каждого Источник Из Порция Цикл
			
			//MDK
			Если Метаданное = Метаданные.РегистрыСведений.РабочиеГруппы Тогда
				ЗаписьРГ = РегистрыСведений.РабочиеГруппы.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(ЗаписьРГ, Источник);
				ЗаписьРГ.Прочитать();
				Если ЗаписьРГ.Выбран() Тогда
					НомерСтроки = НомерСтроки + 1;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			//MDK

			НачатьТранзакцию();
			Попытка

				СтандартнаяОбработка = Истина;

				ПараметрыЗагрузки = Новый Структура;
				ПараметрыЗагрузки.Вставить("ИмяОбъекта", ИмяОбъекта);
				ПараметрыЗагрузки.Вставить("Замены", Замены);
				ПараметрыЗагрузки.Вставить("Настройки", Настройки);
				ПараметрыЗагрузки.Вставить("Загрузка", Настройки.ЗагружатьСПостОбработкой);
				ПараметрыЗагрузки.Вставить("ПричинаЗагрузки", "");
				ПараметрыЗагрузки.Вставить("ПараметрыМетаданного", ПараметрыМетаданного);
				ПараметрыЗагрузки.Вставить("Изменение", Неопределено);
				ПараметрыЗагрузки.Вставить("ИмяИсточникаОригинальное", ИмяИсточника);
				ПараметрыЗагрузки.Вставить("ДополнительныеСвойства", Новый Структура);
				ПараметрыЗагрузки.Вставить("КлючевоеПоле", КлючевоеПоле);
				ПараметрыЗагрузки.Вставить("ЕстьУдаление", ЕстьУдаление);
				ПараметрыЗагрузки.Вставить("Изменения", Изменения);
				ПараметрыЗагрузки.Вставить("НомерСтроки", НомерСтроки);
				ПараметрыЗагрузки.Вставить("ЗаполнятьИсточникДанных", Истина);

				МиграцияДанныхИзВнешнихСистемДО21.ЗагрузкаДанных_ДО8_2_1(
				Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);

				Если СтандартнаяОбработка = Истина Тогда

					ЗаписатьНезависимыйРегистр(
					Порция, Источник, Приемник, ПараметрыЗагрузки);
				КонецЕсли;		

				ЗафиксироватьТранзакцию();
				Пока ТранзакцияАктивна() Цикл

					ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Переход'"), 
					УровеньЖурналаРегистрации.Ошибка,
					,
					, 
					НСтр("ru = 'В коде есть не закрытые транзакции'"));

					ЗафиксироватьТранзакцию();
				КонецЦикла;

				НомерСтроки = НомерСтроки + 1;

			Исключение

				ОтменитьТранзакцию();
				Пока ТранзакцияАктивна() Цикл

					ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Переход'"), 
					УровеньЖурналаРегистрации.Ошибка,
					,
					, 
					НСтр("ru = 'В коде есть не закрытые транзакции'"));

					Попытка
						ОтменитьТранзакцию();
					Исключение
					КонецПопытки;
				КонецЦикла;

				// тут пытаемся записать с Загрузка Истина и пишем в очередь пост обработки
				Приемник.Очистить();

				Причина = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				// пишем в очередь отложенной обработки. и продолжаем работу.

				Если ПараметрыЗагрузки.Изменение <> Неопределено 
					И ПараметрыЗагрузки.Изменение.Удаление Тогда // удаление не пишем в очередь постобработки
					ВызватьИсключение;
				КонецЕсли;	

				НачатьТранзакцию();
				Попытка

					СтандартнаяОбработка = Истина;
					ПараметрыЗагрузки = Новый Структура;
					ПараметрыЗагрузки.Вставить("ИмяОбъекта", ИмяОбъекта);
					ПараметрыЗагрузки.Вставить("Замены", Замены);
					ПараметрыЗагрузки.Вставить("Настройки", Настройки);
					ПараметрыЗагрузки.Вставить("Загрузка", Истина);
					ПараметрыЗагрузки.Вставить("ПричинаЗагрузки", Причина);
					ПараметрыЗагрузки.Вставить("ПараметрыМетаданного", ПараметрыМетаданного);
					ПараметрыЗагрузки.Вставить("Изменение", Неопределено);
					ПараметрыЗагрузки.Вставить("ИмяИсточникаОригинальное", ИмяИсточника);
					ПараметрыЗагрузки.Вставить("ДополнительныеСвойства", Новый Структура);
					ПараметрыЗагрузки.Вставить("КлючевоеПоле", КлючевоеПоле);
					ПараметрыЗагрузки.Вставить("ЕстьУдаление", ЕстьУдаление);
					ПараметрыЗагрузки.Вставить("Изменения", Изменения);
					ПараметрыЗагрузки.Вставить("НомерСтроки", НомерСтроки);
					ПараметрыЗагрузки.Вставить("ЗаполнятьИсточникДанных", Истина);

					МиграцияДанныхИзВнешнихСистемДО21.ЗагрузкаДанных_ДО8_2_1(
					Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);

					Если СтандартнаяОбработка = Истина Тогда

						ЗаписатьНезависимыйРегистр(Порция, Источник, Приемник, ПараметрыЗагрузки);

					КонецЕсли;		

					ЗафиксироватьТранзакцию();
					Пока ТранзакцияАктивна() Цикл

						ЗаписьЖурналаРегистрации(
						НСтр("ru = 'Переход'"), 
						УровеньЖурналаРегистрации.Ошибка,
						,
						, 
						НСтр("ru = 'В коде есть не закрытые транзакции'"));

						ЗафиксироватьТранзакцию();
					КонецЦикла;

					НомерСтроки = НомерСтроки + 1;

				Исключение

					ОтменитьТранзакцию();
					Пока ТранзакцияАктивна() Цикл

						ЗаписьЖурналаРегистрации(
						НСтр("ru = 'Переход'"), 
						УровеньЖурналаРегистрации.Ошибка,
						,
						, 
						НСтр("ru = 'В коде есть не закрытые транзакции'"));

						Попытка
							ОтменитьТранзакцию();
						Исключение
						КонецПопытки;

					КонецЦикла;

					ВызватьИсключение; 

				КонецПопытки;	

				Если ПараметрыЗагрузки.Свойство("Изменение")
					И ПараметрыЗагрузки.Изменение <> Неопределено Тогда

					ЗначенияКлюча = Новый ХранилищеЗначения(Приемник.Отбор, Новый СжатиеДанных(9));
					ЗагруженныйОбъект = Справочники.ИдентификаторыОбъектовМетаданных.ПолучитьСсылку(ПараметрыЗагрузки.Изменение.Ключ);

					// запишем в очередь.
					РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(
					ЗагруженныйОбъект, Причина, 
					ИОМССылка, ЗначенияКлюча);

				КонецЕсли;

			КонецПопытки;

		КонецЦикла;

	ИначеЕсли КлючевоеПоле = "*" Тогда
		//Регистр без измерений., регистратора и периода
		// Это регистр без измерений (с 1 записью).
		// Строка изменений будет всегда одна.
		// А вот строк в порции может быть несколько если в 2.1. регистр с измерениями (и там несколько записей).

		НачатьТранзакцию();
		Попытка

			СтандартнаяОбработка = Истина;
			Для Каждого Источник Из Порция Цикл

				ПараметрыЗагрузки = Новый Структура;
				ПараметрыЗагрузки.Вставить("ИмяОбъекта", ИмяОбъекта);
				ПараметрыЗагрузки.Вставить("Замены", Замены);
				ПараметрыЗагрузки.Вставить("Настройки", Настройки);
				ПараметрыЗагрузки.Вставить("Загрузка", Ложь);
				ПараметрыЗагрузки.Вставить("ПричинаЗагрузки", Причина);						
				ПараметрыЗагрузки.Вставить("ПараметрыМетаданного", ПараметрыМетаданного);
				ПараметрыЗагрузки.Вставить("Изменение", Изменение);
				ПараметрыЗагрузки.Вставить("Изменения", Изменения);
				ПараметрыЗагрузки.Вставить("ИмяИсточникаОригинальное", ИмяИсточника);
				ПараметрыЗагрузки.Вставить("ДополнительныеСвойства", Новый Структура);
				ПараметрыЗагрузки.Вставить("ЗаполнятьИсточникДанных", Истина);

				Настройки.Вставить("ИмяОбъекта", ИмяОбъекта);

				МиграцияДанныхИзВнешнихСистемДО21.ЗагрузкаДанных_ДО8_2_1(
				Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
			КонецЦикла;	

			Изменение = Изменения[0];
			Источник = Порция[Порция.Количество()-1];
			Если Изменение.Коллизия > 0 Тогда
				Источник._Отказ = Истина;
				ЖурналироватьКоллизию(Изменение, Источник, Настройки, Метаданное);
				// Это регистр без измерений (с 1 записью). - не отдаем ПоляИсключения

			Иначе
				Изменение.НоваяОтметка = Источник._Отметка;

				ДополнительныеСвойства = Новый Структура;				
				ДополнительныеСвойства.Вставить("ОтметкаВремени", Изменение.НоваяОтметка);

				Если ЕстьУдаление И Источник._Удаление = Истина Тогда

					ЗаписатьЗагруженныеДанные(Приемник, Настройки, , ДополнительныеСвойства);
					Изменение.Удаление = Истина;
				Иначе
					Запись = Приемник.Добавить();
					ЗаполнитьЗначенияСвойств(Запись, Источник);

					ЗаписатьЗагруженныеДанные(Приемник, Настройки, , ДополнительныеСвойства);
					Приемник.Очистить();
				КонецЕсли;

			КонецЕсли;

			ЗафиксироватьТранзакцию();	
			Пока ТранзакцияАктивна() Цикл

				ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Переход'"), 
				УровеньЖурналаРегистрации.Ошибка,
				,
				, 
				НСтр("ru = 'В коде есть не закрытые транзакции'"));

				ЗафиксироватьТранзакцию();
			КонецЦикла;

		Исключение

			ОтменитьТранзакцию();
			Пока ТранзакцияАктивна() Цикл

				ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Переход'"), 
				УровеньЖурналаРегистрации.Ошибка,
				,
				, 
				НСтр("ru = 'В коде есть не закрытые транзакции'"));

				Попытка
					ОтменитьТранзакцию();
				Исключение
				КонецПопытки;
			КонецЦикла;

			ВызватьИсключение; 

		КонецПопытки;	

	Иначе // тут и регистратор, и ведущее

		ИзмененияВсе = Новый ТаблицаЗначений;

		НачатьТранзакцию();
		Попытка
			ИзмененияВсе = ОтметкиВремени.ПроверитьИзменения(Порция, Метаданное, Настройки.УзелИсточник);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			Причина = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ИзмененияВсе = Новый ТаблицаЗначений;
		КонецПопытки;		

		Настройки.Вставить("ИмяОбъекта", ИмяОбъекта);
		ВсеРегистраторы = Новый Соответствие; // ключ - ссылка, значение - 1

		Для Каждого Источник Из Порция Цикл
			Регистратор = Источник[КлючевоеПоле];
			Если ВсеРегистраторы.Получить(Регистратор) = Неопределено Тогда
				СтруктИсточника = Новый Структура;
				СтруктИсточника.Вставить("_Отметка", Источник._Отметка);
				СтруктИсточника.Вставить("Удаление", Ложь);
				Если МиграцияДанныхИзВнешнихСистемДО21.ЭтоУдалениеОбъекта(Источник) Тогда
					СтруктИсточника.Удаление = Истина;
				КонецЕсли;	

				ВсеРегистраторы[Регистратор] = СтруктИсточника;
			КонецЕсли;	
		КонецЦикла;	

		ТаблицаРегистраторов = Новый ТаблицаЗначений;
		ТаблицаРегистраторов.Колонки.Добавить("Регистратор");
		ТаблицаРегистраторов.Колонки.Добавить("Удаление", Новый ОписаниеТипов("Булево"));
		ТаблицаРегистраторов.Колонки.Добавить("_Отметка", Новый ОписаниеТипов("Число"));

		Для Каждого КлючИЗначение Из ВсеРегистраторы Цикл

			НовСтр = ТаблицаРегистраторов.Добавить();
			НовСтр.Регистратор = КлючИЗначение.Ключ;

			СтруктИсточника = КлючИЗначение.Значение;
			НовСтр._Отметка = СтруктИсточника._Отметка;
			НовСтр.Удаление = СтруктИсточника.Удаление;

		КонецЦикла;	

		ТаблицаРегистраторов.Сортировать("_Отметка, Удаление УБЫВ");

		ЕстьНепустыеРегистраторы = Ложь;
		Если ТаблицаРегистраторов.Количество() >= 2 Тогда      

			Для Каждого СтрокаТаблицы Из ТаблицаРегистраторов Цикл
				ОсновноеПоле = СтрокаТаблицы.Регистратор;
				Если ЗначениеЗаполнено(ОсновноеПоле) Тогда
					ЕстьНепустыеРегистраторы = Истина;
					Прервать;
				КонецЕсли;	      
			КонецЦикла;

		КонецЕсли;	

		Для Каждого СтрокаТаблицы Из ТаблицаРегистраторов Цикл

			ОсновноеПоле = СтрокаТаблицы.Регистратор; // например регистратор или единственное ссылочное измерение

			// если есть непустые  регистраторы - то пустые пропустим.
			Если Не ЗначениеЗаполнено(ОсновноеПоле) И ЕстьНепустыеРегистраторы Тогда
				Продолжить;
			КонецЕсли;	

			Отбор = Новый Структура(КлючевоеПоле);
			Отбор[КлючевоеПоле] = ОсновноеПоле;

			Если ТипЗнч(ОсновноеПоле) = Тип("Строка") Тогда

				Если КлючевоеПоле = "Регистратор" Тогда
					Продолжить;
				КонецЕсли;

				Если Метаданное.Измерения.Количество() = 1 Тогда
					Измерение0 = Метаданное.Измерения[0];
					Если Не Измерение0.Тип.СодержитТип(ТипЗнч(ОсновноеПоле)) Тогда
						Продолжить;
					КонецЕсли;	
				КонецЕсли;

			КонецЕсли;	

			МассивСтрок = Порция.НайтиСтроки(Отбор);

			НачатьТранзакцию();
			Попытка

				ПорцияОдинЭлемент = Порция.Скопировать(МассивСтрок);

				Если ИзмененияВсе.Количество() = Порция.Количество() Тогда

					ОтборПоИзменениям = Новый Структура("Ключ", ОсновноеПоле);
					Изменения = ИзмененияВсе.НайтиСтроки(ОтборПоИзменениям);

				Иначе

					Изменения = ОтметкиВремени.ПроверитьИзменения(ПорцияОдинЭлемент, Метаданное, Настройки.УзелИсточник,, КлючевоеПоле);

				КонецЕсли;	

				Если Изменения.Количество() = 0 Тогда

					Изменения = ОтметкиВремени.ПроверитьИзменения(ПорцияОдинЭлемент, Метаданное, Настройки.УзелИсточник,, КлючевоеПоле);

					Если Изменения.Количество() = 0 Тогда
						Причина = НСтр("ru = 'Пустые Изменения'") + ": " + ИмяОбъекта;
						ВызватьИсключение Причина;
					КонецЕсли;

				КонецЕсли;	

				// в Изменения сейчас по идее только одна строка. Но оставим цикл.
				// и все это в функцию.
				Если Изменения.Количество() <> 0 Тогда
					Изменение = Изменения[0];
				КонецЕсли;	

				СтандартнаяОбработка = Истина;

				ПараметрыЗагрузки = Новый Структура;
				ПараметрыЗагрузки.Вставить("ИмяОбъекта", ИмяОбъекта);
				ПараметрыЗагрузки.Вставить("Замены", Замены);
				ПараметрыЗагрузки.Вставить("Настройки", Настройки);
				ПараметрыЗагрузки.Вставить("Загрузка", Ложь);
				ПараметрыЗагрузки.Вставить("ПричинаЗагрузки", Причина);
				ПараметрыЗагрузки.Вставить("ПараметрыМетаданного", ПараметрыМетаданного);
				ПараметрыЗагрузки.Вставить("Изменение", Изменение);
				ПараметрыЗагрузки.Вставить("Изменения", Изменения);
				ПараметрыЗагрузки.Вставить("ИмяИсточникаОригинальное", ИмяИсточника);
				ПараметрыЗагрузки.Вставить("ДополнительныеСвойства", Новый Структура);
				ПараметрыЗагрузки.Вставить("ЗаполнятьИсточникДанных", Истина);
				ПараметрыЗагрузки.Вставить("ЕстьУдаление", ЕстьУдаление);
				ПараметрыЗагрузки.Вставить("КлючевоеПоле", КлючевоеПоле);

				Для Каждого Источник Из ПорцияОдинЭлемент Цикл

					МиграцияДанныхИзВнешнихСистемДО21.ЗагрузкаДанных_ДО8_2_1(
					Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
				КонецЦикла;	

				Изменение = Неопределено;
				Загрузка = Ложь;

				Если СтандартнаяОбработка = Истина Тогда
					Если КлючевоеПоле = "Регистратор" Тогда
						ЗаписатьРегистрСРегистратором(Источник, Приемник, Порция, ПараметрыЗагрузки);
					Иначе
						ЗаписатьРегистрСВедущимИзмерением(Источник, Приемник, Порция, ПараметрыЗагрузки);
					КонецЕсли;			
				КонецЕсли;		

				ЗафиксироватьТранзакцию();
				Пока ТранзакцияАктивна() Цикл

					ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Переход'"), 
					УровеньЖурналаРегистрации.Ошибка,
					,
					, 
					НСтр("ru = 'В коде есть не закрытые транзакции'"));

					ЗафиксироватьТранзакцию();
				КонецЦикла;

			Исключение

				ОтменитьТранзакцию();
				Пока ТранзакцияАктивна() Цикл

					ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Переход'"), 
					УровеньЖурналаРегистрации.Ошибка,
					,
					, 
					НСтр("ru = 'В коде есть не закрытые транзакции'"));

					Попытка
						ОтменитьТранзакцию();
					Исключение
					КонецПопытки;
				КонецЦикла;

				// тут пытаемся записать с Загрузка Истина и пишем в очередь пост обработки
				Приемник.Очистить();

				Причина = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				// пишем в очередь отложенной обработки. и продолжаем работу.

				Если ПараметрыЗагрузки.Изменение <> Неопределено 
					И ПараметрыЗагрузки.Изменение.Удаление Тогда // удаление не пишем в очередь постобработки
					ВызватьИсключение;
				КонецЕсли;	

				НачатьТранзакцию();
				Попытка

					ПорцияОдинЭлемент = Порция.Скопировать(МассивСтрок);

					Если ИзмененияВсе.Количество() = 0 Тогда

						Изменения = ОтметкиВремени.ПроверитьИзменения(ПорцияОдинЭлемент, Метаданное, Настройки.УзелИсточник,, КлючевоеПоле);

					Иначе

						ОтборПоИзменениям = Новый Структура("Ключ", ОсновноеПоле);
						Изменения = ИзмененияВсе.НайтиСтроки(ОтборПоИзменениям);

					КонецЕсли;	

					// в Изменения сейчас по идее только одна строка. Но оставим цикл.
					// и все это в функцию.
					Если Изменения.Количество() <> 0 Тогда
						Изменение = Изменения[0];
					КонецЕсли;	

					СтандартнаяОбработка = Истина;
					Изменение = Неопределено;	
					Загрузка = Истина;

					ПараметрыЗагрузки = Новый Структура;
					ПараметрыЗагрузки.Вставить("ИмяОбъекта", ИмяОбъекта);
					ПараметрыЗагрузки.Вставить("Замены", Замены);
					ПараметрыЗагрузки.Вставить("Настройки", Настройки);
					ПараметрыЗагрузки.Вставить("Загрузка", Загрузка);
					ПараметрыЗагрузки.Вставить("ПричинаЗагрузки", Причина);
					ПараметрыЗагрузки.Вставить("ПараметрыМетаданного", ПараметрыМетаданного);
					ПараметрыЗагрузки.Вставить("Изменение", Изменение);
					ПараметрыЗагрузки.Вставить("Изменения", Изменения);
					ПараметрыЗагрузки.Вставить("ИмяИсточникаОригинальное", ИмяИсточника);
					ПараметрыЗагрузки.Вставить("ДополнительныеСвойства", Новый Структура);
					ПараметрыЗагрузки.Вставить("ЗаполнятьИсточникДанных", Истина);
					ПараметрыЗагрузки.Вставить("ЕстьУдаление", ЕстьУдаление);
					ПараметрыЗагрузки.Вставить("КлючевоеПоле", КлючевоеПоле);

					Для Каждого Источник Из ПорцияОдинЭлемент Цикл

						МиграцияДанныхИзВнешнихСистемДО21.ЗагрузкаДанных_ДО8_2_1(
						Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки);
					КонецЦикла;	

					Если СтандартнаяОбработка = Истина Тогда
						Если КлючевоеПоле = "Регистратор" Тогда
							ЗаписатьРегистрСРегистратором(Источник, Приемник, Порция, ПараметрыЗагрузки);
						Иначе
							ЗаписатьРегистрСВедущимИзмерением(Источник, Приемник, Порция, ПараметрыЗагрузки);
						КонецЕсли;			
					КонецЕсли;		

					ЗафиксироватьТранзакцию();
					Пока ТранзакцияАктивна() Цикл

						ЗаписьЖурналаРегистрации(
						НСтр("ru = 'Переход'"), 
						УровеньЖурналаРегистрации.Ошибка,
						,
						, 
						НСтр("ru = 'В коде есть не закрытые транзакции'"));

						ЗафиксироватьТранзакцию();
					КонецЦикла;

				Исключение

					ОтменитьТранзакцию();
					Пока ТранзакцияАктивна() Цикл

						ЗаписьЖурналаРегистрации(
						НСтр("ru = 'Переход'"), 
						УровеньЖурналаРегистрации.Ошибка,
						,
						, 
						НСтр("ru = 'В коде есть не закрытые транзакции'"));

						Попытка
							ОтменитьТранзакцию();
						Исключение
						КонецПопытки;
					КонецЦикла;

					ВызватьИсключение; 

				КонецПопытки;	

				ЗагруженныйОбъект = ОсновноеПоле;

				// запишем в очередь.
				РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(
				ЗагруженныйОбъект, Причина, 
				ИОМССылка);

			КонецПопытки;	


		КонецЦикла;	//цикл по ВсеРегистраторы

	КонецЕсли; // КлючевоеПоле

КонецПроцедуры

&Вместо("КэшНастроек")
Функция ЦППК_КэшНастроек(Текущие = Неопределено)

	Если Текущие = Неопределено Тогда
		Кэш = Новый Структура;
		Кэш.Вставить("Поток", 0);
		Кэш.Вставить("ИОМ", Новый Соответствие);
		Кэш.Вставить("Переименования", МиграцияДанныхИзВнешнихСистемДО21.ПереименованныеОбъекты());
		Кэш.Вставить("УдаленныеОбъекты", МиграцияДанныхИзВнешнихСистемДО21.УдаленныеОбъекты());
		Кэш.Вставить("УзелИсточник",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Подсистемы.НастройкаИАдминистрирование.Подсистемы.МиграцияДанныхИзВнешнихСистем));
	Иначе
		Кэш = Текущие;
	КонецЕсли;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	""Стадия"" КАК Имя,
	|	Т.Значение КАК Значение
	|ИЗ
	|	Константа.ПереходСтадия КАК Т
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Каталог"",
	|	Т.Значение
	|ИЗ
	|	Константа.ПереходКаталог КАК Т");
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		Кэш.Вставить(Выборка.Имя, Выборка.Значение);
	КонецЦикла;

	Кэш.Вставить("Загружать", Кэш.Стадия = 3);
	Кэш.Вставить("Слэш", ?(Найти(Кэш.Каталог, "/"), "/", "\"));
	Кэш.Вставить("КаталогВыгрузки", Кэш.Каталог + Кэш.Слэш);	
	Кэш.Вставить("КаталогИзменений", Кэш.Каталог + Кэш.Слэш + "0" + Кэш.Слэш);
	Кэш.Вставить("ЗагружатьСПостОбработкой", Константы.ЗагружатьСПостОбработкой.Получить());

	Возврат Кэш;

КонецФункции

&Вместо("Загрузка")
Процедура ЦППК_Загрузка(Поток = 0, Настройки = Неопределено)

	УстановитьПривилегированныйРежим(Истина);

	Если Настройки = Неопределено Тогда
		Настройки = КэшНастроек();
	КонецЕсли;

	Настройки.Поток = Поток;
	ТекДата = ТекущаяУниверсальнаяДата();
	ВремяОбновления = ТекДата + 60;
	ВремяПерерыва = ТекДата + 3600;
	ИДБлокировки = Новый УникальныйИдентификатор();
	КлючБлокировки = Новый Структура("Сеанс");

	Если Поток = 0 Тогда
		// Все в текущем сеансе.
		ЛимитЗаданий = 1;
		Порция = 100;
	ИначеЕсли ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		ЛимитЗаданий = 1;
		Порция = 100;
	Иначе
		ЛимитЗаданий = 8;
		СообщенийНаЗадание = 2;
		МетодЗадания = "МиграцияДанныхИзВнешнихСистемСервер.Загрузка";
		Порция = ЛимитЗаданий * СообщенийНаЗадание;
	КонецЕсли;

	Сообщения = ВыбратьСообщения(Настройки, Порция);
	Пока Сообщения.Количество() Цикл

		ПредПоследовательность = Неопределено;
		ПредПериод = Неопределено;

		Курсор = 0;
		Пока Курсор < Сообщения.Количество() Цикл
			Сообщение = Сообщения[Курсор];
			Курсор = Курсор + 1;

			Если ЛимитЗаданий > 1 Тогда

				Если Поток = 1
					И Сообщение.Последовательность <> 0
					И (ПредПоследовательность <> Сообщение.Последовательность
					Или ПредПериод <> Сообщение.Период) Тогда

					//Запускаем помощников. В рамках текущей последовательности.
					Партия = Сообщения.НайтиСтроки(Новый Структура("Последовательность,Период", Сообщение.Последовательность, Сообщение.Период));	
					Нужно = Окр(Партия.Количество() / СообщенийНаЗадание, 0);
					Партия.Очистить();
					Если Нужно > 1 Тогда
						Активные = ФоновыеЗадания.ПолучитьФоновыеЗадания(
						Новый Структура("ИмяМетода,Состояние", МетодЗадания, СостояниеФоновогоЗадания.Активно));
						Нужно = Мин(Нужно - Активные.Количество() - 1, ЛимитЗаданий);

						Если Нужно > 0 Тогда
							ПараметрыЗадания = Новый Массив(1);
							Н = 1;
							Пока Н < ЛимитЗаданий И Нужно > 0 Цикл
								Н = Н + 1;
								ПараметрыЗадания[0] = Н;
								Для Каждого Задание Из Активные Цикл
									Если Число(Задание.Ключ) = Н Тогда
										ПараметрыЗадания[0] = 0;
										Прервать;
									КонецЕсли;
								КонецЦикла;
								Если ПараметрыЗадания[0] = Н Тогда
									Нужно = Нужно - 1;
									ФоновыеЗадания.Выполнить(
									МетодЗадания,
									ПараметрыЗадания,
									Строка(Н),
									НСтр("ru = 'Переход. Загрузка '") + Н);
								КонецЕсли;
							КонецЦикла;							
						КонецЕсли;

						Активные.Очистить();
					КонецЕсли;

					ВыполнитьЗадания(Настройки);
				КонецЕсли;

				Если ПредПоследовательность <> Неопределено
					И Сообщение.Последовательность <> 0 Тогда
					// Проверяем полную загрузку предыдущей последовательности всеми заданиями.
					Если ПредПоследовательность <> Сообщение.Последовательность
						Или ПредПериод <> Сообщение.Период Тогда

						Остатки = ВыбратьСообщения(Настройки, 1);
						Если Остатки.Количество() = 0
							Или Сообщение.Номер = Остатки[0].Номер Тогда
						ИначеЕсли Сообщение.Последовательность > Остатки[0].Последовательность
							Или Сообщение.Период < Остатки[0].Период Тогда
							ОбщегоНазначенияБТС.Пауза(3); //Ждем загрузки всей предыдущей последовательности.
							Прервать;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				ПредПоследовательность = Сообщение.Последовательность;
				ПредПериод = Сообщение.Период;

				Попытка

					КлючБлокировки.Сеанс = Сообщение.Номер;
					ЗаблокироватьДанныеДляРедактирования(
					РегистрыСведений.МиграцияДанныхИзВнешнихСистемЖурнал.СоздатьКлючЗаписи(КлючБлокировки),,
					ИДБлокировки);

				Исключение

					Если Сообщение.Последовательность <> 0 Тогда
						// Для минимизации конкуренции пробуем перешагнуть к другому объекту метаданных в пределах последовательности.
						Шаг = Курсор;
						Выборка = Сообщения;
						Следующее = Сообщение;
						Окончание = СтрРазделить(Сообщение.Файл.Имя, ".");
						Пока Окончание.Количество() > 3 Цикл
							Окончание.Удалить(0);
						КонецЦикла;
						Окончание = СтрСоединить(Окончание, ".");
						Пока Истина Цикл

							Если Шаг >= Выборка.Количество() Тогда
								Выборка = ВыбратьСообщения(Настройки, Порция, Следующее.Номер);
								Если Выборка.Количество() = 0 Тогда
									Прервать;
								КонецЕсли;
								Шаг = 0;
							КонецЕсли;

							Следующее = Выборка[Шаг];
							Если Следующее.Последовательность <> Сообщение.Последовательность
								Или Следующее.Период <> Сообщение.Период Тогда
								Прервать;
							ИначеЕсли Не СтрЗаканчиваетсяНа(Следующее.Файл.Имя, Окончание) Тогда
								Курсор = Шаг;
								Если Сообщения <> Выборка Тогда
									Сообщения.Очистить();
									Сообщения = Выборка;
								КонецЕсли;								
								Прервать;
							КонецЕсли;

							Шаг = Шаг + 1;
						КонецЦикла;
					КонецЕсли;

					Продолжить;	
				КонецПопытки;

			КонецЕсли;

			Попытка
				ЗагрузитьСообщение(Сообщение.Файл, Настройки);

				Пока ТранзакцияАктивна() Цикл
					ЗафиксироватьТранзакцию();
				КонецЦикла;

			Исключение

				Причина = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());

				Пока ТранзакцияАктивна() Цикл
					Попытка
						ОтменитьТранзакцию();
					Исключение
					КонецПопытки;
				КонецЦикла;

				Если Настройки.Свойство("Сообщение") Тогда
					Журналировать(Настройки.Событие, Причина, Истина, Настройки.Сообщение.ИмяИсточника, Настройки.Сообщение.НомерСообщения, 
					Настройки.Сообщение.ПоследнийКлюч,,,Сообщение.Файл.ПолноеИмя);
					Настройки.Сообщение.Очистить(); Настройки.Удалить("Сообщение"); Настройки.Удалить("Событие");
				ИначеЕсли Настройки.Свойство("Событие") Тогда
					Журналировать(Настройки.Событие, Причина, Истина, Сообщение.Файл.Имя,,,,,Сообщение.Файл.ПолноеИмя);
					Настройки.Удалить("Событие");
				Иначе
					Журналировать(НСтр("ru = 'Загрузка'"), Причина, Истина, Сообщение.Файл.Имя,,,,,Сообщение.Файл.ПолноеИмя);
				КонецЕсли;

				Если Поток > 0
					И Курсор < Сообщения.Количество()
					И Сообщения[Курсор].Последовательность = Сообщение.Последовательность
					И Сообщения[Курсор].Период = Сообщение.Период Тогда
					// Переходим к следующему в пределах последовательности.
					Продолжить;
				КонецЕсли;

				РазблокироватьДанныеДляРедактирования(, ИДБлокировки);

				ВызватьИсключение Причина;

			КонецПопытки;
			
			//MDK
			//Поток 0 - загрузка в одном сеансе, вызов процедуры приводит к зацикливанию
			Если Поток = 1 Тогда
				ОтметкиВремени.РазобратьОчередь();
			КонецЕсли;	

			ТекДата = ТекущаяУниверсальнаяДата();

			Если ТекДата >= ВремяОбновления И Поток > 0 Тогда
				РазблокироватьДанныеДляРедактирования(, ИДБлокировки);
				Если ТекДата >= ВремяПерерыва Тогда
					Возврат;
				КонецЕсли;
				Настройки = КэшНастроек(Настройки);
				Если Не Настройки.Загружать Тогда
					Возврат;
				КонецЕсли;
				ОбновитьПовторноИспользуемыеЗначения();
				ВремяОбновления = ТекДата + 60;
			КонецЕсли;

		КонецЦикла;

		РазблокироватьДанныеДляРедактирования(, ИДБлокировки);

		Сообщения.Очистить();

		Сообщения = ВыбратьСообщения(Настройки, Порция);

		Если Поток > 1 И Сообщения.Количество() < Порция Тогда
			// Завершаем ненужного помощника. Начиная с последнего.
			Активные = ФоновыеЗадания.ПолучитьФоновыеЗадания(
			Новый Структура("ИмяМетода,Состояние", МетодЗадания, СостояниеФоновогоЗадания.Активно));
			Если Окр(Сообщения.Количество() / Активные.Количество(), 0) <  СообщенийНаЗадание Тогда
				Н = Поток;
				Для каждого Задание Из Активные Цикл
					Н = Макс(Число(Задание.Ключ), Н);			
				КонецЦикла;
				Если Поток = Н Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;
			Активные.Очистить();
		КонецЕсли;

	КонецЦикла;

	Если Поток <= 1 И Не ВыполнитьЗадания(Настройки) Тогда
		Возврат;
	КонецЕсли;

	Если Поток <= 1 И Настройки.Свойство("Финиш") Тогда
		// Выгрузка завершена.
		Константы.ПереходСтадия.Установить(4 + Число(Настройки.Финиш));
		Журналировать(НСтр("ru = 'Загружено'"));
		УстановитьИспользованиеЗадания(Ложь);
		УстановитьИспользованиеЗаданий(Истина);
	КонецЕсли;

КонецПроцедуры

&Вместо("ЭтоОбъектИзДругойСистемы")
Функция ЦППК_ЭтоОбъектИзДругойСистемы(ИсточникДанных)
	// Вставить содержимое метода.
	Возврат Ложь;
КонецФункции

&Вместо("ЗагрузитьПользователяИБ")
Функция ЦППК_ЗагрузитьПользователяИБ(Источник, Владелец, Настройки)

	Если Не ЗначениеЗаполнено(Источник._ДанныеПользователяИБ) Тогда

		Возврат Владелец.ИдентификаторПользователяИБ;
	КонецЕсли;

	Данные = Источник._ДанныеПользователяИБ.Получить();

	Если ЗначениеЗаполнено(Владелец.ИдентификаторПользователяИБ) Тогда
		Приемник = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Владелец.ИдентификаторПользователяИБ);	
	КонецЕсли;
	Если Приемник = Неопределено Тогда
		Приемник = ПользователиИнформационнойБазы.НайтиПоИмени(Данные.Имя);
	КонецЕсли;
	Если Приемник = Неопределено Тогда
		Приемник = ПользователиИнформационнойБазы.СоздатьПользователя();
	Иначе

		// Отнимаем у других пользователей.
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Т.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Пользователи КАК Т
		|ГДЕ
		|	Т.ИдентификаторПользователяИБ = &ИД
		|	И Т.Ссылка <> &Ссылка");

		Запрос.УстановитьПараметр("ИД", Приемник.УникальныйИдентификатор);
		Запрос.УстановитьПараметр("Ссылка", Владелец.Ссылка);

		Если ТипЗнч(Владелец) <> Тип("СправочникОбъект.Пользователи") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.Пользователи", Владелец.Метаданные().ПолноеИмя());
		КонецЕсли;

		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			О = Выборка.Ссылка.ПолучитьОбъект();
			О.ИдентификаторПользователяИБ = Неопределено;

			ПараметрыЗаписи = СтруктураПараметровЗаписиЗагруженныхДанных();
			ПараметрыЗаписи.Загрузка = Истина;

			ЗаписатьЗагруженныеДанные(О, Настройки, ПараметрыЗаписи);
		КонецЦикла;

	КонецЕсли;

	ЗаполнитьЗначенияСвойств(Приемник, Данные,
	"АдресЭлектроннойПочты,
	|АутентификацияOpenID,
	|АутентификацияОС,
	|АутентификацияСтандартная,
	|ЗапрещеноИзменятьПароль,
	|Имя,
	|ПоказыватьВСпискеВыбора,
	|ПолноеИмя,
	|ПользовательОС,
	|СохраняемоеЗначениеПароля");
	
	Если НЕ Приемник.ЗапрещеноВосстанавливатьПароль И НЕ ЗначениеЗаполнено(Приемник.АдресЭлектроннойПочты) Тогда
		
		Если ТИПЗнч(Источник.КонтактнаяИнформация) = Тип("ТаблицаЗначений") Тогда
		СтрокиПочта = Источник.КонтактнаяИнформация.НайтиСтроки(Новый Структура("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты));
		Если СтрокиПочта.Количество() Тогда
			Приемник.АдресЭлектроннойПочты = СтрокиПочта[0].АдресЭП;
		Иначе
		  Приемник.АдресЭлектроннойПочты = СтрШаблон("%1@mail.ru", Источник.ИдентификаторПользователяИБ);
	  КонецЕсли;
  Иначе
	    Приемник.АдресЭлектроннойПочты = СтрШаблон("%1@mail.ru", Источник.ИдентификаторПользователяИБ);

	 КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(Данные.ОсновнойИнтерфейс) Тогда
		Приемник.ОсновнойИнтерфейс = Метаданные.НайтиПоПолномуИмени(Данные.ОсновнойИнтерфейс);
	КонецЕсли;

	Если ЗначениеЗаполнено(Данные.РежимЗапуска) Тогда
		Приемник.РежимЗапуска = РежимЗапускаКлиентскогоПриложения[Данные.РежимЗапуска];
	КонецЕсли;

	Если ЗначениеЗаполнено(Данные.Язык) Тогда
		Приемник.Язык = Метаданные.НайтиПоПолномуИмени(Данные.Язык);
	КонецЕсли;

	СтандартнаяОбработка = Истина;
	МиграцияДанныхИзВнешнихСистемДО21.ПриЗаполненииПользователяИБ(Приемник, Данные, Владелец, Источник.Владелец(), Настройки, СтандартнаяОбработка);

	Если СтандартнаяОбработка Тогда
		Приемник.Записать();
	КонецЕсли;

	Если ТипЗнч(Приемник) = Тип("ПользовательИнформационнойБазы") Тогда
		Возврат Приемник.УникальныйИдентификатор;
	КонецЕсли;

КонецФункции

&Вместо("РегламентнаяЗагрузка")
Процедура ЦППК_РегламентнаяЗагрузка()

	УстановитьПривилегированныйРежим(Истина);

	Настройки = КэшНастроек();

	//Если Не Настройки.Загружать Тогда
	//	УстановитьИспользованиеЗадания(Ложь);
	//	Возврат;
	//КонецЕсли;

	Отказ = Ложь;
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(
	Метаданные.РегламентныеЗадания.МиграцияДанныхИзВнешнихСистемЗагрузка, Отказ);

	Если Отказ = Истина Тогда
		Возврат;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Настройки.Каталог) Тогда
		ВызватьИсключение(НСтр("ru = 'Не заполнен каталог загрузки'"));		
	КонецЕсли;

	Загрузка(0, Настройки);

КонецПроцедуры


        /////////////Пост обработка для задачи
		
		//ДействияДляОбработки = СвязатьПроцессСДействиемОбработки(
		//	ОписаниеПроцессаДляДействияОбработки(Источник.БизнесПроцесс), 
		//	ПараметрыЗагрузки);
		//
		//Если ЗначениеЗаполнено(ДействияДляОбработки) Тогда
		//	ОбновитьДействия(ДействияДляОбработки, ПараметрыЗагрузки);
		//КонецЕсли

