
&ИзменениеИКонтроль("ДоступныеУведомления")
Функция ЦППК_ДоступныеУведомления(ДоступныеУведомления) Экспорт
	
	СтруктураДополнительнойНастройки = Новый ФиксированнаяСтруктура("Настройка, Представление");
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьБизнесПроцессыИЗадачи") Тогда
		
		// Перенаправление моей задачи
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.ПеренаправлениеМоейЗадачи;
		СтрокаУведомления.ОсновноеСобытие = Справочники.ВидыБизнесСобытий.ПеренаправлениеЗадачи;
		СтрокаУведомления.Представление = НСтр("ru = 'Задачи: перенаправление моей задачи'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Ложь;
		СтрокаУведомления.ДоступенСрок = Ложь;
		
		// Остановка и прерывание процессов.
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Справочники.ВидыБизнесСобытий.ПрерываниеБизнесПроцесса;
		СтрокаУведомления.Представление = НСтр("ru = 'Комплексные процессы: остановка, прерывание'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Ложь;
		СтрокаУведомления.ДоступенСрок = Ложь;
		
		// Выполнение задач по почте.
		СтрокаУведомления = ДоступныеУведомления.Найти(Справочники.ВидыБизнесСобытий.НоваяЗадача, "ВидСобытия");
		Если СтрокаУведомления <> Неопределено
			И ПолучитьФункциональнуюОпцию("ИспользоватьВыполнениеЗадачПоПочте") Тогда
			
			ДополнительнаяНастройка = Новый Структура(СтруктураДополнительнойНастройки);
			ДополнительнаяНастройка.Настройка = Перечисления.НастройкиУведомлений.ВыполнениеЗадачПоПочте;
			ДополнительнаяНастройка.Представление = НСтр("ru = 'Использовать выполнение задач по почте'");
			СтрокаУведомления.ДополнительныеНастройки.Добавить(ДополнительнаяНастройка);
		КонецЕсли;
		
		// Ознакомление с результатом завершения процесса.
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.ОзнакомлениеСПоложительнымРезультатомПроцесса;
		СтрокаУведомления.ОсновноеСобытие = Справочники.ВидыБизнесСобытий.ЗавершениеБизнесПроцесса;
		СтрокаУведомления.Представление = НСтр("ru = 'Процессы: успешное завершение'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Ложь;
		СтрокаУведомления.ДоступенСрок = Ложь;		
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОбсуждения") Тогда
		
		// Появление ответа в форуме.
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеСообщения;
		СтрокаУведомления.Представление = НСтр("ru = 'Форум: новый ответ на сообщение'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Ложь;
		СтрокаУведомления.ДоступенСрок = Ложь;
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОтсутствия") Тогда
		
		// Создание отсутствия.
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеОтсутствия;
		СтрокаУведомления.Представление = НСтр("ru = 'Отсутствия: создание нового'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Ложь;
		СтрокаУведомления.ДоступенСрок = Ложь;
		
		// Изменение отсутствия.
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Справочники.ВидыБизнесСобытий.ИзменениеОтсутствия;
		СтрокаУведомления.Представление = НСтр("ru = 'Отсутствия: изменение'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Ложь;
		СтрокаУведомления.ДоступенСрок = Ложь;
		
	КонецЕсли;
	
	// Уведомления программы.
	СтрокаУведомления = ДоступныеУведомления.Добавить();
	СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.УведомлениеПрограммы;
	СтрокаУведомления.Представление = НСтр("ru = 'Уведомления программы'");
	СтрокаУведомления.ДоступнаПодписка = Истина;
	СтрокаУведомления.ДоступнаЧастота = Ложь;
	СтрокаУведомления.ДоступенСрок = Ложь;
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда
		
		// Уведомление об отсутствии исполнителя проектной задачи.
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.НеУказанИсполнительПроектнойЗадачи;
		СтрокаУведомления.Представление = НСтр("ru = 'Проектные задачи: не указан исполнитель'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Истина;
		СтрокаУведомления.ДоступенСрок = Ложь;
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольОбъектов") Тогда
		
		// Уведомление о просроченном контроле.
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.ПросроченКонтроль;
		СтрокаУведомления.Представление = НСтр("ru = 'Контроль: срок вышел'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Истина;
		СтрокаУведомления.ДоступенСрок = Ложь;
		
		// Приближение контрольного срока.
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокКонтроля;
		СтрокаУведомления.Представление = НСтр("ru = 'Контроль: приближение срока'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Истина;
		СтрокаУведомления.ДоступенСрок = Истина;
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьМониторингПроцессов") Тогда
		
		Если ПравоДоступа("Просмотр", Метаданные.Справочники.ПоказателиПроцессов) Тогда
			
			// Уведомление об изменении значения показателя процессов.
			СтрокаУведомления = ДоступныеУведомления.Добавить();
			СтрокаУведомления.ВидСобытия = Справочники.ВидыБизнесСобытий.ИзменениеЗначенияПоказателяПроцесса;
			СтрокаУведомления.Представление = НСтр("ru = 'Процессы: изменение значения показателя'");
			СтрокаУведомления.ДоступнаПодписка = Истина;
			СтрокаУведомления.ДоступнаЧастота = Ложь;
			СтрокаУведомления.ДоступенСрок = Ложь;
			
			// Процентное изменение показателя.
			ДополнительнаяНастройка = Новый Структура(СтруктураДополнительнойНастройки);
			ДополнительнаяНастройка.Настройка = Перечисления.НастройкиУведомлений.ПроцентноеИзменение;
			ДополнительнаяНастройка.Представление = НСтр("ru = 'Процентное изменение показателя'");
			СтрокаУведомления.ДополнительныеНастройки.Добавить(ДополнительнаяНастройка);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьБронированиеПомещений") Тогда
		
		// Создание брони.
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеБрони;
		СтрокаУведомления.Представление = НСтр("ru = 'Брони: создание новой'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Ложь;
		СтрокаУведомления.ДоступенСрок = Ложь;
		
		// Изменение брони.
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Справочники.ВидыБизнесСобытий.ИзменениеБрони;
		СтрокаУведомления.Представление = НСтр("ru = 'Брони: изменение'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Ложь;
		СтрокаУведомления.ДоступенСрок = Ложь;
		
		// Отмена брони.
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Справочники.ВидыБизнесСобытий.ОтменаБрони;
		СтрокаУведомления.Представление = НСтр("ru = 'Брони: отмена'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Ложь;
		СтрокаУведомления.ДоступенСрок = Ложь;
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКонтрольныеТочки") Тогда
		
		// Уведомление о просроченном контроле.
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.ПросроченаКонтрольнаяТочка;
		СтрокаУведомления.Представление = НСтр("ru = 'Контрольные точки: срок вышел'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Истина;
		СтрокаУведомления.ДоступенСрок = Ложь;
		
		// Приближение контрольного срока.
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокКонтрольнойТочки;
		СтрокаУведомления.Представление = НСтр("ru = 'Контрольные точки: приближение срока'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Истина;
		СтрокаУведомления.ДоступенСрок = Истина;
		
		// Приближение контрольного срока.
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.ПросроченаОценкаКонтрольнойТочки;
		СтрокаУведомления.Представление = НСтр("ru = 'Контрольные точки: просрочена оценка'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Истина;
		СтрокаУведомления.ДоступенСрок = Ложь;
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭД") Тогда
		
		// Обмен по ЭДО выполнен успешно.
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.ОбменПоЭДОВыполненУспешно;
		СтрокаУведомления.ОсновноеСобытие = Справочники.ВидыБизнесСобытий.ИзменениеСостоянияДокументаПоЭДО;
		СтрокаУведомления.Представление = НСтр("ru = 'Обмен по ЭДО: успешное выполнение'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Ложь;
		СтрокаУведомления.ДоступенСрок = Ложь;
		
		// Документ аннулирован
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.ЭДОДокументАннулирован;
		СтрокаУведомления.Представление = НСтр("ru = 'Обмен по ЭДО: документ аннулирован'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Ложь;
		СтрокаУведомления.ДоступенСрок = Ложь;

		// Документ отклонен
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.ЭДОДокументОтклонен;
		СтрокаУведомления.Представление = НСтр("ru = 'Обмен по ЭДО: документ отклонен'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Ложь;
		СтрокаУведомления.ДоступенСрок = Ложь;

		// Документ Требуется подтверждение аннулирования
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.ЭДОТребуетсяПодтверждениеАннулирования;
		СтрокаУведомления.Представление = НСтр("ru = 'Обмен по ЭДО: требуется подтверждение аннулирования'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Ложь;
		СтрокаУведомления.ДоступенСрок = Ложь;
		
		// Документ исправлен
		СтрокаУведомления = ДоступныеУведомления.Добавить();
		СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.ЭДОДокументИсправлен;
		СтрокаУведомления.Представление = НСтр("ru = 'Обмен по ЭДО: новая версия отклоненного документа'");
		СтрокаУведомления.ДоступнаПодписка = Истина;
		СтрокаУведомления.ДоступнаЧастота = Ложь;
		СтрокаУведомления.ДоступенСрок = Ложь;
		
	КонецЕсли;

	// Ознакомление с результатом завершения действия обработки.
	СтрокаУведомления = ДоступныеУведомления.Добавить();
	СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.ОзнакомлениеСПоложительнымРезультатомДействияОбработки;
	СтрокаУведомления.Представление = НСтр("ru = 'Обработки: успешное завершение действия'");
	СтрокаУведомления.ДоступнаПодписка = Истина;
	СтрокаУведомления.ДоступнаЧастота = Ложь;
	СтрокаУведомления.ДоступенСрок = Ложь;

	// Обработки: на паузе
	СтрокаУведомления = ДоступныеУведомления.Добавить();
	СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.ОбработкиНаПаузе;
	СтрокаУведомления.Представление = НСтр("ru = 'Обработки: на паузе'");
	СтрокаУведомления.ДоступнаПодписка = Истина;
	СтрокаУведомления.ДоступнаЧастота = Ложь;
	СтрокаУведомления.ДоступенСрок = Истина;
	
#Вставка     

	// Окончание срока исполнения документов
	СтрокаУведомления = ДоступныеУведомления.Добавить();
	СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.ЗакончилсяСрокИсполненияДокумента;
	СтрокаУведомления.Представление = НСтр("ru = 'Документы: окончание срока исполнения'");
	СтрокаУведомления.ДоступнаПодписка = Истина;
	СтрокаУведомления.ДоступнаЧастота = Ложь;
	СтрокаУведомления.ДоступенСрок = Ложь;
	
	// Приближение окончания срока исполнения документов
	СтрокаУведомления = ДоступныеУведомления.Добавить();
	СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокИсполненияДокумента;
	СтрокаУведомления.Представление = НСтр("ru = 'Документы: приближение окончания срока исполнения'");
	СтрокаУведомления.ДоступнаПодписка = Истина;
	СтрокаУведомления.ДоступнаЧастота = Истина;
	СтрокаУведомления.ДоступенСрок = Истина;

	// Приближение окончания срока заключения договора с контрагентом
	СтрокаУведомления = ДоступныеУведомления.Добавить();
	СтрокаУведомления.ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокЗаключенияДоговораСКонтрагентов;
	СтрокаУведомления.Представление = НСтр("ru = 'Документы: приближение окончания срока заключения договора с контрагентом'");
	СтрокаУведомления.ДоступнаПодписка = Истина;
	СтрокаУведомления.ДоступнаЧастота = Истина;
	СтрокаУведомления.ДоступенСрок = Истина;

#КонецВставки	
	
КонецФункции

&После("ВидыСобытийДляГруппировкиПереопределяемый")
Процедура ЦППК_ВидыСобытийДляГруппировкиПереопределяемый(ВидыСобытий, ПолучательУведомления, СпособУведомления)
	
	Если СпособУведомления = Перечисления.СпособыУведомления.ПоПочте Тогда

		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ПодошелСрокЗаключенияДоговораСКонтрагентов);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ПодошелСрокИсполненияДокумента);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ЗакончилсяСрокИсполненияДокумента);

	ИначеЕсли СпособУведомления = Перечисления.СпособыУведомления.ПоSMS Тогда

		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ПодошелСрокЗаключенияДоговораСКонтрагентов);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ПодошелСрокИсполненияДокумента);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ЗакончилсяСрокИсполненияДокумента);

	ИначеЕсли СпособУведомления = Перечисления.СпособыУведомления.Окном Тогда

		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ПодошелСрокЗаключенияДоговораСКонтрагентов);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ПодошелСрокИсполненияДокумента);
		ВидыСобытий.Добавить(Перечисления.СобытияУведомлений.ЗакончилсяСрокИсполненияДокумента);

	КонецЕсли;
	
КонецПроцедуры

&ИзменениеИКонтроль("СформироватьУведомленияПоВидуБизнесСобытия")
Функция ЦППК_СформироватьУведомленияПоВидуБизнесСобытия(
	ПолучательУведомления,
	СпособУведомления,
	ВидСобытия,
	Уведомления,
	СформированныеУведомления) Экспорт
	
	Если СформироватьУведомленияПоВидуБизнесСобытияПереопределяемый(
		ПолучательУведомления,
		СпособУведомления,
		ВидСобытия,
		Уведомления,
		СформированныеУведомления) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Переопределено = Ложь;
	
	Отбор = Новый Структура();
	Отбор.Вставить("Пользователь", ПолучательУведомления);
	Отбор.Вставить("СпособУведомления", СпособУведомления);
	Отбор.Вставить("ВидСобытия", ВидСобытия);
	УведомленияПользователя = Уведомления.НайтиСтроки(Отбор);
	
	УведомленияПодписки = Новый Массив;
	ДополнительныеОписания = Новый Соответствие;
	Если ВидСобытия = Справочники.ВидыБизнесСобытий.СозданиеСообщения Тогда
		
		Переопределено = Истина;
		
		// Группировка уведомлений по предмету / теме / сообщению.
		ОбъектыПодписки = Новый Массив;
		
		// Подписка на предметы.
		Для Каждого Уведомление Из УведомленияПользователя Цикл
			
			Если ТипЗнч(Уведомление.ОбъектПодписки) = Тип("СправочникСсылка.СообщенияОбсуждений")
				Или ТипЗнч(Уведомление.ОбъектПодписки) = Тип("СправочникСсылка.ТемыОбсуждений") Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			РаботаСУведомлениями.ДобавитьУведомлениеВМассив(УведомленияПодписки, Уведомление);
			
			Если ОбъектыПодписки.Найти(Уведомление.ОбъектПодписки) = Неопределено Тогда
				
				ОбъектыПодписки.Добавить(Уведомление.ОбъектПодписки);
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Подписка на темы.
		Для Каждого Уведомление Из УведомленияПользователя Цикл
			
			Если ТипЗнч(Уведомление.ОбъектПодписки) <> Тип("СправочникСсылка.ТемыОбсуждений") Тогда
				Продолжить;
			КонецЕсли;
			
			РаботаСУведомлениями.ДобавитьУведомлениеВМассив(УведомленияПодписки, Уведомление);
			
			ПредметОбсуждения = Уведомление.ОбъектПодписки.Документ; 
			Если ОбъектыПодписки.Найти(ПредметОбсуждения) = Неопределено
				И ОбъектыПодписки.Найти(Уведомление.ОбъектПодписки) = Неопределено  Тогда
				
				ОбъектыПодписки.Добавить(Уведомление.ОбъектПодписки);
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Подписка на сообщения.
		Для Каждого Уведомление Из УведомленияПользователя Цикл
			
			Если ТипЗнч(Уведомление.ОбъектПодписки) <> Тип("СправочникСсылка.СообщенияОбсуждений") Тогда
				Продолжить;
			КонецЕсли;
			
			РаботаСУведомлениями.ДобавитьУведомлениеВМассив(УведомленияПодписки, Уведомление);
			
			ТемаОбсуждения = Уведомление.ОбъектПодписки.ВладелецСообщения;
			Уведомление.ОбъектПодписки = ТемаОбсуждения;
			ПредметОбсуждения = ТемаОбсуждения.Документ;
			Если ОбъектыПодписки.Найти(ТемаОбсуждения) = Неопределено
				И ОбъектыПодписки.Найти(ПредметОбсуждения) = Неопределено
				И ОбъектыПодписки.Найти(Уведомление.ОбъектПодписки) = Неопределено Тогда
				
				ОбъектыПодписки.Добавить(ТемаОбсуждения);
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Группировка по объектам подписки.
		Для Каждого ОбъектПодписки Из ОбъектыПодписки Цикл
			
			Отбор = Новый Структура();
			Отбор.Вставить("Пользователь", ПолучательУведомления);
			Отбор.Вставить("СпособУведомления", СпособУведомления);
			Отбор.Вставить("ВидСобытия", ВидСобытия);
			Отбор.Вставить("ОбъектПодписки", ОбъектПодписки);
			УведомленияПользователяПоВидуИПоОбъектуПодписки = Уведомления.НайтиСтроки(Отбор);
			
			ОбъектыУведомления = Новый Массив;
			Для Каждого Уведомление Из УведомленияПользователяПоВидуИПоОбъектуПодписки Цикл
				Если ОбъектыУведомления.Найти(Уведомление.Объект) = Неопределено Тогда
					ОбъектыУведомления.Добавить(Уведомление.Объект);
				КонецЕсли;
			КонецЦикла;
			
			Если ОбъектыУведомления.Количество() > 0 Тогда
				
				ДанныеУведомления = РаботаСУведомлениями.ДанныеУведомленияПоОбъектам(
					ОбъектПодписки,
					ВидСобытия,
					ОбъектыУведомления,
					ПолучательУведомления,
					СпособУведомления,
					ДополнительныеОписания);
				
				СформированноеУведомление = СформированныеУведомления.Добавить();
				ЗаполнитьЗначенияСвойств(СформированноеУведомление, ДанныеУведомления);
				СформированноеУведомление.Пользователь = ПолучательУведомления;
				СформированноеУведомление.СпособУведомления = СпособУведомления;
				СформированноеУведомление.Уведомления = УведомленияПодписки;
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ВидСобытия = Справочники.ВидыБизнесСобытий.ПрерываниеБизнесПроцесса 
		Или ВидСобытия = Справочники.ВидыБизнесСобытий.ВозобновлениеБизнесПроцесса
		Или ВидСобытия = Справочники.ВидыБизнесСобытий.ОстановкаБизнесПроцесса Тогда
		
		Переопределено = Истина;
		
		// Группировка по процессу.
		ОбъектыПодписки = Новый Массив;
		
		// Подписка на процессы.
		Для Каждого Уведомление Из УведомленияПользователя Цикл
			
			Если Не РаботаСУведомлениями.ЭтоПоддерживаемыйБизнесПроцесс(Уведомление.ОбъектПодписки) Тогда
				Продолжить;
			КонецЕсли;
			
			РаботаСУведомлениями.ДобавитьУведомлениеВМассив(УведомленияПодписки, Уведомление);
			Если ОбъектыПодписки.Найти(Уведомление.ОбъектПодписки) = Неопределено Тогда
				ОбъектыПодписки.Добавить(Уведомление.ОбъектПодписки);
			КонецЕсли;
			
		КонецЦикла;
		
		// Подписка на задачи.
		Для Каждого Уведомление Из УведомленияПользователя Цикл
			
			Если ТипЗнч(Уведомление.ОбъектПодписки) <> Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
				Продолжить;
			КонецЕсли;
			
			РаботаСУведомлениями.ДобавитьУведомлениеВМассив(УведомленияПодписки, Уведомление);
			Процесс = Уведомление.ОбъектПодписки.БизнесПроцесс;
			Если ОбъектыПодписки.Найти(Процесс) = Неопределено
				И ОбъектыПодписки.Найти(Уведомление.ОбъектПодписки) = Неопределено Тогда
				ОбъектыПодписки.Добавить(Уведомление.ОбъектПодписки);
			КонецЕсли;
			
		КонецЦикла;
		
		// Группировка по объектам подписки.
		Для Каждого ОбъектПодписки Из ОбъектыПодписки Цикл
			
			Отбор = Новый Структура();
			Отбор.Вставить("Пользователь", ПолучательУведомления);
			Отбор.Вставить("СпособУведомления", СпособУведомления);
			Отбор.Вставить("ВидСобытия", ВидСобытия);
			Отбор.Вставить("ОбъектПодписки", ОбъектПодписки);
			УведомленияПользователяПоВидуИПоОбъектуПодписки = Уведомления.НайтиСтроки(Отбор);
			
			ОбъектыУведомления = Новый Массив;
			Для Каждого Уведомление Из УведомленияПользователяПоВидуИПоОбъектуПодписки Цикл
				Если ОбъектыУведомления.Найти(Уведомление.Объект) = Неопределено Тогда
					ОбъектыУведомления.Добавить(Уведомление.Объект);
				КонецЕсли;
			КонецЦикла;
			
			Если ОбъектыУведомления.Количество() > 0 Тогда
				
				ДанныеУведомления = РаботаСУведомлениями.ДанныеУведомленияПоОбъектам(
					ОбъектПодписки,
					ВидСобытия,
					ОбъектыУведомления,
					ПолучательУведомления,
					СпособУведомления,
					ДополнительныеОписания);
				
				СформированноеУведомление = СформированныеУведомления.Добавить();
				ЗаполнитьЗначенияСвойств(СформированноеУведомление, ДанныеУведомления);
				СформированноеУведомление.Пользователь = ПолучательУведомления;
				СформированноеУведомление.СпособУведомления = СпособУведомления;
				СформированноеУведомление.Уведомления = УведомленияПодписки;
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокКонтроля
		Или ВидСобытия = Перечисления.СобытияУведомлений.ПросроченКонтроль
		Или ВидСобытия = Перечисления.СобытияУведомлений.УведомлениеПрограммы
		Или ВидСобытия = Перечисления.СобытияУведомлений.ПросроченаКонтрольнаяТочка
		Или ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокКонтрольнойТочки
		Или ВидСобытия = Перечисления.СобытияУведомлений.ПросроченаОценкаКонтрольнойТочки
		Или ВидСобытия = Перечисления.СобытияУведомлений.ОбменПоЭДОВыполненУспешно
		Или ВидСобытия = Перечисления.СобытияУведомлений.ОтклонениеДокументаКонтрагентомПоЭДО
		Или ВидСобытия = Перечисления.СобытияУведомлений.ЭДОДокументАннулирован
		Или ВидСобытия = Перечисления.СобытияУведомлений.ЭДОТребуетсяПодтверждениеАннулирования
		Или ВидСобытия = Перечисления.СобытияУведомлений.ЭДОДокументОтклонен
		Или ВидСобытия = Перечисления.СобытияУведомлений.ЭДОДокументИсправлен
		Или ВидСобытия = Перечисления.СобытияУведомлений.ОзнакомлениеСПоложительнымРезультатомПроцесса
		Или ВидСобытия = Перечисления.СобытияУведомлений.ОзнакомлениеСПоложительнымРезультатомДействияОбработки
#Вставка
		Или ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокЗаключенияДоговораСКонтрагентов
		Или ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокИсполненияДокумента
		Или ВидСобытия = Перечисления.СобытияУведомлений.ЗакончилсяСрокИсполненияДокумента
#КонецВставки
		Или ВидСобытия = Справочники.ВидыБизнесСобытий.ОшибкаВДокументахПереданныхВАрхив
		Или ВидСобытия = Справочники.ВидыБизнесСобытий.ПринятиеДокументовВАрхив Тогда
		
		Переопределено = Истина;
		
		// Группировка по событию.
		РаботаСУведомлениями.СформироватьУведомленияГруппировкаПоСобытию(
			ПолучательУведомления,
			СпособУведомления,
			ВидСобытия,
			Уведомления,
			СформированныеУведомления);
		
	КонецЕсли;
	
	Возврат Переопределено;
	
КонецФункции

&ИзменениеИКонтроль("СформироватьТемуУведомленияПоОбъектамУведомленияПереопределяемый")
Функция ЦППК_СформироватьТемуУведомленияПоОбъектамУведомленияПереопределяемый(ОбъектПодписки, ВидСобытия, ОбъектыУведомления, ПолучательУведомления, СпособУведомления, ДополнительныеОписания)

#Удаление
	ТемаУведомления = "";
#КонецУдаления
#Вставка
	ТемаУведомления = "";

	КодЯзыка = РаботаСУведомлениями.КодЯзыка(ПолучательУведомления);
	Если ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокИсполненияДокумента Тогда

		Если ОбъектыУведомления.Количество() = 1 Тогда
			ОбъектУведомления = ОбъектыУведомления[0];
			ТемаУведомления = СтрШаблон(
				НСтр("ru = 'Приближается окончание срока направления договора Контрагенту ""%1""'", КодЯзыка), Строка(
				ОбъектУведомления.Ссылка));
		Иначе
			КоличествоОбъектовУведомления = ОбъектыУведомления.Количество();
			ТемаУведомления = СтрШаблон(
				НСтр("ru = 'Приближается окончание срока направления договора Контрагенту (%1)'", КодЯзыка),
				КоличествоОбъектовУведомления);
		КонецЕсли;
		
	КонецЕсли; 
	
	Если ВидСобытия = Перечисления.СобытияУведомлений.ПодошелСрокЗаключенияДоговораСКонтрагентов Тогда

		Если ОбъектыУведомления.Количество() = 1 Тогда
			ОбъектУведомления = ОбъектыУведомления[0];
			ТемаУведомления = СтрШаблон(
				НСтр("ru = 'Подходит крайний срок заключения Договора с Контрагентом ""%1""'", КодЯзыка), Строка(
				ОбъектУведомления.Ссылка));
		Иначе
			КоличествоОбъектовУведомления = ОбъектыУведомления.Количество();
			ТемаУведомления = СтрШаблон(
				НСтр("ru = 'Подходит крайний срок заключения Договора с Контрагентом (%1)'", КодЯзыка),
				КоличествоОбъектовУведомления);
		КонецЕсли;
		
	КонецЕсли;
#КонецВставки

	Возврат ТемаУведомления;

КонецФункции
