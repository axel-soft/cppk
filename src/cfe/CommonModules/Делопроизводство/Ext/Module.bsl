
&ИзменениеИКонтроль("НомерУникален")
Функция ЦППК_НомерУникален(Объект, ЭтоВременныйНомер = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Нумератор = Нумерация.ПолучитьНумераторДокумента(Объект, Ложь);
	Если Не ЗначениеЗаполнено(Нумератор) Тогда // документ без номера
		Номер = ?(ЭтоВременныйНомер, Объект.ВременныйНомер, Объект.РегистрационныйНомер);
		Если НРег(Номер) = НСтр("ru = 'б\н'") Или НРег(Номер) = НСтр("ru = 'б/н'") Тогда 
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Нумератор) Тогда // автонумерация
		РеквизитыНумератора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Нумератор,
			"Периодичность,НезависимаяНумерацияПоСвязанномуДокументу,ТипСвязи,
			|НезависимаяНумерацияПоОрганизациям,НезависимаяНумерацияПоПроекту,
			|НезависимаяНумерацияПоВопросуДеятельности,НезависимаяНумерацияПоПодразделению,
			|НезависимаяНумерацияПоТематике,НезависимаяНумерацияПоГрифуДоступа");
	Иначе 									// ручная нумерация
		РеквизитыНумератора = Новый Структура;
		РеквизитыНумератора.Вставить("Периодичность", Перечисления.ПериодичностьНумераторов.Год);
		РеквизитыНумератора.Вставить("НезависимаяНумерацияПоСвязанномуДокументу", Ложь);
		РеквизитыНумератора.Вставить("ТипСвязи", Справочники.ТипыСвязей.ПустаяСсылка());
		РеквизитыНумератора.Вставить("НезависимаяНумерацияПоОрганизациям", Истина);
		РеквизитыНумератора.Вставить("НезависимаяНумерацияПоПроекту", Ложь);
		РеквизитыНумератора.Вставить("НезависимаяНумерацияПоВопросуДеятельности", Ложь);
		РеквизитыНумератора.Вставить("НезависимаяНумерацияПоПодразделению", Ложь);
		РеквизитыНумератора.Вставить("НезависимаяНумерацияПоТематике", Ложь);
		РеквизитыНумератора.Вставить("НезависимаяНумерацияПоГрифуДоступа", Ложь);
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Ссылка ИЗ Справочник.ДокументыПредприятия КАК Справочник ";
	
	Если РеквизитыНумератора.НезависимаяНумерацияПоСвязанномуДокументу Тогда
		Запрос.Текст = Запрос.Текст + 
		" ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязиОбъектов КАК СвязиОбъектов
		|	ПО СвязиОбъектов.Объект = Справочник.Ссылка И СвязиОбъектов.ТипСвязи = &ТипСвязи ";
		
		Запрос.УстановитьПараметр("ТипСвязи", РеквизитыНумератора.ТипСвязи);
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + 
	" ГДЕ
	|	%1 = &Номер
	|	И %2 МЕЖДУ &НачалоПериодаНумерации И &КонецПериодаНумерации
	|	И Ссылка <> &Ссылка 
	|	И (ВидДокумента = &ВидДокумента) ";
	Запрос.УстановитьПараметр("ВидДокумента", Объект.ВидДокумента);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") 
		И РеквизитыНумератора.НезависимаяНумерацияПоОрганизациям Тогда
		Запрос.Текст = Запрос.Текст + " И (Организация = &Организация) ";
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") И РеквизитыНумератора.НезависимаяНумерацияПоПроекту Тогда
		Запрос.Текст = Запрос.Текст + " И (Проект = &Проект) ";
		Запрос.УстановитьПараметр("Проект", Объект.Проект);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьВопросыДеятельности") 
		И РеквизитыНумератора.НезависимаяНумерацияПоВопросуДеятельности Тогда
		Запрос.Текст = Запрос.Текст + " И (ВопросДеятельности = &ВопросДеятельности) ";
		Запрос.УстановитьПараметр("ВопросДеятельности", Объект.ВопросДеятельности);
	КонецЕсли;
	
	Если РеквизитыНумератора.НезависимаяНумерацияПоПодразделению Тогда
		Запрос.Текст = Запрос.Текст + " И (Подразделение = &Подразделение) ";
		Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	КонецЕсли;
	
	Если РеквизитыНумератора.НезависимаяНумерацияПоСвязанномуДокументу Тогда
		СвязанныйДокумент = СвязиОбъектов.ПолучитьСвязанныйОбъект(Объект.Ссылка, РеквизитыНумератора.ТипСвязи);
		
		Если ЗначениеЗаполнено(СвязанныйДокумент) Тогда 
			Запрос.Текст = Запрос.Текст + " И (СвязанныйОбъект = &СвязанныйОбъект) ";
			Запрос.УстановитьПараметр("СвязанныйОбъект", СвязанныйДокумент);
		КонецЕсли;
	КонецЕсли;
	
#Вставка
	// { *Грошев (ТТС) [29.06.2020]
	Если Нумератор.ТТС_НезависимаяНумерацияПоНаправлению Тогда
		Направление = ТТС_ЖурналыТУВызовСервера.ПолучитьНаправление(Объект);
		Если ЗначениеЗаполнено(Направление) Тогда
			Запрос.Текст = Запрос.Текст + " И (ТТС_Направление = &ТТС_Направление) ";
			Запрос.УстановитьПараметр("ТТС_Направление", Направление);
		КонецЕсли;	
	КонецЕсли;
	// }
#КонецВставки 

	Если РеквизитыНумератора.НезависимаяНумерацияПоТематике Тогда
		Запрос.Текст = Запрос.Текст + " И (Тематика = &Тематика) ";
		Запрос.УстановитьПараметр("Тематика", Объект.Тематика);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьКОД") Тогда
		Запрос.Текст = Запрос.Текст + " И (УзелОбработки = &УзелКОД) ";
		Запрос.УстановитьПараметр("УзелКОД", КОДПовтИсп.ИдентификаторТекущегоУзла());
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьГрифыДоступа") И РеквизитыНумератора.НезависимаяНумерацияПоГрифуДоступа Тогда
		Запрос.Текст = Запрос.Текст + " И (ГрифДоступа = &ГрифДоступа) ";
		Запрос.УстановитьПараметр("ГрифДоступа", Объект.ГрифДоступа);
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(Нумератор) Тогда // ручная нумерация
		Если ДелопроизводствоКлиентСервер.ЭтоДокументПредприятия(Объект.Ссылка) Тогда 
			ВестиУчетПоКонтрагентам = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидДокумента,
				 "ВестиУчетПоКонтрагентам");
			Если ВестиУчетПоКонтрагентам Тогда 
				Запрос.Текст = Запрос.Текст + " И (Контрагент = &Контрагент) ";
				Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭтоВременныйНомер Тогда
		Запрос.Текст = СтрШаблон(Запрос.Текст, "ВременныйНомер", "ДатаСоздания");
	Иначе
		Запрос.Текст = СтрШаблон(Запрос.Текст, "РегистрационныйНомер", "ДатаРегистрации");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Номер", ?(ЭтоВременныйНомер, Объект.ВременныйНомер, Объект.РегистрационныйНомер));
	Запрос.УстановитьПараметр("НачалоПериодаНумерации", 
		Нумерация.НачалоПериодаНумерации(РеквизитыНумератора.Периодичность, ?(ЭтоВременныйНомер, Объект.ДатаСоздания, Объект.ДатаРегистрации)));
	Запрос.УстановитьПараметр("КонецПериодаНумерации", 
		Нумерация.КонецПериодаНумерации(РеквизитыНумератора.Периодичность, ?(ЭтоВременныйНомер, Объект.ДатаСоздания, Объект.ДатаРегистрации)));
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции	

&ИзменениеИКонтроль("ПолучитьИменаПолейИКомандДляНастройкиДоступности")
Функция ЦППК_ПолучитьИменаПолейИКомандДляНастройкиДоступности()

	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ИмяПоляКоманды");
	Таблица.Колонки.Добавить("ПредставлениеПоляКоманды");
	Таблица.Колонки.Добавить("ИменаПолейНаФорме");
	Таблица.Колонки.Добавить("ИменаРеквизитовОбъекта");
	Таблица.Колонки.Добавить("ИменаDMService");
	Таблица.Колонки.Добавить("ИмяГруппыПоляКоманды");
#Удаление 
	Макет = Справочники.НастройкиДоступностиПоСостоянию.ПолучитьМакет("НастройкиПолейКомандДокументПредприятия");
#КонецУдаления
#Вставка 
	// Замена макета настроек
	Макет = Справочники.НастройкиДоступностиПоСостоянию.ПолучитьМакет("ЦППК_НастройкиПолейКомандДокументПредприятия");
#КонецВставки

	// Найдем колонки макета по их заголовкам.
	КолонкаИмяПоляКоманды = НомерКолонкиПоЗаголовку(Макет, 2, "ИмяПоляКоманды");
	КолонкаПредставлениеПоляКоманды = НомерКолонкиПоЗаголовку(Макет, 2, "ПредставлениеПоляКоманды");
	КолонкаИменаПолейНаФорме = НомерКолонкиПоЗаголовку(Макет, 2, "ИменаПолейНаФорме");
	КолонкаИменаРеквизитовОбъекта = НомерКолонкиПоЗаголовку(Макет, 2, "ИменаРеквизитовОбъекта");
	КолонкаИменаDMService = НомерКолонкиПоЗаголовку(Макет, 2, "ИменаDMService");
	КолонкаФункциональнаяОпция = НомерКолонкиПоЗаголовку(Макет, 2, "ФункциональнаяОпция");

	НомерСтроки = 3;
	ИмяПоляКоманды = Макет.Область(НомерСтроки, КолонкаИмяПоляКоманды).Текст;
	Пока ИмяПоляКоманды <> "" Цикл

		ИмяФО = Макет.Область(НомерСтроки, КолонкаФункциональнаяОпция).Текст;
		Если Не ЗначениеЗаполнено(ИмяФО) Или ПолучитьФункциональнуюОпцию(ИмяФО) Тогда 
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.ИмяПоляКоманды = ИмяПоляКоманды;
			НоваяСтрока.ПредставлениеПоляКоманды = 
			Макет.Область(НомерСтроки, КолонкаПредставлениеПоляКоманды).Текст;
			НоваяСтрока.ИменаПолейНаФорме = 
			Макет.Область(НомерСтроки, КолонкаИменаПолейНаФорме).Текст;
			НоваяСтрока.ИменаРеквизитовОбъекта = 
			Макет.Область(НомерСтроки, КолонкаИменаРеквизитовОбъекта).Текст;
			НоваяСтрока.ИменаDMService = 
			Макет.Область(НомерСтроки, КолонкаИменаDMService).Текст;
		КонецЕсли;

		НомерСтроки = НомерСтроки + 1;
		ИмяПоляКоманды = Макет.Область(НомерСтроки, КолонкаИмяПоляКоманды).Текст;

	КонецЦикла;

	Таблица.Сортировать("ИмяПоляКоманды");

	Возврат Таблица;

КонецФункции

&ИзменениеИКонтроль("ПолучитьНастройкиДоступностиПоУмолчанию")
Функция ЦППК_ПолучитьНастройкиДоступностиПоУмолчанию(ТипДокумента, Роль, ОтборИмяПоляКоманды = "") Экспорт 
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ИмяПоляКоманды");
	Таблица.Колонки.Добавить("Состояние");
	Таблица.Колонки.Добавить("Доступность");
	
#Удаление 
	Макет = Справочники.НастройкиДоступностиПоСостоянию.ПолучитьМакет("НастройкиПолейКомандДокументПредприятия");
#КонецУдаления
#Вставка 
	// Замена макета настроек
	Макет = Справочники.НастройкиДоступностиПоСостоянию.ПолучитьМакет("ЦППК_НастройкиПолейКомандДокументПредприятия");
#КонецВставки
	
	// Определим номера колонок макета.
	КолонкаИмяПоляКоманды = НомерКолонкиПоЗаголовку(Макет, 2, "ИмяПоляКоманды");
	КолонкаПользователь = НомерКолонкиПоЗаголовку(Макет, 1, "Пользователь");
	КолонкаДелопроизводитель = НомерКолонкиПоЗаголовку(Макет, 1, "Делопроизводитель");
	КолонкаПоследняя = Макет.ШиринаТаблицы;
	
	НомерСтроки = 3;
	ИмяПоляКоманды = Макет.Область(НомерСтроки, КолонкаИмяПоляКоманды).Текст;
	Пока ИмяПоляКоманды <> "" Цикл
		
		Если ЗначениеЗаполнено(ОтборИмяПоляКоманды) И ИмяПоляКоманды <> ОтборИмяПоляКоманды Тогда
			// только одно, все прочие не нужны.
			НомерСтроки = НомерСтроки + 1;
			ИмяПоляКоманды = Макет.Область(НомерСтроки, КолонкаИмяПоляКоманды).Текст;
			Продолжить;
		КонецЕсли;
		
		Если Роль = "Пользователь" Тогда // настройки для пользователя - перед настройками для делопроизводителя
			Инд1 = КолонкаПользователь;
			Инд2 = КолонкаДелопроизводитель - 1;
		ИначеЕсли Роль = "Делопроизводитель" Тогда // настройки для делопроизводителя - до конца макета
			Инд1 = КолонкаДелопроизводитель;
			Инд2 = КолонкаПоследняя;
		КонецЕсли;
			
		Для Инд = Инд1 По Инд2 Цикл
			Состояние = Макет.Область(2, Инд).Текст;
			
			МетаданныеЗначение = Метаданные.Перечисления.СостоянияДокументов.ЗначенияПеречисления.Найти(Состояние);
			Индекс = Метаданные.Перечисления.СостоянияДокументов.ЗначенияПеречисления.Индекс(МетаданныеЗначение);
			ЗначениеПеречисления = Перечисления.СостоянияДокументов[Индекс];
			
			Доступность = Макет.Область(НомерСтроки, Инд).Текст;
			
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.ИмяПоляКоманды = ИмяПоляКоманды;
			НоваяСтрока.Состояние = ЗначениеПеречисления;
			
			Если Доступность = "Да" Тогда 
				НоваяСтрока.Доступность = 1;
			ИначеЕсли Доступность = "Нет" Тогда 
				НоваяСтрока.Доступность = 2;
			Иначе
				НоваяСтрока.Доступность = 0;
			КонецЕсли;
			
		КонецЦикла;
		
		НомерСтроки = НомерСтроки + 1;
		ИмяПоляКоманды = Макет.Область(НомерСтроки, КолонкаИмяПоляКоманды).Текст;
		
	КонецЦикла;
	
	Возврат Таблица;
		
КонецФункции

#Область РегШтамп

&ИзменениеИКонтроль("СоздатьРегистрационныйШтамп")
Функция ЦППК_СоздатьРегистрационныйШтамп(СведенияОРегистрации)

	ДлинаРегНомера = СтрДлина(СведенияОРегистрации.РегистрационныйНомер);
    #Удаление
	Если ДлинаРегНомера <= 10 Тогда
		Макет = ПолучитьОбщийМакет("ШаблонРегистрационногоШтампа_мал");
	ИначеЕсли ДлинаРегНомера > 10 И ДлинаРегНомера <=25 Тогда
		Макет = ПолучитьОбщийМакет("ШаблонРегистрационногоШтампа_сред");	
	Иначе // выше 25 (до 40)
		Макет = ПолучитьОбщийМакет("ШаблонРегистрационногоШтампа_бол");	
	КонецЕсли;	
	Если СведенияОРегистрации.ЭтоВходящийДокумент Тогда

		Текст = СтрШаблон(НСтр("ru = '№ %1 от %2'"),
		СведенияОРегистрации.РегистрационныйНомер,
		Формат(СведенияОРегистрации.ДатаРегистрации, "ДФ=dd.MM.yyyy"));
		Строки = Новый Массив;
		Строки.Добавить(Новый Структура("Слева, Сверху, Текст", 10, 52, Текст));

	Иначе

		// исх или внутр

		Текст = СтрШаблон(НСтр("ru = '%1 № %2'"),
		Формат(СведенияОРегистрации.ДатаРегистрации, "ДФ=dd.MM.yyyy"),
		СведенияОРегистрации.РегистрационныйНомер);
		Строки = Новый Массив;
		Строки.Добавить(Новый Структура("Слева, Сверху, Текст", 10, 52, Текст));

	КонецЕсли;

	ПутьКРегистрационномуШтампу = РаботаСКартинками.НаложитьСтроки(Макет, "PNG", Строки, 36);
    #КонецУдаления 
	#Вставка
	Макет = ПолучитьОбщийМакет("ЦППК_МакетПДФ_Универсальный");	
	
	Текст = СтрШаблон(НСтр("ru = ' № %1 от %2'"),
	СведенияОРегистрации.РегистрационныйНомер,
	Формат(СведенияОРегистрации.ДатаРегистрации, "ДФ=dd.MM.yyyy"));
	Строки = Новый Массив;
	
	Строки.Добавить(Новый Структура("Слева, Сверху, Текст", 1, 12, Текст));
	Строки.Добавить(Новый Структура("Слева, Сверху, Текст", 5, 27, Строка(СведенияОРегистрации.Зарегистрировал)));

	ПутьКРегистрационномуШтампу = ЦППК_НаложитьСтроки(Макет, "PNG", Строки, 16);
	
	//Текст = СтрШаблон(НСтр("ru = '%1
	//                       |%2'"), Текст, Строка(СведенияОРегистрации.Зарегистрировал));
	//
	//Строки.Добавить(Новый Структура("Слева, Сверху, Текст", 10, 52, Текст));
	//
	//ПутьКРегистрационномуШтампу = ЦППК_НаложитьСтроки(Макет, "PNG", Строки, 36);
	
	#КонецВставки
	Возврат ПутьКРегистрационномуШтампу;

КонецФункции

Функция ЦППК_НаложитьСтроки(ИсходнаяКартинка, Формат, Строки, Размер)
		
	ФайлыКУдалению = Новый Массив;
	Если ТипЗнч(ИсходнаяКартинка) = Тип("ДвоичныеДанные") Тогда
		ПутьИсходногоФайла = ПолучитьИмяВременногоФайла(Формат);
		ИсходнаяКартинка.Записать(ПутьИсходногоФайла);
		ФайлыКУдалению.Добавить(ПутьИсходногоФайла);
	ИначеЕсли ТипЗнч(ИсходнаяКартинка) = Тип("Строка") Тогда
		ПутьИсходногоФайла = ИсходнаяКартинка;
	КонецЕсли;
	
	ПутьНовогоФайла = ПолучитьИмяВременногоФайла(Формат);
	
	ПараметрыDraw = Новый Массив;
	Для Каждого Строка Из Строки Цикл
		ПараметрDraw = СтрШаблон("text %1, %2 '%3'",
			Формат(Строка.Слева, "ЧГ=0"),
			Формат(Строка.Сверху, "ЧГ=0"),
			Строка.Текст);
		ПараметрыDraw.Добавить(ПараметрDraw);
	КонецЦикла;  
	//#0A64DC - голубой 
	//#003153 - синий
	Параметры = СтрШаблон("convert -pointsize %1 -fill ""#0A64DC"" -draw ""%2"" %3 %4",
		Формат(Размер, "ЧГ=0"),
		СтрСоединить(ПараметрыDraw, " "),
		ПутьИсходногоФайла,
		ПутьНовогоФайла);
	
	РаботаСКартинками.ЗапуститьImageMagick(Параметры, ФайлыКУдалению);
	
	Возврат ПутьНовогоФайла;
	
КонецФункции

&ИзменениеИКонтроль("ПолучитьСтрокуПодписи")
Функция ЦППК_ПолучитьСтрокуПодписи(Документ, ВидДокумента = Неопределено, ВариантыТекста = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = "";
	
	Если ВидДокумента = Неопределено Тогда
		ВидДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ВидДокумента");
		Если ВидДокумента = Неопределено Тогда
			// Передана пустая ссылка на документ и не передан вид документа
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Если ВариантыТекста <> Неопределено Тогда
		ПодписьДа = ВариантыТекста.ВариантДа;
		ПодписьНет = ВариантыТекста.ВариантНет;
	Иначе
		ПодписьДа = НСтр("ru = 'Подписан'");
		ПодписьНет = НСтр("ru = 'Не подписан'");
	КонецЕсли;
	
	Если Документ.Пустая() Тогда // Для пустой ссылки участники могут быть не разыменованы или заменены
		
		// Проверим, есть ли действия нужных типов в обработке		
		ТипыДействий = ДействияСерверПовтИспНаВремяВызова.ДействующиеТипыДействийПоВидуОбъекта(ВидДокумента);
		
		Для Каждого Тип Из ТипыДействий Цикл
			Если Тип.Значение.Тип = Перечисления.ТипыДействий.Подписание Тогда
				Результат = ПодписьНет;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		// Получить все действия подписания и их участников
		ВсеДействия = ДействияСервер.ТекущиеДействияПредмета(Документ, , ТекущаяДатаСеанса()).Выгрузить();
		ДействияПодписания = Новый Массив;
		МассивДействий = ВсеДействия.ВыгрузитьКолонку("Действие");
		ВидыДействий = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивДействий, "ВидДействия");
		МассивВидовДействий = Новый Массив;
		Для Каждого Вид Из ВидыДействий Цикл
			МассивВидовДействий.Добавить(Вид.Значение.ВидДействия);
		КонецЦикла;
		ТипыДействий = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивВидовДействий, "Тип");
		
		// Проверить результаты выполнения этих действий
		Для Каждого Действие Из МассивДействий Цикл
			
			Если ТипыДействий[ВидыДействий[Действие].ВидДействия].Тип <> Перечисления.ТипыДействий.Подписание Тогда
				Продолжить;
			Иначе
				ДействияПодписания.Добавить(Действие);
			КонецЕсли;
		
		КонецЦикла;
		
		ТребуетсяПрефиксДействия = ДействияПодписания.Количество() > 1;
		
		Для Каждого Действие Из ДействияПодписания Цикл
			
			Если ТребуетсяПрефиксДействия Тогда
				Результат = СтрШаблон("%1%2: ", Результат, Действие);
			КонецЕсли;
			
			// Получить подписантов и проверить кто из них подписал и кто нет				
			Участники = ДействияСервер.УчастникиДействия(Действие);
			СведенияОбУчастниках = РегистрыСведений.СведенияОбУчастникахДействий.ПолучитьСведенияОбУчастникахДействия(Действие);
			
			#Вставка
			//+ЦППК САНФ-023306, 09.02.2024
			Подписывающий = Неопределено;
			ОбеспечивающийПодписание = Неопределено;
			
			Для Каждого Участник Из Участники Цикл
				Если Участник.Функция = Перечисления.ФункцииУчастниковПодписания.Подписывающий Тогда
					Подписывающий = Новый Структура("Участник, Идентификатор", Участник.Участник, Участник.Идентификатор);
				КонецЕсли;
				
				Если Участник.Функция = Перечисления.ФункцииУчастниковПодписания.ОбеспечивающийПодписание Тогда
					ОбеспечивающийПодписание = Новый Структура("Участник, Идентификатор", Участник.Участник, Участник.Идентификатор);
				КонецЕсли;
			КонецЦикла;
			
			Если Подписывающий <> Неопределено И ОбеспечивающийПодписание <> Неопределено 
				И Подписывающий.Участник = ОбеспечивающийПодписание.Участник Тогда
				
				РезультатДействия = РегистрыСведений.РезультатыДействий.РезультатУчастникаДействия(
				Действие, Подписывающий.Идентификатор);
				
				Если РезультатДействия <> Неопределено
					И РезультатДействия.Результат = Перечисления.РезультатыПодписания.Подписано Тогда
					
					Результат = СтрШаблон("%1%2 (%3), ", Результат, ПодписьДа,
					СведенияОбУчастниках[ОбеспечивающийПодписание.Идентификатор].ФактическийИсполнитель);
				Иначе
					Результат = СтрШаблон("%1%2 (%3), ", Результат, ПодписьНет,
					ОбеспечивающийПодписание.Участник);
				КонецЕсли;
				
			Иначе
			//-ЦППК
			#КонецВставки
				Для Каждого Участник Из Участники Цикл
					Если Участник.Функция = Перечисления.ФункцииУчастниковПодписания.Подписывающий Тогда

						РезультатДействия = РегистрыСведений.РезультатыДействий.РезультатУчастникаДействия(
							Действие, Участник.Идентификатор);

						Если РезультатДействия <> Неопределено
							И РезультатДействия.Результат = Перечисления.РезультатыПодписания.Подписано Тогда
							Результат = СтрШаблон("%1%2 (%3), ", Результат, ПодписьДа,
								СведенияОбУчастниках[Участник.Идентификатор].ПредставлениеФактическогоИсполнителя);
						Иначе
							Результат = СтрШаблон("%1%2 (%3), ", Результат, ПодписьНет, Участник.Участник);
						КонецЕсли;

					КонецЕсли;
				КонецЦикла;
			#Вставка
			КонецЕсли; //+ЦППК САНФ-023306, 09.02.2024
			#КонецВставки
			
		КонецЦикла;
		
		КэшДокументыПредприятияФормаЭлемента =
			КэшиНаВремяВызоваПовтИсп.КэшДокументыПредприятияФормаЭлемента();
		Если КэшДокументыПредприятияФормаЭлемента.Инициализирован
			И КэшДокументыПредприятияФормаЭлемента.КэшДокумента.ВидДокумента = ВидДокумента Тогда
			РеквизитыВидаДокумента = КэшДокументыПредприятияФормаЭлемента.КэшВидаДокумента;
		Иначе
			РеквизитыВидаДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидДокумента,
				"ВестиУчетПоКонтрагентам, ВестиУчетСторон, ЯвляетсяВходящейКорреспонденцией, ЯвляетсяИсходящейКорреспонденцией");
		КонецЕсли;
	
		Если РеквизитыВидаДокумента.ВестиУчетСторон Тогда
			
			КэшДокументыПредприятияФормаЭлемента =
				КэшиНаВремяВызоваПовтИсп.КэшДокументыПредприятияФормаЭлемента();
			Если КэшДокументыПредприятияФормаЭлемента.Инициализирован
				И КэшДокументыПредприятияФормаЭлемента.КэшДокумента.Ссылка = Документ Тогда
				РеквизитыДокумента = КэшДокументыПредприятияФормаЭлемента.КэшДокумента;
			Иначе
				РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ,
					"ДатаСоздания, ДатаРегистрации, Стороны");
			КонецЕсли;
			ДатаНачалаОтсчета = Делопроизводство.ДатаУчетаДокумента(РеквизитыДокумента);
			Стороны = РеквизитыДокумента.Стороны.Выгрузить();
			ПодписантыКонтрагентов = Новый Массив;
			Для Каждого СтрокаСтороны Из Стороны Цикл
				Если ДелопроизводствоКлиентСервер.ЭтоКонтрагент(СтрокаСтороны.Сторона) 
						И ЗначениеЗаполнено(СтрокаСтороны.Подписал)
						И (
							ТипЗнч(СтрокаСтороны.Подписал) = Тип("СправочникСсылка.Сотрудники")
							Или ТипЗнч(СтрокаСтороны.Подписал) = Тип("СправочникСсылка.КонтактныеЛица")
						) Тогда
					ПодписантыКонтрагентов.Добавить(СтрокаСтороны.Подписал);
				КонецЕсли;
			КонецЦикла;
			ДолжностиПодписантов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ПодписантыКонтрагентов, "Должность");
			
			Для Каждого СтрокаСтороны Из Стороны Цикл
				Если ДелопроизводствоКлиентСервер.ЭтоКонтрагент(СтрокаСтороны.Сторона) Тогда
					
					КонтрагентПредставление = Справочники.Контрагенты.ПредставлениеКонтрагентаНаДату(СтрокаСтороны.Сторона, ДатаНачалаОтсчета);
					
					Если ЗначениеЗаполнено(СтрокаСтороны.Подписал) Тогда
						
						Должность = ДолжностиПодписантов[СтрокаСтороны.Подписал];
						ПредставлениеСтороны = "";
						Если ЗначениеЗаполнено(Должность) Тогда
							ПредставлениеСтороны = СтрШаблон("%1, %2", Должность, КонтрагентПредставление);
						Иначе
							ПредставлениеСтороны = КонтрагентПредставление;
						КонецЕсли;
						
						Результат = СтрШаблон("%1%2 (%3 (%4)), ", Результат, 
							?(СтрокаСтороны.Подписан, ПодписьДа, ПодписьНет),
							СтрокаСтороны.Подписал,
							ПредставлениеСтороны);
							
					Иначе
						
						Результат = СтрШаблон("%1%2 (%3), ", Результат, 
							?(СтрокаСтороны.Подписан, ПодписьДа, ПодписьНет),
							КонтрагентПредставление);
							
					КонецЕсли;
				КонецЕсли;
			КонецЦикла
			
		ИначеЕсли РеквизитыВидаДокумента.ВестиУчетПоКонтрагентам Тогда
			
			КэшДокументыПредприятияФормаЭлемента =
				КэшиНаВремяВызоваПовтИсп.КэшДокументыПредприятияФормаЭлемента();
			Если КэшДокументыПредприятияФормаЭлемента.Инициализирован
				И КэшДокументыПредприятияФормаЭлемента.КэшДокумента.Ссылка = Документ Тогда
				РеквизитыДокумента = КэшДокументыПредприятияФормаЭлемента.КэшДокумента;
			Иначе
				РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ,
					"Контрагент, ПодписалОтКонтрагента, ДатаСоздания, ДатаРегистрации");
			КонецЕсли;
			Контрагент = РеквизитыДокумента.Контрагент;
			ПодписалОтКонтрагента = РеквизитыДокумента.ПодписалОтКонтрагента;
			ДатаНачалаОтсчета = Делопроизводство.ДатаУчетаДокумента(РеквизитыДокумента);
			
			Если ЗначениеЗаполнено(Контрагент) Тогда
				
				КонтрагентПредставление = Справочники.Контрагенты.ПредставлениеКонтрагентаНаДату(Контрагент, ДатаНачалаОтсчета);
				Если ЗначениеЗаполнено(ПодписалОтКонтрагента) Тогда
					
					ПредставлениеСтороны = КонтрагентПредставление;
					Должность = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПодписалОтКонтрагента, "Должность");
					Если ЗначениеЗаполнено(Должность) Тогда
						ПредставлениеСтороны = СтрШаблон("%1, %2", Должность, КонтрагентПредставление);
					КонецЕсли;
					
					Результат = СтрШаблон("%1%2 (%3 (%4)), ", Результат, ПодписьДа, 
						ПодписалОтКонтрагента, ПредставлениеСтороны);
					
				ИначеЕсли Не РеквизитыВидаДокумента.ЯвляетсяВходящейКорреспонденцией 
					И Не РеквизитыВидаДокумента.ЯвляетсяИсходящейКорреспонденцией Тогда 
					Результат = СтрШаблон("%1%2 (%3), ", Результат, ПодписьНет, 
						КонтрагентПредставление);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

	
	Если СтрНачинаетсяС(Результат, ", ") Тогда
		Результат = Сред(Результат, 3);
	КонецЕсли;
	Если СтрЗаканчиваетсяНа(Результат, ", ") Тогда
		Результат = Сред(Результат, 1, СтрДлина(Результат)-2);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&Вместо("ПолучитьДанныеФайловДляСписка")
Функция ЦППК_ПолучитьДанныеФайловДляСписка(Файлы, ВладелецФайла, ПоказыватьУдаленныеФайлы, ОтметитьЗахваченныеФайлы, МассивКомбинацийРолей, ЗаполнятьДанныеДляВизуализации, ВидДокумента)
	
	МассивКомбинацийРолей = Новый Массив;

	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос(
	//++AxelSoft Шарапова 12.03.2025 САНФ-032675
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Файлы.Наименование КАК Наименование,
		|	Файлы.ВерсияДанных КАК ВерсияДанных,
		|	ПОДСТРОКА(Файлы.Описание, 0, 140) КАК Описание,
		|	Файлы.Ссылка КАК Ссылка,
		|	Файлы.ВладелецФайла КАК ВладелецФайла,
		|	Файлы.ДатаСоздания КАК ДатаСоздания,
		|	Файлы.Автор КАК Автор,
		|	Файлы.ХранитьВерсии КАК ХранитьВерсии,
		|	Файлы.ТекущаяВерсияРазмер / 1024 КАК ТекущаяВерсияРазмер,
		|	Файлы.ТекущаяВерсияДатаСоздания КАК ТекущаяВерсияДатаСоздания,
		|	Файлы.ТекущаяВерсияАвтор КАК ТекущаяВерсияАвтор,
		|	Файлы.ПометкаУдаления КАК ПометкаУдаления,
		|	Файлы.ИндексКартинки КАК ИндексКартинки,
		|	Файлы.Редактирует КАК Редактирует,
		|	Файлы.ТекущаяВерсияРасширение КАК Расширение,
		|	Файлы.ТекущаяВерсияРасширение КАК ТекущаяВерсияРасширение,
		|	Файлы.ТекущаяВерсия КАК ТекущаяВерсия,
		|	Файлы.ПодписанЭП КАК ПодписанЭП,
		|	Файлы.Зашифрован КАК Зашифрован,
		|	Файлы.ШаблонОснованиеДляСоздания КАК ШаблонОснованиеДляСоздания
		|ПОМЕСТИТЬ втФайлы
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
		|		ПО (СлужебныеФайлыДокументов.Файл = Файлы.Ссылка)
		|ГДЕ
		|	Файлы.Ссылка В(&Файлы)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка,
		|	ШаблонОснованиеДляСоздания,
		|	ТекущаяВерсия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////   
		|"+
	//--AxelSoft Шарапова 12.03.2025 САНФ-032675
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Файлы.Наименование КАК Наименование,
	|	Файлы.ВерсияДанных КАК ВерсияДанных,
	|	ПОДСТРОКА(Файлы.Описание, 0, 140) КАК Описание,
	|	Файлы.Ссылка КАК Ссылка,
	|	Файлы.ВладелецФайла КАК ВладелецФайла,
	|	Файлы.ДатаСоздания КАК ДатаСоздания,
	|	Файлы.Автор КАК Автор,
	|	Файлы.Редактирует КАК Редактирует,
	|	Файлы.ХранитьВерсии КАК ХранитьВерсии,
	|	Файлы.ПометкаУдаления КАК ПометкаУдаления,
	|	Файлы.ТекущаяВерсияРазмер / 1024 КАК ТекущаяВерсияРазмер,
	|	Файлы.ТекущаяВерсияДатаСоздания КАК ТекущаяВерсияДатаСоздания,
	|	Файлы.ТекущаяВерсияАвтор КАК ТекущаяВерсияАвтор,
	|	ВЫБОР
	|		КОГДА Файлы.ПометкаУдаления
	|			ТОГДА Файлы.ИндексКартинки + 1
	|		ИНАЧЕ Файлы.ИндексКартинки
	|	КОНЕЦ КАК ИндексКартинки,
	|	ВЫБОР
	|		КОГДА Файлы.Редактирует В (&ПользовательИЕгоСотрудники)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РедактируетТекущийПользователь,
	|	Файлы.ТекущаяВерсияРасширение КАК Расширение,
	|	Файлы.ТекущаяВерсияРасширение КАК ТекущаяВерсияРасширение,
	|	Файлы.ПодписанЭП КАК ПодписанЭП,
	|	ВЫБОР
	|		КОГДА Файлы.Зашифрован
	|			ТОГДА ВЫБОР
	|				КОГДА КешИнформацииОбОбъектах.СтатусЭП = ЗНАЧЕНИЕ(Перечисление.СтатусПроверкиЭП.ПодписиНет)
	|					ТОГДА 0
	|				КОГДА КешИнформацииОбОбъектах.СтатусЭП = ЗНАЧЕНИЕ(Перечисление.СтатусПроверкиЭП.ПодписьНеПроверена)
	|					ТОГДА 2
	|				КОГДА КешИнформацииОбОбъектах.СтатусЭП = ЗНАЧЕНИЕ(Перечисление.СтатусПроверкиЭП.ПодписьДействительна)
	|					ТОГДА 4
	|				КОГДА КешИнформацииОбОбъектах.СтатусЭП = ЗНАЧЕНИЕ(Перечисление.СтатусПроверкиЭП.ПодписьНедействительна)
	|					ТОГДА 6
	|				ИНАЧЕ ВЫБОР
	|					КОГДА Файлы.ПодписанЭП
	|						ТОГДА 2
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|			КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|			КОГДА КешИнформацииОбОбъектах.СтатусЭП = ЗНАЧЕНИЕ(Перечисление.СтатусПроверкиЭП.ПодписиНет)
	|				ТОГДА -1
	|			КОГДА КешИнформацииОбОбъектах.СтатусЭП = ЗНАЧЕНИЕ(Перечисление.СтатусПроверкиЭП.ПодписьНеПроверена)
	|				ТОГДА 1
	|			КОГДА КешИнформацииОбОбъектах.СтатусЭП = ЗНАЧЕНИЕ(Перечисление.СтатусПроверкиЭП.ПодписьДействительна)
	|				ТОГДА 3
	|			КОГДА КешИнформацииОбОбъектах.СтатусЭП = ЗНАЧЕНИЕ(Перечисление.СтатусПроверкиЭП.ПодписьНедействительна)
	|				ТОГДА 5
	|			ИНАЧЕ ВЫБОР
	|				КОГДА Файлы.ПодписанЭП
	|					ТОГДА 1
	|				ИНАЧЕ -1
	|			КОНЕЦ
	|		КОНЕЦ
	|	КОНЕЦ КАК СтатусПроверкиЭП,
	|	Файлы.Зашифрован КАК Зашифрован,
	|	ВЫБОР
	|		КОГДА Файлы.ШаблонОснованиеДляСоздания = ЗНАЧЕНИЕ(Справочник.Файлы.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СозданИзШаблона,
	|	ЕСТЬNULL(СведенияОФайлахДокументооборот.ЯвляетсяОригиналом, ЛОЖЬ) КАК Оригинал,
	|	ЕСТЬNULL(СведенияОФайлахДокументооборот.ПорядковыйНомерВложения, 0) КАК ПорядковыйНомерВложения,
	|	ЕСТЬNULL(ФайлыСозданныеПоШаблону.СозданПоШаблону, ЛОЖЬ) КАК СозданПоШаблонуДокумента,
	|	ЕСТЬNULL(НастройкиЗаполнения.Условие, ЗНАЧЕНИЕ(Справочник.АлгоритмыПроверки.ПустаяСсылка)) КАК Условие,
	|	0 КАК НомерРоли,
	|	НЕ (ПредпросмотрФайлов.Файл Есть NULL) КАК ПредпросмотрЕстьВБазе,
	|	ЕСТЬNULL(ТаймлистДанныеРаботыСервиса.Статус, ЗНАЧЕНИЕ(Перечисление.ТаймлистСтатусы.ПустаяСсылка)) КАК ТаймлистСтатус,
	|	ЕСТЬNULL(ТаймлистДанныеРаботыСервиса.СледующиеШаги, """") КАК ТаймлистСледующиеШаги,
	|	ЕСТЬNULL(ТаймлистФайлыВОбработке.Задание, ЗНАЧЕНИЕ(Перечисление.ТаймлистТипыЗаданий.ПустаяСсылка)) КАК ТаймлистЗадание,
	|	ЕСТЬNULL(ТекстыВерсийФайлов.СтатусРаспознаванияТекста, ЗНАЧЕНИЕ(Перечисление.СтатусыРаспознаванияТекста.ПустаяСсылка)) КАК СтатусРаспознаванияТекста
	|ИЗ
	//++AxelSoft Шарапова 12.03.2025 САНФ-032675
	//|	Справочник.Файлы КАК Файлы
	|	втФайлы КАК Файлы
	//--AxelSoft Шарапова 12.03.2025 САНФ-032675
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФайлыСозданныеПоШаблону КАК ФайлыСозданныеПоШаблону
	|		ПО (ФайлыСозданныеПоШаблону.Файл = Файлы.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШаблоныДокументов.ПравилаАвтозаполнения КАК НастройкиЗаполнения
	|		ПО Файлы.ШаблонОснованиеДляСоздания = НастройкиЗаполнения.ШаблонФайла
	|		ИЛИ Файлы.Ссылка = НастройкиЗаполнения.ШаблонФайла
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОФайлахДокументооборот КАК СведенияОФайлахДокументооборот
	|		ПО (СведенияОФайлахДокументооборот.Файл = Файлы.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КешИнформацииОбОбъектах КАК КешИнформацииОбОбъектах
	|		ПО Файлы.Ссылка = КешИнформацииОбОбъектах.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СлужебныеФайлыДокументов КАК СлужебныеФайлыДокументов
	|		ПО (СлужебныеФайлыДокументов.Файл = Файлы.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредпросмотрФайлов КАК ПредпросмотрФайлов
	|		ПО (ПредпросмотрФайлов.Файл = Файлы.Ссылка
	|		И ПредпросмотрФайлов.ВерсияФайла = Файлы.ТекущаяВерсия И ПредпросмотрФайлов.НомерБлока = 0)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТаймлистДанныеРаботыСервиса КАК ТаймлистДанныеРаботыСервиса
	|		ПО (ТаймлистДанныеРаботыСервиса.ВерсияФайла = Файлы.ТекущаяВерсия)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТаймлистФайлыВОбработке КАК ТаймлистФайлыВОбработке
	|		ПО (ТаймлистФайлыВОбработке.ВерсияФайла = Файлы.ТекущаяВерсия)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекстыВерсийФайлов КАК ТекстыВерсийФайлов
	|		ПО (ТекстыВерсийФайлов.Версия = Файлы.ТекущаяВерсия)
	//++AxelSoft Шарапова 12.03.2025 САНФ-032675
	//|ГДЕ
	//|	Файлы.Ссылка В(&Файлы)
	//--AxelSoft Шарапова 12.03.2025 САНФ-032675
	|УПОРЯДОЧИТЬ ПО
	|	Наименование");

	Если Файлы = Неопределено Тогда
		Если ПоказыватьУдаленныеФайлы Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"Файлы.Ссылка В(&Файлы)", "Файлы.ВладелецФайла = &ВладелецФайла И СлужебныеФайлыДокументов.Файл ЕСТЬ NULL");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст,
			"Файлы.Ссылка В(&Файлы)", "Файлы.ВладелецФайла = &ВладелецФайла И НЕ Файлы.ПометкаУдаления И СлужебныеФайлыДокументов.Файл ЕСТЬ NULL");
		КонецЕсли;
		Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
	Иначе
		Запрос.УстановитьПараметр("Файлы", Файлы);
	КонецЕсли;
	ПользовательИЕгоСотрудники = СотрудникиВызовСервера.ПользовательИЕгоСотрудники(Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("ПользовательИЕгоСотрудники", ПользовательИЕгоСотрудники);

	ТаблицаФайлов = Запрос.Выполнить().Выгрузить();

	Массив = Новый Массив;
	Массив.Добавить(Тип("СправочникСсылка.РолиФайлов"));
	ТаблицаФайлов.Колонки.Добавить("РольФайла", Новый ОписаниеТипов(Массив));

	Массив = Новый Массив;
	Массив.Добавить(Тип("СписокЗначений"));
	ТаблицаФайлов.Колонки.Добавить("РолиФайлов", Новый ОписаниеТипов(Массив));

	Массив = Новый Массив;
	Массив.Добавить(Тип("СправочникСсылка.Файлы"));
	ТаблицаФайлов.Колонки.Добавить("ФайлВизуализации", Новый ОписаниеТипов(Массив));

	Массив = Новый Массив;
	Массив.Добавить(Тип("Булево"));
	ТаблицаФайлов.Колонки.Добавить("ФайлВизуализацииЗанятМной", Новый ОписаниеТипов(Массив));

	Если ОтметитьЗахваченныеФайлы Тогда
		ТаблицаФайлов.Колонки.Добавить("ПолноеИмяФайлаВРабочемКаталоге", Новый ОписаниеТипов("Строка"));
		ТаблицаФайлов.Колонки.Добавить("ДатаМодификацииУниверсальнаяВБазе", Новый ОписаниеТипов("Дата"));

		Для Каждого ФайлыПисьмаСтрока Из ТаблицаФайлов Цикл

			Если ФайлыПисьмаСтрока.РедактируетТекущийПользователь = Истина
				И ЗначениеЗаполнено(ФайлыПисьмаСтрока.Ссылка) Тогда

				ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(ФайлыПисьмаСтрока.Ссылка);
				ФайлыПисьмаСтрока.ПолноеИмяФайлаВРабочемКаталоге = ДанныеФайла.ПолноеИмяФайлаВРабочемКаталоге;
				ФайлыПисьмаСтрока.ДатаМодификацииУниверсальнаяВБазе = ДанныеФайла.ДатаМодификацииУниверсальная;
			КонецЕсли;

		КонецЦикла;
	КонецЕсли;

	Если ЗаполнятьДанныеДляВизуализации Тогда

		ДокументПодписан = Ложь;
		Если Не ЗначениеЗаполнено(ВладелецФайла) И ТаблицаФайлов.Количество() <> 0 Тогда
			ВладелецФайла = ТаблицаФайлов[0].ВладелецФайла;
		КонецЕсли;

		Если ЗначениеЗаполнено(ВладелецФайла) Тогда
			ДокументПодписан = ДействияСервер.ДокументПодписан(ВладелецФайла);
		КонецЕсли;

		Для Каждого ФайлыПисьмаСтрока Из ТаблицаФайлов Цикл
			// Заполним данные для файла визуализации.

			Если (ФайлыПисьмаСтрока.ПодписанЭП = Истина Или ДокументПодписан)
				И ЗначениеЗаполнено(ФайлыПисьмаСтрока.Ссылка) Тогда

				Если РаботаСФайламиКлиентСервер.ЭтоРасширениеДляАвтовизуализации(ФайлыПисьмаСтрока.Расширение) Тогда

					ФайлыПисьмаСтрока.ФайлВизуализации = РегистрыСведений.СлужебныеФайлыДокументов.ПолучитьСлужебныйФайл(
					ФайлыПисьмаСтрока.ВладелецФайла,
					ФайлыПисьмаСтрока.Ссылка,
					Перечисления.ОтношенияСлужебныхФайлов.ВизуализацияЭП);
					Если ЗначениеЗаполнено(ФайлыПисьмаСтрока.ФайлВизуализации) Тогда
						Редактирует = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
						ФайлыПисьмаСтрока.ФайлВизуализации, "Редактирует");
						ФайлыПисьмаСтрока.ФайлВизуализацииЗанятМной =
						(ПользовательИЕгоСотрудники.Найти(Редактирует) <> Неопределено);
					КонецЕсли;

				КонецЕсли;

			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

	ИспользованныеРоли = Новый Соответствие;

	Если ЗначениеЗаполнено(ВладелецФайла) И ДелопроизводствоКлиентСервер.ЭтоДокумент(ВладелецФайла) Тогда

		КэшДокументыПредприятияФормаЭлемента = КэшиНаВремяВызоваПовтИсп.КэшДокументыПредприятияФормаЭлемента();
		Если КэшДокументыПредприятияФормаЭлемента.Инициализирован
			И КэшДокументыПредприятияФормаЭлемента.КэшДокумента.Ссылка = ВладелецФайла Тогда
			ВидДокумента = КэшДокументыПредприятияФормаЭлемента.КэшДокумента.ВидДокумента;
			РолиФайлов = КэшДокументыПредприятияФормаЭлемента.КэшВидаДокумента.РолиФайлов;
		Иначе
			Если ВидДокумента = Неопределено Тогда
				ВидДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВладелецФайла, "ВидДокумента");
			КонецЕсли;
			РолиФайлов = РолиФайловДляВидаДокументов(ВидДокумента);
		КонецЕсли;

		Порядок = 0;
		Для Каждого Стр Из РолиФайлов Цикл
			ИспользованныеРоли.Вставить(Стр.Роль, 1);
			МассивКомбинацийРолей.Добавить(Новый Структура("Роль, Обязательная", Стр.Роль, Стр.Обязательная));
		КонецЦикла;

	КонецЕсли;

	// Прочитаем РолиФайловДокументов для массива файлов.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	РолиФайловДокументов.Файл КАК Файл,
	|	РолиФайловДокументов.Роль КАК Роль
	|ИЗ
	|	РегистрСведений.РолиФайловДокументов КАК РолиФайловДокументов
	|ГДЕ
	|	РолиФайловДокументов.Файл В(&Файлы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Файл");
	Запрос.УстановитьПараметр("Файлы", ТаблицаФайлов.ВыгрузитьКолонку("Ссылка"));
	ТаблРоли = Запрос.Выполнить().Выгрузить();

	ТаблРолиКопия = ТаблРоли.Скопировать();
	ТаблРолиКопия.Свернуть("Роль");
	Для Каждого Стр Из ТаблРолиКопия Цикл
		Если ИспользованныеРоли.Получить(Стр.Роль) = Неопределено Тогда
			ИспользованныеРоли.Вставить(Стр.Роль, 1);
			МассивКомбинацийРолей.Добавить(Новый Структура("Роль, Обязательная", Стр.Роль, Ложь));
		КонецЕсли;
	КонецЦикла;

	ЕстьНепустыеРоли = (ТаблРоли.Количество() <> 0)
	Или (МассивКомбинацийРолей.Количество() <> 0);

	ДобавленаВеткаБезРоли = Ложь;

	// Заполним у файлов (ТаблицаФайлов) РольФайла.
	Для Каждого ФайлыПисьмаСтрока Из ТаблицаФайлов Цикл

		ПараметрыОтбора = Новый Структура("Файл", ФайлыПисьмаСтрока.Ссылка);
		СтрокиРолей = ТаблРоли.НайтиСтроки(ПараметрыОтбора);

		Если СтрокиРолей.Количество() <> 0 Тогда

			ТекРоль = СтрокиРолей[0].Роль;
			ФайлыПисьмаСтрока.РольФайла = ТекРоль;

		Иначе // Создадим ветку для файлов без ролей.

			Если ЕстьНепустыеРоли И Не ДобавленаВеткаБезРоли Тогда

				ДобавленаВеткаБезРоли = Истина;

				МассивКомбинацийРолей.Добавить(
				Новый Структура("Роль, Обязательная", Справочники.РолиФайлов.ПустаяСсылка(), Ложь));

				ФайлыПисьмаСтрока.РольФайла = Справочники.РолиФайлов.ПустаяСсылка();

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	ТаблицаФайлов.Сортировать("НомерРоли, ПорядковыйНомерВложения, Наименование");

	Возврат ТаблицаФайлов;

КонецФункции

#КонецОбласти


// Проверяет ведется ли по документу учет документов по внесенным изменениям 
//
// Параметры
//    Документ - любая ссылка - проверяемый документ
//
// Возвращаемое значение
//    Булево - Истина, если по документу ведется учет внесенных изменений,
//	 		 - Ложь в противном случае
//
Функция УчитыватьВноситИзменения(Документ) Экспорт
	
	Возврат
		ТипЗнч(Документ) = Тип("СправочникСсылка.ДокументыПредприятия")
		И ЗначениеЗаполнено(Документ.ВидДокумента)
		И Документ.ВидДокумента.УчитыватьВноситИзменения;
	
	КонецФункции

&ИзменениеИКонтроль("КэшВидаДокумента")
Функция ЦППК_КэшВидаДокумента(ВидДокумента)

		Если Не ЗначениеЗаполнено(ВидДокумента) Тогда

			Возврат НовыйКэшВидаДокумента();

		Иначе

			ВидДокументаКэш = ОбщегоНазначенияДокументооборот.ЗначенияРеквизитовОбъектаВПривилегированномРежиме(
			ВидДокумента, 
			"Ссылка,
			|Наименование,
			|ЯвляетсяВходящейКорреспонденцией,
			|ЯвляетсяИсходящейКорреспонденцией,
			|ВестиУчетПоАдресатам,
			|ВестиУчетПоКонтрагентам,
			|ВестиУчетПоОрганизациям,
			|УчитыватьНедействующиеДокументы,
#Вставка
            |ЦППК_УчитыватьВноситИзменения,
#КонецВставки
			|ЯвляетсяДоговором,
			|ВестиУчетТоваровИУслуг,
			|УчитыватьСрокДействия,
			|НеобходимаПечатьШтрихкода,
			|ВестиУчетПоСтатьямДДС,
			|ВестиУчетСторон,
			|ВариантПодписания,
			|ЯвляетсяОбращениемОтГраждан,
			|ВестиУчетПоТематикам,
			|ОбязательноУказаниеПроекта,
			|УчитыватьОтветственногоЗаХранение,
			|УчитыватьМестоХранения,
			|ЯвляетсяЗаявкойНаОплату,
			|ВестиУчетПоНоменклатуреДел,
			|ОбязательноеУказаниеОтветственного,
			|ИспользоватьВременныеНомера,
			|ИспользоватьВажность,
			|ИспользоватьЭДО,
			|УчитыватьВходящийНомерИДатуПолучателя,
			|СрокИсполнения,
			|СрокИсполненияУказанВРабочихДнях,
			|ИспользоватьСрокИсполнения,
			|ЯвляетсяКомплектомДокументов,
			|ОбязателенФайлОригинала,
			|Родитель,
			|РолиФайлов,
			|ФормаДокумента,
			|УчитыватьСуммуДокумента,
			|КонтролироватьНаличиеОригинала");

			РолиФайлов = РолиФайловДляВидаДокументов(ВидДокумента, ВидДокументаКэш);
			ВидДокументаКэш.Вставить("РолиФайлов", Новый Массив);
			Для Каждого Стр Из РолиФайлов Цикл
				ОписаниеРоли = Новый Структура(
				"Роль, Обязательная, ТолькоОдинФайл");
				ЗаполнитьЗначенияСвойств(ОписаниеРоли, Стр);
				ВидДокументаКэш.РолиФайлов.Добавить(ОписаниеРоли);
			КонецЦикла;	

			ВидДокументаКэш.Вставить("ОбработкаЗадана", 
			Справочники.НастройкиОбработкиВидовОбъектов.НастройкиОбработкиЗаданы(
			ВидДокумента, ТекущаяДатаСеанса()));
			ВидДокументаКэш.Вставить("НастройкиДействийЗаданы",
			НастройкиДействий.КоличествоНастроекПравилОбработки(ВидДокумента) > 0);
		КонецЕсли;

		Возврат ВидДокументаКэш; //@skip-check constructor-function-return-section

	КонецФункции

&ИзменениеИКонтроль("НовыйКэшВидаДокумента")
Функция ЦППК_НовыйКэшВидаДокумента()

		ВидДокументаКэш = Новый Структура;
		ВидДокументаКэш.Вставить("Ссылка", Справочники.ВидыДокументов.ПустаяСсылка());
		ВидДокументаКэш.Вставить("Наименование", "");
		ВидДокументаКэш.Вставить("ЯвляетсяВходящейКорреспонденцией", Ложь);
		ВидДокументаКэш.Вставить("ЯвляетсяИсходящейКорреспонденцией", Ложь);
		ВидДокументаКэш.Вставить("ВестиУчетПоАдресатам", Ложь);
		ВидДокументаКэш.Вставить("ВестиУчетПоКонтрагентам", Ложь);
		ВидДокументаКэш.Вставить("ВестиУчетПоОрганизациям", Ложь);
		ВидДокументаКэш.Вставить("УчитыватьНедействующиеДокументы", Ложь);
#Вставка
        ВидДокументаКэш.Вставить("ЦППК_УчитыватьВноситИзменения", Ложь);
#КонецВставки
		ВидДокументаКэш.Вставить("ЯвляетсяДоговором", Ложь);
		ВидДокументаКэш.Вставить("ВестиУчетТоваровИУслуг", Ложь);
		ВидДокументаКэш.Вставить("УчитыватьСрокДействия", Ложь);
		ВидДокументаКэш.Вставить("НеобходимаПечатьШтрихкода", Ложь);
		ВидДокументаКэш.Вставить("ВестиУчетПоСтатьямДДС", Ложь);
		ВидДокументаКэш.Вставить("ВестиУчетСторон", Ложь);
		ВидДокументаКэш.Вставить("ВариантПодписания", Неопределено);
		ВидДокументаКэш.Вставить("ЯвляетсяОбращениемОтГраждан", Ложь);
		ВидДокументаКэш.Вставить("ВестиУчетПоТематикам", Ложь);
		ВидДокументаКэш.Вставить("РолиФайлов", Новый Массив);
		ВидДокументаКэш.Вставить("ОбязательноУказаниеПроекта", Ложь);
		ВидДокументаКэш.Вставить("УчитыватьОтветственногоЗаХранение", Ложь);
		ВидДокументаКэш.Вставить("УчитыватьМестоХранения", Ложь);
		ВидДокументаКэш.Вставить("ЯвляетсяЗаявкойНаОплату", Ложь);
		ВидДокументаКэш.Вставить("ВестиУчетПоНоменклатуреДел", Ложь);
		ВидДокументаКэш.Вставить("ОбязательноеУказаниеОтветственного", Ложь);
		ВидДокументаКэш.Вставить("ИспользоватьВременныеНомера", Ложь);
		ВидДокументаКэш.Вставить("ОбработкаЗадана", Ложь);
		ВидДокументаКэш.Вставить("НастройкиДействийЗаданы", Ложь);
		ВидДокументаКэш.Вставить("ИспользоватьВажность", Ложь);
		ВидДокументаКэш.Вставить("УчитыватьВходящийНомерИДатуПолучателя", Ложь);
		ВидДокументаКэш.Вставить("СрокИсполнения", Неопределено);
		ВидДокументаКэш.Вставить("СрокИсполненияУказанВРабочихДнях", Ложь);
		ВидДокументаКэш.Вставить("ИспользоватьСрокИсполнения", Ложь);
		ВидДокументаКэш.Вставить("ИспользоватьЭДО", Ложь);
		ВидДокументаКэш.Вставить("ЯвляетсяКомплектомДокументов", Ложь);
		ВидДокументаКэш.Вставить("ОбязателенФайлОригинала", Ложь);
		ВидДокументаКэш.Вставить("Родитель", Неопределено);
		ВидДокументаКэш.Вставить("ФормаДокумента", Неопределено);
		ВидДокументаКэш.Вставить("УчитыватьСуммуДокумента", Ложь);
		ВидДокументаКэш.Вставить("КонтролироватьНаличиеОригинала", Ложь);
		Возврат ВидДокументаКэш;

	КонецФункции
