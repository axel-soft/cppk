
#Область СлужебныеПроцедурыИФункции_РаботаСДеревомПроцессовИЗадач

&После("ОбновитьДоступностьЭлементовФормыПоСостояниюПроцесса")
Процедура ЦППК_ОбновитьДоступностьЭлементовФормыПоСостояниюПроцесса(Форма, УчитыватьСостояниеОстановлен)
	
	Объект = Форма.Объект;
	Если Объект.Стартован И НЕ ОбщегоНазначенияДокументооборотВызовСервера.РолиДоступны("ЦППК_ИзменениеПроцессовБезОграничений") Тогда
	
		Форма.ТолькоПросмотр = Истина;			
	
	КонецЕсли;

КонецПроцедуры

&ИзменениеИКонтроль("ЗаполнитьПроцессыИЗадачиПоПредмету")
Процедура ЦППК_ЗаполнитьПроцессыИЗадачиПоПредмету(Форма, Предмет)

	Дерево = ДанныеФормыВЗначение(Форма.ДеревоЗадач, Тип("ДеревоЗначений"));
	Дерево.Строки.Очистить();

	Список = ДанныеФормыВЗначение(Форма.СписокАктивныхЗадач, Тип("ТаблицаЗначений"));
	Список.Очистить();

	ПроцессыПоПредмету = ПроцессыПоПредмету(Предмет);

	ГоловныеПроцессы = ГоловныеПроцессы(ПроцессыПоПредмету.ВсеПроцессы);

	ЗадачиДляКонтекста = РаботаСЗадачами.ЗадачиПоПриложению(Предмет, Истина);
	Если ТипЗнч(Предмет) = Тип("СправочникСсылка.Проекты") Тогда
		ЗадачиПоПроекту = РаботаСЗадачами.ЗадачиПоПроекту(Предмет);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ЗадачиДляКонтекста, ЗадачиПоПроекту, Истина);
	КонецЕсли;
	КонтекстЗадач = КонтекстЗадач(ЗадачиДляКонтекста);

	Для Каждого ЗадачаПоПриложению Из КонтекстЗадач.ЗадачиПоПриложению Цикл

		РеквизитыЗадачи = КонтекстЗадач.РеквизитыЗадач[ЗадачаПоПриложению];

		Если БизнесПроцессыИЗадачиСервер.ЭтоПроцессИлиШаблонПроцесса(РеквизитыЗадачи.Источник)
			Или ЗначениеЗаполнено(РеквизитыЗадачи.ВышестоящаяЗадача)
			Или ЗначениеЗаполнено(РеквизитыЗадачи.ВышестоящееДействие) Тогда
			Продолжить;
		КонецЕсли;

		ГоловныеПроцессы.Добавить(ЗадачаПоПриложению);

	КонецЦикла;

	ТипПредмета = ТипЗнч(Предмет);

	ЗаполнятьСписокАктивныхЗадачПоДеревуВсехЗадач = 
	ТипПредмета = Тип("БизнесПроцессСсылка.КомплексныйПроцесс");

	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");

	Если Форма.Элементы.СписокАктивныхЗадач.Видимость
		И ЗаполнятьСписокАктивныхЗадачПоДеревуВсехЗадач Тогда

		ДобавитьПроцессыИПодчиненныеЗадачи(Дерево, ГоловныеПроцессы,
		ПроцессыПоПредмету.ВспомогательныеПроцессы,ИспользоватьДатуИВремяВСрокахЗадач, Список,, КонтекстЗадач);
	Иначе
#Удаление
		ДобавитьПроцессыИПодчиненныеЗадачи(Дерево, ГоловныеПроцессы,
		ПроцессыПоПредмету.ВспомогательныеПроцессы, ИспользоватьДатуИВремяВСрокахЗадач,,, КонтекстЗадач);
#КонецУдаления
#Вставка
		ЦППК_ДобавитьПроцессыИПодчиненныеЗадачиПереопределяемый(Предмет, Дерево, ГоловныеПроцессы,
		ПроцессыПоПредмету.ВспомогательныеПроцессы, ИспользоватьДатуИВремяВСрокахЗадач,,, КонтекстЗадач);
#КонецВставки
	КонецЕсли;

	ЗначениеВДанныеФормы(Дерево, Форма.ДеревоЗадач);
	РаботаСБизнесПроцессамиКлиентСервер.УстановитьТекущуюСтроку(Форма.ДеревоЗадач.ПолучитьЭлементы(), Форма);

	Если Форма.Элементы.СписокАктивныхЗадач.Видимость
		И Не ЗаполнятьСписокАктивныхЗадачПоДеревуВсехЗадач Тогда

		ЗаполнитьСписокАктивныхЗадачПоПредмету(Предмет, Список);
	КонецЕсли;

	ЗначениеВДанныеФормы(Список, Форма.СписокАктивныхЗадач);
	РаботаСБизнесПроцессамиКлиентСервер.УстановитьТекущуюСтрокуВСпискеАктивныхЗадач(Форма);

КонецПроцедуры

&ИзменениеИКонтроль("ДобавитьПроцессыИПодчиненныеЗадачи")
Процедура ЦППК_ДобавитьПроцессыИПодчиненныеЗадачи(Дерево, Процессы, ВспомогательныеПроцессы,
	ИспользоватьДатуИВремяВСрокахЗадач, Список = Неопределено, СтрокиСВедущимиЗадачами = Неопределено, КонтекстЗадач = Неопределено)
	
	// Инициализируем список ведущих задач
	Если СтрокиСВедущимиЗадачами = Неопределено Тогда
		СтрокиСВедущимиЗадачами = Новый Соответствие;
	КонецЕсли;
	
	ТаблицаПроцессов = Новый ТаблицаЗначений;
	ЗадачиУровня = Новый Массив;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("БизнесПроцессСсылка.Исполнение"));
	МассивТипов.Добавить(Тип("БизнесПроцессСсылка.КомплексныйПроцесс"));
	МассивТипов.Добавить(Тип("БизнесПроцессСсылка.Ознакомление"));
	МассивТипов.Добавить(Тип("БизнесПроцессСсылка.Приглашение"));
	МассивТипов.Добавить(Тип("БизнесПроцессСсылка.Рассмотрение"));
	МассивТипов.Добавить(Тип("БизнесПроцессСсылка.Регистрация"));
	МассивТипов.Добавить(Тип("БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач"));
	МассивТипов.Добавить(Тип("БизнесПроцессСсылка.Согласование"));
	МассивТипов.Добавить(Тип("БизнесПроцессСсылка.Подписание"));
	МассивТипов.Добавить(Тип("БизнесПроцессСсылка.Утверждение"));
	
	ТаблицаПроцессов.Колонки.Добавить("Процесс", Новый ОписаниеТипов(МассивТипов));
	
	Для Каждого СтрПроцесс Из Процессы Цикл
		Если БизнесПроцессыИЗадачиСервер.ЭтоПроцессИлиШаблонПроцесса(СтрПроцесс) Тогда
			СтрТаб = ТаблицаПроцессов.Добавить();
			СтрТаб.Процесс = СтрПроцесс;
		Иначе
			ЗадачиУровня.Добавить(СтрПроцесс);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Процессы.Процесс
		|ПОМЕСТИТЬ ТаблицаПроцессов
		|ИЗ
		|	&Процессы КАК Процессы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДанныеБизнесПроцессов.ГлавнаяЗадача,
		|	ДанныеБизнесПроцессов.ВедущаяЗадача,
		|	ДанныеБизнесПроцессов.БизнесПроцесс,
		|	ДанныеБизнесПроцессов.Наименование,
		|	ДанныеБизнесПроцессов.Завершен,
		|	ДанныеБизнесПроцессов.Дата,
		|	ДанныеБизнесПроцессов.Важность,
		|	ДанныеБизнесПроцессов.Состояние,
		|	ДанныеБизнесПроцессов.Стартован,
		|	ДанныеБизнесПроцессов.ПометкаУдаления
		|ПОМЕСТИТЬ Процессы
		|ИЗ
		|	ТаблицаПроцессов КАК ТаблицаПроцессов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
		|		ПО ТаблицаПроцессов.Процесс = ДанныеБизнесПроцессов.БизнесПроцесс
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗадачаИсполнителя.Ссылка,
		|	ЗадачаИсполнителя.Наименование,
		|	ЗадачаИсполнителя.ТекущийИсполнитель,
		|	ЗадачаИсполнителя.СрокИсполнения,
		|	ЗадачаИсполнителя.Выполнена,
		|	ЗадачаИсполнителя.ДатаИсполнения,
		|	ЗадачаИсполнителя.РезультатВыполнения,
		|	ЗадачаИсполнителя.ПринятаКИсполнению,
		|	ЗадачаИсполнителя.Автор,
		|	ЗадачаИсполнителя.Важность,
		|	ЗадачаИсполнителя.СостояниеБизнесПроцесса,
		|	ЗадачаИсполнителя.БизнесПроцесс,
		|	ЗадачаИсполнителя.Дата,
		|	ЗадачаИсполнителя.ПометкаУдаления
		|ПОМЕСТИТЬ ЗадачиПроцессов
		|ИЗ
		|	Процессы КАК Процессы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ПО Процессы.БизнесПроцесс = ЗадачаИсполнителя.БизнесПроцесс
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Процессы.ГлавнаяЗадача,
		|	Процессы.ВедущаяЗадача,
		|	Процессы.БизнесПроцесс КАК Ссылка,
		|	Процессы.Наименование,
		|	Процессы.Завершен КАК Выполнена,
		|	Процессы.Дата КАК Дата,
		|	ВЫБОР
		|		КОГДА Процессы.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиОбъектов.Низкая)
		|			ТОГДА 0
		|		КОГДА Процессы.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиОбъектов.Высокая)
		|			ТОГДА 2
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Важность,
		|	ВЫБОР
		|		КОГДА Процессы.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Остановлен)
		|			ТОГДА 0
		|		КОГДА Процессы.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Прерван)
		|			ТОГДА 1
		|		КОГДА НЕ Процессы.Стартован
		|		И Процессы.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|		И ПроцессыДляЗапуска.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияПроцессовДляЗапуска.ГотовКСтарту)
		|		И ПроцессыДляЗапуска.ДатаОтложенногоСтарта <> ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА 2
		|		КОГДА НЕ Процессы.Стартован
		|		И Процессы.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|		И ПроцессыДляЗапуска.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияПроцессовДляЗапуска.СтартОтменен)
		|		И ПроцессыДляЗапуска.ДатаОтложенногоСтарта <> ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА 3
		|		КОГДА
		|			РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.Положительно)
		|			ТОГДА 7
		|		КОГДА
		|			РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.ПоложительноСЗамечаниями)
		|			ТОГДА 6
		|		КОГДА
		|			РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.Отрицательно)
		|			ТОГДА 5
		|		КОГДА Процессы.Завершен = ИСТИНА
		|			ТОГДА 4
		|		ИНАЧЕ -1
		|	КОНЕЦ КАК СостояниеКартинка,
		|	ВЫБОР
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.НаКонтроле)
		|			ТОГДА ВЫБОР
		|				КОГДА КешИнформацииОбОбъектах.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1)
		|				ИЛИ КешИнформацииОбОбъектах.СрокИсполнения >= &ТекущаяДата
		|					ТОГДА 1
		|				ИНАЧЕ 3
		|			КОНЕЦ
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.СнятСКонтроля)
		|			ТОГДА 4
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.НаКонтролеНесколько)
		|			ТОГДА ВЫБОР
		|				КОГДА КешИнформацииОбОбъектах.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1)
		|				ИЛИ КешИнформацииОбОбъектах.СрокИсполнения >= &ТекущаяДата
		|					ТОГДА 5
		|				КОГДА КешИнформацииОбОбъектах.СрокИсполненияОбщий = ДАТАВРЕМЯ(1, 1, 1)
		|				ИЛИ КешИнформацииОбОбъектах.СрокИсполненияОбщий >= &ТекущаяДата
		|					ТОГДА 8
		|				ИНАЧЕ 6
		|			КОНЕЦ
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.СнятСКонтроляНесколько)
		|			ТОГДА 7
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.СмешанноНесколько)
		|			ТОГДА ВЫБОР
		|				КОГДА КешИнформацииОбОбъектах.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1)
		|				ИЛИ КешИнформацииОбОбъектах.СрокИсполнения >= &ТекущаяДата
		|					ТОГДА 9
		|				ИНАЧЕ 10
		|			КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СостояниеКонтроля,
		|	Процессы.ПометкаУдаления КАК ПометкаУдаления,
		|	ЕСТЬNULL(ПроцессыОбработокОбъектов.Обработка.ПричинаПрерывания, """") КАК ПричинаПрерывания,
		|	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(ПроцессыОбработокОбъектов.Обработка.Прервал), """") КАК Прервал,
		|	ЕСТЬNULL(ПроцессыОбработокОбъектов.Обработка.ДатаОкончания, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПрерывания
		|ИЗ
		|	Процессы КАК Процессы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтложеногоСтартаПроцессов КАК ПроцессыДляЗапуска
		|		ПО Процессы.БизнесПроцесс = ПроцессыДляЗапуска.БизнесПроцесс
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РезультатыВыполненияПроцессовИЗадач КАК РезультатыВыполненияПроцессовИЗадач
		|		ПО Процессы.БизнесПроцесс = РезультатыВыполненияПроцессовИЗадач.Объект
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КешИнформацииОбОбъектах КАК КешИнформацииОбОбъектах
		|		ПО Процессы.БизнесПроцесс = КешИнформацииОбОбъектах.Объект
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПроцессыОбработокОбъектов КАК ПроцессыОбработокОбъектов
		|		ПО Процессы.БизнесПроцесс = ПроцессыОбработокОбъектов.Процесс
		|УПОРЯДОЧИТЬ ПО
		|	Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗадачиПроцессов.Ссылка,
		|	ЗадачиПроцессов.Наименование,
		|	ЗадачиПроцессов.ТекущийИсполнитель КАК Исполнитель,
		|	ЗадачиПроцессов.СрокИсполнения,
		|	ВЫБОР
		|		КОГДА ЗадачиПроцессов.Выполнена
		|			ТОГДА ЗадачиПроцессов.ДатаИсполнения
		|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
		|	КОНЕЦ КАК ДатаВыполнения,
		|	ЗадачиПроцессов.Выполнена,
		|	ВЫРАЗИТЬ(ЗадачиПроцессов.РезультатВыполнения КАК СТРОКА(500)) КАК РезультатВыполнения,
		|	ЗадачиПроцессов.ПринятаКИсполнению,
		|	ЗадачиПроцессов.Автор,
		|	ВЫБОР
		|		КОГДА ЗадачиПроцессов.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиОбъектов.Низкая)
		|			ТОГДА 0
		|		КОГДА ЗадачиПроцессов.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиОбъектов.Высокая)
		|			ТОГДА 2
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Важность,
		|	ВЫБОР
		|		КОГДА ОчередьЗаданийДокументооборота.СтатусЗадания = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий.ОшибкаВыполнения)
		|			ТОГДА 9
		|		КОГДА ОчередьЗаданийДокументооборота.СтатусЗадания = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий.Выполняется)
		|			ТОГДА 8
		|		КОГДА
		|			РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.Положительно)
		|			ТОГДА 7
		|		КОГДА
		|			РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.ПоложительноСЗамечаниями)
		|			ТОГДА 6
		|		КОГДА
		|			РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.Отрицательно)
		|			ТОГДА 5
		|		КОГДА ЗадачиПроцессов.Выполнена = ИСТИНА
		|			ТОГДА 4
		|		КОГДА ЗадачиПроцессов.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Остановлен)
		|			ТОГДА 0
		|		КОГДА ЗадачиПроцессов.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Прерван)
		|			ТОГДА 1
		|		ИНАЧЕ -1
		|	КОНЕЦ КАК СостояниеКартинка,
		|	МАКСИМУМ(ЕСТЬNULL(ФлагиОбъектов.Флаг, ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.ПустаяСсылка))) КАК Флаг,
		|	МАКСИМУМ(ВЫБОР
		|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Красный)
		|			ТОГДА 1
		|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Синий)
		|			ТОГДА 2
		|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Желтый)
		|			ТОГДА 3
		|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Зеленый)
		|			ТОГДА 4
		|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Оранжевый)
		|			ТОГДА 5
		|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Лиловый)
		|			ТОГДА 6
		|		ИНАЧЕ 0
		|	КОНЕЦ) КАК НомерФлага,
		|	ВЫБОР
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.НаКонтроле)
		|			ТОГДА ВЫБОР
		|				КОГДА КешИнформацииОбОбъектах.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1)
		|				ИЛИ КешИнформацииОбОбъектах.СрокИсполнения >= &ТекущаяДата
		|					ТОГДА 1
		|				ИНАЧЕ 3
		|			КОНЕЦ
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.СнятСКонтроля)
		|			ТОГДА 4
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.НаКонтролеНесколько)
		|			ТОГДА ВЫБОР
		|				КОГДА КешИнформацииОбОбъектах.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1)
		|				ИЛИ КешИнформацииОбОбъектах.СрокИсполнения >= &ТекущаяДата
		|					ТОГДА 5
		|				КОГДА КешИнформацииОбОбъектах.СрокИсполненияОбщий = ДАТАВРЕМЯ(1, 1, 1)
		|				ИЛИ КешИнформацииОбОбъектах.СрокИсполненияОбщий >= &ТекущаяДата
		|					ТОГДА 8
		|				ИНАЧЕ 6
		|			КОНЕЦ
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.СнятСКонтроляНесколько)
		|			ТОГДА 7
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.СмешанноНесколько)
		|			ТОГДА ВЫБОР
		|				КОГДА КешИнформацииОбОбъектах.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1)
		|				ИЛИ КешИнформацииОбОбъектах.СрокИсполнения >= &ТекущаяДата
		|					ТОГДА 9
		|				ИНАЧЕ 10
		|			КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СостояниеКонтроля,
		|	ЗадачиПроцессов.СостояниеБизнесПроцесса КАК СостояниеБизнесПроцесса,
		|	ЗадачиПроцессов.БизнесПроцесс КАК БизнесПроцесс,
		|	ЗадачиПроцессов.Дата КАК Дата,
#Вставка     
		|	ЗадачиПроцессов.Ссылка.ИдентификаторИсполнителя КАК ИдентификаторИсполнителя,
#КонецВставки
		|	ЗадачиПроцессов.ПометкаУдаления КАК ПометкаУдаления
		|ИЗ
		|	ЗадачиПроцессов КАК ЗадачиПроцессов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РезультатыВыполненияПроцессовИЗадач КАК РезультатыВыполненияПроцессовИЗадач
		|		ПО ЗадачиПроцессов.Ссылка = РезультатыВыполненияПроцессовИЗадач.Объект
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФлагиОбъектов КАК ФлагиОбъектов
		|		ПО ЗадачиПроцессов.Ссылка = ФлагиОбъектов.Объект
		|		И ФлагиОбъектов.ФизическоеЛицо = &ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КешИнформацииОбОбъектах КАК КешИнформацииОбОбъектах
		|		ПО ЗадачиПроцессов.Ссылка = КешИнформацииОбОбъектах.Объект
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОчередьЗаданийДокументооборота КАК ОчередьЗаданийДокументооборота
		|		ПО ЗадачиПроцессов.Ссылка = ОчередьЗаданийДокументооборота.ПредметЗадания
		|		И ОчередьЗаданийДокументооборота.СтатусЗадания <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий.Завершено)
		|СГРУППИРОВАТЬ ПО
		|	ЗадачиПроцессов.Ссылка,
		|	ЗадачиПроцессов.Наименование,
		|	ЗадачиПроцессов.ТекущийИсполнитель,
		|	ЗадачиПроцессов.СрокИсполнения,
		|	ВЫБОР
		|		КОГДА ЗадачиПроцессов.Выполнена
		|			ТОГДА ЗадачиПроцессов.ДатаИсполнения
		|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
		|	КОНЕЦ,
		|	ЗадачиПроцессов.Выполнена,
		|	ВЫРАЗИТЬ(ЗадачиПроцессов.РезультатВыполнения КАК СТРОКА(500)),
		|	ЗадачиПроцессов.ПринятаКИсполнению,
		|	ЗадачиПроцессов.Автор,
		|	ВЫБОР
		|		КОГДА ЗадачиПроцессов.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиОбъектов.Низкая)
		|			ТОГДА 0
		|		КОГДА ЗадачиПроцессов.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиОбъектов.Высокая)
		|			ТОГДА 2
		|		ИНАЧЕ 1
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ОчередьЗаданийДокументооборота.СтатусЗадания = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий.ОшибкаВыполнения)
		|			ТОГДА 9
		|		КОГДА ОчередьЗаданийДокументооборота.СтатусЗадания = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий.Выполняется)
		|			ТОГДА 8
		|		КОГДА
		|			РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.Положительно)
		|			ТОГДА 7
		|		КОГДА
		|			РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.ПоложительноСЗамечаниями)
		|			ТОГДА 6
		|		КОГДА
		|			РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.Отрицательно)
		|			ТОГДА 5
		|		КОГДА ЗадачиПроцессов.Выполнена = ИСТИНА
		|			ТОГДА 4
		|		КОГДА ЗадачиПроцессов.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Остановлен)
		|			ТОГДА 0
		|		КОГДА ЗадачиПроцессов.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Прерван)
		|			ТОГДА 1
		|		ИНАЧЕ -1
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.НаКонтроле)
		|			ТОГДА ВЫБОР
		|				КОГДА КешИнформацииОбОбъектах.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1)
		|				ИЛИ КешИнформацииОбОбъектах.СрокИсполнения >= &ТекущаяДата
		|					ТОГДА 1
		|				ИНАЧЕ 3
		|			КОНЕЦ
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.СнятСКонтроля)
		|			ТОГДА 4
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.НаКонтролеНесколько)
		|			ТОГДА ВЫБОР
		|				КОГДА КешИнформацииОбОбъектах.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1)
		|				ИЛИ КешИнформацииОбОбъектах.СрокИсполнения >= &ТекущаяДата
		|					ТОГДА 5
		|				КОГДА КешИнформацииОбОбъектах.СрокИсполненияОбщий = ДАТАВРЕМЯ(1, 1, 1)
		|				ИЛИ КешИнформацииОбОбъектах.СрокИсполненияОбщий >= &ТекущаяДата
		|					ТОГДА 8
		|				ИНАЧЕ 6
		|			КОНЕЦ
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.СнятСКонтроляНесколько)
		|			ТОГДА 7
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.СмешанноНесколько)
		|			ТОГДА ВЫБОР
		|				КОГДА КешИнформацииОбОбъектах.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1)
		|				ИЛИ КешИнформацииОбОбъектах.СрокИсполнения >= &ТекущаяДата
		|					ТОГДА 9
		|				ИНАЧЕ 10
		|			КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	ЗадачиПроцессов.СостояниеБизнесПроцесса,
		|	ЗадачиПроцессов.БизнесПроцесс,
		|	ЗадачиПроцессов.Дата,
#Вставка     
		|	ЗадачиПроцессов.Ссылка.ИдентификаторИсполнителя,
#КонецВставки
		|	ЗадачиПроцессов.ПометкаУдаления
		|УПОРЯДОЧИТЬ ПО
		|	Дата
		|ИТОГИ
		|ПО
		|	БизнесПроцесс
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДочерниеБизнесПроцессы.ДочернийПроцесс КАК Процесс
		|ИЗ
		|	Процессы КАК Процессы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДочерниеБизнесПроцессы КАК ДочерниеБизнесПроцессы
		|		ПО Процессы.БизнесПроцесс = ДочерниеБизнесПроцессы.РодительскийПроцесс";
		
	Запрос.УстановитьПараметр("Процессы", ТаблицаПроцессов);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("ФизическоеЛицо", ПараметрыСеанса.ФизическоеЛицоПользователя);
	
	Запрос.УстановитьПараметр("СотрудникиПользователя",
		Сотрудники.ТекущийПользовательИСотрудники());
	
	РезультатыЗапрос = Запрос.ВыполнитьПакет();
	
	// Заполнение процессами
	ВыборкаПроцессовКДобавлению = РезультатыЗапрос[3].Выбрать();
	Пока ВыборкаПроцессовКДобавлению.Следующий() Цикл
		
		СтрокаПроцесс = Неопределено;
		
		// Пропускам процессы, у которых заполнены и главная и ведущая задача.
		// Считаем, что такие процессы должны отображаться только под главной задачей,
		// они были сформирование из нее. Связь через ведущую задачу нужна только для
		// выполнения вышестоящего процесса. 
		Если ЗначениеЗаполнено(ВыборкаПроцессовКДобавлению.ГлавнаяЗадача)
			И ЗначениеЗаполнено(ВыборкаПроцессовКДобавлению.ВедущаяЗадача) Тогда
			
			СтрокаВедущейЗадачи = Дерево.Строки.Найти(
				ВыборкаПроцессовКДобавлению.ВедущаяЗадача, "Ссылка", Истина);
			Если СтрокаВедущейЗадачи <> Неопределено Тогда
				СтрокиСВедущимиЗадачами.Удалить(ВыборкаПроцессовКДобавлению.ВедущаяЗадача);
				КоллекцияСтрок = СтрокаВедущейЗадачи.Родитель.Строки;
				КоллекцияСтрок.Удалить(СтрокаВедущейЗадачи);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаПроцессовКДобавлению.ГлавнаяЗадача) Тогда
			СтрокаРодитель = Дерево.Строки.Найти(
				ВыборкаПроцессовКДобавлению.ГлавнаяЗадача, "Ссылка", Истина);
			Если СтрокаРодитель <> Неопределено Тогда
				СтрокаПроцесс = СтрокаРодитель.Строки.Добавить();
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(ВыборкаПроцессовКДобавлению.ВедущаяЗадача) Тогда
			// Заменяем ведущую строку ведомым процессом
			СтрокаПроцесс = Дерево.Строки.Найти(
				ВыборкаПроцессовКДобавлению.ВедущаяЗадача, "Ссылка", Истина);
			
			// Удаляем ведущую задачу из списка
			СтрокиСВедущимиЗадачами.Удалить(ВыборкаПроцессовКДобавлению.ВедущаяЗадача);
		КонецЕсли;
		
		Если СтрокаПроцесс = Неопределено Тогда
			СтрокаПроцесс = Дерево.Строки.Добавить();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаПроцесс, ВыборкаПроцессовКДобавлению);
		Если ЗначениеЗаполнено(СтрокаПроцесс.Родитель)
			И ЗначениеЗаполнено(СтрокаПроцесс.Родитель.Родитель)
			И СтрокаПроцесс.Родитель.Родитель.Тип = 2 Тогда
			
			СтрокаПроцесс.Тип = 2;
		ИначеЕсли ВспомогательныеПроцессы.Найти(СтрокаПроцесс.Ссылка) <> Неопределено Тогда
			СтрокаПроцесс.Тип = 2;
		Иначе
			СтрокаПроцесс.Тип = 0;
		КонецЕсли;
		
		СтрокаПроцесс.ПринятаКИсполнению = Истина;
		
		// Выводим информацию о прерывании
		Если ВыборкаПроцессовКДобавлению.СостояниеКартинка = 1 
			И ЗначениеЗаполнено(ВыборкаПроцессовКДобавлению.ДатаПрерывания) Тогда
			СтрокаПроцесс.РезультатВыполнения = ИнформацияПрерывания(ВыборкаПроцессовКДобавлению);
		КонецЕсли;	
		
	КонецЦикла;
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	
	// Определение подчиненных процессов.
	ПодчиненныеПроцессы = РезультатыЗапрос[5].Выгрузить().ВыгрузитьКолонку("Процесс");
	
	// Заполнение задачами процессов
	ЗадачиПроцессовДляПроверкиПодчиненных = Новый Массив;
	ВыборкаЗадачКДобавлению = РезультатыЗапрос[4].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
	Пока ВыборкаЗадачКДобавлению.Следующий() Цикл
		
		СтрокаПроцесс = Дерево.Строки.Найти(
			ВыборкаЗадачКДобавлению.БизнесПроцесс, "Ссылка", Истина);
		
		// Пропускаем те задачи, процессых которых не были добавлены. 
		Если СтрокаПроцесс = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		#Вставка 
		//++AxelSoft Шарапова 20.05.2025 САНФ-033767
		ЦППК_БизнесПроцесс = ВыборкаЗадачКДобавлению.БизнесПроцесс;
		МетаданныеПроцесса = ЦППК_БизнесПроцесс.Метаданные();
        ЦППК_МассивЗадач = Новый Массив;
	    ЦППК_СтруктураИдентификаторов = Новый Соответствие;
		//--AxelSoft Шарапова 20.05.2025 САНФ-033767
		#КонецВставки 
		
		ВыборкаЗадачДетальныеЗаписи = ВыборкаЗадачКДобавлению.
			Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаЗадачДетальныеЗаписи.Следующий() Цикл
			
			СтрокаЗадача = СтрокаПроцесс.Строки.Добавить();
			Если ВыборкаЗадачДетальныеЗаписи.Выполнена
				Или ВыборкаЗадачДетальныеЗаписи.СрокИсполнения = Дата(1,1,1) Тогда
				
				СтрокаЗадача.Просрочена = Ложь;
				
			ИначеЕсли ИспользоватьДатуИВремяВСрокахЗадач Тогда
				Если ВыборкаЗадачДетальныеЗаписи.СрокИсполнения < ТекущаяДатаСеанса Тогда
					СтрокаЗадача.Просрочена = Истина;
				КонецЕсли;
			Иначе
				Если КонецДня(ВыборкаЗадачДетальныеЗаписи.СрокИсполнения) < ТекущаяДатаСеанса Тогда
					СтрокаЗадача.Просрочена = Истина;
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(ВыборкаЗадачДетальныеЗаписи.Исполнитель) Тогда
				ЗаполнитьЗначенияСвойств(СтрокаЗадача, ВыборкаЗадачДетальныеЗаписи);
				// Добавление задачи в список активных
				#Удаление
				Если Список <> Неопределено
					И Не ВыборкаЗадачДетальныеЗаписи.Выполнена
					И Не ВыборкаЗадачДетальныеЗаписи.ПометкаУдаления
					И ВыборкаЗадачДетальныеЗаписи.СостояниеБизнесПроцесса = 
						Перечисления.СостоянияБизнесПроцессов.Активен Тогда
					
					СтрокаАктивнаяЗадача = Список.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаАктивнаяЗадача, СтрокаЗадача);
				КонецЕсли;
				#КонецУдаления
			Иначе // Для ведущих задач. У ведущих задач нет исполнителя.
				ЗаполнитьЗначенияСвойств(СтрокаЗадача, ВыборкаЗадачДетальныеЗаписи, "Ссылка, Наименование");
				СтрокиСВедущимиЗадачами.Вставить(СтрокаЗадача.Ссылка, СтрокаЗадача);
			КонецЕсли;
			СтрокаЗадача.Тип = 1;
			
			// Добавим подчиненные задачи.
			Если Список = Неопределено Тогда
				ПодчиненныеЗадачиПоДействию =
					КонтекстЗадач.ПодчиненныеЗадачи[СтрокаЗадача.Ссылка];
				Если ПодчиненныеЗадачиПоДействию <> Неопределено Тогда
					Для Каждого ПодчиненнаяЗадача Из ПодчиненныеЗадачиПоДействию Цикл
						ПодчиненныеПроцессы.Добавить(ПодчиненнаяЗадача);
					КонецЦикла;
				КонецЕсли;
			Иначе
				ЗадачиПроцессовДляПроверкиПодчиненных.Добавить(СтрокаЗадача.Ссылка);
			КонецЕсли;
			
			#Вставка 
			Если ЦППК_СтруктураИдентификаторов[ВыборкаЗадачДетальныеЗаписи.ИдентификаторИсполнителя] = Неопределено Тогда
				ЦППК_СтруктураИдентификаторов.Вставить(ВыборкаЗадачДетальныеЗаписи.ИдентификаторИсполнителя, СтрокаЗадача);
			КонецЕсли;
			#КонецВставки 
						
		КонецЦикла;
		
		#Вставка 
		
		ЦППК_УпорядочитьСтрокиПроцесса(ЦППК_СтруктураИдентификаторов, МетаданныеПроцесса, ЦППК_БизнесПроцесс, СтрокаПроцесс, Список);
		#КонецВставки
		
	КонецЦикла;
	
	// Заполнение задачами.
	Для Каждого ЗадачаУровня Из ЗадачиУровня Цикл
		
		// Добавим строку задачи.
		СтрокаПроцесс = Неопределено;
		
		РеквизитыЗадачи = КонтекстЗадач.РеквизитыЗадач[ЗадачаУровня];
		ДанныеЗадачи = КонтекстЗадач.ДанныеЗадач.Найти(ЗадачаУровня, "Задача");
		Если РеквизитыЗадачи = Неопределено
			Или ДанныеЗадачи = Неопределено
			Или (ЗначениеЗаполнено(РеквизитыЗадачи.Источник)
				И БизнесПроцессыИЗадачиСервер.ЭтоПроцессИлиШаблонПроцесса(РеквизитыЗадачи.Источник)) Тогда
#Удаление
			Продолжить;
#КонецУдаления
#Вставка
				Если РеквизитыЗадачи = Неопределено тогда
					Продолжить;
				ИначеЕсли ТипЗнч(РеквизитыЗадачи.Источник) = Тип("БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач") И Дерево.Строки.Найти(РеквизитыЗадачи.Источник, "Ссылка", Истина) = Неопределено Тогда
					// для добавления переноса сроков из подзадач
					СтрокаРодитель = Дерево.Строки.Найти(
					РеквизитыЗадачи.ВышестоящееДействие, "Ссылка", Истина);
					
					Если СтрокаРодитель <> Неопределено Тогда
						ЦППК_ЗаполнитьПоВнешнимПодзадачам(Дерево, СтрокаРодитель, РеквизитыЗадачи.Источник);	
					КонецЕсли;
					
					Продолжить;
				Иначе
					Продолжить;
				КонецЕсли;
#КонецВставки
		КонецЕсли;
		
		Если ТипЗнч(РеквизитыЗадачи.Источник) = Тип("СправочникСсылка.ДействияОзнакомления") Тогда
			СостояниеДействия = РегистрыСведений.СостоянияДействий.СостояниеДействия(РеквизитыЗадачи.Источник);
			Если СостояниеДействия	= Перечисления.СостоянияВыполненияДействий.Пропущено Тогда
				Продолжить;
			КонецЕсли;		
		КонецЕсли;	
		
		ЕстьПравоЧтение = КонтекстЗадач.ПраваЧтенияПоЗадачам[ЗадачаУровня] = Истина;
		
		Если ЗначениеЗаполнено(РеквизитыЗадачи.ВышестоящееДействие) Тогда
			
			АктивноеДействие = КонтекстЗадач.АктивныеДействияПоЗадачам.Найти(
				РеквизитыЗадачи.ВышестоящееДействие,
				"ДействиеЗадачи");
			Если АктивноеДействие <> Неопределено Тогда
				
				Если ЗначениеЗаполнено(АктивноеДействие.Источник)
					И ТипЗнч(АктивноеДействие.Источник) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
					СтрокаРодитель = Дерево.Строки.Найти(
						АктивноеДействие.Источник, "Ссылка", Истина);
				Иначе
					СтрокаРодитель = Дерево.Строки.Найти(
						РеквизитыЗадачи.ВышестоящееДействие, "Ссылка", Истина);
				КонецЕсли;
				
				Если СтрокаРодитель <> Неопределено Тогда
					СтрокаПроцесс = СтрокаРодитель.Строки.Добавить();
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(РеквизитыЗадачи.ВышестоящаяЗадача) Тогда
			
			СтрокаРодитель = Дерево.Строки.Найти(
				РеквизитыЗадачи.ВышестоящаяЗадача, "Ссылка", Истина);
			
			Если СтрокаРодитель <> Неопределено Тогда
				СтрокаПроцесс = СтрокаРодитель.Строки.Добавить();
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаПроцесс = Неопределено Тогда
			СтрокаПроцесс = Дерево.Строки.Добавить();
		КонецЕсли;
		
		СтрокаПроцесс.Ссылка = ЗадачаУровня;
		СтрокаПроцесс.Наименование = ?(ЕстьПравоЧтение,
			ДанныеЗадачи.Заголовок,
			НСтр("ru = 'Описание скрыто'"));
		СтрокаПроцесс.Выполнена = ДанныеЗадачи.Выполнена;
		СтрокаПроцесс.Флаг = ДанныеЗадачи.Флаг;
		СтрокаПроцесс.НомерФлага =
			РаботаСФлагамиОбъектовСервер.ПолучитьНомерФлага(ДанныеЗадачи.Флаг);
		
		СтрокаПроцесс.Важность =
			Справочники.ПриоритетыЗадач.ИндексКартинкиПриоритета(ДанныеЗадачи.Приоритет);
		
		ХарактерРезультата =
			РаботаСЗадачамиПовтИсп.ХарактерРезультата(ДанныеЗадачи.РезультатЗадачи);
		Если ДанныеЗадачи.ВидСостоянияЗадачи = Перечисления.ВидыСостоянийЗадач.Отложена Тогда
			СтрокаПроцесс.СостояниеКартинка = 0;
		ИначеЕсли ДанныеЗадачи.ВидСостоянияЗадачи = Перечисления.ВидыСостоянийЗадач.Отменена Тогда
			СтрокаПроцесс.СостояниеКартинка = 1;
		ИначеЕсли ХарактерРезультата = Перечисления.ХарактерыРезультатов.Положительный Тогда
			СтрокаПроцесс.СостояниеКартинка = 7;
		ИначеЕсли ХарактерРезультата = Перечисления.ХарактерыРезультатов.ПоложительныйСЗамечаниями Тогда
			СтрокаПроцесс.СостояниеКартинка = 6;
		ИначеЕсли ХарактерРезультата = Перечисления.ХарактерыРезультатов.Отрицательный Тогда
			СтрокаПроцесс.СостояниеКартинка = 5;
		ИначеЕсли ХарактерРезультата = Перечисления.ХарактерыРезультатов.Нейтральный Тогда
			СтрокаПроцесс.СостояниеКартинка = 4;
		Иначе
			СтрокаПроцесс.СостояниеКартинка = -1;
		КонецЕсли;
		
		СтрокаПроцесс.СостояниеКонтроля = Контроль.ИндексКартинкиКонтроля(
			ДанныеЗадачи.СостояниеКонтроля,
			ДанныеЗадачи.КонтрольныйСрок,
			ДанныеЗадачи.КонтрольныйСрокОбщий);
		
		СтрокаПроцесс.Тип = 0;
		СтрокаПроцесс.ПринятаКИсполнению = Истина;
		
		// Добавим строки действий задачи.
		АктивныеДействияПоЗадаче = КонтекстЗадач.АктивныеДействияПоЗадачам.НайтиСтроки(
			Новый Структура("Задача", ЗадачаУровня)); 
			
		Если ТипЗнч(РеквизитыЗадачи.Источник) = Тип("СправочникСсылка.ДействияОзнакомления") Тогда
				
			РеквизитыДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыЗадачи.Источник, "Автор, ОжидатьЗавершения, ПомещеноВИсторию");
			
			СостояниеДействия = РегистрыСведений.СостоянияДействий.СостояниеДействия(РеквизитыЗадачи.Источник);
			
			Если Истина Тогда   //  всегда
				
				ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
				
				ДействиеОзнакомления = РеквизитыЗадачи.Источник;
				
				СостояниеИДата = РегистрыСведений.СостоянияДействий.СостояниеИДатаСостоянияДействия(ДействиеОзнакомления);
				ДатаОтсчета = СостояниеИДата.Дата;      
				
				МаксимальноеЧислоУчастниковДляПоказа = Справочники.ДействияОзнакомления.МаксимальноеЧислоУчастниковДляПоказа();
				ЧислоУчастниковДействия = РегистрыСведений.УчастникиОзнакомлений.ЧислоУчастниковДействия(ДействиеОзнакомления);
				
				Если ЧислоУчастниковДействия <= МаксимальноеЧислоУчастниковДляПоказа Тогда // менее 50, покажем всех
						
					УчастникиИДатыДействия = РегистрыСведений.УчастникиОзнакомлений.УчастникиИДатыДействия(ДействиеОзнакомления);

					Для Каждого Участник Из УчастникиИДатыДействия Цикл       
						
						СтрокаЗадача = СтрокаПроцесс.Строки.Добавить();
						
						СтрокаЗадача.Ссылка = ДействиеОзнакомления;    
						Если ТипЗнч(Участник.Участник) = Тип("СправочникСсылка.Сотрудники") 
							Или ТипЗнч(Участник.Участник) = Тип("СправочникСсылка.ПолныеРоли")
							Или ТипЗнч(Участник.Участник) = Тип("СправочникСсылка.АвтоподстановкиДляОбъектов") Тогда
							
							СтрокаЗадача.Ссылка = ДействияВызовСервера.ДействиеЗадачиДляСтрокиОзнакомления(
								ДействиеОзнакомления, Участник.ИдентификаторУчастника); // действие задачи  
								
							ДобавитьПодзадачи(СтрокаЗадача);	
								
						КонецЕсли;	
						
						СтрокаЗадача.Наименование = Строка(ДействиеОзнакомления);
						СтрокаЗадача.Исполнитель = Участник.Участник; 
						СтрокаЗадача.Автор = РеквизитыДействия.Автор; 
						
						СтрокаЗадача.ДатаВыполнения = Участник.ДатаЗавершения;
						
						// срок считать как относит срок + дата состояния действия
						
						СтрокаЗадача.СрокИсполнения = Участник.Срок;      
						Если СтрокаЗадача.СрокИсполнения < ТекущаяДатаСеанса() Тогда
							СтрокаЗадача.Просрочена = Истина;
						КонецЕсли;	
						
						СтрокаЗадача.СостояниеКартинка = -1;    
						
						// сперва общее состояние
						Если СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Остановлено Тогда // пауза
							СтрокаЗадача.СостояниеКартинка = 0; 
						ИначеЕсли РеквизитыДействия.ПомещеноВИсторию Тогда
							СтрокаЗадача.СостояниеКартинка = 1;   // стоп
						Иначе	 // тут уже персональное состояние
							
							Если Участник.Состояние = Перечисления.СостоянияОзнакомления.Ознакомился Тогда
								
								СтрокаЗадача.СостояниеКартинка = 4;   // галочка выполнено  
								СтрокаЗадача.ПринятаКИсполнению = Истина;
								СтрокаЗадача.Выполнена = Истина;
								
							ИначеЕсли Участник.Состояние = Перечисления.СостоянияОзнакомления.ВРаботе Тогда	
								
								СтрокаЗадача.ПринятаКИсполнению = Истина;
								
							КонецЕсли;	
							
						КонецЕсли;	
						
						СтрокаЗадача.Тип = 1;    
						СтрокаЗадача.Важность = СтрокаПроцесс.Важность;         
						
					КонецЦикла;	
						
				Иначе  // более 50, покажем группы именно как группы
						
					УчастникиДействия = Справочники.ДействияОзнакомления.УчастникиДействия(ДействиеОзнакомления);
					
					УчастникиИДатыДействия = РегистрыСведений.УчастникиОзнакомлений.УчастникиИДатыДействия(ДействиеОзнакомления);
					ПолноеКоличество = УчастникиИДатыДействия.Количество();
					
					ЕстьЗаписиРС = Ложь;
					РезультатыОзнакомлений = Справочники.ДействияОзнакомления.РезультатыОзнакомлений(ДействиеОзнакомления, ЕстьЗаписиРС);
					
					Для Каждого ТекУчастник Из УчастникиДействия Цикл          
						
						НоваяСсылкаДляОткрытия = Неопределено;
						ДатаВыполнения = Неопределено;
						
						Если ТипЗнч(ТекУчастник.Участник) = Тип("СправочникСсылка.Сотрудники") 
							Или ТипЗнч(ТекУчастник.Участник) = Тип("СправочникСсылка.ПолныеРоли")
							Или ТипЗнч(ТекУчастник.Участник) = Тип("СправочникСсылка.АвтоподстановкиДляОбъектов") Тогда
							
							СтрокаРегистра = УчастникиИДатыДействия.Найти(ТекУчастник.Идентификатор, "ИдентификаторУчастникаДействия");
							Если СтрокаРегистра <> Неопределено Тогда
							
								НоваяСсылкаДляОткрытия = ДействияВызовСервера.ДействиеЗадачиДляСтрокиОзнакомления(
									ДействиеОзнакомления, СтрокаРегистра.ИдентификаторУчастника); // действие задачи 
									
								ДатаВыполнения = СтрокаРегистра.ДатаЗавершения;	 
								
							Иначе
								// в РС нет участника, он удален как дубль - значит и тут не покажем.	
								Продолжить;
									
							КонецЕсли;		
								
						КонецЕсли;	
						
						СтрокаЗадача = СтрокаПроцесс.Строки.Добавить();
						
						СтрокаЗадача.Ссылка = ДействиеОзнакомления;  
						Если ЗначениеЗаполнено(НоваяСсылкаДляОткрытия) Тогда
							
							СтрокаЗадача.Ссылка = НоваяСсылкаДляОткрытия;   
							
							ДобавитьПодзадачи(СтрокаЗадача);
							
						КонецЕсли;	
						
						СтрокаЗадача.Наименование = Строка(ДействиеОзнакомления);
						СтрокаЗадача.Исполнитель = ТекУчастник.Участник;
						СтрокаЗадача.Автор = РеквизитыДействия.Автор;    
						
						Если ЗначениеЗаполнено(ДатаВыполнения) Тогда
							СтрокаЗадача.ДатаВыполнения = ДатаВыполнения;
						КонецЕсли;
						
						// срок считать как относит срок + дата состояния действия
						
						СтрокаЗадача.СрокИсполнения = СрокиИсполненияПроцессовКОРП.ЗаполнитьСрокИсполненияУчастника(
							ТекУчастник.Участник, 
							ДатаОтсчета,
							ТекУчастник.ВариантУстановкиСрока,
							ТекУчастник.Срок,
							ТекУчастник.СрокДни,
							ТекУчастник.СрокЧасы,
							ТекУчастник.СрокМинуты); 
							
						Если СтрокаЗадача.СрокИсполнения < ТекущаяДатаСеанса() Тогда
							СтрокаЗадача.Просрочена = Истина;
						КонецЕсли;	
							
						СтрокаЗадача.СостояниеКартинка = -1;    
						Если СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Остановлено Тогда // пауза
							СтрокаЗадача.СостояниеКартинка = 0; 
						ИначеЕсли РеквизитыДействия.ПомещеноВИсторию Тогда
							СтрокаЗадача.СостояниеКартинка = 1;   // стоп  
							
						Иначе
							
							СтруктураОзнакомления = РезультатыОзнакомлений.Получить(ТекУчастник.Идентификатор);
							Если СтруктураОзнакомления <> Неопределено Тогда                                 
								
								Если СтруктураОзнакомления.СколькоОзнакомлено = СтруктураОзнакомления.СколькоВсегоНадоОзнакомить Тогда
									
									// Завершено 
									СтрокаЗадача.СостояниеКартинка = 4;   // галочка выполнено  
									СтрокаЗадача.ПринятаКИсполнению = Истина;
									СтрокаЗадача.Выполнена = Истина;
									
								КонецЕсли;	 
								
								// если группа
								Если ТипЗнч(СтрокаЗадача.Исполнитель)  <> Тип("СправочникСсылка.ПолныеРоли")
									И ТипЗнч(СтрокаЗадача.Исполнитель) <> Тип("СправочникСсылка.Сотрудники")
									И ТипЗнч(СтрокаЗадача.Исполнитель)    <> Тип("СправочникСсылка.АвтоподстановкиДляОбъектов")Тогда
									
									СтрокаЗадача.Исполнитель = Строка(СтрокаЗадача.Исполнитель) + ", " 
									+ СтрШаблон(НСтр("ru = 'Ознакомлено %1 из %2'"), 
									СтруктураОзнакомления.СколькоОзнакомлено, СтруктураОзнакомления.СколькоВсегоНадоОзнакомить);
									
									СтрокаЗадача.ДатаВыполнения = СтруктураОзнакомления.ДатаЗавершенияИтоговая;
								
								КонецЕсли;
								
							КонецЕсли;
								
							
						КонецЕсли;	
						
						СтрокаЗадача.Тип = 1;
						СтрокаЗадача.Важность = СтрокаПроцесс.Важность;         
						
						Если СтрокаПроцесс.Строки.Количество() >= МаксимальноеЧислоУчастниковДляПоказа Тогда
							
							СтрокаЗадача.Наименование = СтрокаЗадача.Наименование + СтрШаблон(
								НСтр("ru = ' и др., всего %1, см ""Ход ознакомления"". '"), ПолноеКоличество);
							Прервать;	
						КонецЕсли;	
						
					КонецЦикла;	
						
				КонецЕсли;
				
			КонецЕсли;	
			
		КонецЕсли;	
		
		Для Каждого АктивноеДействие Из АктивныеДействияПоЗадаче Цикл
			
			ДанныеДействия = КонтекстЗадач.ДанныеДействийЗадач.Найти(
				АктивноеДействие.ДействиеЗадачи,
				"ДействиеЗадачи");
			Если ДанныеДействия = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаЗадача = СтрокаПроцесс.Строки.Добавить();
			
			СтрокаЗадача.Ссылка = АктивноеДействие.ДействиеЗадачи;
			СтрокаЗадача.Наименование = ?(ЕстьПравоЧтение,
				ДанныеДействия.Заголовок,
				НСтр("ru = 'Описание скрыто'"));
			СтрокаЗадача.Исполнитель = ДанныеДействия.Исполнитель;
			СтрокаЗадача.СрокИсполнения = ДанныеДействия.Срок;
			СтрокаЗадача.ПринятаКИсполнению = ДанныеДействия.ВРаботе Или ДанныеДействия.Выполнено;
			СтрокаЗадача.Автор = ДанныеДействия.Автор;
			СтрокаЗадача.Флаг = ДанныеДействия.Флаг;
			СтрокаЗадача.НомерФлага =
				РаботаСФлагамиОбъектовСервер.ПолучитьНомерФлага(ДанныеДействия.Флаг);
			СтрокаЗадача.Выполнена = ДанныеДействия.Выполнено;
			СтрокаЗадача.Просрочена = ДанныеДействия.Просрочено;
			
			СтрокаЗадача.ДатаВыполнения = ДанныеДействия.ДатаВыполнения;
			
			СтрокаЗадача.Важность =
				Справочники.ПриоритетыЗадач.ИндексКартинкиПриоритета(ДанныеЗадачи.Приоритет);
			
			ХарактерРезультата = РаботаСЗадачамиПовтИсп.ХарактерРезультата(ДанныеДействия.РезультатДействия);
			Если ХарактерРезультата = Перечисления.ХарактерыРезультатов.Положительный Тогда
				СтрокаЗадача.СостояниеКартинка = 7;
			ИначеЕсли ХарактерРезультата = Перечисления.ХарактерыРезультатов.ПоложительныйСЗамечаниями Тогда
				СтрокаЗадача.СостояниеКартинка = 6;
			ИначеЕсли ХарактерРезультата = Перечисления.ХарактерыРезультатов.Отрицательный Тогда
				СтрокаЗадача.СостояниеКартинка = 5;
			ИначеЕсли ХарактерРезультата = Перечисления.ХарактерыРезультатов.Нейтральный Тогда
				СтрокаЗадача.СостояниеКартинка = 4;
			ИначеЕсли Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоОтложенноеДействие(ДанныеДействия.ВидСостоянияУчастниковЗадач) Тогда
				СтрокаЗадача.СостояниеКартинка = 0;
			ИначеЕсли Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоОтмененноеДействие(ДанныеДействия.ВидСостоянияУчастниковЗадач) Тогда
				СтрокаЗадача.СостояниеКартинка = 1;
			Иначе
				СтрокаЗадача.СостояниеКартинка = -1;
			КонецЕсли;
			
			СтрокаЗадача.СостояниеКонтроля = Контроль.ИндексКартинкиКонтроля(
				ДанныеДействия.СостояниеКонтроля,
				ДанныеДействия.КонтрольныйСрок,
				ДанныеДействия.КонтрольныйСрокОбщий);
			
			Если ЗначениеЗаполнено(АктивноеДействие.РезультатДействияТекстом) Тогда
				СтрокаЗадача.РезультатВыполнения =
					?(ЕстьПравоЧтение,
						АктивноеДействие.РезультатДействияТекстом,
						НСтр("ru = 'Результат скрыт'"));
			КонецЕсли;
			
			СтрокаЗадача.Тип = 1;
			
			// Добавление задачи в список активных
			Если Список <> Неопределено И ДанныеДействия.ОжидаетВыполнения Тогда
				
				СтрСписка = Список.Добавить();
				СтрСписка.Ссылка = АктивноеДействие.ДействиеЗадачи;
				СтрСписка.Наименование = ?(ЕстьПравоЧтение,
					ДанныеДействия.Заголовок,
					НСтр("ru = 'Описание скрыто'"));
				СтрСписка.Исполнитель = ДанныеДействия.Исполнитель;
				СтрСписка.СрокИсполнения = ДанныеДействия.Срок;
				СтрСписка.ПринятаКИсполнению = ДанныеДействия.ВРаботе Или ДанныеДействия.Выполнено;
				СтрСписка.Автор = ДанныеДействия.Автор;
				СтрСписка.Флаг = ДанныеДействия.Флаг;
				СтрСписка.НомерФлага = РаботаСФлагамиОбъектовСервер.ПолучитьНомерФлага(ДанныеДействия.Флаг);
				СтрСписка.Выполнена = ДанныеДействия.Выполнено;
				СтрСписка.Дата = ДанныеДействия.ДатаСоздания;
				СтрСписка.Просрочена = ДанныеДействия.Просрочено;
				
				ХарактерРезультата = РаботаСЗадачамиПовтИсп.ХарактерРезультата(ДанныеДействия.РезультатДействия);
				Если ХарактерРезультата = Перечисления.ХарактерыРезультатов.Положительный Тогда
					СтрСписка.СостояниеКартинка = 7;
				ИначеЕсли ХарактерРезультата = Перечисления.ХарактерыРезультатов.ПоложительныйСЗамечаниями Тогда
					СтрСписка.СостояниеКартинка = 6;
				ИначеЕсли ХарактерРезультата = Перечисления.ХарактерыРезультатов.Отрицательный Тогда
					СтрСписка.СостояниеКартинка = 5;
				ИначеЕсли ХарактерРезультата = Перечисления.ХарактерыРезультатов.Нейтральный Тогда
					СтрСписка.СостояниеКартинка = 4;
				ИначеЕсли Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоОтложенноеДействие(ДанныеДействия.ВидСостоянияУчастниковЗадач) Тогда
					СтрСписка.СостояниеКартинка = 0;
				ИначеЕсли Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоОтмененноеДействие(ДанныеДействия.ВидСостоянияУчастниковЗадач) Тогда
					СтрСписка.СостояниеКартинка = 1;
				Иначе
					СтрСписка.СостояниеКартинка = -1;
				КонецЕсли;
				
			КонецЕсли;
			
			// Добавим подчиненные задачи.
			ПодчиненныеЗадачиПоДействию =
				КонтекстЗадач.ПодчиненныеЗадачи[АктивноеДействие.ДействиеЗадачи];
			Если ПодчиненныеЗадачиПоДействию <> Неопределено Тогда
				Для Каждого ПодчиненнаяЗадача Из ПодчиненныеЗадачиПоДействию Цикл
					ПодчиненныеПроцессы.Добавить(ПодчиненнаяЗадача);
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
		#Вставка 			
		ЦППК_ЗаполнитьЦиклыПроцессов(Дерево, КонтекстЗадач, ЕстьПравоЧтение);
		#КонецВставки
		
	КонецЦикла;
	
	Если ЗадачиПроцессовДляПроверкиПодчиненных.Количество() > 0 Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		ДействияПоИсточникам =
			Документы.ДействиеЗадачи.НайтиПоИсточникам(ЗадачиПроцессовДляПроверкиПодчиненных);
		
		ДействияИсточников = Новый Массив;
		Для Каждого КлючИЗначение Из ДействияПоИсточникам Цикл
			
			Если Не ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
				Продолжить;
			КонецЕсли;
			
			ДействияИсточников.Добавить(КлючИЗначение.Значение);
			
		КонецЦикла;
		
		Подзадачи = Документы.ДействиеЗадачи.НайтиПодзадачи(ДействияИсточников);
		
		ЗадачиДляКонтекста = Новый Массив;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			ЗадачиДляКонтекста,
			КонтекстЗадач.ЗадачиПоПриложению);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			ЗадачиДляКонтекста,
			Подзадачи);
		
		РеквизитыДействий =
			ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ДействияИсточников, "Задача");
		Для Каждого КлючИЗначение Из РеквизитыДействий Цикл
			
			ЗадачиДляКонтекста.Добавить(КлючИЗначение.Значение.Задача);
			
		КонецЦикла;
		
		ЗадачиДляКонтекста = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ЗадачиДляКонтекста);
		
		УстановитьПривилегированныйРежим(Ложь);
		
		НовыйКонтекстЗадач = КонтекстЗадач(ЗадачиДляКонтекста);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПодчиненныеПроцессы, Подзадачи);
		
	Иначе
		
		НовыйКонтекстЗадач = КонтекстЗадач;
		
	КонецЕсли;
	
	Если ПодчиненныеПроцессы.Количество() > 0 Тогда
		ДобавитьПроцессыИПодчиненныеЗадачи(Дерево, ПодчиненныеПроцессы, ВспомогательныеПроцессы,
			ИспользоватьДатуИВремяВСрокахЗадач, Список, СтрокиСВедущимиЗадачами, НовыйКонтекстЗадач);
	Иначе
		//Удаление из дерева ведущих задач
		Для Каждого СтрЗадача Из СтрокиСВедущимиЗадачами Цикл
			КоллекцияСтрок = СтрЗадача.Значение.Родитель.Строки;
			КоллекцияСтрок.Удалить(СтрЗадача.Значение);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Рекурсивная процедура, добавляет подчиненные процессы и задачи в дерево и список активных задач.
//
// Параметры:
//   Дерево - ДеревоЗначений - иерархия процессов и задач.
//   Процессы - Массив - массив ссылок на процессы текущего уровня. Первоначально передаются процессы находящиеся в корне дерева.
//   ВспомогательныеПроцессы - Массив - массив ссылок на вспомогательные процессы. Вспомогательным процессам имеют Тип = 2.
//   Список - ТаблицаЗначений - список активных задач (задачи в работе). Если список активных задач не задан, то он не заполняется.
//   СтрокиСВедущимиЗадачами - Соответствие.
//   КонтекстЗадач - Структура - См. РаботаСБизнесПроцессамиВызовСервера.КонтекстЗадач().
// 
Процедура ЦППК_ДобавитьПроцессыИПодчиненныеЗадачиПереопределяемый(Предмет, Дерево, Процессы, ВспомогательныеПроцессы,
	ИспользоватьДатуИВремяВСрокахЗадач, Список = Неопределено, СтрокиСВедущимиЗадачами = Неопределено, КонтекстЗадач = Неопределено)
	
	// Инициализируем список ведущих задач
	Если СтрокиСВедущимиЗадачами = Неопределено Тогда
		СтрокиСВедущимиЗадачами = Новый Соответствие;
	КонецЕсли;
	
	ТаблицаПроцессов = Новый ТаблицаЗначений;
	ЗадачиУровня = Новый Массив;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("БизнесПроцессСсылка.Исполнение"));
	МассивТипов.Добавить(Тип("БизнесПроцессСсылка.КомплексныйПроцесс"));
	МассивТипов.Добавить(Тип("БизнесПроцессСсылка.Ознакомление"));
	МассивТипов.Добавить(Тип("БизнесПроцессСсылка.Приглашение"));
	МассивТипов.Добавить(Тип("БизнесПроцессСсылка.Рассмотрение"));
	МассивТипов.Добавить(Тип("БизнесПроцессСсылка.Регистрация"));
	МассивТипов.Добавить(Тип("БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач"));
	МассивТипов.Добавить(Тип("БизнесПроцессСсылка.Согласование"));
	МассивТипов.Добавить(Тип("БизнесПроцессСсылка.Подписание"));
	МассивТипов.Добавить(Тип("БизнесПроцессСсылка.Утверждение"));
	
	ТаблицаПроцессов.Колонки.Добавить("Процесс", Новый ОписаниеТипов(МассивТипов));
	
	// ЦППК Горбачев А.В. 04.07.2024
	//
	// Переопределяем получение всех процессов по предмету с помощью запроса.
	// Только для предметов, которые были перенесены исторически до 2024 года.
	//
	// ++
	ГодПредмета = 2024;
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ДатаСоздания",Предмет.Метаданные()) Тогда
		ГодПредмета = Год(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Предмет, "ДатаСоздания"));
	КонецЕсли;
	
	//++AxelSoft Шарапова 26.08.2024 САНФ-028060
	Если ГодПредмета <= 2023 Тогда
		
		Процессы = ЦППК_ВсеПроцессыПоПредмету(Предмет);
		
	КонецЕсли;
	//--AxelSoft Шарапова 26.08.2024 САНФ-028060
	// --
	
	Для Каждого СтрПроцесс Из Процессы Цикл
		Если БизнесПроцессыИЗадачиСервер.ЭтоПроцессИлиШаблонПроцесса(СтрПроцесс) Тогда
			СтрТаб = ТаблицаПроцессов.Добавить();
			СтрТаб.Процесс = СтрПроцесс;
		Иначе
			ЗадачиУровня.Добавить(СтрПроцесс);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Процессы.Процесс
		|ПОМЕСТИТЬ ТаблицаПроцессов
		|ИЗ
		|	&Процессы КАК Процессы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДочерниеБизнесПроцессы.ДочернийПроцесс КАК Процесс
		|ПОМЕСТИТЬ втДочерниеПроцессы
		|ИЗ
		|	ТаблицаПроцессов КАК ТаблицаПроцессов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДочерниеБизнесПроцессы КАК ДочерниеБизнесПроцессы
		|		ПО (ТаблицаПроцессов.Процесс = ДочерниеБизнесПроцессы.РодительскийПроцесс)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДанныеБизнесПроцессов.ГлавнаяЗадача,
		|	ДанныеБизнесПроцессов.ВедущаяЗадача,
		|	ДанныеБизнесПроцессов.БизнесПроцесс,
		|	ДанныеБизнесПроцессов.Наименование,
		|	ДанныеБизнесПроцессов.Завершен,
		|	ДанныеБизнесПроцессов.Дата,
		|	ДанныеБизнесПроцессов.Важность,
		|	ДанныеБизнесПроцессов.Состояние,
		|	ДанныеБизнесПроцессов.Стартован,
		|	ДанныеБизнесПроцессов.ПометкаУдаления
		|ПОМЕСТИТЬ Процессы
		|ИЗ
		|	ТаблицаПроцессов КАК ТаблицаПроцессов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеБизнесПроцессов КАК ДанныеБизнесПроцессов
		|		ПО ТаблицаПроцессов.Процесс = ДанныеБизнесПроцессов.БизнесПроцесс
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗадачаИсполнителя.Ссылка,
		|	ЗадачаИсполнителя.Наименование,
		|	ЗадачаИсполнителя.ТекущийИсполнитель,
		|	ЗадачаИсполнителя.СрокИсполнения,
		|	ЗадачаИсполнителя.Выполнена,
		|	ЗадачаИсполнителя.ДатаИсполнения,
		|	ЗадачаИсполнителя.РезультатВыполнения,
		|	ЗадачаИсполнителя.ПринятаКИсполнению,
		|	ЗадачаИсполнителя.Автор,
		|	ЗадачаИсполнителя.Важность,
		|	ЗадачаИсполнителя.СостояниеБизнесПроцесса,
		|	ЗадачаИсполнителя.БизнесПроцесс,
		|	ЗадачаИсполнителя.Дата,
		|	ЗадачаИсполнителя.ПометкаУдаления
		|ПОМЕСТИТЬ ЗадачиПроцессов
		|ИЗ
		|	Процессы КАК Процессы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Задача.ЗадачаИсполнителя КАК ЗадачаИсполнителя
		|		ПО Процессы.БизнесПроцесс = ЗадачаИсполнителя.БизнесПроцесс
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Процессы.ГлавнаяЗадача,
		|	Процессы.ВедущаяЗадача,
		|	Процессы.БизнесПроцесс КАК Ссылка,
		|	Процессы.Наименование,
		|	Процессы.Завершен КАК Выполнена,
		|	Процессы.Дата КАК Дата,
		|	ВЫБОР
		|		КОГДА Процессы.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиОбъектов.Низкая)
		|			ТОГДА 0
		|		КОГДА Процессы.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиОбъектов.Высокая)
		|			ТОГДА 2
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Важность,
		|	ВЫБОР
		|		КОГДА Процессы.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Остановлен)
		|			ТОГДА 0
		|		КОГДА Процессы.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Прерван)
		|			ТОГДА 1
		|		КОГДА НЕ Процессы.Стартован
		|		И Процессы.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|		И ПроцессыДляЗапуска.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияПроцессовДляЗапуска.ГотовКСтарту)
		|		И ПроцессыДляЗапуска.ДатаОтложенногоСтарта <> ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА 2
		|		КОГДА НЕ Процессы.Стартован
		|		И Процессы.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Активен)
		|		И ПроцессыДляЗапуска.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияПроцессовДляЗапуска.СтартОтменен)
		|		И ПроцессыДляЗапуска.ДатаОтложенногоСтарта <> ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА 3
		|		КОГДА
		|			РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.Положительно)
		|			ТОГДА 7
		|		КОГДА
		|			РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.ПоложительноСЗамечаниями)
		|			ТОГДА 6
		|		КОГДА
		|			РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.Отрицательно)
		|			ТОГДА 5
		|		КОГДА Процессы.Завершен = ИСТИНА
		|			ТОГДА 4
		|		ИНАЧЕ -1
		|	КОНЕЦ КАК СостояниеКартинка,
		|	ВЫБОР
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.НаКонтроле)
		|			ТОГДА ВЫБОР
		|				КОГДА КешИнформацииОбОбъектах.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1)
		|				ИЛИ КешИнформацииОбОбъектах.СрокИсполнения >= &ТекущаяДата
		|					ТОГДА 1
		|				ИНАЧЕ 3
		|			КОНЕЦ
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.СнятСКонтроля)
		|			ТОГДА 4
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.НаКонтролеНесколько)
		|			ТОГДА ВЫБОР
		|				КОГДА КешИнформацииОбОбъектах.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1)
		|				ИЛИ КешИнформацииОбОбъектах.СрокИсполнения >= &ТекущаяДата
		|					ТОГДА 5
		|				КОГДА КешИнформацииОбОбъектах.СрокИсполненияОбщий = ДАТАВРЕМЯ(1, 1, 1)
		|				ИЛИ КешИнформацииОбОбъектах.СрокИсполненияОбщий >= &ТекущаяДата
		|					ТОГДА 8
		|				ИНАЧЕ 6
		|			КОНЕЦ
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.СнятСКонтроляНесколько)
		|			ТОГДА 7
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.СмешанноНесколько)
		|			ТОГДА ВЫБОР
		|				КОГДА КешИнформацииОбОбъектах.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1)
		|				ИЛИ КешИнформацииОбОбъектах.СрокИсполнения >= &ТекущаяДата
		|					ТОГДА 9
		|				ИНАЧЕ 10
		|			КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СостояниеКонтроля,
		|	Процессы.ПометкаУдаления КАК ПометкаУдаления,
		|	ЕСТЬNULL(ПроцессыОбработокОбъектов.Обработка.ПричинаПрерывания, """") КАК ПричинаПрерывания,
		|	ЕСТЬNULL(ПРЕДСТАВЛЕНИЕ(ПроцессыОбработокОбъектов.Обработка.Прервал), """") КАК Прервал,
		|	ЕСТЬNULL(ПроцессыОбработокОбъектов.Обработка.ДатаОкончания, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПрерывания
		|ИЗ
		|	Процессы КАК Процессы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтложеногоСтартаПроцессов КАК ПроцессыДляЗапуска
		|		ПО Процессы.БизнесПроцесс = ПроцессыДляЗапуска.БизнесПроцесс
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РезультатыВыполненияПроцессовИЗадач КАК РезультатыВыполненияПроцессовИЗадач
		|		ПО Процессы.БизнесПроцесс = РезультатыВыполненияПроцессовИЗадач.Объект
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КешИнформацииОбОбъектах КАК КешИнформацииОбОбъектах
		|		ПО Процессы.БизнесПроцесс = КешИнформацииОбОбъектах.Объект
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПроцессыОбработокОбъектов КАК ПроцессыОбработокОбъектов
		|		ПО Процессы.БизнесПроцесс = ПроцессыОбработокОбъектов.Процесс
		|
		|ГДЕ
		|	НЕ Процессы.БизнесПроцесс В
		|				(ВЫБРАТЬ
		|					втДочерниеПроцессы.Процесс
		|				ИЗ
		|					втДочерниеПроцессы)
		|УПОРЯДОЧИТЬ ПО
		|	Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗадачиПроцессов.Ссылка,
		|	ЗадачиПроцессов.Наименование,
		|	ЗадачиПроцессов.ТекущийИсполнитель КАК Исполнитель,
		|	ЗадачиПроцессов.СрокИсполнения,
		|	ВЫБОР
		|		КОГДА ЗадачиПроцессов.Выполнена
		|			ТОГДА ЗадачиПроцессов.ДатаИсполнения
		|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
		|	КОНЕЦ КАК ДатаВыполнения,
		|	ЗадачиПроцессов.Выполнена,
		|	ВЫРАЗИТЬ(ЗадачиПроцессов.РезультатВыполнения КАК СТРОКА(500)) КАК РезультатВыполнения,
		|	ЗадачиПроцессов.ПринятаКИсполнению,
		|	ЗадачиПроцессов.Автор,
		|	ВЫБОР
		|		КОГДА ЗадачиПроцессов.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиОбъектов.Низкая)
		|			ТОГДА 0
		|		КОГДА ЗадачиПроцессов.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиОбъектов.Высокая)
		|			ТОГДА 2
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК Важность,
		|	ВЫБОР
		|		КОГДА ОчередьЗаданийДокументооборота.СтатусЗадания = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий.ОшибкаВыполнения)
		|			ТОГДА 9
		|		КОГДА ОчередьЗаданийДокументооборота.СтатусЗадания = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий.Выполняется)
		|			ТОГДА 8
		|		КОГДА
		|			РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.Положительно)
		|			ТОГДА 7
		|		КОГДА
		|			РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.ПоложительноСЗамечаниями)
		|			ТОГДА 6
		|		КОГДА
		|			РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.Отрицательно)
		|			ТОГДА 5
		|		КОГДА ЗадачиПроцессов.Выполнена = ИСТИНА
		|			ТОГДА 4
		|		КОГДА ЗадачиПроцессов.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Остановлен)
		|			ТОГДА 0
		|		КОГДА ЗадачиПроцессов.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Прерван)
		|			ТОГДА 1
		|		ИНАЧЕ -1
		|	КОНЕЦ КАК СостояниеКартинка,
		|	МАКСИМУМ(ЕСТЬNULL(ФлагиОбъектов.Флаг, ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.ПустаяСсылка))) КАК Флаг,
		|	МАКСИМУМ(ВЫБОР
		|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Красный)
		|			ТОГДА 1
		|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Синий)
		|			ТОГДА 2
		|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Желтый)
		|			ТОГДА 3
		|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Зеленый)
		|			ТОГДА 4
		|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Оранжевый)
		|			ТОГДА 5
		|		КОГДА ФлагиОбъектов.Флаг = ЗНАЧЕНИЕ(Перечисление.ФлагиОбъектов.Лиловый)
		|			ТОГДА 6
		|		ИНАЧЕ 0
		|	КОНЕЦ) КАК НомерФлага,
		|	ВЫБОР
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.НаКонтроле)
		|			ТОГДА ВЫБОР
		|				КОГДА КешИнформацииОбОбъектах.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1)
		|				ИЛИ КешИнформацииОбОбъектах.СрокИсполнения >= &ТекущаяДата
		|					ТОГДА 1
		|				ИНАЧЕ 3
		|			КОНЕЦ
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.СнятСКонтроля)
		|			ТОГДА 4
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.НаКонтролеНесколько)
		|			ТОГДА ВЫБОР
		|				КОГДА КешИнформацииОбОбъектах.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1)
		|				ИЛИ КешИнформацииОбОбъектах.СрокИсполнения >= &ТекущаяДата
		|					ТОГДА 5
		|				КОГДА КешИнформацииОбОбъектах.СрокИсполненияОбщий = ДАТАВРЕМЯ(1, 1, 1)
		|				ИЛИ КешИнформацииОбОбъектах.СрокИсполненияОбщий >= &ТекущаяДата
		|					ТОГДА 8
		|				ИНАЧЕ 6
		|			КОНЕЦ
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.СнятСКонтроляНесколько)
		|			ТОГДА 7
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.СмешанноНесколько)
		|			ТОГДА ВЫБОР
		|				КОГДА КешИнформацииОбОбъектах.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1)
		|				ИЛИ КешИнформацииОбОбъектах.СрокИсполнения >= &ТекущаяДата
		|					ТОГДА 9
		|				ИНАЧЕ 10
		|			КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СостояниеКонтроля,
		|	ЗадачиПроцессов.СостояниеБизнесПроцесса КАК СостояниеБизнесПроцесса,
		|	ЗадачиПроцессов.БизнесПроцесс КАК БизнесПроцесс,
		|	ЗадачиПроцессов.Дата КАК Дата,
		|	ЗадачиПроцессов.Ссылка.ИдентификаторИсполнителя КАК ИдентификаторИсполнителя,
		|	ЗадачиПроцессов.ПометкаУдаления КАК ПометкаУдаления
		|ИЗ
		|	ЗадачиПроцессов КАК ЗадачиПроцессов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РезультатыВыполненияПроцессовИЗадач КАК РезультатыВыполненияПроцессовИЗадач
		|		ПО ЗадачиПроцессов.Ссылка = РезультатыВыполненияПроцессовИЗадач.Объект
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФлагиОбъектов КАК ФлагиОбъектов
		|		ПО ЗадачиПроцессов.Ссылка = ФлагиОбъектов.Объект
		|		И ФлагиОбъектов.ФизическоеЛицо = &ФизическоеЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КешИнформацииОбОбъектах КАК КешИнформацииОбОбъектах
		|		ПО ЗадачиПроцессов.Ссылка = КешИнформацииОбОбъектах.Объект
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОчередьЗаданийДокументооборота КАК ОчередьЗаданийДокументооборота
		|		ПО ЗадачиПроцессов.Ссылка = ОчередьЗаданийДокументооборота.ПредметЗадания
		|		И ОчередьЗаданийДокументооборота.СтатусЗадания <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий.Завершено)
		|СГРУППИРОВАТЬ ПО
		|	ЗадачиПроцессов.Ссылка,
		|	ЗадачиПроцессов.Наименование,
		|	ЗадачиПроцессов.ТекущийИсполнитель,
		|	ЗадачиПроцессов.СрокИсполнения,
		|	ВЫБОР
		|		КОГДА ЗадачиПроцессов.Выполнена
		|			ТОГДА ЗадачиПроцессов.ДатаИсполнения
		|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
		|	КОНЕЦ,
		|	ЗадачиПроцессов.Выполнена,
		|	ВЫРАЗИТЬ(ЗадачиПроцессов.РезультатВыполнения КАК СТРОКА(500)),
		|	ЗадачиПроцессов.ПринятаКИсполнению,
		|	ЗадачиПроцессов.Автор,
		|	ВЫБОР
		|		КОГДА ЗадачиПроцессов.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиОбъектов.Низкая)
		|			ТОГДА 0
		|		КОГДА ЗадачиПроцессов.Важность = ЗНАЧЕНИЕ(Перечисление.ВариантыВажностиОбъектов.Высокая)
		|			ТОГДА 2
		|		ИНАЧЕ 1
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ОчередьЗаданийДокументооборота.СтатусЗадания = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий.ОшибкаВыполнения)
		|			ТОГДА 9
		|		КОГДА ОчередьЗаданийДокументооборота.СтатусЗадания = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаданий.Выполняется)
		|			ТОГДА 8
		|		КОГДА
		|			РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.Положительно)
		|			ТОГДА 7
		|		КОГДА
		|			РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.ПоложительноСЗамечаниями)
		|			ТОГДА 6
		|		КОГДА
		|			РезультатыВыполненияПроцессовИЗадач.Результат = ЗНАЧЕНИЕ(Перечисление.ВариантыВыполненияПроцессовИЗадач.Отрицательно)
		|			ТОГДА 5
		|		КОГДА ЗадачиПроцессов.Выполнена = ИСТИНА
		|			ТОГДА 4
		|		КОГДА ЗадачиПроцессов.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Остановлен)
		|			ТОГДА 0
		|		КОГДА ЗадачиПроцессов.СостояниеБизнесПроцесса = ЗНАЧЕНИЕ(Перечисление.СостоянияБизнесПроцессов.Прерван)
		|			ТОГДА 1
		|		ИНАЧЕ -1
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.НаКонтроле)
		|			ТОГДА ВЫБОР
		|				КОГДА КешИнформацииОбОбъектах.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1)
		|				ИЛИ КешИнформацииОбОбъектах.СрокИсполнения >= &ТекущаяДата
		|					ТОГДА 1
		|				ИНАЧЕ 3
		|			КОНЕЦ
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.СнятСКонтроля)
		|			ТОГДА 4
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.НаКонтролеНесколько)
		|			ТОГДА ВЫБОР
		|				КОГДА КешИнформацииОбОбъектах.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1)
		|				ИЛИ КешИнформацииОбОбъектах.СрокИсполнения >= &ТекущаяДата
		|					ТОГДА 5
		|				КОГДА КешИнформацииОбОбъектах.СрокИсполненияОбщий = ДАТАВРЕМЯ(1, 1, 1)
		|				ИЛИ КешИнформацииОбОбъектах.СрокИсполненияОбщий >= &ТекущаяДата
		|					ТОГДА 8
		|				ИНАЧЕ 6
		|			КОНЕЦ
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.СнятСКонтроляНесколько)
		|			ТОГДА 7
		|		КОГДА КешИнформацииОбОбъектах.СостояниеКонтроля = ЗНАЧЕНИЕ(Перечисление.СостоянияКонтроля.СмешанноНесколько)
		|			ТОГДА ВЫБОР
		|				КОГДА КешИнформацииОбОбъектах.СрокИсполнения = ДАТАВРЕМЯ(1, 1, 1)
		|				ИЛИ КешИнформацииОбОбъектах.СрокИсполнения >= &ТекущаяДата
		|					ТОГДА 9
		|				ИНАЧЕ 10
		|			КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	ЗадачиПроцессов.СостояниеБизнесПроцесса,
		|	ЗадачиПроцессов.БизнесПроцесс,
		|	ЗадачиПроцессов.Дата,
		|	ЗадачиПроцессов.Ссылка.ИдентификаторИсполнителя,
		|	ЗадачиПроцессов.ПометкаУдаления
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	ДатаВыполнения
		|ИТОГИ
		|ПО
		|	БизнесПроцесс
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДочерниеБизнесПроцессы.ДочернийПроцесс КАК Процесс
		|ИЗ
		|	Процессы КАК Процессы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДочерниеБизнесПроцессы КАК ДочерниеБизнесПроцессы
		|		ПО Процессы.БизнесПроцесс = ДочерниеБизнесПроцессы.РодительскийПроцесс";
		
	Запрос.УстановитьПараметр("Процессы", ТаблицаПроцессов);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("ФизическоеЛицо", ПараметрыСеанса.ФизическоеЛицоПользователя);
	
	Запрос.УстановитьПараметр("СотрудникиПользователя",
		Сотрудники.ТекущийПользовательИСотрудники());
	
	РезультатыЗапрос = Запрос.ВыполнитьПакет();
	
	// Заполнение процессами
	ВыборкаПроцессовКДобавлению = РезультатыЗапрос[4].Выбрать();
	Пока ВыборкаПроцессовКДобавлению.Следующий() Цикл
		
		СтрокаПроцесс = Неопределено;
		
		// Пропускам процессы, у которых заполнены и главная и ведущая задача.
		// Считаем, что такие процессы должны отображаться только под главной задачей,
		// они были сформирование из нее. Связь через ведущую задачу нужна только для
		// выполнения вышестоящего процесса. 
		Если ЗначениеЗаполнено(ВыборкаПроцессовКДобавлению.ГлавнаяЗадача)
			И ЗначениеЗаполнено(ВыборкаПроцессовКДобавлению.ВедущаяЗадача) Тогда
			
			СтрокаВедущейЗадачи = Дерево.Строки.Найти(
				ВыборкаПроцессовКДобавлению.ВедущаяЗадача, "Ссылка", Истина);
			Если СтрокаВедущейЗадачи <> Неопределено Тогда
				СтрокиСВедущимиЗадачами.Удалить(ВыборкаПроцессовКДобавлению.ВедущаяЗадача);
				КоллекцияСтрок = СтрокаВедущейЗадачи.Родитель.Строки;
				КоллекцияСтрок.Удалить(СтрокаВедущейЗадачи);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыборкаПроцессовКДобавлению.ГлавнаяЗадача) Тогда
			СтрокаРодитель = Дерево.Строки.Найти(
				ВыборкаПроцессовКДобавлению.ГлавнаяЗадача, "Ссылка", Истина);
			Если СтрокаРодитель <> Неопределено Тогда
				СтрокаПроцесс = СтрокаРодитель.Строки.Добавить();
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(ВыборкаПроцессовКДобавлению.ВедущаяЗадача) Тогда
			// Заменяем ведущую строку ведомым процессом
			СтрокаПроцесс = Дерево.Строки.Найти(
				ВыборкаПроцессовКДобавлению.ВедущаяЗадача, "Ссылка", Истина);
			
			// Удаляем ведущую задачу из списка
			СтрокиСВедущимиЗадачами.Удалить(ВыборкаПроцессовКДобавлению.ВедущаяЗадача);
		КонецЕсли;
		
		Если СтрокаПроцесс = Неопределено Тогда
			СтрокаПроцесс = Дерево.Строки.Добавить();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаПроцесс, ВыборкаПроцессовКДобавлению);
		Если ЗначениеЗаполнено(СтрокаПроцесс.Родитель)
			И ЗначениеЗаполнено(СтрокаПроцесс.Родитель.Родитель)
			И СтрокаПроцесс.Родитель.Родитель.Тип = 2 Тогда
			
			СтрокаПроцесс.Тип = 2;
		ИначеЕсли ВспомогательныеПроцессы.Найти(СтрокаПроцесс.Ссылка) <> Неопределено Тогда
			СтрокаПроцесс.Тип = 2;
		Иначе
			СтрокаПроцесс.Тип = 0;
		КонецЕсли;
		
		СтрокаПроцесс.ПринятаКИсполнению = Истина;
		
		// Выводим информацию о прерывании
		Если ВыборкаПроцессовКДобавлению.СостояниеКартинка = 1 
			И ЗначениеЗаполнено(ВыборкаПроцессовКДобавлению.ДатаПрерывания) Тогда
			СтрокаПроцесс.РезультатВыполнения = ИнформацияПрерывания(ВыборкаПроцессовКДобавлению);
		КонецЕсли;	
		
	КонецЦикла;
	
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	
	// Определение подчиненных процессов.
	ПодчиненныеПроцессы = РезультатыЗапрос[6].Выгрузить().ВыгрузитьКолонку("Процесс");
	
	// Заполнение задачами процессов
	ЗадачиПроцессовДляПроверкиПодчиненных = Новый Массив;
	ВыборкаЗадачКДобавлению = РезультатыЗапрос[5].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаЗадачКДобавлению.Следующий() Цикл
		
		СтрокаПроцесс = Дерево.Строки.Найти(
			ВыборкаЗадачКДобавлению.БизнесПроцесс, "Ссылка", Истина);
		
		// Пропускаем те задачи, процессых которых не были добавлены. 
		Если СтрокаПроцесс = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		//++AxelSoft Шарапова 20.05.2025 САНФ-033767
		ЦППК_БизнесПроцесс = ВыборкаЗадачКДобавлению.БизнесПроцесс;
		МетаданныеПроцесса = ЦППК_БизнесПроцесс.Метаданные();
        ЦППК_МассивЗадач = Новый Массив;
	    ЦППК_СтруктураИдентификаторов = Новый Соответствие;
		//--AxelSoft Шарапова 20.05.2025 САНФ-033767

		ВыборкаЗадачДетальныеЗаписи = ВыборкаЗадачКДобавлению.
			Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаЗадачДетальныеЗаписи.Следующий() Цикл
			
		//++AxelSoft Шарапова 20.05.2025 САНФ-033767
		//--AxelSoft Шарапова 20.05.2025 САНФ-033767
			СтрокаЗадача = СтрокаПроцесс.Строки.Добавить();
			Если ВыборкаЗадачДетальныеЗаписи.Выполнена
				Или ВыборкаЗадачДетальныеЗаписи.СрокИсполнения = Дата(1,1,1) Тогда
				
				СтрокаЗадача.Просрочена = Ложь;
				
			ИначеЕсли ИспользоватьДатуИВремяВСрокахЗадач Тогда
				Если ВыборкаЗадачДетальныеЗаписи.СрокИсполнения < ТекущаяДатаСеанса Тогда
					СтрокаЗадача.Просрочена = Истина;
				КонецЕсли;
			Иначе
				Если КонецДня(ВыборкаЗадачДетальныеЗаписи.СрокИсполнения) < ТекущаяДатаСеанса Тогда
					СтрокаЗадача.Просрочена = Истина;
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(ВыборкаЗадачДетальныеЗаписи.Исполнитель) Тогда
				ЗаполнитьЗначенияСвойств(СтрокаЗадача, ВыборкаЗадачДетальныеЗаписи);
				// Добавление задачи в список активных
				//Если Список <> Неопределено
				//	И Не ВыборкаЗадачДетальныеЗаписи.Выполнена
				//	И Не ВыборкаЗадачДетальныеЗаписи.ПометкаУдаления
				//	И ВыборкаЗадачДетальныеЗаписи.СостояниеБизнесПроцесса = 
				//		Перечисления.СостоянияБизнесПроцессов.Активен Тогда
				//	
				//	СтрокаАктивнаяЗадача = Список.Добавить();
				//	ЗаполнитьЗначенияСвойств(СтрокаАктивнаяЗадача, СтрокаЗадача);
				//КонецЕсли;
			Иначе // Для ведущих задач. У ведущих задач нет исполнителя.
				ЗаполнитьЗначенияСвойств(СтрокаЗадача, ВыборкаЗадачДетальныеЗаписи, "Ссылка, Наименование");
				СтрокиСВедущимиЗадачами.Вставить(СтрокаЗадача.Ссылка, СтрокаЗадача);
			КонецЕсли;
			СтрокаЗадача.Тип = 1;
			
			// Добавим подчиненные задачи.
			Если Список = Неопределено Тогда
				ПодчиненныеЗадачиПоДействию =
					КонтекстЗадач.ПодчиненныеЗадачи[СтрокаЗадача.Ссылка];
				Если ПодчиненныеЗадачиПоДействию <> Неопределено Тогда
					Для Каждого ПодчиненнаяЗадача Из ПодчиненныеЗадачиПоДействию Цикл
						ПодчиненныеПроцессы.Добавить(ПодчиненнаяЗадача);
					КонецЦикла;
				КонецЕсли;
			Иначе
				ЗадачиПроцессовДляПроверкиПодчиненных.Добавить(СтрокаЗадача.Ссылка);
			КонецЕсли;
			
		//++AxelSoft Шарапова 20.05.2025 САНФ-033767
			Если ЦППК_СтруктураИдентификаторов[ВыборкаЗадачДетальныеЗаписи.ИдентификаторИсполнителя] = Неопределено Тогда
				ЦППК_СтруктураИдентификаторов.Вставить(ВыборкаЗадачДетальныеЗаписи.ИдентификаторИсполнителя, СтрокаЗадача);
			КонецЕсли;
		//--AxelSoft Шарапова 20.05.2025 САНФ-033767

		КонецЦикла;
		
		//++AxelSoft Шарапова 20.05.2025 САНФ-033767
		ЦППК_УпорядочитьСтрокиПроцесса(ЦППК_СтруктураИдентификаторов, МетаданныеПроцесса, ЦППК_БизнесПроцесс, СтрокаПроцесс, Список);
		//--AxelSoft Шарапова 20.05.2025 САНФ-033767
		
	КонецЦикла;
	
	// Заполнение задачами.
	Для Каждого ЗадачаУровня Из ЗадачиУровня Цикл
		
		// Добавим строку задачи.
		СтрокаПроцесс = Неопределено;
		
		РеквизитыЗадачи = КонтекстЗадач.РеквизитыЗадач[ЗадачаУровня];
		ДанныеЗадачи = КонтекстЗадач.ДанныеЗадач.Найти(ЗадачаУровня, "Задача");
		Если РеквизитыЗадачи = Неопределено
			Или ДанныеЗадачи = Неопределено
			Или (ЗначениеЗаполнено(РеквизитыЗадачи.Источник)
				И БизнесПроцессыИЗадачиСервер.ЭтоПроцессИлиШаблонПроцесса(РеквизитыЗадачи.Источник)) Тогда
				// Продолжить;
				Если РеквизитыЗадачи = Неопределено тогда
					Продолжить;
				ИначеЕсли ТипЗнч(РеквизитыЗадачи.Источник) = Тип("БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач") И Дерево.Строки.Найти(РеквизитыЗадачи.Источник,"Ссылка", Истина) = Неопределено Тогда
					// для добавления переноса сроков из подзадач
				Иначе
					Продолжить;
				КонецЕсли;
				
		КонецЕсли;
		
		Если ТипЗнч(РеквизитыЗадачи.Источник) = Тип("СправочникСсылка.ДействияОзнакомления") Тогда
			СостояниеДействия = РегистрыСведений.СостоянияДействий.СостояниеДействия(РеквизитыЗадачи.Источник);
			Если СостояниеДействия	= Перечисления.СостоянияВыполненияДействий.Пропущено Тогда
				Продолжить;
			КонецЕсли;		
		КонецЕсли;	
		
		ЕстьПравоЧтение = КонтекстЗадач.ПраваЧтенияПоЗадачам[ЗадачаУровня] = Истина;
		
		Если ЗначениеЗаполнено(РеквизитыЗадачи.ВышестоящееДействие) Тогда
			
			АктивноеДействие = КонтекстЗадач.АктивныеДействияПоЗадачам.Найти(
				РеквизитыЗадачи.ВышестоящееДействие,
				"ДействиеЗадачи");
			Если АктивноеДействие <> Неопределено Тогда
				
				Если ЗначениеЗаполнено(АктивноеДействие.Источник)
					И ТипЗнч(АктивноеДействие.Источник) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
					СтрокаРодитель = Дерево.Строки.Найти(
						АктивноеДействие.Источник, "Ссылка", Истина);
				Иначе
					СтрокаРодитель = Дерево.Строки.Найти(
						РеквизитыЗадачи.ВышестоящееДействие, "Ссылка", Истина);
				КонецЕсли;
				
				Если СтрокаРодитель <> Неопределено Тогда
					СтрокаПроцесс = СтрокаРодитель.Строки.Добавить();
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ЗначениеЗаполнено(РеквизитыЗадачи.ВышестоящаяЗадача) Тогда
			
			СтрокаРодитель = Дерево.Строки.Найти(
				РеквизитыЗадачи.ВышестоящаяЗадача, "Ссылка", Истина);
			
			Если СтрокаРодитель <> Неопределено Тогда
				СтрокаПроцесс = СтрокаРодитель.Строки.Добавить();
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаПроцесс = Неопределено Тогда
			СтрокаПроцесс = Дерево.Строки.Добавить();
		КонецЕсли;
		
		СтрокаПроцесс.Ссылка = ЗадачаУровня;
		СтрокаПроцесс.Наименование = ?(ЕстьПравоЧтение,
			ДанныеЗадачи.Заголовок,
			НСтр("ru = 'Описание скрыто'"));
		СтрокаПроцесс.Выполнена = ДанныеЗадачи.Выполнена;
		СтрокаПроцесс.Флаг = ДанныеЗадачи.Флаг;
		СтрокаПроцесс.НомерФлага =
			РаботаСФлагамиОбъектовСервер.ПолучитьНомерФлага(ДанныеЗадачи.Флаг);
		
		СтрокаПроцесс.Важность =
			Справочники.ПриоритетыЗадач.ИндексКартинкиПриоритета(ДанныеЗадачи.Приоритет);
		
		ХарактерРезультата =
			РаботаСЗадачамиПовтИсп.ХарактерРезультата(ДанныеЗадачи.РезультатЗадачи);
		Если ДанныеЗадачи.ВидСостоянияЗадачи = Перечисления.ВидыСостоянийЗадач.Отложена Тогда
			СтрокаПроцесс.СостояниеКартинка = 0;
		ИначеЕсли ДанныеЗадачи.ВидСостоянияЗадачи = Перечисления.ВидыСостоянийЗадач.Отменена Тогда
			СтрокаПроцесс.СостояниеКартинка = 1;
		ИначеЕсли ХарактерРезультата = Перечисления.ХарактерыРезультатов.Положительный Тогда
			СтрокаПроцесс.СостояниеКартинка = 7;
		ИначеЕсли ХарактерРезультата = Перечисления.ХарактерыРезультатов.ПоложительныйСЗамечаниями Тогда
			СтрокаПроцесс.СостояниеКартинка = 6;
		ИначеЕсли ХарактерРезультата = Перечисления.ХарактерыРезультатов.Отрицательный Тогда
			СтрокаПроцесс.СостояниеКартинка = 5;
		ИначеЕсли ХарактерРезультата = Перечисления.ХарактерыРезультатов.Нейтральный Тогда
			СтрокаПроцесс.СостояниеКартинка = 4;
		Иначе
			СтрокаПроцесс.СостояниеКартинка = -1;
		КонецЕсли;
		
		СтрокаПроцесс.СостояниеКонтроля = Контроль.ИндексКартинкиКонтроля(
			ДанныеЗадачи.СостояниеКонтроля,
			ДанныеЗадачи.КонтрольныйСрок,
			ДанныеЗадачи.КонтрольныйСрокОбщий);
		
		СтрокаПроцесс.Тип = 0;
		СтрокаПроцесс.ПринятаКИсполнению = Истина;
		
		// Добавим строки действий задачи.
		АктивныеДействияПоЗадаче = КонтекстЗадач.АктивныеДействияПоЗадачам.НайтиСтроки(
			Новый Структура("Задача", ЗадачаУровня)); 
			
		Если ТипЗнч(РеквизитыЗадачи.Источник) = Тип("СправочникСсылка.ДействияОзнакомления") Тогда
				
			РеквизитыДействия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(РеквизитыЗадачи.Источник, "Автор, ОжидатьЗавершения, ПомещеноВИсторию");
			
			СостояниеДействия = РегистрыСведений.СостоянияДействий.СостояниеДействия(РеквизитыЗадачи.Источник);
			
			Если Истина Тогда   //  всегда
				
				ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
				
				ДействиеОзнакомления = РеквизитыЗадачи.Источник;
				
				СостояниеИДата = РегистрыСведений.СостоянияДействий.СостояниеИДатаСостоянияДействия(ДействиеОзнакомления);
				ДатаОтсчета = СостояниеИДата.Дата;      
				
				МаксимальноеЧислоУчастниковДляПоказа = Справочники.ДействияОзнакомления.МаксимальноеЧислоУчастниковДляПоказа();
				ЧислоУчастниковДействия = РегистрыСведений.УчастникиОзнакомлений.ЧислоУчастниковДействия(ДействиеОзнакомления);
				
				Если ЧислоУчастниковДействия <= МаксимальноеЧислоУчастниковДляПоказа Тогда // менее 50, покажем всех
						
					УчастникиИДатыДействия = РегистрыСведений.УчастникиОзнакомлений.УчастникиИДатыДействия(ДействиеОзнакомления);

					Для Каждого Участник Из УчастникиИДатыДействия Цикл       
						
						СтрокаЗадача = СтрокаПроцесс.Строки.Добавить();
						
						СтрокаЗадача.Ссылка = ДействиеОзнакомления;    
						Если ТипЗнч(Участник.Участник) = Тип("СправочникСсылка.Сотрудники") 
							Или ТипЗнч(Участник.Участник) = Тип("СправочникСсылка.ПолныеРоли")
							Или ТипЗнч(Участник.Участник) = Тип("СправочникСсылка.АвтоподстановкиДляОбъектов") Тогда
							
							СтрокаЗадача.Ссылка = ДействияВызовСервера.ДействиеЗадачиДляСтрокиОзнакомления(
								ДействиеОзнакомления, Участник.ИдентификаторУчастника); // действие задачи 
								
							ДобавитьПодзадачи(СтрокаЗадача);	
								
						КонецЕсли;	
						
						СтрокаЗадача.Наименование = Строка(ДействиеОзнакомления);
						СтрокаЗадача.Исполнитель = Участник.Участник; 
						СтрокаЗадача.Автор = РеквизитыДействия.Автор; 
						
						СтрокаЗадача.ДатаВыполнения = Участник.ДатаЗавершения;
						
						// срок считать как относит срок + дата состояния действия
						
						СтрокаЗадача.СрокИсполнения = Участник.Срок;      
						Если СтрокаЗадача.СрокИсполнения < ТекущаяДатаСеанса() Тогда
							СтрокаЗадача.Просрочена = Истина;
						КонецЕсли;	
						
						СтрокаЗадача.СостояниеКартинка = -1;    
						
						// сперва общее состояние
						Если СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Остановлено Тогда // пауза
							СтрокаЗадача.СостояниеКартинка = 0; 
						ИначеЕсли РеквизитыДействия.ПомещеноВИсторию Тогда
							СтрокаЗадача.СостояниеКартинка = 1;   // стоп
						Иначе	 // тут уже персональное состояние
							
							Если Участник.Состояние = Перечисления.СостоянияОзнакомления.Ознакомился Тогда
								
								СтрокаЗадача.СостояниеКартинка = 4;   // галочка выполнено  
								СтрокаЗадача.ПринятаКИсполнению = Истина;   
								СтрокаЗадача.Выполнена = Истина;
								
							ИначеЕсли Участник.Состояние = Перечисления.СостоянияОзнакомления.ВРаботе Тогда	
								
								СтрокаЗадача.ПринятаКИсполнению = Истина;
								
							КонецЕсли;	
							
						КонецЕсли;	
						
						СтрокаЗадача.Тип = 1;    
						СтрокаЗадача.Важность = СтрокаПроцесс.Важность;         
						
					КонецЦикла;	
						
				Иначе  // более 50, покажем группы именно как группы
						
					УчастникиДействия = Справочники.ДействияОзнакомления.УчастникиДействия(ДействиеОзнакомления);
					
					УчастникиИДатыДействия = РегистрыСведений.УчастникиОзнакомлений.УчастникиИДатыДействия(ДействиеОзнакомления);
					ПолноеКоличество = УчастникиИДатыДействия.Количество();
					
					ЕстьЗаписиРС = Ложь;
					РезультатыОзнакомлений = Справочники.ДействияОзнакомления.РезультатыОзнакомлений(ДействиеОзнакомления, ЕстьЗаписиРС);
					
					Для Каждого ТекУчастник Из УчастникиДействия Цикл          
						
						НоваяСсылкаДляОткрытия = Неопределено;
						ДатаВыполнения = Неопределено;
						
						Если ТипЗнч(ТекУчастник.Участник) = Тип("СправочникСсылка.Сотрудники") 
							Или ТипЗнч(ТекУчастник.Участник) = Тип("СправочникСсылка.ПолныеРоли")
							Или ТипЗнч(ТекУчастник.Участник) = Тип("СправочникСсылка.АвтоподстановкиДляОбъектов") Тогда
							
							СтрокаРегистра = УчастникиИДатыДействия.Найти(ТекУчастник.Идентификатор, "ИдентификаторУчастникаДействия");
							Если СтрокаРегистра <> Неопределено Тогда
							
								НоваяСсылкаДляОткрытия = ДействияВызовСервера.ДействиеЗадачиДляСтрокиОзнакомления(
									ДействиеОзнакомления, СтрокаРегистра.ИдентификаторУчастника); // действие задачи 
									
								ДатаВыполнения = СтрокаРегистра.ДатаЗавершения;	
									
							Иначе
								// в РС нет участника, он удален как дубль - значит и тут не покажем.	
								Продолжить;
									
							КонецЕсли;		
								
						КонецЕсли;	
						
						СтрокаЗадача = СтрокаПроцесс.Строки.Добавить();
						
						СтрокаЗадача.Ссылка = ДействиеОзнакомления;  
						Если ЗначениеЗаполнено(НоваяСсылкаДляОткрытия) Тогда
							
							СтрокаЗадача.Ссылка = НоваяСсылкаДляОткрытия;   
							
							ДобавитьПодзадачи(СтрокаЗадача);
							
						КонецЕсли;	
						
						СтрокаЗадача.Наименование = Строка(ДействиеОзнакомления);
						СтрокаЗадача.Исполнитель = ТекУчастник.Участник;
						СтрокаЗадача.Автор = РеквизитыДействия.Автор;    
						
						Если ЗначениеЗаполнено(ДатаВыполнения) Тогда
							СтрокаЗадача.ДатаВыполнения = ДатаВыполнения;
						КонецЕсли;
						
						// срок считать как относит срок + дата состояния действия
						
						СтрокаЗадача.СрокИсполнения = СрокиИсполненияПроцессовКОРП.ЗаполнитьСрокИсполненияУчастника(
							ТекУчастник.Участник, 
							ДатаОтсчета,
							ТекУчастник.ВариантУстановкиСрока,
							ТекУчастник.Срок,
							ТекУчастник.СрокДни,
							ТекУчастник.СрокЧасы,
							ТекУчастник.СрокМинуты); 
							
						Если СтрокаЗадача.СрокИсполнения < ТекущаяДатаСеанса() Тогда
							СтрокаЗадача.Просрочена = Истина;
						КонецЕсли;	
							
						СтрокаЗадача.СостояниеКартинка = -1;    
						Если СостояниеДействия = Перечисления.СостоянияВыполненияДействий.Остановлено Тогда // пауза
							СтрокаЗадача.СостояниеКартинка = 0; 
						ИначеЕсли РеквизитыДействия.ПомещеноВИсторию Тогда
							СтрокаЗадача.СостояниеКартинка = 1;   // стоп  
							
						Иначе
							
							СтруктураОзнакомления = РезультатыОзнакомлений.Получить(ТекУчастник.Идентификатор);
							Если СтруктураОзнакомления <> Неопределено Тогда                                 
								
								Если СтруктураОзнакомления.СколькоОзнакомлено = СтруктураОзнакомления.СколькоВсегоНадоОзнакомить Тогда
									
									// Завершено 
									СтрокаЗадача.СостояниеКартинка = 4;   // галочка выполнено  
									СтрокаЗадача.ПринятаКИсполнению = Истина;
									СтрокаЗадача.Выполнена = Истина;
									
								КонецЕсли;	 
								
								// если группа
								Если ТипЗнч(СтрокаЗадача.Исполнитель)  <> Тип("СправочникСсылка.ПолныеРоли")
									И ТипЗнч(СтрокаЗадача.Исполнитель) <> Тип("СправочникСсылка.Сотрудники")
									И ТипЗнч(СтрокаЗадача.Исполнитель)    <> Тип("СправочникСсылка.АвтоподстановкиДляОбъектов")Тогда
									
									СтрокаЗадача.Исполнитель = Строка(СтрокаЗадача.Исполнитель) + ", " 
									+ СтрШаблон(НСтр("ru = 'Ознакомлено %1 из %2'"), 
									СтруктураОзнакомления.СколькоОзнакомлено, СтруктураОзнакомления.СколькоВсегоНадоОзнакомить);
									
									СтрокаЗадача.ДатаВыполнения = СтруктураОзнакомления.ДатаЗавершенияИтоговая;
								
								КонецЕсли;
								
							КонецЕсли;
								
							
						КонецЕсли;	
						
						СтрокаЗадача.Тип = 1;
						СтрокаЗадача.Важность = СтрокаПроцесс.Важность;         
						
						Если СтрокаПроцесс.Строки.Количество() >= МаксимальноеЧислоУчастниковДляПоказа Тогда
							
							СтрокаЗадача.Наименование = СтрокаЗадача.Наименование + СтрШаблон(
								НСтр("ru = ' и др., всего %1, см ""Ход ознакомления"". '"), ПолноеКоличество);
							Прервать;	
						КонецЕсли;	
						
					КонецЦикла;	
						
				КонецЕсли;
				
			КонецЕсли;	
			
		КонецЕсли;	
		
		Для Каждого АктивноеДействие Из АктивныеДействияПоЗадаче Цикл
			
			ДанныеДействия = КонтекстЗадач.ДанныеДействийЗадач.Найти(
				АктивноеДействие.ДействиеЗадачи,
				"ДействиеЗадачи");
			Если ДанныеДействия = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаЗадача = СтрокаПроцесс.Строки.Добавить();
			
			СтрокаЗадача.Ссылка = АктивноеДействие.ДействиеЗадачи;
			СтрокаЗадача.Наименование = ?(ЕстьПравоЧтение,
				ДанныеДействия.Заголовок,
				НСтр("ru = 'Описание скрыто'"));
			СтрокаЗадача.Исполнитель = ДанныеДействия.Исполнитель;
			СтрокаЗадача.СрокИсполнения = ДанныеДействия.Срок;
			СтрокаЗадача.ПринятаКИсполнению = ДанныеДействия.ВРаботе Или ДанныеДействия.Выполнено;
			СтрокаЗадача.Автор = ДанныеДействия.Автор;
			СтрокаЗадача.Флаг = ДанныеДействия.Флаг;
			СтрокаЗадача.НомерФлага =
				РаботаСФлагамиОбъектовСервер.ПолучитьНомерФлага(ДанныеДействия.Флаг);
			СтрокаЗадача.Выполнена = ДанныеДействия.Выполнено;
			СтрокаЗадача.Просрочена = ДанныеДействия.Просрочено;
			
			СтрокаЗадача.ДатаВыполнения = ДанныеДействия.ДатаВыполнения;
			
			СтрокаЗадача.Важность =
				Справочники.ПриоритетыЗадач.ИндексКартинкиПриоритета(ДанныеЗадачи.Приоритет);
			
			ХарактерРезультата = РаботаСЗадачамиПовтИсп.ХарактерРезультата(ДанныеДействия.РезультатДействия);
			Если ХарактерРезультата = Перечисления.ХарактерыРезультатов.Положительный Тогда
				СтрокаЗадача.СостояниеКартинка = 7;
			ИначеЕсли ХарактерРезультата = Перечисления.ХарактерыРезультатов.ПоложительныйСЗамечаниями Тогда
				СтрокаЗадача.СостояниеКартинка = 6;
			ИначеЕсли ХарактерРезультата = Перечисления.ХарактерыРезультатов.Отрицательный Тогда
				СтрокаЗадача.СостояниеКартинка = 5;
			ИначеЕсли ХарактерРезультата = Перечисления.ХарактерыРезультатов.Нейтральный Тогда
				СтрокаЗадача.СостояниеКартинка = 4;
			ИначеЕсли Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоОтложенноеДействие(ДанныеДействия.ВидСостоянияУчастниковЗадач) Тогда
				СтрокаЗадача.СостояниеКартинка = 0;
			ИначеЕсли Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоОтмененноеДействие(ДанныеДействия.ВидСостоянияУчастниковЗадач) Тогда
				СтрокаЗадача.СостояниеКартинка = 1;
			Иначе
				СтрокаЗадача.СостояниеКартинка = -1;
			КонецЕсли;
			
			СтрокаЗадача.СостояниеКонтроля = Контроль.ИндексКартинкиКонтроля(
				ДанныеДействия.СостояниеКонтроля,
				ДанныеДействия.КонтрольныйСрок,
				ДанныеДействия.КонтрольныйСрокОбщий);
			
			Если ЗначениеЗаполнено(АктивноеДействие.РезультатДействияТекстом) Тогда
				СтрокаЗадача.РезультатВыполнения =
					?(ЕстьПравоЧтение,
						АктивноеДействие.РезультатДействияТекстом,
						НСтр("ru = 'Результат скрыт'"));
			КонецЕсли;
			
			СтрокаЗадача.Тип = 1;
			
			// Добавление задачи в список активных
			Если Список <> Неопределено И ДанныеДействия.ОжидаетВыполнения Тогда
				
				СтрСписка = Список.Добавить();
				СтрСписка.Ссылка = АктивноеДействие.ДействиеЗадачи;
				СтрСписка.Наименование = ?(ЕстьПравоЧтение,
					ДанныеДействия.Заголовок,
					НСтр("ru = 'Описание скрыто'"));
				СтрСписка.Исполнитель = ДанныеДействия.Исполнитель;
				СтрСписка.СрокИсполнения = ДанныеДействия.Срок;
				СтрСписка.ПринятаКИсполнению = ДанныеДействия.ВРаботе Или ДанныеДействия.Выполнено;
				СтрСписка.Автор = ДанныеДействия.Автор;
				СтрСписка.Флаг = ДанныеДействия.Флаг;
				СтрСписка.НомерФлага = РаботаСФлагамиОбъектовСервер.ПолучитьНомерФлага(ДанныеДействия.Флаг);
				СтрСписка.Выполнена = ДанныеДействия.Выполнено;
				СтрСписка.Дата = ДанныеДействия.ДатаСоздания;
				СтрСписка.Просрочена = ДанныеДействия.Просрочено;
				
				ХарактерРезультата = РаботаСЗадачамиПовтИсп.ХарактерРезультата(ДанныеДействия.РезультатДействия);
				Если ХарактерРезультата = Перечисления.ХарактерыРезультатов.Положительный Тогда
					СтрСписка.СостояниеКартинка = 7;
				ИначеЕсли ХарактерРезультата = Перечисления.ХарактерыРезультатов.ПоложительныйСЗамечаниями Тогда
					СтрСписка.СостояниеКартинка = 6;
				ИначеЕсли ХарактерРезультата = Перечисления.ХарактерыРезультатов.Отрицательный Тогда
					СтрСписка.СостояниеКартинка = 5;
				ИначеЕсли ХарактерРезультата = Перечисления.ХарактерыРезультатов.Нейтральный Тогда
					СтрСписка.СостояниеКартинка = 4;
				ИначеЕсли Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоОтложенноеДействие(ДанныеДействия.ВидСостоянияУчастниковЗадач) Тогда
					СтрСписка.СостояниеКартинка = 0;
				ИначеЕсли Перечисления.ВидыСостоянийУчастниковЗадач.ЭтоОтмененноеДействие(ДанныеДействия.ВидСостоянияУчастниковЗадач) Тогда
					СтрСписка.СостояниеКартинка = 1;
				Иначе
					СтрСписка.СостояниеКартинка = -1;
				КонецЕсли;
				
			КонецЕсли;
			
			// Добавим подчиненные задачи.
			ПодчиненныеЗадачиПоДействию =
				КонтекстЗадач.ПодчиненныеЗадачи[АктивноеДействие.ДействиеЗадачи];
			Если ПодчиненныеЗадачиПоДействию <> Неопределено Тогда
				Для Каждого ПодчиненнаяЗадача Из ПодчиненныеЗадачиПоДействию Цикл
					ПодчиненныеПроцессы.Добавить(ПодчиненнаяЗадача);
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
		ЦППК_ЗаполнитьЦиклыПроцессов(Дерево, КонтекстЗадач, ЕстьПравоЧтение);
		
	КонецЦикла;
	
	Если ЗадачиПроцессовДляПроверкиПодчиненных.Количество() > 0 Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		ДействияПоИсточникам =
			Документы.ДействиеЗадачи.НайтиПоИсточникам(ЗадачиПроцессовДляПроверкиПодчиненных);
		
		ДействияИсточников = Новый Массив;
		Для Каждого КлючИЗначение Из ДействияПоИсточникам Цикл
			
			Если Не ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
				Продолжить;
			КонецЕсли;
			
			ДействияИсточников.Добавить(КлючИЗначение.Значение);
			
		КонецЦикла;
		
		Подзадачи = Документы.ДействиеЗадачи.НайтиПодзадачи(ДействияИсточников);
		
		ЗадачиДляКонтекста = Новый Массив;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			ЗадачиДляКонтекста,
			КонтекстЗадач.ЗадачиПоПриложению);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			ЗадачиДляКонтекста,
			Подзадачи);
		
		РеквизитыДействий =
			ОбщегоНазначения.ЗначенияРеквизитовОбъектов(ДействияИсточников, "Задача");
		Для Каждого КлючИЗначение Из РеквизитыДействий Цикл
			
			ЗадачиДляКонтекста.Добавить(КлючИЗначение.Значение.Задача);
			
		КонецЦикла;
		
		ЗадачиДляКонтекста = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ЗадачиДляКонтекста);
		
		УстановитьПривилегированныйРежим(Ложь);
		
		НовыйКонтекстЗадач = КонтекстЗадач(ЗадачиДляКонтекста);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПодчиненныеПроцессы, Подзадачи);
		
	Иначе
		
		НовыйКонтекстЗадач = КонтекстЗадач;
		
	КонецЕсли;
	
	Если ПодчиненныеПроцессы.Количество() > 0 Тогда
		ДобавитьПроцессыИПодчиненныеЗадачи(Дерево, ПодчиненныеПроцессы, ВспомогательныеПроцессы,
			ИспользоватьДатуИВремяВСрокахЗадач, Список, СтрокиСВедущимиЗадачами, НовыйКонтекстЗадач);
	Иначе
		//Удаление из дерева ведущих задач
		Для Каждого СтрЗадача Из СтрокиСВедущимиЗадачами Цикл
			КоллекцияСтрок = СтрЗадача.Значение.Родитель.Строки;
			КоллекцияСтрок.Удалить(СтрЗадача.Значение);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ЦППК_ВсеЗадачиПоПредмету(Предмет)
		
	МассивЗадач = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЗадачаПриложения.Ссылка КАК Процесс
	|ИЗ
	|	Документ.Задача.Приложения КАК ЗадачаПриложения
	|ГДЕ
	|	ЗадачаПриложения.Приложение В(&Предметы)";
	
	Запрос.УстановитьПараметр("Предметы", Предмет);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат МассивЗадач;
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			МассивЗадач.Добавить(Выборка.Процесс);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат МассивЗадач;
	
КонецФункции

Функция ЦППК_ВсеПроцессыПоПредмету(Предмет)
	
	МассивПроцессов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПредметыПроцесса.Ссылка КАК Процесс,
		|	ПредметыПроцесса.Предмет КАК Предмет
		|ПОМЕСТИТЬ ВТПроцессы
		|ИЗ
		|	БизнесПроцесс.Исполнение.Предметы КАК ПредметыПроцесса
		|ГДЕ
		|	ПредметыПроцесса.Предмет В(&Предметы)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПредметыПроцесса.Ссылка,
		|	ПредметыПроцесса.Предмет
		|ИЗ
		|	БизнесПроцесс.КомплексныйПроцесс.Предметы КАК ПредметыПроцесса
		|ГДЕ
		|	ПредметыПроцесса.Предмет В(&Предметы)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПредметыПроцесса.Ссылка,
		|	ПредметыПроцесса.Предмет
		|ИЗ
		|	БизнесПроцесс.Ознакомление.Предметы КАК ПредметыПроцесса
		|ГДЕ
		|	ПредметыПроцесса.Предмет В(&Предметы)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПредметыПроцесса.Ссылка,
		|	ПредметыПроцесса.Предмет
		|ИЗ
		|	БизнесПроцесс.Подписание.Предметы КАК ПредметыПроцесса
		|ГДЕ
		|	ПредметыПроцесса.Предмет В(&Предметы)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПредметыПроцесса.Ссылка,
		|	ПредметыПроцесса.Предмет
		|ИЗ
		|	БизнесПроцесс.Приглашение.Предметы КАК ПредметыПроцесса
		|ГДЕ
		|	ПредметыПроцесса.Предмет В(&Предметы)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПредметыПроцесса.Ссылка,
		|	ПредметыПроцесса.Предмет
		|ИЗ
		|	БизнесПроцесс.Рассмотрение.Предметы КАК ПредметыПроцесса
		|ГДЕ
		|	ПредметыПроцесса.Предмет В(&Предметы)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПредметыПроцесса.Ссылка,
		|	ПредметыПроцесса.Предмет
		|ИЗ
		|	БизнесПроцесс.Регистрация.Предметы КАК ПредметыПроцесса
		|ГДЕ
		|	ПредметыПроцесса.Предмет В(&Предметы)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПредметыПроцесса.Ссылка,
		|	ПредметыПроцесса.Предмет
		|ИЗ
		|	БизнесПроцесс.РешениеВопросовВыполненияЗадач.Предметы КАК ПредметыПроцесса
		|ГДЕ
		|	ПредметыПроцесса.Предмет В(&Предметы)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПредметыПроцесса.Ссылка,
		|	ПредметыПроцесса.Предмет
		|ИЗ
		|	БизнесПроцесс.Согласование.Предметы КАК ПредметыПроцесса
		|ГДЕ
		|	ПредметыПроцесса.Предмет В(&Предметы)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПредметыПроцесса.Ссылка,
		|	ПредметыПроцесса.Предмет
		|ИЗ
		|	БизнесПроцесс.Утверждение.Предметы КАК ПредметыПроцесса
		|ГДЕ
		|	ПредметыПроцесса.Предмет В(&Предметы)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Процесс
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗадачаПриложения.Ссылка КАК Задача,
		|	ЗадачаПриложения.Приложение КАК Приложение
		|ПОМЕСТИТЬ втПодчиненныеЗадачи
		|ИЗ
		|	ВТПроцессы КАК ВТПроцессы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Задача.Приложения КАК ЗадачаПриложения
		|		ПО ВТПроцессы.Процесс = ЗадачаПриложения.Ссылка.Источник
		|			И ВТПроцессы.Предмет = ЗадачаПриложения.Приложение
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Задача
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Процессы.Процесс КАК Процесс
		|ПОМЕСТИТЬ втПроцессыИЗадачи
		|ИЗ
		|	ВТПроцессы КАК Процессы
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ЗадачаПриложения.Ссылка
		|ИЗ
		|	Документ.Задача.Приложения КАК ЗадачаПриложения
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(ЗадачаПриложения.Приложение) = ТИП(Справочник.ДокументыПредприятия)
		|	И ЗадачаПриложения.Приложение В(&Предметы)
		|	И НЕ ЗадачаПриложения.Ссылка В
		|				(ВЫБРАТЬ
		|					втПодчиненныеЗадачи.Задача
		|				ИЗ
		|					втПодчиненныеЗадачи
		|				ГДЕ
		|					НЕ втПодчиненныеЗадачи.Задача ЕСТЬ NULL)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втПроцессыИЗадачи.Процесс КАК Процесс
		|ИЗ
		|	втПроцессыИЗадачи КАК втПроцессыИЗадачи";
	
	Запрос.УстановитьПараметр("Предметы", Предмет);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат МассивПроцессов;
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			МассивПроцессов.Добавить(Выборка.Процесс);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат МассивПроцессов;
	
КонецФункции

Процедура ЦППК_УпорядочитьСтрокиПроцесса(ЦППК_МассивЗадач, МетаданныеПроцесса, ЦППК_БизнесПроцесс, СтрокаПроцесс, Список)
	
	Если ЦППК_МассивЗадач.Количество() > 1 Тогда
		
		Для каждого Записи Из ЦППК_МассивЗадач Цикл
			
			ЦППК_НайденныеСтрокиТЧ = Новый Массив;
			ИндексСтрокиБП = Неопределено;
			Если МетаданныеПроцесса.ТабличныеЧасти.Найти("Исполнители") <> Неопределено Тогда
				Если ЦППК_БизнесПроцесс.Исполнители.Количество() > 1 Тогда
					ЦППК_НайденныеСтрокиТЧ = ЦППК_БизнесПроцесс.Исполнители.НайтиСтроки(Новый Структура("ИдентификаторИсполнителя", Записи.Ключ));
					Если ЦППК_НайденныеСтрокиТЧ.Количество() > 0 Тогда
						ИндексСтрокиБП = ЦППК_БизнесПроцесс.Исполнители.Индекс(ЦППК_НайденныеСтрокиТЧ[0]);
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли; 
			Если МетаданныеПроцесса.ТабличныеЧасти.Найти("Участники") <> Неопределено Тогда
				Если ЦППК_БизнесПроцесс.Участники.Количество() > 1 Тогда
					ЦППК_НайденныеСтрокиТЧ = ЦППК_БизнесПроцесс.Участники.НайтиСтроки(Новый Структура("Идентификатор", Записи.Ключ));
					Если ЦППК_НайденныеСтрокиТЧ.Количество() > 0 Тогда
						ИндексСтрокиБП = ЦППК_БизнесПроцесс.Участники.Индекс(ЦППК_НайденныеСтрокиТЧ[0]);
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли; 
			Если МетаданныеПроцесса.ТабличныеЧасти.Найти("ИсполнителиИсполнения") <> Неопределено Тогда
				Если ЦППК_БизнесПроцесс.ИсполнителиИсполнения.Количество() > 1 Тогда
					ЦППК_НайденныеСтрокиТЧ = ЦППК_БизнесПроцесс.ИсполнителиИсполнения.НайтиСтроки(Новый Структура("ИдентификаторИсполнителя", Записи.Ключ));
					Если ЦППК_НайденныеСтрокиТЧ.Количество() > 0 Тогда
						ИндексСтрокиБП = ЦППК_БизнесПроцесс.ИсполнителиИсполнения.Индекс(ЦППК_НайденныеСтрокиТЧ[0]);
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли; 
			Если МетаданныеПроцесса.ТабличныеЧасти.Найти("ИсполнителиОзнакомления") <> Неопределено Тогда
				Если ЦППК_БизнесПроцесс.ИсполнителиОзнакомления.Количество() > 1 Тогда
					ЦППК_НайденныеСтрокиТЧ = ЦППК_БизнесПроцесс.ИсполнителиОзнакомления.НайтиСтроки(Новый Структура("ИдентификаторИсполнителя", Записи.Ключ));
					Если ЦППК_НайденныеСтрокиТЧ.Количество() > 0 Тогда
						ИндексСтрокиБП = ЦППК_БизнесПроцесс.ИсполнителиОзнакомления.Индекс(ЦППК_НайденныеСтрокиТЧ[0]);
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли; 
			
			Если ИндексСтрокиБП <> Неопределено Тогда
				
				ИндексСтрокиДерева = СтрокаПроцесс.Строки.Индекс(Записи.Значение);	
				
				Если ИндексСтрокиБП = ИндексСтрокиДерева Тогда
					Продолжить;
				ИначеЕсли ИндексСтрокиБП < ИндексСтрокиДерева Тогда
					ЦППК_НомерСмещения = ИндексСтрокиБП - ИндексСтрокиДерева;
					СтрокаПроцесс.Строки.Сдвинуть(ИндексСтрокиДерева, ЦППК_НомерСмещения);

					ИндексСтрокиБП = ИндексСтрокиБП + 1;
					ЦППК_НомерСмещения =  ИндексСтрокиДерева - ИндексСтрокиБП;
					СтрокаПроцесс.Строки.Сдвинуть(ИндексСтрокиБП, ЦППК_НомерСмещения);          
				Иначе 
					ЦППК_НомерСмещения = ИндексСтрокиБП - ИндексСтрокиДерева;
					СтрокаПроцесс.Строки.Сдвинуть(ИндексСтрокиДерева, ЦППК_НомерСмещения);

					ИндексСтрокиБП = ИндексСтрокиБП - 1;
					ЦППК_НомерСмещения = ИндексСтрокиДерева - ИндексСтрокиБП;
					СтрокаПроцесс.Строки.Сдвинуть(ИндексСтрокиБП, ЦППК_НомерСмещения);          
				КонецЕсли;	
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для каждого ДетальныеЗаписи Из СтрокаПроцесс.Строки Цикл
			
			Если Список <> Неопределено
				И Не ДетальныеЗаписи.Выполнена
				И Не ДетальныеЗаписи.ПометкаУдаления
				И ДетальныеЗаписи.СостояниеБизнесПроцесса = 
				Перечисления.СостоянияБизнесПроцессов.Активен Тогда
				
				СтрокаАктивнаяЗадача = Список.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаАктивнаяЗадача, ДетальныеЗаписи);
			КонецЕсли;  
			
		КонецЦикла;
		
	КонецЕсли;  
	
КонецПроцедуры

Процедура ЦППК_ЗаполнитьПоВнешнимПодзадачам(Дерево, СтрокаДереваЗадач, Предмет)
	
	ДеревоДляПодазадач = Дерево.Скопировать();
	ДеревоДляПодазадач.Строки.Очистить();
	СтрокаДереваДляПодазадач = ДеревоДляПодазадач.Строки.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаДереваДляПодазадач, СтрокаДереваЗадач);
	
	ПроцессыПоПредмету = ПроцессыПоПредмету(Предмет);

	ГоловныеПроцессы = ГоловныеПроцессы(ПроцессыПоПредмету.ВсеПроцессы);

	ЗадачиДляКонтекста = РаботаСЗадачами.ЗадачиПоПриложению(Предмет, Истина);
	Если ТипЗнч(Предмет) = Тип("СправочникСсылка.Проекты") Тогда
		ЗадачиПоПроекту = РаботаСЗадачами.ЗадачиПоПроекту(Предмет);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ЗадачиДляКонтекста, ЗадачиПоПроекту, Истина);
	КонецЕсли;
	КонтекстЗадач = КонтекстЗадач(ЗадачиДляКонтекста);

	Для Каждого ЗадачаПоПриложению Из КонтекстЗадач.ЗадачиПоПриложению Цикл

		РеквизитыЗадачи = КонтекстЗадач.РеквизитыЗадач[ЗадачаПоПриложению];

		Если БизнесПроцессыИЗадачиСервер.ЭтоПроцессИлиШаблонПроцесса(РеквизитыЗадачи.Источник)
			Или ЗначениеЗаполнено(РеквизитыЗадачи.ВышестоящаяЗадача)
			Или ЗначениеЗаполнено(РеквизитыЗадачи.ВышестоящееДействие) Тогда
			Продолжить;
		КонецЕсли;

		ГоловныеПроцессы.Добавить(ЗадачаПоПриложению);

	КонецЦикла;

	ТипПредмета = ТипЗнч(Предмет);

	ЗаполнятьСписокАктивныхЗадачПоДеревуВсехЗадач = 
	ТипПредмета = Тип("БизнесПроцессСсылка.КомплексныйПроцесс");

	ИспользоватьДатуИВремяВСрокахЗадач = ПолучитьФункциональнуюОпцию("ИспользоватьДатуИВремяВСрокахЗадач");
	
	ДобавитьПроцессыИПодчиненныеЗадачи(СтрокаДереваДляПодазадач, ГоловныеПроцессы,
	ПроцессыПоПредмету.ВспомогательныеПроцессы, ИспользоватьДатуИВремяВСрокахЗадач,,, КонтекстЗадач);
			
	ЦППК_РекурсивноДобавитьЗадачиПоПодзадачам(СтрокаДереваЗадач, СтрокаДереваДляПодазадач)
	
КонецПроцедуры

Процедура ЦППК_РекурсивноДобавитьЗадачиПоПодзадачам(СтрокаДереваЗадач, СтрокаДереваДляПодазадач)

	Для каждого СтрокаДерева Из СтрокаДереваДляПодазадач.Строки Цикл
		
		НоваяСтрока = СтрокаДереваЗадач.Строки.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
		
		ЦППК_РекурсивноДобавитьЗадачиПоПодзадачам(НоваяСтрока, СтрокаДерева)

	КонецЦикла;
	
КонецПроцедуры

Процедура ЦППК_ЗаполнитьЦиклыПроцессов(СтрокаПроцесс, КонтекстЗадач, ЕстьПравоЧтение)
	
	ЦППК_Задачи = КонтекстЗадач.ДанныеЗадач.ВыгрузитьКолонку("Задача"); 
	                
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсторияЗадач.Автор КАК Автор,
		|	ИсторияЗадач.Дата КАК Дата,
		|	ИсторияЗадач.ДействиеЗадачи.ДатаВыполнения КАК ДействиеЗадачиДатаВыполнения,
		|	ИсторияЗадач.Контекст КАК Контекст,
		|	ИсторияЗадач.Событие КАК Событие,
		|	ИсторияЗадач.ДействиеЗадачи КАК ДействиеЗадачи,
		|	ИсторияЗадач.Задача КАК Задача
		|ПОМЕСТИТЬ втЗадачи
		|ИЗ
		|	РегистрСведений.ИсторияЗадач КАК ИсторияЗадач
		|ГДЕ
		|	ИсторияЗадач.Задача В(&Задачи)
		|	И ИсторияЗадач.Событие = ЗНАЧЕНИЕ(Справочник.СобытияЗадач.Выполнение)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДействиеЗадачи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(втЗадачи.Дата) КАК Дата,
		|	втЗадачи.Задача КАК Задача,
		|	втЗадачи.ДействиеЗадачи КАК ДействиеЗадачи
		|ПОМЕСТИТЬ втДействующиеЗадачи
		|ИЗ
		|	втЗадачи КАК втЗадачи
		|ГДЕ
		|	втЗадачи.ДействиеЗадачиДатаВыполнения <> ДАТАВРЕМЯ(1, 1, 1)
		|
		|СГРУППИРОВАТЬ ПО
		|	втЗадачи.Задача,
		|	втЗадачи.ДействиеЗадачи
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Задача,
		|	ДействиеЗадачи,
		|	Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЗадачи.Автор КАК Автор,
		|	втЗадачи.Дата КАК Дата,
		|	втЗадачи.Контекст КАК Контекст,
		|	втЗадачи.Событие КАК Событие,
		|	втЗадачи.ДействиеЗадачи КАК ДействиеЗадачи,
		|	втЗадачи.ДействиеЗадачи.Номер КАК ДействиеЗадачиНомер,
		|	втЗадачи.Задача КАК Задача,
		|	РеестрЗадачПоИсполнителям.ВРаботе КАК ВРаботе,
		|	РеестрЗадачПоАвторам.Выполнена КАК Выполнена,
		|	РеестрЗадачПоИсполнителям.ДатаВыполнения КАК ДатаВыполнения,
		|	РеестрЗадачПоИсполнителям.Заголовок КАК Заголовок,
		|	РеестрЗадачПоИсполнителям.КонтрольныйСрок КАК КонтрольныйСрок,
		|	РеестрЗадачПоИсполнителям.КонтрольныйСрокОбщий КАК КонтрольныйСрокОбщий,
		|	РеестрЗадачПоИсполнителям.Приоритет КАК Приоритет,
		|	РеестрЗадачПоАвторам.Просрочена КАК Просрочена,
		|	РеестрЗадачПоАвторам.РезультатЗадачи КАК РезультатЗадачи,
		|	РеестрЗадачПоАвторам.СостояниеЗадачи КАК СостояниеЗадачи,
		|	РеестрЗадачПоИсполнителям.СостояниеКонтроля КАК СостояниеКонтроля,
		|	РеестрЗадачПоИсполнителям.Срок КАК Срок,
		|	РеестрЗадачПоИсполнителям.Флаг КАК Флаг
		|ИЗ
		|	втЗадачи КАК втЗадачи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РеестрЗадачПоАвторам КАК РеестрЗадачПоАвторам
		|		ПО втЗадачи.Задача = РеестрЗадачПоАвторам.Задача
		|			И (РеестрЗадачПоАвторам.РеестрЗадач = ЗНАЧЕНИЕ(Справочник.РеестрыЗадач.ВсеЗадачи))
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РеестрЗадачПоИсполнителям КАК РеестрЗадачПоИсполнителям
		|		ПО втЗадачи.ДействиеЗадачи = РеестрЗадачПоИсполнителям.ДействиеЗадачи
		|			И втЗадачи.Задача = РеестрЗадачПоИсполнителям.Задача
		|			И (РеестрЗадачПоИсполнителям.РеестрЗадач = ЗНАЧЕНИЕ(Справочник.РеестрыЗадач.ВсеЗадачи))
		|ГДЕ
		|	НЕ (втЗадачи.Задача, втЗадачи.ДействиеЗадачи, втЗадачи.Дата) В
		|				(ВЫБРАТЬ
		|					втЗадачи.Задача,
		|					втЗадачи.ДействиеЗадачи,
		|					втЗадачи.Дата
		|				ИЗ
		|					втДействующиезадачи КАК втЗадачи)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
	
	Запрос.УстановитьПараметр("Задачи", ЦППК_Задачи);

	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеДействия = РезультатЗапроса.Выбрать();
	
	КоличествоСтрокОтмены = 0;
	
	Пока ДанныеДействия.Следующий() Цикл   
		
		История = ДанныеДействия.Контекст.Получить();
		Если История = Неопределено ИЛИ НЕ История.Свойство("Исполнитель") Тогда
			Продолжить;	
		КонецЕсли;	

		СтрокаРодитель = СтрокаПроцесс.Строки.Найти(
		ДанныеДействия.Задача, "Ссылка", Истина);
		
		Если СтрокаРодитель = Неопределено Тогда
			Продолжить;	
		КонецЕсли;
		
		СтрокаПовтор = СтрокаРодитель.Строки.Найти(
		ДанныеДействия.Дата, "ДатаВыполнения", Истина);
		
		Если СтрокаПовтор <> Неопределено Тогда
			Продолжить;	
		КонецЕсли;
		
		КоличествоСтрокОтмены = КоличествоСтрокОтмены + 1;
		
		СтрокаЗадача = СтрокаРодитель.Строки.Добавить();
		
		СтрокаЗадача.Ссылка = ДанныеДействия.Задача;
		СтрокаЗадача.Наименование = ?(ЕстьПравоЧтение,
			ДанныеДействия.Заголовок,
			НСтр("ru = 'Описание скрыто'"));
		СтрокаЗадача.Исполнитель = История.Исполнитель;
		СтрокаЗадача.СрокИсполнения = ДанныеДействия.Срок;
		СтрокаЗадача.ПринятаКИсполнению = ДанныеДействия.ВРаботе Или ДанныеДействия.Выполнена;
		СтрокаЗадача.Автор = ДанныеДействия.Автор;
		СтрокаЗадача.Флаг = ДанныеДействия.Флаг;
		СтрокаЗадача.НомерФлага =
			РаботаСФлагамиОбъектовСервер.ПолучитьНомерФлага(ДанныеДействия.Флаг);
		СтрокаЗадача.Выполнена = ДанныеДействия.Выполнена;
		СтрокаЗадача.Просрочена = ДанныеДействия.Просрочена;
		
		СтрокаЗадача.ДатаВыполнения = ДанныеДействия.Дата;
		
		СтрокаЗадача.Важность =
			Справочники.ПриоритетыЗадач.ИндексКартинкиПриоритета(ДанныеДействия.Приоритет);

		СтрокаЗадача.СостояниеКартинка = 5;
		
		СтрокаЗадача.СостояниеКонтроля = Контроль.ИндексКартинкиКонтроля(
			ДанныеДействия.СостояниеКонтроля,
			ДанныеДействия.КонтрольныйСрок,
			ДанныеДействия.КонтрольныйСрокОбщий);
			
		Если ЗначениеЗаполнено(История.ТекстРезультатаВыполнения) Тогда
			СтрокаЗадача.РезультатВыполнения =
				?(ЕстьПравоЧтение,
					История.ТекстРезультатаВыполнения,
					НСтр("ru = 'Результат скрыт'"));
		КонецЕсли;
			
		СтрокаЗадача.Тип = 1;
		
		КоличествоСтрок = СтрокаРодитель.Строки.Количество(); 
		ИндексСтрокиОтмены = КоличествоСтрок - КоличествоСтрокОтмены;
		СтрокаРодитель.Строки.Сдвинуть(КоличествоСтрок-1, -ИндексСтрокиОтмены);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
