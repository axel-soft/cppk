
Функция ПолучитьДокументПредприятияПоЗадачеИсполнителя(ЗадачаИсполнителя) Экспорт //+ЦППК САНФ-023288 31.01.2024
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗадачаИсполнителяПредметы.Предмет КАК Предмет
	|ИЗ
	|	Задача.ЗадачаИсполнителя.Предметы КАК ЗадачаИсполнителяПредметы
	|ГДЕ
	|	ЗадачаИсполнителяПредметы.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ЗадачаИсполнителя);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Предмет;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции //-ЦППК 31.01.2024

Функция ПолучитьДокументПредприятияПоЗадаче(Задача) Экспорт //+ЦППК САНФ-023288 31.01.2024
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗадачаПриложения.Приложение КАК Приложение
	|ИЗ
	|	Документ.Задача.Приложения КАК ЗадачаПриложения
	|ГДЕ
	|	ЗадачаПриложения.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Задача);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Приложение;
	КонецЦикла;
	
	Возврат Неопределено;

КонецФункции //-ЦППК 31.01.2024

Функция ПолучитьСрокИсполненияНаСервере(ЗадачаИсполнителя) Экспорт //+ЦППК САНФ-023288 31.01.2024
	
	//ДокументПредприятия = ПолучитьДокументПредприятияПоЗадачеИсполнителя(ЗадачаИсполнителя);
	//Если ЗначениеЗаполнено(ДокументПредприятия) Тогда 
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЗадачаИсполнителя, "СрокИсполнения");
	//КонецЕсли;  
	
	Возврат Дата(1,1,1,0,0,0);
	
КонецФункции //-ЦППК 31.01.2024

Функция ЗаполнитьСрокИсполнения(ОбрабатываемыеПредметы, ГлавнаяЗадача) Экспорт

	//++AxelSoft Шарапова 06.01.2024 САНФ-029987
	// Смена времени исполнения на данные в константе ЦППК_ГраницаВремениСрокаИсполнения
	//--AxelSoft Шарапова 06.01.2024 САНФ-029987

	СрокИсполненияДокумента = Дата('00010101');
	Для каждого Предмет из ОбрабатываемыеПредметы Цикл
        РевизитыВидаДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Предмет.ВидДокумента, "ЯвляетсяВходящейКорреспонденцией, ЯвляетсяЗаявкойНаВозврат");
        РевизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Предмет, "СрокИсполнения");
		Если РевизитыВидаДокумента.ЯвляетсяВходящейКорреспонденцией И НЕ РевизитыВидаДокумента.ЯвляетсяЗаявкойНаВозврат Тогда
			СрокИсполненияДокумента = РевизитыДокумента.СрокИсполнения;
		КонецЕсли;  				
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СрокИсполненияДокумента) Тогда
		СрокИсполнения = ОбновитьСрокПоДаннымГраницыВремениСрокаИсполнения(СрокИсполненияДокумента);	
		Возврат СрокИсполнения;
	КонецЕсли;
		РевизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ГлавнаяЗадача, "СрокИсполнения");
	Если ЗначениеЗаполнено(РевизитыЗадачи.СрокИсполнения) Тогда
		СрокИсполнения = ОбновитьСрокПоДаннымГраницыВремениСрокаИсполнения(РевизитыЗадачи.СрокИсполнения);	
		Возврат СрокИсполнения;
	КонецЕсли;
	
	Возврат Дата('00010101');
	
КонецФункции

Функция ПолучитьДанныеИзКлючаЗаписи(КлючЗаписи, ИмяРеквизита) Экспорт
	
	Если НЕ ТипЗнч(КлючЗаписи) = Тип("РегистрСведенийКлючЗаписи.ДанныеДокументовПредприятия") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если КлючЗаписи.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат КлючЗаписи[ИмяРеквизита];
	
КонецФункции

Функция ДанныеПоКлючуЗаписи(КлючЗаписи, Реквизиты) Экспорт
	
	Результат = Новый Структура; 
	Если КлючЗаписи.Пустой() ИЛИ ПустаяСтрока(Реквизиты) Тогда
		Возврат Результат;
	КонецЕсли;
		
	Реквизиты = СтрРазделить(Реквизиты, ",", Ложь);
	Для Индекс = 0 По Реквизиты.ВГраница() Цикл
		Реквизит = СокрЛП(Реквизиты[Индекс]);
		Результат.Вставить(Реквизит, КлючЗаписи[Реквизит]);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ГлавныйИсполнительЗадачи(Задача, АвторРезолюции, КоличествоДублей) Экспорт //+ЦППК САНФ-027028 25.07.2024
	
	Если КоличествоДублей < 2 Тогда
		Возврат Истина;
	КонецЕсли;
   
	БизнесПроцесс = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Задача, "БизнесПроцесс");
  	ИсполнительЗадачи =  Исполнитель(БизнесПроцесс);
	Если ЗначениеЗаполнено(ИсполнительЗадачи) Тогда
	   	Возврат ИсполнительЗадачи = АвторРезолюции;
	Иначе 
			
	КонецЕсли;

КонецФункции    

Функция Исполнитель(БизнесПроцесс)
	
	ГлавнаяЗадача = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БизнесПроцесс, "ГлавнаяЗадача");
	БизнесПроцессЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ГлавнаяЗадача, "БизнесПроцесс");	
	
	Если Не ЗначениеЗаполнено(ГлавнаяЗадача) Тогда
		
		Если Не ОбщегоНазначения.ЕстьРеквизитОбъекта("Исполнитель", БизнесПроцесс.Метаданные())  Тогда
			Возврат Неопределено;	
		КонецЕсли;
						
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БизнесПроцесс, "Исполнитель");
		
	Иначе
		Возврат Исполнитель(БизнесПроцессЗадачи);
	КонецЕсли;
	
КонецФункции

//++МельниченкоНН 16.08.2024 САНФ-027815
Процедура СформироватьНаименованиеБП_ПоПриложениямЗадачи(БП_Объект, ЗадачаИсполнителяСсылка) Экспорт

	Если ТипЗнч(БП_Объект) = Тип("БизнесПроцессОбъект.Исполнение") Тогда
		ТекстДействияБП = "Исполнить";
	ИначеЕсли ТипЗнч(БП_Объект) = Тип("БизнесПроцессОбъект.Ознакомление") Тогда 	
		ТекстДействияБП = "Ознакомиться";
	ИначеЕсли ТипЗнч(БП_Объект) = Тип("БизнесПроцессОбъект.Подписание") Тогда 	
		ТекстДействияБП = "Подписать";
	ИначеЕсли ТипЗнч(БП_Объект) = Тип("БизнесПроцессОбъект.Приглашение") Тогда 	
		ТекстДействияБП = "Пригласить";
	ИначеЕсли ТипЗнч(БП_Объект) = Тип("БизнесПроцессОбъект.Рассмотрение") Тогда 	
		ТекстДействияБП = "Рассмотреть";
	ИначеЕсли ТипЗнч(БП_Объект) = Тип("БизнесПроцессОбъект.Регистрация") Тогда 	
		ТекстДействияБП = "Зарегистрировать";
	ИначеЕсли ТипЗнч(БП_Объект) = Тип("БизнесПроцессОбъект.Согласование") Тогда 	
		ТекстДействияБП = "Согласовать";
	ИначеЕсли ТипЗнч(БП_Объект) = Тип("БизнесПроцессОбъект.Утверждение") Тогда 	
		ТекстДействияБП = "Утвердить";
	Иначе
		Возврат;
	КонецЕсли;
	
	Попытка
		ДействиеЗадачи = Документы.ДействиеЗадачи.НайтиПоИсточнику(ЗадачаИсполнителяСсылка);
		ПриложенияЗадачи = РаботаСЗадачами.ПриложенияЗадачи(ДействиеЗадачи.Задача, ДействиеЗадачи);
		Если ПриложенияЗадачи.Количество() > 0 Тогда
			БП_Объект.Наименование = ТекстДействияБП + " """ + ПриложенияЗадачи[0].Приложение.Наименование + """";
		КонецЕсли;
	Исключение
	КонецПопытки;
	
КонецПроцедуры
//--МельниченкоНН 16.08.2024 САНФ-027815

//++AxelSoft Шарапова 30.10.2024 САНФ-029987
Функция ПолучитьГраницуВремениСрокаИсполнения() Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Константы.ЦППК_ГраницаВремениСрокаИсполнения.Получить();
	
КонецФункции

Функция ОбновитьСрокПоДаннымГраницыВремениСрокаИсполнения(СрокИсполнения) Экспорт

	ЦППК_ГраницаСрокаИсполнения = ЦППК_ОбщийМодульВызовСервера.ПолучитьГраницуВремениСрокаИсполнения();
	
	ЦППК_СрокИсполнения = НачалоДня(СрокИсполнения)
	+ Час(ЦППК_ГраницаСрокаИсполнения) * 3600
	+ Минута(ЦППК_ГраницаСрокаИсполнения) * 60
	+ Секунда(ЦППК_ГраницаСрокаИсполнения);
	
	Возврат ЦППК_СрокИсполнения;	
	
КонецФункции 

//--AxelSoft Шарапова 30.10.2024 САНФ-029987 



#Область ФункцииВноситИзменения_Документооборот
			
// Вернет что вид документа можно Изменить.
// 
// Параметры:
//  ВидДокумента - СправочникССылка.ВидыДокументов
// 
// Возвращаемое значение:
//  Булево - Этот вид документа можно отменить
&НаСервере
Функция ЦППК_ЭтотВидДокументаМожноИзменить(ВидДокумента) Экспорт
	
	Если Не ЦППК_ЕстьЛиНастройкиСвязейИзмененДокументом() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ВидыИзмененныхДокументов = ЦППК_ПолучитьВидыИзмененныхДокументов(ВидДокумента);
	Возврат (ВидыИзмененныхДокументов.Количество() <> 0);
	
КонецФункции	

// Вернет, есть ли настройки связей отмены.
// 
// Возвращаемое значение:
//  Булево - Есть ли настройки связей отмены
&НаСервере
Функция ЦППК_ЕстьЛиНастройкиСвязейИзмененДокументом() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкаСвязей.СсылкаНа КАК СсылкаНа
		|ИЗ
		|	РегистрСведений.НастройкаСвязей КАК НастройкаСвязей
		|ГДЕ
		|	НастройкаСвязей.ТипСвязи = &ТипСвязи";	
		
	Запрос.УстановитьПараметр("ТипСвязи", Справочники.ТипыСвязей.ЦППК_ИзмененДокументом);	
	
	МассивВидов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СсылкаНа");
	Для Каждого Вид Из МассивВидов Цикл
		Если ЗначениеЗаполнено(Вид) И ТипЗнч(Вид) = Тип("СправочникСсылка.ВидыДокументов") Тогда
			Возврат Истина;
		КонецЕсли;	
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции	

// Вернет массив видов - новых документов, которые могут Изменить текущий.
// 
// Параметры:
//  ВидДокумента - СправочникСсылка.ВидыДокументов
// 
// Возвращаемое значение:
//  Массив из СправочникСсылка.ВидыДокументов
&НаСервере
Функция ЦППК_ПолучитьВидыИзмененныхДокументов(ВидДокумента) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкаСвязей.СсылкаНа КАК СсылкаНа
		|ИЗ
		|	РегистрСведений.НастройкаСвязей КАК НастройкаСвязей
		|ГДЕ
		|	НастройкаСвязей.СсылкаИз = &СсылкаИз
		|	И НастройкаСвязей.ТипСвязи = &ТипСвязи";	
		
	Запрос.УстановитьПараметр("СсылкаИз", ВидДокумента);	
	Запрос.УстановитьПараметр("ТипСвязи", Справочники.ТипыСвязей.ЦППК_ИзменяетДокумент);	
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СсылкаНа");
	
КонецФункции	

// Этот вид документа может Изменить.
// 
// Параметры:
//  ВидДокумента - СправочникСсылка.ВидыДокументов
// 
// Возвращаемое значение:
//  Булево - Этот вид документа может изменить 
&НаСервере
Функция ЦППК_ЭтотВидДокументаМожетВноситьИзменения(ВидДокумента) Экспорт
	
	Если Не ЦППК_ЕстьЛиНастройкиСвязейИзмененДокументом() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ВидыИзменяющихДокументов = ЦППК_ПолучитьВидыИзмененныхДокументов(ВидДокумента);
	Возврат (ВидыИзменяющихДокументов.Количество() <> 0);
	
КонецФункции	
		

// Удалить данные об измененых документах. - из всех 2 регистров
// 
// Параметры:
//  Документ - СправочникССылка.ДокументыПредприятия - Изменяющий документ 
&НаСервере
Процедура ЦППК_УдалитьДанныеОбИзмененныхДокументах(Документ) Экспорт
	
	МассивДокументов = РегистрыСведений.ЦППК_ИзмененныеДокументы.ПрочитатьДанные(Документ);
	Для Каждого ИзменяемыйДок Из МассивДокументов Цикл
		РегистрыСведений.ЦППК_ИзмененныеДокументы.УдалитьДанные(Документ, ИзменяемыйДок.Документ);
	КонецЦикла;	
	
	МассивДокументов = РегистрыСведений.ОтложеннаяУстановкаСвязей.ПрочитатьДанные(Документ, 
		Справочники.ТипыСвязей.ЦППК_ИзмененДокументом);
	Для Каждого ИзменяемыйДок Из МассивДокументов Цикл
		РегистрыСведений.ОтложеннаяУстановкаСвязей.УдалитьДанные(
			Документ, ИзменяемыйДок.Документ, 
			Справочники.ТипыСвязей.ЦППК_ИзмененДокументом);
	КонецЦикла;	
	
КонецПроцедуры	
	
#КонецОбласти

#Область ВноситИзменения_СвязиОбъектов

Процедура ЦППК_ПрочитатьИзмененныеДокументы(ДокументСсылка, РегистрационныйНомер, СписокИзмененныхДокументов) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивДок = РегистрыСведений.ЦППК_ИзмененныеДокументы.ПрочитатьДанные(ДокументСсылка);
	Для Каждого Строка Из МассивДок Цикл
		НовСтр = СписокИзмененныхДокументов.Добавить();
		НовСтр.Документ = Строка.Документ;
		НовСтр.ДатаИзменения = Строка.ДатаИзменения;
		НовСтр.УжеУстановлен = Ложь;
		НовСтр.Источник = "ИзмененныеДокументы";
	КонецЦикла;	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры 

Процедура ЦППК_УстановитьИзменение(
	Документ,
	НачальныйСписокДокументов,
	СписокДокументов,
	ТипСвязи,
	Установил = Неопределено,
	ДатаУстановки = Неопределено,
	Комментарий = "",
	ЭтоРегистрация = Ложь,
	ДокументЗарегистрирован = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
		
	Расширить = Ложь;
	
	// Очистим старые связи - неважно, изменились или нет
	Для Каждого СтрокаДокумент Из НачальныйСписокДокументов Цикл 
		
		Если СтрокаДокумент.Источник = "СвязиОбъектов" Тогда
			СвязиОбъектов.УдалитьСвязь(Документ, СтрокаДокумент.Документ, ТипСвязи);
		ИначеЕсли СтрокаДокумент.Источник = "ОтложеннаяУстановкаСвязей" Тогда
			РегистрыСведений.ОтложеннаяУстановкаСвязей.УдалитьДанные(Документ, СтрокаДокумент.Документ, ТипСвязи);
		ИначеЕсли СтрокаДокумент.Источник = "ИзмененныйДокумент" Тогда
			РегистрыСведений.ЦППК_ИзмененныеДокументы.УдалитьДанные(Документ, СтрокаДокумент.Документ);
		Иначе
			ОбщегоНазначения.СообщитьПользователю(СтрШаблон("Не известный источник %1 при изменении связей", СтрокаДокумент.Источник));
		КонецЕсли;	
		
	КонецЦикла;
	
	ОписаниеСтрока = НСтр("ru = 'УстановитьИзменение.'");
	ЕстьСтроки = Ложь;
	
	// всегда запишем новые связи
	Для Каждого СтрокаДокумент Из СписокДокументов Цикл 
		
		ЕстьСтроки = Истина;
		ОписаниеСтрока = ОписаниеСтрока + Символы.ВК 
			+ СтрШаблон(НСтр("ru = 'Документ %1.  ДатаИзменения %2'"), СтрокаДокумент.Документ, СтрокаДокумент.ДатаИзменения);
		
		НастройкаСвязи = СвязиОбъектов.ПолучитьНастройкуСвязи(Документ, 
															  СтрокаДокумент.Документ,
															  Справочники.ТипыСвязей.ЦППК_ИзмененДокументом);	
		
		Если НастройкаСвязи <> Неопределено
			И (НастройкаСвязи.СинхронизироватьДоступ = Перечисления.ВариантыСинхронизацииДоступа.Копировать
				Или НастройкаСвязи.СинхронизироватьДоступ = Перечисления.ВариантыСинхронизацииДоступа.Расширять) Тогда 
			Расширить = Истина;
		КонецЕсли;
		
			
		РегистрыСведений.ЦППК_ИзмененныеДокументы.ЗаписатьДанные(Документ, СтрокаДокумент.Документ, СтрокаДокумент.ДатаИзменения);
		СтрокаДокумент.Источник = "ИзмененныйДокумент";	
		СвязиОбъектов.СоздатьСвязь(Документ, СтрокаДокумент.Документ, 
								   Справочники.ТипыСвязей.ЦППК_ИзменяетДокумент, 
								   Установил, ДатаУстановки, Комментарий);
		СвязиОбъектов.СоздатьСвязь(СтрокаДокумент.Документ, Документ, 
								   Справочники.ТипыСвязей.ЦППК_ИзмененДокументом, 
								   Установил, ДатаУстановки, Комментарий);
	
	КонецЦикла;
	
	Если ЕстьСтроки Тогда
		ПротоколированиеРаботыСотрудников.ЗаписатьИзменение(Документ,
			ОписаниеСтрока);
	КонецЕсли;		
	
	// Перезаполнение рабочих групп связанных объектов.
	Если Расширить Тогда 
		РаботаСРабочимиГруппами.РасширитьРабочуюГруппуСвязанныхОбъектов(Документ);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти  

Функция ПолучитьСсылкуИзНавигационной(НС) Экспорт
	
	ПерваяТочка = Найти(НС, "e1cib/data/");
	ВтораяТочка = Найти(НС, "?ref=");
	
	ПредставлениеТипа   = Сред(НС, ПерваяТочка + 11, ВтораяТочка - ПерваяТочка - 11);
	ШаблонЗначения = ЗначениеВСтрокуВнутр(ПредопределенноеЗначение(ПредставлениеТипа + ".ПустаяСсылка"));
	ЗначениеСсылки = СтрЗаменить(ШаблонЗначения, "00000000000000000000000000000000", Сред(НС, ВтораяТочка + 5));
	Возврат ЗначениеИзСтрокиВнутр(ЗначениеСсылки);
	
КонецФункции 
	
Функция УжеЕстьИзменяющееДопСоглашение(ЗНАЧ Документ) Экспорт
	// Котляров 26.08.2025 САНФ-035983  Перенос сроков договора.
	СтруктураВозврата = Новый Структура("ПорядокПродления, ЕстьИзменяющие, ДоИсполненияОбязательств");
	СтруктураВозврата.ПорядокПродления = Перечисления.ПорядокПродления.ПустаяСсылка();
	СтруктураВозврата.ЕстьИзменяющие = Ложь;
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ДействиеЗадачи") Тогда
		Если Документ.Задача.Приложения.Количество() = 1 Тогда
			Документ = Документ.Задача.Приложения[0].Приложение;
		Иначе
			Возврат СтруктураВозврата;
		КонецЕсли;	
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	
		"ВЫБРАТЬ
		|	СвязиОбъектов.Объект КАК Договор,
		|	ВЫРАЗИТЬ(СвязиОбъектов.Объект КАК Справочник.ДокументыПредприятия).ДоИсполненияОбязательств КАК ОбъектДоИсполненияОбязательств,
		|	NULL КАК СвязанныйОбъект
		|ПОМЕСТИТЬ ТабДоговор
		|ИЗ
		|	РегистрСведений.СвязиОбъектов КАК СвязиОбъектов
		|ГДЕ
		|	СвязиОбъектов.Объект.Наименование ПОДОБНО ""Договор%""
		|	И СвязиОбъектов.СвязанныйОбъект = &ЭтотДокумент
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	СвязиОбъектов.СвязанныйОбъект,
		|	ВЫРАЗИТЬ(СвязиОбъектов.СвязанныйОбъект КАК Справочник.ДокументыПредприятия).ДоИсполненияОбязательств,
		|	СвязиОбъектов.Объект
		|ИЗ
		|	РегистрСведений.СвязиОбъектов КАК СвязиОбъектов
		|ГДЕ
		|	СвязиОбъектов.Объект = &ЭтотДокумент
		|	И СвязиОбъектов.СвязанныйОбъект.Наименование ПОДОБНО ""Договор%""
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
		|	ИсторияСроковДействияДокументов.ДатаИзменения КАК ДатаИзменения,
		|	ИсторияСроковДействияДокументов.Документ КАК Документ,
		|	ИсторияСроковДействияДокументов.ДокументИсточникИзменения КАК ДокументИсточникИзменения,
		|	ИсторияСроковДействияДокументов.Документ.ПорядокПродления КАК ДоговорПорядокПродления,
		|	ТабДоговор.Договор КАК Договор,
		|	ТабДоговор.ОбъектДоИсполненияОбязательств КАК ДоговорДоИсполненияОбязательств
		|ИЗ
		|	ТабДоговор КАК ТабДоговор
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсторияСроковДействияДокументов КАК ИсторияСроковДействияДокументов
		|		ПО ТабДоговор.Договор = ИсторияСроковДействияДокументов.Документ
		|ГДЕ
		|	ИсторияСроковДействияДокументов.Документ В
		|			(ВЫБРАТЬ
		|				ТабДоговор.Договор
		|			ИЗ
		|				ТабДоговор)
		|	И ИсторияСроковДействияДокументов.ДокументИсточникИзменения <> &ЭтотДокумент
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаИзменения УБЫВ";
	
	Запрос.УстановитьПараметр("ЭтотДокумент", Документ.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ДокументИсточникИзменения) Тогда
			СтруктураВозврата.ЕстьИзменяющие = Истина;
			СтруктураВозврата.ПорядокПродления = ВыборкаДетальныеЗаписи.ДоговорПорядокПродления;     
			СтруктураВозврата.ДоИсполненияОбязательств = ВыборкаДетальныеЗаписи.ДоговорДоИсполненияОбязательств; 
			Возврат СтруктураВозврата;
		Иначе
			СтруктураВозврата.ПорядокПродления = ВыборкаДетальныеЗаписи.ДоговорПорядокПродления;
			СтруктураВозврата.ДоИсполненияОбязательств = ВыборкаДетальныеЗаписи.ДоговорДоИсполненияОбязательств; 
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтруктураВозврата;
	 
 КонецФункции
