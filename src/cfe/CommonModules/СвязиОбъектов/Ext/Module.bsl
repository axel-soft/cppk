
&ИзменениеИКонтроль("ПолучитьНастройкиСвязи")
Функция ЦППК_ПолучитьНастройкиСвязи(Объект, СвязанныйОбъект)

	НастройкиСвязи = Новый ТаблицаЗначений;
	НастройкиСвязи.Колонки.Добавить("ТипСвязи");
	НастройкиСвязи.Колонки.Добавить("СсылкаИз");
	НастройкиСвязи.Колонки.Добавить("ТипСсылкаИз");
	НастройкиСвязи.Колонки.Добавить("ТипСсылкаИзПредставление");
	НастройкиСвязи.Колонки.Добавить("СсылкаНа");
	НастройкиСвязи.Колонки.Добавить("ТипСсылкаНа");
	НастройкиСвязи.Колонки.Добавить("ТипСсылкаНаПредставление");
	НастройкиСвязи.Колонки.Добавить("ХарактерСвязи");
	НастройкиСвязи.Колонки.Добавить("ТипОбратнойСвязи");
	НастройкиСвязи.Колонки.Добавить("ХарактерОбратнойСвязи");
	НастройкиСвязи.Колонки.Добавить("Предопределенная");
	НастройкиСвязи.Колонки.Добавить("Обязательная");
	НастройкиСвязи.Колонки.Добавить("СинхронизироватьДоступ");
	НастройкиСвязи.Колонки.Добавить("Важная");
	НастройкиСвязи.Колонки.Добавить("КомментарийСвязи");

	Если Не ЗначениеЗаполнено(Объект) Тогда
		Возврат НастройкиСвязи;
	КонецЕсли;

	ИспользованиеВстроеннойПочты = ПолучитьФункциональнуюОпцию("ИспользоватьВстроеннуюПочту")
	И ПолучитьФункциональнуюОпцию("ИспользованиеВстроеннойПочты");

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкаСвязей.ТипСвязи КАК ТипСвязи,
	|	НастройкаСвязей.СсылкаИз КАК СсылкаИз,
	|	НастройкаСвязей.СсылкаНа КАК СсылкаНа,
	|	НастройкаСвязей.ХарактерСвязи КАК ХарактерСвязи,
	|	НастройкаСвязей.ТипОбратнойСвязи КАК ТипОбратнойСвязи,
	|	НастройкаСвязей.ХарактерОбратнойСвязи КАК ХарактерОбратнойСвязи,
	|	НастройкаСвязей.Предопределенная КАК Предопределенная,
	|	НастройкаСвязей.Обязательная КАК Обязательная,
	|	НастройкаСвязей.Комментарий КАК Комментарий,
	|	НастройкаСвязей.СинхронизироватьДоступ КАК СинхронизироватьДоступ,
	|	НастройкаСвязей.Важная КАК Важная,
	|	ТипыСвязей.Комментарий КАК КомментарийСвязи
	|ИЗ
	|	РегистрСведений.НастройкаСвязей КАК НастройкаСвязей
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТипыСвязей КАК ТипыСвязей
	|		ПО НастройкаСвязей.ТипСвязи = ТипыСвязей.Ссылка
	|ГДЕ
	|	НЕ НастройкаСвязей.ТипСвязи.ПометкаУдаления
#Вставка
	//++AxelSoft Шарапова 26.02.2025 САНФ-032224
	|	И НЕ НастройкаСвязей.ЦППК_НеИспользовать
	//--AxelSoft Шарапова 26.02.2025 САНФ-032224
#КонецВставки
	|	И НЕ НастройкаСвязей.ТипСвязи.НеИспользовать";

	Если ТипЗнч(Объект) = Тип("СправочникСсылка.Файлы")
		Или ТипЗнч(Объект) = Тип("СправочникСсылка.Мероприятия")
		Или ТипЗнч(Объект) = Тип("СправочникСсылка.Проекты")
		Или ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(Объект)
		Или ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(Объект) Тогда
		Запрос.Текст = Запрос.Текст +
		" И (ТИПЗНАЧЕНИЯ(НастройкаСвязей.СсылкаИз) = ТИПЗНАЧЕНИЯ(&Объект)) ";
		Запрос.УстановитьПараметр("Объект", Объект);
	Иначе
		Запрос.Текст = Запрос.Текст +
		" И (НастройкаСвязей.СсылкаИз = &ВидДокумента
		| ИЛИ НастройкаСвязей.СсылкаИз В (&Родители)
		| ИЛИ НастройкаСвязей.СсылкаИз = &ПустаяСсылка) 
		| И НастройкаСвязей.ВидКорреспонденцииДокументИз = &ВидКорреспонденцииИз";

		Если ТипЗнч(Объект) = Тип("Структура") Тогда 
			ВидДокументаСсылкаИз = Объект.ВидДокумента;
		Иначе 
			ВидДокументаСсылкаИз = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "ВидДокумента");
		КонецЕсли;

		РеквизитыВида = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидДокументаСсылкаИз,
		"ЯвляетсяВходящейКорреспонденцией, ЯвляетсяИсходящейКорреспонденцией");

		Если РеквизитыВида.ЯвляетсяВходящейКорреспонденцией = Истина Тогда 
			Запрос.УстановитьПараметр("ВидКорреспонденцииИз", Перечисления.ВидыКорреспонденции.Входящая);

		ИначеЕсли РеквизитыВида.ЯвляетсяИсходящейКорреспонденцией = Истина Тогда 
			Запрос.УстановитьПараметр("ВидКорреспонденцииИз", Перечисления.ВидыКорреспонденции.Исходящая);

		Иначе 
			Запрос.УстановитьПараметр("ВидКорреспонденцииИз", Перечисления.ВидыКорреспонденции.ПустаяСсылка());
		КонецЕсли;

		ПустаяСсылкаИз = Справочники[ВидДокументаСсылкаИз.Метаданные().Имя].ПустаяСсылка();
		РодителиИз = ПолучитьРодителей(ВидДокументаСсылкаИз);

		Запрос.УстановитьПараметр("ВидДокумента", ВидДокументаСсылкаИз);
		Запрос.УстановитьПараметр("Родители", РодителиИз);
		Запрос.УстановитьПараметр("ПустаяСсылка", ПустаяСсылкаИз);
	КонецЕсли;

	Если Не ИспользованиеВстроеннойПочты Тогда 
		Запрос.Текст = Запрос.Текст + "
		| И ТИПЗНАЧЕНИЯ(НастройкаСвязей.СсылкаИз) <> ТИП(Документ.ВходящееПисьмо)
		| И ТИПЗНАЧЕНИЯ(НастройкаСвязей.СсылкаИз) <> ТИП(Документ.ИсходящееПисьмо)
		| И ТИПЗНАЧЕНИЯ(НастройкаСвязей.СсылкаНа) <> ТИП(Документ.ВходящееПисьмо)
		| И ТИПЗНАЧЕНИЯ(НастройкаСвязей.СсылкаНа) <> ТИП(Документ.ИсходящееПисьмо)";
	КонецЕсли;

	Если СвязанныйОбъект <> Неопределено Тогда
		Если ТипЗнч(СвязанныйОбъект) = Тип("Строка")
			Или ТипЗнч(СвязанныйОбъект) = Тип("СправочникСсылка.Файлы")
			Или ТипЗнч(СвязанныйОбъект) = Тип("СправочникСсылка.Мероприятия")
			Или ТипЗнч(СвязанныйОбъект) = Тип("СправочникСсылка.Проекты")
			Или ВстроеннаяПочтаКлиентСервер.ЭтоВходящееПисьмо(СвязанныйОбъект)
			Или ВстроеннаяПочтаКлиентСервер.ЭтоИсходящееПисьмо(СвязанныйОбъект) Тогда
			Запрос.Текст = Запрос.Текст +
			" И (ТИПЗНАЧЕНИЯ(НастройкаСвязей.СсылкаНа) = ТИПЗНАЧЕНИЯ(&СвязанныйОбъект)) ";
			Запрос.УстановитьПараметр("СвязанныйОбъект", СвязанныйОбъект);
		Иначе
			Запрос.Текст = Запрос.Текст +
			" И (НастройкаСвязей.СсылкаНа = &ВидДокументаСсылкаНа
			| ИЛИ НастройкаСвязей.СсылкаНа В (&РодителиСсылкаНа)
			| ИЛИ НастройкаСвязей.СсылкаНа = &ПустаяСсылкаНа) 
			| И НастройкаСвязей.ВидКорреспонденцииДокументНа = &ВидКорреспонденцииНа";

			Если ТипЗнч(СвязанныйОбъект) = Тип("Структура") Тогда 
				ВидДокументаСсылкаНа = СвязанныйОбъект.ВидДокумента;
			Иначе 
				ВидДокументаСсылкаНа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СвязанныйОбъект, "ВидДокумента");
			КонецЕсли;

			РеквизитыВида = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидДокументаСсылкаНа,
			"ЯвляетсяВходящейКорреспонденцией, ЯвляетсяИсходящейКорреспонденцией");

			Если РеквизитыВида.ЯвляетсяВходящейКорреспонденцией = Истина Тогда 
				Запрос.УстановитьПараметр("ВидКорреспонденцииНа", Перечисления.ВидыКорреспонденции.Входящая);

			ИначеЕсли РеквизитыВида.ЯвляетсяИсходящейКорреспонденцией = Истина Тогда 
				Запрос.УстановитьПараметр("ВидКорреспонденцииНа", Перечисления.ВидыКорреспонденции.Исходящая);

			Иначе 
				Запрос.УстановитьПараметр("ВидКорреспонденцииНа", Перечисления.ВидыКорреспонденции.ПустаяСсылка());
			КонецЕсли;

			РодителиСсылкаНа = ПолучитьРодителей(ВидДокументаСсылкаНа);
			ПустаяСсылкаНа = Справочники[ВидДокументаСсылкаНа.Метаданные().Имя].ПустаяСсылка();

			Запрос.УстановитьПараметр("ВидДокументаСсылкаНа", ВидДокументаСсылкаНа);
			Запрос.УстановитьПараметр("РодителиСсылкаНа", РодителиСсылкаНа);
			Запрос.УстановитьПараметр("ПустаяСсылкаНа", ПустаяСсылкаНа);
		КонецЕсли;
	КонецЕсли;

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		НоваяСтрока = НастройкиСвязи.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		ЗаполнитьТипИПредставлениеСсылки(ТипЗнч(Выборка.СсылкаИз),
		НоваяСтрока.ТипСсылкаИз,
		НоваяСтрока.ТипСсылкаИзПредставление);

		ЗаполнитьТипИПредставлениеСсылки(ТипЗнч(Выборка.СсылкаНа),
		НоваяСтрока.ТипСсылкаНа,
		НоваяСтрока.ТипСсылкаНаПредставление);

	КонецЦикла;

	Возврат НастройкиСвязи;

КонецФункции

&ИзменениеИКонтроль("ЭтоПодходящийТипСвязи")
Функция ЦППК_ЭтоПодходящийТипСвязи(ОбъектСсылка, СвязанныйОбъект, ТипСвязи)

	Если ТипСвязи = Справочники.ТипыСвязей.ПервичноеОбращение 
		Или ТипСвязи = Справочники.ТипыСвязей.ПовторноеОбращение
		Или ТипСвязи = Справочники.ТипыСвязей.ОсновноеОбращение
		Или ТипСвязи = Справочники.ТипыСвязей.Дубликат Тогда 
		ВестиУчетОбращенийГраждан = ПолучитьФункциональнуюОпцию("ВестиУчетОбращенийГраждан");

		Если Не ВестиУчетОбращенийГраждан Тогда
			Возврат Ложь;
		ИначеЕсли ЗначениеЗаполнено(СвязанныйОбъект)
			И ТипЗнч(СвязанныйОбъект) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда 
			УчитыватьКакОбращениеГраждан = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СвязанныйОбъект,
			"ВидДокумента.ЯвляетсяОбращениемОтГраждан");

			Если УчитыватьКакОбращениеГраждан = Ложь Тогда 
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;

	ИначеЕсли ТипСвязи = Справочники.ТипыСвязей.Содержит 
		И Не РаботаСКомплектамиДокументовСервер.ЭтоКомплект(ОбъектСсылка) Тогда
		Возврат Ложь;
	ИначеЕсли ТипСвязи = Справочники.ТипыСвязей.ВходитВКомплект 
		И Не РаботаСКомплектамиДокументовСервер.ЭтоКомплект(СвязанныйОбъект) Тогда
		Возврат Ложь;
	ИначеЕсли ТипСвязи = Справочники.ТипыСвязей.ДелаетНеДействующим  Тогда
		Возврат Ложь;
	ИначеЕсли ТипСвязи = Справочники.ТипыСвязей.НеДействуетВСоответствии Тогда
		Возврат Ложь;
	#Вставка
	// Котляров 15.07.2025 САНФ-034810
	ИначеЕсли ТипСвязи = Справочники.ТипыСвязей.ЦППК_ИзмененДокументом  Тогда
		Возврат Ложь;
	ИначеЕсли ТипСвязи = Справочники.ТипыСвязей.ЦППК_ИзменяетДокумент Тогда
		Возврат Ложь;
	#КонецВставки

		//* Эти связи временно исключаем, они ставятся программно  
	ИначеЕсли ТипСвязи = Справочники.ТипыСвязей.ПерепискаПоПредмету
		Или ТипСвязи = Справочники.ТипыСвязей.ПредметПереписки Тогда  
		Возврат Ложь;

		//* Связи в ответ на и переадресация временно исключаем, они ставятся программно  
	ИначеЕсли ТипСвязи = Справочники.ТипыСвязей.ПолученВОтветНа 
		Или ТипСвязи = Справочники.ТипыСвязей.ПолученОтвет
		Или ТипСвязи = Справочники.ТипыСвязей.ОтправленВОтветНа
		Или ТипСвязи = Справочники.ТипыСвязей.ОтправленОтвет
		Или ТипСвязи = Справочники.ТипыСвязей.ПереадресацияДокумента
		Или ТипСвязи = Справочники.ТипыСвязей.ПереадресованДокументом
		Или ТипСвязи = Справочники.ТипыСвязей.ОтветПереадресовавшему
		Или ТипСвязи = Справочники.ТипыСвязей.ВОтветНаПереадресованное Тогда 
		Возврат Ложь;

		// Эти связи устанавливаются только программно
	ИначеЕсли ТипСвязи = Справочники.ТипыСвязей.ПереадресованДокументомПоВопросу
		Или ТипСвязи = Справочники.ТипыСвязей.ПереадресацияДокументаПоВопросу
		Или ТипСвязи = Справочники.ТипыСвязей.Исправление
		Или ТипСвязи = Справочники.ТипыСвязей.ИсправлениеК 
		Или ТипСвязи = Справочники.ТипыСвязей.Корректировка
		Или ТипСвязи = Справочники.ТипыСвязей.КорректировкаК Тогда 
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;

КонецФункции
