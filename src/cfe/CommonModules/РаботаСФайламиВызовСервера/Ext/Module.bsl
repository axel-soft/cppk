&ИзменениеИКонтроль("ПрименитьПравилаДляФормированияОчереди")
Функция ЦППК_ПрименитьПравилаДляФормированияОчереди()

	Если Не ИспользоватьРазмещениеВТомахПоУсловиям() Тогда
		Возврат 0;
	КонецЕсли;	

	ЧислоВерсийПоставленныхВОчередь = 0;

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПравилаРазмещенияФайловВТомах.Ссылка,
	|	ПравилаРазмещенияФайловВТомах.ГруппаТомов,
	|	ПравилаРазмещенияФайловВТомах.ПометкаУдаления,
	|	ПравилаРазмещенияФайловВТомах.Порядок КАК Порядок,
	|	ПравилаРазмещенияФайловВТомах.Условие
	|ИЗ
	|	Справочник.ПравилаРазмещенияФайловВТомах КАК ПравилаРазмещенияФайловВТомах
	|ГДЕ
	|	ПравилаРазмещенияФайловВТомах.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";

	ТаблицаПравил = Запрос.Выполнить().Выгрузить();
	
	#Удаление
	СхемаКомпоновкиДанных = Справочники.ПравилаРазмещенияФайловВТомах.ПолучитьМакет("Версии");
	#КонецУдаления   
	
	#Вставка
	СхемаКомпоновкиДанных = Справочники.ПравилаРазмещенияФайловВТомах.ПолучитьМакет("ЦППК_Версии");
	#КонецВставки

	АдресСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор());

	Для НомерПравила = 0 По ТаблицаПравил.Количество() - 1 Цикл 

		КомпоновщикДляОчереди = Новый КомпоновщикНастроекКомпоновкиДанных;
		ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы);
		КомпоновщикДляОчереди.Инициализировать(ИсточникНастроек);
		КомпоновщикДляОчереди.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);

		КомпоновщикТекущегоПравила = Новый КомпоновщикНастроекКомпоновкиДанных;
		ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы);
		КомпоновщикТекущегоПравила.Инициализировать(ИсточникНастроек);
		КомпоновщикТекущегоПравила.ЗагрузитьНастройки(ТаблицаПравил[НомерПравила].Условие.Получить());

		ЭлементыОтбора = КомпоновщикДляОчереди.Настройки.Отбор.Элементы;

		// Текущее правило размещаем в группе И - создаем группу И
		НоваяГруппаЭлементовОтбора = ЭлементыОтбора.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		НоваяГруппаЭлементовОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

		// Последнее правило не используем - там нет условия
		Если НомерПравила <> ТаблицаПравил.Количество() - 1 Тогда
			СкопироватьОтбор(НоваяГруппаЭлементовОтбора, КомпоновщикТекущегоПравила.Настройки.Отбор);
		КонецЕсли;

		Если НомерПравила > 0 Тогда // Если есть предыдущие правила

			// Все предыдущие правила - в группе НЕ, а внутри еще группа ИЛИ
			НоваяГруппаЭлементовОтбораНе = ЭлементыОтбора.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			НоваяГруппаЭлементовОтбораНе.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе;

			НоваяГруппаЭлементовОтбораИли = НоваяГруппаЭлементовОтбораНе.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			НоваяГруппаЭлементовОтбораИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

			Для НомерПредыдущегоПравила = 0 По НомерПравила-1 Цикл

				КомпоновщикПредыдущегоПравила = Новый КомпоновщикНастроекКомпоновкиДанных;
				ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы);
				КомпоновщикПредыдущегоПравила.Инициализировать(ИсточникНастроек);
				КомпоновщикПредыдущегоПравила.ЗагрузитьНастройки(ТаблицаПравил[НомерПредыдущегоПравила].Условие.Получить());

				СкопироватьОтбор(НоваяГруппаЭлементовОтбораИли, КомпоновщикПредыдущегоПравила.Настройки.Отбор);

			КонецЦикла;

		КонецЕсли;

		// Все тома из группы текущего условия - в группе НЕ, а внутри еще группа ИЛИ
		ТаблицаТомов = ПолучитьТаблицуТомов(ТаблицаПравил[НомерПравила].ГруппаТомов);

		НоваяГруппаЭлементовОтбораНе = ЭлементыОтбора.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		НоваяГруппаЭлементовОтбораНе.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе;

		НоваяГруппаЭлементовОтбораИли = НоваяГруппаЭлементовОтбораНе.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		НоваяГруппаЭлементовОтбораИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

		Для Каждого СтрокаТома Из ТаблицаТомов Цикл

			СсылкаНаТом = СтрокаТома.Ссылка;

			НовыйЭлементОтбора = НоваяГруппаЭлементовОтбораИли.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Том");
			НовыйЭлементОтбора.Использование = Истина;
			НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			НовыйЭлементОтбора.ПравоеЗначение = СсылкаНаТом;

		КонецЦикла;	

		// Версия должна быть не в информационной базе, а в томах на диске
		НовыйЭлементОтбора = НоваяГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТипХраненияФайла");
		НовыйЭлементОтбора.Использование = Истина;
		НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		НовыйЭлементОтбора.ПравоеЗначение = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске;

		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;

		МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, 
		КомпоновщикДляОчереди.ПолучитьНастройки()
		,
		,
		, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
		ТаблицаРезультата = Новый ТаблицаЗначений;
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ПроцессорВывода.УстановитьОбъект(ТаблицаРезультата);
		ПроцессорВывода.Вывести(ПроцессорКомпоновки);

		// Запишем в очередь
		Для Каждого Результат Из ТаблицаРезультата Цикл

			МенеджерЗаписи = РегистрыСведений.ОчередьВерсийФайловДляРазмещенийВТомах.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.Версия = Результат.Ссылка;
			МенеджерЗаписи.Записать(Истина);
			ЧислоВерсийПоставленныхВОчередь = ЧислоВерсийПоставленныхВОчередь + 1;

		КонецЦикла;

	КонецЦикла;

	Возврат ЧислоВерсийПоставленныхВОчередь;

КонецФункции

&ИзменениеИКонтроль("ПолучитьВизуализациюЭП")
Функция ЦППК_ПолучитьВизуализациюЭП(ДанныеФайла, ИдентификаторФормы, ТребуетсяЗаполнитьВизуализацию)
	
	ФайлВизуализация = Неопределено;
	
	ДанныеФайла.ПолноеИмяФайлаВРабочемКаталоге = ""; // не берем из кеша
	УдалитьИзРегистра(ДанныеФайла.Версия); // удалим инфо из кеша
	
	Если ДанныеФайла.Свойство("НастройкиШтампаЭП") Тогда
		НастройкиШтампаЭП = ДанныеФайла.НастройкиШтампаЭП;
	Иначе	
		НастройкиШтампаЭП = ПолучитьНастройкиШтампаЭП(ДанныеФайла.Владелец);
	КонецЕсли;	
	
	СтраницаВставкиШтампаЭП = НастройкиШтампаЭП.СтраницаВставкиШтампаЭП;
	ИтоговыйФорматФайлаСоШтампомЭП = НастройкиШтампаЭП.ИтоговыйФорматФайлаСоШтампомЭП;
	#Вставка
	//MDK //НастройкиШтампаЭП - кэшируется
	//для PDF не обрабатываем замещение. интерпретируем как нижний угол, чтобы избежать массовой модификации модулей
	Если НЕ НастройкиШтампаЭП.Свойство("ПравыйНижнийСНаложением") Тогда
	НастройкиШтампаЭП.Вставить("ПравыйНижнийСНаложением", Ложь);
	Если НастройкиШтампаЭП.РасположениеШтампаЭП = ПредопределенноеЗначение("Перечисление.МестаВставкиКартинки.ПравыйНижнийСНаложением") Тогда
		НастройкиШтампаЭП.РасположениеШтампаЭП = ПредопределенноеЗначение("Перечисление.МестаВставкиКартинки.ПравыйНижний");
		НастройкиШтампаЭП.Вставить("ПравыйНижнийСНаложением", Истина);
	КонецЕсли; 
	КонецЕсли;
	//MDK	
	#КонецВставки
	
	ИспользоватьLibreOffice = ФайловыеФункцииПовтИсп.ИспользоватьLibreOffice();
	
	ВставкаНаКлиенте = ЭтоВставкаНаКлиенте(ДанныеФайла.Расширение, СтраницаВставкиШтампаЭП, 
		ИтоговыйФорматФайлаСоШтампомЭП, ИспользоватьLibreOffice); 
	#Вставка
	//++AxelSoft Шарапова 24.01.2025 САНФ-030728	
	//MDK 
	//Или (НРег(ДанныеФайла.Расширение) = "docx" 
	//И НастройкиШтампаЭП.ПравыйНижнийСНаложением)	
	//MDK 
	//--AxelSoft Шарапова 24.01.2025 САНФ-030728
	#КонецВставки

	Если НастройкиШтампаЭП.Использовать1СШтамп 
		И (	НРег(ДанныеФайла.Расширение) = "xls"
		Или НРег(ДанныеФайла.Расширение) = "xlsx") Тогда
		ВставкаНаКлиенте = Ложь;
	КонецЕсли;

	// Если Linux или веб клиент, и Использовать1СШтамп = Истина - принудительно делаем генерацию на сервере.
	// Т.к. на клиенте нет возможности  через COM что то сделать
	Если (НастройкиШтампаЭП.Использовать1СШтамп Или ИспользоватьLibreOffice)
		И (ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент() Или ОбщегоНазначения.ЭтоВебКлиент())
		И (	НРег(ДанныеФайла.Расширение) = "doc"
		Или НРег(ДанныеФайла.Расширение) = "docx"
		Или НРег(ДанныеФайла.Расширение) = "odt") Тогда
		ВставкаНаКлиенте = Ложь;
	КонецЕсли;
	
	Если ВставкаНаКлиенте Тогда
		ТребуетсяЗаполнитьВизуализацию = Истина;
		Возврат Неопределено;
	КонецЕсли;		 
	
	ВыполняемНаСервере = Ложь;
	Если (НастройкиШтампаЭП.Использовать1СШтамп Или ИспользоватьLibreOffice)
		И (ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент() Или ОбщегоНазначения.ЭтоВебКлиент()) Тогда
		ВыполняемНаСервере = Истина;
	КонецЕсли;	
	
	Если ВыполняемНаСервере
		Или
		(((НРег(ДанныеФайла.Расширение) = "docx"  
		Или НРег(ДанныеФайла.Расширение) = "doc"
		Или НРег(ДанныеФайла.Расширение) = "odt")
		И Не ВставкаНаКлиенте)
		Или (НастройкиШтампаЭП.Использовать1СШтамп И НРег(ДанныеФайла.Расширение) = "xls")) Тогда
		
		// делаем автозаполнение.
		
		ШтампыПодписейЭП = ДанныеФайла.ШтампыПодписейЭП; // см. ШтампыПодписейЭП
		
		ДвДанныеФайлаDoc = ПолучитьДвоичныеДанныеФайла(ДанныеФайла.Ссылка);
		
		ВыполнитьЗаполнениеРегДанныхЕслиНужно(ДвДанныеФайлаDoc, ДанныеФайла);
		
		ДвоичныеДанныеНовые = ВизуализацияЭПКлиентСервер.ВставитьВизуализациюЭПВместоТэга(
			ДвДанныеФайлаDoc, ДанныеФайла.Расширение, 
			ШтампыПодписейЭП, НастройкиШтампаЭП);
			
		Если ТипЗнч(ДвоичныеДанныеНовые) = Тип("ДвоичныеДанные") Тогда 
				
			Если ИспользоватьLibreOffice Тогда
				ДвоичныеДанныеНовые = ДвоичныеДанныеPDFПреобразованныеВLibreOffice(ДвоичныеДанныеНовые, ДанныеФайла.Расширение);
			КонецЕсли;	
				
			ФайлВизуализация = СоздатьВизуализациюИЗаполнитьДанныеФайла(
				ДанныеФайла, ДвоичныеДанныеНовые, ИдентификаторФормы);	
		КонецЕсли;	
		
	ИначеЕсли НРег(ДанныеФайла.Расширение) = "pdf" Тогда      
		
		Возврат ПолучитьВизуализациюЭпДляPDF(ДанныеФайла, ИдентификаторФормы, ТребуетсяЗаполнитьВизуализацию);
		
	КонецЕсли;
	
	Возврат ФайлВизуализация;
	
КонецФункции

&ИзменениеИКонтроль("ПолучитьВизуализациюЭпДляPDF")
Функция ЦППК_ПолучитьВизуализациюЭпДляPDF(ДанныеФайла, ИдентификаторФормы, ТребуетсяЗаполнитьВизуализацию)
	
	ФайлВизуализация = Неопределено;
	
	СпособВставкиШтампаЭПВPDF = ПолучитьСпособВставкиШтампаЭПВPDF();
	
	ВременнаяПапкаДляРазархивирования = ПолучитьИмяВременногоФайла("");
	
	ПоложениеРегШтампаОрганизации = Неопределено; // См. МЭДОСтруктурыДанных.НовыйПоложениеИзображения
	ФайлРегистрационныйШтампОрганизации = РегистрыСведений.СлужебныеФайлыДокументов.ПолучитьСлужебныйФайл(
		ДанныеФайла.Владелец,
		ДанныеФайла.Ссылка,
		Перечисления.ОтношенияСлужебныхФайлов.РегистрационныйШтампОрганизации,
		ПоложениеРегШтампаОрганизации);
	// Признак, что вставка отметок по заданным координатам, а не по настройкам ДО:
	ЕстьПоложениеРегШтампаОрганизации = МЭДО.ЭтоЗаполненноеПоложениеИзображения(ПоложениеРегШтампаОрганизации);
	ИмяФайлаРегШтампОрганизации = "";
	ДвДанныеФайлаРегШтамп = Неопределено;
	Если ЗначениеЗаполнено(ФайлРегистрационныйШтампОрганизации) Тогда
		ДвДанныеФайлаРегШтамп = ПолучитьДвоичныеДанныеФайла(ФайлРегистрационныйШтампОрганизации);
		ИмяФайлаРегШтампОрганизации = ВременнаяПапкаДляРазархивирования + ПолучитьРазделительПути() + "reg_org.png";
		ДвДанныеФайлаРегШтамп.Записать(ИмяФайлаРегШтампОрганизации);
	КонецЕсли;
	
	ПоложениеРегШтампаКорреспондента = Неопределено; // См. МЭДОСтруктурыДанных.НовыйПоложениеИзображения
	ФайлРегистрационныйШтампКорреспондента = РегистрыСведений.СлужебныеФайлыДокументов.ПолучитьСлужебныйФайл(
		ДанныеФайла.Владелец,
		ДанныеФайла.Ссылка,
		Перечисления.ОтношенияСлужебныхФайлов.РегистрационныйШтампКорреспондента,
		ПоложениеРегШтампаКорреспондента);
	// Признак, что вставка отметок по заданным координатам, а не по настройкам ДО:
	ЕстьПоложениеРегШтампаКорреспондента = МЭДО.ЭтоЗаполненноеПоложениеИзображения(ПоложениеРегШтампаКорреспондента);
	ИмяФайлаРегШтампКорреспондента = "";
	Если ЗначениеЗаполнено(ФайлРегистрационныйШтампКорреспондента) Тогда
		ДвДанныеФайлаРегШтамп = ПолучитьДвоичныеДанныеФайла(ФайлРегистрационныйШтампКорреспондента);
		ИмяФайлаРегШтампКорреспондента = ВременнаяПапкаДляРазархивирования + ПолучитьРазделительПути()
			+ "reg_korr.png";
		ДвДанныеФайлаРегШтамп.Записать(ИмяФайлаРегШтампКорреспондента);
	КонецЕсли;
	
	ФайлШтрихкод = РегистрыСведений.СлужебныеФайлыДокументов.ПолучитьСлужебныйФайл(
		ДанныеФайла.Владелец, ДанныеФайла.Ссылка, Перечисления.ОтношенияСлужебныхФайлов.Штрихкод);
	
	ДвДанныеФайлаPdf = ПолучитьДвоичныеДанныеФайла(ДанныеФайла.Ссылка);
	ИмяФайлаPdf = ВременнаяПапкаДляРазархивирования + ПолучитьРазделительПути()
		+ "src.pdf";
	ДвДанныеФайлаPdf.Записать(ИмяФайлаPdf);
	ИмяФайлаPdfНовое = ВременнаяПапкаДляРазархивирования + ПолучитьРазделительПути()
		+ "new.pdf";
	
	ИмяФайлаШтрихкод = "";	 
	ДвДанныеФайлаШтрихкод = Неопределено;
	Если ЗначениеЗаполнено(ФайлШтрихкод) Тогда
		
		ДвДанныеФайлаШтрихкод = ПолучитьДвоичныеДанныеФайла(ФайлШтрихкод);
		ИмяФайлаШтрихкод = ВременнаяПапкаДляРазархивирования + ПолучитьРазделительПути()
			+ "barcode.png";
		ДвДанныеФайлаШтрихкод.Записать(ИмяФайлаШтрихкод);
				
	КонецЕсли;		 

	ШтампыПодписейЭП = ДанныеФайла.ШтампыПодписейЭП; // см. ШтампыПодписейЭП
	
	Если ДанныеФайла.Свойство("НастройкиШтампаЭП") Тогда                    
		НастройкиШтампаЭП = ДанныеФайла.НастройкиШтампаЭП;
	Иначе	
		НастройкиШтампаЭП = ПолучитьНастройкиШтампаЭП(ДанныеФайла.Владелец);
	КонецЕсли;
	СтраницаВставкиШтампаЭП = НастройкиШтампаЭП.СтраницаВставкиШтампаЭП;
	
	ДанныеОтметок = Новый Массив;
	Если ТипЗнч(ШтампыПодписейЭП) = Тип("Соответствие") Тогда
		ДанныеОтметок = ШтампыПодписейЭП[ВизуализацияЭПКлиентСервер.ТегВсеПодписи()];
	КонецЕсли;         
	
	ДвоичныеДанныеНовые = Неопределено;
	
	Если НастройкиШтампаЭП.Использовать1СШтамп Тогда
		
		ПараметрыДобавленияШтамповВДокумент = Интеграция1СШтампКлиентСервер.НовыеПараметрыДобавленияШтамповВДокумент();

		СтраницаВставкиШтампаЭП = НастройкиШтампаЭП.СтраницаВставкиШтампаЭП;  
		ПоложениеНаСтранице = НастройкиШтампаЭП.РасположениеШтампаЭП;
		
		ВариантРасположения = ВизуализацияЭПВызовСервера.ВариантРасположения1СШтамп(ПоложениеНаСтранице);
		
		ПравилаРасположения = ВизуализацияЭПВызовСервера.ПравилаРасположения1СШтамп(СтраницаВставкиШтампаЭП);
		
		ВариантРасположенияПоКоординатам = "ПоКоординатам"; // тут руками считаем.  
		
		ПараметрыШтампов = Новый Массив;
		
		НомерШтампа = 0; // сквозная нумерация
		НомерШтампаБезПоложения = 0; // только "обычные" штампы, для расчета смещения
		НакопленнаяВысотаКартинок = 0;       
		
		НакопленнаяШиринаКартинок = 0;
		НомерШтампаПоY = 0;
		ЧислоШтампов = ДанныеОтметок.Количество();
		
		Если ЧислоШтампов = 1 Тогда                         
			
			ДанныеОтметки = ДанныеОтметок[0];
			
			КартинкаШтампа = Новый Картинка(ДанныеОтметки.ДвоичныеДанныеОтметки, Истина);
			
			// По общим настройкам для информационной базы:
			
			МассивШтампов = Новый Массив;
			МассивШтампов.Добавить(ДанныеОтметки.ДвоичныеДанныеОтметки);

			ПараметрыШтамповЛокальный = ВизуализацияЭПВызовСервера.ПараметрыШтампов(МассивШтампов, "png");
			ПараметрыФайлаШтампа = ПараметрыШтамповЛокальный[0];
			
			ПараметрыФайлаШтампа.ПараметрыРазмещения.Расположение           = ВариантРасположения;
			ПараметрыФайлаШтампа.ПравилаРасположения.ПравилоРасположения = ПравилаРасположения;
			
			ПараметрыШтампов.Добавить(ПараметрыФайлаШтампа);
			
			НомерШтампаБезПоложения = НомерШтампаБезПоложения + 1;
			
		Иначе	
		
			Для Каждого ДанныеОтметки Из ДанныеОтметок Цикл
				
				КартинкаШтампа = Новый Картинка(ДанныеОтметки.ДвоичныеДанныеОтметки, Истина);
				
				// По общим настройкам для информационной базы:
				
				МассивШтампов = Новый Массив;
				МассивШтампов.Добавить(ДанныеОтметки.ДвоичныеДанныеОтметки);

				ПараметрыШтамповЛокальный = ВизуализацияЭПВызовСервера.ПараметрыШтампов(МассивШтампов, "png");
				ПараметрыФайлаШтампа = ПараметрыШтамповЛокальный[0];
				
				ПараметрыФайлаШтампа.ПараметрыРазмещения.Расположение           = ВариантРасположенияПоКоординатам;
				ПараметрыФайлаШтампа.ПравилаРасположения.ПравилоРасположения = ПравилаРасположения;
				
				Координаты = ВизуализацияЭПВызовСервера.КоординатыДля1СШтампПоНастройкам(
					ДанныеОтметки.ДвоичныеДанныеОтметки, ПоложениеНаСтранице, 
					НакопленнаяВысотаКартинок, НакопленнаяШиринаКартинок,
					ЧислоШтампов, НомерШтампаПоY);
				
				ПараметрыФайлаШтампа.ПараметрыРазмещения.Координаты.Верх        = Координаты.Сверху;
				ПараметрыФайлаШтампа.ПараметрыРазмещения.Координаты.Лево        = Координаты.Слева;
				
				ПараметрыШтампов.Добавить(ПараметрыФайлаШтампа);
				
				НомерШтампаБезПоложения = НомерШтампаБезПоложения + 1;
				
			КонецЦикла;           
			
		КонецЕсли;
		
		// тут рег штампы наш
		Если ЗначениеЗаполнено(ФайлРегистрационныйШтампОрганизации) Тогда
			
			НастройкиРегНомера = ШтрихкодированиеСервер.ПерсональныеНастройкиПоложенияРегНомера();
			
			ПравилаРасположенияРегШтамп = ВизуализацияЭПВызовСервера.ПравилаРасположения1СШтамп(НастройкиРегНомера.СтраницаВставки);
		    ВариантРасположенияРегШтамп = ВизуализацияЭПВызовСервера.ВариантРасположения1СШтамп(НастройкиРегНомера.ПоложениеНаСтранице);    
			
			МассивШтампов = Новый Массив;
			МассивШтампов.Добавить(ДвДанныеФайлаРегШтамп);

			ПараметрыШтамповЛокальный = ВизуализацияЭПВызовСервера.ПараметрыШтампов(МассивШтампов, "png");
			ПараметрыФайлаШтампа = ПараметрыШтамповЛокальный[0];
			
			ПараметрыФайлаШтампа.КоэффициентИзмененияРазмера = 0.5;// вместо 0.25
			
			#Вставка     
			//++AxelSoft Шарапова 11.11.2024 САНФ-028150
			ПараметрыФайлаШтампа.КоэффициентИзмененияРазмера = 0.8;  // вместо 0.5
			//--AxelSoft Шарапова 11.11.2024 САНФ-028150
			#КонецВставки

			ПараметрыФайлаШтампа.ПараметрыРазмещения.Расположение = ВариантРасположенияРегШтамп;
			ПараметрыФайлаШтампа.ПравилаРасположения.ПравилоРасположения = ПравилаРасположенияРегШтамп;
			
			ПараметрыШтампов.Добавить(ПараметрыФайлаШтампа);
			
			Если ЕстьПоложениеРегШтампаОрганизации Тогда // тут точно X Y

				ПараметрыФайлаШтампа.ПараметрыРазмещения.Координаты.Лево = 
					Цел(ПоложениеРегШтампаОрганизации.Слева * 3.0);
				ПараметрыФайлаШтампа.ПараметрыРазмещения.Координаты.Верх = 
					Цел(ПоложениеРегШтампаОрганизации.Сверху * 3.0);
				
				ПравилаРасположенияТекущее = ВизуализацияЭПВызовСервера.ПравилаРасположения1СШтамп(
					ПоложениеРегШтампаОрганизации.Страница);
				ПараметрыФайлаШтампа.ПравилаРасположения.ПравилоРасположения = ПравилаРасположенияТекущее;
				
			Иначе  // общие настройки - без координат, только угол указан, скажем "Лево верх"
					
				ПараметрыФайлаШтампа.ПараметрыРазмещения.Расположение = ВариантРасположенияРегШтамп;
				ПараметрыФайлаШтампа.ПравилаРасположения.ПравилоРасположения = ПравилаРасположенияРегШтамп;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// штрихкод
		Если ЗначениеЗаполнено(ФайлШтрихкод) Тогда    
			
			НастройкиШтрихкода = ШтрихкодированиеСервер.ПолучитьПерсональныеНастройкиПоложенияШтрихкодаНаСтранице();
			
			МассивШтампов = Новый Массив;
			МассивШтампов.Добавить(ДвДанныеФайлаШтрихкод);

			ПараметрыШтамповЛокальный = ВизуализацияЭПВызовСервера.ПараметрыШтампов(МассивШтампов, "png");
			ПараметрыФайлаШтампа = ПараметрыШтамповЛокальный[0];
			
			ПараметрыФайлаШтампа.ПараметрыРазмещения.Расположение = 
				ВизуализацияЭПВызовСервера.ВариантРасположения1СШтамп(НастройкиШтрихкода.ПоложениеНаСтранице);
			// штрихкод всегда первая страница
			ПараметрыФайлаШтампа.ПравилаРасположения.ПравилоРасположения = Интеграция1СШтампКлиентСервер.ПравилоРасположенияНаПервойСтранице();
			
			Если НастройкиШтрихкода.ПоложениеНаСтранице = Перечисления.МестаВставкиКартинки.ПроизвольноеПоложение Тогда
				
				ПараметрыФайлаШтампа.ПараметрыРазмещения.Координаты.Лево = 
					Цел(ОбщегоНазначенияДокументооборотКлиентСервер.СтрокаВЧисло(НастройкиШтрихкода.СмещениеПоГоризонтали) * 3.0 );
				ПараметрыФайлаШтампа.ПараметрыРазмещения.Координаты.Верх = 
					Цел(ОбщегоНазначенияДокументооборотКлиентСервер.СтрокаВЧисло(НастройкиШтрихкода.СмещениеПоВертикали)  * 3.0 );
				
			КонецЕсли;	
			
			ПараметрыШтампов.Добавить(ПараметрыФайлаШтампа);
			
		КонецЕсли;
		
		// тут вызов 1С Штамп
		ПараметрыДобавленияШтамповВДокумент.ПараметрыДокумента.ДвоичныеДанные = ДвДанныеФайлаPdf;
		ПараметрыДобавленияШтамповВДокумент.ПараметрыДокумента.Расширение     = ДанныеФайла.Расширение;
		ПараметрыДобавленияШтамповВДокумент.ПараметрыШтампов                  = ПараметрыШтампов;
		
		РезультатОбработкиДокумента = Интеграция1СШтамп.РезультатДобавленияШтамповВДокумент(
			ПараметрыДобавленияШтамповВДокумент, 35);

		Если РезультатОбработкиДокумента.ЕстьОшибки Тогда
			
			ТекстОшибки = РезультатОбработкиДокумента.ИнформацияОбОшибках.ТекстОшибки;
			
			Если Не ЗначениеЗаполнено(ТекстОшибки) Тогда
				ТекстОшибки = Нстр("ru ='Не удалось получить результат штампирования файла.'", 
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
			КонецЕсли;
					
			ЗаписьЖурналаРегистрации("ПолучитьВизуализациюЭпДляPDF", 
				УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Файлы, ДанныеФайла.Ссылка, ТекстОшибки);
				
			НастройкиШтампаЭП.Использовать1СШтамп = Ложь;	
			ДанныеФайла.Вставить("НастройкиШтампаЭП", НастройкиШтампаЭП);
				
			Возврат ПолучитьВизуализациюЭпДляPDF(ДанныеФайла, ИдентификаторФормы, ТребуетсяЗаполнитьВизуализацию);	
			
		КонецЕсли;
		
		ДвоичныеДанныеНовые = РезультатОбработкиДокумента.ДвоичныеДанные;
		
	Иначе // внутри ДО делаем	
		
		Если СпособВставкиШтампаЭПВPDF = Перечисления.СпособыВставкиШтампаЭПВPDF.ImageMagickGhostscript Тогда
			
			НомерШтампа = 1;
			МассивВысотКартинок = Новый Массив();
			ВсеПутиСПоложениями = Новый Массив(); // Массив из см. РаботаСЭП.НовыйПутьИПоложение
			// Признак, что вставка отметок по заданным координатам, а не по настройкам ДО. Т.е. хоть у одной отметки
			// подписи задано "Положение":
			Для Каждого ДанныеОтметки Из ДанныеОтметок Цикл
				
				ДвоичныеДанныеШтампа = ДанныеОтметки.ДвоичныеДанныеОтметки;
				
				ТекКартинка = Новый Картинка(ДвоичныеДанныеШтампа, Истина);
				ТекВысота = ТекКартинка.Высота();
				МассивВысотКартинок.Добавить(ТекВысота);
				
				ИмяФайлаШтампа = ВременнаяПапкаДляРазархивирования + ПолучитьРазделительПути()
					+ СтрШаблон("stamp%1.png", НомерШтампа);
				ДвоичныеДанныеШтампа.Записать(ИмяФайлаШтампа);
				
				Если МЭДО.ЭтоЗаполненноеПоложениеИзображения(ДанныеОтметки.Положение) Тогда
					// Оставить картинку отметки как есть, размеры будут пересчитаны из мм.
				Иначе
#Удаление
					РаботаСКартинками.УменьшитьШтамп(ИмяФайлаШтампа, 1, ВременнаяПапкаДляРазархивирования);
#КонецУдаления
#Вставка
					РаботаСКартинками.УменьшитьШтамп(ИмяФайлаШтампа, 0.8, ВременнаяПапкаДляРазархивирования);
#КонецВставки
				КонецЕсли;
				
				ПутьПоложение = РаботаСЭП.НовыйПутьИПоложение(ИмяФайлаШтампа, ДанныеОтметки.Положение);
				ВсеПутиСПоложениями.Добавить(ПутьПоложение);
				
				НомерШтампа = НомерШтампа + 1;
			КонецЦикла;
			
			
			МассивПутейPng = РаботаСКартинками.ПреобразоватьPdfВPng(ИмяФайлаPdf, ВременнаяПапкаДляРазархивирования);
			МассивНовыхPng = Новый Массив;
			НомерСтраницы = 1;
			ВсегоСтраниц = МассивПутейPng.Количество();
			
			Для Каждого ПутьPng Из МассивПутейPng Цикл // по страницам.
				
				НовыйПутьPng = ПутьPng;
				
				ПутиСПоложениямиНаЭтойСтранице = Новый Массив(); // Массив из РаботаСЭП.НовыйПутьИПоложение
				// нужно взять только те отметки, где задана именно текущая страница:
				Для Каждого ПутьПоложение Из ВсеПутиСПоложениями Цикл
					
					Если МЭДО.ЭтоЗаполненноеПоложениеИзображения(ПутьПоложение.Положение) Тогда
						// Штамп с "Положением":
						Если ЭтоНужнаяСтраница(ПутьПоложение.Положение.Страница, НомерСтраницы, ВсегоСтраниц) Тогда
							ПутиСПоложениямиНаЭтойСтранице.Добавить(ПутьПоложение);
						КонецЕсли;
					Иначе
						// Обычный штамп, не хранящий "Положение":
						Если ЭтоНужнаяСтраница(СтраницаВставкиШтампаЭП, НомерСтраницы, ВсегоСтраниц) Тогда
							ПутиСПоложениямиНаЭтойСтранице.Добавить(ПутьПоложение);
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
			
				Если ПутиСПоложениямиНаЭтойСтранице.Количество() <> 0 Тогда 
					
					НовыйПутьPng = РаботаСКартинками.НаложитьШтамп(
						ПутьPng, ПутиСПоложениямиНаЭтойСтранице, ВременнаяПапкаДляРазархивирования, НомерСтраницы,
						НастройкиШтампаЭП.РасположениеШтампаЭП, МассивВысотКартинок);
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ИмяФайлаРегШтампОрганизации) Тогда
					
					Если Не ЕстьПоложениеРегШтампаОрганизации Тогда
						
						НастройкиРегНомера = ШтрихкодированиеСервер.ПерсональныеНастройкиПоложенияРегНомера();
						Если ЭтоНужнаяСтраница(НастройкиРегНомера.СтраницаВставки, НомерСтраницы, ВсегоСтраниц) Тогда
#Удаление
							РаботаСКартинками.УменьшитьРегШтамп(ИмяФайлаРегШтампОрганизации, ВременнаяПапкаДляРазархивирования);
#КонецУдаления
#Вставка
							РаботаСКартинками.УвеличитьШтамп(ИмяФайлаРегШтампОрганизации, 0.8, ВременнаяПапкаДляРазархивирования);
#КонецВставки
							НовыйПутьPng = РаботаСКартинками.НаложитьРегШтамп(
								НовыйПутьPng,
								ИмяФайлаРегШтампОрганизации,
								ВременнаяПапкаДляРазархивирования,
								Неопределено,
								НастройкиРегНомера,
								1);
						КонецЕсли;
						
					ИначеЕсли ЕстьПоложениеРегШтампаОрганизации
						И ЭтоНужнаяСтраница(ПоложениеРегШтампаОрганизации.Страница, НомерСтраницы, ВсегоСтраниц) Тогда
						
						НовыйПутьPng = РаботаСКартинками.НаложитьРегШтамп(
							НовыйПутьPng,
							ИмяФайлаРегШтампОрганизации,
							ВременнаяПапкаДляРазархивирования,
							ПоложениеРегШтампаОрганизации,
							ШтрихкодированиеКлиентСервер.НовыеНастройкиРегНомера(), // Здесь настройки не нужны
							1);
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ИмяФайлаРегШтампКорреспондента) Тогда
					
					Если Не ЕстьПоложениеРегШтампаКорреспондента Тогда
						
						НастройкиРегНомера = ШтрихкодированиеСервер.ПерсональныеНастройкиПоложенияРегНомера();
						Если ЭтоНужнаяСтраница(НастройкиРегНомера.СтраницаВставки, НомерСтраницы, ВсегоСтраниц) Тогда
							РаботаСКартинками.УменьшитьРегШтамп(ИмяФайлаРегШтампКорреспондента);
							НовыйПутьPng = РаботаСКартинками.НаложитьРегШтамп(
								НовыйПутьPng,
								ИмяФайлаРегШтампКорреспондента,
								ВременнаяПапкаДляРазархивирования,
								Неопределено,
								НастройкиРегНомера,
								2);
						КонецЕсли;
						
					ИначеЕсли ЕстьПоложениеРегШтампаКорреспондента
						И ЭтоНужнаяСтраница(ПоложениеРегШтампаКорреспондента.Страница, НомерСтраницы, ВсегоСтраниц) Тогда
						
						НовыйПутьPng = РаботаСКартинками.НаложитьРегШтамп(
							НовыйПутьPng,
							ИмяФайлаРегШтампКорреспондента,
							ВременнаяПапкаДляРазархивирования,
							ПоложениеРегШтампаКорреспондента,
							ШтрихкодированиеКлиентСервер.НовыеНастройкиРегНомера(), // Здесь настройки не нужны
							2);
					КонецЕсли;
				КонецЕсли;
				
				
				Если НомерСтраницы = 1 И ЗначениеЗаполнено(ФайлШтрихкод) Тогда
					НовыйПутьPng = РаботаСКартинками.НаложитьШтрихкод(
						НовыйПутьPng, ИмяФайлаШтрихкод, ВременнаяПапкаДляРазархивирования);
				КонецЕсли;	

				МассивНовыхPng.Добавить(НовыйПутьPng);
				
				НомерСтраницы = НомерСтраницы + 1;
				
			КонецЦикла;
			
			ИмяBatФайла = ВременнаяПапкаДляРазархивирования + ПолучитьРазделительПути()
				+ "cnv.bat";
			РаботаСКартинками.ПреобразоватьPngВPdf(МассивНовыхPng, ИмяФайлаPdfНовое,
				ИмяBatФайла, ВременнаяПапкаДляРазархивирования);
			
			Для Каждого ФайлКУдалению Из МассивНовыхPng Цикл
				УдалитьФайлы(ФайлКУдалению);
			КонецЦикла;
			
		Иначе // тут средствами платформы
			
			КопироватьФайл(ИмяФайлаPdf, ИмяФайлаPdfНовое); //@skip-check object-deprecated
			
			ДокументPdf = Новый ДокументPDF();
			ДокументPdf.Прочитать(ИмяФайлаPdfНовое);
			ВсегоСтраниц = ДокументPdf.КоличествоСтраниц();
			
			РасположениеШтампаЭПВPdf = НастройкиШтампаЭП.РасположениеШтампаЭП;
			
			ГенераторСлучайныхЧисел = Новый ГенераторСлучайныхЧисел(Секунда(ТекущаяДатаСеанса()));
			СлучайноеЧислоДобавка = ГенераторСлучайныхЧисел.СлучайноеЧисло(0, 900);
			
			НомерШтампа = 0; // сквозная нумерация
			НомерШтампаБезПоложения = 0; // только "обычные" штампы, для расчета смещения
			Для Каждого ДанныеОтметки Из ДанныеОтметок Цикл
				
				КартинкаШтампа = Новый Картинка(ДанныеОтметки.ДвоичныеДанныеОтметки, Истина);
				
				Описание = Новый ОписаниеОтображаемогоОбъектаPDF();
				Описание.Имя = "Пример" + Строка(НомерШтампа + СлучайноеЧислоДобавка);
				Описание.Объект = КартинкаШтампа;
				
				ЗаписьОтображаемогоОбъектаУжеСделана = Ложь;
				Если МЭДО.ЭтоЗаполненноеПоложениеИзображения(ДанныеОтметки.Положение) Тогда
					// По заданному "Положению":
					Описание.Лево = ДанныеОтметки.Положение.Слева;
					Описание.Верх = ДанныеОтметки.Положение.Сверху;
					Описание.Высота = ДанныеОтметки.Положение.Высота;
					Описание.Ширина = ДанныеОтметки.Положение.Ширина;
					Если ДанныеОтметки.Положение.Страница = Перечисления.СтраницаВставкиКартинки.Первая Тогда
						Описание.НомерСтраницы = 1;
					ИначеЕсли ДанныеОтметки.Положение.Страница = Перечисления.СтраницаВставкиКартинки.Последняя Тогда
						Описание.НомерСтраницы = ВсегоСтраниц;
					ИначеЕсли ДанныеОтметки.Положение.Страница = Перечисления.СтраницаВставкиКартинки.Каждая Тогда
						Для ТекНомерСтраницы = 1 По ВсегоСтраниц Цикл
							Описание.Имя = "Пример" + НомерШтампа + СлучайноеЧислоДобавка;
							Описание.НомерСтраницы = ТекНомерСтраницы;
							ДокументPdf.ДобавитьОтображаемыйОбъект(Описание);
							ЗаписьОтображаемогоОбъектаУжеСделана = Истина;
							НомерШтампа = НомерШтампа + 1;
						КонецЦикла;
					ИначеЕсли ТипЗнч(ДанныеОтметки.Положение.Страница) = Тип("Число")
						И ДанныеОтметки.Положение.Страница <> 0 Тогда
						Описание.НомерСтраницы = ДанныеОтметки.Положение.Страница;
					КонецЕсли;
				Иначе
					// По общим настройкам для информационной базы:
					Описание.Высота = 24;
					Описание.Ширина = 96;
					
					Размеры = РаботаСКартинками.НовыйРазмеры(Описание.Ширина, Описание.Высота);
					НастройкиРасположения = ШтрихкодированиеКлиентСервер.НовыйНастройкиРасположения();
					НастройкиРасположения.ПоложениеНаСтранице = РасположениеШтампаЭПВPdf;
					Координаты = РаботаСКартинками.КоординатыПоНастройкам(
						НастройкиРасположения, Размеры, НомерШтампаБезПоложения);
					Описание.Лево = Координаты.Слева;
					Описание.Верх = Координаты.Сверху;
					
					Если СтраницаВставкиШтампаЭП = Перечисления.СтраницаВставкиКартинки.Первая Тогда
						Описание.НомерСтраницы = 1;
					ИначеЕсли СтраницаВставкиШтампаЭП = Перечисления.СтраницаВставкиКартинки.Последняя Тогда
						Описание.НомерСтраницы = ВсегоСтраниц;
					ИначеЕсли СтраницаВставкиШтампаЭП = Перечисления.СтраницаВставкиКартинки.Каждая Тогда
						Для ТекНомерСтраницы = 1 По ВсегоСтраниц Цикл
							Описание.Имя = "Пример" + НомерШтампа + СлучайноеЧислоДобавка;
							Описание.НомерСтраницы = ТекНомерСтраницы;
							ДокументPdf.ДобавитьОтображаемыйОбъект(Описание);
							ЗаписьОтображаемогоОбъектаУжеСделана = Истина;
							НомерШтампа = НомерШтампа + 1;
						КонецЦикла;
						НомерШтампаБезПоложения = НомерШтампаБезПоложения + 1;
					КонецЕсли;
					Если Не ЗаписьОтображаемогоОбъектаУжеСделана Тогда
						НомерШтампаБезПоложения = НомерШтампаБезПоложения + 1;
					КонецЕсли;
				КонецЕсли;
				
				Если Не ЗаписьОтображаемогоОбъектаУжеСделана Тогда
					НомерШтампа = НомерШтампа + 1;
					ДокументPdf.ДобавитьОтображаемыйОбъект(Описание);
				КонецЕсли; 
				
			КонецЦикла;
			
			НомерШтампа = 0;
			
			Если ЗначениеЗаполнено(ФайлРегистрационныйШтампОрганизации) Тогда
				
				Если Не ЕстьПоложениеРегШтампаОрганизации Тогда
					РаботаСКартинками.УвеличитьРегШтамп(ИмяФайлаРегШтампОрганизации, ВременнаяПапкаДляРазархивирования);
				КонецЕсли;
				
				КартинкаШтрихкодРегШтамп = Новый Картинка(ИмяФайлаРегШтампОрганизации);
				НастройкиРегНомера = ШтрихкодированиеСервер.ПерсональныеНастройкиПоложенияРегНомера();
				
				Описание = Новый ОписаниеОтображаемогоОбъектаPDF();
				Описание.Имя = "Пример" + Строка(НомерШтампа + СлучайноеЧислоДобавка + 40);
				Описание.Объект = КартинкаШтрихкодРегШтамп;
				Если НастройкиРегНомера.СтраницаВставки = Перечисления.СтраницаВставкиКартинки.Последняя Тогда
					Описание.НомерСтраницы = ВсегоСтраниц;
				Иначе
					Описание.НомерСтраницы = 1;
				КонецЕсли;
				
				Если ЕстьПоложениеРегШтампаОрганизации Тогда
					Описание.Лево = ПоложениеРегШтампаОрганизации.Слева;
					Описание.Верх = ПоложениеРегШтампаОрганизации.Сверху;
					Описание.Высота = ПоложениеРегШтампаОрганизации.Высота;
					Описание.Ширина = ПоложениеРегШтампаОрганизации.Ширина;
					Описание.НомерСтраницы = 1;
					Если ПоложениеРегШтампаОрганизации.Страница = Перечисления.СтраницаВставкиКартинки.Последняя Тогда
						Описание.НомерСтраницы = ВсегоСтраниц;
					ИначеЕсли ТипЗнч(ПоложениеРегШтампаОрганизации.Страница) = Тип("Число") Тогда
						Описание.НомерСтраницы = ?(
							ПоложениеРегШтампаОрганизации.Страница > ВсегоСтраниц,
							ВсегоСтраниц,
							ПоложениеРегШтампаОрганизации.Страница);
					КонецЕсли;
				Иначе
#Удаление
					Размеры = РаботаСКартинками.НовыйРазмеры(48, 24);
#КонецУдаления
#Вставка
					Размеры = РаботаСКартинками.НовыйРазмеры(1, 1);
#КонецВставки
					Координаты = РаботаСКартинками.КоординатыПоНастройкам(НастройкиРегНомера, Размеры, НомерШтампа);
					Описание.Лево = Координаты.Слева;
					Описание.Верх = Координаты.Сверху;
				КонецЕсли;
#Удаление
				
				ДокументPdf.ДобавитьОтображаемыйОбъект(Описание);
#КонецУдаления
#Вставка
				Попытка
					ДокументPdf.ДобавитьОтображаемыйОбъект(Описание);
				Исключение
				КонецПопытки;
#КонецВставки
				НомерШтампа = НомерШтампа + 1;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ФайлРегистрационныйШтампКорреспондента) Тогда
				
				Если Не ЕстьПоложениеРегШтампаКорреспондента Тогда
					РаботаСКартинками.УвеличитьРегШтамп(ИмяФайлаРегШтампКорреспондента);
				КонецЕсли;
				
				НастройкиРегНомера = ШтрихкодированиеСервер.ПерсональныеНастройкиПоложенияРегНомера();
				
				Описание = Новый ОписаниеОтображаемогоОбъектаPDF();
				Описание.Имя = "Пример" + Строка(НомерШтампа + СлучайноеЧислоДобавка + 45);
				Описание.Объект = Новый Картинка(ИмяФайлаРегШтампКорреспондента);
				Если НастройкиРегНомера.СтраницаВставки = Перечисления.СтраницаВставкиКартинки.Последняя Тогда
					Описание.НомерСтраницы = ВсегоСтраниц;
				Иначе
					Описание.НомерСтраницы = 1;
				КонецЕсли;
				
				Если ЕстьПоложениеРегШтампаКорреспондента Тогда
					Описание.Лево = ПоложениеРегШтампаКорреспондента.Слева;
					Описание.Верх = ПоложениеРегШтампаКорреспондента.Сверху;
					Описание.Высота = ПоложениеРегШтампаКорреспондента.Высота;
					Описание.Ширина = ПоложениеРегШтампаКорреспондента.Ширина;
					Описание.НомерСтраницы = 1;
					Если ПоложениеРегШтампаКорреспондента.Страница = Перечисления.СтраницаВставкиКартинки.Последняя Тогда
						Описание.НомерСтраницы = ВсегоСтраниц;
					ИначеЕсли ТипЗнч(ПоложениеРегШтампаКорреспондента.Страница) = Тип("Число") Тогда
						Описание.НомерСтраницы = ?(
							ПоложениеРегШтампаКорреспондента.Страница > ВсегоСтраниц,
							ВсегоСтраниц,
							ПоложениеРегШтампаКорреспондента.Страница);
					КонецЕсли;
				Иначе
					Размеры = РаботаСКартинками.НовыйРазмеры(48, 24);
					Координаты = РаботаСКартинками.КоординатыПоНастройкам(НастройкиРегНомера, Размеры, НомерШтампа);
					Описание.Лево = Координаты.Слева;
					Описание.Верх = Координаты.Сверху;
				КонецЕсли;
				
				ДокументPdf.ДобавитьОтображаемыйОбъект(Описание);
				НомерШтампа = НомерШтампа + 1;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ФайлШтрихкод) Тогда
				
				РаботаСКартинками.УвеличитьШтрихкод(ИмяФайлаШтрихкод, ВременнаяПапкаДляРазархивирования);
				
				КартинкаШтампа = Новый Картинка(ИмяФайлаШтрихкод);
				НомерШтампа = 0;
				
				НастройкиШтрихкода = ШтрихкодированиеСервер.ПолучитьПерсональныеНастройкиПоложенияШтрихкодаНаСтранице();
				
				Описание = Новый ОписаниеОтображаемогоОбъектаPDF();
				Описание.Имя = "Пример" + Строка(НомерШтампа + СлучайноеЧислоДобавка + 60);
				Описание.Объект = КартинкаШтампа;
				
				Описание.НомерСтраницы = 1;
				
				Размеры = РаботаСКартинками.НовыйРазмеры(36, 24);
				Координаты = РаботаСКартинками.КоординатыПоНастройкам(НастройкиШтрихкода, Размеры, НомерШтампа);
				Описание.Лево = Координаты.Слева;
				Описание.Верх = Координаты.Сверху;
				
				ДокументPdf.ДобавитьОтображаемыйОбъект(Описание); 
				
			КонецЕсли;
		
			ДокументPdf.Записать(ИмяФайлаPdfНовое);
			ДокументPdf = Неопределено; // Закрытие, чтобы удалить, ниже.
			
		КонецЕсли;	
		
		ДвоичныеДанныеНовые = Новый ДвоичныеДанные(ИмяФайлаPdfНовое);
	
	КонецЕсли;
	
	ФайлВизуализация = СоздатьВизуализациюИЗаполнитьДанныеФайла(
		ДанныеФайла, ДвоичныеДанныеНовые, ИдентификаторФормы);	
	
	УдалитьФайлы(ВременнаяПапкаДляРазархивирования);
	
	Возврат ФайлВизуализация;
	
КонецФункции

&ИзменениеИКонтроль("СоздатьФайлРегШтампа")
Процедура ЦППК_СоздатьФайлРегШтампа(ВладелецФайла, Файл, НастройкиРегНомера, ПоложениеСтарого, РегистрационныйНомер = "")

	СведенияОРегистрации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВладелецФайла, 
		"РегистрационныйНомер, ДатаРегистрации");
		
	Если ЗначениеЗаполнено(РегистрационныйНомер) Тогда
		СведенияОРегистрации.РегистрационныйНомер = РегистрационныйНомер;
		СведенияОРегистрации.ДатаРегистрации = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ЭтоВходящийДокумент = ДелопроизводствоКлиентСервер.ЭтоВходящийДокумент(ВладелецФайла);
	СведенияОРегистрации.Вставить("ЭтоВходящийДокумент", ЭтоВходящийДокумент);			
    #Вставка
	ФЛ = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(ВладелецФайла.Зарегистрировал, "Владелец");
    СведенияОРегистрации.Вставить("Зарегистрировал", ФЛ);
    #КонецВставки
	
	ПутьФайлаРегШтампа = Делопроизводство.СоздатьРегистрационныйШтамп(СведенияОРегистрации);

	ДвоичныеДанныеШтампа = Новый ДвоичныеДанные(ПутьФайлаРегШтампа);
	АдресОтметки = ПоместитьВоВременноеХранилище(ДвоичныеДанныеШтампа);
	
	СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
	СведенияОФайле.АдресВременногоХранилищаФайла = АдресОтметки;
	СведенияОФайле.ИмяБезРасширения = "Рег штамп";
	СведенияОФайле.РасширениеБезТочки = "png";
	СведенияОФайле.ВремяИзменения = ТекущаяДатаСеанса();
	СведенияОФайле.ВремяИзмененияУниверсальное = ТекущаяУниверсальнаяДата();
	СведенияОФайле.Размер = ДвоичныеДанныеШтампа.Размер();
	СведенияОФайле.Вставить("ЗаписьПодписанногоОбъекта", Истина);
	СведенияОФайле.Вставить("ДобавлениеРегШтампа", Истина);

	ФайлРегШтамп = СоздатьФайлСВерсией(ВладелецФайла, СведенияОФайле);
	
	Положение = Неопределено;
	Если МЭДО.ЭтоЗаполненноеПоложениеИзображения(ПоложениеСтарого) Тогда
		// Штамп существовал ранее и он изменился (например сменился номер):
		Положение = ПоложениеСтарого;
	Иначе
		// Изменились пользовательские настройки и идет вызов из формы выбора варианта настроек:
		СтраницаВставки = 1;
		Если ЗначениеЗаполнено(НастройкиРегНомера.СтраницаВставки) Тогда
			СтраницаВставки = НастройкиРегНомера.СтраницаВставки;
		КонецЕсли;
		ВсеРазмеры = РаботаСКартинками.ВсеРазмерыКартинки(ДвоичныеДанныеШтампа);
#Удаление
		Высота = 6;
#КонецУдаления
#Вставка
		Высота = 12;	
#КонецВставки
		Ширина = ?(ВсеРазмеры.Нулевые, 1, Окр(ВсеРазмеры.ШиринаПикс / ВсеРазмеры.ВысотаПикс * Высота)); // в пропорции к высоте.
		Размеры = РаботаСКартинками.НовыйРазмеры(Ширина, Высота);
		Координаты = РаботаСКартинками.КоординатыПоНастройкам(НастройкиРегНомера, Размеры, 0);
		Положение = МЭДОСтруктурыДанных.НовыйПоложениеИзображения(
			СтраницаВставки, Координаты.Слева, Координаты.Сверху, Ширина, Высота);
	КонецЕсли;
	
	
	РегистрыСведений.СлужебныеФайлыДокументов.ЗаписатьФайл(
		ВладелецФайла, 
		Файл, // по файлу, а не на весь документ
		Перечисления.ОтношенияСлужебныхФайлов.РегистрационныйШтампОрганизации,
		ФайлРегШтамп,
		Положение);
	
КонецПроцедуры	

&ИзменениеИКонтроль("ВставитьРегистрационныйШтампИШтрихкод")
Процедура ЦППК_ВставитьРегистрационныйШтампИШтрихкод(ВладелецФайла, Файл, НастройкиРегНомерИШтрихкод)

	// удалим визуализацию.
	РегистрыСведений.СлужебныеФайлыДокументов.УдалитьПоВладельцуИОтношению(
	ВладелецФайла, Файл, Перечисления.ОтношенияСлужебныхФайлов.ВизуализацияЭП);

	РегистрыСведений.СлужебныеФайлыДокументов.УдалитьПоВладельцуИОтношению(
	ВладелецФайла, Файл, Перечисления.ОтношенияСлужебныхФайлов.Штрихкод);

	РегистрыСведений.СлужебныеФайлыДокументов.УдалитьПоВладельцуИОтношению(
	ВладелецФайла, Файл, Перечисления.ОтношенияСлужебныхФайлов.РегистрационныйШтампОрганизации);

	РегистрыСведений.ПредпросмотрФайлов.Удалить(Файл);

	// Создаем служебные файлы РегистрационныйШтамп и Штрихкод

#Удаление
	Если ПолучитьФункциональнуюОпцию("ИспользоватьШтрихкоды") Тогда

		ВставкаВPdf = Истина;
		ДанныеОШтрихкоде = ШтрихкодированиеСервер.ПолучитьДанныеДляВставкиШтрихкодаВОбъект(
		ВладелецФайла, Ложь, , ВставкаВPdf);
		Если ДанныеОШтрихкоде.Свойство("СообщениеОбОшибке") Тогда
			ТекстСообщения = ДанныеОШтрихкоде.СообщениеОбОшибке;
			ВызватьИсключение ТекстСообщения;
		КонецЕсли;

		ДвДанныеШтрихкода = ДанныеОШтрихкоде.ДвоичныеДанныеИзображения;
		АдресОтметки = ПоместитьВоВременноеХранилище(ДвДанныеШтрихкода);

		СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
		СведенияОФайле.АдресВременногоХранилищаФайла = АдресОтметки;
		СведенияОФайле.ИмяБезРасширения = "Штрихкод";
		СведенияОФайле.РасширениеБезТочки = "png";
		СведенияОФайле.ВремяИзменения = ТекущаяДатаСеанса();
		СведенияОФайле.ВремяИзмененияУниверсальное = ТекущаяУниверсальнаяДата();
		СведенияОФайле.Размер = ДвДанныеШтрихкода.Размер();
		СведенияОФайле.Вставить("ЗаписьПодписанногоОбъекта", Истина);
		СведенияОФайле.Вставить("ДобавлениеРегШтампа", Истина);

		ФайлВизуализацияШтрихкод = СоздатьФайлСВерсией(ВладелецФайла, СведенияОФайле);

		РегистрыСведений.СлужебныеФайлыДокументов.ЗаписатьФайл(
		ВладелецФайла, 
		Файл, // на каждый файл
		Перечисления.ОтношенияСлужебныхФайлов.Штрихкод,
		ФайлВизуализацияШтрихкод);

	КонецЕсли;
#КонецУдаления

	СоздатьФайлРегШтампа(
	ВладелецФайла,
	Файл,
	НастройкиРегНомерИШтрихкод.НастройкиРегНомера,
	МЭДОСтруктурыДанных.НовыйПоложениеИзображения(Неопределено, 0, 0, 0, 0));

КонецПроцедуры

&ИзменениеИКонтроль("СоздатьВизуализациюИЗаполнитьДанныеФайла")
Функция ЦППК_СоздатьВизуализациюИЗаполнитьДанныеФайла(ДанныеФайла, ДвоичныеДанныеНовые, ИдентификаторФормы) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИтоговыйФорматФайлаСоШтампомЭП = ДанныеФайла.НастройкиШтампаЭП.ИтоговыйФорматФайлаСоШтампомЭП;
	ИспользоватьLibreOffice = ФайловыеФункцииПовтИсп.ИспользоватьLibreOffice();
	
	СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
	СведенияОФайле.ИмяБезРасширения = ДанныеФайла.ПолноеНаименованиеВерсии + НСтр("ru = ' (со штампом ЭП)'");
	СведенияОФайле.РасширениеБезТочки = ДанныеФайла.Расширение;
	СведенияОФайле.Комментарий = НСтр("ru = 'Визуализация ЭП'");
	
	Если ИтоговыйФорматФайлаСоШтампомЭП = ПредопределенноеЗначение("Перечисление.ИтоговыйФорматФайлаСоШтампомЭП.PDFA") Тогда
		
		Если Не ДанныеФайла.НастройкиШтампаЭП.Использовать1СШтамп
			И Не ИспользоватьLibreOffice
			И ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент()
			И НРег(ДанныеФайла.Расширение) = "doc" Тогда
			СведенияОФайле.РасширениеБезТочки = ДанныеФайла.Расширение;
		Иначе	
			СведенияОФайле.РасширениеБезТочки = "pdf";
		КонецЕсли;	
		
	КонецЕсли;	
	
	СведенияОФайле.АдресВременногоХранилищаФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанныеНовые);
	СведенияОФайле.ВремяИзменения = ТекущаяДатаСеанса();
	СведенияОФайле.ВремяИзмененияУниверсальное = УниверсальноеВремя(СведенияОФайле.ВремяИзменения);
	СведенияОФайле.Размер = ДвоичныеДанныеНовые.Размер();
	
	СведенияОФайле.Вставить("ЗаписьПодписанногоОбъекта", Истина);
	СведенияОФайле.Вставить("ДобавлениеРегШтампа", Истина);
	
	ФайлВизуализация = СоздатьФайлСВерсией(ДанныеФайла.Владелец, СведенияОФайле);

#Вставка
	Если ИтоговыйФорматФайлаСоШтампомЭП = ПредопределенноеЗначение("Перечисление.ИтоговыйФорматФайлаСоШтампомЭП.PDFA") Тогда
		
		РеквизитыФайлаВизуализации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ФайлВизуализация, "ИндексКартинки, ТекущаяВерсияРазмер, ТекущаяВерсияРасширение");
		
		ФайлОбъект = ДанныеФайла.Ссылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(ФайлОбъект, РеквизитыФайлаВизуализации);
		ФайлОбъект.ОбменДанными.Загрузка = Истина;
		ФайлОбъект.Записать();
		
		ДанныеФайла.Размер = ФайлВизуализация.ТекущаяВерсияРазмер;
		
	КонецЕсли;	
#КонецВставки

	РегистрыСведений.СлужебныеФайлыДокументов.ЗаписатьФайл(
		ДанныеФайла.Владелец, 
		ДанныеФайла.Ссылка,
		Перечисления.ОтношенияСлужебныхФайлов.ВизуализацияЭП,
		ФайлВизуализация);
		
	ДобавитьфайлВизуализацияВНавигационнаяСсылкаТекущейВерсии(ДанныеФайла, ФайлВизуализация, ИдентификаторФормы);	
	
	Возврат ФайлВизуализация;
	
КонецФункции
