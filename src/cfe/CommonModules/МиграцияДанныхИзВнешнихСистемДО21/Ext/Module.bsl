
&Вместо("ПереименованныеОбъекты")
Функция ЦППК__ПереименованныеОбъекты()
	// Вставить содержимое метода.
	Объекты = ПродолжитьВызов();
	
	Объекты.Вставить("Справочник.ГруппыДоступаКорреспондентов", 
		"Справочник.ГруппыДоступаКонтрагентов");	
	
	Объекты.Вставить("Справочник.ГруппыПользователей", 
		"Справочник.РабочиеГруппы");	
	
	Объекты.Вставить("РегистрСведений.ФайлыВРабочемКаталоге", 
		"РегистрСведений.ФайлыВРабочемКаталогеКомпьютера");
	
	Объекты.Вставить("РегистрСведений.РабочиеКаталогиФайлов", 
		"РегистрСведений.РабочиеКаталогиФайловКомпьютера");
	
	Объекты.Вставить("РегистрСведений.ТТС_ДополнительныеНастройки", 
		null);
		
	Объекты.Вставить("РегистрСведений.ПолучателиОповещенийОПроблемахРаботыПрограммы", 
		null);			
	
	Возврат Объекты;
КонецФункции

&Вместо("ОбновитьВидКонтактнойИнформацииСотрудника")
Процедура ЦППК_ОбновитьВидКонтактнойИнформацииСотрудника(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)

	Если ЗначениеЗаполнено(Источник.Ссылка) Тогда
		РодительВидаКИ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "Родитель");
	Иначе
		РодительВидаКИ = Источник.Родитель;
	КонецЕсли;

	Если РодительВидаКИ <> Справочники.ВидыКонтактнойИнформации.СправочникПользователи Тогда
		Возврат;
	КонецЕсли;

	Если ЭтоУдалениеОбъекта(Источник) И Не ЗначениеЗаполнено(Источник.Ссылка) Тогда
		Возврат;
	КонецЕсли;

	Если Не ЭтоУдалениеОбъекта(Источник) Тогда
		СтандартнаяОбработка = Ложь;
		МиграцияДанныхИзВнешнихСистемСервер.СтандартноЗаписатьОдинЭлемент(
		Источник, Приемник, Порция, ПараметрыЗагрузки);
	КонецЕсли;

	// Проверить на пустоту.
	ВидКИСотрудника = ВидКИСотрудникаПоВидуКИПользователя(Источник.Ссылка, Источник.Тип);

	ВидКИСотрудникаОбъект = ВидКИСотрудника.ПолучитьОбъект();

	Если ЭтоУдалениеОбъекта(Источник) Тогда
		ВидКИСотрудникаОбъект.ИмяПредопределенныхДанных = "";
		ВидКИСотрудникаОбъект.ПометкаУдаления = Истина;
	Иначе

		РеквизитыИсключения = 
		"Ссылка,
		|Родитель,
		|ЭтоГруппа,
		|ИмяПредопределенныхДанных";

		ЗаполнитьЗначенияСвойств(ВидКИСотрудникаОбъект, Источник,, РеквизитыИсключения);
		ВидКИСотрудникаОбъект.Представления.Очистить();
		//Если Источник.Представления <> Null Тогда
		//	Для Каждого СтрокаТаблицы Из Источник.Представления Цикл
		//		ЗаполнитьЗначенияСвойств(ВидКИСотрудникаОбъект.Представления.Добавить(), СтрокаТаблицы);
		//	КонецЦикла;
		//КонецЕсли;

	КонецЕсли;

	ВидКИСотрудникаОбъект.ОбменДанными.Загрузка = ПараметрыЗагрузки.Загрузка;
	ВидКИСотрудникаОбъект.Записать();

	Если ПараметрыЗагрузки.Загрузка Тогда
		Объект = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(ВидКИСотрудникаОбъект.Ссылка));
		РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(
		ВидКИСотрудникаОбъект.Ссылка, ПараметрыЗагрузки.ПричинаЗагрузки, Объект);
	КонецЕсли;

КонецПроцедуры

&Вместо("КонвертацияЗадачиПроцесса")
Процедура ЦППК_КонвертацияЗадачиПроцесса(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)

	ЭтоУдалениеОбъекта = ЭтоУдалениеОбъекта(Источник);

	РеквизитыЗадачи = Источник;
	Если ЭтоУдалениеОбъекта(Источник) Тогда
		РеквизитыЗадачи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		Источник.Ссылка, "БизнесПроцесс, ТочкаМаршрута");
	КонецЕсли;

	ЭтоЗадачаКомплексногоПроцесса = 
	ТипЗнч(РеквизитыЗадачи.БизнесПроцесс) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс");

	ТочкаМаршрута = РеквизитыЗадачи.ТочкаМаршрута;

	Если (ЭтоЗадачаКомплексногоПроцесса И Не ЗначениеЗаполнено(ТочкаМаршрута.Вид))
		Или ОбщегоНазначения.СсылкаСуществует(КонтрольнаяКарточкаПоЗадаче(Источник)) Тогда

		// При загрузке задачи контроля комплексного процесса формируем
		// контрольную карточку по всему комплексному процессу, отказывась
		// от записи задачи.

		СтандартнаяОбработка = Ложь;

		Приемник = ОбновитьКонтрольнуюКарточкуПоЗадачеКонтроляКомплексногоПроцесса(
		Источник,
		ПараметрыЗагрузки.Загрузка,
		ПараметрыЗагрузки.ПричинаЗагрузки);

		Возврат;
	КонецЕсли;

	Если ЭтоЗадачаКомплексногоПроцесса Тогда

		СтандартнаяОбработка = Ложь;

		ЭтоПерваяЗагрузка = Не ОбщегоНазначения.СсылкаСуществует(
		Источник.Ссылка);

		МиграцияДанныхИзВнешнихСистемСервер.СтандартноЗаписатьОдинЭлемент(
		Источник, Приемник, Порция, ПараметрыЗагрузки);

		ОбновитьОтметкиВыполненияПроцессаОбработкиДокументаПоЗадаче(
		Источник,
		ЭтоПерваяЗагрузка,
		ПараметрыЗагрузки.Загрузка,
		ПараметрыЗагрузки.ПричинаЗагрузки);

		Возврат;

	КонецЕсли;

	// вызов зонтика - но сперва саму задачу записать.
	СтандартнаяОбработка = Ложь;

	Если ТипЗнч(РеквизитыЗадачи.БизнесПроцесс) = Тип("БизнесПроцессСсылка.Подписание")
		И Не ЭтоУдалениеОбъекта Тогда

		ЗаменитьТочкиМаршрутаПроцессаУтверждениеТочкамиПроцессаПодписание(Источник, "ТочкаМаршрута");
	КонецЕсли;

	МиграцияДанныхИзВнешнихСистемСервер.СтандартноЗаписатьОдинЭлемент(
	Источник, Приемник, Порция, ПараметрыЗагрузки);

	//  вызов зонтика                    
	//МДК. Добавление параметры загрузки, вынести в пост обработку
	Если НЕ ПараметрыЗагрузки.Загрузка И ЗначениеЗаполнено(РеквизитыЗадачи.БизнесПроцесс) 
		И ОбщегоНазначения.СсылкаСуществует(РеквизитыЗадачи.БизнесПроцесс) Тогда

		ДействияДляОбработки = СвязатьПроцессСДействиемОбработки(
		ОписаниеПроцессаДляДействияОбработки(Источник.БизнесПроцесс), 
		ПараметрыЗагрузки);

		Если ЗначениеЗаполнено(ДействияДляОбработки) Тогда
			ОбновитьДействия(ДействияДляОбработки, ПараметрыЗагрузки);
		КонецЕсли

	КонецЕсли;

	// Работа с визами согласования
	ВизыПоЗадаче = ВизыПоЗадаче(Источник.Ссылка, Источник.БизнесПроцесс);
	Для Каждого Виза Из ВизыПоЗадаче Цикл
		ОбновитьДанныеВизСогласованияПоЗадаче(Виза, Источник.Ссылка, ПараметрыЗагрузки);
	КонецЦикла;

	// Работа с резолюциями
	Резолюции = РезолюцииПоИсточнику(Источник.Ссылка, Источник.БизнесПроцесс);
	Для Каждого Резолюция Из Резолюции Цикл
		ОбновитьДанныеРезолюцииПоИсточнику(Резолюция, Источник.Ссылка, ПараметрыЗагрузки);
	КонецЦикла;	

КонецПроцедуры

&Вместо("ЗагрузитьРабочиеГруппы")
Процедура ЦППК_ЗагрузитьРабочиеГруппы(Источник, Приемник, Порция, СтандартнаяОбработка, ПараметрыЗагрузки)

	ЗаменитьИмяКолонки(Источник.Состав, "Пользователь", "Участник");

	СсылкаНаЭлемент = Источник.Ссылка;	
	СтандартнаяОбработка = Ложь;

	// Проверим что ссылка пустая или "битая", тогда объекта не было в базе.
	ЭтоНовыйЭлемент = СсылкаНаЭлемент.Пустая() Или СсылкаНаЭлемент.ПолучитьОбъект() = Неопределено;

	Источник.ИмяПредопределенныхДанных = "";
	Если Источник.Наименование = "Все пользователи" 
		Или Источник.Наименование = "All users" Тогда
		Источник.Наименование = НСтр("ru = 'Все сотрудники'");
	КонецЕсли;
	Источник.Комментарий = СтрШаблон("%1
		|#Загружено из ДО2", Источник.Комментарий);

	МиграцияДанныхИзВнешнихСистемСервер.СтандартноЗаписатьОдинЭлемент(
	Источник, Приемник, Порция, ПараметрыЗагрузки);

	Если ЭтоНовыйЭлемент Тогда

		// Прямо в обработчике загрузки этого метаданного смотреть по имени - если уже есть такое в 3.0, 
		// создать объект из 2.1 (с GUID 2.1), 
		// скопировать в него свойства из объекта 3.0 (с тем же наименованием), 
		// объект 3.0 удалить.
		Элемент30 = НайтиПоНаименованию(Источник.Наименование, СсылкаНаЭлемент);
		Если ЗначениеЗаполнено(Элемент30) Тогда
			Элемент30Объект = Элемент30.ПолучитьОбъект();
			СсылкаНаЭлементОбъект = СсылкаНаЭлемент.ПолучитьОбъект();
			ЗаполнитьЗначенияСвойств(СсылкаНаЭлементОбъект, Элемент30Объект, , 
			"Код, Родитель, Владелец, Ссылка, ЭтоГруппа, ЭтотОбъект, ПометкаУдаления");

			//Набор = РегистрыСведений.ПолномочияСотрудников.СоздатьНаборЗаписей();
			//Набор.Отбор.Владелец.Установить(Элемент30);
			//Набор.Записать();

			ЗаменитьРабочиеГруппыВАдреснойКниге(Элемент30, СсылкаНаЭлемент);
			ЗаменитьРабочиеГруппыВОрганизациях(Элемент30, СсылкаНаЭлемент);

			Элемент30Объект.ОбменДанными.Загрузка = Истина;
			Элемент30Объект.Удалить();
			СсылкаНаЭлементОбъект.ОбменДанными.Загрузка = Истина;
			СсылкаНаЭлементОбъект.Записать();

		КонецЕсли;

	КонецЕсли;

	Если ПараметрыЗагрузки.Загрузка Тогда
		РегистрыСведений.ОчередьПостОбработкиЗагрузки.ДобавитьВОчередь(СсылкаНаЭлемент,
		ПараметрыЗагрузки.ПричинаЗагрузки,
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Тип("СправочникСсылка.РабочиеГруппы")));
	КонецЕсли;

	РегистрыСведений.СотрудникиВКонтейнерах.ОбновитьДанныеКонтейнера(СсылкаНаЭлемент);

КонецПроцедуры

