
&НаСервере
&ИзменениеИКонтроль("ПриСозданииНаСервере")
Процедура ЦППК_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	ПриСозданииНаСервереРедакцииКонфигурации();

	ПротоколированиеРаботыСотрудников.ЗаписатьОткрытие(Объект.Ссылка);
	ИспользоватьСвязиДокументов = ПолучитьФункциональнуюОпцию("ИспользоватьСвязиОбъектов");

	ЗаполнитьСлужебныеПоля();

	ЗаполнитьНезависимуюНумерацию();

	ПрочитатьНастройкиНумерации();
#Вставка
	// { *Грошев (ТТС) [29.06.2020]
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ТТС_ДоступнаНезависимаяНумерацияПоНаправлению", Новый ОписаниеТипов("Булево")));
	ЭтаФорма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);

	ЦППК_УстановитьДоступностьНезависимойНумерацииПоНаправлению();
	// }
#КонецВставки

	Если ПолучитьФункциональнуюОпцию("ИспользоватьГрифыДоступа") Тогда
		Элементы.НастройкиНумерацииГрифДоступа.Видимость = Истина; 
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.ТипСвязи) Тогда  
		Если Объект.НезависимаяНумерацияПоСвязанномуДокументу Тогда 
			Для Каждого Строка Из НезависимаяНумерация Цикл
				Если Строка.Значение = "НезависимаяНумерацияПоСвязанномуДокументу" Тогда 
					Строка.Представление = Строка.Представление + " (" + Строка(Объект.ТипСвязи) + ")";
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

		Если ФорматСодержитНомерСвязанного(Объект.ФорматНомера) Тогда 

			Для Каждого Строка Из СлужебныеПоля Цикл
				Если Строка.Значение = "[НомерСвязДок]" Тогда 
					Строка.Представление = Строка.Представление + " (" + Строка(Объект.ТипСвязи) + ")";
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	СформироватьПримерНомера();

	Элементы.ИспользоватьПропущенныеНомера.Доступность = 
	Объект.Назначение <> ПредопределенноеЗначение("Перечисление.НазначенияНумераторов.ВременныйНомер");

КонецПроцедуры

&НаКлиенте
&ИзменениеИКонтроль("ПередЗаписью")
Процедура ЦППК_ПередЗаписью(Отказ, ПараметрыЗаписи)

	Для Каждого Строка Из НезависимаяНумерация Цикл
		Объект[Строка.Значение] = Строка.Пометка;
	КонецЦикла;

	ТекстОшибки = "";

	Если Объект.Ссылка <> ПредопределенноеЗначение("Справочник.Нумераторы.Штрихкоды")
		И Не ПараметрыЗаписи.Свойство("ПоказаноПодтверждениеЗаписиФорматаБезНомера") Тогда
		Если Не НайденТегНомер(Объект.ФорматНомера, ТекстОшибки, Отказ) Тогда 
			Если Отказ Тогда 
				ОбщегоНазначенияКлиент.СообщитьПользователю(
				ТекстОшибки,,
				"Объект.ФорматНомера",,
				Отказ);
				Возврат;

			ИначеЕсли (Найти(Объект.ФорматНомера, "НомерСвязДок") > 0) Тогда 
				ОписаниеОповещения = Новый ОписаниеОповещения(
				"ПередЗаписьюПродолжениеПослеПодтвержденияЗаписиФорматаБезНомера",
				ЭтотОбъект,
				ПараметрыЗаписи);
				ТекстВопроса = НСтр("ru = 'Формат номера не содержит служебное поле ""Номер""
				|Продолжить?'");

				ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
				Отказ = Истина;
				Возврат;

			Иначе 
				ОбщегоНазначенияКлиент.СообщитьПользователю(
				НСтр("ru = 'Формат номера не содержит служебное поле ""Номер""'"),,
				"Объект.ФорматНомера",,
				Отказ);
				Возврат;

			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	ПараметрыНумерации = ИзменениеПараметровНумерации();

	Если ПараметрыНумерации.ИзмененыПараметрыНумерации Тогда 
		ТекстВопроса = НСтр("ru = 'Для данного нумератора имеются сформированные номера.
		|Вы действительно хотите изменить параметры нумерации?'");

		Если Не ПараметрыЗаписи.Свойство("ПоказаноПодтверждениеЗаписи") Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПередЗаписьюПродолжениеПослеПодтвержденияЗаписи",
			ЭтотОбъект,
			ПараметрыЗаписи);
			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
			Отказ = Истина;
			Возврат;
		КонецЕсли;

		Если ПараметрыНумерации.ВключенаНумерацияПоОрганизациям 
			И Не ПараметрыЗаписи.Свойство("ПоказанВыборОрганизаций") Тогда 
			ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПередЗаписьюПродолжениеПослеВыбораОрганизации",
			ЭтотОбъект,
			ПараметрыЗаписи);
			ВыбранноеЗначение = "";
			ПоказатьВводЗначения(
			ОписаниеОповещения,
			ВыбранноеЗначение, 
			РедакцииКонфигурацииКлиентСервер.ОшибкаНеВыбранаОрганизацияНумерации(), 
			Тип("СправочникСсылка.Организации"));
			Отказ = Истина;
			Возврат;
		КонецЕсли;

		Если ПараметрыНумерации.ВключенаНумерацияПоВидуДокумента
			И Не ПараметрыЗаписи.Свойство("ПоказанВыборВидаДокумента") Тогда 
			ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПередЗаписьюПродолжениеПослеВыбораВидаДокумента",
			ЭтотОбъект,
			ПараметрыЗаписи);

			Массив = Новый Массив;
			Массив.Добавить(Тип("СправочникСсылка.ВидыДокументов"));
			ОписаниеТипов = Новый ОписаниеТипов(Массив);

			ВыбранноеЗначение = "";
			ПоказатьВводЗначения(
			ОписаниеОповещения,
			ВыбранноеЗначение, 
			НСтр("ru = 'Укажите вид документа, к которому отнести существующие номера'"), 
			ОписаниеТипов); 
			Отказ = Истина;
			Возврат;
		КонецЕсли;

		Если ПараметрыНумерации.ВключенаНумерацияПоПодразделению
			И Не ПараметрыЗаписи.Свойство("УказаноПодразделение") Тогда 
			ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПередЗаписьюПродолжениеПослеВыбораПодразделения",
			ЭтотОбъект,
			ПараметрыЗаписи);
			ВыбранноеЗначение = "";
			ПоказатьВводЗначения(
			ОписаниеОповещения,
			ВыбранноеЗначение, 
			НСтр("ru = 'Укажите подразделение, к которому отнести существующие номера'"), 
			Тип("СправочникСсылка.СтруктураПредприятия"));  
			Отказ = Истина;
			Возврат;
		КонецЕсли;

		Если ПараметрыНумерации.ВключенаНумерацияПоПроекту 
			И Не ПараметрыЗаписи.Свойство("УказанПроект") Тогда 
			ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПередЗаписьюПродолжениеПослеВыбораПроекта",
			ЭтотОбъект,
			ПараметрыЗаписи);
			ВыбранноеЗначение = "";
			ПоказатьВводЗначения(
			ОписаниеОповещения,
			ВыбранноеЗначение, 
			НСтр("ru = 'Укажите проект, к которому отнести существующие номера'"), 
			Тип("СправочникСсылка.Проекты"));
			Отказ = Истина;
			Возврат;
		КонецЕсли;

		Если ПараметрыНумерации.ВключенаНумерацияПоВопросуДеятельности
			И Не ПараметрыЗаписи.Свойство("УказанВопросДеятельности") Тогда 
			ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПередЗаписьюПродолжениеПослеВыбораВопросаДеятельности",
			ЭтотОбъект,
			ПараметрыЗаписи);
			ВыбранноеЗначение = "";
			ПоказатьВводЗначения(
			ОписаниеОповещения,
			ВыбранноеЗначение, 
			НСтр("ru = 'Укажите вопрос деятельности, к которому отнести существующие номера'"), 
			Тип("СправочникСсылка.ВопросыДеятельности"));  
			Отказ = Истина;
			Возврат;					
		КонецЕсли;
#Вставка
		// { *Грошев (ТТС) [29.06.2020]
		Если ПараметрыНумерации.ТТС_ВключенаНумерацияПоНаправлению
			И Не ПараметрыЗаписи.Свойство("ТТС_УказаноНаправление") Тогда 
			ОписаниеОповещения = Новый ОписаниеОповещения(
			"ЦППК_ПередЗаписьюПродолжениеПослеВыбораНаправления",
			ЭтотОбъект,
			ПараметрыЗаписи);
			ВыбранноеЗначение = "";
			ПоказатьВводЗначения(
			ОписаниеОповещения,
			ВыбранноеЗначение, 
			НСтр("ru = 'Укажите направление, к которому отнести существующие номера'"), 
			Тип("СправочникСсылка.ТТС_Направления"));  
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		// }
#КонецВставки

		Если ПараметрыНумерации.ПереключенНаНепериодическийНумератор Тогда 
			Если Не ПараметрыЗаписи.Свойство("ПоказаноПредупреждениеОПереключенииНумератора") Тогда
				ОписаниеОповещения = Новый ОписаниеОповещения(
				"ПередЗаписьюПродолжениеПослеПредупрежденияОПереключенииНумератора",
				ЭтотОбъект,
				ПараметрыЗаписи);
				ТекстСообщения = НСтр("ru = 'Изменена периодичность нумератора на Непериодический.
				|Будет удалена информация о номерах по периодам и установлен последний номер в качестве текущего'");
				ПоказатьПредупреждение(ОписаниеОповещения, ТекстСообщения);
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;	

	КонецЕсли;	

	Если Найти(Объект.ФорматНомера, "ИндексНомДел") > 0 
		И Не ПараметрыЗаписи.Свойство("ПоказанВопросОВключенииУчетаПоНоменклатуреДел") Тогда 
		ВидыДокументов = ВидыДокументовБезУчетаПоНоменклатуреДел();
		Если ВидыДокументов.Количество() > 0 Тогда 

			ПараметрыОбработчика = Новый Структура;
			ПараметрыОбработчика.Вставить("ВидыДокументов", ВидыДокументов);
			ПараметрыОбработчика.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);

			ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПередЗаписьюПродолжениеПослеВопросаОВключенииУчетаПоНоменклатуреДел",
			ЭтотОбъект,
			ПараметрыОбработчика);

			ТекстВопроса = НСтр("ru = 'Текущий нумератор использует индекс номенклатуры дел.
			|Найдены виды документов, для которых не включен учет по номенклатуре дел.
			|Включить учет по номенклатуре дел для найденных видов документов?'");

			ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
			Отказ = Истина;
			Возврат;

		КонецЕсли;
	КонецЕсли;

	Если ПараметрыНумерации.ВключенаНумерацияПоГрифДоступа 
		И Не ПараметрыЗаписи.Свойство("УказанГриф") Тогда 
		ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПередЗаписьюПродолжениеПослеВыбораГрифа",
		ЭтотОбъект,
		ПараметрыЗаписи);
		ВыбранноеЗначение = "";
		ПоказатьВводЗначения(
		ОписаниеОповещения,
		ВыбранноеЗначение, 
		НСтр("ru = 'Укажите гриф доступа, к которому отнести существующие номера'"), 
		Тип("СправочникСсылка.ГрифыДоступа"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЦППК_НастройкиНумерацииПриОкончанииРедактированияПосле(Элемент, НоваяСтрока, ОтменаРедактирования)
	// { *Грошев (ТТС) [29.06.2020]
	Если НЕ ОтменаРедактирования Тогда
		ЦППК_УстановитьДоступностьНезависимойНумерацииПоНаправлению();
	КонецЕсли;
	// }
КонецПроцедуры

&НаКлиенте
Процедура ЦППК_НастройкиНумерацииПослеУдаленияПосле(Элемент)
	// { *Грошев (ТТС) [29.06.2020]
	ЦППК_УстановитьДоступностьНезависимойНумерацииПоНаправлению();
	// }
КонецПроцедуры

&НаСервере
&ИзменениеИКонтроль("ИзменениеПараметровНумерации")
Функция ЦППК_ИзменениеПараметровНумерации()

	НаборЗаписей = РегистрыСведений.Нумерация.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Нумератор.Установить(Объект.Ссылка);
	НаборЗаписей.Прочитать();

	ИзмененыПараметрыНумерации = ЗначениеЗаполнено(Объект.Ссылка) 
	И (Объект.ФорматНомера <> Объект.Ссылка.ФорматНомера 
	Или Объект.Периодичность <> Объект.Ссылка.Периодичность
	Или Объект.НезависимаяНумерацияПоОрганизациям <> Объект.Ссылка.НезависимаяНумерацияПоОрганизациям
	Или Объект.НезависимаяНумерацияПоВидуДокумента <> Объект.Ссылка.НезависимаяНумерацияПоВидуДокумента
#Удаление 
	Или Объект.НезависимаяНумерацияПоПодразделению <> Объект.Ссылка.НезависимаяНумерацияПоПодразделению)
#КонецУдаления
#Вставка
	// { *Грошев (ТТС) [29.06.2020]
	Или Объект.НезависимаяНумерацияПоПодразделению <> Объект.Ссылка.НезависимаяНумерацияПоПодразделению
	Или Объект.ТТС_НезависимаяНумерацияПоНаправлению <> Объект.Ссылка.ТТС_НезависимаяНумерацияПоНаправлению)
	// }
#КонецВставки
	И НаборЗаписей.Количество() > 0;

	ПереключенНаНепериодическийНумератор = ЗначениеЗаполнено(Объект.Ссылка) 
	И Объект.Периодичность <> Объект.Ссылка.Периодичность
	И Объект.Периодичность = Перечисления.ПериодичностьНумераторов.Непериодический
	И НаборЗаписей.Количество() > 0;	

	// Включена нумерация по организациям
	НаборЗаписей = РегистрыСведений.Нумерация.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Нумератор.Установить(Объект.Ссылка);
	НаборЗаписей.Отбор.Организация.Установить(Справочники.Организации.ПустаяСсылка());
	НаборЗаписей.Прочитать();

	ВключенаНумерацияПоОрганизациям = ЗначениеЗаполнено(Объект.Ссылка) 
	И Объект.НезависимаяНумерацияПоОрганизациям 
	И (Не Объект.Ссылка.НезависимаяНумерацияПоОрганизациям)
	И НаборЗаписей.Количество() > 0;	

	// Включена нумерация по подразделению
	НаборЗаписей = РегистрыСведений.Нумерация.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Нумератор.Установить(Объект.Ссылка);
	НаборЗаписей.Отбор.Подразделение.Установить(Справочники.СтруктураПредприятия.ПустаяСсылка());
	НаборЗаписей.Прочитать();	

	ВключенаНумерацияПоПодразделению = ЗначениеЗаполнено(Объект.Ссылка) 
	И Объект.НезависимаяНумерацияПоПодразделению
	И (Не Объект.Ссылка.НезависимаяНумерацияПоПодразделению)
	И НаборЗаписей.Количество() > 0;

	// Включена нумерация по проекту
	НаборЗаписей = РегистрыСведений.Нумерация.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Нумератор.Установить(Объект.Ссылка);
	НаборЗаписей.Отбор.Проект.Установить(Справочники.Проекты.ПустаяСсылка());
	НаборЗаписей.Прочитать();	

	ВключенаНумерацияПоПроекту = ЗначениеЗаполнено(Объект.Ссылка) 
	И Объект.НезависимаяНумерацияПоПроекту
	И (Не Объект.Ссылка.НезависимаяНумерацияПоПроекту)
	И НаборЗаписей.Количество() > 0;	

	// Включена нумерация по вопросу деятельности	
	НаборЗаписей = РегистрыСведений.Нумерация.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Нумератор.Установить(Объект.Ссылка);
	НаборЗаписей.Отбор.ВопросДеятельности.Установить(Справочники.ВопросыДеятельности.ПустаяСсылка());
	НаборЗаписей.Прочитать();	

	ВключенаНумерацияПоВопросуДеятельности = ЗначениеЗаполнено(Объект.Ссылка) 
	И Объект.НезависимаяНумерацияПоВопросуДеятельности
	И (Не Объект.Ссылка.НезависимаяНумерацияПоВопросуДеятельности)
	И НаборЗаписей.Количество() > 0;	

	// Включена нумерация по виду документа
	НаборЗаписей = РегистрыСведений.Нумерация.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Нумератор.Установить(Объект.Ссылка);
	НаборЗаписей.Отбор.ВидДокумента.Установить(Неопределено);
	НаборЗаписей.Прочитать();

	ВключенаНумерацияПоВидуДокумента = ЗначениеЗаполнено(Объект.Ссылка) 
	И Объект.НезависимаяНумерацияПоВидуДокумента
	И (Не Объект.Ссылка.НезависимаяНумерацияПоВидуДокумента)
	И НаборЗаписей.Количество() > 0;

	// Включена нумерация по Грифу
	НаборЗаписей = РегистрыСведений.Нумерация.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Нумератор.Установить(Объект.Ссылка);
	НаборЗаписей.Отбор.ГрифДоступа.Установить(Справочники.ГрифыДоступа.ПустаяСсылка());
	НаборЗаписей.Прочитать();	

	ВключенаНумерацияПоГрифДоступа = ЗначениеЗаполнено(Объект.Ссылка) 
	И Объект.НезависимаяНумерацияПоГрифуДоступа
	И НаборЗаписей.Количество() > 0;

	Результат = Новый Структура;
	Результат.Вставить("ИзмененыПараметрыНумерации", 			ИзмененыПараметрыНумерации);
	Результат.Вставить("ПереключенНаНепериодическийНумератор", 	ПереключенНаНепериодическийНумератор);
	Результат.Вставить("ВключенаНумерацияПоОрганизациям", 		ВключенаНумерацияПоОрганизациям);
	Результат.Вставить("ВключенаНумерацияПоПодразделению", 		ВключенаНумерацияПоПодразделению);
	Результат.Вставить("ВключенаНумерацияПоПроекту", 			ВключенаНумерацияПоПроекту);
	Результат.Вставить("ВключенаНумерацияПоВопросуДеятельности",ВключенаНумерацияПоВопросуДеятельности);
	Результат.Вставить("ВключенаНумерацияПоВидуДокумента", 		ВключенаНумерацияПоВидуДокумента);
	Результат.Вставить("ВключенаНумерацияПоГрифДоступа", 		ВключенаНумерацияПоГрифДоступа);
#Вставка
	// { *Грошев (ТТС) [29.06.2020]
	// Включена нумерация по направлению
	НаборЗаписей = РегистрыСведений.Нумерация.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Нумератор.Установить(Объект.Ссылка);
	НаборЗаписей.Отбор.ТТС_Направление.Установить(Справочники.ТТС_Направления.ПустаяСсылка());
	НаборЗаписей.Прочитать();

	ТТС_ВключенаНумерацияПоНаправлению = ЗначениеЗаполнено(Объект.Ссылка) 
	И Объект.ТТС_НезависимаяНумерацияПоНаправлению
	И (Не Объект.Ссылка.ТТС_НезависимаяНумерацияПоНаправлению)
	И НаборЗаписей.Количество() > 0;

	Результат.Вставить("ТТС_ВключенаНумерацияПоНаправлению", 		ТТС_ВключенаНумерацияПоНаправлению);
	// }
#КонецВставки

	Возврат Результат;

КонецФункции

// { *Грошев (ТТС) [29.06.2020]
&НаСервере
Процедура ЦППК_УстановитьДоступностьНезависимойНумерацииПоНаправлению()
	Для Каждого СтрокаНастройки Из НастройкиНумерации Цикл
		Если СтрокаНастройки.ВидДокумента.ТТС_ЯвляетсяЖурналомТУ Тогда
			
			ТТС_ДоступнаНезависимаяНумерацияПоНаправлению = Истина;
		Иначе
			ТТС_ДоступнаНезависимаяНумерацияПоНаправлению = Ложь;
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	Если ТТС_ДоступнаНезависимаяНумерацияПоНаправлению = Ложь Тогда
		НезависимаяНумерация.НайтиПоЗначению("ТТС_НезависимаяНумерацияПоНаправлению").Пометка = Ложь;
	КонецЕсли;
КонецПроцедуры
// }

// { *Грошев (ТТС) [29.06.2020]
&НаКлиенте
Процедура ЦППК_ПередЗаписьюПродолжениеПослеВыбораНаправления(ВыбранноеЗначение, ПараметрыЗаписи) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьИзмерениеВРегистреНумерация("ТТС_Направление", ВыбранноеЗначение);
	ПараметрыЗаписи.Вставить("ТТС_УказаноНаправление", Истина);
	Записать(ПараметрыЗаписи);
	
КонецПроцедуры
// }

&НаСервере
&После("ЗаполнитьСлужебныеПоля")
Процедура ЦППК_ЗаполнитьСлужебныеПоля()
	// { *Грошев (ТТС) [29.06.2020]
	СлужебныеПоля.Добавить(НСтр("ru = '[ИндексНапр]'"), 	НСтр("ru = 'Индекс направления'"));	
	// }
КонецПроцедуры

&НаСервере
&ИзменениеИКонтроль("ЗаполнитьНезависимуюНумерацию")
Процедура ЦППК_ЗаполнитьНезависимуюНумерацию()

	НезависимаяНумерация.Очистить();
	НезависимаяНумерация.Добавить("НезависимаяНумерацияПоВидуДокумента",
	НСтр("ru = 'Виду документа'"));

	Если ПолучитьФункциональнуюОпцию("ИспользоватьВопросыДеятельности") Тогда
		НезависимаяНумерация.Добавить("НезависимаяНумерацияПоВопросуДеятельности",
		НСтр("ru = 'Вопросу деятельности'"));
	КонецЕсли;

	Если ПолучитьФункциональнуюОпцию("ИспользоватьГрифыДоступа") Тогда
		НезависимаяНумерация.Добавить("НезависимаяНумерацияПоГрифуДоступа", НСтр("ru = 'Грифу доступа'"));
	КонецЕсли;

	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям") Тогда
		НезависимаяНумерация.Добавить("НезависимаяНумерацияПоОрганизациям", РедакцииКонфигурацииКлиентСервер.Организации());
	КонецЕсли;

	НезависимаяНумерация.Добавить("НезависимаяНумерацияПоПодразделению", НСтр("ru = 'Подразделению'"));

	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда
		НезависимаяНумерация.Добавить("НезависимаяНумерацияПоПроекту", НСтр("ru = 'Проекту'"));
	КонецЕсли;

	Если ИспользоватьСвязиДокументов Тогда 
		НезависимаяНумерация.Добавить("НезависимаяНумерацияПоСвязанномуДокументу",
		НСтр("ru = 'Связанному документу'"));
	КонецЕсли;

	Если РаботаСТематикамиДокументов.ТематикиИспользуются() Тогда
		НезависимаяНумерация.Добавить("НезависимаяНумерацияПоТематике", НСтр("ru = 'Тематике'"));
	КонецЕсли;
#Вставка
	// { *Грошев (ТТС) [29.06.2020]
	НезависимаяНумерация.Добавить("ТТС_НезависимаяНумерацияПоНаправлению", НСтр("ru = 'Направлению'"));	
	// }
#КонецВставки

	Если ПолучитьФункциональнуюОпцию("ИспользоватьКОД") Тогда
		НезависимаяНумерация.Добавить("НезависимаяНумерацияПоУзлуКОД", НСтр("ru = 'Узлу обмена'"));
	КонецЕсли;

	Для Каждого Строка Из НезависимаяНумерация Цикл
		Если Объект[Строка.Значение] = Истина Тогда 
			Строка.Пометка = Истина;
		КонецЕсли;
	КонецЦикла;	

КонецПроцедуры
