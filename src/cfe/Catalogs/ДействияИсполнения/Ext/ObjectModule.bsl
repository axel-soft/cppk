
&ИзменениеИКонтроль("ЗаполнитьПоНастройке")
Процедура ЦППК_ЗаполнитьПоНастройке(Настройка, ПредметОбъект = Неопределено)

	Если Не ЗначениеЗаполнено(Настройка) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(Настройка) <> Тип("СправочникСсылка.НастройкиДействийИсполнения") Тогда
		ВызватьИсключение СтрШаблон(
		НСтр("ru = 'Настройка типа ""%1"" не подходит для заполнения действия исполнения.
		|Следует актуализировать правила обработки документов.'"),
		ТипЗнч(Настройка));
	КонецЕсли;
	НастройкаДействия = Настройка;
	ПоПунктамНачальное = ПоПунктам;

	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Настройка,
	"Автор, Важность, ВариантИсполнения, ВидДействия, Участники, МоментРазыменованияУчастников,
	|ПодписыватьРезолюцииЭП, Контролер, ПоПунктам, ОтложенноеНачалоВыполнения");
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Реквизиты,, "Участники, Автор, Важность");
#Вставка
	// { *Андрей Анохин (ТТС) [28.03.2018]
	Если НЕ ЗначениеЗаполнено(Контролер) тогда 
		ТТС_КонтролерПоУмолчанию = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ТТС_КонтролерПоУмолчанию","ТТС_КонтролерПоУмолчанию");
		Если ЗначениеЗаполнено(ТТС_КонтролерПоУмолчанию) Тогда
			Контролер = ТТС_КонтролерПоУмолчанию;
		КонецЕсли;
	КонецЕсли;                        
	// }
#КонецВставки

	Если ЗначениеЗаполнено(Реквизиты.Автор) Тогда 
		Автор = Реквизиты.Автор;
	КонецЕсли;
	Если ЗначениеЗаполнено(Реквизиты.Важность) 
		И Реквизиты.Важность <> Перечисления.ВариантыВажностиОбъектов.Обычная Тогда 
		Важность = Реквизиты.Важность;
	КонецЕсли;

	Если ПредметОбъект = Неопределено
		И ЗначениеЗаполнено(Предмет) Тогда
		ПредметОбъект = Предмет.ПолучитьОбъект();
	КонецЕсли;

	// При переключении исполнения по пунктам, введенные руками пункты и исполнители должны быть удалены
	Если ПоПунктамНачальное <> ПоПунктам Тогда
		Участники.Очистить();
		Пункты.Очистить();
		Выгруженные = Участники.Выгрузить();
	Иначе
		Выгруженные = Участники.Выгрузить();
		Участники.Очистить();
	КонецЕсли;

	Источники.Очистить();

	// тут добавим только "Обрабатывающий результат"
	Для Каждого Выгруженный Из Выгруженные Цикл

		Если Выгруженный.ИзНастройки Тогда
			Продолжить;
		КонецЕсли;

		Если Выгруженный.ФункцияУчастника <> Перечисления.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат Тогда
			Продолжить;
		КонецЕсли;

		Участник = Участники.Добавить();
		ЗаполнитьЗначенияСвойств(Участник, Выгруженный);
	КонецЦикла;

	РазыменоватьПриСозданииДействия = ДействияСервер.РазыменоватьПриСозданииДействия(МоментРазыменованияУчастников);
	ТаблицаУчастники = Реквизиты.Участники.Выгрузить();
	ТаблицаУчастники.Сортировать("НомерСтроки");
	Для Каждого ВыборкаУчастники Из ТаблицаУчастники Цикл

		ЕстьТакойУчастник = Ложь;
		Если ВыборкаУчастники.ФункцияУчастника <> Перечисления.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат Тогда
			// Дубли ищем только внутри функции
			ЕстьУчастники = Участники.НайтиСтроки(Новый Структура("Участник, ФункцияУчастника, НаименованиеЗадачи, Описание",
			ВыборкаУчастники.Участник, ВыборкаУчастники.ФункцияУчастника,
			ВыборкаУчастники.НаименованиеЗадачи, ВыборкаУчастники.Описание));
			ЕстьТакойУчастник = Не ВыборкаУчастники.Защищенный 
			И (ЕстьУчастники.Количество() > 0);
		КонецЕсли;	

		Если Не ЕстьТакойУчастник Тогда

			// Проверим функцию ОбрабатывающийРезультат.
			// Если уже есть ОбрабатывающийРезультат - нового не добавляем
			Если ВыборкаУчастники.ФункцияУчастника = Перечисления.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат 
				И УчастникОбрабатывающийРезультат().Количество() <> 0 Тогда
				Продолжить;
			КонецЕсли;	

			// Проверка условий.
			Если РазыменоватьПриСозданииДействия 
				И Не РаботаСАлгоритмамиПроверки.АлгоритмПоПредметуВыполняется(ПредметОбъект, ВыборкаУчастники.Условие) Тогда
				Продолжить;
			КонецЕсли;

			Участник = Участники.Добавить();
			ЗаполнитьЗначенияСвойств(Участник, ВыборкаУчастники);
			Участник.ИзНастройки = Истина;
			Участник.Идентификатор = Новый УникальныйИдентификатор;

		КонецЕсли;

	КонецЦикла;

	Для Каждого Выгруженный Из Выгруженные Цикл

		Если Выгруженный.ИзНастройки Тогда
			Продолжить;
		КонецЕсли;

		// "Обрабатывающий результат" добавили ранее, тут не добавляем
		Если Выгруженный.ФункцияУчастника = Перечисления.ФункцииУчастниковИсполнения.ОбрабатывающийРезультат Тогда
			Продолжить;
		КонецЕсли;

		Участник = Участники.Добавить();
		ЗаполнитьЗначенияСвойств(Участник, Выгруженный);
	КонецЦикла;

	Если РазыменоватьПриСозданииДействия Тогда 
		Разыменовать(ПредметОбъект,, Выгруженные);
	КонецЕсли;

КонецПроцедуры
