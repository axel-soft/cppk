
&НаСервере
Процедура ЦППК_ПриСозданииНаСервереПеред(Отказ, СтандартнаяОбработка)

	//+ЦППК САНФ-023289, 02.02.2023
	// Добавление таблицы прикрепленных файлов и колонки Срок исполнения
	СоздатьДеревоПриложений();
	//-ЦППК
	
КонецПроцедуры

&НаКлиенте
Процедура ЦППК_СписокПриАктивизацииСтрокиПосле(Элемент) //+ЦППК САНФ-023289, 02.02.2023
	
	Если Элементы.Список.ТекущиеДанные <> Неопределено Тогда
		ОбновитьДеревоПриложенияНаСервере(Элементы.Список.ТекущиеДанные.Предмет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПриложенийВыбор(Элемент, СтандартнаяОбработка) //+ЦППК САНФ-023289, 02.02.2023
	
	ТекущиеДанныеСсылка = Элементы["ДеревоПриложений"].ТекущиеДанные.Ссылка;
	Если ТипЗнч(ТекущиеДанныеСсылка) = Тип("СправочникСсылка.Файлы") Тогда		
		
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаДляОткрытия(ТекущиеДанныеСсылка, Неопределено, 
		УникальныйИдентификатор);
				
		КомандыРаботыСФайламиКлиент.Открыть(ДанныеФайла, УникальныйИдентификатор);
		
		//ПоказатьЗначение(, ПолучитьФайлНаСервере()); 
	ИначеЕсли ТипЗнч(ТекущиеДанныеСсылка) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда	
		ПоказатьЗначение(, ТекущиеДанныеСсылка); 
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьФайлНаСервере(ФайлСсылка) //+ЦППК САНФ-023289, 02.02.2023
	
	Возврат РаботаСФайлами.ДвоичныеДанныеФайла(ФайлСсылка);
	
КонецФункции

&НаСервере
Процедура ОбновитьДеревоПриложенияНаСервере(ДействиеИсполнения) //+ЦППК САНФ-023289, 02.02.2023
	
	ДокументПредприятия = Неопределено;
	
	Если ТипЗнч(ДействиеИсполнения) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
		ДокументПредприятия = ДействиеИсполнения;
	ИначеЕсли ТипЗнч(ДействиеИсполнения) = Тип("СправочникСсылка.ДействияИсполнения") ИЛИ 
		ТипЗнч(ДействиеИсполнения) = Тип("СправочникСсылка.ДействияОзнакомления") ИЛИ
		ТипЗнч(ДействиеИсполнения) = Тип("СправочникСсылка.ДействияПодписания") ИЛИ
		ТипЗнч(ДействиеИсполнения) = Тип("СправочникСсылка.ДействияРегистрации") ИЛИ
		ТипЗнч(ДействиеИсполнения) = Тип("СправочникСсылка.ДействияСогласования") ИЛИ
		ТипЗнч(ДействиеИсполнения) = Тип("СправочникСсылка.ДействияУтверждения") Тогда
		ДокументПредприятия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДействиеИсполнения, "Предмет");
		
	ИначеЕсли ТипЗнч(ДействиеИсполнения) = Тип("БизнесПроцессСсылка.Исполнение") ИЛИ
		ТипЗнч(ДействиеИсполнения) = Тип("БизнесПроцессСсылка.Ознакомление") ИЛИ
		ТипЗнч(ДействиеИсполнения) = Тип("БизнесПроцессСсылка.Подписание") ИЛИ
		ТипЗнч(ДействиеИсполнения) = Тип("БизнесПроцессСсылка.Приглашение") ИЛИ
		ТипЗнч(ДействиеИсполнения) = Тип("БизнесПроцессСсылка.Рассмотрение") ИЛИ
		ТипЗнч(ДействиеИсполнения) = Тип("БизнесПроцессСсылка.Регистрация") ИЛИ
		ТипЗнч(ДействиеИсполнения) = Тип("БизнесПроцессСсылка.РешениеВопросовВыполненияЗадач") ИЛИ
		ТипЗнч(ДействиеИсполнения) = Тип("БизнесПроцессСсылка.Согласование") ИЛИ
		ТипЗнч(ДействиеИсполнения) = Тип("БизнесПроцессСсылка.Утверждение") Тогда
		ДокументПредприятия_ = ЦППК_ОбщийМодульКлиентСервер.ПолучитьДокументПредприятияПоБизнесПроцессу(Строка(ТипЗнч(ДействиеИсполнения)), ДействиеИсполнения);
		Если ТипЗнч(ДокументПредприятия_) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
			ДокументПредприятия = ДокументПредприятия_;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДействиеИсполнения) = Тип("БизнесПроцессСсылка.КомплексныйПроцесс") Тогда
		ДокументПредприятия_ = ЦППК_ОбщийМодульКлиентСервер.ПолучитьДокументПредприятияПоБизнесПроцессу("КомплексныйПроцесс", ДействиеИсполнения);
		Если ТипЗнч(ДокументПредприятия_) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
			ДокументПредприятия = ДокументПредприятия_;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДействиеИсполнения) = Тип("ДокументСсылка.Задача") Тогда 
		ДокументПредприятия = ЦППК_ОбщийМодульКлиентСервер.ПолучитьДокументПредприятияПоЗадаче(ДействиеИсполнения);
		
	ИначеЕсли ТипЗнч(ДействиеИсполнения) = Тип("ДокументСсылка.ДействиеЗадачи") Тогда 
		ДокументПредприятия = ЦППК_ОбщийМодульКлиентСервер.ПолучитьДокументПредприятияПоДействиюЗадачи(ДействиеИсполнения);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументПредприятия) Тогда
		ТЗ_ДеревоПриложений = РеквизитФормыВЗначение("ДеревоПриложений");
		ТЗ_ДеревоПриложений.Строки.Очистить();
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Файлы.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА Файлы.ТекущаяВерсияРасширение = ""png""
		|			ТОГДА 1
		|		КОГДА Файлы.ТекущаяВерсияРасширение = ""doc""
		|				ИЛИ Файлы.ТекущаяВерсияРасширение = ""docx""
		|			ТОГДА 2
		|		КОГДА Файлы.ТекущаяВерсияРасширение = ""xlsx""
		|				ИЛИ Файлы.ТекущаяВерсияРасширение = ""xls""
		|			ТОГДА 3
		|		КОГДА Файлы.ТекущаяВерсияРасширение = ""csv""
		|			ТОГДА 4
		|		КОГДА Файлы.ТекущаяВерсияРасширение = ""txt""
		|			ТОГДА 5
		|		КОГДА Файлы.ТекущаяВерсияРасширение = ""jpg""
		|				ИЛИ Файлы.ТекущаяВерсияРасширение = ""jpeg""
		|			ТОГДА 6
		|		КОГДА Файлы.ТекущаяВерсияРасширение = ""pdf""
		|			ТОГДА 7
		|	КОНЕЦ КАК ТипФайла
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|ГДЕ
		|	Файлы.ВладелецФайла = &ВладелецФайла
		|	И (&ОтображатьУдаленные
		|			ИЛИ НЕ Файлы.ПометкаУдаления)";
		
		Запрос.УстановитьПараметр("ВладелецФайла", ДокументПредприятия);
		Запрос.УстановитьПараметр("ОтображатьУдаленные", Ложь);
		
		СтрокаВладелец = ТЗ_ДеревоПриложений.Строки.Добавить();
		СтрокаВладелец.Ссылка = ДокументПредприятия;
		СтрокаВладелец.ТипФайла = ЗаполнитьКартинкуВСтрокуДерева(8);
		
		ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СтрокаФайл = СтрокаВладелец.Строки.Добавить();
			СтрокаФайл.Ссылка = ВыборкаДетальныеЗаписи.Ссылка;
			СтрокаФайл.ТипФайла = ЗаполнитьКартинкуВСтрокуДерева(ВыборкаДетальныеЗаписи.ТипФайла);
		КонецЦикла;
		
		// САНФ-035280  Котляров 22.07.2025 Рекурсивное заполнение
		ДокументыУчаствующиеВСвязях = Новый Массив;
		ДокументыУчаствующиеВСвязях.Добавить(ДокументПредприятия);
		РекурсивноеЗаполнениеСвязейДокументовИФайлов(СтрокаВладелец, ДокументыУчаствующиеВСвязях, 0);
		
		ЗначениеВРеквизитФормы(ТЗ_ДеревоПриложений, "ДеревоПриложений");
	КонецЕсли;
	
КонецПроцедуры

// Процедура - Рекурсивное заполнение связей документов и файлов
//
// Параметры:
//  СтрокаНачальныйВладелец		 - 	 Справочник.ДокументыПредприятия - Документ для которого получаются связи с другими. 
//  ДокументыУчаствующиеВСвязях	 - 	 Массив - Документы которые уже проходили по этому процессу, для исключения повторного прохождения 
//  УровеньРекурсии				 - 	 Число - Число - Насколько глубоко по связям ушли.
//
&НаСервереБезКонтекста
Процедура РекурсивноеЗаполнениеСвязейДокументовИФайлов(СтрокаНачальныйВладелец, ДокументыУчаствующиеВСвязях, УровеньРекурсии)
	// САНФ-035280  Котляров 22.07.2025 Рекурсивное заполнение
	УровеньРекурсии = УровеньРекурсии + 1;
	
	Если УровеньРекурсии > 2 Тогда 
		// ниже 2_его не идем
		УровеньРекурсии = УровеньРекурсии - 1;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СвязиОбъектов.СвязанныйОбъект КАК СвязанныйОбъект,
	|	Файлы.Ссылка КАК Файл,
	|	ВЫБОР
	|		КОГДА Файлы.ТекущаяВерсияРасширение = ""png""
	|			ТОГДА 1
	|		КОГДА Файлы.ТекущаяВерсияРасширение = ""doc""
	|				ИЛИ Файлы.ТекущаяВерсияРасширение = ""docx""
	|			ТОГДА 2
	|		КОГДА Файлы.ТекущаяВерсияРасширение = ""xlsx""
	|				ИЛИ Файлы.ТекущаяВерсияРасширение = ""xls""
	|			ТОГДА 3
	|		КОГДА Файлы.ТекущаяВерсияРасширение = ""csv""
	|			ТОГДА 4
	|		КОГДА Файлы.ТекущаяВерсияРасширение = ""txt""
	|			ТОГДА 5
	|		КОГДА Файлы.ТекущаяВерсияРасширение = ""jpg""
	|				ИЛИ Файлы.ТекущаяВерсияРасширение = ""jpeg""
	|			ТОГДА 6
	|		КОГДА Файлы.ТекущаяВерсияРасширение = ""pdf""
	|			ТОГДА 7
	|	КОНЕЦ КАК ТипФайла
	|ИЗ
	|	РегистрСведений.СвязиОбъектов КАК СвязиОбъектов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Файлы КАК Файлы
	|		ПО СвязиОбъектов.СвязанныйОбъект = Файлы.ВладелецФайла
	|			И (Файлы.ПометкаУдаления = ЛОЖЬ)
	|ГДЕ
	|	СвязиОбъектов.Объект = &Объект
	|ИТОГИ ПО
	|	СвязанныйОбъект";
	
	Запрос.УстановитьПараметр("Объект", СтрокаНачальныйВладелец.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаСвязанныйОбъект = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСвязанныйОбъект.Следующий() Цикл // выборка по документам
		
		Если ДокументыУчаствующиеВСвязях.Найти(ВыборкаСвязанныйОбъект.СвязанныйОбъект) = Неопределено Тогда // возможны обратные связи.
			СтрокаДокументПоСвязи = СтрокаНачальныйВладелец.Строки.Добавить();
			СтрокаДокументПоСвязи.Ссылка = ВыборкаСвязанныйОбъект.СвязанныйОбъект;
			СтрокаДокументПоСвязи.ТипФайла = ЗаполнитьКартинкуВСтрокуДерева(8);
			
			Выборка = ВыборкаСвязанныйОбъект.Выбрать();
			Пока Выборка.Следующий() Цикл // выборка по файлам связанного документа
				Если ЗначениеЗаполнено(Выборка.Файл) Тогда
					СтрокаФайл = СтрокаДокументПоСвязи.Строки.Добавить();
					СтрокаФайл.Ссылка = Выборка.Файл;
					СтрокаФайл.ТипФайла = ЗаполнитьКартинкуВСтрокуДерева(Выборка.ТипФайла);
				КонецЕсли;
			КонецЦикла;
			ДокументыУчаствующиеВСвязях.Добавить(ВыборкаСвязанныйОбъект.СвязанныйОбъект);
			
			// Вход глубже в рекурсию.
			РекурсивноеЗаполнениеСвязейДокументовИФайлов(СтрокаДокументПоСвязи, ДокументыУчаствующиеВСвязях, УровеньРекурсии);
		КонецЕсли;
		
	КонецЦикла;
	
	УровеньРекурсии = УровеньРекурсии - 1;
КонецПроцедуры


&НаСервереБезКонтекста
Функция ЗаполнитьКартинкуВСтрокуДерева(УсловноеЗначение = Неопределено) //+ЦППК САНФ-023289, 02.02.2023 

	Если УсловноеЗначение = 1 Тогда
		Картинка = БиблиотекаКартинок.ЦППК_PNG;
	ИначеЕсли УсловноеЗначение = 2 Тогда  
		Картинка = БиблиотекаКартинок.ЦППК_DOC;
	ИначеЕсли УсловноеЗначение = 3 Тогда  
		Картинка = БиблиотекаКартинок.ЦППК_XLS;
	ИначеЕсли УсловноеЗначение = 4 Тогда  
		Картинка = БиблиотекаКартинок.ЦППК_CSV;
	ИначеЕсли УсловноеЗначение = 5 Тогда  
		Картинка = БиблиотекаКартинок.ЦППК_TXT;
	ИначеЕсли УсловноеЗначение = 6 Тогда  
		Картинка = БиблиотекаКартинок.ЦППК_JPG;
	ИначеЕсли УсловноеЗначение = 7 Тогда  
		Картинка = БиблиотекаКартинок.ЦППК_PDF;		
	ИначеЕсли УсловноеЗначение = 8 Тогда  
		Картинка = БиблиотекаКартинок.ДокументПроведенКоннекторВерх;
	Иначе
		Картинка = "";
	КонецЕсли;
	
	Возврат Картинка;

КонецФункции

&НаСервере
Процедура СоздатьДеревоПриложений() //+ЦППК САНФ-023289, 02.02.2023

	МассивТипаВыбора = Новый Массив;
	МассивТипаВыбора.Добавить(Тип("ДеревоЗначений"));
	ОписаниеТипаВыбора = Новый ОписаниеТипов(МассивТипаВыбора);
	
	МассивРеквизитов = Новый Массив;
	МассивРеквизитов.Добавить(Новый РеквизитФормы("ДеревоПриложений", ОписаниеТипаВыбора, "", "ДеревоПриложений"));
	
	МассивТиповТипФайла = Новый Массив;
	МассивТиповТипФайла.Добавить("СправочникСсылка.Файлы");
	МассивТиповТипФайла.Добавить("СправочникСсылка.ДокументыПредприятия");
	
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	ОписаниеТиповДата = Новый ОписаниеТипов("Дата");
	ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");
	ОписаниеТиповПользователи = Новый ОписаниеТипов("СправочникСсылка.Пользователи");
	
	ТЗ_ДеревоПриложений = Новый ДеревоЗначений;
	ТЗ_ДеревоПриложений.Колонки.Добавить("ВладелецФайла");
	ТЗ_ДеревоПриложений.Колонки.Добавить("Ссылка", Новый ОписаниеТипов(МассивТиповТипФайла));
	ТЗ_ДеревоПриложений.Колонки.Добавить("ТипФайла", Новый ОписаниеТипов("Картинка"));
	
	Для Каждого Колонка Из ТЗ_ДеревоПриложений.Колонки Цикл
		МассивРеквизитов.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, "ДеревоПриложений"));
	КонецЦикла;
	
	ИмяКолонки = "ДатаИсполнения";
	//++AxelSoft Шарапова 16.05.2025 САНФ-033999 
	// Переименование колонки Срок исполнения на Дата исполнения
	МассивРеквизитов.Добавить(Новый РеквизитФормы(ИмяКолонки, ОписаниеТиповДата, "Исполнители", "Дата исполнения"));
	//--AxelSoft Шарапова 16.05.2025 САНФ-033999 
	
	// ++AxelSoft Котляров 06.08.2025 САНФ-035501  Колонка комментарий
	ИмяКолонкиКомментарий = "КомментарийЗадачи";
	МассивРеквизитов.Добавить(Новый РеквизитФормы(ИмяКолонкиКомментарий, ОписаниеТиповСтрока, "Исполнители", "Комментарий"));
	//-- AxelSoft Котляров 06.08.2025 САНФ-035501  Колонка комментарий
	ИзменитьРеквизиты(МассивРеквизитов);      
	
	МассивТЗ = Новый Массив;
	МассивТЗ.Добавить("ИсполнителиБезСостоянияОдин");
	МассивТЗ.Добавить("ИсполнителиБезСостоянияНесколько");
	МассивТЗ.Добавить("ИсполнителиССостояниемОдин");
	МассивТЗ.Добавить("Исполнители");
	
	Для каждого эл Из МассивТЗ Цикл
		НоваяКолонкаТаблицы = Элементы.Добавить(эл + ИмяКолонки, Тип("ПолеФормы"), Элементы[эл]);
		НоваяКолонкаТаблицы.Вид = ВидПоляФормы.ПолеНадписи;
		НоваяКолонкаТаблицы.ПутьКДанным = "Исполнители." + ИмяКолонки; 
		
		// ++AxelSoft Котляров 06.08.2025 САНФ-035501  Колонка комментарий
		НоваяКолонкаКомментарий = Элементы.Добавить(эл + ИмяКолонкиКомментарий, Тип("ПолеФормы"), Элементы[эл]);
		НоваяКолонкаКомментарий.Вид = ВидПоляФормы.ПолеНадписи;
		НоваяКолонкаКомментарий.ПутьКДанным = "Исполнители." + ИмяКолонкиКомментарий;
		// --AxelSoft Котляров 06.08.2025 САНФ-035501  Колонка комментарий
	КонецЦикла;
	
	элДеревоПриложений = Элементы.Добавить("ДеревоПриложений", Тип("ТаблицаФормы"), Элементы.ГруппаСведенияОКонтроле);
	элДеревоПриложений.ПутьКДанным = "ДеревоПриложений";
	элДеревоПриложений.Отображение = ОтображениеТаблицы.ИерархическийСписок;
	элДеревоПриложений.КоманднаяПанель.Видимость = Ложь;
	элДеревоПриложений.Высота = 1;	
	элДеревоПриложений.ПутьКДаннымКартинкиСтроки = "ДеревоПриложений.ТипФайла";
	
	элПолеДерево = Элементы.Добавить("ДеревоПриложенийСсылка", Тип("ПолеФормы"), элДеревоПриложений);
	элПолеДерево.Вид = ВидПоляФормы.ПолеВвода;
	элПолеДерево.Заголовок = "Прикрепленные файлы";
	элПолеДерево.ПутьКДанным = "ДеревоПриложений.Ссылка";
	элПолеДерево.КартинкаШапки = БиблиотекаКартинок.Скрепка;
	элПолеДерево.ТолькоПросмотр = Истина;
	
	элДеревоПриложений.УстановитьДействие("Выбор","ДеревоПриложенийВыбор");
		
КонецПроцедуры

&НаСервереБезКонтекста
&ИзменениеИКонтроль("ПолучитьДанныеКонтроля")
Функция ЦППК_ПолучитьДанныеКонтроля(КарточкаКонтроля)

	МассивИсполнителей = Новый Массив;

#Удаление
	Для Каждого Строка Из КарточкаКонтроля.Исполнители Цикл
		СтруктураИсполнителя = Новый Структура("Исполнитель, Состояние, Ответственный, Источник, Проконтролировано");
#КонецУдаления
#Вставка
	//Проблема с обновлением карточки контроля, у действий нет источника задачи,
	//поэтому статус возьмем напрямую из действия
	Запрос = Новый Запрос;	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СсылкаКонтроля.Предмет КАК Действие
	|ПОМЕСТИТЬ МассивДействий
	|ИЗ
	|	Справочник.Контроль КАК СсылкаКонтроля
	|ГДЕ
	|	СсылкаКонтроля.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СостоянияДействий.Действие КАК Действие,
	|	СостоянияДействий.Участник КАК Участник,
	|	ЕСТЬNULL(РезультатыДействий.Дата, СостоянияДействий.Дата) КАК Дата,
	|	ЕСТЬNULL(РезультатыДействий.Результат, НЕОПРЕДЕЛЕНО) КАК Результат,
	|	РезультатыДействий.РезультатТекстом КАК РезультатТекстом
	|ПОМЕСТИТЬ ВсеДействия
	|ИЗ
	|	РегистрСведений.СостоянияДействий КАК СостоянияДействий
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РезультатыДействий КАК РезультатыДействий
	|		ПО СостоянияДействий.Действие = РезультатыДействий.Действие
	|			И СостоянияДействий.ИдентификаторПункта = РезультатыДействий.ИдентификаторПункта
	|			И СостоянияДействий.ИдентификаторУчастника = РезультатыДействий.ИдентификаторУчастника
	|			И СостоянияДействий.Функция = РезультатыДействий.Функция
	|			И СостоянияДействий.Участник = РезультатыДействий.Участник
	|ГДЕ
	|	СостоянияДействий.Действие В
	|			(ВЫБРАТЬ
	|				МассивДействий.Действие
	|			ИЗ
	|				МассивДействий)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтрольИсполнители.Ссылка КАК Ссылка,
	|	КонтрольИсполнители.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА НЕ ДействиеЗадачи.РезультатДействия ЕСТЬ NULL
	|			ТОГДА ДействиеЗадачи.ДатаВыполнения
	|		КОГДА НЕ дЗадача.РезультатЗадачи ЕСТЬ NULL
	|			ТОГДА дЗадача.ДатаВыполнения
	|		ИНАЧЕ КонтрольИсполнители.ДатаИсполнения
	|	КОНЕЦ КАК ДатаИсполнения,
	|	дЗадача.Ссылка КАК дЗадача,
	|	ДействиеЗадачи.Ссылка КАК ДействиеЗадачи,
	|	ВЫБОР
	|		КОГДА НЕ КонтрольИсполнители.Источник = НЕОПРЕДЕЛЕНО
	|			ТОГДА ВЫБОР
	|					КОГДА КонтрольИсполнители.Источник ССЫЛКА Документ.ДействиеЗадачи
	|						ТОГДА ВЫРАЗИТЬ(ВЫРАЗИТЬ(КонтрольИсполнители.Источник КАК Документ.ДействиеЗадачи).РезультатДействияТекстом КАК СТРОКА)
	|					КОГДА КонтрольИсполнители.Источник ССЫЛКА Задача.ЗадачаИсполнителя
	|						ТОГДА ВЫРАЗИТЬ(ВЫРАЗИТЬ(КонтрольИсполнители.Источник КАК Задача.ЗадачаИсполнителя).РезультатВыполнения КАК СТРОКА)
	|					ИНАЧЕ ""Неизвестный тип источника""
	|				КОНЕЦ
	|		ИНАЧЕ ВсеДействия.РезультатТекстом
	|	КОНЕЦ КАК КомментарийЗадачи,
	|	ВЫРАЗИТЬ(КонтрольИсполнители.Источник КАК Задача.ЗадачаИсполнителя).РезультатВыполнения КАК РезультатВыполнения,
	|	ВсеДействия.РезультатТекстом КАК РезультатТекстом,
	|	КонтрольИсполнители.ДатаКонтроля КАК ДатаКонтроля,
	|	КонтрольИсполнители.Идентификатор КАК Идентификатор,
	|	ВЫБОР
	|		КОГДА НЕ ДействиеЗадачи.РезультатДействия ЕСТЬ NULL
	|			ТОГДА ДействиеЗадачи.РезультатДействия = ЗНАЧЕНИЕ(Справочник.РезультатыДействийЗадач.Выполнена)
	|		КОГДА НЕ дЗадача.РезультатЗадачи ЕСТЬ NULL
	|			ТОГДА дЗадача.РезультатЗадачи = ЗНАЧЕНИЕ(Справочник.РезультатыЗадач.Исполнено)
	|		ИНАЧЕ ЕСТЬNULL(КонтрольИсполнители.Исполнено, ЛОЖЬ)
	|	КОНЕЦ КАК Исполнено,
	|	КонтрольИсполнители.Исполнитель КАК Исполнитель,
	|	КонтрольИсполнители.Источник КАК Источник,
	|	КонтрольИсполнители.Ответственный КАК Ответственный,
	|	КонтрольИсполнители.Проконтролировано КАК Проконтролировано
	|ИЗ
	|	Справочник.Контроль.Исполнители КАК КонтрольИсполнители
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДействиеЗадачи КАК ДействиеЗадачи
	|		ПО КонтрольИсполнители.Источник = ДействиеЗадачи.Ссылка
	|			И (НЕ КонтрольИсполнители.Исполнено)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Задача КАК дЗадача
	|		ПО КонтрольИсполнители.Ссылка.Предмет = дЗадача.Ссылка
	|			И (НЕ КонтрольИсполнители.Исполнено)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВсеДействия КАК ВсеДействия
	|		ПО КонтрольИсполнители.Исполнитель = ВсеДействия.Участник
	|ГДЕ
	|	КонтрольИсполнители.Ссылка = &Ссылка";	
	
	// Котляров 13.08.2025 САНФ-035501
	Если ТипЗнч(КарточкаКонтроля.Предмет) = Тип("ДокументСсылка.Задача") Тогда
	
		Запрос.Текст = ТекстЗапросаДляКомментарияПоЗадаче();
	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка", КарточкаКонтроля);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Строка = РезультатЗапроса.Выбрать();

	Пока Строка.Следующий() Цикл
		СтруктураИсполнителя = Новый Структура("Исполнитель, Состояние, Ответственный, Источник, Проконтролировано, ДатаИсполнения, КомментарийЗадачи"); //+ЦППК САНФ-023289, 02.02.2023  ++ САНФ-035501
#КонецВставки
		СтруктураИсполнителя.Исполнитель = Строка.Исполнитель;
		СтруктураИсполнителя.Ответственный = Строка.Ответственный;
		СтруктураИсполнителя.Источник = Строка.Источник;
		СтруктураИсполнителя.Проконтролировано = Строка.Проконтролировано;
#Вставка
		СтруктураИсполнителя.ДатаИсполнения = Строка.ДатаИсполнения; //+ЦППК САНФ-023289, 02.02.2023 
		СтруктураИсполнителя.КомментарийЗадачи = Строка.КомментарийЗадачи;// ++ САНФ-035501 06.08.2025
#КонецВставки

		Состояние = "";
		Если ЗначениеЗаполнено(КарточкаКонтроля.Предмет) Тогда 
			Если ТипЗнч(КарточкаКонтроля.Предмет) = Тип("СправочникСсылка.ВеткиПереписки") Тогда 
				Если ТипЗнч(Строка.Источник) = Тип("ДокументСсылка.ВходящееПисьмо") Тогда 
					Состояние = НСтр("ru = 'Ответ получен'");
				ИначеЕсли ТипЗнч(Строка.Источник) = Тип("ДокументСсылка.ИсходящееПисьмо") Тогда 
					Состояние = НСтр("ru = 'Ответ не получен'");
				КонецЕсли;	
			ИначеЕсли ОбщегоНазначения.ЭтоБизнесПроцесс(КарточкаКонтроля.Предмет.Метаданные())
				Или ТипЗнч(КарточкаКонтроля.Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя")
				Или ТипЗнч(КарточкаКонтроля.Предмет) = Тип("ДокументСсылка.ДействиеЗадачи")
				Или ТипЗнч(КарточкаКонтроля.Предмет) = Тип("ДокументСсылка.Задача")
				Или ДействияКлиентСервер.ЭтоДействие(КарточкаКонтроля.Предмет) Тогда
				Если Строка.Исполнено Тогда 
					Состояние = НСтр("ru = 'Исполнено'");
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;
		СтруктураИсполнителя.Состояние = Состояние;

		МассивИсполнителей.Добавить(СтруктураИсполнителя);
	КонецЦикла;

	Результат = новый Структура;
	Результат.Вставить("МассивИсполнителей", МассивИсполнителей);
	Результат.Вставить("Описание", КарточкаКонтроля.Описание);

	Если ТипЗнч(КарточкаКонтроля.Предмет) = Тип("СправочникСсылка.ВеткиПереписки") Тогда 
		Результат.Вставить("Предмет", КарточкаКонтроля.Предмет.КорневоеПисьмо);
	Иначе
		Результат.Вставить("Предмет", КарточкаКонтроля.Предмет);	
	КонецЕсли;	
	Результат.Вставить("ПредметСтрокой", Контроль.СформироватьПредставлениеПредмета(Результат.Предмет));

	ВыводитьСостояние = Ложь;
	Если ЗначениеЗаполнено(КарточкаКонтроля.Предмет) Тогда 
		Если ТипЗнч(КарточкаКонтроля.Предмет) = Тип("СправочникСсылка.ВеткиПереписки")
			Или ОбщегоНазначения.ЭтоБизнесПроцесс(КарточкаКонтроля.Предмет.Метаданные()) 
			Или ТипЗнч(КарточкаКонтроля.Предмет) = Тип("ЗадачаСсылка.ЗадачаИсполнителя")
			Или ТипЗнч(КарточкаКонтроля.Предмет) = Тип("ДокументСсылка.Задача")
			Или ТипЗнч(КарточкаКонтроля.Предмет) = Тип("ДокументСсылка.ДействиеЗадачи")
			Или ДействияКлиентСервер.ЭтоДействие(КарточкаКонтроля.Предмет) Тогда
			ВыводитьСостояние = Истина; 
		КонецЕсли; 
	КонецЕсли;
	Результат.Вставить("ВыводитьСостояние", ВыводитьСостояние);

	// Хронометраж
	ДополнительныеРеквизиты = Новый Структура;
	СвойстваЭлементов = Новый Структура;

	ДатаНачалаХронометража = Неопределено;
	ДатаКонцаХронометража = Неопределено;
	ВключенХронометраж = Неопределено;
	ОпцияИспользоватьУчетВремени = Неопределено;
	ВидыРабот = Неопределено;
	СпособУказанияВремени = Неопределено;

	ПереключитьХронометражНеМеняяПодсказку = Новый Структура("Имя, Подсказка");

	ПереключитьХронометраж = Новый Структура("Доступность, Пометка");
	ПереключитьХронометраж.Доступность = Истина;

	УказатьТрудозатраты = Новый Структура("Доступность");
	УказатьТрудозатраты.Доступность = Истина;

	УчетВремени.ПроинициализироватьПараметрыУчетаВремени(
	ДатаНачалаХронометража,
	ДатаКонцаХронометража,
	ВключенХронометраж,
	ОпцияИспользоватьУчетВремени,
	КарточкаКонтроля,
	ВидыРабот,
	СпособУказанияВремени,
	ПереключитьХронометражНеМеняяПодсказку,
	ПереключитьХронометраж,
	УказатьТрудозатраты);

	СвойстваЭлементов.Вставить("ПереключитьХронометраж", Новый Соответствие);
	СвойстваЭлементов.Вставить("УказатьТрудозатраты", Новый Соответствие);

	СвойстваЭлементов.ПереключитьХронометраж.Вставить(
	"Доступность",
	ПереключитьХронометраж.Доступность);
	СвойстваЭлементов.ПереключитьХронометраж.Вставить(
	"Пометка",
	ПереключитьХронометраж.Пометка);
	СвойстваЭлементов.УказатьТрудозатраты.Вставить(
	"Доступность",
	УказатьТрудозатраты.Доступность);

	ДополнительныеРеквизиты.Вставить("ДатаНачалаХронометража", ДатаНачалаХронометража);
	ДополнительныеРеквизиты.Вставить("ДатаКонцаХронометража", ДатаКонцаХронометража);
	ДополнительныеРеквизиты.Вставить("ВключенХронометраж", ВключенХронометраж);
	ДополнительныеРеквизиты.Вставить("ОпцияИспользоватьУчетВремени", ОпцияИспользоватьУчетВремени);
	ДополнительныеРеквизиты.Вставить("ВидыРабот", ВидыРабот);
	ДополнительныеРеквизиты.Вставить("СпособУказанияВремени", СпособУказанияВремени);

	Результат.Вставить("ДополнительныеРеквизиты", ДополнительныеРеквизиты);
	Результат.Вставить("СвойстваЭлементов", СвойстваЭлементов);

	Возврат Результат;

КонецФункции 

&НаСервереБезКонтекста
Функция ТекстЗапросаДляКомментарияПоЗадаче()
	// ++AxelSoft Котляров 13.08.2025 САНФ-035501  Колонка комментарий
	
		Возврат "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтрольИсполнители.Ссылка КАК Ссылка,
	|	КонтрольИсполнители.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА НЕ ДействиеЗадачи.РезультатДействия ЕСТЬ NULL
	|			ТОГДА ДействиеЗадачи.ДатаВыполнения
	|		КОГДА НЕ дЗадача.РезультатЗадачи ЕСТЬ NULL
	|			ТОГДА дЗадача.ДатаВыполнения
	|		ИНАЧЕ КонтрольИсполнители.ДатаИсполнения
	|	КОНЕЦ КАК ДатаИсполнения,
	|	дЗадача.Ссылка КАК дЗадача,
	|	ДействиеЗадачи.Ссылка КАК ДействиеЗадачи,
	|	ЗадачаУчастники.ДействиеУчастника.РезультатДействияТекстом КАК КомментарийЗадачи,
	|	ВЫРАЗИТЬ(КонтрольИсполнители.Источник КАК Задача.ЗадачаИсполнителя).РезультатВыполнения КАК РезультатВыполнения,
	|	КонтрольИсполнители.ДатаКонтроля КАК ДатаКонтроля,
	|	КонтрольИсполнители.Идентификатор КАК Идентификатор,
	|	ВЫБОР
	|		КОГДА НЕ ДействиеЗадачи.РезультатДействия ЕСТЬ NULL
	|			ТОГДА ДействиеЗадачи.РезультатДействия = ЗНАЧЕНИЕ(Справочник.РезультатыДействийЗадач.Выполнена)
	|		КОГДА НЕ дЗадача.РезультатЗадачи ЕСТЬ NULL
	|			ТОГДА дЗадача.РезультатЗадачи = ЗНАЧЕНИЕ(Справочник.РезультатыЗадач.Исполнено)
	|		ИНАЧЕ ЕСТЬNULL(КонтрольИсполнители.Исполнено, ЛОЖЬ)
	|	КОНЕЦ КАК Исполнено,
	|	КонтрольИсполнители.Исполнитель КАК Исполнитель,
	|	КонтрольИсполнители.Источник КАК Источник,
	|	КонтрольИсполнители.Ответственный КАК Ответственный,
	|	КонтрольИсполнители.Проконтролировано КАК Проконтролировано
	|ИЗ
	|	Справочник.Контроль.Исполнители КАК КонтрольИсполнители
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ДействиеЗадачи КАК ДействиеЗадачи
	|		ПО (КонтрольИсполнители.Источник = ДействиеЗадачи.Ссылка)
	|			И (НЕ КонтрольИсполнители.Исполнено)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Задача КАК дЗадача
	|		ПО (КонтрольИсполнители.Ссылка.Предмет = дЗадача.Ссылка)
	|			И (НЕ КонтрольИсполнители.Исполнено)
	|		ПРАВОЕ СОЕДИНЕНИЕ Документ.Задача.Участники КАК ЗадачаУчастники
	|		ПО (ЗадачаУчастники.Ссылка = КонтрольИсполнители.Ссылка.Предмет)
	|			И (ЗадачаУчастники.Участник = КонтрольИсполнители.Исполнитель)
	|			И (ЗадачаУчастники.ВидУчастника = ЗНАЧЕНИЕ(Справочник.ВидыУчастниковЗадач.Исполнитель))
	|ГДЕ
	|	КонтрольИсполнители.Ссылка = &Ссылка";


	КонецФункции // ТекстЗапросаДляКомментарияПоЗадаче()
