
#Область ОбработчикиСобытийФормы

&НаСервере
&ИзменениеИКонтроль("ПриСозданииНаСервере")
Процедура ЦППК_ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ШаблоныДокументов.ВключитьКэшированиеРезультатовАвтоподстановок();
	
	КэшиНаВремяВызова.ПеренестиДокументыПредприятияФормаЭлемента(ПереносКэшаИзЧтенияВСоздание);
	
	ЭтоНовыйДокумент = Не ЗначениеЗаполнено(Объект.Ссылка);
	
	ЭтоМобильныйКлиент = ПараметрыСеанса.ЭтоМобильныйКлиент;
	
	// Кэшируемые значения
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	ЭтоПолноправныйПользователь = ПользователиСерверПовтИсп.ЭтоПолноправныйПользовательИБ();
	ТаймлистИспользуется = ТаймлистПовтИсп.ТаймлистИспользуется();
	ДоступноРаспознаваниеТаймлист = ТаймлистПовтИсп.ДоступноРаспознаваниеПоЗапросу();
	
	// Протоколирование работы пользователей
	ПротоколированиеРаботыСотрудников.ЗаписатьОткрытие(Объект.Ссылка);
	
	Делопроизводство.ОбработатьРеквизит(ЭтотОбъект, "Подготовил");
	
	ИспользоватьРолиФайлов = ПолучитьФункциональнуюОпцию("ИспользоватьРолиФайлов");
	
	ПолеPDFРаботаетВВебКлиенте = РаботаСPDFПовтИсп.ПолеPDFРаботаетВВебКлиенте(); 
	МаксимальноеЧислоСтраницДляПредпросмотра = ОбзорФайловСервер.МаксимальноеЧислоСтраницДляПредпросмотра();
	
	Если Параметры.Свойство("ЭтоЛегкаяПочта") Тогда
		НужноВыполнитьСопоставлениеЭП = Истина;
	КонецЕсли;
	
	Если ТипЗнч(Параметры.Основание) = Тип("Структура")
		И ТипЗнч(Параметры.Основание.Основание) <> Тип("Массив")Тогда
		Основание = Параметры.Основание.Основание;
		Если ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(Основание) Тогда
			НужноВыполнитьСопоставлениеЭП = Истина;
		КонецЕсли;
	КонецЕсли;	
	
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьСвязиОбъектов") Тогда
		Элементы.ГруппаСвязи.Видимость = Ложь;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПрочтенностьДокументов") Тогда
			Если РаботаСПрочтениями.УстановитьСвойствоПрочтен(Объект.Ссылка, Истина) Тогда	
				ОповеститьОПрочтении = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
	РегламентированныйУчетОбращений = ПолучитьФункциональнуюОпцию("РегламентированныйУчетОбращений");
	ИспользоватьШК = ПолучитьФункциональнуюОпцию("ИспользоватьШтрихкоды");
	ОграничиватьДоступностьПолейПоСостоянию = 
		ПолучитьФункциональнуюОпцию("ОграничиватьДоступностьПолейПоСостоянию") 
		И ПолучитьФункциональнуюОпцию("ИспользоватьСостоянияДокументов")
		И Не Пользователи.ЭтоПолноправныйПользователь();
	ВестиУчетСканКопийОригиналовДокументов = 
		ПолучитьФункциональнуюОпцию("ВестиУчетСканКопийОригиналовДокументов");
		
	// Категории данных
	ИспользоватьКатегорииДанных = ПолучитьФункциональнуюОпцию("ИспользоватьКатегорииДанных");
	ИспользоватьАвтоматическуюКатегоризациюДанных = 
		ПолучитьФункциональнуюОпцию("ИспользоватьАвтоматическуюКатегоризациюДанных");
	ИспользоватьПроверкуКатегорий = ПолучитьФункциональнуюОпцию("ИспользоватьКатегорииДанных");
	
	НачальнаяДатаРегистрации = Объект.ДатаРегистрации;
	НачальныйЧисловойНомер = Объект.ЧисловойНомер;
	
	ЭтоДелопроизводитель = РольДоступна("РегистрацияДокументовПредприятия") Или РольДоступна("ПолныеПрава");
	РольПолныеПрава = РольДоступна("ПолныеПрава");
	
	НастройкаИспользоватьОбзорДокументов = ХранилищеОбщихНастроек.Загрузить("НастройкиРаботыСДокументами", "ИспользоватьОбзорДокументов");
	Если НастройкаИспользоватьОбзорДокументов = Неопределено Тогда 
		ИспользоватьОбзорДокументов = Истина;
	Иначе
		ИспользоватьОбзорДокументов = НастройкаИспользоватьОбзорДокументов;
	КонецЕсли;	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ИспользоватьОбзорДокументов = Ложь;
	КонецЕсли;	
	
	СписокВсехРасширенийСканКопийОригиналов = 
		ФайловыеФункцииСлужебныйКлиентСервер.ОбщиеНастройкиРаботыСФайлами().СписокРасширенийСканКопийОригиналов;
	
	ИспользоватьПредпросмотрФайловОбщая = ПолучитьФункциональнуюОпцию("ИспользоватьПредпросмотрФайлов");
	ИспользоватьПредпросмотрФайловЛичная =
		ХранилищеОбщихНастроек.Загрузить("НастройкиРаботыСДокументами", "ИспользоватьПредпросмотрФайлов");
		
	Если ИспользоватьПредпросмотрФайловЛичная = Неопределено Тогда
		ИспользоватьПредпросмотрФайловЛичная = Истина;
	КонецЕсли;
	
	ИспользоватьПредпросмотрФайлов = 
		ИспользоватьОбзорДокументов И ИспользоватьПредпросмотрФайловОбщая И ИспользоватьПредпросмотрФайловЛичная;
		
	Элементы.ДеревоСвязейПредварительныйПросмотр.Видимость = 
		ИспользоватьПредпросмотрФайловОбщая И ИспользоватьПредпросмотрФайловЛичная;
		
	ИдентификаторКлиента = "";
	Если Параметры.Свойство("ИдентификаторКлиента") Тогда
		 
		ИдентификаторКлиента = Параметры.ИдентификаторКлиента;
		
		ПредпросмотрОфисныхФайлов = 
			ХранилищеОбщихНастроек.Загрузить(
			"НастройкиРаботыСДокументами/ПредпросмотрОфисныхФайлов", 
			ИдентификаторКлиента);	
		
		Если Не ЗначениеЗаполнено(ПредпросмотрОфисныхФайлов) Тогда
			ПредпросмотрОфисныхФайлов = Перечисления.ПредпросмотрОфисныхФайлов.ПустаяСсылка();
		КонецЕсли;			
		
	КонецЕсли;
	
	Если ТипЗнч(Параметры.Основание) = Тип("Структура")
		И ТипЗнч(Параметры.Основание.Основание) <> Тип("Массив")Тогда		
		Основание = Параметры.Основание.Основание;
	ИначеЕсли ТипЗнч(Параметры.Основание) <> Тип("Массив") Тогда
		Основание = Параметры.Основание;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Объект.Подготовил) 
		И Параметры.Свойство("Подготовил") И ЗначениеЗаполнено(Параметры.Подготовил) Тогда
		Объект.Подготовил = Параметры.Подготовил;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Подготовил) И Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.Подготовил = СотрудникиВызовСервера.ОсновнойСотрудникПользователя(ТекущийПользователь);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Основание) И
		ТипЗнч(Основание) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
		ОснованиеВидДокументаРодитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "ВидДокумента.Родитель");
	КонецЕсли;
	
	// Ввод нового
	Если Объект.Ссылка.Пустая() Тогда 
		СостояниеТекст = Строка(Перечисления.СостоянияДокументов.Проект);
		
		НеДействуетВСоответствии = Справочники.ДокументыПредприятия.ПустаяСсылка();
		НачальныйНеДействуетВСоответствии = НеДействуетВСоответствии;
		
		ПерепискаПоПредмету = Неопределено;
		НачальныйПерепискаПоПредмету = ПерепискаПоПредмету;
		
		Элементы.Обзор.Видимость = Ложь;
		Элементы.СтраницаФайлы.Видимость = Истина;
		
		УстановитьСрокИсполнения(Объект);
		
		ПредметПереписки = Неопределено;
		НачальныйПредметПереписки = ПредметПереписки;
		// При создании документа, показываем все действия
		ДействияПоказыватьВсе = Истина;
		Элементы.ДействияПоказатьВсе.Пометка = ДействияПоказыватьВсе;
#Вставка
		//Zayc + 11.05.2016 Заполняем поле для нового документа // для входящих
		Объект.ПретензионнаяКасса = ТекущийПользователь;	         
		//Zayc - 11.05.2016
#КонецВставки
		Делопроизводство.ЗаполнитьКэшВидаДокументаНаФорме(ЭтотОбъект, Объект.ВидДокумента);
	Иначе
		СостояниеТекст = Делопроизводство.ПолучитьСтроковоеПредставлениеСостояний(
			Объект.Ссылка);
		ДокументПодписан = ДействияСервер.ДокументПодписан(Объект.Ссылка);	
		
		ПерепискаПоПредмету = Неопределено;
		НачальныйПерепискаПоПредмету = ПерепискаПоПредмету;
		
		ПрочитатьСвязи();
		
		Элементы.ФормаЗаполнитьПоШаблону.Видимость = Ложь;
		ЕстьЗашифрованныеИлиЗанятыеФайлы = РаботаСФайламиВызовСервера.ЕстьЗашифрованныеИлиЗанятыеФайлы(Объект.Ссылка);
		
		Если ИспользоватьОбзорДокументов Тогда 
			Элементы.Обзор.Видимость = Истина;
			Элементы.СтраницаФайлы.Видимость = Ложь;
		Иначе	
			Элементы.Обзор.Видимость = Ложь;
			Элементы.СтраницаФайлы.Видимость = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Файлы
	
	ПоказыватьКолонкуРазмер = РаботаСФайламиВызовСервера.ПолучитьПоказыватьКолонкуРазмер();
	Если ПоказыватьКолонкуРазмер = Ложь Тогда
		Элементы.ТекущаяВерсияРазмер.Видимость = Ложь;
		Элементы.ТекущаяВерсияРазмерСоздание.Видимость = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда 
		Параметры.ДокументОснование = Параметры.ЗначениеКопирования;
		ДокументОснованиеПодписан = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Параметры.ДокументОснование, "ПодписанЭП");
		
		// Копирование рабочей группы
		РаботаСРабочимиГруппами.ДокументПриКопировании(ЭтотОбъект);
		ПодчиненныеФайлы = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(
			Параметры.ЗначениеКопирования, Ложь);
		
		Если ПодчиненныеФайлы.Количество() > 0 Тогда 
			Для Каждого ПодчиненныйФайл Из ПодчиненныеФайлы Цикл
				Если Делопроизводство.ФайлЯвляетсяОригиналом(ПодчиненныйФайл) Тогда 
					Продолжить;
				КонецЕсли;
				
				ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(ПодчиненныйФайл);
				АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ДанныеФайла, УникальныйИдентификатор);
				
				НоваяСтрока = ФайлыДобавленные.Добавить();
				
				МассивРоли = РегистрыСведений.РолиФайловДокументов.ПолучитьРолиФайла(ПодчиненныйФайл);
				Если МассивРоли.Количество() <> 0 Тогда
					НоваяСтрока.РольФайла = МассивРоли[0];
				КонецЕсли;	
				
				НоваяСтрока.Наименование = ДанныеФайла.ПолноеНаименованиеВерсии;
				НоваяСтрока.ПолныйПуть = АдресВременногоХранилища;
				НоваяСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(ДанныеФайла.Расширение);
				НоваяСтрока.ШаблонОснованиеДляСоздания = ПодчиненныйФайл.ШаблонОснованиеДляСоздания;
				НоваяСтрока.ДобавленИзШаблона = ЗначениеЗаполнено(НоваяСтрока.ШаблонОснованиеДляСоздания);
				
				Если ЗначениеЗаполнено(НоваяСтрока.ШаблонОснованиеДляСоздания) Тогда
					
					ОригинальноеИмя = РегистрыСведений.СведенияОФайлахДокументооборот.ПолучитьПризнак(
						ПодчиненныйФайл, "ОригинальноеИмя");
						
					Если ЗначениеЗаполнено(ОригинальноеИмя) Тогда
						НоваяСтрока.Наименование = ОригинальноеИмя;
					КонецЕсли;		
					
				КонецЕсли;	
				
				
			КонецЦикла;
			
			Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаТаблица;
			
			КоличествоФайловТаблицы = ФайлыДобавленные.Количество();
			КоличествоФайлов = КоличествоФайловТаблицы;
			Элементы.НаименованиеФайла.Заголовок = ДелопроизводствоКлиентСервер.КоличествоФайловВЗаголовок(КоличествоФайловТаблицы);
		КонецЕсли;
		
		// Копирование категорий данных
		Если ИспользоватьКатегорииДанных Тогда
			КатегорииИсточника = РаботаСКатегориямиДанных.ПолучитьКатегорииОбъекта(Параметры.ЗначениеКопирования);
			Для Каждого Категория Из КатегорииИсточника Цикл
				НоваяСтрока = СписокКатегорийДанных.Добавить();
				НоваяСтрока.Значение = Категория.Ссылка;
				НоваяСтрока.ПолноеНаименование = РаботаСКатегориямиДанных.ПолучитьПолныйПутьКатегорииДанных(Категория.Ссылка);
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ЗначениеЗаполнено(Параметры.Основание) Тогда // Ввод на основании
		
		Если ТипЗнч(Параметры.Основание) = Тип("Структура") Тогда
			ОснованиеДокумента = Параметры.Основание.Основание;
		Иначе
			ОснованиеДокумента = Параметры.Основание;
		КонецЕсли;
		
		Если ТипЗнч(ОснованиеДокумента) = Тип("Массив")
			И ОснованиеДокумента.Количество() > 0
			И ТипЗнч(ОснованиеДокумента[0]) = Тип("СправочникСсылка.Файлы") Тогда
			
			Для Каждого Файл Из ОснованиеДокумента Цикл  
				ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(Файл);
				АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ДанныеФайла, УникальныйИдентификатор);
				
				НоваяСтрока = ФайлыДобавленные.Добавить();
				НоваяСтрока.Наименование = ДанныеФайла.ПолноеНаименованиеВерсии;
				НоваяСтрока.ПолныйПуть = АдресВременногоХранилища;
				НоваяСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(ДанныеФайла.Расширение);
				НоваяСтрока.ДобавленИзШаблона = Ложь;
				Если АвтозаполнениеШаблоновФайловВызовСервера.ФайлНаходитсяВИерархииПапокШаблонов(Файл) Тогда
					НоваяСтрока.ШаблонОснованиеДляСоздания = Файл;
					НоваяСтрока.ДобавленИзШаблона = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаТаблица;
			КоличествоФайловТаблицы = ФайлыДобавленные.Количество();
			КоличествоФайлов = КоличествоФайловТаблицы;
			
		ИначеЕсли ТипЗнч(ОснованиеДокумента) <> Тип("СправочникСсылка.ДокументыПредприятия")
			И ТипЗнч(ОснованиеДокумента) <> Тип("ДокументСсылка.ЭлектронныйДокументВходящийЭДО") Тогда
			
			ПерепискаПоПредмету = ОснованиеДокумента;
			
			ПодчиненныеФайлы = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(
				ОснованиеДокумента, Ложь);

			Если ПодчиненныеФайлы.Количество() > 0 Тогда 
				Для Каждого ПодчиненныйФайл Из ПодчиненныеФайлы Цикл

					ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(ПодчиненныйФайл);
					АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ДанныеФайла, УникальныйИдентификатор);
					
					НоваяСтрока = ФайлыДобавленные.Добавить();
					НоваяСтрока.Наименование = ДанныеФайла.ПолноеНаименованиеВерсии;
					НоваяСтрока.ПолныйПуть = АдресВременногоХранилища;
					НоваяСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(ДанныеФайла.Расширение);
					НоваяСтрока.Расширение = ДанныеФайла.Расширение;
					НоваяСтрока.Размер = ДанныеФайла.Размер;
					НоваяСтрока.ДобавленИзШаблона = Ложь;
				КонецЦикла;
				
				Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаТаблица;
				КоличествоФайловТаблицы = ПодчиненныеФайлы.Количество();
				КоличествоФайлов = КоличествоФайловТаблицы;
				Элементы.НаименованиеФайла.Заголовок = ДелопроизводствоКлиентСервер.КоличествоФайловВЗаголовок(
					КоличествоФайловТаблицы);
			КонецЕсли;
			
			Если ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(ОснованиеДокумента) Тогда
				
				ПараметрыОповещения = Новый Структура;
				ПараметрыОповещения.Вставить("ИмяСобытия", "СозданДокументПредприятияНаОснованииПисьма");
				ПараметрыОповещения.Вставить("ПараметрСобытия", ОснованиеДокумента);
				Параметры.ПисьмоОснование = ОснованиеДокумента;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ОснованиеДокумента) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
			РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОснованиеДокумента,
				"ВидДокумента.ЯвляетсяВходящейКорреспонденцией, 
				|ВидДокумента.ЯвляетсяИсходящейКорреспонденцией");
			Если (ВидДокументаКэш.ЯвляетсяВходящейКорреспонденцией 
				Или ВидДокументаКэш.ЯвляетсяИсходящейКорреспонденцией) Тогда	
				
				Если РеквизитыОснования.ВидДокументаЯвляетсяВходящейКорреспонденцией = Истина 
					Или РеквизитыОснования.ВидДокументаЯвляетсяИсходящейКорреспонденцией = Истина Тогда 
					
					ВОтветНа = ОснованиеДокумента;
					СписокВОтветНа.Добавить(ОснованиеДокумента);
					РеквизитыВОтветНа = РаботаСКорреспонденцией.РеквизитыОтправителяДокументовКорреспонденции(
						СписокВОтветНа).Выбрать();
					Пока РеквизитыВОтветНа.Следующий() Цикл
						ВОтветНаСтрока = РаботаСКорреспонденцией.ПредставлениеДокументаКорреспонденции(
							РеквизитыВОтветНа, НСтр("ru = '№ %1 от %2'"), 
							ВидДокументаКэш.ЯвляетсяВходящейКорреспонденцией);
					КонецЦикла;
					
					ПредметыПереписки = СвязиОбъектов.ПолучитьСвязанныеОбъекты(ОснованиеДокумента,
						Справочники.ТипыСвязей.ПредметПереписки);
					СписокПредметовПереписки.ЗагрузитьЗначения(ПредметыПереписки);
					Если ПредметыПереписки.Количество() Тогда
						ПредметПереписки = ПредметыПереписки[0];
					КонецЕсли;
#Вставка     
					ТипСвязиВыбран = Истина;
#КонецВставки
				Иначе
					ПредметПереписки = ОснованиеДокумента;
					СписокПредметовПереписки.Добавить(ОснованиеДокумента);
				КонецЕсли;
			КонецЕсли;
			
			НесколькоПредметовПереписки = СписокПредметовПереписки.Количество() > 1;
			ПереноситьФайлы = Истина;
			Если (РеквизитыОснования.ВидДокументаЯвляетсяВходящейКорреспонденцией = Истина 
				И ВидДокументаКэш.ЯвляетсяИсходящейКорреспонденцией)
				Или ВидДокументаКэш.ЯвляетсяВходящейКорреспонденцией
				Или (Не РеквизитыОснования.ВидДокументаЯвляетсяВходящейКорреспонденцией
					И Не РеквизитыОснования.ВидДокументаЯвляетсяИсходящейКорреспонденцией
					И Не ВидДокументаКэш.ЯвляетсяИсходящейКорреспонденцией) Тогда 
				ПереноситьФайлы = Ложь;
			КонецЕсли;
			
			Если ПереноситьФайлы Тогда
				// Файлы тоже переносим
				ПодчиненныеФайлы = РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(
					ОснованиеДокумента, Ложь);
	
				Если ПодчиненныеФайлы.Количество() > 0 Тогда 
					Для Каждого ПодчиненныйФайл Из ПодчиненныеФайлы Цикл
	
						ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайла(ПодчиненныйФайл);
						АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ДанныеФайла, УникальныйИдентификатор);
						
						НоваяСтрока = ФайлыДобавленные.Добавить();
						НоваяСтрока.Наименование = ДанныеФайла.ПолноеНаименованиеВерсии;
						НоваяСтрока.ПолныйПуть = АдресВременногоХранилища;
						НоваяСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(ДанныеФайла.Расширение);
						НоваяСтрока.ДобавленИзШаблона = Ложь;
						
						МассивРоли = РегистрыСведений.РолиФайловДокументов.ПолучитьРолиФайла(ПодчиненныйФайл);
						Если МассивРоли.Количество() <> 0 Тогда  // это роли в старом документе
							
							НоваяСтрока.РольФайла = МассивРоли[0];
							
							Если ВидДокументаКэш.РолиФайлов.Количество() = 0 Тогда
								НоваяСтрока.РольФайла = Неопределено;
							Иначе
									
								ЕстьРольВНовомДокументе = Ложь;	
								Для Каждого ОписаниеРоли Из ВидДокументаКэш.РолиФайлов Цикл
									Если ОписаниеРоли.Роль = НоваяСтрока.РольФайла Тогда
										ЕстьРольВНовомДокументе = Истина;
										Прервать;
									КонецЕсли;	
								КонецЦикла;	

								Если Не ЕстьРольВНовомДокументе Тогда
									НоваяСтрока.РольФайла = ВидДокументаКэш.РолиФайлов[0].Роль;
								КонецЕсли;	
									
							КонецЕсли;	    
							
						Иначе	
							
							// это роли в новом документе
							Если ВидДокументаКэш.РолиФайлов.Количество() <> 0 Тогда
								НоваяСтрока.РольФайла = ВидДокументаКэш.РолиФайлов[0].Роль;
							КонецЕсли;	
							
						КонецЕсли;	
						
					КонецЦикла;
					
					Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаТаблица;
					КоличествоФайловТаблицы = ПодчиненныеФайлы.Количество();
					КоличествоФайлов = КоличествоФайловТаблицы;
					Элементы.НаименованиеФайла.Заголовок = ДелопроизводствоКлиентСервер.КоличествоФайловВЗаголовок(
						КоличествоФайловТаблицы);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Параметры.Свойство("МассивФайлов") Тогда
		МассивФайлов = Параметры.МассивФайлов;
		Если МассивФайлов.Количество() <> 0 Тогда
			Для Каждого ФайлПринятый Из МассивФайлов Цикл
				Файл = Новый Файл(ФайлПринятый);
				НоваяСтрока = ФайлыДобавленные.Добавить();
				НоваяСтрока.Наименование = Файл.ИмяБезРасширения;
				НоваяСтрока.ПолныйПуть = ФайлПринятый;
				НоваяСтрока.ИндексКартинки = ФайловыеФункцииКлиентСервер.ПолучитьИндексПиктограммыФайла(Файл.Расширение);
				НоваяСтрока.ДобавленИзШаблона = Ложь;
			КонецЦикла;
			
			Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаТаблица;
			
			КоличествоФайловТаблицы = МассивФайлов.Количество();
			КоличествоФайлов = КоличествоФайловТаблицы;
			Элементы.НаименованиеФайла.Заголовок = ДелопроизводствоКлиентСервер.КоличествоФайловВЗаголовок(
				КоличествоФайловТаблицы);
			
			Если МассивФайлов.Количество() = 1 Тогда
				Файл = Новый Файл(МассивФайлов[0]);
				Объект.Заголовок = Файл.ИмяБезРасширения;
			КонецЕсли;
			
		КонецЕсли;

	ИначеЕсли Параметры.Свойство("Вложения") Тогда
		Вложения = Параметры.Вложения;
		Если Вложения.Количество() <> 0 Тогда
			Для Каждого ФайлПринятый Из Вложения Цикл
				
				НоваяСтрока = ФайлыДобавленные.Добавить();
				НоваяСтрока.Наименование = ФайлПринятый.Имя;
				НоваяСтрока.Расширение = ФайлПринятый.Расширение;
				НоваяСтрока.Адрес = ФайлПринятый.Адрес;
				НоваяСтрока.Размер = ФайлПринятый.Размер;
				НоваяСтрока.ИндексКартинки = ФайлПринятый.ИндексКартинки;
				НоваяСтрока.ДобавленИзШаблона = Ложь;
				
			КонецЦикла;
			
			Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаТаблица;
			
			КоличествоФайловТаблицы = Вложения.Количество();
			КоличествоФайлов = КоличествоФайловТаблицы;
			Элементы.НаименованиеФайла.Заголовок = ДелопроизводствоКлиентСервер.КоличествоФайловВЗаголовок(
				КоличествоФайловТаблицы);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Параметры.Свойство("Идентификатор") Тогда
		ИдентификаторПисьма = Параметры.Идентификатор;
		ЗагруженИзПочты = Истина;
	КонецЕсли;	
	Если Параметры.Свойство("Тема") Тогда
		Объект.Заголовок = Параметры.Тема;
	КонецЕсли;	
	
	КомуПереданДокумент = Делопроизводство.СтрокаКомуПереданДокумент(Объект.Ссылка);
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаСвойства");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// Обработчик подсистемы "ВерсионированиеОбъектов"
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	
	ОбновитьПолныйПуть();
	
	Если Не ЭлектроннаяПодпись.ИспользоватьЭлектронныеПодписи() Тогда
		Элементы.ФайлыПодписанЗашифрован.Видимость = Ложь;
	Иначе
		ЗаполнитьСписокПодписей(Истина); // Истина - ИзПриСозданииНаСервере
	КонецЕсли;
		
	// Статьи ДДС.
	Если ТипЗнч(Основание) = Тип("СправочникСсылка.ДокументыПредприятия")
		И ЗначениеЗаполнено(Основание) Тогда
		ПрочитатьСтатьиДДС(Основание);
	Иначе
		ПрочитатьСтатьиДДС(Параметры.ДокументОснование);
	КонецЕсли;
	
	// Срок действия
	СрокДействияПриСозданииНаСервере();
	
	Если ЗначениеЗаполнено(Объект.ВидДокумента) Тогда 
		Если ВидДокументаКэш.УчитыватьНедействующиеДокументы
			И ВидДокументаКэш.ЯвляетсяДоговором Тогда
			Элементы.НеДействует.Заголовок = НСтр("ru = 'Расторгнут'");
		КонецЕсли;
		Элементы.Проект.АвтоОтметкаНезаполненного = ВидДокументаКэш.ОбязательноУказаниеПроекта;
	КонецЕсли;
	
	Если Объект.НеДействует Тогда
		
		Элементы.ДатаОкончанияДействия.Видимость = Истина;
		Элементы.НеДействуетВСоответствии.Доступность = Истина;
		Элементы.НеДействуетВСоответствииСтрока.Доступность = Истина;
		Элементы.НеДействуетВСоответствииСтрока.Видимость = ЗначениеЗаполнено(НеДействуетВСоответствии);
		
	ИначеЕсли Не Объект.НеДействует И ЗначениеЗаполнено(НеДействуетВСоответствии) Тогда
			
		// пока текущ документ еще действует, но уже есть новый документ	
		
		РеквизитыСвязанного 
			= ОбщегоНазначенияДокументооборот.ЗначенияРеквизитовОбъектаВПривилегированномРежиме(
				НеДействуетВСоответствии, "ПометкаУдаления, Наименование");
		ПометкаУдаленияСвязанного = РеквизитыСвязанного.ПометкаУдаления;
		
		Элементы.ДатаОкончанияДействия.Видимость = Ложь;
			
		Если ПометкаУдаленияСвязанного = Ложь Тогда
		
			Элементы.НеДействуетВСоответствии.Доступность = Истина;
			Элементы.НеДействуетВСоответствии.ТолькоПросмотр = Истина;
			Элементы.НеДействуетВСоответствииСтрока.Доступность = Истина;
			Элементы.НеДействуетВСоответствииСтрока.ТолькоПросмотр = Истина;
			
			Элементы.ДекорацияГотовитсяКОтмене.Видимость = Истина;
			Элементы.НеДействует.Видимость = Ложь;
			НеДействуетВСоответствииСтрока = РеквизитыСвязанного.Наименование;
		Иначе
			
			НеДействуетВСоответствии = Неопределено; // помеченный на удаление - очистим
			НеДействуетВСоответствииСтрока = "";
			
		КонецЕсли;	
		
	Иначе	
		
		Элементы.ДатаОкончанияДействия.Видимость = Ложь;
		Элементы.НеДействует.Видимость = ВидДокументаКэш.УчитыватьНедействующиеДокументы; //Ложь;
		Элементы.ДекорацияГотовитсяКОтмене.Видимость = Ложь;
		Элементы.НеДействуетВСоответствииСтрока.Видимость = Ложь;
		
	КонецЕсли; 
	
#Вставка
	Если Объект.ЦППК_Изменен И ВидДокументаКэш.ЦППК_УчитыватьВноситИзменения Тогда
		// Котляров 2025,07,10 САНФ-034810 QR-7259012-1
		Элементы.ИзмененВСоответствии.Доступность = Истина;
		Элементы.ИзмененВСоответствии.КнопкаВыпадающегоСписка = Ложь;
		Элементы.ИзмененВСоответствии.Видимость = Истина;
		Элементы.Изменен.Видимость = Истина;
		
	Иначе	
		Если Элементы.Найти("ИзмененВСоответствии") <> Неопределено Тогда
			Элементы.ИзмененВСоответствии.Видимость = Ложь;
			Элементы.Изменен.Видимость = ВидДокументаКэш.ЦППК_УчитыватьВноситИзменения; //Ложь;
		КонецЕсли;	
	КонецЕсли; 

#КонецВставки	
	
	// Чтение категорий данных	
	Если ИспользоватьКатегорииДанных Тогда
		ПредопределенныеВсеКатегории = Справочники.КатегорииДанных.ВсеКатегории;
		СписокКатегорийДанныхЗначение = РеквизитФормыВЗначение("СписокКатегорийДанных");
		РаботаСКатегориямиДанных.ЗагрузитьДанныеОКатегориях(Элементы, Объект, СписокКатегорийДанныхЗначение, ИспользоватьАвтоматическуюКатегоризациюДанных, Параметры); 
		ЗначениеВРеквизитФормы(СписокКатегорийДанныхЗначение, "СписокКатегорийДанных"); 
		Если РольДоступна(Метаданные.Роли.ПроверкаКатегорий) Тогда
			Если ИспользоватьАвтоматическуюКатегоризациюДанных Тогда
				АвтоматическаяКатегоризацияВыполнена = РаботаСКатегориямиДанных.ПолучитьФлагВыполненияАвтоматическойКатегоризации(Объект.Ссылка);
				Если АвтоматическаяКатегоризацияВыполнена Тогда
					Элементы.ГруппаАвтоКатегоризация.ТекущаяСтраница = Элементы.ГруппаАвтоКатегоризацияВыполнена;
				Иначе
					Элементы.ГруппаАвтоКатегоризация.ТекущаяСтраница = Элементы.ГруппаАвтоКатегоризацияНеВыполнена;
				КонецЕсли;
			Иначе
				Элементы.ГруппаАвтоКатегоризация.Видимость = Ложь;
			КонецЕсли;
			Если ИспользоватьПроверкуКатегорий Тогда
				КатегорииПроверены = РаботаСКатегориямиДанных.ПолучитьФлагПроверкиКатегорийОбъекта(Объект.Ссылка);
				Если КатегорииПроверены Тогда
					Элементы.ГруппаПроверкаКатегорий.ТекущаяСтраница = Элементы.ГруппаКатегорииПроверены;
				Иначе
					Элементы.ГруппаПроверкаКатегорий.ТекущаяСтраница = Элементы.ГруппаКатегорииНеПроверены;
				КонецЕсли;
			Иначе
				Элементы.ГруппаПроверкаКатегорий.Видимость = Ложь;
			КонецЕсли;
		Иначе
			Элементы.ГруппаАвтоКатегоризация.Видимость = Ложь;
			Элементы.ГруппаПроверкаКатегорий.Видимость = Ложь;
		КонецЕсли;
	Иначе
		Элементы.Категории.Видимость = Ложь;
	КонецЕсли;
	
	ПараметрШаблонДокумента = Параметры.ШаблонДокумента;
	Если Не ЗначениеЗаполнено(ПараметрШаблонДокумента) Тогда
		ПараметрШаблонДокумента = Объект.Шаблон;
	КонецЕсли;
	
	Если Параметры.Свойство("ТематикаДокумента")
		И ЗначениеЗаполнено(Параметры.ТематикаДокумента)
		И Не ЗначениеЗаполнено(Объект.Тематика) Тогда 
		Объект.Тематика = Параметры.ТематикаДокумента;
	КонецЕсли;
	
	ВидИТематикаТекст = СокрЛП(Объект.ВидДокумента);
	Если ВидДокументаКэш.ВестиУчетПоТематикам Тогда 
		Элементы.ВидИТематикаТекст.Подсказка = НСтр("ru = 'Вид и тематика документа'");
		
		Если ЗначениеЗаполнено(Объект.Тематика) Тогда 
			ВидИТематикаТекст = СтрШаблон("%1 - %2",
				СокрЛП(Объект.ВидДокумента), СокрЛП(Объект.Тематика));
		КонецЕсли;
	Иначе 
		Элементы.ВидИТематикаТекст.Подсказка = НСтр("ru = 'Вид документа'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрШаблонДокумента) И Не РольДоступна("ПолныеПрава") Тогда 
		
		РеквизитыШаблона = ОбщегоНазначенияДокументооборот.ЗначенияРеквизитовОбъектаВПривилегированномРежиме(
			ПараметрШаблонДокумента,
			"ЗапретитьРедактироватьФайлы, ЗапретитьУдалятьФайлы, ЗапретитьИзменятьРеквизитыИзШаблона,
			|Контрагенты, Стороны");
		
		ЗапретитьРедактироватьФайлы = РеквизитыШаблона.ЗапретитьРедактироватьФайлы;
		ЗапретитьУдалятьФайлы = РеквизитыШаблона.ЗапретитьУдалятьФайлы;
		ЗапретитьИзменятьРеквизитыИзШаблона = РеквизитыШаблона.ЗапретитьИзменятьРеквизитыИзШаблона;
		
		Для Каждого КонтрагентШаблона Из РеквизитыШаблона.Контрагенты.Выгрузить() Цикл
			СтрокаКонтрагентыШаблона = КонтрагентыШаблона.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаКонтрагентыШаблона, КонтрагентШаблона);
			СтрокаКонтрагентыШаблона.СпособОтправки = КонтрагентШаблона.Способ;
		КонецЦикла;
		
		Для Каждого СторонаШаблона Из РеквизитыШаблона.Стороны.Выгрузить() Цикл
			СтрокаСтороныШаблона = СтороныШаблона.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСтороныШаблона, СторонаШаблона);
			СтрокаСтороныШаблона.Подписал = СторонаШаблона.Подписант;
		КонецЦикла;
		
		Если ЗапретитьУдалятьФайлы Тогда
			Элементы.ФайлыДобавленныеУдалить.Доступность = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	ВестиУчетПоКонтрагентам = Ложь;
	ВестиУчетПоОрганизациям = Ложь;
	
	ВариантПодписания = Перечисления.ВариантыПодписания.НеПодписывается;
	
	Если Параметры.ШаблонДокумента <> Неопределено Тогда
		
		ИзменениеВидаДокументаОбработано = Ложь;
		
		Если Не Параметры.ЗаполнятьРеквизитыДоСоздания Тогда
			
			ДокументОбъект = РеквизитФормыВЗначение("Объект");
			ШаблоныДокументов.ЗаполнитьРеквизитыДокументаПоШаблону(Параметры.ШаблонДокумента, ДокументОбъект);
			ЗначениеВРеквизитФормы(ДокументОбъект, "Объект");
			
			ПриИзмененииВидаДокумента(Истина);
			ИзменениеВидаДокументаОбработано = Истина;
			
			Если ВидДокументаКэш.ВестиУчетСторон
				И Параметры.ЗначенияЗаполнения.Свойство("Контрагент") Тогда
					ДобавитьСторону(Параметры.ЗначенияЗаполнения.Контрагент,,1);
			КонецЕсли;
			
			УправлениеСвойствами.ЗаполнитьДополнительныеРеквизитыВФорме(ЭтотОбъект);
			
		КонецЕсли;
		
		// файлы - после заполнения документа по шаблону (чтобы имя документа уже было)
		ШаблоныДокументов.ЗаполнитьФайлыДокументаПоШаблону(
			Параметры.ШаблонДокумента, ФайлыДобавленные, Ложь, Объект);
		КоличествоФайлов = ФайлыДобавленные.Количество();
		Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаТаблица;
		Элементы.НаименованиеФайла.Заголовок = 
			ДелопроизводствоКлиентСервер.КоличествоФайловВЗаголовок(КоличествоФайлов);
		
		Если СтатьиДвиженияДенежныхСредств.Количество() = 0 Тогда
			ШаблоныДокументов.ЗаполнитьСтатьиДДСДокументаПоШаблону(Параметры.ШаблонДокумента,
				СтатьиДвиженияДенежныхСредств, Объект.Сумма, Объект.СуммаНДС);
		КонецЕсли;
		
		Если Не ИзменениеВидаДокументаОбработано Тогда
			ПриИзмененииВидаДокумента(Истина);
		КонецЕсли;
		
		Элементы.РедактироватьДобавленныйФайл.Видимость = Истина;
		Элементы.РедактироватьДобавленныйФайлКонтекст.Видимость = Истина;
		
		// Рабочие группы
		Объект.Шаблон = Параметры.ШаблонДокумента;
		
		// Регламентированный учет обращений
		Если Параметры.Свойство("ТаблицаВопросы") Тогда
			РаботаСОбращениямиВызовСервера.ЗаполнитьВопросыДокумента(ЭтотОбъект, Параметры.ТаблицаВопросы);
		КонецЕсли;
		// Конец Регламентированный учет обращений
	Иначе
		
		//Копирование дополнительных реквизитов основания 
		Если ЗначениеЗаполнено(Основание) 
			И ТипЗнч(Основание) = Тип("СправочникСсылка.ДокументыПредприятия")
			И ЭтаФорма.Свойства_ИспользоватьСвойства Тогда
			
			Для Каждого Реквизит Из Основание.ДополнительныеРеквизиты Цикл
				СтруктураПоиска = Новый Структура("Свойство", Реквизит.Свойство);
				МассивСтрок = ЭтаФорма.Свойства_ОписаниеДополнительныхРеквизитов.НайтиСтроки(СтруктураПоиска);
				Если МассивСтрок.Количество() > 0 Тогда
					НоваяСтрока = МассивСтрок[0];
					ЭтаФорма[НоваяСтрока.ИмяРеквизитаЗначение] = Реквизит.Значение;
				КонецЕсли;
			КонецЦикла;
			ОбновитьЭлементыДополнительныхРеквизитов();
		КонецЕсли;
		
		Делопроизводство.ЗаполнитьСписокВыбораФормыДокумента(ЭтотОбъект);
		ФормаДокументаПриОткрытии = Объект.ФормаДокумента;
	КонецЕсли;
	
	Если ТипЗнч(ОснованиеДокумента) = Тип("ДокументСсылка.ЭлектронныйДокументВходящийЭДО") Тогда
		
		ЗаполнитьРеквизитыПриОтраженииВходящегоЭДО();
		
	КонецЕсли;
	
	Если Параметры.Свойство("Текст") Тогда
		Объект.Содержание = Объект.Содержание + Символы.ПС + Параметры.Текст;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Объект.ВидДокумента) Тогда 
		ВестиУчетПоКонтрагентам = ВидДокументаКэш.ВестиУчетПоКонтрагентам;
		ВестиУчетПоОрганизациям = ВидДокументаКэш.ВестиУчетПоОрганизациям;
		ВариантПодписания = ВидДокументаКэш.ВариантПодписания; 
		ЯвляетсяЗаявкойНаОплату = ВидДокументаКэш.ЯвляетсяЗаявкойНаОплату;
	КонецЕсли;
	
	УстановитьВидимостьКомандыСозданияИсходящегоДокументаЭДО();
	
#Вставка
	
	Если Объект.ВидДокумента.ТТС_ЯвляетсяЖурналомТУ Тогда
		
		Если ЗначениеЗаполнено(Параметры.Основание) И ОснованиеДокумента.ВидДокумента.ТТС_ЯвляетсяЖурналомТУ Тогда
			
			ТТС_ЖурналыТУВызовСервера.ВводНаОсновании(ЭтаФорма, ОснованиеДокумента, Параметры.ТТС_ИДСтрокиЖурнала);
			Объект.Заголовок = Объект.Заголовок + " " + ЭтаФорма["ТТС_ДанныеЖурнала"][0].Направление;
			
			Если ОбязательныеТипыСвязей.Количество() <> 0
				И ОбязательныеТипыСвязей.Количество() <> ОбязательныеСвязи.Количество()
				И ЧислоПользовательскихСвязей <= 1
				И ОбязательныеТипыСвязей.Количество() = 1 
				И ТипЗнч(Основание) = Тип("СправочникСсылка.ДокументыПредприятия") 	
				И ЗначениеЗаполнено(Основание) Тогда
				
				Строка = ОбязательныеТипыСвязей[0];
				
				Если ОснованиеВидДокумента = Строка.СсылкаНа
					Или ОснованиеВидДокументаРодитель = Строка.СсылкаНа Тогда
					
					НоваяСтрока = ОбязательныеСвязи.Добавить();
					НоваяСтрока.ТипСвязи = Строка.ТипСвязи;
					НоваяСтрока.СсылкаНа = Строка.СсылкаНа;
					НоваяСтрока.СвязанныйОбъект = Основание;
					НоваяСтрока.НужноЗаписать = Истина;
					
					ОкноВыбораТипаСвязиПоказано = Истина;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;  
	Иначе
		Элементы.ТТС_ДанныеЖурналов.Видимость = Ложь;
	КонецЕсли;
	
#КонецВставки

	// Рабочие группы
	РаботаСРабочимиГруппами.ПриСозданииНаСервере(ЭтотОбъект);
	
	// Шаблоны автозапуска
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТолькоЧтоСозданныйДокумент = Истина;
	КонецЕсли;
	
	Если Параметры.Свойство("ТолькоЧтоСозданныйДокумент") Тогда
		ТолькоЧтоСозданныйДокумент = Параметры.ТолькоЧтоСозданныйДокумент;
	КонецЕсли;	
	
	// Комплекты документов
	РаботаСКомплектамиДокументовСервер.ДокументПриСозданииНаСервере(ЭтотОбъект);
	ТипСвязиСодержит = Справочники.ТипыСвязей.Содержит;
	
	// Параметры оповещения
	Если Параметры.Свойство("ПараметрыОповещения") Тогда
		ПараметрыОповещения = Параметры.ПараметрыОповещения;
	КонецЕсли;
	
	// Реквизиты по виду документа
	УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("ВидДокумента", Объект.ВидДокумента));
	
	Если ЗначениеЗаполнено(Объект.Шаблон) Тогда 
		УстановитьПривилегированныйРежим(Истина);
		РеквизитыШаблона = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Шаблон,
			"ЗаполнениеНаименованияПоШаблону, Заголовок");
		Если РеквизитыШаблона.ЗаполнениеНаименованияПоШаблону Тогда 
			НаименованиеСозданоПоШаблону = Истина;
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	УчитыватьНДС = Делопроизводство.УчитыватьНДС(Объект.Организация);
	Элементы.ГруппаСуммаНДС.Видимость = УчитыватьНДС;
	Элементы.ТоварыСтавкаНДС.Видимость = УчитыватьНДС;
	Элементы.ТоварыСуммаНДС.Видимость = УчитыватьНДС;
	
	ТекущийИтогСумма = Объект.Товары.Итог("Сумма");
	ТекущийИтогСуммаНДС = Объект.Товары.Итог("СуммаНДС");
	
	// Запоминаем начальные значения реквизитов
	ЗапомнитьЗначенияРеквизитов();
	
	УстановитьДоступностьПолей();
	
	// Доступность элементов
	УстановитьДоступностьРеквизитовРегистрации(Объект);
	
	// Инструкции
	ПоказыватьИнструкции = Ложь; // тут значение по умолчанию, если нет настроек формы ПолучитьФункциональнуюОпцию("ИспользоватьИнструкции");
	ПолучитьИнструкции();
	
	// Заполнение текстовых реквизитов
	Если ЗначениеЗаполнено(Объект.Дело) Тогда
		РеквизитыДела = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Дело, "НоменклатураДел.Индекс, МестоХраненияДел"); 
		ДелоТекст = СокрЛП(Объект.Дело);
		МестоХранения = РеквизитыДела.МестоХраненияДел;
	КонецЕсли;	
	
	СформироватьПредставлениеСтатейДДС();
	
	// Заявка на оплату.
	Если ЯвляетсяЗаявкойНаОплату Тогда
		Получатель = Справочники.Контрагенты.ПустаяСсылка();
		Для Каждого Сторона Из Объект.Стороны Цикл
			Если Сторона.Наименование = ПредопределенноеЗначение("Справочник.НаименованияСторон.Получатель") Тогда
				Получатель = Сторона.Сторона;
			КонецЕсли;
		КонецЦикла;
		Элементы.ГруппаПолучатель.Видимость = Истина;
		Элементы.Организация.Заголовок = НСтр("ru = 'Плательщик'");
		Элементы.ГруппаОрганизация.ОтображатьЗаголовок = Ложь;
		Элементы.ГруппаАвансовыйОтчет.Видимость =
			ТипЗнч(Получатель) = Тип("СправочникСсылка.Пользователи")
			Или ТипЗнч(Получатель) = Тип("СправочникСсылка.Сотрудники");
	Иначе
		Элементы.ГруппаПолучатель.Видимость = Ложь;
		Элементы.Организация.Заголовок = РедакцииКонфигурацииКлиентСервер.Организация();
		Элементы.ГруппаОрганизация.ОтображатьЗаголовок = Истина;
	КонецЕсли;
	
	// Учет трудозатрат
	УчетВремени.ПроинициализироватьПараметрыУчетаВремени(
		ДатаНачалаХронометража,
		ДатаКонцаХронометража,
		ВключенХронометраж,
		ОпцияИспользоватьУчетВремени,
		Объект.Ссылка,
		ВидыРабот,
		СпособУказанияВремени,
		Команды.ПереключитьХронометраж,
		Элементы.ПереключитьХронометраж,
		Элементы.УказатьТрудозатраты);
		
	РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(Объект.Ссылка);
	
	НесколькоКонтрагентов = (Объект.Контрагенты.Количество() > 1);
	УстановитьВидимостьКонтрагентов();
	
	ЗаполнитьСвязи();
	
	Если Объект.Ссылка.Пустая() Тогда 
		Делопроизводство.АктивизироватьЭлементПоУмолчанию(ЭтотОбъект);
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	УстановитьВидимостьКомандыПечатиКонверта();
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если Параметры.Свойство("ОткрытьЗакладкуФайлы") Тогда
		Если Элементы.Обзор.Видимость Тогда 
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Обзор;
		Иначе
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаФайлы;
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("ОткрытьЗакладкуЭП") Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаЭП;
	КонецЕсли;
	
	Если Параметры.Свойство("ОткрытьЗакладкуОбработка") Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОбработка;
	КонецЕсли;
	
	Если Параметры.Свойство("ОткрытьЗакладкуКатегории") Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Категории;
	КонецЕсли;
	
	Если Параметры.Свойство("ОткрытьЗакладкуТовары") Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаТовары;
	КонецЕсли;
	
	ПользовательЯвляетсяЗаместителемИлиПомощником = ДействияСерверПовтИсп.ПользовательЯвляетсяЗаместителемИлиПомощником();
	
	ВключитьАвтоОтметкуИЗаполнитьПолеОтветственный();
	ОбновитьПараметрыВидаОбъекта();
#Удаление
	ДействияСобытия.ПриСозданииФормыПредметаНаСервере(ЭтотОбъект, Параметры, ПараметрыВидаОбъекта);
#КонецУдаления
	ОбновитьОбластьЗадач();

	ИспользоватьУтверждение = ЕстьДействияУтверждения;
	ИспользоватьПодписание = ЕстьДействияПодписания;
	
	Элементы.СтороныПодписан.ТолькоПросмотр = ЕстьДействияПодписания
		И Не Пользователи.ЭтоПолноправныйПользователь();
	
	Если ЗначениеЗаполнено(Объект.ВидДокумента) Тогда
		Делопроизводство.ПрочитатьОбязательныеТипыСвязей(ЭтотОбъект, ОбязательныеТипыСвязей, Объект.Ссылка, Объект.ВидДокумента);
		
		Если ТипЗнч(Основание) = Тип("СправочникСсылка.ДокументыПредприятия") И Не ТипСвязиВыбран Тогда
			МассивТиповСвязей = ПолучитьТипыСвязей(Основание, Объект.ВидДокумента);	
		КонецЕсли;
	
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Делопроизводство.ПрочитатьОбязательныеСвязи(Объект.Ссылка, 
			ОбязательныеТипыСвязей, ОбязательныеСвязи);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ПараметрШаблонДокумента) Тогда
		УстановитьДоступностьКомандФайлыДобавленные();
	КонецЕсли;	
	
	Делопроизводство.ОбновитьСведенияОПолученииОригинала(ЭтотОбъект);
	Элементы.ГруппаДобавитьФайл.Видимость = Не Элементы.Обзор.Видимость;
	КлючЗаписи = Делопроизводство.ПолучитьКлючЗаписиРегистраДанныеДокументов(Объект);
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриСозданииНаСервереДокумент(ЭтотОбъект, Параметры);
    // Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	Если ЗначениеЗаполнено(Объект.Создал) И ЗначениеЗаполнено(Объект.ДатаСоздания) Тогда 
		СоздалТекст = СокрЛП(Объект.ДатаСоздания) + ", " + СокрЛП(Объект.Создал);
	Иначе 
		СоздалТекст = СокрЛП(Объект.ДатаСоздания);
	КонецЕсли;
	
	Если ВидДокументаКэш.ВестиУчетТоваровИУслуг Тогда
		ВестиУчетТоваровИУслуг = Истина;
		Элементы.СтраницаТовары.Видимость = Истина;
	Иначе 
		Элементы.СтраницаТовары.Видимость = Ложь;
		ВестиУчетТоваровИУслуг = Ложь;
	КонецЕсли;
	
	// Работа со подписями
	РаботаСПодписямиДокументов.ЗаполнитьТаблицуСторон(ЭтотОбъект);
	Если ВидДокументаКэш.ВестиУчетСторон Тогда
		КонтрагентПустаяСсылка = Справочники.Контрагенты.ПустаяСсылка();
		КонтактноеЛицоПустаяСсылка = Справочники.КонтактныеЛица.ПустаяСсылка();
		Для Каждого СтрокаСтороны Из Объект.Стороны Цикл
			Если СтрокаСтороны.НомерСтроки = 1 Тогда
				ДокументПодписанНами = СтрокаСтороны.Подписан;
			КонецЕсли; 
		КонецЦикла;
		
		УстановитьУсловноеОформление();
	КонецЕсли;	
	
	Элементы.ПодписьТекст.Видимость = ИспользоватьПодписание 
		И Не ВидДокументаКэш.ВестиУчетСторон И Не ЯвляетсяКомплектом;
	Элементы.ГруппаСтороны.Видимость = ВидДокументаКэш.ВестиУчетСторон 
		И Не ЯвляетсяЗаявкойНаОплату;
	Элементы.СтороныПодписан.Видимость = ВидДокументаКэш.ВестиУчетСторон
		И Не ЯвляетсяЗаявкойНаОплату
		И ВариантПодписания <> Перечисления.ВариантыПодписания.НеПодписывается;
	Элементы.СтороныДатаПодписи.Видимость = ВидДокументаКэш.ВестиУчетСторон
		И Не ЯвляетсяЗаявкойНаОплату
		И ВариантПодписания <> Перечисления.ВариантыПодписания.НеПодписывается;
		
	// ИнтернетПоддержкаПользователей.СПАРКРиски, ПриСозданииНаСервере.
	ИспользоватьСервисСПАРКРиски = СПАРКРиски.ИспользованиеРазрешено();
	ПараметрыПроцедуры = Новый Структура("ВариантОтображения", "Однострочный");
	СПАРКРиски.ПриСозданииНаСервере(
		ЭтотОбъект,
		Неопределено,
		Объект.Контрагент,
		ОбщегоНазначенияДокументооборотКлиентСервер.ВидКонтрагентаСПАРК(Объект.Контрагент),
		ПараметрыПроцедуры);
	
	Если Не ИспользоватьСервисСПАРКРиски Тогда
		Элементы.КонтрагентыСводныйИндикатор.Видимость = Ложь;
		Элементы.СтороныСводныйИндикатор.Видимость = Ложь;
		Элементы.ГруппаИндексыСПАРКРиски.Видимость = Ложь;
		Элементы.ГруппаИндексыСПАРКРиски2.Видимость = Ложь;
	КонецЕсли;
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски, ПриСозданииНаСервере.
	
	АвтовизуализацияЭП = ПолучитьФункциональнуюОпцию("АвтовизуализацияЭП");
	
	Делопроизводство.ОбновитьВидимостьРеквизитовХранения(ЭтотОбъект, ВидДокументаКэш);
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		РаботаСКорреспонденцией.ПриСозданииФормыНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
		ЗаполнитьДанныеКорреспонденцииНаФормеДокумента = Истина;
	КонецЕсли;
	
	ПриложениеЯвляетсяВебКлиентом = ОбщегоНазначенияДокументооборот.ПриложениеЯвляетсяВебКлиентом();
	Если ПриложениеЯвляетсяВебКлиентом Или Не ОбщегоНазначения.ЭтоWindowsКлиент() Тогда
		Элементы.ВставитьКартинкуИзБуфера.Видимость = Ложь;
		Элементы.ВставитьКартинкуИзБуфераСоздание.Видимость = Ложь;
		Элементы.ФайлыДобавленныеВставитьКартинкуИзБуфера.Видимость = Ложь;
		Элементы.ПроверитьОрфографию.Видимость = Ложь;
		Элементы.ПроверитьОрфографию.Доступность = Ложь;
		Элементы.СодержаниеПроверитьОрфографию.Видимость = Ложь;
		Элементы.СодержаниеПроверитьОрфографию.Доступность = Ложь;
	КонецЕсли;
	
	УстановитьВидимостьИТекстНадписиРабочихДней();
	
	Нумерация.УстановитьВидимостьВременногоНомера(ЭтотОбъект);
	
	Элементы.ДекорацияЗапретРасширенияДоступа.Видимость = Объект.ЗапретитьАвтоматическоеРасширениеДоступа;
	
	ПоддерживаетсяМобильныйСканер = РегистрыСведений.КэшМобильныхСканов.ПоддерживаетсяМобильныйСканер();
		
	ИспользоватьУчетПоОрганизациям = ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям");
	
	РаботаСРекомендованнымиНастройками.УстановитьРекомендованныеНастройки(ИмяФормы, КлючНазначенияИспользования);
	
	Справочники.ПравилаКоммуникаций.НастроитьПоляПредмета(ЭтаФорма, Элементы.Адресат);
	
	ЕстьРольРедактированиеВизуализацииЭП 
		= ЭтоПолноправныйПользователь Или РольДоступна("РедактированиеВизуализацииЭП");
		
	ПоказатьДелаетНедействующими();
	
	ОбновитьЗадачиПоПриложению();
	
	НастроитьФормуПоСостояниюДела();
	
	ЗаполнитьПоляУтвердилПодписалНаСервере();
	НастройкиФормы = ОбщегоНазначения.ХранилищеСистемныхНастроекЗагрузить(
		ИмяФормы + "/" + КлючНазначенияИспользования + "/ТекущиеДанные", "");
	
	Если НастройкиФормы = Неопределено Тогда
		ПриЗагрузкеДанныхИзНастроекНаСервере(НастройкиФормы);
	КонецЕсли;
	
	// картинки состояний
	ОбзорДокумента.ВывестиСтрокуСостояний(ЭтотОбъект);
	
	ОтобразитьВажность(ЭтотОбъект);
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьШтрихкоды") Тогда
		Команды.ВставитьРегистрационныйШтампИШтрихкод.Заголовок 
			= НСтр("ru = 'Вставить регистрационный штамп (в файл pdf)'");
	КонецЕсли;	
	
	Если ВидДокументаКэш.ЯвляетсяИсходящейКорреспонденцией Тогда
		Элементы.КонтрагентыКонтрагентГруппа.Заголовок = НСтр("ru = 'Получатель'");
	КонецЕсли;
	
	СрокИсполненияПриОткрытии = Объект.СрокИсполнения;
	
	СозданиеФормыЗавершено = Истина;
	
	ЗаполнитьЗакладкуМЭДОВФормеСервер();
	
	ШаблоныДокументов.ОтключитьКэшированиеРезультатовАвтоподстановок();
	
	Элементы.Сканировать.Видимость = ВидДокументаКэш.ЯвляетсяВходящейКорреспонденцией;
	
	ПоказыватьPdfСредствами1С = РаботаСФайламиСлужебныйПовтИсп.ПоказыватьPdfСредствами1С();
	
	ЭтоВебКлиент = ОбщегоНазначения.ЭтоВебКлиент();
	ЭтоТонкийКлиент = ОбщегоНазначенияДокументооборот.ЭтоТонкийКлиент();
	
	// Pdf
	Если ЭтоТонкийКлиент Или (ЭтоВебКлиент И ПолеPDFРаботаетВВебКлиенте) Тогда
		Если ПоказыватьPdfСредствами1С Тогда
			ВывестиPDFДокументНаСервере();
		КонецЕсли;
	КонецЕсли;
	//Конец Pdf
	
	УстановитьВидимостьГруппыЭДОВПодменюСервис();
	
	// Сервис "1С:Share"
	ИспользоватьСервис1CShare = ИнтеграцияShareДокументооборот.ИспользоватьСервис1СShare();

	УстановитьВидимостьКомандСервиса1СShare();
	
	УстановитьВидимостьВыполненияВнеПрограммы();  
	
	СоздатьКнопкиПорционногоПредпросмотра();
	
	ВсегоПорцийПредпросмотра = 1;
	НомерПорции = 1;
	ОбновитьКнопкиДинамическогоСписка();
	
	НастройкиРегНомера = ШтрихкодированиеСервер.ПерсональныеНастройкиПоложенияРегНомера();
	ПоказыватьПриВставкеРегНомера = НастройкиРегНомера.ПоказыватьПриВставке;
	
	Если ЭтоМобильныйКлиент Тогда
		МК_НастроитьЭлементыФормы();
	КонецЕсли;
	
#Вставка
	// Управляем видимостью рквизитов заявки на возврат
	ТекущееМестоРассмотрения = Объект.МестоРассмотрения;
	
	// Управляем видимостью кнопки Выгрузить в ОМиУ
 	// Кнопка видна если в тематике указан флаг "ТТС_ОбращениеПассажираОМиУ".
	Если ЦППК_ЭтоДокументОбращениеПассажираОМиУ(Объект) Тогда
		
		НоваяКоманда = Команды.Добавить("ВыгрузитьВомиу_ТТС");             
		НоваяКоманда.Действие  = "ЦППК_ВыгрузитьВомиу";
		НоваяКоманда.Заголовок = НСтр("ru = 'Выгрузить вомиу РС'");
		
		НовыйЭлемент = Элементы.Вставить("ВыгрузитьВомиу_ТТС", Тип("КнопкаФормы"),  Элементы.ГруппаОсновнаяКомПанель, Элементы.Зарегистрировать);
		НовыйЭлемент.ИмяКоманды = "ВыгрузитьВомиу_ТТС";
		НовыйЭлемент.Заголовок  = НСтр("ru = 'Выгрузить в ОМиУ'");
		
		Элементы.ВыгрузитьВомиу_ТТС.Видимость = Истина;
		
	КонецЕсли;
	
	Элементы.КомандаПроцессыИЗадачи.ПоложениеВКоманднойПанели = ПоложениеКнопкиВКоманднойПанели.ВКоманднойПанели;
	    Элементы.Переместить(Элементы.КомандаПроцессыИЗадачи, Элементы.ГруппаОсновнаяКомПанель);
		
	//++AxelSoft Шарапова 06.01.2024 САНФ-029945
	ЗаполнитьДействияПодписанияВФорме(ПараметрыВидаОбъекта);
	//--AxelSoft Шарапова 06.01.2024 САНФ-029945
	
	//++AxelSoft Шарапова 08.10.2024 САНФ-029221      
	ЭтотОбъект.ЦППК_РешениеЦООтказ = Ложь;
	//--AxelSoft Шарапова 08.10.2024 САНФ-029221      

	//++AxelSoft Шарапова 14.10.2024 САНФ-029365
	Если ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Объект.ВидДокумента, "ЯвляетсяИсходящейКорреспонденцией") = Истина
		И ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Объект.ВидДокумента, "ЦППК_ЯвляетсяОтветомЗаявкиНаВозврат") = Ложь Тогда
		Элементы.ЦППК_ЕАСД.Видимость = Истина;
	КонецЕсли;
	//--AxelSoft Шарапова 14.10.2024 САНФ-029365
	                                    
#КонецВставки

КонецПроцедуры

&НаСервере
&ИзменениеИКонтроль("ПриЧтенииНаСервере")
Процедура ЦППК_ПриЧтенииНаСервере(ТекущийОбъект)
	
	ПереносКэшаИзЧтенияВСоздание =
		КэшиНаВремяВызова.ИнициализироватьДокументыПредприятияФормаЭлемента(ТекущийОбъект.Ссылка);
	
	Делопроизводство.ЗаполнитьКэшВидаДокументаНаФорме(ЭтотОбъект, Объект.ВидДокумента);
	// Запоминаем начальные значения реквизитов
	ЗапомнитьЗначенияРеквизитов();
	
	// Рабочие группы
	РаботаСРабочимиГруппами.ПриЧтенииНаСервере(ЭтотОбъект);
	
	// Формирование исходной рабочей группы
	КэшДокументыПредприятияФормаЭлемента =
		КэшиНаВремяВызоваПовтИсп.КэшДокументыПредприятияФормаЭлемента();
	Если КэшДокументыПредприятияФормаЭлемента.Инициализирован
		И КэшДокументыПредприятияФормаЭлемента.КэшДокумента.Ссылка = Объект.Ссылка Тогда
		Участники = КэшДокументыПредприятияФормаЭлемента.УчастникиРабочейГруппы;
	Иначе
		Участники = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(Объект.Ссылка);
	КонецЕсли;
	ИсходнаяРабочаяГруппа.Очистить();
	Для каждого Эл Из Участники Цикл
		
		Строка = ИсходнаяРабочаяГруппа.Добавить();
		Строка.Участник = Эл.Участник;
		Строка.Изменение = Эл.Изменение;
		
	КонецЦикла;
	
	СостояниеТекст = Делопроизводство.ПолучитьСтроковоеПредставлениеСостояний(
		Объект.Ссылка);
	ДокументПодписан = ДействияСервер.ДокументПодписан(Объект.Ссылка);
	Если КэшДокументыПредприятияФормаЭлемента.Инициализирован
		И КэшДокументыПредприятияФормаЭлемента.КэшДокумента.Ссылка = Объект.Ссылка Тогда
		
		ЕстьФайлыШаблона = КэшДокументыПредприятияФормаЭлемента.КэшДокумента.ЕстьФайлыШаблона;
	Иначе
		ЕстьФайлыШаблона =
			РаботаСФайламиВызовСервера.ПолучитьВсеПодчиненныеФайлы(Объект.Шаблон, Ложь).Количество() > 0;
	КонецЕсли;
	
	// Комплекты документов
	РаботаСКомплектамиДокументовСервер.ДокументПриЧтенииНаСервере(ЭтотОбъект);
	
	// Статьи ДДС.
	ПрочитатьСтатьиДДС(Объект.Ссылка);
	
	// Авансовый отчет.
	ПрочитатьОбязательстваПоАвансовомуОтчету(Объект.Ссылка);
	
	// Не действует.
	НеДействуетИсходноеЗначение = ТекущийОбъект.НеДействует;
	
	Элементы.ГруппаОтменен.Видимость = Делопроизводство.ЭтотВидДокументаМожноОтменить(Объект.ВидДокумента);
	
	// Срок действия
	СрокДействияПриЧтенииНаСервере();
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Нумерация.УстановитьВидимостьВременногоНомера(ЭтотОбъект);
	
	КраткиеСведенияОСвязях = СвязиОбъектов.КраткиеСведенияОСвязях(Объект.Ссылка);
	
	Если Не ЗначениеЗаполнено(КраткиеСведенияОСвязях) Тогда	
		КраткиеСведенияОСвязях = НСтр("ru = 'Связи: не заданы'");
	КонецЕсли;	
	Элементы.КраткиеСведенияОСвязях.Видимость 
		= ЗначениеЗаполнено(КраткиеСведенияОСвязях) И Не ЭтоНовыйДокумент;
	
	Если Не ЭтоНовыйДокумент Тогда
		Элементы.ГруппаСвязи.Видимость = Ложь;
	КонецЕсли;	
	
	ОбновитьОбластьЗадач();
	
	ПользовательИЕгоСотрудники = СотрудникиВызовСервера.ПользовательИЕгоСотрудники();
	ТекПользовательПодготовилДокумент  = 
		(ПользовательИЕгоСотрудники.Найти(Объект.Подготовил) <> Неопределено); 
	
	РегламентированныйУчетОбращений = ПолучитьФункциональнуюОпцию("РегламентированныйУчетОбращений");
	Если ЗаполнитьДанныеКорреспонденцииНаФормеДокумента Тогда
		Документы.Корреспонденция.ЗаполнитьДанныеНаФормеДокумента(ЭтотОбъект);
	Иначе	
		РаботаСКорреспонденцией.ПриСозданииФормыНаСервере(ЭтотОбъект, Ложь, Истина);
		ЗаполнитьДанныеКорреспонденцииНаФормеДокумента = Истина;
	КонецЕсли;
	
	ПоказатьДелаетНедействующими();
#Вставка
	ЦППК_ПодключаемыеКоманды.ДобавитьЭлементыВноситИзменения(ЭтаФорма);
    ПоказатьВноситИзменения();
#КонецВставки
	
	ОтобразитьВажность(ЭтотОбъект);
	
	ОбновитьПараметрыВидаОбъекта();
#Удаление
	ДействияСобытия.ПриЧтенииПредметаНаСервере(ЭтотОбъект, Параметры, ПараметрыВидаОбъекта);
#КонецУдаления

	ОбщегоНазначенияДокументооборот.ПоказатьНадписьПометкиУдаления(
		ЭтотОбъект, ТекущийОбъект.ПометкаУдаления);
	
	ДелоЗакрыто = ЗначениеЗаполнено(ТекущийОбъект.Дело) И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийОбъект.Дело,
		"ДелоЗакрыто");
	Если СозданиеФормыЗавершено Тогда
		УстановитьДоступностьПолей();
	КонецЕсли;   
	
	ОбновитьРеквизитыЭДО(Истина);
	
КонецПроцедуры 



&НаСервере
Процедура ПоказатьВноситИзменения()
	
	ЭтотВидМожетВноситьИзменения = ЦППК_ОбщийМодульВызовСервера.ЦППК_ЭтотВидДокументаМожноИзменить(Объект.ВидДокумента);
	Если Не ВидДокументаКэш.ЦППК_УчитыватьВноситИзменения Тогда
		ЭтотВидМожетВноситьИзменения = Ложь;
	КонецЕсли;
	Элементы.ЦППК_ПолеНадписиВноситИзменения.Видимость = ЭтотВидМожетВноситьИзменения;
	Если Не ЗначениеЗаполнено(Объект.РегистрационныйНомер) Тогда
		Элементы.ГруппаОтменен.Доступность = Ложь;
	Иначе
		Элементы.ГруппаОтменен.Доступность = Истина;
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
&ИзменениеИКонтроль("ОбработкаПроверкиЗаполненияНаСервере")
Процедура ЦППК_ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)

	Если Не ВидДокументаКэш.ВестиУчетСторон
		И Не ЯвляетсяЗаявкойНаОплату
		И ПолучитьФункциональнуюОпцию("ИспользоватьРеквизитыУчетаПоКонтрагентам",
		Новый Структура("ВидДокумента", Объект.ВидДокумента)) 
		И Не (ВидДокументаКэш.ЯвляетсяОбращениемОтГраждан 
		И ВидОбращения = Перечисления.ВидыОбращенийГраждан.Анонимное) Тогда
		Если НесколькоКонтрагентов Тогда 

			Если Объект.Контрагенты.Количество() = 0 Тогда
				Если ВидДокументаКэш.ЯвляетсяИсходящейКорреспонденцией Тогда
					ТекстСообщения = НСтр("ru = 'Не введено ни одной строки в список ""Получатели""'");
				Иначе
					ТекстСообщения = НСтр("ru = 'Не введено ни одной строки в список ""Контрагенты""'");
				КонецЕсли;
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,"Объект.Контрагенты",,Отказ);

			Иначе

				Для Каждого Стр Из Объект.Контрагенты Цикл

					Если Не ЗначениеЗаполнено(Стр.Контрагент) Тогда

						Если ВидДокументаКэш.ЯвляетсяИсходящейКорреспонденцией Тогда

							ТекстОшибки = СтрШаблон(
							НСтр("ru = 'Не заполнена колонка ""Получатель"" в строке %1 списка ""Получатели""'"),
							Объект.Контрагенты.Индекс(Стр)+1);

						Иначе

							ТекстОшибки = СтрШаблон(
							НСтр("ru = 'Не заполнена колонка ""Контрагент"" в строке %1 списка ""Контрагенты""'"),
							Объект.Контрагенты.Индекс(Стр)+1);

						КонецЕсли;		

						ОбщегоНазначения.СообщитьПользователю(
						ТекстОшибки,,"Объект.Контрагенты["+Объект.Контрагенты.Индекс(Стр)+"].Контрагент",,Отказ);


					КонецЕсли;	

				КонецЦикла;		

			КонецЕсли;

		Иначе
#Удаление
			Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда 
				ТекстСообщения = НСтр("ru = 'Поле ""Контрагент"" не заполнено'");

				Если ВидДокументаКэш.ЯвляетсяВходящейКорреспонденцией Тогда
					ТекстСообщения = НСтр("ru = 'Поле ""Отправитель"" не заполнено'");
				КонецЕсли;

				Если ВидДокументаКэш.ЯвляетсяИсходящейКорреспонденцией Тогда
					ТекстСообщения = НСтр("ru = 'Поле ""Получатель"" не заполнено'");
				КонецЕсли;

				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,"Объект.Контрагент",,Отказ);
			КонецЕсли;
#КонецУдаления
#Вставка
			// +ЦППК Перенесено, рефакторинг
			//Zayc +10.06.2016 Отключаем проврку заполнения поля Отправитель для заявок на возврат
			Если Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидДокумента, "ЯвляетсяЗаявкойНаВозврат") Тогда

				Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда 
					ТекстСообщения = НСтр("ru = 'Поле ""Контрагент"" не заполнено'");

					Если ВидДокументаКэш.ЯвляетсяВходящейКорреспонденцией Тогда
						ТекстСообщения = НСтр("ru = 'Поле ""Отправитель"" не заполнено'");
					КонецЕсли;

					Если ВидДокументаКэш.ЯвляетсяИсходящейКорреспонденцией Тогда
						ТекстСообщения = НСтр("ru = 'Поле ""Получатель"" не заполнено'");
					КонецЕсли;

					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,"Объект.Контрагент",,Отказ);

				КонецЕсли;  
			Иначе
				
				//Если Не ЗначениеЗаполнено(Объект.ЦППК_ПричинаОбращения) Тогда 
				//	ТекстСообщения = НСтр("ru = 'Поле ""Причина обращения"" не заполнено'");
				//	ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,"Объект.ЦППК_ПричинаОбращения",,Отказ);
				//КонецЕсли;  
				
			КонецЕсли;
			// -ЦППК
			Если Объект.РешениеЦО = Перечисления.РешенияПоДокументамЗВДС_ЦО.Отказ И НЕ ЗначениеЗаполнено(Объект.ЦППК_ПричиныОтказаВозврата) Тогда
				
				ТекстСообщения = НСтр("ru = 'Поле ""Причина отказа и возврата"" не заполнено'");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,"Объект.ЦППК_ПричиныОтказаВозврата",,Отказ);
				
			КонецЕсли;
#КонецВставки
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.ВидДокумента) Тогда 

		ВестиУчетПоСтатьямДДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидДокумента, 
		"ВестиУчетПоСтатьямДДС");
		Если ВестиУчетПоСтатьямДДС 
			И Не НеПроверятьЗаполнениеСтатейДДС Тогда
			Если СтатьиДвиженияДенежныхСредств.Количество() = 0 Тогда
				ТекстОшибки = НСтр("ru = 'Не выбрана статья движения денежных средств'");
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,, 
				"ПредставлениеСтатейДДС",, Отказ);
			Иначе
				ИтогСумма = 0;
				Для Каждого Строка из СтатьиДвиженияДенежныхСредств Цикл
					ИтогСумма = ИтогСумма + Строка.Сумма;
				КонецЦикла;
				Если Объект.Сумма <> ИтогСумма Тогда
					ТекстОшибки = НСтр("ru = 'Сумма не соответствует ее расшифровке по статьям движения денежных средств'");
					ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,, "Сумма",, Отказ);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	Если ОбязательныеТипыСвязей.Количество() <> 0 И
		ОбязательныеТипыСвязей.Количество() <> ОбязательныеСвязи.Количество()
		И Не НагрузочноеТестирование.ЭтоНагрузочноеТестирование() Тогда

		ТекстСообщения = НСтр("ru = 'Не указаны обязательные связи'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,,Отказ);

	КонецЕсли;

	ТекстСообщения = "";
	Если Делопроизводство.ПолучитьЗапретСозданияДокументовНеПоШаблону(Объект.Ссылка, Объект.ВидДокумента, 
		ПараметрШаблонДокумента, ТекстСообщения) Тогда

		Если Не НагрузочноеТестирование.ЭтоНагрузочноеТестирование() Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, , "Объект.ВидДокумента", , Отказ);
		КонецЕсли;

	КонецЕсли;
	#Вставка
	//+ЦППК САНФ-023808, 19.02.2024г
	Если Объект.ВидДокумента = Справочники.ВидыДокументов.ПолучитьСсылку(Новый УникальныйИдентификатор("14cf8b02-718b-11e1-a645-00155d01333c")) тогда
		
		ПроверяемыеРеквизиты.Добавить("ИсходящийНомер");
		ПроверяемыеРеквизиты.Добавить("ИсходящаяДата"); 
		ПроверяемыеРеквизиты.Добавить("АдресатВходящейКорреспонденции");
		
	КонецЕсли;
	//-ЦППК, Контроль реквизитов в входящих документах 
	#КонецВставки


	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	РаботаСКорреспонденцией.ПроверкаЗаполненияФормыНаСервере(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	РаботаСОбращениями.ПроверкаЗаполненияФормыНаСервере(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);

КонецПроцедуры

&НаСервере
&ИзменениеИКонтроль("ПередЗаписьюНаСервере")
Процедура ЦППК_ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("ЭтоНовыйОбъект", Не ЗначениеЗаполнено(ТекущийОбъект.Ссылка));  
	ПерваяЗапись = ПараметрыЗаписи.ЭтоНовыйОбъект;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ИнтерактивнаяЗапись", Истина);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ТипСвязиПриСозданииНаОснованииДокумента",
		ТипСвязиПриСозданииНаОснованииВнутреннегоДокумента);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Основание", Основание);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("УникальныйИдентификаторФормы", УникальныйИдентификатор);
	
	Для Каждого Строка Из ТекущийОбъект.Товары Цикл 
		Строка.Номер = Строка.НомерСтроки;
	КонецЦикла;
	
	НовыйДокумент = Объект.Ссылка.Пустая();
	
	// Обработка рабочей группы
	Если НовыйДокумент Тогда
		// для заполненного документа, обновим рабочую группу по заполненным реквизитам.
		РаботаСРабочимиГруппами.ДобавитьУчастниковВРабочуюГруппуДокументаИзШаблона(ЭтотОбъект);
	КонецЕсли;
	РаботаСРабочимиГруппами.ОбъектПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
	// Срок действия
	СрокДействияПередЗаписьюНаСервере(ТекущийОбъект, ПараметрыЗаписи);
	
	Если ТекущийОбъект.Стороны.Количество() > 0 И Не ВидДокументаКэш.ВестиУчетСторон Тогда 
		ТекущийОбъект.Стороны.Очистить();
	КонецЕсли;
	
	Если ТекущийОбъект.Контрагенты.Количество() > 0
		И Не ВестиУчетПоКонтрагентам
		И Не ВидДокументаКэш.ВестиУчетСторон Тогда 
		ТекущийОбъект.Контрагент = Неопределено;
		ТекущийОбъект.КонтактноеЛицо = Неопределено;
		ТекущийОбъект.ПодписалОтКонтрагента = Неопределено;
		ТекущийОбъект.Контрагенты.Очистить();
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПередЗаписьюНаСервереДокумент(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски, ПередЗаписьюНаСервереДокумент.
	СПАРКРискиПереопределяемый.ПередЗаписьюНаСервереДокумент(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски, ПередЗаписьюНаСервереДокумент.
	
	// Рабочая группа
	РабочаяГруппаТаблицаКоличество = РабочаяГруппаТаблица.Количество();
	Для Инд = 1 По РабочаяГруппаТаблицаКоличество Цикл
		Строка = РабочаяГруппаТаблица[РабочаяГруппаТаблицаКоличество - Инд];
		Если Не ЗначениеЗаполнено(Строка.Участник) Тогда 
			РабочаяГруппаТаблица.Удалить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	КоличествоУчастниковРабочейГруппы = РабочаяГруппаТаблица.Количество();
	
	НоваяРабочаяГруппа = РабочаяГруппаТаблица.Выгрузить();
	РабочаяГруппаДобавить = Новый Массив;
	РабочаяГруппаУдалить = Новый Массив;
	
	// Формирование списка удаленных участников рабочей группы
	Для Каждого Эл Из ИсходнаяРабочаяГруппа Цикл
		
		Найден = Ложь;
		
		Для Каждого Эл2 Из НоваяРабочаяГруппа Цикл
			Если Эл.Участник = Эл2.Участник 
				И Эл.Изменение = Эл2.Изменение Тогда
				
				Найден = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не Найден Тогда
			РабочаяГруппаУдалить.Добавить(
				Новый Структура("Участник, Изменение",
					Эл.Участник,
					Эл.Изменение));
		КонецЕсли;
		
	КонецЦикла;
	
	// Формирование списка добавленных участников рабочей группы
	Для Каждого Эл Из НоваяРабочаяГруппа Цикл
		
		Найден = Ложь;
		
		Для Каждого Эл2 Из ИсходнаяРабочаяГруппа Цикл
			Если Эл.Участник = Эл2.Участник 
				И Эл.Изменение = Эл2.Изменение Тогда
				
				Найден = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не Найден Тогда
			РабочаяГруппаДобавить.Добавить(
				Новый Структура("Участник, Изменение",
					Эл.Участник,
					Эл.Изменение));
		КонецЕсли;
		
	КонецЦикла;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("РабочаяГруппаУдалить", РабочаяГруппаУдалить);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("РабочаяГруппаДобавить", РабочаяГруппаДобавить);
	
	Если Не ЗначениеЗаполнено(ТекущийОбъект.Ссылка) Тогда 
		Если Не ПараметрыЗаписи.Свойство("МассивСостояний") Тогда 
			СтруктураСостояния = Новый Структура("Состояние, Установил, Период, НачальноеСостояние", 
				Перечисления.СостоянияДокументов.Проект, 
				Сотрудники.ОсновнойСотрудник(), 
				ТекущаяДатаСеанса(),
			    Перечисления.СостоянияДокументов.ПустаяСсылка());
				
			МассивСостояний = Новый Массив;	
			МассивСостояний.Добавить(СтруктураСостояния);
			
			ПараметрыЗаписи.Вставить("МассивСостояний", МассивСостояний);
		КонецЕсли;
	КонецЕсли;
	
#Вставка
	// { *Грошев (ТТС) [29.06.2020]
	Если Объект.ВидДокумента.ТТС_ЯвляетсяЖурналомТУ Тогда
		ТТС_ЖурналыТУВызовСервера.ПроверитьЗаполнениеПолейЖТУ(Объект, Отказ, ЭтаФорма["ТТС_ДанныеЖурнала"]);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ТТС_ДанныеЖурнала", ЭтаФорма["ТТС_ДанныеЖурнала"].Выгрузить());
		Если Объект.ВидДокумента.ТТС_ВидЖурналаТУ=Перечисления.ТТС_ВидыЖурналовТУ.Журнал1 Тогда
			ТекущийОбъект.ДополнительныеСвойства.Вставить("НеОтражатьВМоихДокументах");
		КонецЕсли;
	КонецЕсли;	
	// }
#КонецВставки

	// Регистрация
	Если ПараметрыЗаписи.Свойство("Регистрация") Тогда
		Если ПараметрыЗаписи.Свойство("ПроверкаНеобходимостиУказатьСвязанныйДокументПройдена")
			И Не ПараметрыЗаписи.ПроверкаНеобходимостиУказатьСвязанныйДокументПройдена Тогда 
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если Не ПроверитьВозможностьРегистрации(ТекущийОбъект) Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;

#Вставка 
		Если РегистрационныйНомер = "" Тогда // сформировать автоматически
			// { *Грошев (ТТС) [29.06.2020]
			Если НЕ ЭтаФорма["ТТС_ДатаРегистрацииЗаднимЧислом"] = Дата(1,1,1) Тогда
				ТекущийОбъект.ДатаРегистрации = КонецДня(ЭтаФорма["ТТС_ДатаРегистрацииЗаднимЧислом"]);
			Иначе
				Если ТекущийОбъект.ВидДокумента.ТТС_ЯвляетсяЖурналомТУ Тогда
					НоваяДатаРегистрации = ЭтаФорма["ТТС_ДанныеЖурнала"][0].ДатаПоездки;
					Если НоваяДатаРегистрации > КонецДня(ТекущаяДатаСеанса()) Тогда
						ОбщегоНазначения.СообщитьПользователю("Дата регистрации не может быть позже текущей даты");
						Отказ = Истина;
						Возврат;							
					КонецЕсли;
					ТекущийОбъект.ДатаРегистрации = КонецДня(ЭтаФорма["ТТС_ДанныеЖурнала"][0].ДатаПоездки);
				Иначе
					ТекущийОбъект.ДатаРегистрации = ТекущаяДатаСеанса();
				КонецЕсли;	
			КонецЕсли;
			ПараметрыЗаписи.Вставить("ДатаРегистрации", ТекущийОбъект.ДатаРегистрации);
			// }
			НачальнаяДатаРегистрации = ТекущийОбъект.ДатаРегистрации;

			// сформируем текущий номер
			СформироватьЧисловойНомерДокумента(ТекущийОбъект);
			СформироватьСтроковыйНомерДокумента(ТекущийОбъект);

			Если ЗначениеЗаполнено(ТекущийОбъект.РегистрационныйНомер) Тогда

				ПараметрыЗаписи.Вставить("УказанРегистрационныйНомер", Истина);
				ПараметрыЗаписи.Вставить("НовыйРегистрационныйНомер", ТекущийОбъект.РегистрационныйНомер);

			КонецЕсли;

		Иначе
			ТекущийОбъект.РегистрационныйНомер = РегистрационныйНомер;
			ТекущийОбъект.ДатаРегистрации = ТекущаяДатаСеанса();
			НачальнаяДатаРегистрации = ТекущийОбъект.ДатаРегистрации;
		КонецЕсли;

		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидДокумента,"РасширениеРабочейГруппыДокументаПоВиду") и ЗначениеЗаполнено(Объект.Подразделение) Тогда 
			ТТС_ОбщийМодуль.ДобавитьСлужебнуюГруппуВерхнегоУровня(ТекущийОбъект);
		КонецЕсли;	

		// } 
#КонецВставки
		
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ЭтоРегистрация", Истина);
		
		СтруктураСостояния = Новый Структура("Состояние, Установил, Период, НачальноеСостояние", 
			Перечисления.СостоянияДокументов.Зарегистрирован, 
			Сотрудники.ОсновнойСотрудник(), 
			ТекущаяДатаСеанса(),
			Перечисления.СостоянияДокументов.ПустаяСсылка());
				
		МассивСостояний = Новый Массив;	
		МассивСостояний.Добавить(СтруктураСостояния);
		ПараметрыЗаписи.Вставить("МассивСостояний", МассивСостояний);
		
	КонецЕсли;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ПараметрыЗаписи", ПараметрыЗаписи);
	
	РаботаСКорреспонденцией.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	
	Если ВидДокументаКэш.ВестиУчетПоСтатьямДДС Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("СтатьиДвиженияДенежныхСредств",
			СтатьиДвиженияДенежныхСредств);
	КонецЕсли;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("СоздатьСвязьДляНумерации",
		СоздатьСвязьДляНумерации);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("СвязанныйДокументДляНумерации",
		СвязанныйДокументДляНумерации);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ТипСвязиНумератора",
		ТипСвязиНумератора);
	СоздатьСвязьДляНумерации = Ложь;
	
	
	// Если это документ МЭДО и пользователь снимает регистрацию, то нужно предложить создать уведомление об отказе
	// в регистрации:
	Если ВидДокументаКэш.ЯвляетсяВходящейКорреспонденцией
		И Не ТекущийОбъект.Ссылка.Пустая()
		И Не ЗначениеЗаполнено(Объект.РегистрационныйНомер)
		И МЭДОПовтИсп.НужноСоздаватьУведомления()
		И МЭДОПереопределяемый.ЭтоДокументМЭДО(ЭтотОбъект, Перечисления.НаправленияСообщенийМЭДО.Входящее)
		И ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийОбъект.Ссылка, "РегистрационныйНомер"))
		Тогда
		// У записанного объекта была регистрация, а сейчас она снята, 
		// значит надо предложить пользователю создать уведомление об отказе в регистрации:
		ОтмененаРегистрацияДокумента = Истина;
		ЕстьДоступКМЭДО = МЭДОПереопределяемый.ЕстьДоступКРаботеСМЭДО();
	КонецЕсли;
	
	#Вставка     
	ЭтотОбъект.КлючевыеРеквизитыИзменились = Истина;	
	#КонецВставки
	
КонецПроцедуры

&НаКлиенте
&ИзменениеИКонтроль("ПриОткрытии")
Процедура ЦППК_ПриОткрытии(Отказ)
	
#Вставка
	Если Объект.Ссылка.Пустая() И ЦППК_ОтказВСозданииЖурнала(Объект.ВидДокумента, Основание) Тогда
		ПоказатьПредупреждение(,"Ввод журналов ТУ №2 и №3 возможен только на основании журнала №1");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
#КонецВставки

	УстановитьДоступностьКомандСпискаПодписей(Элементы.ЭлектронныеПодписи.ТекущиеДанные);
	УстановитьДоступностьСканирования();
	
	Если ОповеститьОПрочтении Тогда
		Оповестить("ПрочтениеОбновитьСписок", Объект.Ссылка);
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиентПодMacOS() Тогда
		Элементы.ФормаПодписать.Видимость = Ложь;
		Элементы.ФормаЭПИШифрование.Видимость = Ложь;
		Элементы.КонтекстноеМенюФайлыГруппаЭПИШифрование.Видимость = Ложь;
		Элементы.ЭлектронныеПодписи.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
		
		Элементы.ТаблицаПодписейКонтекстноеМенюПроверить.Видимость = Ложь;
		Элементы.ТаблицаПодписейКонтекстноеМенюПроверитьВсе.Видимость = Ложь;
		Элементы.ТаблицаПодписейКонтекстноеМенюОткрытьПодпись.Видимость = Ложь;
		Элементы.ТаблицаПодписейКонтекстноеМенюУдалить.Видимость = Ложь;
		Элементы.ТаблицаПодписейКонтекстноеМенюСохранить.Видимость = Ложь;
	КонецЕсли;
	
	СоставСтрока = ДелопроизводствоКлиентСервер.ПолучитьСтрокуСоставДокумента(Объект);
	НачальныйСостав = СоставСтрока;
	
	Оповестить("ОбновитьСписокПоследних");
	
	Если Не Параметры.ДокументОснование.Пустая() И ДокументОснованиеПодписан Тогда
		ПодключитьОбработчикОжидания("ВопросКопированияЭП", 0.2, Истина);
	КонецЕсли;
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентовКлиент.ПриОткрытииДокумент(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	ОбновитьОтображениеСуммы();
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски, ПриОткрытии.
	СПАРКРискиКлиент.ПриОткрытии(ЭтотОбъект, Неопределено);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски, ПриОткрытии.
	
	ДействияКлиент.РазвернутьДействия(Элементы.Действия, Действия);
	
	РаскрытьДеревоФайлов();
	
	РаботаСКорреспонденциейКлиентСервер.УстановитьВидимостьЭлементовВОтветНаИПредметПереписки(ЭтотОбъект);

	УстановитьВидимостьПредварительногоПросмотраВСвязях();

#Вставка
	//  Проверяем неоьходимость регистрации документа для обмена с ОМиУ
	ЭтаФорма.ПерезаполнитьДействия_ТТС = Ложь;
#КонецВставки
	
	Если Не ЭтоМобильныйКлиент Тогда
		
		МобильныйСканерЗанят = Ложь;
		Элементы.ДобавитьСканСМобильного.Видимость = ПоддерживаетсяМобильныйСканер;
		Элементы.ДобавитьСканСМобильногоСоздание.Видимость = ПоддерживаетсяМобильныйСканер;
		Элементы.ФайлыДобавленныеДобавитьСканСМобильного.Видимость = ПоддерживаетсяМобильныйСканер;
		
		Если ПоддерживаетсяМобильныйСканер И ТолькоЧтоСозданныйДокумент Тогда
			ПодключитьОбработчикОжидания("ДобавитьСканСМобильногоАвтоматически", 3, Ложь);
		КонецЕсли;
		
	Иначе
		МК_ПоказатьСкрытьДеревоОбзораПродолжение();
	КонецЕсли;
	
	Если НужноВыполнитьСопоставлениеЭП Тогда
		УстановитьСоответствиеФайловИЭП();      
		НужноВыполнитьСопоставлениеЭП = Ложь;
	КонецЕсли;
	
	Если Параметры.Свойство("Действие")
		И ЗначениеЗаполнено(Параметры.Действие) Тогда
		ПодключитьОбработчикОжидания("ОткрытьДействиеОтложено", 0.5, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте                                                                                        
&После("ПередЗаписью")
Процедура ЦППК_ПередЗаписью(Отказ, ПараметрыЗаписи)

	
	Если ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Объект.ВидДокумента, "ТТС_ЯвляетсяЖурналомТУ") = Истина Тогда
		
		Если Элементы.Найти("ТТС_ДанныеЖурналаТаблицаЭДТ") = Неопределено Тогда
			СоздатьЭлементыЖурналыТУ();
		КонецЕсли;
		
		ЦППК_ОбработатьТаблицуЖурналов();
		
	КонецЕсли;

	Если ЭтаФорма.ПерезаполнитьДействия_ТТС Тогда
		
		Если ЗначениеЗаполнено(КомплексныйПроцессПоПредмету) Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Документ обрабатывается в рамках комплексного процесса.'"));
			Возврат;
		КонецЕсли;
		
		ДействияКлиент.ЗаполнитьДействия(ЭтотОбъект); 

		// Если документ закрывается, то нет смысла перечитывать форму 
		Если ПараметрыЗаписи.Свойство("Закрыть") Тогда
			Если ПараметрыЗаписи.Закрыть Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;	 
		
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			// перечитать действия
			ПрочитатьДействия();
			ДействияКлиент.РазвернутьДействия(Элементы.Действия, Действия);
			УстановитьДоступностьПолей();
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
&ИзменениеИКонтроль("ПослеЗаписиНаСервере")
Процедура ЦППК_ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если НовыйДокумент Тогда
		Если ЗначениеЗаполнено(ПараметрыОповещения) 
			И ПараметрыОповещения.Свойство("ИмяСобытия")
			И ПараметрыОповещения.ИмяСобытия = "СозданДокументПредприятияНаОснованииПисьма" Тогда
			ПисьмоСсылка = ПараметрыОповещения.ПараметрСобытия;
			ПисьмоОбъект = ПисьмоСсылка.ПолучитьОбъект();
			ПисьмоОбъект.Предмет = Объект.Ссылка;
			ПисьмоОбъект.Записать();
		КонецЕсли;
	КонецЕсли;
	
	Если НовыйДокумент Тогда
		РаботаСШаблонамиДокументовСервер.ЗаписатьИспользованиеШаблона(Объект.Шаблон);
	КонецЕсли;
	
	// Протоколирование работы пользователей
	ПротоколированиеРаботыСотрудников.ЗаписатьСоздание(Объект.Ссылка, НовыйДокумент);
	ПротоколированиеРаботыСотрудников.ЗаписатьИзменение(Объект.Ссылка);
	
	// Автозаполнение файлов
	ИзменениеФайловMSWordНаСервере = Константы.ИзменениеФайловMSWordТолькоНаСервере.Получить();
	ИспользоватьАвтозаполнениеФайлов = ПолучитьФункциональнуюОпцию("ИспользоватьАвтозаполнениеФайлов");
	ИспользоватьШтрихкоды = ПолучитьФункциональнуюОпцию("ИспользоватьШтрихкоды");
	
	ЕстьДобавленныеФайлы = Ложь;
	
	// Создание файлов при сохранении нового документа
	Если ФайлыДобавленные.Количество() > 0 Тогда
		
		ДанныеДляЗаполненияФайловНаКлиенте.Очистить();
		Индекс = ФайлыДобавленные.Количество() - 1;
        Пока Индекс >= 0 Цикл
        	
			ФайлТаблицы = ФайлыДобавленные[Индекс];
			 
			Если Не ЭтоАдресВременногоХранилища(ФайлТаблицы.ПолныйПуть)
				И Не ЭтоАдресВременногоХранилища(ФайлТаблицы.Адрес) Тогда
				Индекс = Индекс - 1;
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ФайлТаблицы.Условие) Тогда
				
				Если Не РаботаСАлгоритмамиПроверки.АлгоритмПоПредметуВыполняется(
					Объект.Ссылка, ФайлТаблицы.Условие) Тогда
					ФайлыДобавленные.Удалить(Индекс);
					Индекс = Индекс - 1;
					КоличествоФайлов = КоличествоФайлов - 1;
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			ЕстьДобавленныеФайлы = Истина;
			
			ХранитьВерсииНовыйФайл = Истина;
			ХранилищеФайла = Неопределено;
			ТекстХранилище = Неопределено;
			СсылкаНаВерсиюИсточник = Неопределено;
			
			СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией");
			ВладелецФайла = Объект.Ссылка;
			
			ДанныеФайла = Неопределено;
			
			АдресФайлаСтрока = "";
			
			Если ЭтоАдресВременногоХранилища(ФайлТаблицы.ПолныйПуть) Тогда
				
				АдресФайлаСтрока = ФайлТаблицы.ПолныйПуть;
				
				ДанныеФайла = ПолучитьИзВременногоХранилища(ФайлТаблицы.ПолныйПуть);
				Источник = ДанныеФайла.Ссылка;
				ХранитьВерсииНовыйФайл = Источник.ХранитьВерсии;
				Расширение = Источник.ТекущаяВерсия.Расширение;
				
				Если ТипЗнч(Объект.Ссылка) <> ТипЗнч(ДанныеФайла.Владелец) Или ФайлТаблицы.ДобавленИзШаблона Тогда 
					ХранитьВерсииНовыйФайл = Истина;
				КонецЕсли;
				
				ТекстХранилище = РегистрыСведений.ТекстыВерсийФайлов.ПолучитьТекстХранилище(Источник.ТекущаяВерсия);
					
				Если Источник.ТекущаяВерсия.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
					ХранилищеФайла = РаботаСФайламиВызовСервера.ПолучитьХранилищеФайлаИзИнформационнойБазы(Источник.ТекущаяВерсия);
				КонецЕсли;
				
				СведенияОФайле.Комментарий = Источник.Описание;
				СведенияОФайле.ИмяБезРасширения = ФайлТаблицы.Наименование; //Источник.ПолноеНаименование;
				СсылкаНаВерсиюИсточник = Источник.ТекущаяВерсия;
				Размер = Источник.ТекущаяВерсия.Размер;
					
				ДатаМодификацииФайла = Источник.ТекущаяВерсия.ДатаМодификацииФайла;
				ДатаМодификацииУниверсальная = Источник.ТекущаяВерсия.ДатаМодификацииУниверсальная;
				
				ПолноеНаименование = Источник.ПолноеНаименование;
					
			ИначеЕсли ЭтоАдресВременногоХранилища(ФайлТаблицы.Адрес) Тогда  
				
				АдресФайлаСтрока = ФайлТаблицы.Адрес;
				
				ХранилищеФайла = ФайлТаблицы.Адрес; // адрес во временном хранилище
						
				СведенияОФайле.ИмяБезРасширения = ФайлТаблицы.Наименование;
				Расширение = ФайлТаблицы.Расширение;
				
				ПолноеНаименование = ФайлТаблицы.Наименование;
						
				Размер = ФайлТаблицы.Размер;

				ДатаМодификацииФайла = ТекущаяДата();
				ДатаМодификацииУниверсальная = ТекущаяДата();
						
			КонецЕсли;
			
			СведенияОФайле.ХранитьВерсии = ХранитьВерсииНовыйФайл;
			
			НачатьТранзакцию();
			Попытка
				Приемник = РаботаСФайламиВызовСервера.СоздатьФайл(ВладелецФайла, СведенияОФайле);
				
				Если ЗначениеЗаполнено(ФайлТаблицы.ШаблонОснованиеДляСоздания)
						И ЗначениеЗаполнено(ПараметрШаблонДокумента) Тогда
					РегистрыСведений.ФайлыСозданныеПоШаблону.ЗанестиИнформациюОФайле(Приемник, Истина);//СозданПоШаблону
				КонецЕсли;
				
				СведенияОФайле.Размер = Размер;
				СведенияОФайле.РасширениеБезТочки = Расширение;
				СведенияОФайле.АдресВременногоХранилищаФайла = ХранилищеФайла;
				СведенияОФайле.АдресВременногоХранилищаТекста = ТекстХранилище;
				СведенияОФайле.СсылкаНаВерсиюИсточник = СсылкаНаВерсиюИсточник;
				СведенияОФайле.ВремяИзменения = ДатаМодификацииФайла;
				СведенияОФайле.ВремяИзмененияУниверсальное = ДатаМодификацииУниверсальная;

				Версия = РаботаСФайламиВызовСервера.СоздатьВерсию(Приемник, СведенияОФайле);
				
				РаботаСФайламиВызовСервера.ОбновитьВерсиюВФайле(Приемник, Версия, ТекстХранилище);

				НовыйФайл = Приемник;
				РаботаСЭП.ЗаписатьЭПФайлу(НовыйФайл, ФайлыЭП, АдресФайлаСтрока, ЭтаФорма);
				
				Если ФайлТаблицы.ДобавленИзШаблона Тогда	
					РаботаСФайламиВызовСервера.ЗаписатьОригинальноеИмяФайла(Приемник, ФайлТаблицы.Наименование);
				КонецЕсли;	
				РегистрыСведений.РолиФайловДокументов.ЗаписатьРольФайла(Приемник, ФайлТаблицы.РольФайла); 
				
				// тут заполним порядок из шаблона.
				Если ФайлТаблицы.Порядок <> 0 Тогда 
					РаботаСФайламиВызовСервера.ЗаписатьПорядокФайла(Приемник, ФайлТаблицы.Порядок);
				КонецЕсли;
				
				ИОМВладелеца = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(
					Тип("СправочникСсылка.ДокументыПредприятия"));
				ПараметрыРаспознавания = РаботаСФайламиВызовСервера.ПодготовитьПараметрыРаспознавания(ИОМВладелеца);
				Если ПараметрыРаспознавания <> Неопределено И ПараметрыРаспознавания.Свойство("РаспознатьПослеДобавления") И ПараметрыРаспознавания.РаспознатьПослеДобавления Тогда
					РаспознатьНемедленно = Ложь;
					ОписаниеОшибки = "";
					РаспознанныйТекст = "";
					РаботаСФайламиВызовСервера.РаспознатьФайл(Приемник, ПараметрыРаспознавания, ОписаниеОшибки,
						РаспознанныйТекст, УникальныйИдентификатор,  РаспознатьНемедленно);
				КонецЕсли; 
					
				Если КопироватьПодписиЭП Тогда
					
					ВерсияОбъект = Приемник.ТекущаяВерсия.ПолучитьОбъект();
					
					ЧислоПодписей = РаботаСЭП.СкопироватьВсеПодписи(Источник.ТекущаяВерсия, Приемник.ТекущаяВерсия);
					
					Если ЧислоПодписей <> 0 Тогда
						ФайлОбъект = Приемник.ПолучитьОбъект();
						ФайлОбъект.ПодписанЭП = Истина;
						ФайлОбъект.Записать();
						
						ВерсияОбъект.ПодписанЭП = Истина;
						ВерсияОбъект.Записать();
					КонецЕсли;
				КонецЕсли;
				
				Если ФайлТаблицы.ДобавленИзШаблона Тогда
					ФайлОбъект = Приемник.ПолучитьОбъект();
					ФайлОбъект.ШаблонОснованиеДляСоздания = ФайлТаблицы.ШаблонОснованиеДляСоздания;
					Если ФайлОбъект.ПодписанЭП Тогда
						ФайлОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина);
					КонецЕсли;
					ФайлОбъект.Записать();	
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ДанныеФайла) И ДанныеФайла.Зашифрован Тогда
					
					ФайлОбъект = Приемник.ПолучитьОбъект();
					ФайлОбъект.Зашифрован = Истина;
					
					ФайлОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина); // чтобы прошла запись ранее подписанного объекта
					ФайлОбъект.Записать();
					
					ВерсияОбъект = Приемник.ТекущаяВерсия.ПолучитьОбъект();
					ВерсияОбъект.Зашифрован = Истина;
					ВерсияОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина); // чтобы прошла запись ранее подписанного объекта
					ВерсияОбъект.Записать();
					
					РегистрыСведений.СертификатыШифрования.СкопироватьСертификатыШифрования(
						Источник.Ссылка, ФайлОбъект.Ссылка);
					
				КонецЕсли;
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				ОтменитьТранзакцию();
				ВызватьИсключение;
			КонецПопытки;
			
			// Автозаполнение файлов
			ПодготовитьТаблицуФайловДляАвтозаполнения(Источник, Приемник, ФайлТаблицы,
				ИспользоватьАвтозаполнениеФайлов, ИзменениеФайловMSWordНаСервере, ИспользоватьШтрихкоды);
			
			Если Источник = ТекущийФайлВСпискеДобавленныхДляРедактирования Тогда
				ТекущийФайлВСпискеДобавленныхДляРедактирования = Приемник;
			КонецЕсли;
			
			Если Источник = ТекущийФайлВСпискеДобавленныхДляОткрытия
				И ЗначениеЗаполнено(ТекущийФайлВСпискеДобавленныхДляОткрытия) Тогда
				ТекущийФайлВСпискеДобавленныхДляОткрытия = Приемник;
			КонецЕсли;

			Если ФайлТаблицы.Адрес = ТекущийФайлВСпискеДобавленныхДляОткрытия
				И ЗначениеЗаполнено(ТекущийФайлВСпискеДобавленныхДляОткрытия) Тогда
				ТекущийФайлВСпискеДобавленныхДляОткрытия = Приемник;
			КонецЕсли;
			
			// Установка признака оригинала
			Если ВестиУчетСканКопийОригиналовДокументов
				И Не ФайлТаблицы.ДобавленИзШаблона 
				И ДелопроизводствоКлиентСервер.ЭтоРасширениеСканКопии(Приемник.ТекущаяВерсияРасширение) Тогда 
				
				Делопроизводство.СохранитьСведенияОбОригиналеФайла(Приемник, ВладелецФайла);
				
				Если Элементы.Обзор.Видимость Тогда 
					ЭлементГруппаНадписьОтсутствуетОригинал = Элементы.ГруппаНадписьОтсутствуетОригинал;
				Иначе
					ЭлементГруппаНадписьОтсутствуетОригинал = Элементы.ГруппаНадписьОтсутствуетОригиналСоздание;
				КонецЕсли;
				Если ЭлементГруппаНадписьОтсутствуетОригинал.Видимость Тогда 
					ЭлементГруппаНадписьОтсутствуетОригинал.Видимость = Ложь;
#Вставка
					//{Грошев Александр ТТС [11.01.2017]
					Элементы.ДекорацияОтсутствуетОригинал.Видимость = Ложь;
					//}
#КонецВставки
				КонецЕсли;
			КонецЕсли;
			
			ФайлыДобавленные.Удалить(Индекс);
			Индекс = Индекс - 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Файлы
 	Делопроизводство.СохранитьСведенияОбОригиналахФайловИзКарточки(Файлы, Объект.Ссылка,
		ОригиналПолученУстановленоВручную);
	Если НовыйДокумент Тогда 
		ЗаполнитьСписокФайлов(Истина);
	КонецЕсли;	
	Делопроизводство.ОбновитьСведенияОПолученииОригинала(ЭтаФорма);
	
	// Заполнение по шаблону
	Элементы.ФормаЗаполнитьПоШаблону.Видимость = Ложь;
	
	//Заполнение Корреспонденции
	Документы.Корреспонденция.ЗаполнитьДанныеНаФормеДокумента(ЭтотОбъект);
		
	// Шаблоны автозапуска
	ЗаполнитьШаблоныДляАвтоЗапуска();
	
	// Срок действия
	СрокДействияПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи);
	
	// Файлы
	Если Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаТаблица Тогда
		Элементы.ГруппаСпискиФайлов.ТекущаяСтраница = Элементы.ГруппаСписокСоздание;
	КонецЕсли;
	
	// Комплекты документов
	Если ЯвляетсяКомплектом Или НачальныеЗначенияРеквизитов[0].ЯвляетсяКомплектом Тогда
		РаботаСКомплектамиДокументовСервер.СохранитьСоставКомплекта(ЭтотОбъект);
	КонецЕсли;
	
	// Рабочие группы
	РаботаСРабочимиГруппами.ОбъектПослеЗаписиНаСервере(ЭтотОбъект, ПараметрыЗаписи);
	
	// Формирование исходной рабочей группы
	УчастникиРабочейГруппы = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(Объект.Ссылка);
	ИсходнаяРабочаяГруппа.Очистить();
	Для Каждого Эл Из УчастникиРабочейГруппы Цикл
		
		Строка = ИсходнаяРабочаяГруппа.Добавить();
		Строка.Участник = Эл.Участник; 
		Строка.Изменение = Эл.Изменение;
		
	КонецЦикла;
	
	// Категории данных
	Если ИспользоватьКатегорииДанных Тогда
		РаботаСКатегориямиДанных.ЗаписатьСписокКатегорийУОбъекта(СписокКатегорийДанных, Объект.Ссылка);
		Если ИспользоватьАвтоматическуюКатегоризациюДанных Тогда
			АвтоматическаяКатегоризацияВыполнена = РаботаСКатегориямиДанных.ПолучитьФлагВыполненияАвтоматическойКатегоризации(Объект.Ссылка);
			Если АвтоматическаяКатегоризацияВыполнена Тогда
				Элементы.ГруппаАвтоКатегоризация.ТекущаяСтраница = Элементы.ГруппаАвтоКатегоризацияВыполнена;
			Иначе
				Элементы.ГруппаАвтоКатегоризация.ТекущаяСтраница = Элементы.ГруппаАвтоКатегоризацияНеВыполнена;
			КонецЕсли;
		Иначе
			Элементы.ГруппаАвтоКатегоризация.Видимость = Ложь;
		КонецЕсли;
		Если ИспользоватьПроверкуКатегорий Тогда
			КатегорииПроверены = РаботаСКатегориямиДанных.ПолучитьФлагПроверкиКатегорийОбъекта(Объект.Ссылка);
			Если КатегорииПроверены Тогда
				Элементы.ГруппаПроверкаКатегорий.ТекущаяСтраница = Элементы.ГруппаКатегорииПроверены;
			Иначе
				Элементы.ГруппаПроверкаКатегорий.ТекущаяСтраница = Элементы.ГруппаКатегорииНеПроверены;
			КонецЕсли;
		Иначе
			Элементы.ГруппаПроверкаКатегорий.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	НавигационнаяСсылкаДокумента = ПолучитьНавигационнуюСсылку(ТекущийОбъект.Ссылка);
	ПредставлениеОбъекта = Строка(ТекущийОбъект.Ссылка);
	
	Если ДокументооборотПраваДоступа.ЕстьПравоРегистрации(ТекущийОбъект.Ссылка) Тогда
		Элементы.РегистрационныйНомер.ТолькоПросмотр = Ложь;	
		Элементы.ДатаРегистрации.ТолькоПросмотр = Ложь;
	Иначе 
		Элементы.РегистрационныйНомер.ТолькоПросмотр = Истина;	
		Элементы.ДатаРегистрации.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	// Т.к. запись прошла, заполним новые начальные значения реквизитов. Выполнять в самом конце транзакции.
	ЗапомнитьЗначенияРеквизитов();
	
	Если НовыйДокумент Тогда
		РаботаСПоследнимиОбъектами.ЗаписатьОбращениеКОбъекту(Объект.Ссылка);
	КонецЕсли;
	
	Если ИзменилсяКлючНастроекОбработки Или НовыйДокумент Тогда
		// Сначала прочитаем все что есть
		Если Не ДействияПоказыватьВсе Тогда
			ДействияПоказыватьВсе = Не ДействияПоказыватьВсе;
			Элементы.ДействияПоказатьВсе.Пометка = ДействияПоказыватьВсе;
		
			ПрочитатьДействия();
			СрокИсполненияПриОткрытии = Объект.СрокИсполнения
		КонецЕсли;
		ОбновитьПараметрыВидаОбъекта();
#Вставка
		Если НовыйДокумент Тогда
#КонецВставки
		ПравилаОбработкиСервер.ЗаполнитьДействияВФормеПредмета(
			ЭтотОбъект,
			ПараметрыВидаОбъекта,
			ТекущийОбъект);
#Вставка
		КонецЕсли;
#КонецВставки
		ИзменилсяКлючНастроекОбработки = Ложь;
		ОбработкаПредставление = Формат(КоличествоДействий, "");
		ДействияСервер.УстановитьВидимостьКомандУправленияОбработкой(
			ТекущийОбъект.Ссылка, Элементы, ВидДокументаКэш, СостояниеОбработки);
	КонецЕсли;
	
	// ЭП
	Если КопироватьПодписиЭП Тогда
		Источник = Параметры.ДокументОснование;
		Приемник = Объект.Ссылка;
		ДокументОбъект = Объект.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ПодписанЭП = Истина;
		
		РаботаСЭП.СкопироватьВсеПодписи(Источник.Ссылка, Приемник);
		
		ДокументОбъект.Записать();
		ПрочитатьУстановитьДоступностьПолейЗаполнитьПодписи();

	ИначеЕсли ДокументОснованиеПодписан Тогда	
		ДокументОбъект = Объект.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ПодписанЭП = Ложь;
		ДокументОбъект.Записать();
		Прочитать();
	КонецЕсли;
	
	Если Не НовыйДокумент И СрокИсполненияПриОткрытии <> Объект.СрокИсполнения Тогда
		ПрочитатьДействия();
	КонецЕсли;
	СрокИсполненияПриОткрытии = Объект.СрокИсполнения;
	
	НастроитьФормуПоСостояниюДела();
	ЗаполнитьПоляУтвердилПодписалНаСервере();
	ЗаполнитьСвязи();
	
	ПолучитьИнструкции();
	СостояниеТекст = Делопроизводство.ПолучитьСтроковоеПредставлениеСостояний(
		ТекущийОбъект.Ссылка);
	ДокументПодписан = ДействияСервер.ДокументПодписан(Объект.Ссылка);	
	ПолучитьОбзорДокумента();
	КлючЗаписи = Делопроизводство.ПолучитьКлючЗаписиРегистраДанныеДокументов(ТекущийОбъект);
	
	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами
	
	// Работа со сторонами
	РаботаСПодписямиДокументов.ЗаполнитьТаблицуСторон(ЭтотОбъект);
	Если ВидДокументаКэш.ВестиУчетСторон Тогда
		УстановитьУсловноеОформление();
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски, ПослеЗаписиНаСервере.
	СПАРКРискиПереопределяемый.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски, ПослеЗаписиНаСервере.
	
	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("НадоПереименоватьФайлыПоШаблону") 
		И (Не ПерваяЗапись Или (ПерваяЗапись И ЕстьДобавленныеФайлы))
		Тогда
			
		НадоПереименоватьФайлыПоШаблону = Истина;
		ТекущийОбъект.ДополнительныеСвойства.Удалить("НадоПереименоватьФайлыПоШаблону");
		
	КонецЕсли;            
	
	ПерваяЗапись = Ложь;
	
	УстановитьДоступностьРеквизитовРегистрации(ТекущийОбъект);
	ВывестиДекорациюОтсутствуетОригинал(ТекущийОбъект);
	Делопроизводство.ОтразитьВЖурналеПередачи(ЭтотОбъект);
	
	УстановитьЗапретУдаленияКонтрагентовИзШаблона();
	УстановитьЗапретУдаленияСторонИзШаблона();
	
	ВидДокументаИзменен = Ложь;
	
	МЭДОПереопределяемый.СохранитьДанныеМЭДОВФорме(
		ЭтотОбъект, МЭДОДокументооборот.НаправлениеОтКэшаВидаДокумента(ВидДокументаКэш));
		
	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("СвязиКорреспонденцииИзменены") 
		И ТекущийОбъект.ДополнительныеСвойства.СвязиКорреспонденцииИзменены Тогда
		ОбновитьИнформациюОСвязях();
	КонецЕсли;
	
	Если ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.ЭлектронныйДокументВходящийЭДО") Тогда
		
		ОтражениеВУчетеДОВызовСервера.УстановитьСвязьЭлектронногоДокументаСОбъектомУчета(Параметры.Основание, Объект.Ссылка);
		
	КонецЕсли;
	
	УстановитьВидимостьКомандСервиса1СShare();

#Вставка
// ++перенос с 2.0
	Если ПараметрыЗаписи.Свойство("Регистрация") Тогда
		Если	ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидДокумента, "ЯвляетсяЗаявкойНаВозврат") Тогда
			Если ЗначениеЗаполнено(Объект.СрокИсполнения) Тогда
				МенеджерЗаписи = РегистрыСведений.ИсторияСроковДокументов.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.Документ = Объект.Ссылка;
				МенеджерЗаписи.Период = ТекущаяДата();
				МенеджерЗаписи.СрокРассмотрения = Объект.СрокИсполнения;
				МенеджерЗаписи.Установил = Объект.Ссылка;
				МенеджерЗаписи.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
// --
	// { *Грошев (ТТС) [29.06.2020]
	ТТС_ЖурналыТУВызовСервера.УправлениеВидимостьюИДоступностью(ЭтаФорма);
	// }
#КонецВставки
	
КонецПроцедуры

&НаКлиенте
Процедура ЦППК_ПослеЗаписиПеред(ПараметрыЗаписи)
	// { *Грошев (ТТС) [29.06.2020]
	ЭтаФорма.ТТС_ДатаРегистрацииЗаднимЧислом = Дата(1,1,1);
	// }
КонецПроцедуры

&НаКлиенте
&После("ПослеЗаписи")
Процедура ЦППК_ПослеЗаписи(ПараметрыЗаписи)
	
	//++AxelSoft Шарапова 08.10.2024 САНФ-029221      
	Если ЭтотОбъект.ЦППК_РешениеЦООтказ Тогда
		
		//ПараметрыФормы = ДелопроизводствоКлиент.ПараметрыФормыДляСозданияДокумента(
		//ШаблонДокументаОтвета, Объект.Ссылка);
		
		//Открытьформу("Справочник.ДокументыПредприятия.ФормаОбъекта", ПараметрыФормы, Объект.Ссылка);
		
		СоздатьДокументОтветНаЗаявку();
		
	КонецЕсли;
	//--AxelSoft Шарапова 08.10.2024 САНФ-029221      
	
КонецПроцедуры

&НаКлиенте
&ИзменениеИКонтроль("ПередЗакрытием")
Процедура ЦППК_ПередЗакрытием1(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	Если ОбщегоНазначенияДокументооборотКлиент.ПередЗакрытием(
		Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка, Модифицированность) Тогда
		Возврат;
	КонецЕсли;

	// Штрихкодирование
	Если Не Объект.Ссылка.Пустая() И ИспользоватьШК
		И НеобходимоНапечататьШтрихкодПриСоздании И Не ПоказанВопросОВставкеШтрихкода Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Для данного документа не был напечатан штрихкод.%1Действительно закрыть форму?'"),
		Символы.ПС);
		РежимВопроса = РежимДиалогаВопрос.ДаНет;
		ОписаниеОповещения = Новый ОписаниеОповещения(
		"ПередЗакрытиемПродолжение",
		ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, Текст, РежимВопроса);
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	Если Модифицированность Тогда
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗакрытиемЗавершение", ЭтотОбъект);
		Отказ = Истина;
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		Возврат;
	КонецЕсли;

	ВариантПредупрежденияПриЗакрытииВходящего = ДелопроизводствоКлиентПовтИсп.
	ПолучитьПерсональныеНастройкиРаботыСДокументами().ВариантПредупрежденияПриЗакрытииВходящего;	

#Удаление
	РегистрацияПриЗакрытии = Ложь;
	Если ЗначениеЗаполнено(Объект.Ссылка) И Не ДокументЗарегистрирован() 
		И ВидДокументаКэш.ЯвляетсяВходящейКорреспонденцией
		И ЭтоДелопроизводитель
		И ЗакрытьНезарегистрированныйДокумент <> Истина
		И ВариантПредупрежденияПриЗакрытииВходящего <> "ЗакрыватьБезРегистрации" 
		И ДокументооборотПраваДоступа.ЕстьПравоРегистрации(Объект.Ссылка) 
		И ДокументАктивен() Тогда 

		Если ВариантПредупрежденияПриЗакрытииВходящего = "ВсегдаРегистрировать" Тогда 
			РегистрацияПриЗакрытии = Истина;
			Если ЗарегистрироватьДокумент() Тогда 
				ЗакрытьНезарегистрированныйДокумент = Истина;
			КонецЕсли;
		Иначе
			ПараметрыОбработчика = Новый Структура;
			ПараметрыОбработчика.Вставить("Отказ", Отказ);
			ОписаниеОповещения = Новый ОписаниеОповещения(
			"ПродолжениеПередЗакрытием",
			ЭтотОбъект,
			ПараметрыОбработчика);
			ОткрытьФорму("ОбщаяФорма.ПредупреждениеПриЗакрытииНезарегистрированного", ,
			ЭтотОбъект, , , , ОписаниеОповещения);
			Отказ = Истина;
			Возврат;
		КонецЕсли;

	КонецЕсли;
#КонецУдаления

	#Если Не ВебКлиент Тогда	

		МассивЗахваченныхФайлов = ПолучитьЗахваченныеФайлы();

		Расширение = "";
		МассивЗахваченныхТолькоWordФайлов = Новый Массив;
		СписокЗанятыеWordФайлы = ДелопроизводствоКлиент.ПолучитьЗанятыеВнешнимиПрограммамиФайлы(
		Объект.Ссылка, УникальныйИдентификатор, 
		МассивЗахваченныхФайлов, Расширение, МассивЗахваченныхТолькоWordФайлов);

		Если СписокЗанятыеWordФайлы.Количество() <> 0 Тогда

			НазваниеПрограммы = ДелопроизводствоКлиент.ПолучитьНазваниеПрограммыЗахвата(
			Расширение, СписокЗанятыеWordФайлы.Количество());

			СтрокаФайлов = "";
			Для Каждого ИмяРасширение Из СписокЗанятыеWordФайлы Цикл
				Если Не ПустаяСтрока(СтрокаФайлов) Тогда
					СтрокаФайлов = СтрокаФайлов + Символы.ПС;
				КонецЕсли;	
				СтрокаФайлов = СтрокаФайлов + ИмяРасширение;
			КонецЦикла;

			Если СписокЗанятыеWordФайлы.Количество() > 1 Тогда
				ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Для закрытия карточки документа закройте файлы, занятые %1:
				| 
				|%2.'"),
				НазваниеПрограммы, СтрокаФайлов);
			Иначе	

				ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Для закрытия карточки документа закройте файл, занятый %1:
				| 
				|%2.'"),
				НазваниеПрограммы, СтрокаФайлов);

			КонецЕсли;	

			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(КодВозвратаДиалога.ОК);
			Кнопки.Добавить(КодВозвратаДиалога.Отмена);

			Обработчик = Новый ОписаниеОповещения("ПослеВопросаФайлыЗанятыWordПередЗакрытием", ЭтотОбъект);
			ПоказатьВопрос(Обработчик, ТекстСообщения, Кнопки);
			Отказ = Истина;
			Возврат;

		КонецЕсли;

		НеОсвобождатьЗанятыеWordФайлы = Истина;
		ДелопроизводствоКлиент.ПоместитьИзмененияФайлов(Объект.Ссылка, УникальныйИдентификатор, 
		МассивЗахваченныхТолькоWordФайлов, НеОсвобождатьЗанятыеWordФайлы);

	#КонецЕсли

	// Для целей МЭДО, нужно предложить создать исходящее уведомление:
	Если ОтмененаРегистрацияДокумента Тогда
		МЭДОКлиент.НачатьСозданиеУведомленияОбОтказе(
		Объект.Ссылка,
		ЭтотОбъект,
		ЕстьДоступКМЭДО);
		Отказ = Истина;
		Возврат;
	КонецЕсли;


	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Если ТолькоЧтоСозданныйДокумент И БылПоказанДиалогИнтерактивногоЗапускаОбработки <> Истина Тогда
		ОбработкиОбъектовКлиент.ВыполнитьИнтерактивныйЗапускОбработки(
		ЭтотОбъект, Объект.Ссылка, 
		ВидИнтерактивногоСобытияАвтозапускаОбработки,
		УсловияЗапуска, 
		ПредопределенноеЗначение("Перечисление.ВидыИнтерактивныхДействий.ЗакрытиеКарточкиТолькоЧтоСозданногоДокумента"),
		БылПоказанДиалогИнтерактивногоЗапускаОбработки, Отказ);	
	КонецЕсли;

	ОбщегоНазначенияДокументооборотКлиент.ВставитьВОписаниеОповещенияОЗакрытииСсылкуНаОбъект(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
&После("ПередЗакрытием")
Процедура ЦППК_ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	// Отправляем в обмен ОМиУ если документ изменился.
	Если НЕ ЗавершениеРаботы Тогда
		ЦППК_ОбменКрок(Отказ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементов

&НаКлиенте
Процедура ЦППК_ВидИТематикаТекстПриИзмененииПосле(Элемент)
	// Управляем видимостью реквизитов при изменении вида для заявок на возврат
	ЦППК_ВидимостьРеквизитовЗаявкиНаВозврат();
КонецПроцедуры

&НаСервере
&После("ПриИзмененииВидаДокумента")
Процедура ЦППК_ПриИзмененииВидаДокумента(ПриСозданииНаСервере = Ложь)
	
	//++AxelSoft Шарапова 14.10.2024 САНФ-029365
	Элементы.ЦППК_ЕАСД.Видимость = Ложь;
	//--AxelSoft Шарапова 14.10.2024 САНФ-029365

	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидДокумента, "ТТС_ЯвляетсяЖурналомТУ") = Истина Тогда
		
		Если Элементы.Найти("ТТС_ДанныеЖурналаТаблицаЭДТ") = Неопределено Тогда
			СоздатьЭлементыЖурналыТУ();
		КонецЕсли;
		
	//++AxelSoft Шарапова 08.10.2024 САНФ-029223
	ИначеЕсли ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидДокумента, "ЦППК_ЯвляетсяОтветомЗаявкиНаВозврат") = Истина Тогда
		
		Если Элементы.Найти("ЦППК_ФИОЗаявителя") = Неопределено Тогда 
			СоздатьЭлементыПретензионнаяРабота(Ложь);
		КонецЕсли;		
	//--AxelSoft Шарапова 08.10.2024 САНФ-029223
		
	//++AxelSoft Шарапова 14.10.2024 САНФ-029365
	ИначеЕсли ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидДокумента, "ЯвляетсяИсходящейКорреспонденцией") = Истина
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидДокумента, "ЦППК_ЯвляетсяОтветомЗаявкиНаВозврат") = Ложь Тогда	
		Элементы.ЦППК_ЕАСД.Видимость = Истина;
	//--AxelSoft Шарапова 14.10.2024 САНФ-029365
		
	ИначеЕсли ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидДокумента, "ЯвляетсяЗаявкойНаВозврат") = Истина Тогда
		
		Если Элементы.Найти("ЦППК_ФИОЗаявителяОтвет") = Неопределено Тогда 
			СоздатьЭлементыПретензионнаяРабота();
		КонецЕсли;
		
	КонецЕсли;
	
	ТТС_ЖурналыТУВызовСервера.УправлениеВидимостьюИДоступностью(ЭтаФорма);
	Если Не ЭтоНовыйДокумент Тогда
	
		ЗаполнитьШаблонИПапку();
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
&ИзменениеИКонтроль("УстановитьВидимостьДекорацииОтсутствуетОригинал")
Процедура ЦППК_УстановитьВидимостьДекорацииОтсутствуетОригинал(Видимость)

	Если Элементы.Обзор.Видимость Тогда 
		ЭлементГруппаНадписьОтсутствуетОригинал = Элементы.ГруппаНадписьОтсутствуетОригинал;
	Иначе
		ЭлементГруппаНадписьОтсутствуетОригинал = Элементы.ГруппаНадписьОтсутствуетОригиналСоздание;
	КонецЕсли;

	Если ЭлементГруппаНадписьОтсутствуетОригинал.Видимость <> Видимость Тогда 
		ЭлементГруппаНадписьОтсутствуетОригинал.Видимость = Видимость;
#Вставка
		//{Грошев Александр ТТС [11.01.2017]
		Элементы.ДекорацияОтсутствуетОригинал.Видимость = Видимость;
		//}
#КонецВставки
	КонецЕсли;

КонецПроцедуры

&НаСервере
&После("УстановитьВидимостьКонтрагентов")
Процедура ЦППК_УстановитьВидимостьКонтрагентов()  
	 Возврат;
	// { *Андрей Анохин (ТТС) [23.05.2017]   // для внутренних документов
	Если  ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидДокумента,"ЯвляетсяДоговором") = Истина  Тогда  
		Элементы.Переместить(Элементы.ТТС_ПодразделениеКорреспондента, Элементы.ГруппаСтороны); 
		Элементы.ТТС_ПодразделениеКорреспондента.Заголовок = "Подразделение контрагента"; 
	ИначеЕсли  ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидДокумента,"ЯвляетсяИсходящейКорреспонденцией") = Истина Тогда
		Элементы.Переместить(Элементы.ТТС_ПодразделениеКорреспондента,Элементы.ГруппаКонтрагент, Элементы.ГруппаИндексыСПАРКРиски); 
		Элементы.ТТС_ПодразделениеКорреспондента.Заголовок = "Подразделение получателя"; 
	ИначеЕсли  ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидДокумента,"ЯвляетсяВходящейКорреспонденцией") = Истина Тогда
		Элементы.Переместить(Элементы.ТТС_ПодразделениеКорреспондента,Элементы.ГруппаКонтрагент, Элементы.ГруппаИндексыСПАРКРиски); 
		Элементы.ТТС_ПодразделениеКорреспондента.Заголовок = "Подразделение отправителя"; 		
		//Элементы.ГруппаКонтрагент.Видимость и ВидыДокументов.ВестиУчетПоКонтрагентам;
	ИначеЕсли  ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидДокумента,"ВестиУчетПоКонтрагентам") = Истина Тогда
		Элементы.Переместить(Элементы.ТТС_ПодразделениеКорреспондента,Элементы.ГруппаКонтрагент, Элементы.ГруппаИндексыСПАРКРиски); 
		Элементы.ТТС_ПодразделениеКорреспондента.Заголовок = "Подразделение контрагента"; 
	КонецЕсли;	
	// }        
	
КонецПроцедуры

&НаКлиенте
Процедура ЦППК_ГруппаСтраницыПриСменеСтраницыПосле(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.ГруппаОсновные Тогда
		
		Если Элементы.Найти("ЦППК_ФИОЗаявителя") = Неопределено
			И ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Объект.ВидДокумента, "ЯвляетсяЗаявкойНаВозврат") = Истина Тогда 
			СоздатьЭлементыПретензионнаяРабота();
		КонецЕсли;
		
		//++AxelSoft Шарапова 08.10.2024 САНФ-029223
		Если Элементы.Найти("ЦППК_ФИОЗаявителяОтвет") = Неопределено
			И ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Объект.ВидДокумента, "ЦППК_ЯвляетсяОтветомЗаявкиНаВозврат") = Истина Тогда 
			СоздатьЭлементыПретензионнаяРабота(Ложь);
		КонецЕсли;
		//++AxelSoft Шарапова 08.10.2024 САНФ-029223
		
		//++AxelSoft Шарапова 14.10.2024 САНФ-029365
		Если ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Объект.ВидДокумента, "ЯвляетсяИсходящейКорреспонденцией") = Истина
			И ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Объект.ВидДокумента, "ЦППК_ЯвляетсяОтветомЗаявкиНаВозврат") = Ложь Тогда
			Элементы.ЦППК_ЕАСД.Видимость = Истина;
		КонецЕсли;
		//--AxelSoft Шарапова 14.10.2024 САНФ-029365
		
	ИначеЕсли ТекущаяСтраница = Элементы.ТТС_ДанныеЖурналов Тогда
		
		Если Элементы.Найти("ТТС_ДанныеЖурналаТаблицаЭДТ") = Неопределено Тогда
			СоздатьЭлементыЖурналыТУ();
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаОбработка Тогда
		
		Если Действия.ПолучитьЭлементы().Количество() = 0 Тогда
			
			Если Объект.Ссылка.Пустая() И ЗначениеЗаполнено(ПараметрыВидаОбъекта.ВидОбъекта) Тогда
				ЗаполнитьДействияВФормеПредметаНаСервере();
			КонецЕсли;
			
			Если НЕ Объект.Ссылка.Пустая() Тогда
				ПрочитатьДействияВФормуПредметаНаСервере();
			КонецЕсли;
			
		КонецЕсли;
		
    КонецЕсли;

КонецПроцедуры  

&НаКлиенте 
Процедура ЦППК_ПолеНадписиВноситИзменения_Нажатие(Элемент)
	
	// надо получить массив видов документов, которые можно изменять
	ВидыИзмененныхДокументов = ЦППК_ОбщийМодульВызовСервера.ЦППК_ПолучитьВидыИзмененныхДокументов(Объект.ВидДокумента);
	//
	ТаблицаИзмененныхДокументов = Новый Массив; // массив структур Документ + ДатаОтмены
	Для Каждого Строка Из ЭтаФорма.ЦППК_СписокИзмененныхДокументов Цикл
		ОписаниеДок = Новый Структура("Документ, ДатаОтмены, УжеУстановлен, Источник",
			Строка.Документ, Строка.ДатаОтмены, Строка.УжеУстановлен, Строка.Источник);
		ТаблицаИзмененныхДокументов.Добавить(ОписаниеДок);	
	КонецЦикла;	
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВидыОтменяемыхДокументов", ВидыИзмененныхДокументов);
	ПараметрыФормы.Вставить("ТаблицаДокументов", ТаблицаИзмененныхДокументов);
	ПараметрыФормы.Вставить("Документ", Объект.Ссылка);
	ПараметрыФормы.Вставить("ЗапретитьМенятьСписокОтменяемыхДокументов", Ложь);
	ПараметрыФормы.Вставить("ЭтоФормаИзменения", Истина);
	
	Оповещение = Новый ОписаниеОповещения("ЦППК_ПослеЗакрытияВводИзмененныхДокументов", ЭтаФорма);
	
	ОткрытьФорму("ОбщаяФорма.ВводНеДействующихДокументов", ПараметрыФормы,,,,,
		Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦППК_ПослеЗакрытияВводИзмененныхДокументов(Результат, ПараметрыОповещения) Экспорт
	
	Если Результат <> Неопределено И ТипЗнч(Результат) = Тип("Массив") Тогда
		
		ЭтаФорма.ЦППК_СписокИзмененныхДокументов.Очистить();
		Для Каждого Строка Из Результат Цикл
			НовСтрока = ЭтаФорма.ЦППК_СписокИзмененныхДокументов.Добавить();
			НовСтрока.Документ = Строка.Документ;
			НовСтрока.ДатаОтмены = Строка.ДатаОтмены;
			НовСтрока.Источник = "ИзмененныйДокумент";
			НовСтрока.УжеУстановлен = Строка.УжеУстановлен;
		КонецЦикла;	
		
		Модифицированность = Истина;
		
		Если ЭтаФорма.ЦППК_СписокИзмененныхДокументов.Количество() <> 0 Тогда
			Элементы.ЦППК_ПолеНадписиВноситИзменения.Заголовок = СтрШаблон(
				НСтр("ru = 'Вносит изменения в (%1)'"), ЭтаФорма.ЦППК_СписокИзмененныхДокументов.Количество());
		Иначе
			Элементы.ЦППК_ПолеНадписиВноситИзменения.Заголовок = НСтр("ru = 'Вносит изменения в'");
		КонецЕсли;	
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЦППК_ВставитьШтрихкодPDF(Команда)
	
	ТТС_ОбщийМодуль.ВставитьШтрихкодPDF(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//++AxelSoft Шарапова 06.01.2024 САНФ-029945
&НаСервере
Процедура ЗаполнитьДействияПодписанияВФорме(ПараметрыВидаОбъекта)

	УстановитьПривилегированныйРежим(Истина);
		
	ПараметрыОбъектаОбработки = ДействияКлиентСервер.ПараметрыОбъектаОбработки(Объект.Ссылка, Объект);
	ОбъектОбработки = ПараметрыОбъектаОбработки.ОбъектОбработки;
	ВидОбъекта = ПараметрыВидаОбъекта.ВидОбъекта;
	ОбработкаОбъекта = Справочники.ОбработкиОбъектов.ОбработкаОбъекта(ОбъектОбработки);
	ДатаОбработки = Дата(1, 1, 1);
	Если ЗначениеЗаполнено(ОбработкаОбъекта) Тогда
		ДатаОбработки = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбработкаОбъекта, "ДатаСоздания");
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ДатаОбработки) Тогда
		ДатаОбработки = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ДействияПредмета = ДействияСервер.ТекущиеДействияПредмета(ОбъектОбработки, ВидОбъекта, ДатаОбработки).Выбрать();
	
	Пока ДействияПредмета.Следующий() И НЕ ЕстьДействияПодписания Цикл
		
		Действие = ДействияПредмета.Действие;		
		ВидДействия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДействияПредмета.ВидДействия, "Тип");

		Если ВидДействия = Перечисления.ТипыДействий.Подписание Тогда
			
			ЕстьДействияПодписания = Истина;
			
		КонецЕсли;	
	
	КонецЦикла;
	
	Элементы.ПодписьТекст.Видимость = ЕстьДействияПодписания;
	
КонецПроцедуры
//--AxelSoft Шарапова 06.01.2024 САНФ-029945

&НаСервере
&ИзменениеИКонтроль("ПроверитьВозможностьРегистрации")
Функция ЦППК_ПроверитьВозможностьРегистрации(ТекущийОбъект)
	
	Если Не ПроверитьЗаполнение() Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Результат = Истина;
	
	// Проверка заполненности срока действия документа
	Если ЗначениеЗаполнено(ТекущийОбъект.ВидДокумента)
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийОбъект.ВидДокумента, "УчитыватьСрокДействия") Тогда
		Если ПолучитьФункциональнуюОпцию("УчитыватьСрокДействияДокумента", 
			Новый Структура("ВидДокумента", ТекущийОбъект.ВидДокумента)) Тогда
			Поле = "СрокДействияСтрока";
			Сообщение = НСтр("ru = 'Не заполнена дата начала действия'");
			Если Не ПроверитьЗаполнениеРеквизита(
				ТекущийОбъект.ДатаНачалаДействия,
				НСтр("ru = 'Дата начала действия'"),
				Поле,
				Сообщение) Тогда
				Результат = Ложь;
			КонецЕсли;
#Удаление
			Если Не ТекущийОбъект.Бессрочный Тогда
#КонецУдаления
#Вставка
			//Zayc + 23.05.2016 добавили проверку на реквизит ДоИсполненияОбязательств
			Если Не ТекущийОбъект.Бессрочный и Не ТекущийОбъект.ДоИсполненияОбязательств Тогда  
				//--
#КонецВставки
				Сообщение = НСтр("ru = 'Не заполнена дата окончания действия'");
				Если Не ПроверитьЗаполнениеРеквизита(
					ТекущийОбъект.ДатаОкончанияДействия,
					НСтр("ru = 'Дата окончания действия'"),
					Поле,
					Сообщение) Тогда
					Результат = Ложь;
				КонецЕсли;
				Сообщение = НСтр("ru = 'Не заполнен порядок продления'");
				Если Не ПроверитьЗаполнениеРеквизита(
					ТекущийОбъект.ПорядокПродления,
					НСтр("ru = 'Порядок продления'"),
					Поле,
					Сообщение)Тогда
					Результат = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// проверка уникальности номера, указанного вручную
	Нумератор = Нумерация.ПолучитьНумераторДокумента(ТекущийОбъект);
	Если Не ЗначениеЗаполнено(Нумератор) Тогда 
		Если ЗначениеЗаполнено(РегистрационныйНомер) Тогда 
			ОбъектСтруктура = НумерацияКлиентСервер.ПолучитьПараметрыНумерации(ТекущийОбъект);
			ОбъектСтруктура.Вставить("РегистрационныйНомер", РегистрационныйНомер);
			ОбъектСтруктура.Вставить("ДатаРегистрации", ТекущаяДатаСеанса());
			
			Если Не Делопроизводство.НомерУникален(ОбъектСтруктура) Тогда 
				ОбщегоНазначения.СообщитьПользователю(
					НСтр("ru = 'Указанный регистрационный номер не уникален!'"));
				Возврат Ложь;	
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьНоменклатуруДелВоВнутренних", 
		Новый Структура("ВидДокумента", ТекущийОбъект.ВидДокумента))  
		И Не ЗначениеЗаполнено(ТекущийОбъект.НоменклатураДел) Тогда 
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Поле ""Номенклатура дел"" не заполнено'"),,"Объект.НоменклатураДел");
		Результат = Ложь;
	КонецЕсли;
	
	КоличествоЗанятыхФайлов = РаботаСФайламиВызовСервера.ПолучитьКоличествоЗанятыхФайлов(ТекущийОбъект.Ссылка);
	Если КоличествоЗанятыхФайлов > 0 Тогда
		ОбщегоНазначения.СообщитьПользователю(
			НСтр("ru = 'Документ содержит файлы, занятые для редактирования'"),,,"Файлы");
		Результат = Ложь;
	КонецЕсли;
	
	Делопроизводство.ПроверитьЗаполнениеРеквизитовХраненияВФорме(ЭтотОбъект, Результат);
	
	Если ВестиУчетТоваровИУслуг И УчитыватьНДС Тогда
		ДатаРегистрацииПроверка = ?(ЗначениеЗаполнено(ТекущийОбъект.ДатаРегистрации), ТекущийОбъект.ДатаРегистрации,
			ТекущаяДатаСеанса());
		Для Сч = 0 По ТекущийОбъект.Товары.Количество() - 1 Цикл
			ТекстСообщения = "";
			Если ЗначениеЗаполнено(ТекущийОбъект.Товары[Сч].СтавкаНДС)
				И Не УчетНДС.СтавкаНДСДействует(ТекущийОбъект.Товары[Сч].СтавкаНДС, ДатаРегистрацииПроверка) Тогда
				ТекстСообщения = СтрШаблон(
					НСтр("ru = 'Ставка НДС %1, указанная в строке %2 таблицы ""Товары и услуги"", недействительна на дату регистрации документа.'"),
					ТекущийОбъект.Товары[Сч].СтавкаНДС,
					Сч + 1);
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекстСообщения) Тогда
				Результат = Ложь;
				Путь = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Объект.Товары", Сч + 1, "СтавкаНДС");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Путь);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Не дадим зарегистрировать документ
	// если у него файлы не удовлетворяют ролям.
	Если ЗначениеЗаполнено(ТекущийОбъект.Ссылка) Тогда
		
		ТекстОшибки = "";
		Если Не РаботаСФайламиВызовСервера.ФайлыУдовлетворяютРолям(ТекущийОбъект.Ссылка, ТекстОшибки) Тогда
			
			ОбщегоНазначения.СообщитьПользователю(
				ТекстОшибки,,,"Файлы");
			Результат = Ложь;	
			
		КонецЕсли;	 
		
	Иначе

		ТекстОшибки = "";
		Если Не РаботаСФайламиВызовСервера.ФайлыДобавленныеУдовлетворяютРолям(ФайлыДобавленные, ТекущийОбъект.ВидДокумента, ТекстОшибки) Тогда
			
			ОбщегоНазначения.СообщитьПользователю(
				ТекстОшибки,,,"Файлы");
			Результат = Ложь;	
			
		КонецЕсли;	 
		
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

&НаСервере
&ИзменениеИКонтроль("ВключитьАвтоОтметкуИЗаполнитьПолеОтветственный")
Процедура ЦППК_ВключитьАвтоОтметкуИЗаполнитьПолеОтветственный()

	Если ЗначениеЗаполнено(Объект.ВидДокумента) Тогда 

		ОбязательноеУказаниеОтветственного = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.
		ВидДокумента, "ОбязательноеУказаниеОтветственного");

		Если ОбязательноеУказаниеОтветственного Тогда	

			Элементы.Ответственный.АвтоОтметкаНезаполненного = Истина;

			// только для нового документа это делаем
			Если Не ЗначениеЗаполнено(Объект.Ответственный) И Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
#Удаление 
				Объект.Ответственный = Сотрудники.ОсновнойСотрудник();	
#КонецУдаления
#Вставка
				////Zayc + 17.05.2016 Заменяем автоподстановку Ответственного . В поле вставляем непосредственного руководителя автора документа 
				//ВидыДокументов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ВидДокумента, 
				//"ЯвляетсяДоговором,ЯвляетсяВходящейКорреспонденцией,ЯвляетсяИсходящейКорреспонденцией");
				//Если  ВидыДокументов.ЯвляетсяДоговором ИЛИ НЕ ВидыДокументов.ЯвляетсяВходящейКорреспонденцией ИЛИ ВидыДокументов.ЯвляетсяИсходящейКорреспонденцией Тогда
				//	ТТС_ОсновнойОтветственный = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ТТС_НастройкиОтветственного","ТТС_ОсновнойОтветственный");
				//	Если ЗначениеЗаполнено(ТТС_ОсновнойОтветственный) Тогда
				//		Объект.Ответственный = ТТС_ОсновнойОтветственный;
				//	Иначе  
				//		ПараметрыАлгоритма = Новый Структура("Пользователь", Пользователи.ТекущийПользователь());
				//		Объект.Ответственный = Справочники.Алгоритмы.Вызвать("НепосредственныйРуководительПользователя", ПараметрыАлгоритма);
				//	КонецЕсли;
				//	//Zayc - 17.05.2016
				//Иначе
					Объект.Ответственный = Сотрудники.ОсновнойСотрудник();
				//КонецЕсли;
#КонецВставки		
				Модифицированность = Истина;
			КонецЕсли;	

		Иначе
			Элементы.Ответственный.АвтоОтметкаНезаполненного = Ложь;
			Элементы.Ответственный.ОтметкаНезаполненного = Ложь;
		КонецЕсли;			

	КонецЕсли;		

КонецПроцедуры

&НаСервере
&После("ЗаполнитьСвязи")
Процедура ЦППК_ЗаполнитьСвязи()
	ЦППК_УстановитьНомераПоездовВСвязях();
КонецПроцедуры

&НаСервере
&ИзменениеИКонтроль("ПолучитьТипыСвязей")
Функция ЦППК_ПолучитьТипыСвязей(Основание, ВидДокумента)

	МассивТиповСвязей.Очистить();
	ЧислоПользовательскихСвязей = 0;

	СвязанныйДокумент = Новый Структура("ВидДокумента", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "ВидДокумента"));
	ДокументСтруктура = Новый Структура("ВидДокумента", ВидДокумента);
	ТаблицаНастроекСвязей = СвязиОбъектов.ПолучитьНастройкиСвязи(ДокументСтруктура, СвязанныйДокумент);
#Вставка
	// { *Грошев (ТТС) [29.06.2020]
	Если ВидДокумента.ТТС_ВидЖурналаТУ = Перечисления.ТТС_ВидыЖурналовТУ.Журнал2 ИЛИ
		ВидДокумента.ТТС_ВидЖурналаТУ = Перечисления.ТТС_ВидыЖурналовТУ.Журнал3 Тогда

		Возврат МассивТиповСвязей;
	КонецЕсли;	
	// }
#КонецВставки

	Для Каждого Строка Из ТаблицаНастроекСвязей Цикл

		Если Не СвязиОбъектов.ЭтоПодходящийТипСвязи(Объект.Ссылка, Основание, Строка.ТипСвязи) Тогда
			Продолжить;
		КонецЕсли;

		Если Строка.ХарактерОбратнойСвязи = Перечисления.ХарактерСвязей.Единичная Тогда

			// если связь единичная - надо проверить, что нет уже документов, связанных с основанием связью этого типа
			ДокументыНайденные = СвязиОбъектов.ПолучитьСвязанныеОбъекты(Основание, Строка.ТипОбратнойСвязи);
			Если ДокументыНайденные.Количество() = 0 Тогда
				МассивТиповСвязей.Добавить(Строка.ТипСвязи);
			КонецЕсли;

		Иначе

			МассивТиповСвязей.Добавить(Строка.ТипСвязи);

		КонецЕсли;

	КонецЦикла;

	Для Каждого Строка Из МассивТиповСвязей Цикл
		Если ЗначениеЗаполнено(Строка.Значение) И Не Строка.Значение.Предопределенный Тогда
			ЧислоПользовательскихСвязей = ЧислоПользовательскихСвязей + 1;
		КонецЕсли;	
	КонецЦикла;	

	Возврат МассивТиповСвязей;

КонецФункции

&НаСервере
&ИзменениеИКонтроль("СрокДействияПередЗаписьюНаСервере")
Процедура ЦППК_СрокДействияПередЗаписьюНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	ПараметрыЗаписи.Вставить("СрокДействияКомментарий", СрокДействияКомментарий);
	ПараметрыЗаписи.Вставить("СрокДействияДокументИсточникИзменения", СрокДействияДокументИсточникИзменения);

	Если ТекущийОбъект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ТекущийОбъект.ВидДокумента) 
		Или Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийОбъект.ВидДокумента, "УчитыватьСрокДействия") Тогда
		Возврат;
	КонецЕсли;

	Если Не НачальныеЗначенияРеквизитов[0].НеДействует И ТекущийОбъект.НеДействует Тогда // установлен признак "Не действует"
#Вставка
		//Zayc + 23.05.2016 Устанавливаем начальное заполнение реквизита   
		Если ТекущийОбъект.ДоИсполненияОбязательств Тогда
			ТекущийОбъект.ДоИсполненияОбязательств = ложь;
		КонецЕсли;
		//Zayc - 23.05.2016
#КонецВставки

		Если ЗначениеЗаполнено(НеДействуетВСоответствии) Тогда
			СрокДействияКомментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Действие документа прекращено в соответствии с документом: %1.'"),
			Строка(НеДействуетВСоответствии));
		Иначе
			СрокДействияКомментарий = НСтр("ru = 'Действие документа прекращено.'");
		КонецЕсли;
		СрокДействияДокументИсточникИзменения = НеДействуетВСоответствии;
		ПараметрыЗаписи.Вставить("СрокДействияКомментарий", СрокДействияКомментарий);
		ПараметрыЗаписи.Вставить("СрокДействияДокументИсточникИзменения", НеДействуетВСоответствии);

	КонецЕсли;

КонецПроцедуры

&НаСервере
&ИзменениеИКонтроль("СрокДействияПослеЗаписиНаСервере")
Процедура ЦППК_СрокДействияПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	Если НовыйДокумент
		И СрокДействияЗаполнен()
		Или СрокДействияИзменен(ТекущийОбъект, ПараметрыЗаписи) Тогда
		Запись = РегистрыСведений.ИсторияСроковДействияДокументов.НоваяЗапись();
		Запись.Документ = Объект.Ссылка;
		Запись.ДатаНачалаДействия = Объект.ДатаНачалаДействия;
		Запись.ДатаОкончанияДействия = Объект.ДатаОкончанияДействия;
		Запись.Бессрочный = Объект.Бессрочный;
#Вставка
		//Zayc + 23.05.2016 Записываем в регистр сведений новую запись для реквизита до исполнения обязательств
		Запись.ДоИсполненияОбязательств = Объект.ДоИсполненияОбязательств;
		//Zayc -  23.05.2016 
#КонецВставки
		Запись.ПорядокПродления = Объект.ПорядокПродления;
		Запись.ДокументИсточникИзменения = ПараметрыЗаписи.СрокДействияДокументИсточникИзменения;
		Запись.Комментарий = ПараметрыЗаписи.СрокДействияКомментарий;
		РегистрыСведений.ИсторияСроковДействияДокументов.ДобавитьЗапись(Запись);
	КонецЕсли;

	НачальныйСрокДействияЗаполнен = СрокДействияЗаполнен();
	УчитыватьСрокДействия = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
	Объект.ВидДокумента,
	"УчитыватьСрокДействия");

КонецПроцедуры

&НаКлиенте
&ИзменениеИКонтроль("ИзменитьСрокДействияДокументаПродолжение")
Процедура ЦППК_ИзменитьСрокДействияДокументаПродолжение(Результат, Параметры)

	Если ТипЗнч(Результат) = Тип("Структура") Тогда 
		Объект.ДатаНачалаДействия = Результат.ДатаНачалаДействия;
		Объект.ДатаОкончанияДействия = Результат.ДатаОкончанияДействия;
		Объект.Бессрочный = Результат.Бессрочный; 
#Вставка
		//Zayc + 23.05.2016 Изменения реквизита До исполнения обязательств
		Объект.ДоИсполненияОбязательств = Результат.ДоИсполненияОбязательств;
		//Zayc - 23.05.2016 Изменения реквизита До исполнения обязательств
#КонецВставки
		Объект.ПорядокПродления = Результат.ПорядокПродления;
		СрокДействияДокументИсточникИзменения = Результат.ДокументИсточникИзменения;
		СрокДействияКомментарий = Результат.Комментарий;
		СрокДействияСтрока = ДелопроизводствоКлиентСервер.СформироватьПредставлениеСрокаДействия(
		Объект, СрокДействияКомментарий);
		Модифицированность = Истина;

		Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Обзор Тогда
			ПолучитьОбзорДокумента();
		КонецЕсли;	
	КонецЕсли;	

КонецПроцедуры 

&НаСервере
&После("УстановитьВидимостьДекорацииОтсутствуетОригиналНаСервере")
Процедура ЦППК_УстановитьВидимостьДекорацииОтсутствуетОригиналНаСервере(Видимость)
	//{Грошев Александр ТТС [11.01.2017]
	Элементы.ДекорацияОтсутствуетОригинал.Видимость = Видимость;
	//}
КонецПроцедуры

&НаКлиенте
&ИзменениеИКонтроль("УстановитьДоступностьКоманд")
Процедура ЦППК_УстановитьДоступностьКоманд(ТекущиеДанные)
	
	Если Элементы.Обзор.Видимость Тогда
		Префикс = "";
	Иначе
		Префикс = "Создание";
	КонецЕсли;
	
	Если ТекущиеДанные = Неопределено
		Или ТипЗнч(Элементы["Файлы"+Префикс].ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		
		УстановитьДоступностьКоманды(Элементы["СоздатьФайл"+Префикс], Не Объект.ПодписанЭП);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыСоздать"+Префикс], Не Объект.ПодписанЭП);
		
		УстановитьДоступностьКоманды(Элементы["ВставитьКартинкуИзБуфера"+Префикс], Не Объект.ПодписанЭП);
		
		УстановитьДоступностьКоманды(Элементы["ОткрытьФайл"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыОткрытьФайл"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["Напечатать"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыНапечатать"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["Редактировать"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыРедактировать"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["ЗакончитьРедактирование"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыЗакончитьРедактирование"+Префикс], Ложь);

		УстановитьДоступностьКоманды(Элементы["Изменить"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыИзменить"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["Занять"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыЗанять"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["СохранитьИзменения"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыСохранитьИзменения"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["Удалить"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыУдалить"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["СохранитьКак"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыСохранитьКак"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["Освободить"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыОсвободить"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["ОбновитьИзФайлаНаДиске"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыОбновитьИзФайлаНаДиске"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["Распознать"], Ложь);
		УстановитьДоступностьКоманды(Элементы["ФайлыРаспознать"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыРаспознать"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыПодписатьФайл"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыПодписатьФайл"+Префикс], Ложь);
	                                 
		УстановитьДоступностьКоманды(Элементы["ФайлыДобавитьЭПИзФайла"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыДобавитьЭПИзФайла"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыСохранитьВместеСЭП"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыСохранитьВместеСЭП"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыЗашифровать"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыЗашифровать"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыРасшифровать"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыРасшифровать"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыЗаполнитьФайлДаннымиДокумента"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыЗаполнитьФайлДаннымиДокумента"+Префикс], Ложь);

		УстановитьДоступностьКоманды(Элементы["ФайлыВставитьРегистрационныйНомер"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыВставитьРегистрационныйНомер"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["ВставитьРегистрационныйШтампИШтрихкод"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюВставитьРегистрационныйШтампИШтрихкод"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыВставитьРегистрационныйНомер"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыВставитьРегистрационныйНомер"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыВставитьШтрихкод"+Префикс], Ложь);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыВставитьШтрихкод"+Префикс], Ложь);		
#Вставка
		Если ИспользоватьШК Тогда
			
			УстановитьДоступностьКоманды(Элементы["ЦППК_ВставитьШтрихкодPDF"+Префикс], Ложь);
			УстановитьДоступностьКоманды(Элементы["ЦППК_КонтекстноеМенюФайлыВставитьШтрихкодPDF"+Префикс], Ложь);
			
		КонецЕсли;
#КонецВставки
		
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыСнятьОтметкуСканКопияОригиналаУВсехФайлов"+Префикс], Ложь);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыКонтекстноеМенюОткрытьИсходныйФайл"+Префикс], Ложь);
		
		УстановитьВидимостьКоманды(Элементы["РедактироватьВизуализациюЭП"+Префикс], Ложь);
		УстановитьВидимостьКоманды(Элементы["РедактироватьВизуализациюЭПКонтекстноеМеню"+Префикс], Ложь);
		
		УстановитьВидимостьКоманды(Элементы["ЗакончитьРедактированиеВизуализацииЭП"+Префикс], Ложь);
		УстановитьВидимостьКоманды(Элементы["ЗакончитьРедактированиеВизуализацииЭПКонтекстноеМеню"+Префикс], Ложь);
		
		
	Иначе
		
		РедактируетТекущийПользователь = ТекущиеДанные.РедактируетТекущийПользователь;
		Редактирует = ТекущиеДанные.Редактирует;
		ПодписанЭП = ТекущиеДанные.ПодписанЭП;
		Зашифрован = ТекущиеДанные.Зашифрован;
		СозданПоШаблонуДокумента = ТекущиеДанные.СозданПоШаблонуДокумента;
		РазрешеноРедактирование = Не (ЗапретитьРедактироватьФайлы И СозданПоШаблонуДокумента);
		РазрешеноУдаление = Не (ЗапретитьУдалятьФайлы И СозданПоШаблонуДокумента) 
			И Не ТекущиеДанные.ЭтоДокументЭДО И Не ТекущиеДанные.ЭтоРольФайла;
		ФайлВизуализацииЗанятМной = ТекущиеДанные.ФайлВизуализацииЗанятМной;        
		
		ЭтоОтправленныйЭДОФайл = (ДокументБлокированПоЭДОФайл = ТекущиеДанные.Ссылка); 
		РазрешеноПоЭДО = (Не ДокументБлокированПоЭДО) 
			Или (ДокументБлокированПоЭДО И Не ЭтоОтправленныйЭДОФайл);
		
		УстановитьДоступностьКоманды(Элементы["СоздатьФайл"+Префикс], Не Объект.ПодписанЭП);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыСоздать"+Префикс], Не Объект.ПодписанЭП);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыИмпортФайлов"+Префикс],
			Не Объект.ПодписанЭП И Не ДокументВАрхивеИлиУничтожен);
		
		УстановитьДоступностьКоманды(Элементы["ВставитьКартинкуИзБуфера"+Префикс], Не Объект.ПодписанЭП);
		
		УстановитьДоступностьКоманды(Элементы["ОткрытьФайл"+Префикс], Истина);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыОткрытьФайл"+Префикс], Истина);
		
		УстановитьДоступностьКоманды(Элементы["Напечатать"+Префикс], Истина);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыНапечатать"+Префикс], Истина);
		
		УстановитьДоступностьКоманды(Элементы["Редактировать"+Префикс], 
			НЕ ТекущиеДанные.ПодписанЭП И РазрешеноРедактирование И РазрешеноПоЭДО);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыРедактировать"+Префикс], 
			Не ТекущиеДанные.ПодписанЭП И РазрешеноРедактирование И Не ДокументВАрхивеИлиУничтожен И РазрешеноПоЭДО);
		
		УстановитьДоступностьКоманды(Элементы["ЗакончитьРедактирование"+Префикс], РедактируетТекущийПользователь И РазрешеноРедактирование);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыЗакончитьРедактирование"+Префикс], РедактируетТекущийПользователь И РазрешеноРедактирование);

		УстановитьДоступностьКоманды(Элементы["Изменить"+Префикс], Истина);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыИзменить"+Префикс], Истина);
		
		УстановитьДоступностьКоманды(Элементы["Занять"+Префикс], 
			Не ЗначениеЗаполнено(Редактирует) И РазрешеноРедактирование И РазрешеноПоЭДО);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыЗанять"+Префикс], 
			Не ЗначениеЗаполнено(Редактирует) И РазрешеноРедактирование И Не ДокументВАрхивеИлиУничтожен И РазрешеноПоЭДО);

		УстановитьДоступностьКоманды(Элементы["СохранитьИзменения"+Префикс], РедактируетТекущийПользователь И РазрешеноРедактирование);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыСохранитьИзменения"+Префикс], РедактируетТекущийПользователь И РазрешеноРедактирование);

		УстановитьДоступностьКоманды(Элементы["Удалить"+Префикс], РазрешеноУдаление);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыУдалить"+Префикс], РазрешеноУдаление);
		
		УстановитьДоступностьКоманды(Элементы["СохранитьКак"+Префикс], Истина);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыСохранитьКак"+Префикс], Истина);

		УстановитьДоступностьКоманды(Элементы["Освободить"+Префикс],  ЗначениеЗаполнено(Редактирует) И РазрешеноРедактирование);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыОсвободить"+Префикс],  ЗначениеЗаполнено(Редактирует) И РазрешеноРедактирование);

		УстановитьДоступностьКоманды(Элементы["ОбновитьИзФайлаНаДиске"+Префикс], 
			РазрешеноРедактирование И РазрешеноПоЭДО);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыОбновитьИзФайлаНаДиске"+Префикс], 
			РазрешеноРедактирование И Не ДокументВАрхивеИлиУничтожен И РазрешеноПоЭДО);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыКонтекстноеМенюВыбратьРольФайла"+Префикс], 
			Не ДокументВАрхивеИлиУничтожен);
		
		Расширение = ТекущиеДанные.Расширение;
		ИспользоватьImageMagickДляРаспознаванияPDF = ФайловыеФункцииКлиентПовтИсп.ПолучитьПерсональныеНастройкиРаботыСФайлами().ИспользоватьImageMagickДляРаспознаванияPDF;
		ПрограммаРаспознавания = РаботаСФайламиКлиентПовтИсп.ПрограммаРаспознавания();
		РасширениеПоддерживается = РаботаСФайламиКлиентСервер.ЭтотФайлМожноРаспознать(
			Расширение, ИспользоватьImageMagickДляРаспознаванияPDF, ПрограммаРаспознавания, ТаймлистИспользуется);
		ДоступноРаспознаваниеПоЗапросу = РаботаСФайламиКлиентПовтИсп.ДоступноРаспознаваниеПоЗапросу();
		ЭтоРасширениеТаймлист = ТаймлистКлиентСервер.ЭтоРасширениеФайлаТаймлист(Расширение);
		ЭтоPdf = (НРег(Расширение) = "pdf"); 
		ДоступнаВставкаШтрихкодаИРегНомера = 
			ЭтоPdf И ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗаполнено(Объект.РегистрационныйНомер); 
			
		ДоступнаВставитьРегистрационныйНомер = 
			ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗаполнено(Объект.РегистрационныйНомер) 
			И Не ПодписанЭП И Не ЗначениеЗаполнено(Редактирует);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыРаспознать"+Префикс],
			РасширениеПоддерживается
			И (Не ЭтоРасширениеТаймлист
					И ДоступноРаспознаваниеПоЗапросу
					И ТекущиеДанные.СтатусРаспознаванияТекста
						<> ПредопределенноеЗначение("Перечисление.СтатусыРаспознаванияТекста.Распознано")
					И ТекущиеДанные.СтатусРаспознаванияТекста
						<> ПредопределенноеЗначение("Перечисление.СтатусыРаспознаванияТекста.Распознается")
				Или ЭтоРасширениеТаймлист
					И ДоступноРаспознаваниеТаймлист
					И Не ЗначениеЗаполнено(ТекущиеДанные.ТаймлистСтатус)
					И Не ЗначениеЗаполнено(ТекущиеДанные.ТаймлистЗадание))
			И Не ЗначениеЗаполнено(Редактирует)
			И Не ДокументВАрхивеИлиУничтожен);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыРаспознать"+Префикс],
			Элементы["ФайлыРаспознать" + Префикс].Доступность);
		УстановитьДоступностьКоманды(Элементы["Распознать"],
			Элементы["ФайлыРаспознать" + Префикс].Доступность);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыПодписатьФайл"+Префикс],
			Не ЗначениеЗаполнено(Редактирует) И НЕ Зашифрован И Не ДокументВАрхивеИлиУничтожен);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыПодписатьФайл"+Префикс],
			Не ЗначениеЗаполнено(Редактирует) И НЕ Зашифрован И Не ДокументВАрхивеИлиУничтожен);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыДобавитьЭПИзФайла"+Префикс],
		Не ЗначениеЗаполнено(Редактирует) И НЕ Зашифрован И Не ДокументВАрхивеИлиУничтожен);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыДобавитьЭПИзФайла"+Префикс],
			Не ЗначениеЗаполнено(Редактирует) И НЕ Зашифрован И Не ДокументВАрхивеИлиУничтожен);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыСохранитьВместеСЭП"+Префикс], ПодписанЭП);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыСохранитьВместеСЭП"+Префикс], ПодписанЭП);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыЗашифровать"+Префикс], 
			Не ЗначениеЗаполнено(Редактирует) И НЕ Зашифрован И Не ДокументВАрхивеИлиУничтожен);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыЗашифровать"+Префикс],
			Не ЗначениеЗаполнено(Редактирует) И НЕ Зашифрован И Не ДокументВАрхивеИлиУничтожен);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыРасшифровать"+Префикс], Зашифрован);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыРасшифровать"+Префикс], Зашифрован);

		УстановитьДоступностьКоманды(Элементы["ФайлыЗаполнитьФайлДаннымиДокумента"+Префикс],
			ТекущиеДанные.СозданИзШаблона И Не ЗначениеЗаполнено(Редактирует) И Не Зашифрован И Не ПодписанЭП);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыЗаполнитьФайлДаннымиДокумента"+Префикс],
			ТекущиеДанные.СозданИзШаблона И Не ЗначениеЗаполнено(Редактирует) И Не Зашифрован И Не ПодписанЭП);
			
		УстановитьДоступностьКоманды(Элементы["ВставитьРегистрационныйШтампИШтрихкод"+Префикс],
			ДоступнаВставкаШтрихкодаИРегНомера);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюВставитьРегистрационныйШтампИШтрихкод"+Префикс],
			ДоступнаВставкаШтрихкодаИРегНомера);
		
		УстановитьДоступностьКоманды(Элементы["ФайлыВставитьШтрихкод"+Префикс],
			Не ЗначениеЗаполнено(Редактирует) И Не ПодписанЭП);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыВставитьШтрихкод"+Префикс],
			Не ЗначениеЗаполнено(Редактирует) И Не ПодписанЭП И Не ДокументВАрхивеИлиУничтожен);
#Вставка
		Если ИспользоватьШК Тогда
			
			УстановитьДоступностьКоманды(Элементы["ЦППК_ВставитьШтрихкодPDF"+Префикс], Не ЗначениеЗаполнено(Редактирует));
			УстановитьДоступностьКоманды(Элементы["ЦППК_КонтекстноеМенюФайлыВставитьШтрихкодPDF"+Префикс], Не ЗначениеЗаполнено(Редактирует));
			
		КонецЕсли;
#КонецВставки
		
		УстановитьДоступностьКоманды(Элементы["ФайлыВставитьРегистрационныйНомер"+Префикс],
			ДоступнаВставитьРегистрационныйНомер);
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыВставитьРегистрационныйНомер"+Префикс],
			ДоступнаВставитьРегистрационныйНомер И Не ДокументВАрхивеИлиУничтожен);
		
		УстановитьДоступностьКоманды(Элементы["КонтекстноеМенюФайлыСнятьОтметкуСканКопияОригиналаУВсехФайлов"+Префикс],
			Не Элементы.Оригинал.ТолькоПросмотр);
		
		РасширениеДляАвтовизуализации = РаботаСФайламиКлиентСервер.ЭтоРасширениеДляАвтовизуализации(Расширение);
		УстановитьДоступностьКоманды(Элементы["ФайлыКонтекстноеМенюОткрытьИсходныйФайл"+Префикс],
			АвтовизуализацияЭП И ПодписанЭП И РасширениеДляАвтовизуализации);
			
		ВидныКомандыВизуализации = АвтовизуализацияЭП 
			И (ПодписанЭП Или ДокументПодписан)
			И РасширениеДляАвтовизуализации 
			И (ЕстьРольРедактированиеВизуализацииЭП Или ТекПользовательПодготовилДокумент);
		
		УстановитьВидимостьКоманды(Элементы["РедактироватьВизуализациюЭП"+Префикс], 
			ВидныКомандыВизуализации);
		УстановитьВидимостьКоманды(Элементы["РедактироватьВизуализациюЭПКонтекстноеМеню"+Префикс], 
			ВидныКомандыВизуализации);
		
		УстановитьВидимостьКоманды(Элементы["ЗакончитьРедактированиеВизуализацииЭП"+Префикс], 
			ВидныКомандыВизуализации И ФайлВизуализацииЗанятМной);
		УстановитьВидимостьКоманды(Элементы["ЗакончитьРедактированиеВизуализацииЭПКонтекстноеМеню"+Префикс], 
			ВидныКомандыВизуализации И ФайлВизуализацииЗанятМной);
		
	КонецЕсли;
	
	УстановитьВидимостьКоманды(
		Элементы["ПерезаполнитьФайлыИзШаблона" + Префикс], ЕстьФайлыШаблона И Не Объект.ПодписанЭП);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьДействияВФормуПредметаНаСервере()
	
	ДействияСобытия.ПриЧтенииПредметаНаСервере(ЭтотОбъект, Параметры, ПараметрыВидаОбъекта);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДействияВФормеПредметаНаСервере()
	
	ДействияСобытия.ПриСозданииФормыПредметаНаСервере(ЭтотОбъект, Параметры, ПараметрыВидаОбъекта);
	
КонецПроцедуры

#Область СлужебныеПроцедурыИФункции_ОМиУ

// Ручная выгрузка документа в ОМиУ
&НаКлиенте
Процедура ЦППК_ВыгрузитьВомиу(Команда)
	
	//СтрокаДанныхВХранилищеТемп = ЭтаФорма["СтрокаДанныхВХранилище"];
	//ЭтаФорма["СтрокаДанныхВХранилище"] = "";
	//
	//ФайлыБольше10МБ = ЦППК_ТочкаВходаВОбменПередЗакрытием();
	//ЭтаФорма["СтрокаДанныхВХранилище"] = СтрокаДанныхВХранилищеТемп; 
	
	ФайлыБольше10МБ = ЦППК_ТочкаВходаВОбменПередЗакрытием(Объект.Ссылка, Истина);
	Если ЗначениеЗаполнено(ФайлыБольше10МБ) тогда
		ТекстВопроса = "Файлы больше 10 МБ не выгружены в ОМиУ: " + Символы.ПС + ФайлыБольше10МБ;					
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстВопроса); 		
	КонецЕсли;
	
КонецПроцедуры

// Процедуры и функции для регистрации входящих документов для выгрузки в ОМиУ
&НаСервере
Процедура ЦППК_ТочкаВходаВОбменНачало(УникальныйИдентификаторФормы) Экспорт
	
	//Не используется. Перенесено в событие передзаписью
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	
	Если ЗначениеЗаполнено(ТекОбъект.Ссылка) тогда
		Зарегистрирован = ТТС_ОбщийМодуль.ПроверкаРегистрацииДокумента(ТекОбъект.Ссылка);
		Если Зарегистрирован И ЦППК_ЭтоДокументОбращениеПассажираОМиУ(ТекОбъект) тогда 
			ПервоначальнаяИнициализация = Истина; 
			ТТС_ОбщийМодуль.ИнициализацияДанных(ЭтаФорма ,ПервоначальнаяИнициализация, УникальныйИдентификаторФормы, ЭтаФорма["СтрокаДанныхВХранилище"]);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЦППК_ТочкаВходаВОбменПередЗакрытием(Ссылка, ПринудительнаяВыгрузка) Экспорт
	//Попытка
	//	ТекОбъект = РеквизитФормыВЗначение("Объект");
	//Исключение
	//	Возврат "";
	//КонецПопытки;
	//ФайлыБольше10МБ = "";
	//
	//Если ЗначениеЗаполнено(ТекОбъект.Ссылка) тогда
	//	Зарегистрирован = ТТС_ОбщийМодуль.ПроверкаРегистрацииДокумента(ТекОбъект.Ссылка);
	//	
	//	Если Зарегистрирован И ЦППК_ЭтоДокументОбращениеПассажираОМиУ(ТекОбъект) тогда 
	//		ФайлыБольше10МБ = ТТС_ОбщийМодуль.ИнициализацияДанных(ЭтаФорма ,,, ЭтаФорма["СтрокаДанныхВХранилище"]);
	//	КонецЕсли;
	//	
	//КонецЕсли;
	//
	//Возврат ФайлыБольше10МБ;
	
	ФайлыБольше10МБ = "";
	Если ЗначениеЗаполнено(Ссылка) тогда
		//Зарегистрирован = ТТС_ОбщийМодуль.ПроверкаРегистрацииДокумента(Объект.Ссылка);
		//
		//Если Зарегистрирован И ЦППК_ЭтоДокументОбращениеПассажираОМиУ(Объект) тогда 
			ФайлыБольше10МБ = ТТС_ОбщийМодуль.ПодготовитьСообщенияДокументаКОтправке(Ссылка, ПринудительнаяВыгрузка);
		//КонецЕсли;
		
	КонецЕсли;
	Возврат ФайлыБольше10МБ;
	
КонецФункции

&НаКлиенте
Функция ЦППК_ОбменКрок(Отказ)

	//Желательно перенести в событие "ПослеЗаписи"	
	Если ЭтотОбъект.КлючевыеРеквизитыИзменились ИЛИ ЭтотОбъект.ДобавленыФайлы Тогда
		
		ФайлыБольше10МБ = ЦППК_ТочкаВходаВОбменПередЗакрытием(Объект.Ссылка, ЭтотОбъект.КлючевыеРеквизитыИзменились);
		ЭтотОбъект.КлючевыеРеквизитыИзменились = Ложь;
		ЭтотОбъект.ДобавленыФайлы = Ложь;
		
		Если ЗначениеЗаполнено(ФайлыБольше10МБ) тогда
			Если ЗакрытьНезарегистрированныйДокумент <> Истина тогда
				ПараметрыОбработчика = Новый Структура;
				ПараметрыОбработчика.Вставить("Отказ", Отказ);
				ОписаниеОповещения = Новый ОписаниеОповещения(
				"ПродолжениеПередЗакрытием",
				ЭтотОбъект,
				ПараметрыОбработчика);
				
				ТекстВопроса = "Файлы больше 10 МБ не выгружены в ОМиУ: " + Символы.ПС + ФайлыБольше10МБ + Символы.ПС +  "Закрыть карточку?";
				ПоказатьВопрос(
				ОписаниеОповещения,
				ТекстВопроса, 
				РежимДиалогаВопрос.ДаНет);
				Отказ = Истина;
			КонецЕсли;
			
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ЦППК_ЭтоДокументОбращениеПассажираОМиУ(Документ)
	
	ОбращениеПассажираОМиУ = Ложь;
	
	Если НЕ Документ.Тематика.Пустая() Тогда
		ОбращениеПассажираОМиУ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ.Тематика, "ТТС_ОбращениеПассажираОМиУ") = Истина;
	КонецЕсли;
	
	Возврат ОбращениеПассажираОМиУ;
	
КонецФункции

#КонецОбласти   

#Область СлужебныеПроцедурыИФункции_ПретензионнаяРабота

&НаКлиенте
Процедура ЦППК_МестоРассмотренияПриИзменении(Элемент)
	ЦППК_ВидимостьРеквизитовЗаявкиНаВозврат();
КонецПроцедуры

&НаКлиенте
Процедура ЦППК_МестоРассмотренияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекущееМестоРассмотрения = Объект.МестоРассмотрения;
КонецПроцедуры

&НаКлиенте
Процедура ЦППК_ФИОзаявителяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь; 

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Новый Структура("Родитель", ПредопределенноеЗначение("Справочник.ФизическиеЛица.Граждане")));
	ОписаниеОповещения = Новый ОписаниеОповещения("ЦППК_ФИОзаявителяНачалоВыбораЗавершение", ЭтотОбъект);	
	ОткрытьФорму("Справочник.ФизическиеЛица.ФормаВыбора",ПараметрыФормы,,ЭтаФорма,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры  

&НаКлиенте
Процедура ЦППК_ФИОзаявителяНачалоВыбораЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Объект.ФИОЗаявителя_ТТС = Результат;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦППК_СтанцияПринявшаяЗаявление_ТТСПриИзменении(Элемент)
	ЦППК_СтанцияПринявшаяЗаявление_ТТСПриИзмененииНаСервере();
КонецПроцедуры 

// Меняем дату срока исполнения в зависимости от даты заявления
&НаКлиенте
Процедура ЦППК_ДатаЗаявления_ТТСПриИзменении(Элемент)
	
	Если Объект.ДатаЗаявления_ТТС > ТекущаяДата() Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Дата заявления не может быть больше текущей даты!'"),,"Объект.ДатаЗаявления_ТТС");
		Объект.ДатаЗаявления_ТТС = Дата(1,1,1);
		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДатаЗаявления_ТТС) Тогда
		
		Если Объект.МестоРассмотрения = ПредопределенноеЗначение("Перечисление.МестоРассмотренияПоДокументуЗВДС.ПретензионнаяКасса") Тогда
			Объект.СрокИсполнения = Объект.ДатаЗаявления_ТТС + (10*24*60*60);
		Иначе
			Объект.СрокИсполнения = Объект.ДатаЗаявления_ТТС + (25*24*60*60);
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦППК_ДатаПолученияСоСтанцииПриИзменении(Элемент)
	
	Если НачалоДня(Объект.ДатаПолученияСоСтанции) < НачалоДня(Объект.ДатаЗаявления_ТТС) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Дата получения со станции не может быть меньше даты заявления!'"),,"Объект.ДатаПолученияСоСтанции");
		Объект.ДатаПолученияСоСтанции = Дата(1,1,1);
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦППК_ДатаПолученияСоСтанцииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НачалоДня(ВыбранноеЗначение) < НачалоДня(Объект.ДатаЗаявления_ТТС) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Дата получения со станции не может быть меньше даты заявления!'"),,"Объект.ДатаПолученияСоСтанции");
		СтандартнаяОбработка = ложь;
		возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦППК_ФИОБК_ТТСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Новый Структура("Родитель", ПредопределенноеЗначение("Справочник.ФизическиеЛица.Кассиры")));
	ОписаниеОповещения = Новый ОписаниеОповещения("ЦППК_ФИОБК_ТТСЗавершение", ЭтотОбъект);	
	ОткрытьФорму("Справочник.ФизическиеЛица.ФормаВыбора",ПараметрыФормы,,ЭтаФорма,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры 

&НаКлиенте
Процедура ЦППК_ФИОБК_ТТСЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Объект.ФИОБК_ТТС = Результат;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЦППК_СтанцияПринявшаяЗаявление_ТТСПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.СтанцияПринявшаяЗаявление_ТТС) и Не ТТС_ОбщийМодуль.НайтиСоответствияКассыИСтанции(Объект) Тогда
		Элементы.ДатаПолученияСоСтанции.Видимость = Истина ;
		Элементы.ДатаПолученияСоСтанции.АвтоОтметкаНезаполненного = Истина;
	Иначе
		Элементы.ДатаПолученияСоСтанции.Видимость = Ложь ;
		Объект.ДатаПолученияСоСтанции = Дата(1,1,1);
	КонецЕсли;
	
КонецПроцедуры

// Управляем видимостью реквизитного состава формы в зависимости от вида документа.
&НаСервере
Процедура ЦППК_ВидимостьРеквизитовЗаявкиНаВозврат()
	
	Если НЕ ЗначениеЗаполнено(Объект.ВидДокумента) Тогда
		Возврат;
	КонецЕсли;
		
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидДокумента, "ЯвляетсяЗаявкойНаВозврат") тогда
		
		ЦППК_МестоРассмотренияНаСервере();
		Папка1 = Справочники.ПапкиДокументов.НайтиПоНаименованию("Заявления на возврат денежных средств по претензии");
		Объект.Папка = ?(Папка1 = Неопределено, Справочники.ПапкиДокументов.ПустаяСсылка(),Папка1); 
		
		// переносим типовые элементы 
		//блок 1
		Элементы.Переместить(Элементы.Заголовок, Элементы.БлокЗаголовок); 
		Элементы.Заголовок.ТолькоПросмотр = Истина;
		Элементы.Переместить(Элементы.КомментарийРеквизит, Элементы.Блок1,Элементы.ГруппаСтанции); 
		
		//группа регномер
		Элементы.Переместить(Элементы.РегистрационныйНомер, Элементы.ПодГруппаРеквизитыНомер);
		Элементы.РегистрационныйНомер.ТолькоПросмотр = Истина; 
		Элементы.Переместить(Элементы.ДатаРегистрации, Элементы.ПодГруппаРеквизитыНомер); 
		Элементы.ДатаРегистрации.ТолькоПросмотр = Истина; 
		
		Элементы.Переместить(Элементы.СрокИсполнения, Элементы.ГруппаСрок,Элементы.История); 
		Элементы.СрокИсполнения.Заголовок = "Срок рассмотрения заявления";
		Элементы.СрокИсполнения.ТолькоПросмотр = Истина;    
		
		Элементы.Переместить(Элементы.Папка, Элементы.ГруппаБлок1Право,Элементы.ВидДокумента1); 
		Элементы.Переместить(Элементы.СостояниеТекст, Элементы.ГруппаБлок1Право,Элементы.ПретензионнаяКасса); 
		Элементы.Переместить(Элементы.ГрифДоступа, Элементы.ГруппаБлок1Право,Элементы.ПретензионнаяКасса);
		Элементы.Переместить(Элементы.ВопросДеятельности, Элементы.ГруппаБлок1Право,Элементы.ПретензионнаяКасса);
		Элементы.Переместить(Элементы.Проект, Элементы.ГруппаБлок1Право,Элементы.ПретензионнаяКасса);
		
		// группа Кому
		Элементы.Переместить(Элементы.ГруппаХранение, Элементы.ГруппаБлок1Право,Элементы.ГруппаДобавитьФайл1);
		Элементы.Переместить(Элементы.Организация, Элементы.ГруппаКому1);
		Элементы.Переместить(Элементы.АдресатВходящейКорреспонденции, Элементы.ГруппаКому1);   
		Элементы.Переместить(Элементы.СпособПолучения, Элементы.ГруппаКому1); 			
		
		// добавитьфайл
		Элементы.Переместить(Элементы.ДобавитьФайл, Элементы.ГруппаДобавитьФайл1);
		
		Элементы.ГруппаЭлемента.Видимость = Ложь;
		Элементы.ГруппаЗаявкаНаВозврат.Видимость = Истина;
		
		ЦППК_СтанцияПринявшаяЗаявление_ТТСПриИзмененииНаСервере();
		
		Если Не ЗначениеЗаполнено(Объект.МестоРассмотрения) Тогда
			Элементы.ДатаЗаявления_ТТС.Доступность = Ложь;
			Элементы.Документы.Видимость = Ложь;
		Иначе
			Элементы.ДатаЗаявления_ТТС.Доступность = Истина;
			Элементы.Документы.Видимость = Истина;
		КонецЕсли; 
		
		Если Объект.МестоРассмотрения = Перечисления.МестоРассмотренияПоДокументуЗВДС.ЦентральныйОфис Тогда
			Элементы.Блок3.Видимость = Истина;
			Элементы.Блок2.Видимость = Истина; 
		Иначе
			Элементы.Блок3.Видимость = Ложь;
			Элементы.Блок2.Видимость = Ложь; 
		КонецЕсли; 
		
		Если Объект.РешениеЦО = Перечисления.РешенияПоДокументамЗВДС_ЦО.РассмотрениеНаСтанции Тогда
			Элементы.Блок3.Видимость = Ложь;
		КонецЕсли; 
		
		Если Объект.МестоРассмотрения = Перечисления.МестоРассмотренияПоДокументуЗВДС.ПретензионнаяКасса Тогда
			
			Элементы.РешениеСтанции.АвтоВыборНезаполненного = Истина;
			Если Объект.РешениеСтанции = Перечисления.РешенияПоДокументамЗВДС.Возврат тогда
				Элементы.МестоВозврата.АвтоВыборНезаполненного = Истина ;
			Иначе
				Элементы.МестоВозврата.АвтоВыборНезаполненного = Ложь ;
			КонецЕсли;
			
		Иначе
			Элементы.РешениеСтанции.АвтоВыборНезаполненного = Ложь;
		КонецЕсли;
		
		Если Не Пользователи.ЭтоПолноправныйПользователь() тогда
			Если ЗначениеЗаполнено(Объект.ДатаЗакрытияBI) И ЗначениеЗаполнено(Объект.ИсходящийНомерОтвета_ТТС) тогда
				
				Элементы.Блок3.Доступность = Ложь;
				Элементы.Блок2.Доступность = Ложь; 
				Элементы.Блок1.Доступность = Ложь; 
			КонецЕсли;
			Если ЗначениеЗаполнено(Объект.ДатаПередачиЗаявленийСРезолюциейУУДвСОП_ТТС) и ЗначениеЗаполнено(Объект.ДатаПолученияЗаявления_ТТС) тогда
				Элементы.Блок2.Доступность = Ложь;    
			КонецЕсли;
			Если РольДоступна("ДобавлениеИзменениеЗамещающихИПомощников") Тогда
				
				Элементы.Блок2.Доступность = Истина;    
				
			КонецЕсли;
		КонецЕсли;
		// Затычка
		// 1. Место рассмотрения = ПК и (не заполнено Решение станции ИЛИ Решение станции НЕ Рассмотрение в ЦО) - отображаем Блок 1 полностью, Блоки 2 и 3 скрываем			
		Если Объект.МестоРассмотрения = Перечисления.МестоРассмотренияПоДокументуЗВДС.ПретензионнаяКасса И
			(НЕ ЗначениеЗаполнено(Объект.РешениеСтанции) или Объект.РешениеСтанции <> Перечисления.РешенияПоДокументамЗВДС.РассмотрениеВЦО) Тогда
			
			Элементы.Блок3.Видимость = Ложь;
			Элементы.Блок2.Видимость = Ложь; 
			Элементы.Блок1.Видимость = Истина;
			
		КонецЕсли;
		// 2. Место рассмотрения = ПК и Решение станции = Рассмотрение в ЦО - отображаем полностью Блоки 1, 2, 3			
		Если Объект.МестоРассмотрения = Перечисления.МестоРассмотренияПоДокументуЗВДС.ПретензионнаяКасса И
			
			Объект.РешениеСтанции = Перечисления.РешенияПоДокументамЗВДС.РассмотрениеВЦО Тогда
			Элементы.Блок3.Видимость = Истина;
			Элементы.Блок2.Видимость = Истина; 
			Элементы.Блок1.Видимость = Истина;
			
		КонецЕсли;
		// 3. Место рассмотрения = ЦО и (не заполнено Решение ЦО ИЛИ Решение ЦО НЕ Рассмотрение на станции) - отображаем Блоки 2 и 3, не отображаем РешениеСтанции из Блока 1			
		Если Объект.МестоРассмотрения = Перечисления.МестоРассмотренияПоДокументуЗВДС.ЦентральныйОфис И
			(НЕ ЗначениеЗаполнено(Объект.РешениеЦО) или Объект.РешениеЦО <> Перечисления.РешенияПоДокументамЗВДС_ЦО.РассмотрениеНаСтанции) Тогда
			
			Элементы.Блок3.Видимость = Истина;
			Элементы.Блок2.Видимость = Истина; 
			Элементы.Блок1.Видимость = Истина;
			Элементы.РешениеСтанции.Видимость = Ложь;
			Элементы.ДатаРешения_ТТС.Видимость = Ложь;
			
		КонецЕсли;
		// 4. Место рассмотрения = ЦО и Решение ЦО = Рассмотрение на станции - отображаем Блок 1 полностью (включая РешениеСтанции), отображаем Блок 2, скрываем Блок 3			
		Если Объект.МестоРассмотрения = Перечисления.МестоРассмотренияПоДокументуЗВДС.ЦентральныйОфис И
			
			Объект.РешениеЦО = Перечисления.РешенияПоДокументамЗВДС_ЦО.РассмотрениеНаСтанции Тогда
			Элементы.Блок3.Видимость = Ложь;
			Элементы.Блок2.Видимость = Истина; 
			Элементы.Блок1.Видимость = Истина; 
			Элементы.РешениеСтанции.Видимость = Истина;
			Элементы.ДатаРешения_ТТС.Видимость = Истина;
			
		КонецЕсли; 
		
	Иначе 
		
		Элементы.ГруппаЗаявкаНаВозврат.Видимость = Ложь;
		Элементы.ГруппаЭлемента.Видимость = Истина;
				
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ЦППК_МестоРассмотренияНаСервере()

	Если Объект.МестоРассмотрения = Перечисления.МестоРассмотренияПоДокументуЗВДС.ЦентральныйОфис или Объект.РешениеСтанции = Перечисления.РешенияПоДокументамЗВДС.РассмотрениеВЦО Тогда

		Элементы.ГруппаБлок23.Видимость = Истина;
		Элементы.КвитанцияОбОплатеБанкКартой_ТТС.Видимость = Истина;
		Элементы.КвитанцияОбОплатеБанкКартой_ТТС.АвтоОтметкаНезаполненного = Истина;
		
		Если Объект.РешениеЦО = Перечисления.РешенияПоДокументамЗВДС_ЦО.РассмотрениеНаСтанции Тогда
			Элементы.РешениеСтанции.Видимость = Истина;
			Элементы.ДатаРешения_ТТС.Видимость = истина;
			Если Объект.РешениеСтанции = Перечисления.РешенияПоДокументамЗВДС.Возврат тогда
				Элементы.МестоВозврата.Видимость = Истина;
				Если Объект.МестоВозврата = Перечисления.МестоВозвратаПоДокументуЗВДС.Станция  Тогда
					Элементы.СтанцияВозврата.Видимость = Истина;
				Иначе
					Элементы.СтанцияВозврата.Видимость = Ложь;
				КонецЕсли;
			Иначе
				Элементы.МестоВозврата.Видимость = Ложь;
				Элементы.СтанцияВозврата.Видимость = ложь;	
			КонецЕсли;
		Иначе
			Элементы.МестоВозврата.Видимость = Ложь;
			Элементы.СтанцияВозврата.Видимость = ложь;	
		КонецЕсли;
		
		Если Объект.МестоРассмотрения = Перечисления.МестоРассмотренияПоДокументуЗВДС.ЦентральныйОфис Тогда
			Элементы.КвитанцияОбОплатеБанкКартой_ТТС.Видимость = Истина;
		Иначе
			Элементы.КвитанцияОбОплатеБанкКартой_ТТС.Видимость = Ложь;
		КонецЕсли;

	ИначеЕсли Объект.МестоРассмотрения = Перечисления.МестоРассмотренияПоДокументуЗВДС.ПретензионнаяКасса Тогда
		Элементы.ГруппаБлок23.Видимость = Ложь;
		Элементы.РешениеСтанции.Видимость = Истина;
		Элементы.ДатаРешения_ТТС.Видимость = Истина;
		
		Если Объект.РешениеСтанции = Перечисления.РешенияПоДокументамЗВДС.Возврат тогда
			Элементы.МестоВозврата.Видимость = Истина;
			Если Объект.МестоВозврата = Перечисления.МестоВозвратаПоДокументуЗВДС.Станция Тогда
				Элементы.СтанцияВозврата.Видимость = Истина;
			Иначе
				Элементы.СтанцияВозврата.Видимость = Ложь;
			КонецЕсли;
		Иначе
			Элементы.МестоВозврата.Видимость = Ложь;
			Элементы.СтанцияВозврата.Видимость = ложь;
		КонецЕсли;
		
		Элементы.КвитанцияОбОплатеБанкКартой_ТТС.Видимость = Ложь;

	ИначеЕсли НЕ ЗначениеЗаполнено(Объект.МестоРассмотрения) Тогда
		Элементы.ГруппаБлок23.Видимость = Ложь;
		Элементы.РешениеСтанции.Видимость = Ложь;
		Элементы.ДатаРешения_ТТС.Видимость = Ложь;
		Элементы.КвитанцияОбОплатеБанкКартой_ТТС.Видимость = Ложь;
		Элементы.МестоВозврата.Видимость = Ложь;
		Элементы.СтанцияВозврата.Видимость = Ложь;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.МестоРассмотрения) Тогда
		Элементы.МестоРассмотрения.ЦветТекстаЗаголовка  = ЦветаСтиля.ЦветОсобогоТекста;
	иначе
		Элементы.МестоРассмотрения.ЦветТекстаЗаголовка  = ЦветаСтиля.ЦветТекстаФормы;
	КонецЕсли;
	
	Если НЕ Объект.РешениеСтанции = Перечисления.РешенияПоДокументамЗВДС.Возврат тогда	
		Элементы.ДатаПередачи.Видимость = Ложь;     
	Иначе
		Элементы.ДатаПередачи.Видимость = Истина;     
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.РешениеЦО) Тогда
		
		ДоступныеРешения = Новый Массив;
		ДоступныеРешения.Добавить(Перечисления.РешенияПоДокументамЗВДС.Возврат); 
		ЭтаФорма.Элементы.РешениеСтанции.СписокВыбора.Очистить();
		ЭтаФорма.Элементы.РешениеСтанции.СписокВыбора.ЗагрузитьЗначения(ДоступныеРешения);
		
	Иначе
		
		ДоступныеРешения = Новый Массив;
		ДоступныеРешения.Добавить(Перечисления.РешенияПоДокументамЗВДС.РассмотрениеВЦО);
		ДоступныеРешения.Добавить(Перечисления.РешенияПоДокументамЗВДС.Возврат);
		ЭтаФорма.Элементы.РешениеСтанции.СписокВыбора.Очистить();
		ЭтаФорма.Элементы.РешениеСтанции.СписокВыбора.ЗагрузитьЗначения(ДоступныеРешения);
		
	КонецЕсли; 

	Если (НЕ ЗначениеЗаполнено(Объект.СрокИсполнения) или (Объект.ДатаЗаявления_ТТС <> Объект.Ссылка.ДатаЗаявления_ТТС)) 
		ИЛИ (ЭтаФорма["ТекущееМестоРассмотрения"] <> Объект.МестоРассмотрения) Тогда
		
		Если Объект.МестоРассмотрения = Перечисления.МестоРассмотренияПоДокументуЗВДС.ЦентральныйОфис
			Или Объект.РешениеСтанции = Перечисления.РешенияПоДокументамЗВДС.РассмотрениеВЦО Тогда
			
			Если ЗначениеЗаполнено(Объект.ДатаЗаявления_ТТС) Тогда
				Объект.СрокИсполнения = Объект.ДатаЗаявления_ТТС + (25*24*60*60);
			КонецЕсли;
			
		ИначеЕсли Объект.МестоРассмотрения = Перечисления.МестоРассмотренияПоДокументуЗВДС.ПретензионнаяКасса Тогда
			
			Если ЗначениеЗаполнено(Объект.ДатаЗаявления_ТТС) Тогда
				Объект.СрокИсполнения = Объект.ДатаЗаявления_ТТС + (10*24*60*60);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

Конецпроцедуры

&НаКлиенте
Процедура ЦППК_РешениеПоЗаявлениюПриИзменении(Элемент)
	
	ЭтаФорма.ПерезаполнитьДействия_ТТС = Истина;
	Если ЗначениеЗаполнено(Объект.РешениеСтанции) Тогда
		Объект.ДатаРешения_ТТС = ТекущаяДата();
	КонецЕсли;  
	
	ЦППК_МестоРассмотренияНаСервере();
	
	Если Объект.РешениеСтанции = ПредопределенноеЗначение("Перечисление.РешенияПоДокументамЗВДС.РассмотрениеВЦО") Тогда
		Объект.СрокИсполнения = Объект.ДатаЗаявления_ТТС + (25*24*60*60);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ЦППК_МестоВозвратаПриИзменении(Элемент)
	ЦППК_МестоРассмотренияНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ЦППК_ИсторияНажатие(Элемент)
	
	Если Объект.Ссылка = Неопределено тогда
		возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Отбор", Новый Структура("Документ", Объект.Ссылка));
	ОткрытьФорму("РегистрСведений.ИсторияСроковДокументов.ФормаСписка", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦППК_РешениеЦОПриИзменении(Элемент)
	
	ЭтаФорма.ПерезаполнитьДействия_ТТС = Истина;

	// Обработка заполнение реквизита Дата передачи в СОП
	Если ЗначениеЗаполнено(Объект.РешениеЦО) и Не ЗначениеЗаполнено(Объект.ДатаПередачиЗаявленийСРезолюциейУУДвСОП_ТТС) Тогда
		Объект.ДатаПередачиЗаявленийСРезолюциейУУДвСОП_ТТС = ТекущаяДата();	
	КонецЕсли;
	
	ЦППК_МестоРассмотренияНаСервере(); 
	
	//++AxelSoft Шарапова 08.10.2024 САНФ-029221      
	ЦППК_РешениеЦОПриИзмененииНаСервере();
	//--AxelSoft Шарапова 08.10.2024 САНФ-029221      
	
КонецПроцедуры

&НаКлиенте
&После("Подключаемый_ПриИзмененииДополнительногоРеквизита")
Процедура ЦППК_Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	
	ТребуетсяСогласование = ЦППК_УникальноеИмяДопРеквизита_ТребуетсяСогласование(Объект.ВидДокумента);
	Если Элементы.Найти(ТребуетсяСогласование) <> Неопределено И Элемент.Имя = ТребуетсяСогласование Тогда
		ЗаписатьДействияПриПереключенииСтраниц();		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЦППК_УникальноеИмяДопРеквизита_ТребуетсяСогласование(ВидДокумента) 
	
	УстановитьПривилегированныйРежим(Истина);
	
	Набор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидДокумента, "НаборСвойств");
	
	Результат  = "";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВЫБОР
	|		КОГДА Наборы.ПометкаУдаления
	|			ТОГДА &ПустойНабор
	|		ИНАЧЕ Наборы.Ссылка
	|	КОНЕЦ КАК Набор,
	|	Наборы.Свойство
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК Наборы
	|ГДЕ
	|	Наборы.Ссылка = &Ссылка
	|	И Наборы.Свойство.Заголовок = &Наименование";
 
	
	Запрос.УстановитьПараметр("Наименование", "Требуется согласование");
	Запрос.УстановитьПараметр("Ссылка", Набор);
	Запрос.УстановитьПараметр("ПустойНабор", Справочники.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка());
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() тогда
						
		ИмяУникальнаяЧасть = 
		СтрЗаменить(ВРег(Строка(Выборка.Набор.УникальныйИдентификатор())), "-", "x")
		+ "_"
		+ СтрЗаменить(ВРег(Строка(Выборка.Свойство.УникальныйИдентификатор())), "-", "x");
		
		Результат = "ДополнительныйРеквизитЗначение_" + ИмяУникальнаяЧасть;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура СоздатьЭлементыПретензионнаяРабота(Входящий = Истина)
	
	//++AxelSoft Шарапова 08.10.2024 САНФ-029223
	//	Добавлен параметр Входящий, если вид документа с флагом "ЯвляетсяЗаявкойНаВозврат", то заполняем форму претензионной работы,
	//	если вид документа с флагом "ЦППК_ЯвляетсяОтветомЗаявкиНаВозврат", то заполняем ФИОЗаявителяОтвет
	//--AxelSoft Шарапова 08.10.2024 САНФ-029223 
        	
	Если Входящий Тогда
		
		// ФИО Заявителя для  Ответ на Заявление на возврат денежных средств по претензии
		//НовыйЭлемент = Элементы.Вставить("ФИОзаявителяОтвет", Тип("ПолеФормы"), Элементы.ГруппаЛево, Элементы.ГруппаПолучатель); 
		//НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;  
		//НовыйЭлемент.ПутьКДанным = "Объект.ФИОЗаявителя_ТТС";
		//НовыйЭлемент.Заголовок = НСтр("ru = 'ФИО заявителя'");   
		//НовыйЭлемент.РастягиватьПоГоризонтали = Истина;
		//НовыйЭлемент.АвтоОтметкаНезаполненного = Истина;
		//НовыйЭлемент.УстановитьДействие("НачалоВыбора","ЦППК_ФИОзаявителяНачалоВыбора");
		//НовыйЭлемент.УстановитьДействие("Создание","ЦППК_ФИОзаявителяСоздание");
		//
		//МассивЗначенияГраждане = Новый Массив();
		//МассивЗначенияГраждане.Добавить(Справочники.ФизическиеЛица.Граждане);
		//
		//ЗначениеГраждане = Новый ФиксированныйМассив(МассивЗначенияГраждане);
		//ПараметрРодитель = Новый ПараметрВыбора("Отбор.Родитель", ЗначениеГраждане);
		//
		//МассивПараметров = Новый Массив;
		//МассивПараметров.Добавить(ПараметрРодитель);
		//
		//НовыйЭлемент.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
		
		// Группа Блок 1 с реквизитами
		НоваяГруппа = Элементы.Добавить("ГруппаЗаявкаНаВозврат", Тип("ГруппаФормы"), Элементы.ГруппаОсновные);
		НоваяГруппа.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
		НоваяГруппа.Отображение         = ОтображениеОбычнойГруппы.Нет;
		НоваяГруппа.ОтображатьЗаголовок = Ложь;  
		НоваяГруппа.Объединенная = Ложь; 
		
		НоваяГруппа = Элементы.Добавить("ГруппаБлок1", Тип("ГруппаФормы"), Элементы.ГруппаЗаявкаНаВозврат);
		НоваяГруппа.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
		НоваяГруппа.Отображение         = ОтображениеОбычнойГруппы.Нет;
		НоваяГруппа.ОтображатьЗаголовок = Ложь; 
		НоваяГруппа.Объединенная = ложь;
		НоваяГруппа.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда; 
		
		НоваяГруппа = Элементы.Добавить("ГруппаБлок1Лево", Тип("ГруппаФормы"), Элементы.ГруппаБлок1);
		НоваяГруппа.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
		НоваяГруппа.Отображение         = ОтображениеОбычнойГруппы.ОбычноеВыделение;
		НоваяГруппа.ОтображатьЗаголовок = Ложь;
		НоваяГруппа.Объединенная = Истина; 
		НоваяГруппа.Ширина = 40;
		НоваяГруппа.СквозноеВыравнивание = СквозноеВыравнивание.Использовать;
		НоваяГруппа.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;  
		
		НоваяГруппа = Элементы.Добавить("Блок1", Тип("ГруппаФормы"), Элементы.ГруппаБлок1Лево);
		НоваяГруппа.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
		НоваяГруппа.Отображение         = ОтображениеОбычнойГруппы.Нет; 
		НоваяГруппа.Заголовок = НСтр("ru = 'Блок 1 для заполнения кассиром ПК'");
		НоваяГруппа.ШрифтЗаголовка =  Новый Шрифт(, , Истина);
		НоваяГруппа.ОтображатьЗаголовок = Истина;
		НоваяГруппа.Объединенная = Истина; 
		НоваяГруппа.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная; 
		
		НоваяГруппа = Элементы.Добавить("БлокЗаголовок", Тип("ГруппаФормы"), Элементы.Блок1);
		НоваяГруппа.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
		НоваяГруппа.Отображение         = ОтображениеОбычнойГруппы.Нет;
		НоваяГруппа.ОтображатьЗаголовок = Ложь;
		НоваяГруппа.Объединенная = Истина; 
		НоваяГруппа.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная; 		
		
		НовыйЭлемент = Элементы.Добавить("МестоРассмотрения", Тип("ПолеФормы"), Элементы.Блок1); 
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;  
		НовыйЭлемент.ПутьКДанным = "Объект.МестоРассмотрения"; 
		НовыйЭлемент.АвтоОтметкаНезаполненного = Истина;
		НовыйЭлемент.ЦветТекстаЗаголовка = WebЦвета.Красный;
		НовыйЭлемент.УстановитьДействие("ПриИзменении","ЦППК_МестоРассмотренияПриИзменении"); 
		НовыйЭлемент.УстановитьДействие("НачалоВыбора","ЦППК_МестоРассмотренияНачалоВыбора"); 
		
		НовыйЭлемент = Элементы.Добавить("ЦППК_ВидПД", Тип("ПолеФормы"), Элементы.Блок1); 
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;  
		НовыйЭлемент.ПутьКДанным = "Объект.ЦППК_ВидПД"; 
		НовыйЭлемент.АвтоОтметкаНезаполненного = Истина;     
		
		НовыйЭлемент = Элементы.Добавить("ЦППК_НаименованиеЭлектронногоНосителя", Тип("ПолеФормы"), Элементы.Блок1); 
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;  
		НовыйЭлемент.ПутьКДанным = "Объект.ЦППК_НаименованиеЭлектронногоНосителя"; 
		НовыйЭлемент.АвтоОтметкаНезаполненного = Истина;
		
		НовыйЭлемент = Элементы.Добавить("ЦППК_НомерЭлектронногоНосителя", Тип("ПолеФормы"), Элементы.Блок1); 
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;  
		НовыйЭлемент.ПутьКДанным = "Объект.ЦППК_НомерЭлектронногоНосителя"; 
		НовыйЭлемент.АвтоОтметкаНезаполненного = Истина;
		
		НовыйЭлемент = Элементы.Добавить("ЦППК_СпособОплаты", Тип("ПолеФормы"), Элементы.Блок1); 
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;  
		НовыйЭлемент.ПутьКДанным = "Объект.ЦППК_СпособОплаты"; 
		НовыйЭлемент.АвтоОтметкаНезаполненного = Истина;
		
		НовыйЭлемент = Элементы.Добавить("ЦППК_ПричинаОбращения", Тип("ПолеФормы"), Элементы.Блок1); 
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;  
		НовыйЭлемент.ПутьКДанным = "Объект.ЦППК_ПричинаОбращения"; 
		
		НоваяГруппа = Элементы.Добавить("БлокЗаголовокГруппа1", Тип("ГруппаФормы"), Элементы.Блок1);  // Группа7
		НоваяГруппа.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
		НоваяГруппа.Отображение         = ОтображениеОбычнойГруппы.СлабоеВыделение;
		НоваяГруппа.ОтображатьЗаголовок = Ложь; 
		НоваяГруппа.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		НоваяГруппа.Объединенная = Истина; 
		НоваяГруппа.ШиринаПодчиненныхЭлементов = ШиринаПодчиненныхЭлементовФормы.Одинаковая;
		
		НоваяГруппа = Элементы.Добавить("ГруппаТолькоОтправитель1", Тип("ГруппаФормы"), Элементы.БлокЗаголовокГруппа1);
		НоваяГруппа.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
		НоваяГруппа.Отображение         = ОтображениеОбычнойГруппы.Нет;
		НоваяГруппа.ОтображатьЗаголовок = Ложь; 
		НоваяГруппа.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная; 
		НоваяГруппа.Подсказка           = НСтр("ru = 'Группа только отправитель'");
		
		//НовыйЭлемент = Элементы.Добавить("ФИОзаявителя", Тип("ПолеФормы"), Элементы.ГруппаТолькоОтправитель1); 
		//НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;  
		//НовыйЭлемент.ПутьКДанным = "Объект.ФИОЗаявителя_ТТС";
		//НовыйЭлемент.Заголовок = НСтр("ru = 'ФИО заявителя'");   
		//НовыйЭлемент.РастягиватьПоГоризонтали = Истина;
		//НовыйЭлемент.АвтоОтметкаНезаполненного = Истина;
		//НовыйЭлемент.УстановитьДействие("НачалоВыбора","ЦППК_ФИОзаявителяНачалоВыбора");  
		//
		//МассивЗначенияГраждане = Новый Массив();
		//МассивЗначенияГраждане.Добавить(Справочники.ФизическиеЛица.Граждане);
		//
		//ЗначениеГраждане = Новый ФиксированныйМассив(МассивЗначенияГраждане);
		//ПараметрРодитель = Новый ПараметрВыбора("Отбор.Родитель", ЗначениеГраждане);
		//
		//МассивПараметров = Новый Массив;
		//МассивПараметров.Добавить(ПараметрРодитель);
		//
		//НовыйЭлемент.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
		
		//++AxelSoft Шарапова 08.10.2024 САНФ-029223
		НовыйЭлемент = Элементы.Добавить("ЦППК_ФИОЗаявителя", Тип("ПолеФормы"), Элементы.ГруппаТолькоОтправитель1); 
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;  
		НовыйЭлемент.ПутьКДанным = "Объект.ЦППК_ФИОЗаявителя"; 
		НовыйЭлемент.Заголовок = НСтр("ru = 'ФИО заявителя'");   
		НовыйЭлемент.РастягиватьПоГоризонтали = Истина;
		НовыйЭлемент.АвтоОтметкаНезаполненного = Истина;
		//--AxelSoft Шарапова 08.10.2024 САНФ-029223
		
		НовыйЭлемент = Элементы.Добавить("СтанцияПринявшаяЗаявление_ТТС", Тип("ПолеФормы"), Элементы.ГруппаТолькоОтправитель1); 
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;  
		НовыйЭлемент.ПутьКДанным = "Объект.СтанцияПринявшаяЗаявление_ТТС";
		НовыйЭлемент.Заголовок = НСтр("ru = 'Станция принятия'");  
		НовыйЭлемент.АвтоОтметкаНезаполненного = Истина; 
		НовыйЭлемент.РастягиватьПоГоризонтали = Истина;
		НовыйЭлемент.УстановитьДействие("ПриИзменении","ЦППК_СтанцияПринявшаяЗаявление_ТТСПриИзменении");
		
		НоваяГруппа = Элементы.Добавить("ГруппаТолькоОтправитель2", Тип("ГруппаФормы"), Элементы.БлокЗаголовокГруппа1);
		НоваяГруппа.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
		НоваяГруппа.Отображение         = ОтображениеОбычнойГруппы.Нет;
		НоваяГруппа.ОтображатьЗаголовок = Ложь; 
		НоваяГруппа.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная; 
		
		НовыйЭлемент = Элементы.Добавить("ДатаЗаявления_ТТС", Тип("ПолеФормы"), Элементы.ГруппаТолькоОтправитель2); 
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;  
		НовыйЭлемент.ПутьКДанным = "Объект.ДатаЗаявления_ТТС";
		НовыйЭлемент.Заголовок = НСтр("ru = 'Дата заявления'");   
		НовыйЭлемент.Подсказка = НСтр("ru = 'Дата заявления - фактическая дата подачи заявления физическим лицом, это НЕ ДАТА ПОЛУЧЕНИЯ ЗАЯВЛЕНИЯ В ПРЕТЕНЗИОННОЙ КАССЕ'");
		НовыйЭлемент.АвтоОтметкаНезаполненного = Истина;   
		НовыйЭлемент.РастягиватьПоГоризонтали = Истина;
		НовыйЭлемент.УстановитьДействие("ПриИзменении","ЦППК_ДатаЗаявления_ТТСПриИзменении");                           
		
		НовыйЭлемент = Элементы.Добавить("ДатаПолученияСоСтанции", Тип("ПолеФормы"), Элементы.ГруппаТолькоОтправитель2); 
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;  
		НовыйЭлемент.ПутьКДанным = "Объект.ДатаПолученияСоСтанции";
		НовыйЭлемент.РастягиватьПоГоризонтали = Истина;
		НовыйЭлемент.Подсказка = НСтр("ru = 'Дата передачи заявления в претензионную кассу, т.е. день, когда Вы получили заявление со станции принятия'");
		НовыйЭлемент.УстановитьДействие("ПриИзменении","ЦППК_ДатаПолученияСоСтанцииПриИзменении"); 
		НовыйЭлемент.УстановитьДействие("ОбработкаВыбора","ЦППК_ДатаПолученияСоСтанцииОбработкаВыбора"); 
		
		НоваяГруппа = Элементы.Добавить("ГруппаБилетногоКассира", Тип("ГруппаФормы"), Элементы.Блок1);
		НоваяГруппа.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
		НоваяГруппа.Отображение         = ОтображениеОбычнойГруппы.Нет;
		НоваяГруппа.ОтображатьЗаголовок = Ложь; 
		НоваяГруппа.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная; 
		
		НовыйЭлемент = Элементы.Добавить("ФИОБК_ТТС", Тип("ПолеФормы"), Элементы.ГруппаБилетногоКассира); 
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;  
		НовыйЭлемент.ПутьКДанным = "Объект.ФИОБК_ТТС";
		НовыйЭлемент.Заголовок = НСтр("ru = 'Фамилия билетного кассира'");   
		НовыйЭлемент.Подсказка = НСтр("ru = 'В поле «Фамилия» укажите себя (а не кассира, который принял заявление на линии)'");
		НовыйЭлемент.АвтоОтметкаНезаполненного = Истина;   
		НовыйЭлемент.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка; 
		НовыйЭлемент.УстановитьДействие("НачалоВыбора","ЦППК_ФИОБК_ТТСНачалоВыбора"); 
		
		МассивЗначенияКассиры = Новый Массив();
		МассивЗначенияКассиры.Добавить(Справочники.ФизическиеЛица.Кассиры);
		
		ЗначениеКассиры = Новый ФиксированныйМассив(МассивЗначенияКассиры);
		ПараметрРодитель = Новый ПараметрВыбора("Отбор.Родитель", ЗначениеКассиры);
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(ПараметрРодитель);
		
		НовыйЭлемент.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
		
		НоваяГруппа = Элементы.Добавить("Документы", Тип("ГруппаФормы"), Элементы.Блок1);
		НоваяГруппа.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
		НоваяГруппа.Отображение         = ОтображениеОбычнойГруппы.Нет;
		НоваяГруппа.Заголовок 			= НСтр("ru = 'Документы'"); 
		НоваяГруппа.ШрифтЗаголовка		=  Новый Шрифт(, , Истина);
		НоваяГруппа.ОтображатьЗаголовок = Истина; 
		НоваяГруппа.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная; 
		
		// список выбора для элементов
		СписокВыбора = Новый Массив;
		СписокВыбора.Добавить("Оригинал");     
		СписокВыбора.Добавить("Копия"); 
		СписокВыбора.Добавить("Нет");
		
		НовыйЭлемент = Элементы.Добавить("ТранспортнаяКарта_ТТС", Тип("ПолеФормы"), Элементы.Документы); 
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;  
		НовыйЭлемент.ПутьКДанным = "Объект.ТранспортнаяКарта_ТТС";
		НовыйЭлемент.Заголовок = НСтр("ru = 'Транспортная карта'");   
		НовыйЭлемент.АвтоОтметкаНезаполненного = Истина;   
		НовыйЭлемент.РежимВыбораИзСписка = Истина;
		НовыйЭлемент.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);	
		НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;
		
		НовыйЭлемент = Элементы.Добавить("КвитанцияОбОформлении_ТТС", Тип("ПолеФормы"), Элементы.Документы); 
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;  
		НовыйЭлемент.ПутьКДанным = "Объект.КвитанцияОбОформлении_ТТС";
		НовыйЭлемент.Заголовок = НСтр("ru = 'Квитанция об оформлении'");   
		НовыйЭлемент.АвтоОтметкаНезаполненного = Истина;   
		НовыйЭлемент.РежимВыбораИзСписка = Истина;
		НовыйЭлемент.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);					
		НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;
		
		НовыйЭлемент = Элементы.Добавить("КвитанцияОбОплатеБанкКартой_ТТС", Тип("ПолеФормы"), Элементы.Документы); 
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;  
		НовыйЭлемент.ПутьКДанным = "Объект.КвитанцияОбОплатеБанкКартой_ТТС";
		НовыйЭлемент.Заголовок = НСтр("ru = 'Квитанция об оплате банк. картой'");   
		НовыйЭлемент.АвтоОтметкаНезаполненного = Истина;   
		НовыйЭлемент.РежимВыбораИзСписка = Истина;
		НовыйЭлемент.СписокВыбора.ЗагрузитьЗначения(СписокВыбора);	
		НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;
		
		НовыйЭлемент = Элементы.Добавить("Другое_ТТС", Тип("ПолеФормы"), Элементы.Документы); 
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;  
		НовыйЭлемент.ПутьКДанным = "Объект.Другое_ТТС";
		НовыйЭлемент.Заголовок = НСтр("ru = 'Дополнительные документы'");  
		НовыйЭлемент.Подсказка = НСтр("ru = 'В поле «Дополнительные документы» пишите сведения о прочих документах, остальную информацию хранить в поле «Комментарий»'");
		НовыйЭлемент.ПодсказкаВвода = НСтр("ru = 'В поле пишите сведения о прочих предоставленных пассажиром ДОКУМЕНТАХ'"); 
		
		НоваяГруппа = Элементы.Добавить("ГруппаСтанции", Тип("ГруппаФормы"), Элементы.Блок1);  //Группа10
		НоваяГруппа.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
		НоваяГруппа.Отображение         = ОтображениеОбычнойГруппы.СлабоеВыделение;
		НоваяГруппа.ОтображатьЗаголовок = ложь; 
		НоваяГруппа.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная; 
		
		НоваяГруппа = Элементы.Добавить("ГруппаРешениеСтанции", Тип("ГруппаФормы"), Элементы.ГруппаСтанции);  //Группа6
		НоваяГруппа.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
		НоваяГруппа.Отображение         = ОтображениеОбычнойГруппы.СлабоеВыделение;
		НоваяГруппа.ОтображатьЗаголовок = ложь; 
		НоваяГруппа.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда; 
		НоваяГруппа.ШиринаПодчиненныхЭлементов = ШиринаПодчиненныхЭлементовФормы.ЛевыйШирокий;
		
		НовыйЭлемент = Элементы.Добавить("РешениеСтанции", Тип("ПолеФормы"), Элементы.ГруппаРешениеСтанции); 
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;  
		НовыйЭлемент.ПутьКДанным = "Объект.РешениеСтанции";
		НовыйЭлемент.Ширина = 2;   
		НовыйЭлемент.УстановитьДействие("ПриИзменении","ЦППК_РешениеПоЗаявлениюПриИзменении");
		НовыйЭлемент.РежимВыбораИзСписка = Истина;
		НовыйЭлемент.КнопкаВыбора = Ложь;
		
		НовыйЭлемент = Элементы.Добавить("ДатаРешения_ТТС", Тип("ПолеФормы"), Элементы.ГруппаРешениеСтанции); 
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;  
		НовыйЭлемент.ПутьКДанным = "Объект.ДатаРешения_ТТС";
		НовыйЭлемент.Заголовок = НСтр("ru = 'Дата решения'"); 
		НовыйЭлемент.Подсказка = НСтр("ru = 'В поле Дата решения подставляется текущая дата при изменении реквизита ""Решение по заявлению""'");
		НовыйЭлемент.Ширина = 2; 
		НовыйЭлемент.РастягиватьПоГоризонтали = Истина;	
		
		НоваяГруппа = Элементы.Добавить("ГруппаМестоВозврата", Тип("ГруппаФормы"), Элементы.ГруппаСтанции);  //Группа11
		НоваяГруппа.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
		НоваяГруппа.Отображение         = ОтображениеОбычнойГруппы.нет;
		НоваяГруппа.ОтображатьЗаголовок = ложь; 
		НоваяГруппа.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная; 
		
		НовыйЭлемент = Элементы.Добавить("МестоВозврата", Тип("ПолеФормы"), Элементы.ГруппаМестоВозврата); 
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;  
		НовыйЭлемент.ПутьКДанным = "Объект.МестоВозврата";
		НовыйЭлемент.КнопкаВыпадающегоСписка = Истина;   
		НовыйЭлемент.УстановитьДействие("ПриИзменении","ЦППК_МестоВозвратаПриИзменении"); 
		
		НовыйЭлемент = Элементы.Добавить("СтанцияВозврата", Тип("ПолеФормы"), Элементы.ГруппаМестоВозврата); 
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;  
		НовыйЭлемент.ПутьКДанным = "Объект.СтанцияВозврата";
		НовыйЭлемент.Ширина = 15;      
		НовыйЭлемент.РастягиватьПоГоризонтали = Истина;
		
		НовыйЭлемент = Элементы.Добавить("ДатаПередачи", Тип("ПолеФормы"), Элементы.ГруппаМестоВозврата); 
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;  
		НовыйЭлемент.ПутьКДанным = "Объект.ДатаПередачи";
		НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;
		
		// группа реквизиты					
		НоваяГруппа = Элементы.Добавить("ГруппаБлок1Право", Тип("ГруппаФормы"), Элементы.ГруппаБлок1);
		НоваяГруппа.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
		НоваяГруппа.Отображение         = ОтображениеОбычнойГруппы.ОбычноеВыделение;
		НоваяГруппа.ОтображатьЗаголовок = Истина; 
		НоваяГруппа.Заголовок = НСтр("ru = 'Реквизиты'");  
		НоваяГруппа.Объединенная = Истина; 
		НоваяГруппа.Ширина = 40; 
		НоваяГруппа.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;  
		НоваяГруппа.ШрифтЗаголовка =  Новый Шрифт(, , Истина);  
		
		НоваяГруппа = Элементы.Добавить("группаРеквизитыНомер", Тип("ГруппаФормы"), Элементы.ГруппаБлок1Право);  //Группа12
		НоваяГруппа.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
		НоваяГруппа.Отображение         = ОтображениеОбычнойГруппы.нет;
		НоваяГруппа.ОтображатьЗаголовок = ложь;  
		НоваяГруппа.Объединенная = Истина; 
		НоваяГруппа.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная; 
		
		НоваяГруппа = Элементы.Добавить("ПодГруппаРеквизитыНомер", Тип("ГруппаФормы"), Элементы.группаРеквизитыНомер);  //Группа9
		НоваяГруппа.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
		НоваяГруппа.Отображение         = ОтображениеОбычнойГруппы.нет;
		НоваяГруппа.ОтображатьЗаголовок = ложь; 
		НоваяГруппа.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда; 
		
		НоваяГруппа = Элементы.Добавить("ГруппаСрок", Тип("ГруппаФормы"), Элементы.группаРеквизитыНомер);  //Группа2
		НоваяГруппа.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
		НоваяГруппа.Отображение         = ОтображениеОбычнойГруппы.нет;
		НоваяГруппа.ОтображатьЗаголовок = ложь; 
		НоваяГруппа.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда; 
		
		// команда История 
		НоваяКоманда = Команды.Добавить("История");
		НоваяКоманда.Действие  = "ЦППК_ИсторияНажатие";//Имя процедуры
		НоваяКоманда.Заголовок = НСтр("ru = 'История'");
		
		НовыйЭлемент = Элементы.Добавить("История", Тип("КнопкаФормы"),  Элементы.ГруппаСрок);      //Элементы.ГруппаНомер 
		НовыйЭлемент.ИмяКоманды = "История";
		НовыйЭлемент.Отображение  = ОтображениеКнопки.Картинка;            
		//НовыйЭлемент.Картинка = БиблиотекаКартинок.ИсторияИзменений; 
		
		// папка новый в 3.0
		НовыйЭлемент = Элементы.Добавить("ВидДокумента1", Тип("ПолеФормы"), Элементы.ГруппаБлок1Право); 
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода; 
		НовыйЭлемент.КнопкаОткрытия = Ложь;
		НовыйЭлемент.Ширина = 20; 
		НовыйЭлемент.ЦветФона = ЦветаСтиля.ФонУправляющегоПоля;
		НовыйЭлемент.ПутьКДанным = "Объект.ВидДокумента"; 
		НовыйЭлемент.ТолькоПросмотр = Истина;
		
		НовыйЭлемент = Элементы.Добавить("ПретензионнаяКасса", Тип("ПолеФормы"), Элементы.ГруппаБлок1Право); 
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода; 
		НовыйЭлемент.Заголовок = НСтр("ru = 'Претензионная касса'");
		НовыйЭлемент.ПутьКДанным = "Объект.ПретензионнаяКасса"; 
		НовыйЭлемент.ТолькоПросмотр = Истина;
		
		НоваяГруппа = Элементы.Добавить("ГруппаКому1", Тип("ГруппаФормы"), Элементы.ГруппаБлок1Право);  
		НоваяГруппа.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
		НоваяГруппа.Отображение         = ОтображениеОбычнойГруппы.ОбычноеВыделение;
		НоваяГруппа.ОтображатьЗаголовок = Истина; 
		НоваяГруппа.Заголовок = НСтр("ru = 'Кому'");  
		НоваяГруппа.Объединенная = Истина; 
		НоваяГруппа.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;  
		НоваяГруппа.ШрифтЗаголовка =  Новый Шрифт(, , Истина);
		
		НоваяГруппа = Элементы.Добавить("ГруппаСумма1", Тип("ГруппаФормы"), Элементы.ГруппаБлок1Право); 
		НоваяГруппа.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
		НоваяГруппа.Отображение         = ОтображениеОбычнойГруппы.Нет;
		НоваяГруппа.ОтображатьЗаголовок = ложь; 
		НоваяГруппа.Объединенная = Истина; 
		
		НоваяГруппа = Элементы.Добавить("ГруппаДобавитьФайл1", Тип("ГруппаФормы"), Элементы.ГруппаБлок1Право);  
		НоваяГруппа.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
		НоваяГруппа.Отображение         = ОтображениеОбычнойГруппы.Нет;
		НоваяГруппа.ОтображатьЗаголовок = Истина; 
		НоваяГруппа.Заголовок = НСтр("ru = 'Добавить файл'");  
		НоваяГруппа.Объединенная = Истина; 
		НоваяГруппа.ШрифтЗаголовка =  Новый Шрифт(, , Истина);
		
		НоваяГруппа = Элементы.Добавить("ГруппаБлок23", Тип("ГруппаФормы"), Элементы.ГруппаЗаявкаНаВозврат);
		НоваяГруппа.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
		НоваяГруппа.Отображение         = ОтображениеОбычнойГруппы.СлабоеВыделение;
		НоваяГруппа.ОтображатьЗаголовок = Ложь; 
		НоваяГруппа.Объединенная 		= Истина;
		НоваяГруппа.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		
		НоваяГруппа = Элементы.Добавить("Блок2", Тип("ГруппаФормы"), Элементы.ГруппаБлок23);
		НоваяГруппа.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
		НоваяГруппа.Отображение         = ОтображениеОбычнойГруппы.нет;
		НоваяГруппа.Заголовок 			= НСтр("ru = 'Блок 2 для заполнения УУД'");
		НоваяГруппа.ОтображатьЗаголовок = Истина; 
		НоваяГруппа.Объединенная 		= Истина;
		НоваяГруппа.ШрифтЗаголовка		= Новый Шрифт(, , Истина); 
		НоваяГруппа.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
		
		НовыйЭлемент = Элементы.Добавить("ДатаПолученияЗаявления_ТТС", Тип("ПолеФормы"), Элементы.Блок2);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода; 
		НовыйЭлемент.ПутьКДанным = "Объект.ДатаПолученияЗаявления_ТТС";
		НовыйЭлемент.Заголовок = НСтр("ru = 'Дата получения заявления'");
		
		НовыйЭлемент = Элементы.Добавить("РешениеЦО", Тип("ПолеФормы"), Элементы.Блок2);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода; 
		НовыйЭлемент.ПутьКДанным = "Объект.РешениеЦО";
		НовыйЭлемент.Заголовок = НСтр("ru = 'Решение по заявлению'");
		НовыйЭлемент.УстановитьДействие("ПриИзменении","ЦППК_РешениеЦОПриИзменении");      
		
		НовыйЭлемент = Элементы.Добавить("ЦППК_ПричиныОтказаВозврата", Тип("ПолеФормы"), Элементы.Блок2);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка; 
		НовыйЭлемент.ПутьКДанным = "Объект.ЦППК_ПричиныОтказаВозврата";
		
		НовыйЭлемент = Элементы.Добавить("ДатаПередачиЗаявленийСРезолюциейУУДвСОП_ТТС", Тип("ПолеФормы"), Элементы.Блок2);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода; 
		НовыйЭлемент.ПутьКДанным = "Объект.ДатаПередачиЗаявленийСРезолюциейУУДвСОП_ТТС";
		НовыйЭлемент.Подсказка = НСтр("ru = 'Дата передачи заявления с резолюцией УУД в СОП или в претензионную кассу'");
		НовыйЭлемент.Заголовок = НСтр("ru = 'Дата передачи заявления'");
		НовыйЭлемент.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
		
		НовыйЭлемент = Элементы.Добавить("ЦППК_КвитанцияРасчета", Тип("ПолеФормы"), Элементы.Блок2);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка; 
		НовыйЭлемент.ПутьКДанным = "Объект.ЦППК_КвитанцияРасчета";
		
		НовыйЭлемент = Элементы.Добавить("ЦППК_НомерЭлектронногоНосителяВерен", Тип("ПолеФормы"), Элементы.Блок2);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка; 
		НовыйЭлемент.ПутьКДанным = "Объект.ЦППК_НомерЭлектронногоНосителяВерен";
		
		НоваяГруппа = Элементы.Добавить("Блок3", Тип("ГруппаФормы"), Элементы.ГруппаБлок23);
		НоваяГруппа.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
		НоваяГруппа.Отображение         = ОтображениеОбычнойГруппы.нет;
		НоваяГруппа.Заголовок 			= НСтр("ru = 'Блок 3 для заполнения СОП'");
		НоваяГруппа.ОтображатьЗаголовок = Истина; 
		НоваяГруппа.Объединенная 		= Истина;
		НоваяГруппа.ШрифтЗаголовка		= Новый Шрифт(, , Истина); 
		НоваяГруппа.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяЕслиВозможно;
		
		НовыйЭлемент = Элементы.Добавить("ИсходящийНомерОтвета_ТТС", Тип("ПолеФормы"), Элементы.Блок3);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода; 
		НовыйЭлемент.ПутьКДанным = "Объект.ИсходящийНомерОтвета_ТТС";
		НовыйЭлемент.Заголовок = НСтр("ru = 'Исходящий №'");
		НовыйЭлемент.Ширина = 15;  
		НовыйЭлемент.РастягиватьПоВертикали = Ложь;
		
		НовыйЭлемент = Элементы.Добавить("ИсходящаяДатаОтвета_ТТС", Тип("ПолеФормы"), Элементы.Блок3);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода; 
		НовыйЭлемент.ПутьКДанным = "Объект.ИсходящаяДатаОтвета_ТТС";
		НовыйЭлемент.Заголовок = НСтр("ru = 'Дата'");
		
		НовыйЭлемент = Элементы.Добавить("ДатаЗакрытияBI", Тип("ПолеФормы"), Элементы.Блок3);
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода; 
		НовыйЭлемент.ПутьКДанным = "Объект.ДатаЗакрытияBI";
		НовыйЭлемент.Заголовок = НСтр("ru = 'Дата закрытия'");
		
		//Если  ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидДокумента, "ЯвляетсяИсходящейКорреспонденцией") = Истина Тогда
		//	Элементы.ФИОзаявителяОтвет.Видимость = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидДокумента, "ТТС_УчетЗаявителей");
		//Иначе
		//	Элементы.ФИОзаявителяОтвет.Видимость = Ложь;
		//КонецЕсли;
		
		ЦППК_ВидимостьРеквизитовЗаявкиНаВозврат();
		
	Иначе
		//++AxelSoft Шарапова 08.10.2024 САНФ-029223
		НовыйЭлемент = Элементы.Вставить("ЦППК_ФИОЗаявителяОтвет", Тип("ПолеФормы"), Элементы.ГруппаКонтрагент, Элементы.ГруппаИндексыСПАРКРиски); 
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;  
		НовыйЭлемент.ПутьКДанным = "Объект.ЦППК_ФИОЗаявителя"; 
		НовыйЭлемент.Заголовок = НСтр("ru = 'ФИО заявителя'");   
		НовыйЭлемент.РастягиватьПоГоризонтали = Истина;
		НовыйЭлемент.АвтоОтметкаНезаполненного = Истина;
		//--AxelSoft Шарапова 08.10.2024 САНФ-029223
	КонецЕсли;
	
	//--AxelSoft Шарапова 08.10.2024 САНФ-029223

КонецПроцедуры	

//++AxelSoft Шарапова 08.10.2024 САНФ-029221      
&НаСервере
Функция ПолучитьШаблонаОтветаНаЗаявкуНаВозврат()
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ШаблоныДокументов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ШаблоныДокументов КАК ШаблоныДокументов
	|ГДЕ
	|	ШаблоныДокументов.ВидДокумента.ЦППК_ЯвляетсяОтветомЗаявкиНаВозврат
	|	И НЕ ШаблоныДокументов.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.Ссылка;
	КонецЦикла;
	
КонецФункции 

&НаСервере
Процедура ЦППК_РешениеЦОПриИзмененииНаСервере()

	Если Объект.РешениеЦО = Перечисления.РешенияПоДокументамЗВДС_ЦО.Отказ Тогда
		ЭтотОбъект.ЦППК_РешениеЦООтказ = Истина;
	Иначе
		ЭтотОбъект.ЦППК_РешениеЦООтказ = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СоздатьДокументОтветНаЗаявку()
	
	ШаблонНовогоДокумента = ПолучитьШаблонаОтветаНаЗаявкуНаВозврат();
	ДанныеЗаполнения = Новый Структура("Основание, ШаблонДокумента",           
								Объект.Ссылка, ШаблонНовогоДокумента);
	ДокОбъект = Справочники.ДокументыПредприятия.СоздатьЭлемент();
	ДокОбъект.Заполнить(ДанныеЗаполнения);
	
	ДокОбъект.ДатаРегистрации = ТекущаяДатаСеанса();
	НачальнаяДатаРегистрации = ДокОбъект.ДатаРегистрации;
	
	// сформируем текущий номер
	СформироватьЧисловойНомерДокумента(ДокОбъект);
	СформироватьСтроковыйНомерДокумента(ДокОбъект);
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидДокумента,"РасширениеРабочейГруппыДокументаПоВиду") и ЗначениеЗаполнено(Объект.Подразделение) Тогда 
		ТТС_ОбщийМодуль.ДобавитьСлужебнуюГруппуВерхнегоУровня(ДокОбъект);
	КонецЕсли;	
	
	НовыйСписокВОтветНа = Новый СписокЗначений;
	НовыйСписокВОтветНа.Добавить(Объект.Ссылка);
	
	ДокОбъект.ДополнительныеСвойства.Вставить("СписокВОтветНа", НовыйСписокВОтветНа);
	
	ДокОбъект.Записать();
	
	ОбновитьИнформациюОСвязях();

	ТекстСообщения = "Создан документ: " + ДокОбъект.Ссылка;
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ДокОбъект.Ссылка);

КонецПроцедуры
//--AxelSoft Шарапова 08.10.2024 САНФ-029221      

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ЖурналыТУ

&НаКлиенте
Процедура ЦППК_ДанныеЖурналаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ЗаполнитьЗначенияСвойств(Элемент.ТекущиеДанные,ЭтаФорма["ТТС_ДанныеЖурнала"][0],"ТехникПоРасшифровке,Направление,НомерМаршрута,Машинист");
		Элемент.ТекущиеДанные.ИДСтроки = Новый УникальныйИдентификатор;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦППК_ДанныеЖурналаТаблицаСтанцияОтправленияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СписокСтанций = ЦППК_ПолучитьПунктОтправления(
	Элементы.ТТС_ДанныеЖурнала.ТекущиеДанные.Направление,
	Элементы.ТТС_ДанныеЖурнала.ТекущиеДанные.НомерПоезда);
	//добавлена проверка на пустой массив (на время заполнения справочника расстояния)
	//в дальнейшем эта проверку нужно убрать
	Если СписокСтанций.Количество() = 0 Тогда
		СтандартнаяОбработка = Истина;	
		Элементы.ТТС_ДанныеЖурнала.ПодчиненныеЭлементы.ТТС_ДанныеЖурналаРасстояние.ТолькоПросмотр = Ложь;	
		Элементы.ТТС_ДанныеЖурнала.ПодчиненныеЭлементы.ТТС_ДанныеЖурналаОстановки.ТолькоПросмотр = Ложь;
	Иначе
		СтандартнаяОбработка = Ложь;
		ТТС_Отбор = Новый Структура("Ссылка", СписокСтанций);
		ТТС_Параметры = Новый Структура("Отбор", ТТС_Отбор);
		ОткрытьФорму("Справочник.Станции_ТТС.ФормаВыбора", ТТС_Параметры, Элемент);
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЦППК_ДанныеЖурналаПередНачаломИзменения(Элемент, Отказ)

	Если (Элемент.ТекущийЭлемент = Элементы.ТТС_ДанныеЖурналаТаблицаСтанцияОтправления
		ИЛИ Элемент.ТекущийЭлемент = Элементы.ТТС_ДанныеЖурналаТаблицаСтанцияПрибытия)
		И НЕ ЗначениеЗаполнено(ЭтаФорма["ТТС_ДанныеЖурнала"][0].Направление) Тогда
			Отказ = Истина; 
			Сообщить("Не выбрано направление.");
		КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте
Процедура ЦППК_ЗарегистрироватьЗаднимЧислом(Команда)
	
	Подсказка = "Введите дату и время";
	ЧастьДаты = ЧастиДаты.Дата;
	Оповещение = Новый ОписаниеОповещения("ЦППК_ЗарегистрироватьЗаднимЧисломПродолжение", ЭтотОбъект, Параметры);
	ДатаПоУмолчанию = Дата(1,1,1);
	Если ТТС_ЖурналыТУВызовСервера.ВидЖурнала(Объект.ВидДокумента).Журнал2 ИЛИ ТТС_ЖурналыТУВызовСервера.ВидЖурнала(Объект.ВидДокумента).Журнал3 Тогда
		ДатаПоУмолчанию = ЭтаФорма["ТТС_ДанныеЖурнала"][0].ДатаПоездки;
	КонецЕсли;
	ПоказатьВводДаты(Оповещение, ДатаПоУмолчанию, "Введите дату регистрации", ЧастьДаты);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦППК_ДанныеЖурналаТТС_ВввестиНаОснованииЖТУ2(Команда)
	
	ПараметрыВыполненияКоманды = Новый Структура;
	ПараметрыВыполненияКоманды.Вставить("Источник", ЭтаФорма);
	ПараметрыВыполненияКоманды.Вставить("Уникальность", УникальныйИдентификатор);
	
	ТТС_ЖурналыТУКлиент.ОбработкаКомандыЖТУНаОсновании(Неопределено, ПараметрыВыполненияКоманды, "ЖТУ2");
	
КонецПроцедуры

&НаКлиенте
Процедура ЦППК_ДанныеЖурналаТТС_ВввестиНаОснованииЖТУ3(Команда)
	
	ПараметрыВыполненияКоманды = Новый Структура;
	ПараметрыВыполненияКоманды.Вставить("Источник", ЭтаФорма);
	ПараметрыВыполненияКоманды.Вставить("Уникальность", УникальныйИдентификатор);
	
	ТТС_ЖурналыТУКлиент.ОбработкаКомандыЖТУНаОсновании(Неопределено, ПараметрыВыполненияКоманды, "ЖТУ3");
	
КонецПроцедуры

&НаКлиенте
Процедура ЦППК_ЗарегистрироватьЗаднимЧисломПродолжение(Результат, Параметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		
		Если НачалоДня(Результат) > НачалоДня(ТекущаяДата()) Тогда
			Сообщить("Нельзя регистрировать документ на будущую дату.");
		ИначеЕсли Результат = Дата(1,1,1) Тогда
			Сообщить("Дата регистрации не может быть пустой.");
		Иначе
			ТТС_ДатаРегистрацииЗаднимЧислом = Результат;
			Зарегистрировать(Неопределено);
		КонецЕсли 
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЦППК_УстановитьПараметрыВыбора()
	
	Если ЭтаФорма["ТТС_ДанныеЖурнала"].Количество()=0 Тогда
		Возврат;
	КонецЕсли;	
	
	НовыйМассив = Новый Массив();
	НаправлениеЗаполнено = ЗначениеЗаполнено(ЭтаФорма["ТТС_ДанныеЖурнала"][0].Направление);
	Если НаправлениеЗаполнено Тогда
		НовыйПараметр = Новый ПараметрВыбора("Отбор.Направление", ЭтаФорма["ТТС_ДанныеЖурнала"][0].Направление);
		НовыйМассив.Добавить(НовыйПараметр);
	КонецЕсли;
	
	Элементы.ТТС_ДанныеЖурналаТаблицаСтанцияПрибытия.Доступность = НаправлениеЗаполнено;
	Элементы.ТТС_ДанныеЖурналаТаблицаСтанцияОтправления.Доступность = НаправлениеЗаполнено;
	
	ПараметрВыбора = Новый ФиксированныйМассив(НовыйМассив);
	Элементы.ТТС_ДанныеЖурналаТаблицаСтанцияПрибытия.ПараметрыВыбора = ПараметрВыбора;
	Элементы.ТТС_ДанныеЖурналаТаблицаСтанцияОтправления.ПараметрыВыбора = ПараметрВыбора;
	
	Если НЕ Объект.ВидДокумента.ТТС_ВидЖурналаТУ = Перечисления.ТТС_ВидыЖурналовТУ.Журнал1 Тогда 
		
		НовыйМассив = Новый Массив();
		Если Объект.ВидДокумента.ТТС_ВидЖурналаТУ = Перечисления.ТТС_ВидыЖурналовТУ.Журнал2 Тогда 
			ПапкаКодаВидаПринятыхМер = Справочники.ТТС_КодыВидовМерЖТУ.СБ
		ИначеЕсли Объект.ВидДокумента.ТТС_ВидЖурналаТУ = Перечисления.ТТС_ВидыЖурналовТУ.Журнал3 Тогда
			ПапкаКодаВидаПринятыхМер = Справочники.ТТС_КодыВидовМерЖТУ.ЦР
		КонецЕсли;
		НовыйПараметр = Новый ПараметрВыбора("Отбор.Родитель", ПапкаКодаВидаПринятыхМер);
		НовыйМассив.Добавить(НовыйПараметр);
		
		ПараметрВыбора = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.ТТС_ДанныеЖурналаРезолюцияСБ.ПараметрыВыбора = ПараметрВыбора;	
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЦППК_ДанныеЖурналаНаправлениеПриИзменении(Элемент)
	
	ЦППК_УстановитьПараметрыВыбора();
	ЦППК_ЗаполнитьДанныеДепо();
	ЦППК_ЗаполнитьДанныеЖурнала(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ЦППК_ОбработатьТаблицуЖурналов()
	
	ИндексСтроки = 0;
	ВидЖурнала = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Объект.ВидДокумента, "ТТС_ВидЖурналаТУ");
	СписокОбщихПолей = "ВидЖурнала,ТехникПоРасшифровке,Направление,НомерМаршрута,НомерСкоростемера,Машинист";
	Для Каждого СтрокаЖурнала Из ЭтаФорма["ТТС_ДанныеЖурнала"] Цикл
		СтрокаЖурнала.ВидЖурнала = ВидЖурнала;
		СтрокаЖурнала.ИндексСтроки = ИндексСтроки;
		Если ИндексСтроки > 0 Тогда
			ЗаполнитьЗначенияСвойств(СтрокаЖурнала,ЭтаФорма["ТТС_ДанныеЖурнала"][0],СписокОбщихПолей);
		Иначе
			Если ЗначениеЗаполнено(ЭтаФорма["ТТС_ДанныеЖурнала"][0].Направление) Тогда
				Объект.ТТС_Направление = ЭтаФорма["ТТС_ДанныеЖурнала"][0].Направление;
			КонецЕсли;
		КонецЕсли;
		ИндексСтроки = ИндексСтроки + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЦППК_ЗаполнитьДанныеМИ()
	
	РолиПользователя = ТТС_ЖурналыТУВызовСервера.ПолучитьРолиПользователя(Пользователи.ТекущийПользователь());
	Если РолиПользователя.МИ Тогда
		ЭтаФорма["ТТС_ДанныеЖурнала"][0].Инструктор = Пользователи.ТекущийПользователь();
	КонецЕсли;  
	
КонецПроцедуры

&НаКлиенте
Процедура ЦППК_ЗаполнитьДанныеДепо()
	
	ДанныеДепо = ТТС_ЖурналыТУВызовСервера.ПолучитьДанныеДепо(ЭтаФорма["ТТС_ДанныеЖурнала"][0].Направление);
	ЭтаФорма["ТТС_ДанныеЖурнала"][0].НачальникДепо = ДанныеДепо.НачальникДепо;
	Объект.Подразделение = ДанныеДепо.Депо;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦППК_ДанныеЖурналаРезолюцияМИПриИзменении(Элемент)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ЦППК_ДанныеЖурналаРезолюцияМИОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ ВыбранноеЗначение = ЭтаФорма["ТТС_ДанныеЖурнала"][0].РезолюцияМИ Тогда
		ЦППК_ЗаполнитьДанныеМИ();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦППК_Проверено(Команда)
	
	ТТС_ЖурналыТУКлиент.УстановитьОтметкуОПроверке(ЭтаФорма, Ложь);
	Элементы.ТТС_ОтметкиОПроверке.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ЦППК_ПровереноСЗамечаниями(Команда)
	
	ТТС_ЖурналыТУКлиент.УстановитьОтметкуОПроверке(ЭтаФорма, Истина);
	Элементы.ТТС_ОтметкиОПроверке.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ЦППК_ОтметкиОПроверкеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ЦППК_ИзменитьЖурнал(Команда)
	
	РолиПользователя = ТТС_ЖурналыТУВызовСервера.ПолучитьРолиПользователя(СотрудникиВызовСервера.ОсновнойСотрудник());
	Если РолиПользователя.ЖТУ Тогда
		ЦППК_ИзменитьЖурналНаСервере();
	Иначе
	    ПоказатьПредупреждение(,"Недостаточно прав на изменение журнала.");
	КонецЕсли; 
	
	//ПараметрыОбработчика = Новый Структура;
	//
	//ОписаниеОповещения = Новый ОписаниеОповещения(
	//	"ЦППК_ИзменитьЖурналПродолжение",
	//	ЭтотОбъект, ПараметрыОбработчика);
	//	
	//ОткрытьФорму("ОбщаяФорма.ТТС_ВводПароля",,ЭтаФорма,,,,
	//			ОписаниеОповещения,
	//			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
				
КонецПроцедуры
			
&НаКлиенте
Процедура ЦППК_ИзменитьЖурналПродолжение(Пароль, Параметры) Экспорт
	
	Если ТипЗнч(Пароль) <> Тип("Строка") Или ПустаяСтрока(Пароль) Тогда
		Возврат;
	КонецЕсли;
	Если ТТС_ЖурналыТУВызовСервера.ПроверитьПарольНаИзменениеЖурналовТУ(Пароль) Тогда
		ЦППК_ИзменитьЖурналНаСервере();
	Иначе
	    ПоказатьПредупреждение(,"Неверный пароль");
	КонецЕсли;  
	
КонецПроцедуры
			
&НаСервере
Процедура ЦППК_ИзменитьЖурналНаСервере()
	ТТС_ЖурналыТУВызовСервера.ОткрытьЖурналДляРедактирования(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЦППК_ДанныеЖурналаТаблицаНомерПриИзменении(Элемент)
	
	Поле = СтрЗаменить(Элемент.Имя,"ТТС_ДанныеЖурналаТаблица","");
	ЗначениеПоля = Элементы.ТТС_ДанныеЖурнала.ТекущиеДанные[Поле];
	
	МассивЗначений = СтрРазделить(ЗначениеПоля, "\", Истина);
	
	Для Индекс = 0 По МассивЗначений.Количество() - 1 Цикл
		МассивЗначений[Индекс] = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(МассивЗначений[Индекс], 4, "0");
	КонецЦикла;
	
	ЗначениеПоля = СтрСоединить(МассивЗначений, "\");
	ТекстПроверкиНомераПоезда = ТТС_ЖурналыТУВызовСервера.ТекстОшибкиПроверкиНомераПоезда(ЗначениеПоля);
	
	Если ТекстПроверкиНомераПоезда <> "" Тогда
		
		ЗначениеПоля = "";
		Элементы.ТТС_ДанныеЖурнала.ТекущиеДанные[Поле] = ЗначениеПоля;
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстПроверкиНомераПоезда);
		Возврат;
			
	КонецЕсли;
	
	Элементы.ТТС_ДанныеЖурнала.ТекущиеДанные[Поле] = ЗначениеПоля;
	ЦППК_ЗаполнитьДанныеЖурнала(Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ЦППК_ДанныеЖурналаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)

	РазрешеннаяДата = ДобавитьМесяц(НачалоДня(ТекущаяДата()), -3);
	
	Если Элемент.ТекущиеДанные.ДатаПоездки < РазрешеннаяДата Тогда
		
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru = 'Поездки более чем 3-месячной давности вводить запрещено.'");
		Сообщение.Поле = "ТТС_ДанныеЖурнала["+ЭтаФорма["ТТС_ДанныеЖурнала"].Индекс(Элемент.ТекущиеДанные)+"].ДатаПоездки";
		Сообщение.Сообщить();
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЦППК_УстановитьНомераПоездовВСвязях()
	ТТС_ЖурналыТУВызовСервера.УстановитьНомераПоездовВСвязях(ЭтаФорма);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЦППК_ОтказВСозданииЖурнала(ВидДокумента, Основание)
	
	Отказ = Ложь;
	
	ПараметрыВидаДокумента = ОбщегоНазначенияДокументооборотВызовСервера.ЗначенияРеквизитовОбъекта(
	ВидДокумента,
	"ТТС_ЯвляетсяЖурналомТУ, ТТС_ВидЖурналаТУ");
	
		
	Если ПараметрыВидаДокумента.ТТС_ЯвляетсяЖурналомТУ = Истина
		И НЕ ПараметрыВидаДокумента.ТТС_ВидЖурналаТУ = ПредопределенноеЗначение("Перечисление.ТТС_ВидыЖурналовТУ.Журнал1") Тогда
		
		Если НЕ ЗначениеЗаполнено(Основание)
			ИЛИ НЕ ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Основание.ВидДокумента, "ТТС_ЯвляетсяЖурналомТУ") Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

&НаКлиенте
Процедура ЦППК_ЗаполнитьДанныеЖурнала(Элемент)
	
	Если ЗначениеЗаполнено(Элементы.ТТС_ДанныеЖурнала.ТекущиеДанные.Направление) И ЗначениеЗаполнено(Элементы.ТТС_ДанныеЖурнала.ТекущиеДанные.НомерПоезда) Тогда 	
		ПолученныеДанные = 	ЦППК_ПолучитьДанныеЖурналаДляОтправленияПрибытия(
		Элементы.ТТС_ДанныеЖурнала.ТекущиеДанные.Направление,
		Элементы.ТТС_ДанныеЖурнала.ТекущиеДанные.НомерПоезда,
		Элементы.ТТС_ДанныеЖурнала.ТекущиеДанные.СтанцияОтправления,
		Элементы.ТТС_ДанныеЖурнала.ТекущиеДанные.СтанцияПрибытия);
		Если ПолученныеДанные = Неопределено Тогда
			Элементы.ТТС_ДанныеЖурнала.ТекущиеДанные.Расстояние 		= 	0;
			Элементы.ТТС_ДанныеЖурнала.ТекущиеДанные.Остановки 			= 	0;
			Элементы.ТТС_ДанныеЖурнала.ТекущиеДанные.СтанцияОтправления = 	" ";
			Элементы.ТТС_ДанныеЖурнала.ТекущиеДанные.СтанцияПрибытия	= 	" ";
		Иначе
			Элементы.ТТС_ДанныеЖурнала.ТекущиеДанные.Расстояние 		=	ПолученныеДанные.Расстояние;	
			Элементы.ТТС_ДанныеЖурнала.ТекущиеДанные.Остановки			= 	ПолученныеДанные.Остановки;
			Элементы.ТТС_ДанныеЖурнала.ТекущиеДанные.СтанцияОтправления	= 	ПолученныеДанные.ПунктОтправления;
			Элементы.ТТС_ДанныеЖурнала.ТекущиеДанные.СтанцияПрибытия	=	ПолученныеДанные.ПунктПрибытия;
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЦППК_ДанныеЖурналаТаблицаСтанцияПрибытияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СписокСтанций = ЦППК_ПолучитьПунктПрибытия(
		Элементы.ТТС_ДанныеЖурнала.ТекущиеДанные.Направление,
		Элементы.ТТС_ДанныеЖурнала.ТекущиеДанные.НомерПоезда);
	//добавлена проверка на пустой массив (на время заполнения справочника расстояния)
	//в дальнейшем эта проверку нужно убрать
	Если СписокСтанций.Количество() = 0 Тогда 
		СтандартнаяОбработка = Истина;	
		Элементы.ТТС_ДанныеЖурнала.ПодчиненныеЭлементы.ТТС_ДанныеЖурналаРасстояние.ТолькоПросмотр = Ложь;	
		Элементы.ТТС_ДанныеЖурнала.ПодчиненныеЭлементы.ТТС_ДанныеЖурналаОстановки.ТолькоПросмотр = Ложь;

	Иначе
		СтандартнаяОбработка = Ложь;
		ТТС_Отбор = Новый Структура("Ссылка", СписокСтанций);
		ТТС_Параметры = Новый Структура("Отбор", ТТС_Отбор);
		ОткрытьФорму("Справочник.Станции_ТТС.ФормаВыбора", ТТС_Параметры, Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЦППК_ПолучитьПунктОтправления(Направление,НомерПоезда)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТТС_Расстояния.ПунктОтправления
		|ИЗ
		|	Справочник.ТТС_Расстояния КАК ТТС_Расстояния
		|ГДЕ
		|	ТТС_Расстояния.Направление = &Направление
		|	И ТТС_Расстояния.НомерПоезда = &НомерПоезда";
	
	Запрос.УстановитьПараметр("Направление", Направление);
	Запрос.УстановитьПараметр("НомерПоезда", НомерПоезда);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ПунктыОтправления = Новый Массив();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ПунктыОтправления.Добавить(ВыборкаДетальныеЗаписи.ПунктОтправления);
	КонецЦикла;
	
	Возврат ПунктыОтправления;
КонецФункции 

&НаСервереБезКонтекста
Функция ЦППК_ПолучитьПунктПрибытия(Направление,НомерПоезда)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТТС_Расстояния.ПунктПрибытия
		|ИЗ
		|	Справочник.ТТС_Расстояния КАК ТТС_Расстояния
		|ГДЕ
		|	ТТС_Расстояния.Направление = &Направление
		|	И ТТС_Расстояния.НомерПоезда = &НомерПоезда";
	
	Запрос.УстановитьПараметр("Направление", Направление);
	Запрос.УстановитьПараметр("НомерПоезда", НомерПоезда);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ПунктыПрибытия = Новый Массив();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ПунктыПрибытия.Добавить(ВыборкаДетальныеЗаписи.ПунктПрибытия);
	КонецЦикла;
	
	Возврат ПунктыПрибытия;
КонецФункции

&НаСервереБезКонтекста
Функция ЦППК_ПолучитьДанныеЖурналаДляОтправленияПрибытия(Направление,НомерПоезда,ПунктОтправления,ПунктПрибытия)
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
		|	ТТС_Расстояния.ПунктПрибытия,
		|	ТТС_Расстояния.ПунктОтправления,
		|	ТТС_Расстояния.Расстояние КАК Расстояние,
		|	ТТС_Расстояния.Остановки КАК Остановки
		|ИЗ
		|	Справочник.ТТС_Расстояния КАК ТТС_Расстояния
		|ГДЕ
		|	ТТС_Расстояния.Направление = &Направление
		|	И ТТС_Расстояния.НомерПоезда = &НомерПоезда
		|	&ОтборПоПунктуОтправления
		|	&ОтборПоПунктуПрибытия";
	
	Если ЗначениеЗаполнено(ПунктОтправления) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборПоПунктуОтправления", "И ТТС_Расстояния.ПунктОтправления = &ПунктОтправления");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборПоПунктуОтправления", " ");
	КонецЕсли;
	Если ЗначениеЗаполнено(ПунктПрибытия) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ОтборПоПунктуПрибытия","И ТТС_Расстояния.ПунктПрибытия = &ПунктПрибытия");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ОтборПоПунктуПрибытия", " ");
	КонецЕсли;

	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Направление", Направление);
	Запрос.УстановитьПараметр("НомерПоезда", НомерПоезда);
	Запрос.УстановитьПараметр("ПунктОтправления", ПунктОтправления);  
	Запрос.УстановитьПараметр("ПунктПрибытия", ПунктПрибытия);
	
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Неопределено;
		
	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		КоличествоЭлементовВыборки = Выборка.Количество();
		Пока Выборка.Следующий() Цикл
			
			Расстояние 			=  Выборка.Расстояние;
			Остановки 			=  Выборка.Остановки;
			ПунктОтправления 	=  ?(ЗначениеЗаполнено(ПунктОтправления),ПунктОтправления, ?(КоличествоЭлементовВыборки<2,Выборка.ПунктОтправления, " "));
			ПунктПрибытия		=  ?(ЗначениеЗаполнено(ПунктПрибытия),Выборка.ПунктПрибытия,?(КоличествоЭлементовВыборки<2, Выборка.ПунктПрибытия, " "));
			
		КонецЦикла;
		Перечень = Новый Структура("Расстояние,Остановки,ПунктОтправления,ПунктПрибытия");
		Перечень.Вставить("Расстояние", 		Расстояние);
		Перечень.Вставить("Остановки", 			Остановки);
		Перечень.Вставить("ПунктОтправления", 	ПунктОтправления);
		Перечень.Вставить("ПунктПрибытия", 		ПунктПрибытия);
		
		Возврат Перечень;
				
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ЦППК_ДанныеЖурналаТаблицаСтанцияОтправленияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПолученныеДанные = 	ЦППК_ПолучитьДанныеЖурналаДляОтправленияПрибытия(
	Элементы.ТТС_ДанныеЖурнала.ТекущиеДанные.Направление,
	Элементы.ТТС_ДанныеЖурнала.ТекущиеДанные.НомерПоезда,
	ВыбранноеЗначение,
	Элементы.ТТС_ДанныеЖурнала.ТекущиеДанные.СтанцияПрибытия);
	
	Если ПолученныеДанные = Неопределено Тогда
		Элементы.ТТС_ДанныеЖурнала.ТекущиеДанные.Расстояние 		= 	0;
		Элементы.ТТС_ДанныеЖурнала.ТекущиеДанные.Остановки 			= 	0;		
	Иначе
		Элементы.ТТС_ДанныеЖурнала.ТекущиеДанные.Расстояние 		=	ПолученныеДанные.Расстояние;	
		Элементы.ТТС_ДанныеЖурнала.ТекущиеДанные.Остановки			= 	ПолученныеДанные.Остановки;
		Элементы.ТТС_ДанныеЖурнала.ТекущиеДанные.СтанцияОтправления	= 	ПолученныеДанные.ПунктОтправления;
		Элементы.ТТС_ДанныеЖурнала.ТекущиеДанные.СтанцияПрибытия	=	ПолученныеДанные.ПунктПрибытия;
		
	КонецЕсли;
	Если ЗначениеЗаполнено(Элементы.ТТС_ДанныеЖурнала.ТекущиеДанные.СтанцияОтправления) И
		ЗначениеЗаполнено(Элементы.ТТС_ДанныеЖурнала.ТекущиеДанные.СтанцияПрибытия)
		И Элементы.ТТС_ДанныеЖурнала.ТекущиеДанные.Расстояние = 0 Тогда
	   Сообщить("Для указанного направления и номера поезда нет данных. Занесите их в справочник «Расстояния»");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЦППК_ДанныеЖурналаТаблицаСтанцияПрибытияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ПолученныеДанные = 	ЦППК_ПолучитьДанныеЖурналаДляОтправленияПрибытия(
	Элементы.ТТС_ДанныеЖурнала.ТекущиеДанные.Направление,
	Элементы.ТТС_ДанныеЖурнала.ТекущиеДанные.НомерПоезда,
	Элементы.ТТС_ДанныеЖурнала.ТекущиеДанные.СтанцияОтправления,
	ВыбранноеЗначение);
	
	Если ПолученныеДанные = Неопределено Тогда
		//стало
		Элементы.ТТС_ДанныеЖурнала.ТекущиеДанные.Расстояние 		= 	0;
		Элементы.ТТС_ДанныеЖурнала.ТекущиеДанные.Остановки 			= 	0;		
		//было
		//Элементы.ТТС_ДанныеЖурнала.ТекущиеДанные.Расстояние 		= 	0;
		//Элементы.ТТС_ДанныеЖурнала.ТекущиеДанные.Остановки 			= 	0;
		//Элементы.ТТС_ДанныеЖурнала.ТекущиеДанные.СтанцияОтправления = 	" ";
		//Элементы.ТТС_ДанныеЖурнала.ТекущиеДанные.СтанцияПрибытия	= 	" ";
	Иначе
		Элементы.ТТС_ДанныеЖурнала.ТекущиеДанные.Расстояние 		=	ПолученныеДанные.Расстояние;	
		Элементы.ТТС_ДанныеЖурнала.ТекущиеДанные.Остановки			= 	ПолученныеДанные.Остановки;
		Элементы.ТТС_ДанныеЖурнала.ТекущиеДанные.СтанцияОтправления	= 	ПолученныеДанные.ПунктОтправления;
		Элементы.ТТС_ДанныеЖурнала.ТекущиеДанные.СтанцияПрибытия	=	ПолученныеДанные.ПунктПрибытия;
	КонецЕсли;
	Если ЗначениеЗаполнено(Элементы.ТТС_ДанныеЖурнала.ТекущиеДанные.СтанцияОтправления) И
		ЗначениеЗаполнено(Элементы.ТТС_ДанныеЖурнала.ТекущиеДанные.СтанцияПрибытия)
		И Элементы.ТТС_ДанныеЖурнала.ТекущиеДанные.Расстояние = 0 Тогда
		Сообщить("Для указанного направления и номера поезда нет данных. Занесите их в справочник «Расстояния»");
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
&ИзменениеИКонтроль("ДействияПерезапуститьОбработку")
Процедура ЦППК_ДействияПерезапуститьОбработку(Команда)

	Если ЗначениеЗаполнено(КомплексныйПроцессПоПредмету) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Документ обрабатывается в рамках комплексного процесса.'"));
		Возврат;
	КонецЕсли;

	#Удаление
	Если ДействияВызовСервера.ЕстьПравоПомещенияДействийВИсторию() Тогда
		ТекстВопроса = 
		НСтр("ru = 'Поместить процесс обработки документа в историю и заполнить обработку заново?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикПерезапуститьОбработку",
		ЭтотОбъект, Новый Структура);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,
		, КодВозвратаДиалога.Нет);
	Иначе 
		ПоказатьПредупреждение(,НСтр("ru = 'Недостаточно прав на перезапуск обработки.'"));
	КонецЕсли;
	#КонецУдаления
 	#Вставка
		ТекстВопроса = 
		НСтр("ru = 'Поместить процесс обработки документа в историю и заполнить обработку заново?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикПерезапуститьОбработку",
		ЭтотОбъект, Новый Структура);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет,
		, КодВозвратаДиалога.Нет);
	#КонецВставки
КонецПроцедуры

&НаКлиенте
Процедура ЦППК_ПодписалОтКонтрагентаПриИзмененииПеред(Элемент)
	
	ЗаполнитьКонтрагента(Элемент.Имя);	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьКонтрагента(ИмяКЛ)
	
	Объект.Контрагент = ОбщегоНазначенияДокументооборотВызовСервера.ЗначениеРеквизитаОбъекта(Объект[ИмяКЛ], "Владелец");	
	
КонецПроцедуры

&НаКлиенте
Процедура ЦППК_КонтактноеЛицоПриИзмененииПеред(Элемент)
	
	ЗаполнитьКонтрагента(Элемент.Имя);	
	
КонецПроцедуры

&НаКлиенте
Процедура ЦППК_КонвертироватьВPDFПосле(Команда)
	
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.Обзор Тогда
		ТекущиеДанные = Элементы.Файлы.ТекущиеДанные;
		ВыделенныеСтроки = Элементы.Файлы.ВыделенныеСтроки;
	Иначе	
		ТекущиеДанные = Элементы.ФайлыСоздание.ТекущиеДанные;
		ВыделенныеСтроки = Элементы.ФайлыСоздание.ВыделенныеСтроки;
	КонецЕсли;
	
	КонвертироватьФайлыВPDF(ВыделенныеСтроки)
	
	//КонвертироватьВPDFНаСервере(ВыделенныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура КонвертироватьФайлыВPDF(ВыделенныеСтроки)
	
	#Если ВебКлиент Тогда 
		ПоказатьПредупреждение(, НСтр("ru = 'В Веб-клиенте конвертация файлов не поддерживается.'"));
		Возврат;
	#КонецЕсли
	

	СтрокиКОбработке = Новый Массив;
	
	Для Каждого ИдентификаторСтроки ИЗ ВыделенныеСтроки Цикл
		
		Строка = Файлы.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		Если Строка.Расширение = "docx" Или Строка.Расширение = "doc" Тогда
			
			СтрокиКОбработке.Добавить(Строка);			
						
		КонецЕсли;		
		
	КонецЦикла;
	
	КоличествоКОбработке = СтрокиКОбработке.Количество();
	
	Если КоличествоКОбработке = 0 Тогда
		ПоказатьОповещениеПользователя(
		НСтр("ru = 'Завершено:'"),,"Файлов к обработке не обнаружено",
		БиблиотекаКартинок.Информация32);
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.ЦППК_ВариантКонвертацииФайлов", 
		Новый Структура("КоличествоФайлов", КоличествоКОбработке),
		ЭтаФорма,,,,
		Новый ОписаниеОповещения("КонвертироватьФайлыВPDFЗавершение", ЭтаФорма, Новый Структура("СтрокиКОбработке", СтрокиКОбработке)),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура КонвертироватьФайлыВPDFЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#Если НЕ ВебКлиент Тогда 
	
	РежимЗамены = Результат.Заменить;
	
	СтрокиКОбработке = ДополнительныеПараметры.СтрокиКОбработке;
			
	ТекстСостояния = СтрШаблон(
		НСтр("ru = 'Идет конвертация файлов.
		           |Пожалуйста, подождите...'"));
	Состояние(ТекстСостояния);
	
	Попытка
		MSWordApp = Новый COMОбъект("Word.Application");
		MSWordApp.Visible = False;                     
		
	Исключение
		ПоказатьПредупреждение(, НСтр("ru = 'Ошибка работы с приложением MS Word. 
		|Необходимо проверить правильность установки либо использовать более новую версию приложения.'"));
		Возврат;
	КонецПопытки;
			
    КоличествоОбработанныхФайлов = 0;
	
	Для Каждого Строка ИЗ СтрокиКОбработке Цикл
		
		ДанныеФайла = РаботаСФайламиВызовСервера.ДанныеФайлаИДвоичныеДанные(Строка.Ссылка);
		ИмяФайла = ПолучитьИмяВременногоФайла(Строка.Расширение);
		ИмяФайлаPDF = ПолучитьИмяВременногоФайла("PDF");
		
		ДанныеФайла.ДвоичныеДанные.Записать(ИмяФайла);
		
		
		MSWordApp.Documents.Open(ИмяФайла);			            
		WordDocument = MSWordApp.Application.Documents(1);
		WordDocument.Activate();
		WordDocument.SaveAs(ИмяФайлаPDF, 17);
		WordDocument.Saved = Истина;
		WordDocument.Close();
		
		Файл = Новый Файл(ИмяФайлаPDF);
		СведенияОФайле = РаботаСФайламиКлиентСервер.СведенияОФайле("ФайлСВерсией", Файл);
		СведенияОФайле.АдресВременногоХранилищаФайла = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайлаPDF));
		СведенияОФайле.ИмяБезРасширения = ДанныеФайла.ДанныеФайла.ПолноеНаименование;
		//ОбновитьВерсиюФайла
		Если РежимЗамены Тогда
			//СведенияОФайле.Вставить("Расширение", СведенияОФайле.РасширениеБезТочки);
			//СведенияОФайле.Вставить("АдресФайлаВоВременномХранилище", СведенияОФайле.АдресВременногоХранилищаФайла);
			НовыйФайл = ОбновитьФайл(Строка.Ссылка, СведенияОФайле);
			//НовыйФайл = РаботаСФайламиВызовСервера.ОбновитьВерсиюФайла(Строка.Ссылка, СведенияОФайле);
		Иначе
			НовыйФайл = РаботаСФайламиВызовСервера.СоздатьФайлСВерсией(Объект.Ссылка, СведенияОФайле);
		КонецЕсли;
		Если ЗначениеЗаполнено(НовыйФайл) Тогда
			КоличествоОбработанныхФайлов = КоличествоОбработанныхФайлов + 1;
		КонецЕсли;
		
		УдалитьФайлы(ИмяФайла);
		УдалитьФайлы(ИмяФайлаPDF);
		
		
	КонецЦикла;
	
	
    MSWordApp.Application.Quit();	
	
	ЗаполнитьСписокФайловКлиент();
	
	Если КоличествоОбработанныхФайлов = 1 Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Создание:'"),
			ПолучитьНавигационнуюСсылку(НовыйФайл),
			НовыйФайл,
			БиблиотекаКартинок.Информация32);
	ИначеЕсли КоличествоОбработанныхФайлов > 1 Тогда
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Завершено:'"),,
			СтрШаблон(НСтр("ru = 'Создано %1 файл(ов)'"), КоличествоОбработанныхФайлов),
			БиблиотекаКартинок.Информация32);		
	КонецЕсли;
	
    #КонецЕсли

КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбновитьФайл(Файл, СведенияОФайле)
	
	ВерсияФайла = РаботаСФайламиВызовСервера.ОбновитьВерсиюФайла(Файл, СведенияОФайле);
	РаботаСФайламиВызовСервера.ОбновитьВерсиюВФайле(Файл, ВерсияФайла, "");
	Возврат Файл;

КонецФункции // ОбновитьФайл()

&НаКлиенте
Процедура ЦППК_ОбработкаОповещенияПосле(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Файл" Тогда
		
		Если ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("Владелец")
			 И ЗначениеЗаполнено(Параметр.Владелец) И Объект.Ссылка = Параметр.Владелец Тогда
			 
			 ЭтотОбъект.ДобавленыФайлы = Истина;
			 
		 ИначеЕсли Источник = Объект.Ссылка И
			 ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("Событие") И Параметр.Событие = "ПрисоединенныйФайлПодписан" Тогда
			 
			 ЗаполнитьСписокФайловКлиент(); 
			 
		КонецЕсли;
			 
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ЗаполнитьШаблонИПапку()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ШаблоныДокументов.Ссылка КАК Ссылка,
	|	ШаблоныДокументов.Папка КАК Папка,
	|	ШаблоныДокументов.ГрифДоступа КАК ГрифДоступа	
	|ИЗ
	|	Справочник.ШаблоныДокументов КАК ШаблоныДокументов
	|ГДЕ
	|	ШаблоныДокументов.ВидДокумента = &ВидДокумента
	|	И ШаблоныДокументов.Тематика = &Тематика";
	
	Запрос.УстановитьПараметр("ВидДокумента",Объект.ВидДокумента);
	Запрос.УстановитьПараметр("Тематика",Объект.Тематика);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		Если Объект.Шаблон <> Выборка.Ссылка Тогда
		
			Объект.Шаблон = Выборка.Ссылка;
			Объект.Папка = Выборка.Папка;
			Объект.ГрифДоступа = Выборка.ГрифДоступа;
			
		КонецЕсли;
		
	КонецЦикла; 
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецФункции 

&НаСервере
Функция ПолучитьРазмерДанных(Знач Данные)

	Если ТипЗнч(Данные) = Тип("ХранилищеЗначения") Тогда
		ДанныеХранилища = Данные.Получить();
		Если ДанныеХранилища = Неопределено Тогда
			Возврат 0;
		КонецЕсли;
		Если ТипЗнч(ДанныеХранилища) = Тип("Картинка") Тогда
			ДанныеХранилища = ДанныеХранилища.ПолучитьДвоичныеДанные();
		ИначеЕсли ТипЗнч(ДанныеХранилища) = Тип("Строка") Тогда
			Возврат СтрДлина(ДанныеХранилища);
		КонецЕсли;     
		
		ДанныеBase64 = Base64Строка(ДанныеХранилища);
		ИначеЕсли ТипЗнч(Данные) = Тип("ДвоичныеДанные") Тогда
			ДанныеBase64 = Base64Строка(Данные);
		ИначеЕсли ТипЗнч(Данные) = Тип("Картинка") Тогда
			ДанныеBase64 = Base64Строка(Данные.ПолучитьДвоичныеДанные());
		Иначе
			Возврат СтрДлина(XMLСтрока(Данные));
	КонецЕсли;

	//Base64 - специальный формат хранения данных в текстовом формате
	РазмерДанных = СтрДлина(ДанныеBase64) - ?(Прав(ДанныеBase64, 1) = "=", 1, 0) - ?(Прав(ДанныеBase64, 2) = "==", 1, 0);
	РазмерДанных = Цел(РазмерДанных / 4 * 3); // в байтах

	Возврат РазмерДанных;

КонецФункции

&НаСервере
Процедура СоздатьЭлементыЖурналыТУ()
	
	// Скрываем временную декорацию, позволяющая отображать вкладку перед переходом.
	Элементы.ЦППК_ЖурналыТУ_ВременнаяДекорация.Видимость = Ложь;
	
	////////////////////////////////////////////////////////////////////////////////
	// Описание типов.
	////////////////////////////////////////////////////////////////////////////////
	
	ОписаниеБулево		= Новый ОписаниеТипов("Булево");
	
	// Числа.
	ОписаниеЧисла_10_0	= Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Любой));
	ОписаниеЧисла_4_1	= Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(4, 1, ДопустимыйЗнак.Любой));
	
	// Даты.
	ОписаниеДаты_Дата	= Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата));
	ОписаниеДаты_Время	= Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Время));
	
	// Строки.
	ОписаниеСтроки_4	= Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(4));
	ОписаниеСтроки_10	= Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(10));
	ОписаниеСтроки_14	= Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(14));
	ОписаниеСтроки_20	= Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(20));
	ОписаниеСтроки_64	= Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(64));
	ОписаниеСтроки_255	= Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255));
	
	ОписаниеСтроки_Неограниченная = Новый ОписаниеТипов("Строка");
	
	// Справоники.
	ОписаниеСправочника_Пользователи		= Новый ОписаниеТипов("СправочникСсылка.Пользователи");
	ОписаниеСправочника_СерииЛокомотивов	= Новый ОписаниеТипов("СправочникСсылка.ТТС_СерииЛокомотивовЖТУ");
	ОписаниеСправочника_Машинисты			= Новый ОписаниеТипов("СправочникСсылка.ТТС_Машинисты");
	ОписаниеСправочника_Направления			= Новый ОписаниеТипов("СправочникСсылка.ТТС_Направления");
	ОписаниеСправочника_Станции				= Новый ОписаниеТипов("СправочникСсылка.Станции_ТТС");
	ОписаниеСправочника_КодыНарушений		= Новый ОписаниеТипов("СправочникСсылка.ТТС_КодыНарушенийЖТУ");
	ОписаниеСправочника_КодыВидовМер		= Новый ОписаниеТипов("СправочникСсылка.ТТС_КодыВидовМерЖТУ");
	
	// Перечисления.
	ОписаниеПеречисления_Светофоров		= Новый ОписаниеТипов("ПеречислениеСсылка.ТТС_ХарактерыПереключенияСветофоров");
	ОписаниеПеречисления_Режимы			= Новый ОписаниеТипов("ПеречислениеСсылка.ТТС_РежимыВеденияПоезда");
	ОписаниеПеречисления_Литеры			= Новый ОписаниеТипов("ПеречислениеСсылка.ТТС_ЛитерыГоловнойСекции");
	ОписаниеПеречисления_ВидыЖурналовТУ	= Новый ОписаниеТипов("ПеречислениеСсылка.ТТС_ВидыЖурналовТУ");
	
	// Прочее.
	ОписаниеУникальныйИдентификатор = Новый ОписаниеТипов("УникальныйИдентификатор");
	
	////////////////////////////////////////////////////////////////////////////////
	// Реквизиты формы.
	////////////////////////////////////////////////////////////////////////////////
	
	// Динамический список "ТТС_ОтметкиОПроверке".
	ТипыРеквизита = Новый Массив;                             
	ТипыРеквизита.Добавить(Тип("ДинамическийСписок"));
	
	ОписаниеТиповДляРеквизита = Новый ОписаниеТипов(ТипыРеквизита); 
	ДинамическийСписок = Новый РеквизитФормы("ТТС_ОтметкиОПроверке", ОписаниеТиповДляРеквизита,, "", Ложь);
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(ДинамическийСписок);        
	
	ЭтаФорма.ИзменитьРеквизиты(ДобавляемыеРеквизиты); 
	
	РеквизитДинамическийСписок = ЭтаФорма["ТТС_ОтметкиОПроверке"];
	РеквизитДинамическийСписок.ПроизвольныйЗапрос = Истина;
	РеквизитДинамическийСписок.ОсновнаяТаблица = "РегистрСведений.ТТС_ОтметкиОПроверкеЖурналов";
	РеквизитДинамическийСписок.ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РегистрСведенийТТС_ОтметкиОПроверкеЖурналов.ДатаПроверки КАК ДатаПроверки,
	|	РегистрСведенийТТС_ОтметкиОПроверкеЖурналов.РольИсполнителя КАК РольИсполнителя,
	|	РегистрСведенийТТС_ОтметкиОПроверкеЖурналов.Проверяющий КАК Проверяющий,
	|	РегистрСведенийТТС_ОтметкиОПроверкеЖурналов.СЗамечаниями КАК СЗамечаниями,
	|	РегистрСведенийТТС_ОтметкиОПроверкеЖурналов.Комментарий КАК Комментарий
	|ИЗ
	|	РегистрСведений.ТТС_ОтметкиОПроверкеЖурналов КАК РегистрСведенийТТС_ОтметкиОПроверкеЖурналов
	|ГДЕ
	|	РегистрСведенийТТС_ОтметкиОПроверкеЖурналов.ВнутреннийДокумент = &ВнутреннийДокумент";
	
	// Таблица значений "ТТС_ДанныеЖурнала".
	ТипыРеквизита = Новый Массив;
	ТипыРеквизита.Добавить(Тип("ТаблицаЗначений"));
	
	ОписаниеТиповДляРеквизита = Новый ОписаниеТипов(ТипыРеквизита);
	ТаблицаЗначений = Новый РеквизитФормы("ТТС_ДанныеЖурнала", ОписаниеТиповДляРеквизита,, "", Истина);
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(ТаблицаЗначений);
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ТехникПоРасшифровке",			ОписаниеСправочника_Пользователи,		"ТТС_ДанныеЖурнала", "ФИО техника по расшифровке"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("СерияЛокомотива",				ОписаниеСправочника_СерииЛокомотивов,	"ТТС_ДанныеЖурнала", "Серия локомотива"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("НомерЛокомотива",				ОписаниеСтроки_4,						"ТТС_ДанныеЖурнала", "Номер локомотива"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("НомерСкоростемера",				ОписаниеСтроки_20,						"ТТС_ДанныеЖурнала", "№ кассеты/скоростемера"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Машинист",						ОписаниеСправочника_Машинисты,			"ТТС_ДанныеЖурнала", "Машинист"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("НомерПоезда",					ОписаниеСтроки_14,						"ТТС_ДанныеЖурнала", "Номер поезда"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Направление",					ОписаниеСправочника_Направления,		"ТТС_ДанныеЖурнала", "Направление"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("СтанцияОтправления",				ОписаниеСправочника_Станции,			"ТТС_ДанныеЖурнала", "Станция отправления"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("СтанцияПрибытия",				ОписаниеСправочника_Станции,			"ТТС_ДанныеЖурнала", "Станция прибытия"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("МестоСлучая",					ОписаниеСтроки_64,						"ТТС_ДанныеЖурнала", "Место случая"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Путь",							ОписаниеСтроки_10,						"ТТС_ДанныеЖурнала", "Путь"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("КМ",								ОписаниеЧисла_10_0,						"ТТС_ДанныеЖурнала", "КМ"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ПК",								ОписаниеЧисла_10_0,						"ТТС_ДанныеЖурнала", "ПК"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("КодНарушения",					ОписаниеСправочника_КодыНарушений,		"ТТС_ДанныеЖурнала", "Код нарушения"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Уточнение",						ОписаниеСтроки_Неограниченная,			"ТТС_ДанныеЖурнала", "Уточнение"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("НормативныйДокумент",			ОписаниеСтроки_255,						"ТТС_ДанныеЖурнала", "Нормативный документ"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("РезолюцияСБ",					ОписаниеСправочника_КодыВидовМер,		"ТТС_ДанныеЖурнала", "Резолюция СБ"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("РезолюцияМИ",					ОписаниеСправочника_КодыВидовМер,		"ТТС_ДанныеЖурнала", "Резолюция МИ"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Инструктор",						ОписаниеСправочника_Пользователи,		"ТТС_ДанныеЖурнала", "Инструктор"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("РезолюцияНачальникаДепо",		ОписаниеСправочника_КодыВидовМер,		"ТТС_ДанныеЖурнала", "Резолюция начальника депо"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("НачальникДепо",					ОписаниеСправочника_Пользователи,		"ТТС_ДанныеЖурнала", "Начальник депо"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИндексСтроки",					ОписаниеЧисла_10_0,						"ТТС_ДанныеЖурнала", "Индекс строки"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ХарактерПереключенияСветофора",	ОписаниеПеречисления_Светофоров,		"ТТС_ДанныеЖурнала", "Огни светофора"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("РежимВеденияПоезда",				ОписаниеПеречисления_Режимы,			"ТТС_ДанныеЖурнала", "Режим ведения поезда"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ЛитерГоловнойСекции",			ОписаниеПеречисления_Литеры,			"ТТС_ДанныеЖурнала", "Литер головной секции"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("НомерМаршрута",					ОписаниеСтроки_10,						"ТТС_ДанныеЖурнала", "Номер маршрута"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИДСтроки",						ОписаниеУникальныйИдентификатор,		"ТТС_ДанныеЖурнала", "ИДСтроки"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ВидЖурнала",						ОписаниеПеречисления_ВидыЖурналовТУ,	"ТТС_ДанныеЖурнала", "Вид журнала"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ДатаПоездки",					ОписаниеДаты_Дата,						"ТТС_ДанныеЖурнала", "Дата поездки"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("КассетаКомментарий",				ОписаниеСтроки_Неограниченная,			"ТТС_ДанныеЖурнала", "Кассета комментарий"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ВремяНарушения",					ОписаниеДаты_Время,						"ТТС_ДанныеЖурнала", "Время нарушения"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("СкоростьПоезда",					ОписаниеЧисла_4_1,						"ТТС_ДанныеЖурнала", "Скорость поезда"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ЭДТ",							ОписаниеБулево,							"ТТС_ДанныеЖурнала", "ЭДТ"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ДанныеВЛичномДеле",				ОписаниеБулево,							"ТТС_ДанныеЖурнала", "Данные в личном деле"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Расстояние",						ОписаниеЧисла_10_0,						"ТТС_ДанныеЖурнала", "Расстояние"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Остановки",						ОписаниеЧисла_10_0,						"ТТС_ДанныеЖурнала", "Остановки"));
	
	ЭтаФорма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	////////////////////////////////////////////////////////////////////////////////
	// Команды формы.
	////////////////////////////////////////////////////////////////////////////////
	
	 //Команда "ТТС_ЗарегистрироватьЗаднимЧислом".
	НоваяКоманда = Команды.Добавить("ТТС_ЗарегистрироватьЗаднимЧислом");
	НоваяКоманда.Действие  = "ЦППК_ЗарегистрироватьЗаднимЧислом";
	НоваяКоманда.Заголовок = НСтр("ru = 'Зарегистрировать на дату'");
	НоваяКоманда.Отображение = ОтображениеКнопки.КартинкаИТекст;
	НоваяКоманда.Подсказка = НСтр("ru = 'Зарегистрировать в прошедшем периоде'");
	//НоваяКоманда.Картинка = БиблиотекаКартинок.КартинкаНомер;
	
	// Команда "ТТС_ИзменитьЖурнал".
	НоваяКоманда = Команды.Добавить("ТТС_ИзменитьЖурнал");
	НоваяКоманда.Действие  = "ЦППК_ИзменитьЖурнал";
	НоваяКоманда.Заголовок = НСтр("ru = 'Изменить'");
	НоваяКоманда.Подсказка = НСтр("ru = 'Изменить содержание журнала'");
	
	// Команда "ТТС_Проверено".
	НоваяКоманда = Команды.Добавить("ТТС_Проверено");
	НоваяКоманда.Действие  = "ЦППК_Проверено";
	НоваяКоманда.Заголовок = НСтр("ru = 'ТТС проверено'");
	
	// Команда "ТТС_ПровереноСЗамечаниями".
	НоваяКоманда = Команды.Добавить("ТТС_ПровереноСЗамечаниями");
	НоваяКоманда.Действие  = "ЦППК_ПровереноСЗамечаниями";
	НоваяКоманда.Заголовок = НСтр("ru = 'ТТС проверено'");
	
	// Команда "ТТС_ДанныеЖурналаТТС_ВввестиНаОснованииЖТУ2".
	НоваяКоманда = Команды.Добавить("ТТС_ДанныеЖурналаТТС_ВввестиНаОснованииЖТУ2");
	НоваяКоманда.Действие  = "ЦППК_ДанныеЖурналаТТС_ВввестиНаОснованииЖТУ2";
	НоваяКоманда.Заголовок = НСтр("ru = 'Ввести журнал ТУ-133 №2'");
	
	// Команда "ТТС_ДанныеЖурналаТТС_ВввестиНаОснованииЖТУ3".
	НоваяКоманда = Команды.Добавить("ТТС_ДанныеЖурналаТТС_ВввестиНаОснованииЖТУ3");
	НоваяКоманда.Действие  = "ЦППК_ДанныеЖурналаТТС_ВввестиНаОснованииЖТУ3";
	НоваяКоманда.Заголовок = НСтр("ru = 'Ввести журнал ТУ-133 №3'");
	
	////////////////////////////////////////////////////////////////////////////////
	// Элементы формы.
	////////////////////////////////////////////////////////////////////////////////

	// Страницы "ТТС_ЖурналСтраницы".
	НоваяГруппа = Элементы.Добавить("ТТС_ЖурналСтраницы", Тип("ГруппаФормы"), Элементы.ТТС_ДанныеЖурналов);
	НоваяГруппа.Вид = ВидГруппыФормы.Страницы;
	НоваяГруппа.Заголовок = НСтр("ru = 'ТТС журнал страницы'");
	НоваяГруппа.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
	НоваяГруппа.РастягиватьПоВертикали = Истина;
	
	// Страница "ТТС_СтраницаЖурнал".
	НоваяГруппа = Элементы.Добавить("ТТС_СтраницаЖурнал", Тип("ГруппаФормы"), Элементы.ТТС_ЖурналСтраницы);
	НоваяГруппа.Вид = ВидГруппыФормы.Страница;
	НоваяГруппа.Заголовок = НСтр("ru = 'Журнал'");
	НоваяГруппа.РастягиватьПоВертикали = Истина;
	НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	// Группа "ТТС_ГруппаКнопкиИзменить".
	НоваяГруппа = Элементы.Добавить("ТТС_ГруппаКнопкиИзменить", Тип("ГруппаФормы"), Элементы.ТТС_СтраницаЖурнал);
	НоваяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
	НоваяГруппа.ОтображатьЗаголовок = Ложь;
	
	// Кнопка "ТТС_ЗарегистрироватьЗаднимЧислом".
	НоваяКнопка = Элементы.Добавить("ТТС_ЗарегистрироватьЗаднимЧислом", Тип("КнопкаФормы"), Элементы.ТТС_ГруппаКнопкиИзменить);
	НоваяКнопка.Заголовок = НСтр("ru = 'Зарегистрировать на дату'");
	НоваяКнопка.ИмяКоманды = "ТТС_ЗарегистрироватьЗаднимЧислом";
	
	// Кнопка "ТТС_ИзменитьЖурнал".
	НоваяКнопка = Элементы.Добавить("ТТС_ИзменитьЖурнал", Тип("КнопкаФормы"), Элементы.ТТС_ГруппаКнопкиИзменить);
	НоваяКнопка.ИмяКоманды = "ТТС_ИзменитьЖурнал";
	
	// Группа "ТТС_ГруппаПроверено".
	НоваяГруппа = Элементы.Добавить("ТТС_ГруппаПроверено", Тип("ГруппаФормы"), Элементы.ТТС_СтраницаЖурнал);
	НоваяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
	НоваяГруппа.ОтображатьЗаголовок = Ложь;
	
	// Кнопка "ТТС_Проверено".
	НоваяКнопка = Элементы.Добавить("ТТС_Проверено", Тип("КнопкаФормы"), Элементы.ТТС_ГруппаПроверено);
	НоваяКнопка.Заголовок = НСтр("ru = 'Проверено'");
	НоваяКнопка.ИмяКоманды = "ТТС_Проверено";
	НоваяКнопка.ЦветФона = Новый Цвет(255, 225, 0);
	НоваяКнопка.Шрифт = Новый Шрифт(, , Истина, , , );
	
	// Кнопка "ТТС_ПровереноСЗамечанием".
	НоваяКнопка = Элементы.Добавить("ТТС_ПровереноСЗамечанием", Тип("КнопкаФормы"), Элементы.ТТС_ГруппаПроверено);
	НоваяКнопка.Заголовок = НСтр("ru = 'Проверено с замечаниями'");
	НоваяКнопка.ИмяКоманды = "ТТС_ПровереноСЗамечаниями";
	НоваяКнопка.ЦветФона = Новый Цвет(255, 225, 0);
	НоваяКнопка.Шрифт = Новый Шрифт(, , Истина, , , );
	
	// Группа "ТТС_ЖурналКнопки".
	НоваяГруппа = Элементы.Добавить("ТТС_ЖурналКнопки", Тип("ГруппаФормы"), Элементы.ТТС_СтраницаЖурнал);
	НоваяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
	НоваяГруппа.ОтображатьЗаголовок = Ложь;
	НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.СлабоеВыделение;
	
	// Кнопка "ТТС_ДанныеЖурналаТТС_ВввестиНаОснованииЖТУ2".
	НоваяКнопка = Элементы.Добавить("ТТС_ДанныеЖурналаТТС_ВввестиНаОснованииЖТУ2", Тип("КнопкаФормы"), Элементы.ТТС_ЖурналКнопки);
	НоваяКнопка.ИмяКоманды = "ТТС_ДанныеЖурналаТТС_ВввестиНаОснованииЖТУ2";
	
	// Кнопка "ТТС_ДанныеЖурналаТТС_ВввестиНаОснованииЖТУ3".
	НоваяКнопка = Элементы.Добавить("ТТС_ДанныеЖурналаТТС_ВввестиНаОснованииЖТУ3", Тип("КнопкаФормы"), Элементы.ТТС_ЖурналКнопки);
	НоваяКнопка.ИмяКоманды = "ТТС_ДанныеЖурналаТТС_ВввестиНаОснованииЖТУ3";
	
	// Группа "ТТС_ЖурналДанные".
	НоваяГруппа = Элементы.Добавить("ТТС_ЖурналДанные", Тип("ГруппаФормы"), Элементы.ТТС_СтраницаЖурнал);
	НоваяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
	НоваяГруппа.ОтображатьЗаголовок = Ложь;
	НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.СлабоеВыделение;
	НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяЕслиВозможно;
	
	// Группа "ТТС_ЖурналТаблица".
	НоваяГруппа = Элементы.Добавить("ТТС_ЖурналТаблица", Тип("ГруппаФормы"), Элементы.ТТС_ЖурналДанные);
	НоваяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
	НоваяГруппа.ОтображатьЗаголовок = Ложь;
	НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.СлабоеВыделение;
	НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяЕслиВозможно;
	НоваяГруппа.РастягиватьПоВертикали = Истина;
	
	// Поле надписи "ТТС_ДанныеЖурналаТаблицаТехникПоРасшифровке".
	НовыйЭлемент = Элементы.Добавить("ТТС_ДанныеЖурналаТаблицаТехникПоРасшифровке", Тип("ПолеФормы"), Элементы.ТТС_ЖурналТаблица);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеНадписи;
	НовыйЭлемент.ПутьКДанным = "ТТС_ДанныеЖурнала[0].ТехникПоРасшифровке";
	
	// Поле ввода "ТТС_ДанныеЖурналаТаблицаНаправление".
	НовыйЭлемент = Элементы.Добавить("ТТС_ДанныеЖурналаТаблицаНаправление", Тип("ПолеФормы"), Элементы.ТТС_ЖурналТаблица);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "ТТС_ДанныеЖурнала[0].Направление";
	НовыйЭлемент.УстановитьДействие("ПриИзменении", "ЦППК_ДанныеЖурналаНаправлениеПриИзменении");
	
	// Поле ввода "ТТС_ДанныеЖурналаТаблицаНомерМаршрута".
	НовыйЭлемент = Элементы.Добавить("ТТС_ДанныеЖурналаТаблицаНомерМаршрута", Тип("ПолеФормы"), Элементы.ТТС_ЖурналТаблица);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "ТТС_ДанныеЖурнала[0].НомерМаршрута";
	
	// Поле ввода "ТТС_ДанныеЖурналаТаблицаНомерСкоростемера".
	НовыйЭлемент = Элементы.Добавить("ТТС_ДанныеЖурналаТаблицаНомерСкоростемера", Тип("ПолеФормы"), Элементы.ТТС_ЖурналТаблица);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "ТТС_ДанныеЖурнала[0].НомерСкоростемера";
	НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;
	
	// Поле ввода "ТТС_ДанныеЖурналаКассетаКомментарий".
	НовыйЭлемент = Элементы.Добавить("ТТС_ДанныеЖурналаКассетаКомментарий", Тип("ПолеФормы"), Элементы.ТТС_ЖурналТаблица);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.Заголовок = НСтр("ru = 'Комментарий'");
	НовыйЭлемент.ПутьКДанным = "ТТС_ДанныеЖурнала[0].КассетаКомментарий";
	НовыйЭлемент.РастягиватьПоГоризонтали = Истина;
	
	// Поле ввода "ТТС_ДанныеЖурналаТаблицаМашинист".
	НовыйЭлемент = Элементы.Добавить("ТТС_ДанныеЖурналаТаблицаМашинист", Тип("ПолеФормы"), Элементы.ТТС_ЖурналТаблица);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "ТТС_ДанныеЖурнала[0].Машинист";
	
	// Таблица "ТТС_ДанныеЖурнала".
	НоваяТаблица = Элементы.Добавить("ТТС_ДанныеЖурнала", Тип("ТаблицаФормы"), Элементы.ТТС_ЖурналТаблица);
	НоваяТаблица.ПутьКДанным = "ТТС_ДанныеЖурнала";
	НоваяТаблица.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	НоваяТаблица.АвтоМаксимальнаяШирина = Истина;
	НоваяТаблица.АвтоМаксимальнаяВысота = Истина;
	НоваяТаблица.ВысотаВСтрокахТаблицы = 7;
	НоваяТаблица.ПоложениеСтрокиПоиска = ПоложениеСтрокиПоиска.Нет;
	НоваяТаблица.ВысотаШапки = 1;
	НоваяТаблица.ВысотаПодвала = 1;
	НоваяТаблица.УстановитьДействие("ПередНачаломИзменения", "ЦППК_ДанныеЖурналаПередНачаломИзменения");
	НоваяТаблица.УстановитьДействие("ПриНачалеРедактирования", "ЦППК_ДанныеЖурналаПриНачалеРедактирования");
	НоваяТаблица.УстановитьДействие("ПередОкончаниемРедактирования", "ЦППК_ДанныеЖурналаПередОкончаниемРедактирования");
	
	// Колонка таблицы "ТТС_ДанныеЖурналаТаблицаДатаПоездки".
	НовыйЭлемент  = ЭтаФорма.Элементы.Добавить("ТТС_ДанныеЖурналаТаблицаДатаПоездки", Тип("ПолеФормы"), Элементы.ТТС_ДанныеЖурнала);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;      
	НовыйЭлемент.ПутьКДанным = "ТТС_ДанныеЖурнала.ДатаПоездки";
	
	// Колонка таблицы "ТТС_ДанныеЖурналаТаблицаСерияЛокомотива".
	НовыйЭлемент  = ЭтаФорма.Элементы.Добавить("ТТС_ДанныеЖурналаТаблицаСерияЛокомотива", Тип("ПолеФормы"), Элементы.ТТС_ДанныеЖурнала);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;      
	НовыйЭлемент.ПутьКДанным = "ТТС_ДанныеЖурнала.СерияЛокомотива";
	
	// Колонка таблицы "ТТС_ДанныеЖурналаТаблицаНомерЛокомотива".
	НовыйЭлемент  = ЭтаФорма.Элементы.Добавить("ТТС_ДанныеЖурналаТаблицаНомерЛокомотива", Тип("ПолеФормы"), Элементы.ТТС_ДанныеЖурнала);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;      
	НовыйЭлемент.ПутьКДанным = "ТТС_ДанныеЖурнала.НомерЛокомотива";
	НовыйЭлемент.УстановитьДействие("ПриИзменении", "ЦППК_ДанныеЖурналаТаблицаНомерПриИзменении");
	
	// Колонка таблицы "ТТС_ДанныеЖурналаТаблицаНомерПоезда".
	НовыйЭлемент  = ЭтаФорма.Элементы.Добавить("ТТС_ДанныеЖурналаТаблицаНомерПоезда", Тип("ПолеФормы"), Элементы.ТТС_ДанныеЖурнала);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;      
	НовыйЭлемент.ПутьКДанным = "ТТС_ДанныеЖурнала.НомерПоезда";
	НовыйЭлемент.УстановитьДействие("ПриИзменении", "ЦППК_ДанныеЖурналаТаблицаНомерПриИзменении");
	
	// Колонка таблицы "ТТС_ДанныеЖурналаТаблицаСтанцияОтправления".
	НовыйЭлемент  = ЭтаФорма.Элементы.Добавить("ТТС_ДанныеЖурналаТаблицаСтанцияОтправления", Тип("ПолеФормы"), Элементы.ТТС_ДанныеЖурнала);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "ТТС_ДанныеЖурнала.СтанцияОтправления";
	НовыйЭлемент.РедактированиеТекста = Истина;
	НовыйЭлемент.АвтоОтметкаНезаполненного = Истина;
	НовыйЭлемент.КнопкаСоздания = Ложь;
	НовыйЭлемент.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.НеИспользовать;
	НовыйЭлемент.ФормаВыбора = "Справочник.Станции_ТТС.Форма.ФормаВыбораПоНаправлению";
	НовыйЭлемент.УстановитьДействие("НачалоВыбора", "ЦППК_ДанныеЖурналаТаблицаСтанцияОтправленияНачалоВыбора");
	НовыйЭлемент.УстановитьДействие("ОбработкаВыбора", "ЦППК_ДанныеЖурналаТаблицаСтанцияОтправленияОбработкаВыбора");
	
	// Колонка таблицы "ТТС_ДанныеЖурналаТаблицаСтанцияПрибытия".
	НовыйЭлемент  = ЭтаФорма.Элементы.Добавить("ТТС_ДанныеЖурналаТаблицаСтанцияПрибытия", Тип("ПолеФормы"), Элементы.ТТС_ДанныеЖурнала);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;      
	НовыйЭлемент.ПутьКДанным = "ТТС_ДанныеЖурнала.СтанцияПрибытия";
	НовыйЭлемент.РедактированиеТекста = Истина;
	НовыйЭлемент.АвтоОтметкаНезаполненного = Истина;
	НовыйЭлемент.КнопкаСоздания = Ложь;
	НовыйЭлемент.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.НеИспользовать;
	НовыйЭлемент.ФормаВыбора = "Справочник.Станции_ТТС.Форма.ФормаВыбораПоНаправлению";
	НовыйЭлемент.УстановитьДействие("НачалоВыбора", "ЦППК_ДанныеЖурналаТаблицаСтанцияПрибытияНачалоВыбора");
	НовыйЭлемент.УстановитьДействие("ОбработкаВыбора", "ЦППК_ДанныеЖурналаТаблицаСтанцияПрибытияОбработкаВыбора");
	
	// Колонка таблицы "ТТС_ДанныеЖурналаТаблицаЭДТ".
	НовыйЭлемент  = ЭтаФорма.Элементы.Добавить("ТТС_ДанныеЖурналаТаблицаЭДТ", Тип("ПолеФормы"), Элементы.ТТС_ДанныеЖурнала);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;      
	НовыйЭлемент.ПутьКДанным = "ТТС_ДанныеЖурнала.ЭДТ";
	
	// Колонка таблицы "ТТС_ДанныеЖурналаОстановки".
	НовыйЭлемент  = ЭтаФорма.Элементы.Добавить("ТТС_ДанныеЖурналаОстановки", Тип("ПолеФормы"), Элементы.ТТС_ДанныеЖурнала);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;      
	НовыйЭлемент.ПутьКДанным = "ТТС_ДанныеЖурнала.Остановки";
	
	// Колонка таблицы "ТТС_ДанныеЖурналаРасстояние".
	НовыйЭлемент  = ЭтаФорма.Элементы.Добавить("ТТС_ДанныеЖурналаРасстояние", Тип("ПолеФормы"), Элементы.ТТС_ДанныеЖурнала);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;      
	НовыйЭлемент.ПутьКДанным = "ТТС_ДанныеЖурнала.Расстояние";
	
	// Поле надписи "ТТС_ДанныеЖурналаТаблицаЗарегистрировал".
	НовыйЭлемент = Элементы.Добавить("ТТС_ДанныеЖурналаТаблицаЗарегистрировал", Тип("ПолеФормы"), Элементы.ТТС_ЖурналТаблица);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеНадписи;
	НовыйЭлемент.ПутьКДанным = "Объект.Зарегистрировал";
	
	// Декорация "Декорация1".
	НовыйЭлемент = Элементы.Добавить("Декорация1", Тип("ДекорацияФормы"), Элементы.ТТС_ЖурналТаблица);
	НовыйЭлемент.Вид = ВидДекорацииФормы.Надпись;
	
	// Группа "ТТС_ЖурналСписок".
	НоваяГруппа = Элементы.Добавить("ТТС_ЖурналСписок", Тип("ГруппаФормы"), Элементы.ТТС_ЖурналДанные);
	НоваяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
	НоваяГруппа.ОтображатьЗаголовок = Ложь;
	НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.СлабоеВыделение;
	НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяЕслиВозможно;
	НоваяГруппа.СквозноеВыравнивание = СквозноеВыравнивание.Использовать;
	
	// Поле ввода "ТТС_ДанныеЖурналаТехникПоРасшифровке".
	НовыйЭлемент = Элементы.Добавить("ТТС_ДанныеЖурналаТехникПоРасшифровке", Тип("ПолеФормы"), Элементы.ТТС_ЖурналСписок);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "ТТС_ДанныеЖурнала[0].ТехникПоРасшифровке";
	НовыйЭлемент.Доступность = Ложь;
	
	// Поле ввода "ТТС_ДанныеЖурналаНаправление".
	НовыйЭлемент = Элементы.Добавить("ТТС_ДанныеЖурналаНаправление", Тип("ПолеФормы"), Элементы.ТТС_ЖурналСписок);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "ТТС_ДанныеЖурнала[0].Направление";
	НовыйЭлемент.УстановитьДействие("ПриИзменении", "ЦППК_ДанныеЖурналаНаправлениеПриИзменении");
	НовыйЭлемент.Доступность = Ложь;
	
	// Поле ввода "ТТС_ДанныеЖурналаДатаПоездки".
	НовыйЭлемент = Элементы.Добавить("ТТС_ДанныеЖурналаДатаПоездки", Тип("ПолеФормы"), Элементы.ТТС_ЖурналСписок);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "ТТС_ДанныеЖурнала[0].ДатаПоездки";
	НовыйЭлемент.Доступность = Ложь;
	
	// Поле ввода "ТТС_ДанныеЖурналаНомерМаршрута".
	НовыйЭлемент = Элементы.Добавить("ТТС_ДанныеЖурналаНомерМаршрута", Тип("ПолеФормы"), Элементы.ТТС_ЖурналСписок);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "ТТС_ДанныеЖурнала[0].НомерМаршрута";
	НовыйЭлемент.Доступность = Ложь;
	
	// Поле ввода "ТТС_ДанныеЖурналаНомерСкоростемера".
	НовыйЭлемент = Элементы.Добавить("ТТС_ДанныеЖурналаНомерСкоростемера", Тип("ПолеФормы"), Элементы.ТТС_ЖурналСписок);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "ТТС_ДанныеЖурнала[0].НомерСкоростемера";
	НовыйЭлемент.Доступность = Ложь;
	
	// Поле ввода "ТТС_ДанныеЖурналаМашинист".
	НовыйЭлемент = Элементы.Добавить("ТТС_ДанныеЖурналаМашинист", Тип("ПолеФормы"), Элементы.ТТС_ЖурналСписок);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "ТТС_ДанныеЖурнала[0].Машинист";
	НовыйЭлемент.Доступность = Ложь;
	
	// Поле ввода "ТТС_ДанныеЖурналаСерияЛокомотива".
	НовыйЭлемент = Элементы.Добавить("ТТС_ДанныеЖурналаСерияЛокомотива", Тип("ПолеФормы"), Элементы.ТТС_ЖурналСписок);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "ТТС_ДанныеЖурнала[0].СерияЛокомотива";
	НовыйЭлемент.Доступность = Ложь;
	
	// Поле ввода "ТТС_ДанныеЖурналаНомерЛокомотива".
	НовыйЭлемент = Элементы.Добавить("ТТС_ДанныеЖурналаНомерЛокомотива", Тип("ПолеФормы"), Элементы.ТТС_ЖурналСписок);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "ТТС_ДанныеЖурнала[0].НомерЛокомотива";
	НовыйЭлемент.Доступность = Ложь;
	
	// Поле ввода "ТТС_ДанныеЖурналаНомерПоезда".
	НовыйЭлемент = Элементы.Добавить("ТТС_ДанныеЖурналаНомерПоезда", Тип("ПолеФормы"), Элементы.ТТС_ЖурналСписок);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "ТТС_ДанныеЖурнала[0].НомерПоезда";
	НовыйЭлемент.Доступность = Ложь;
	
	// Поле ввода "ТТС_ДанныеЖурналаЭДТ".
	НовыйЭлемент = Элементы.Добавить("ТТС_ДанныеЖурналаЭДТ", Тип("ПолеФормы"), Элементы.ТТС_ЖурналСписок);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
	НовыйЭлемент.ПутьКДанным = "ТТС_ДанныеЖурнала[0].ЭДТ";
	НовыйЭлемент.Доступность = Ложь;
	
	// Поле ввода "ТТС_ДанныеЖурналаСтанцияОтправления".
	НовыйЭлемент = Элементы.Добавить("ТТС_ДанныеЖурналаСтанцияОтправления", Тип("ПолеФормы"), Элементы.ТТС_ЖурналСписок);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "ТТС_ДанныеЖурнала[0].СтанцияОтправления";
	НовыйЭлемент.Доступность = Ложь;
	
	// Поле ввода "ТТС_ДанныеЖурналаСтанцияПрибытия".
	НовыйЭлемент = Элементы.Добавить("ТТС_ДанныеЖурналаСтанцияПрибытия", Тип("ПолеФормы"), Элементы.ТТС_ЖурналСписок);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "ТТС_ДанныеЖурнала[0].СтанцияПрибытия";
	НовыйЭлемент.Доступность = Ложь;
	
	// Поле ввода "ТТС_ДанныеЖурналаМестоСлучая".
	НовыйЭлемент = Элементы.Добавить("ТТС_ДанныеЖурналаМестоСлучая", Тип("ПолеФормы"), Элементы.ТТС_ЖурналСписок);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "ТТС_ДанныеЖурнала[0].МестоСлучая";
	
	// Поле ввода "ТТС_ДанныеЖурналаПуть".
	НовыйЭлемент = Элементы.Добавить("ТТС_ДанныеЖурналаПуть", Тип("ПолеФормы"), Элементы.ТТС_ЖурналСписок);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "ТТС_ДанныеЖурнала[0].Путь";
	
	// Поле ввода "ТТС_ДанныеЖурналаКМ".
	НовыйЭлемент = Элементы.Добавить("ТТС_ДанныеЖурналаКМ", Тип("ПолеФормы"), Элементы.ТТС_ЖурналСписок);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "ТТС_ДанныеЖурнала[0].КМ";
	
	// Поле ввода "ТТС_ДанныеЖурналаПК".
	НовыйЭлемент = Элементы.Добавить("ТТС_ДанныеЖурналаПК", Тип("ПолеФормы"), Элементы.ТТС_ЖурналСписок);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "ТТС_ДанныеЖурнала[0].ПК";
	
	// Поле ввода "ТТС_ДанныеЖурналаВремяНарушения".
	НовыйЭлемент = Элементы.Добавить("ТТС_ДанныеЖурналаВремяНарушения", Тип("ПолеФормы"), Элементы.ТТС_ЖурналСписок);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "ТТС_ДанныеЖурнала[0].ВремяНарушения";
	
	// Поле ввода "ТТС_ДанныеЖурналаСкоростьПоезда".
	НовыйЭлемент = Элементы.Добавить("ТТС_ДанныеЖурналаСкоростьПоезда", Тип("ПолеФормы"), Элементы.ТТС_ЖурналСписок);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "ТТС_ДанныеЖурнала[0].СкоростьПоезда";
	
	// Поле ввода "ТТС_ДанныеЖурналаХарактерПереключенияСветофора".
	НовыйЭлемент = Элементы.Добавить("ТТС_ДанныеЖурналаХарактерПереключенияСветофора", Тип("ПолеФормы"), Элементы.ТТС_ЖурналСписок);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "ТТС_ДанныеЖурнала[0].ХарактерПереключенияСветофора";
	
	// Поле переключателя "ТТС_ДанныеЖурналаРежимВеденияПоезда".
	НовыйЭлемент = Элементы.Добавить("ТТС_ДанныеЖурналаРежимВеденияПоезда", Тип("ПолеФормы"), Элементы.ТТС_ЖурналСписок);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеПереключателя;
	НовыйЭлемент.ПутьКДанным = "ТТС_ДанныеЖурнала[0].РежимВеденияПоезда";
	
	НовыйЭлемент.СписокВыбора.Добавить(Перечисления.ТТС_РежимыВеденияПоезда.Тяга, "Тяга");
	НовыйЭлемент.СписокВыбора.Добавить(Перечисления.ТТС_РежимыВеденияПоезда.Выбег, "Выбег");
	НовыйЭлемент.СписокВыбора.Добавить(Перечисления.ТТС_РежимыВеденияПоезда.ПоложениеКМ0, "Положение КМ-0");
	
	// Поле переключателя "ТТС_ДанныеЖурналаЛитерГоловнойСекции".
	НовыйЭлемент = Элементы.Добавить("ТТС_ДанныеЖурналаЛитерГоловнойСекции", Тип("ПолеФормы"), Элементы.ТТС_ЖурналСписок);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеПереключателя;
	НовыйЭлемент.ПутьКДанным = "ТТС_ДанныеЖурнала[0].ЛитерГоловнойСекции";
	
	НовыйЭлемент.СписокВыбора.Добавить(Перечисления.ТТС_ЛитерыГоловнойСекции.Литер01, "01");
	НовыйЭлемент.СписокВыбора.Добавить(Перечисления.ТТС_ЛитерыГоловнойСекции.Литер09, "09");
	
	// Поле ввода "ТТС_ДанныеЖурналаКодНарушения".
	НовыйЭлемент = Элементы.Добавить("ТТС_ДанныеЖурналаКодНарушения", Тип("ПолеФормы"), Элементы.ТТС_ЖурналСписок);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "ТТС_ДанныеЖурнала[0].КодНарушения";
	
	МассивЗначенийЭтоГруппа = Новый Массив();
	МассивЗначенийЭтоГруппа.Добавить(Ложь);
	
	ЗначенияЭтоГруппа = Новый ФиксированныйМассив(МассивЗначенийЭтоГруппа);
	ПараметрЭтоГруппа = Новый ПараметрВыбора("Отбор.ЭтоГруппа", ЗначенияЭтоГруппа);
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(ПараметрЭтоГруппа);
	
	НовыйЭлемент.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	// Поле надписи "ТТС_ДанныеЖурналаОписаниеНарушения".
	НовыйЭлемент = Элементы.Добавить("ТТС_ДанныеЖурналаОписаниеНарушения", Тип("ПолеФормы"), Элементы.ТТС_ЖурналСписок);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеНадписи;
	НовыйЭлемент.Заголовок = НСтр("ru = 'Описание нарушения'");
	НовыйЭлемент.ПутьКДанным = "ТТС_ДанныеЖурнала[0].КодНарушения.Наименование";
	НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
	НовыйЭлемент.Высота = 2;
	НовыйЭлемент.РастягиватьПоВертикали = Ложь;
	
	// Поле ввода "ТТС_ДанныеЖурналаУточнение".
	НовыйЭлемент = Элементы.Добавить("ТТС_ДанныеЖурналаУточнение", Тип("ПолеФормы"), Элементы.ТТС_ЖурналСписок);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "ТТС_ДанныеЖурнала[0].Уточнение";
	НовыйЭлемент.ПодсказкаВвода = НСтр("ru = 'Обязательно указывать литеру светофора'");
	
	// Поле ввода "ТТС_ДанныеЖурналаДанныеВЛичномДеле".
	НовыйЭлемент = Элементы.Добавить("ТТС_ДанныеЖурналаДанныеВЛичномДеле", Тип("ПолеФормы"), Элементы.ТТС_ЖурналСписок);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
	НовыйЭлемент.ПутьКДанным = "ТТС_ДанныеЖурнала[0].ДанныеВЛичномДеле";
	
	// Поле ввода "ТТС_ДанныеЖурналаНормативныйДокумент".
	НовыйЭлемент = Элементы.Добавить("ТТС_ДанныеЖурналаНормативныйДокумент", Тип("ПолеФормы"), Элементы.ТТС_ЖурналСписок);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "ТТС_ДанныеЖурнала[0].НормативныйДокумент";
	
	// Поле ввода "ТТС_ДанныеЖурналаРезолюцияСБ".
	НовыйЭлемент = Элементы.Добавить("ТТС_ДанныеЖурналаРезолюцияСБ", Тип("ПолеФормы"), Элементы.ТТС_ЖурналСписок);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "ТТС_ДанныеЖурнала[0].РезолюцияСБ";
	НовыйЭлемент.БыстрыйВыбор = Истина;
	
	// Группа "ГруппаМИ".
	НоваяГруппа = Элементы.Добавить("ГруппаМИ", Тип("ГруппаФормы"), Элементы.ТТС_ЖурналСписок);
	НоваяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
	НоваяГруппа.ОтображатьЗаголовок = Ложь;
	НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
	НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	
	// Поле ввода "ТТС_ДанныеЖурналаРезолюцияМИ".
	НовыйЭлемент = Элементы.Добавить("ТТС_ДанныеЖурналаРезолюцияМИ", Тип("ПолеФормы"), Элементы.ГруппаМИ);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "ТТС_ДанныеЖурнала[0].РезолюцияМИ";
	НовыйЭлемент.БыстрыйВыбор = Истина;
	
	МассивЗначенийМИ = Новый Массив();
	МассивЗначенийМИ.Добавить(Справочники.ТТС_КодыВидовМерЖТУ.МИ);
	
	ЗначенияМИ = Новый ФиксированныйМассив(МассивЗначенийМИ);
	ПараметрРодитель = Новый ПараметрВыбора("Отбор.Родитель", ЗначенияМИ);
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(ПараметрРодитель);
	
	НовыйЭлемент.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	НовыйЭлемент.УстановитьДействие("ПриИзменении", "ЦППК_ДанныеЖурналаРезолюцияМИПриИзменении");
	НовыйЭлемент.УстановитьДействие("ОбработкаВыбора", "ЦППК_ДанныеЖурналаРезолюцияМИОбработкаВыбора");
	
	// Поле надписи "ТТС_ДанныеЖурналаИнструктор".
	НовыйЭлемент = Элементы.Добавить("ТТС_ДанныеЖурналаИнструктор", Тип("ПолеФормы"), Элементы.ГруппаМИ);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеНадписи;
	НовыйЭлемент.ПутьКДанным = "ТТС_ДанныеЖурнала[0].Инструктор";
	НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	
	// Группа "ГруппаНД".
	НоваяГруппа = Элементы.Добавить("ГруппаНД", Тип("ГруппаФормы"), Элементы.ТТС_ЖурналСписок);
	НоваяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
	НоваяГруппа.ОтображатьЗаголовок = Ложь;
	НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
	НоваяГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	
	// Поле ввода "ТТС_ДанныеЖурналаРезолюцияНачальникаДепо".
	НовыйЭлемент = Элементы.Добавить("ТТС_ДанныеЖурналаРезолюцияНачальникаДепо", Тип("ПолеФормы"), Элементы.ГруппаНД);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
	НовыйЭлемент.ПутьКДанным = "ТТС_ДанныеЖурнала[0].РезолюцияНачальникаДепо";
	НовыйЭлемент.БыстрыйВыбор = Истина;
	
	МассивЗначенийНД = Новый Массив();
	МассивЗначенийНД.Добавить(Справочники.ТТС_КодыВидовМерЖТУ.НД);
	
	ЗначенияНД = Новый ФиксированныйМассив(МассивЗначенийНД);
	ПараметрРодитель = Новый ПараметрВыбора("Отбор.Родитель", ЗначенияНД);
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(ПараметрРодитель);
	
	НовыйЭлемент.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	// Поле надписи "ТТС_ДанныеЖурналаНачальникДепо".
	НовыйЭлемент = Элементы.Добавить("ТТС_ДанныеЖурналаНачальникДепо", Тип("ПолеФормы"), Элементы.ГруппаНД);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеНадписи;
	НовыйЭлемент.ПутьКДанным = "ТТС_ДанныеЖурнала[0].НачальникДепо";
	НовыйЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	
	// Страница "ТТС_СтраницаПроверки".
	НоваяГруппа = Элементы.Добавить("ТТС_СтраницаПроверки", Тип("ГруппаФормы"), Элементы.ТТС_ЖурналСтраницы);
	НоваяГруппа.Вид = ВидГруппыФормы.Страница;
	НоваяГруппа.Заголовок = НСтр("ru = 'Отметки о проверке'");
	НоваяГруппа.РастягиватьПоВертикали = Истина;
	
	// Таблица "ТТС_ОтметкиОПроверке".
	НоваяТаблица = Элементы.Добавить("ТТС_ОтметкиОПроверке", Тип("ТаблицаФормы"), Элементы.ТТС_СтраницаПроверки);
	НоваяТаблица.ПутьКДанным = "ТТС_ОтметкиОПроверке";
	НоваяТаблица.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	НоваяТаблица.Отображение = ОтображениеТаблицы.ИерархическийСписок;
	НоваяТаблица.ПериодАвтоОбновления = 60;
	НоваяТаблица.ПутьКДаннымКартинкиСтроки = "ТТС_ОтметкиОПроверке.СтандартнаяКартинка";
	НоваяТаблица.НачальноеОтображениеДерева = НачальноеОтображениеДерева.НеРаскрывать;
	НоваяТаблица.АвтоМаксимальнаяШирина = Истина;
	НоваяТаблица.АвтоМаксимальнаяВысота = Истина;
	НоваяТаблица.РастягиватьПоГоризонтали = Истина;
	НоваяТаблица.РастягиватьПоВертикали = Истина; 
	НоваяТаблица.ПоложениеСтрокиПоиска = ПоложениеСтрокиПоиска.Нет;
	НоваяТаблица.ВысотаШапки = 1;
	НоваяТаблица.ВысотаПодвала = 1;
	НоваяТаблица.УстановитьДействие("Выбор", "ЦППК_ОтметкиОПроверкеВыбор");
	
	// Колонка таблицы "ТТС_ОтметкиОПроверкеДатаПроверки".
	НовыйЭлемент  = ЭтаФорма.Элементы.Добавить("ТТС_ОтметкиОПроверкеДатаПроверки", Тип("ПолеФормы"), Элементы.ТТС_ОтметкиОПроверке);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеНадписи;
	НовыйЭлемент.ПутьКДанным = "ТТС_ОтметкиОПроверке.ДатаПроверки";
	
	// Колонка таблицы "ТТС_ОтметкиОПроверкеРольИсполнителя".
	НовыйЭлемент  = ЭтаФорма.Элементы.Добавить("ТТС_ОтметкиОПроверкеРольИсполнителя", Тип("ПолеФормы"), Элементы.ТТС_ОтметкиОПроверке);
	НовыйЭлемент.Заголовок = НСтр("ru = 'Должность'");
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеНадписи;    
	НовыйЭлемент.ПутьКДанным = "ТТС_ОтметкиОПроверке.РольИсполнителя";
	
	// Колонка таблицы "ТТС_ОтметкиОПроверкеПроверяющий".
	НовыйЭлемент  = ЭтаФорма.Элементы.Добавить("ТТС_ОтметкиОПроверкеПроверяющий", Тип("ПолеФормы"), Элементы.ТТС_ОтметкиОПроверке);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеНадписи;
	НовыйЭлемент.ПутьКДанным = "ТТС_ОтметкиОПроверке.Проверяющий";
	
	// Колонка таблицы "ТТС_ОтметкиОПроверкеСЗамечаниями".
	НовыйЭлемент  = ЭтаФорма.Элементы.Добавить("ТТС_ОтметкиОПроверкеСЗамечаниями", Тип("ПолеФормы"), Элементы.ТТС_ОтметкиОПроверке);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеФлажка;
	НовыйЭлемент.ПутьКДанным = "ТТС_ОтметкиОПроверке.СЗамечаниями";
	
	// Колонка таблицы "ТТС_ОтметкиОПроверкеКомментарий".
	НовыйЭлемент  = ЭтаФорма.Элементы.Добавить("ТТС_ОтметкиОПроверкеКомментарий", Тип("ПолеФормы"), Элементы.ТТС_ОтметкиОПроверке);
	НовыйЭлемент.Вид = ВидПоляФормы.ПолеНадписи;
	НовыйЭлемент.ПутьКДанным = "ТТС_ОтметкиОПроверке.Комментарий";
	
	ТТС_ЖурналыТУВызовСервера.ЗаполнитьДанныеЖурналов(ЭтаФорма);
	ЦППК_УстановитьПараметрыВыбора();
	ТТС_ЖурналыТУВызовСервера.УправлениеВидимостьюИДоступностью(ЭтаФорма);
	
	ЭтаФорма["ТТС_ОтметкиОПроверке"].КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("ВнутреннийДокумент", Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
&После("ПрочитатьДействия")
Процедура ЦППК_ПрочитатьДействия(ПерезаполнитьПодписантов)
	УстановитьДоступностьПоСостоянию();
КонецПроцедуры

&НаСервере
&После("ПрочитатьСвязи")
Процедура ЦППК_ПрочитатьСвязи(ТипыСвязей)
	
	Если НЕ ПолучитьФункциональнуюОпцию("ЦППК_УчитыватьВноситИзменения") Тогда
		Возврат;
	КонецЕсли;	
	
	ЭтаФорма.ИзмененВСоответствии = СвязиОбъектов.ПолучитьСвязанныйОбъект(Объект.Ссылка, Справочники.ТипыСвязей.ЦППК_ИзмененДокументом);
	
	Если ТипыСвязей = Неопределено Или ТипыСвязей.Найти(Справочники.ТипыСвязей.ЦППК_ИзмененДокументом) <> Неопределено Тогда 
		
		ЭтаФорма.ЦППК_СписокИзмененныхДокументов.Очистить();
		ЦППК_ОбщийМодульВызовСервера.ЦППК_ПрочитатьИзмененныеДокументы(Объект.Ссылка, Объект.РегистрационныйНомер, ЭтаФорма.ЦППК_СписокИзмененныхДокументов);
		
		ВремТабл = ЭтаФорма.ЦППК_СписокИзмененныхДокументов.Выгрузить();
		СписокНеДействующихДокументовНачальное.Загрузить(ВремТабл);
		
		Если ЭтаФорма.ЦППК_СписокИзмененныхДокументов.Количество() <> 0 Тогда
			Элементы.ЦППК_ПолеНадписиВноситИзменения.Заголовок = СтрШаблон(
				НСтр("ru = 'Вносит изменения в (%1)'"), ЭтаФорма.ЦППК_СписокИзмененныхДокументов.Количество());
		Иначе
			Элементы.ЦППК_ПолеНадписиВноситИзменения.Заголовок = НСтр("ru = 'Вносит изменения в'");
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЦППК_ПриСозданииНаСервереПеред(Отказ, СтандартнаяОбработка)
	ЦППК_ПодключаемыеКоманды.ДокументыПредприятияПриСозданииНаСервереПеред(ЭтаФорма);
КонецПроцедуры

&НаСервере
&ИзменениеИКонтроль("ПриЗаписиНаСервере")
Процедура ЦППК_ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)

	Если ЗначениеЗаполнено(ПерепискаПоПредмету) И НачальныйПерепискаПоПредмету <> ПерепискаПоПредмету Тогда 
		ОснованиеПереписки = ПерепискаПоПредмету;	
	КонецЕсли;

	// Установка связей
	РаботаСОбращениями.ЗафиксироватьСвязанныеДокументыПоВопросамОбращения(ЭтотОбъект, ТекущийОбъект.Ссылка);
	СвязиОбъектов.УстановитьСвязь(ТекущийОбъект.Ссылка, 
	НачальныйПерепискаПоПредмету, ПерепискаПоПредмету, Справочники.ТипыСвязей.ПерепискаПоПредмету);

	Если ЗначениеЗаполнено(Параметры.ПисьмоОснование) Тогда
		СвязиОбъектов.УстановитьСвязь(ТекущийОбъект.Ссылка, 
		Неопределено, Параметры.ПисьмоОснование, Справочники.ТипыСвязей.НаОснованииПисьма);
	КонецЕсли;

	ЭтоРегистрация = ПараметрыЗаписи.Свойство("Регистрация");	
	ДокументЗарегистрированАргумент = ЗначениеЗаполнено(ТекущийОбъект.РегистрационныйНомер);	

	СвязиОбъектов.УстановитьДелаетНеДействующим(ТекущийОбъект.Ссылка, 
	СписокНеДействующихДокументовНачальное, СписокНеДействующихДокументов, 
	Справочники.ТипыСвязей.ДелаетНеДействующим,,,,
	ЭтоРегистрация, ДокументЗарегистрированАргумент);

	ВремТабл = СписокНеДействующихДокументов.Выгрузить();
	СписокНеДействующихДокументовНачальное.Загрузить(ВремТабл);

	ТекДата = НачалоДня(ТекущаяДатаСеанса());

	Для Каждого СтрокаДокумент Из СписокНеДействующихДокументов Цикл

		УстановитьРеквизит = Истина;

		Если ЗначениеЗаполнено(СтрокаДокумент.ДатаОтмены) Тогда

			УстановитьРеквизит = Ложь; 

			// дата в прошлом, и идет регистрация	
			Если СтрокаДокумент.ДатаОтмены <= ТекДата И СтрокаДокумент.Источник = "СвязиОбъектов" Тогда	
				УстановитьРеквизит = Истина; 
			КонецЕсли;	

			// если дата в будущем - не пишем

		КонецЕсли;	

		Если УстановитьРеквизит Тогда

			СвязиОбъектов.УстановитьРеквизитыПриДобавленииСвязи(СтрокаДокумент.Документ,,
			Справочники.ТипыСвязей.НеДействуетВСоответствии, ДокументЗарегистрированАргумент,
			СтрокаДокумент.ДатаОтмены);
        КонецЕсли;

	КонецЦикла;
	
#Вставка
	ЦППК_ОбщийМодульВызовСервера.ЦППК_УстановитьИзменение(ТекущийОбъект.Ссылка, 
	ЭтаФорма.ЦППК_СписокИзмененныхДокументовНачальное, ЭтаФорма.ЦППК_СписокИзмененныхДокументов, 
	Справочники.ТипыСвязей.ЦППК_ИзмененДокументом,,,,
	ЭтоРегистрация, ДокументЗарегистрированАргумент);

	ВремТабл = ЭтаФорма.ЦППК_СписокИзмененныхДокументов.Выгрузить();
	ЭтаФорма.ЦППК_СписокИзмененныхДокументовНачальное.Загрузить(ВремТабл);

	//ТекДата = НачалоДня(ТекущаяДатаСеанса());

	Для Каждого СтрокаДокумент Из ЭтаФорма.ЦППК_СписокИзмененныхДокументов Цикл

		Если НЕ СтрокаДокумент.Документ.ЦППК_Изменен Тогда
			ЗаблокироватьДанныеДляРедактирования(СтрокаДокумент.Документ);
			ДокументОбъект = СтрокаДокумент.Документ.ПолучитьОбъект();
			ДокументОбъект.ЦППК_Изменен = Истина;
			ДокументОбъект.Записать();
        КонецЕсли;
	
	КонецЦикла;	

#КонецВставки
	
	// пишем ранее подготовленные обязательные связи
	Для Каждого Строка Из ОбязательныеСвязи Цикл

		Если Строка.НужноЗаписать Тогда

			Попытка

				Если Строка.СвязатьСТекущимДокументом Тогда 
					// Связать существующий объект с текущим документом
					СвязиОбъектов.СоздатьСвязь(
					Строка.СвязанныйОбъект, 
					ТекущийОбъект.Ссылка,
					Строка.ТипСвязи,,,
					Строка.Комментарий);
				Иначе
					// Связать текущий документ с существующим
					СвязиОбъектов.СоздатьСвязь(
					ТекущийОбъект.Ссылка,
					Строка.СвязанныйОбъект,
					Строка.ТипСвязи,,,
					Строка.Комментарий);
				КонецЕсли;

				Строка.НужноЗаписать = Ложь;

			Исключение
				ОбязательныеСвязи.Удалить(Строка);
				ВызватьИсключение;
			КонецПопытки;

		КонецЕсли;

	КонецЦикла;

	// Изменение состояния
	Если ПараметрыЗаписи.Свойство("МассивСостояний") И ТипЗнч(ПараметрыЗаписи.МассивСостояний) = Тип("Массив") Тогда 
		ИзменитьСостояние(ТекущийОбъект.Ссылка, ПараметрыЗаписи.МассивСостояний);
	КонецЕсли;

	СвязиПрочитаны = Ложь;
	// Авансовый отчет.
	Если ЗначениеЗаполнено(АвансовыйОтчетПриЧтении)
		И АвансовыйОтчет <> АвансовыйОтчетПриЧтении Тогда
		ЗаполнитьСвязи();
		СвязиПрочитаны = Истина;
		СвязиОбъектов.УдалитьСвязь(ТекущийОбъект.Ссылка,
		АвансовыйОтчетПриЧтении,
		Справочники.ТипыСвязей.АвансовыйОтчет);
	КонецЕсли;
	Если ЯвляетсяЗаявкойНаОплату
		И (ТипЗнч(Получатель) = Тип("СправочникСсылка.Пользователи")
		Или ТипЗнч(Получатель) = Тип("СправочникСсылка.Сотрудники")) Тогда
		Если ЗначениеЗаполнено(АвансовыйОтчет) Тогда
			Если Не СвязиПрочитаны Тогда
				ЗаполнитьСвязи();
				СвязиПрочитаны = Истина;
			КонецЕсли;

			СвязиОбъектов.УстановитьСвязь(ТекущийОбъект.Ссылка, 
			АвансовыйОтчетПриЧтении,
			АвансовыйОтчет,
			Справочники.ТипыСвязей.АвансовыйОтчет);
		КонецЕсли;
		ЗаписьОбязательства = РегистрыСведений.ОбязательстваПоАвансовымОтчетам.СоздатьМенеджерЗаписи();
		ЗаписьОбязательства.ЗаявкаНаОплату = ТекущийОбъект.Ссылка;
		ЗаписьОбязательства.Предоставлен = АвансовыйОтчетПредоставлен;
		ЗаписьОбязательства.Требуется = АвансовыйОтчетТребуется;
		ЗаписьОбязательства.СрокПредоставления = СрокПредоставленияАвансовогоОтчета;
		ЗаписьОбязательства.Записать();
	ИначеЕсли АвансовыйОтчетТребуется Тогда
		ЗаписьОбязательства = РегистрыСведений.ОбязательстваПоАвансовымОтчетам.СоздатьМенеджерЗаписи();
		ЗаписьОбязательства.ЗаявкаНаОплату = ТекущийОбъект.Ссылка;
		ЗаписьОбязательства.Удалить();
	КонецЕсли;

	// СтандартныеПодсистемы.РаботаСКонтрагентами
	ПроверкаКонтрагентов.ПриЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.РаботаСКонтрагентами

	ГотовностьКОтправкеМЭДО_Сервер(Отказ);

КонецПроцедуры

#КонецОбласти

#КонецОбласти
