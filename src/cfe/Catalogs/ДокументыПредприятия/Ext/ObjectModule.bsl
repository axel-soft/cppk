
&ИзменениеИКонтроль("ОбработкаЗаполнения")
Процедура ЦППК_ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка) Экспорт 
	
	Если ЭтоНовый() Тогда 
		
		РегистрационныйНомер = "";
		ЧисловойНомер 	= 0;
		ДатаРегистрации = '00010101';
		ДатаСоздания 	= ТекущаяДатаСеанса();
		Зарегистрировал = Справочники.Сотрудники.ПустаяСсылка();
		Ответственный = Справочники.Сотрудники.ПустаяСсылка();
		ОтветственныйЗаХранение = Справочники.Сотрудники.ПустаяСсылка();
		Подготовил = Сотрудники.ОсновнойСотрудник();
		Подразделение = Сотрудники.ПодразделениеСотрудника(Подготовил);
		Создал	 	  = Подготовил;
		
		КоличествоЭкземпляров = 1;
		КоличествоЛистов 	 = 1;
		КоличествоПриложений = 0;
		ЛистовВПриложениях 	 = 0;
		Дело = Справочники.ДелаХраненияДокументов.ПустаяСсылка();
		СрокИсполнения = '00010101';

		Если Не ЗначениеЗаполнено(ВидДокумента) Тогда 
			ВидДокумента = Делопроизводство.ПолучитьВидДокументаПоУмолчанию(Ссылка);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Организация) Тогда 
			Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
		КонецЕсли;
		
		Если Константы.ИспользоватьГрифыДоступа.Получить() Тогда
			ГрифДоступа = Константы.ГрифДоступаПоУмолчанию.Получить();
		КонецЕсли;	

		Если ЗначениеЗаполнено(ВидДокумента) 
			И ПолучитьФункциональнуюОпцию("ИспользоватьСуммуВоВнутренних",
			Новый Структура("ВидДокумента", ВидДокумента)) Тогда
			Валюта = Делопроизводство.ПолучитьВалютуПоУмолчанию();
		КонецЕсли;	
		
		Если Не ЗначениеЗаполнено(Проект) Тогда
			Проект = РаботаСПроектами.ПолучитьПроектПоУмолчанию();
		КонецЕсли;
		
		ФормаДокумента = Перечисления.ВариантыФормДокументов.Бумажная;
		Адресат	= Справочники.Сотрудники.ПустаяСсылка();
		Важность = Перечисления.ВариантыВажностиОбъектов.Обычная;
	КонецЕсли;
	
	ОснованиеЗаполнения = ДанныеЗаполнения;
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") 
		И ДанныеЗаполнения.Свойство("Основание") Тогда
		ОснованиеЗаполнения = ДанныеЗаполнения.Основание;
	КонецЕсли;
	
	// Сначала заполняем данными шаблона - затем документа-основания.
	
	// Создание из шаблона.
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") 
		И ДанныеЗаполнения.Свойство("ШаблонДокумента") Тогда
		
		Шаблон = ДанныеЗаполнения.ШаблонДокумента;
		ШаблоныДокументов.ЗаполнитьРеквизитыДокументаПоШаблону(Шаблон, ЭтотОбъект);
		
	КонецЕсли;
	
	// Создание документов предприятия на основании других документов предприятия.
	Если ТипЗнч(ОснованиеЗаполнения) = Тип("СправочникСсылка.ДокументыПредприятия") Тогда
		РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОснованиеЗаполнения, 
			"Заголовок, НоменклатураДел, Контрагент, КонтактноеЛицо, Папка, Проект, ГрифДоступа, ВопросДеятельности, 
			|Организация, Сумма, Валюта, СуммаНДС, Товары, Важность, ВидДокумента.ИспользоватьВажность,
			|ВидДокумента.ЯвляетсяИсходящейКорреспонденцией, ВидДокумента.ЯвляетсяВходящейКорреспонденцией");

		КэшВидаДокумента = Делопроизводство.КэшВидаДокумента(ВидДокумента);		
			
		Если Не ЗначениеЗаполнено(Заголовок) Тогда
			Если КэшВидаДокумента.ЯвляетсяИсходящейКорреспонденцией Тогда
				Если РеквизитыОснования.ВидДокументаЯвляетсяВходящейКорреспонденцией Тогда
					Заголовок = СтрШаблон(НСтр("ru = 'Ответ ""%1""'"), РеквизитыОснования.Заголовок);
				ИначеЕсли Не РеквизитыОснования.ВидДокументаЯвляетсяИсходящейКорреспонденцией Тогда
					Заголовок = СтрШаблон(НСтр("ru = 'Отправка ""%1""'"), РеквизитыОснования.Заголовок);
				Иначе
#Удаление
					Заголовок = РеквизитыОснования.Заголовок;
#КонецУдаления
				КонецЕсли;
			
			ИначеЕсли Не КэшВидаДокумента.ЯвляетсяВходящейКорреспонденцией Тогда			
#Удаление
				Заголовок = РеквизитыОснования.Заголовок;
#КонецУдаления
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Организация) Тогда
			Организация = РеквизитыОснования.Организация;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ВопросДеятельности) Тогда
			ВопросДеятельности = РеквизитыОснования.ВопросДеятельности;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Папка) Тогда
			Папка = РеквизитыОснования.Папка;
		КонецЕсли;
		
		Если КэшВидаДокумента.ИспользоватьВажность 
			И РеквизитыОснования.ВидДокументаИспользоватьВажность 
			И Важность = Перечисления.ВариантыВажностиОбъектов.Обычная 
			И Важность <> РеквизитыОснования.Важность Тогда
			Важность = РеквизитыОснования.Важность;
		КонецЕсли;
		
		Если Стороны.Количество() = 0 Тогда 
			Для каждого Строка Из ОснованиеЗаполнения.Стороны Цикл
				НоваяСтрока = Стороны.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, "Сторона, КонтактноеЛицо, Наименование");
			КонецЦикла;
			
		ИначеЕсли Стороны.Количество() = 1 Тогда 
			// Первая строка должна быть "Организацией", если она введена, то копируем только контрагентов
			ВведенаОрганизация = Неопределено;
			Для Каждого СтрокаСторона из Стороны Цикл 
				Если ЗначениеЗаполнено(СтрокаСторона.Сторона) 
					И ТипЗнч(СтрокаСторона.Сторона) = Тип("СправочникСсылка.Организации") Тогда 
					ВведенаОрганизация = СтрокаСторона.Сторона;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			ПерваяСтрока = Истина;
			Для Каждого Строка Из ОснованиеЗаполнения.Стороны Цикл
				Если ВведенаОрганизация <> Неопределено И ЗначениеЗаполнено(Строка.Сторона) 
					И ТипЗнч(Строка.Сторона) = Тип("СправочникСсылка.Организации") Тогда 
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = Стороны.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, "Сторона, КонтактноеЛицо, Наименование");
			КонецЦикла;
					
		ИначеЕсли Стороны.Количество() = 2 И КэшВидаДокумента.ЯвляетсяЗаявкойНаОплату Тогда
			
			// В заявке на оплату всегда есть 2 стороны - плательщик и получатель
			// Плательщик - наша организация, получатель - контрагент из основания
			
			ОрганизацияОснования = Неопределено;
			КонтрагентОснования = Неопределено;
			
			Для Каждого СтрокаСтороныОснования Из ОснованиеЗаполнения.Стороны Цикл
				Если ЗначениеЗаполнено(СтрокаСтороныОснования.Сторона) Тогда
					Если ТипЗнч(СтрокаСтороныОснования.Сторона) = Тип("СправочникСсылка.Организации")
						И Не ЗначениеЗаполнено(ОрганизацияОснования) Тогда
						ОрганизацияОснования = СтрокаСтороныОснования;
					ИначеЕсли Не ЗначениеЗаполнено(КонтрагентОснования) Тогда
						КонтрагентОснования = СтрокаСтороныОснования;
					Иначе
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого Сторона Из Стороны Цикл
				Если Не ЗначениеЗаполнено(Сторона.Сторона) Тогда
					Если Сторона.Наименование = Справочники.НаименованияСторон.Плательщик Тогда
						Если ЗначениеЗаполнено(ОрганизацияОснования) Тогда
							ЗаполнитьЗначенияСвойств(Сторона, ОрганизацияОснования, "Сторона, КонтактноеЛицо");
						Иначе
							Сторона.Сторона = РеквизитыОснования.Организация;
						КонецЕсли;
					ИначеЕсли Сторона.Наименование = Справочники.НаименованияСторон.Получатель Тогда
						Если ЗначениеЗаполнено(КонтрагентОснования) Тогда
							ЗаполнитьЗначенияСвойств(Сторона, КонтрагентОснования, "Сторона, КонтактноеЛицо");
						Иначе
							Сторона.Сторона = РеквизитыОснования.Контрагент;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Если Контрагенты.Количество() = 0 Тогда 
			Для каждого Строка Из ОснованиеЗаполнения.Контрагенты Цикл
				НоваяСтрока = Контрагенты.Добавить();
				НоваяСтрока.Контрагент = Строка.Контрагент;
				НоваяСтрока.КонтактноеЛицо = Строка.КонтактноеЛицо;
				НоваяСтрока.ПодписалОтКонтрагента = Строка.ПодписалОтКонтрагента;
			КонецЦикла;
			
			Если Не ЗначениеЗаполнено(Контрагент) Тогда
				Контрагент = РеквизитыОснования.Контрагент;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(КонтактноеЛицо) Тогда
				КонтактноеЛицо = РеквизитыОснования.КонтактноеЛицо;
			КонецЕсли;
		КонецЕсли;
		
#Вставка
		// { *Грошев (ТТС) [29.04.2019]  рефакторинг  //РеквизитыОснования.ЯвляетсяИсходящейКорреспонденцией
		Если РеквизитыОснования.ВидДокументаЯвляетсяВходящейКорреспонденцией И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидДокумента,"ТТС_УчетЗаявителей",истина) Тогда
			ФИОЗаявителя_ТТС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОснованиеЗаполнения,"ФИОЗаявителя_ТТС",истина);
		КонецЕсли;
		//}
		
		//++AxelSoft Шарапова 08.10.2024 САНФ-029223
		ЯвляетсяЗаявкойНаВозвратОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОснованиеЗаполнения, "ВидДокумента.ЯвляетсяЗаявкойНаВозврат", Истина); 
		ЯвляетсяОтветомЗаявкиНаВозврат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидДокумента, "ЦППК_ЯвляетсяОтветомЗаявкиНаВозврат", Истина);
		Если ЯвляетсяЗаявкойНаВозвратОснования И ЯвляетсяОтветомЗаявкиНаВозврат Тогда
			ЦППК_ФИОЗаявителя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОснованиеЗаполнения, "ЦППК_ФИОЗаявителя", Истина);
		КонецЕсли;
		//--AxelSoft Шарапова 08.10.2024 САНФ-029223
#КонецВставки

		Сумма = РеквизитыОснования.Сумма;
		СуммаНДС = РеквизитыОснования.СуммаНДС;
		Если Не ЗначениеЗаполнено(Валюта) Тогда
			Валюта = РеквизитыОснования.Валюта;
		КонецЕсли;
		
		Если Товары.Количество() = 0 И КэшВидаДокумента.ВестиУчетТоваровИУслуг Тогда
			ТоварыОснования = РеквизитыОснования.Товары.Выгрузить();
			РеквизитыНоменклатур = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
				ТоварыОснования.ВыгрузитьКолонку("Номенклатура"), "СтавкаНДС, Цена, ЕдиницаИзмерения"); 
			Для Каждого Строка Из ТоварыОснования Цикл
				Если Не ЗначениеЗаполнено(Строка.Номенклатура) Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				
				РеквизитыНоменклатуры = РеквизитыНоменклатур.Получить(НоваяСтрока.Номенклатура);
				Если РеквизитыНоменклатуры <> Неопределено Тогда
					Если ЗначениеЗаполнено(РеквизитыНоменклатуры.Цена) Тогда 
						НоваяСтрока.Цена = РеквизитыНоменклатуры.Цена;
					КонецЕсли;
					Если ЗначениеЗаполнено(РеквизитыНоменклатуры.СтавкаНДС) Тогда 
						НоваяСтрока.СтавкаНДС = РеквизитыНоменклатуры.СтавкаНДС;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(РеквизитыНоменклатуры.ЕдиницаИзмерения) Тогда 
						НоваяСтрока.ЕдиницаИзмерения = РеквизитыНоменклатуры.ЕдиницаИзмерения;
					КонецЕсли;
				КонецЕсли;
				
				Если НоваяСтрока.Количество = 0 Тогда 
					НоваяСтрока.Количество = 1;
				КонецЕсли;
				
				ДелопроизводствоКлиентСервер.ПересчитатьСуммуВСтрокеТЧ(НоваяСтрока, НоваяСтрока.СтавкаНДС);
			КонецЦикла;
			
			Если РеквизитыОснования.Сумма = ТоварыОснования.Итог("Сумма") Тогда 
				Сумма = Товары.Итог("Сумма");
			КонецЕсли;
			
			УчитыватьНДС = Делопроизводство.УчитыватьНДС(Организация);
			Если УчитыватьНДС Тогда 
				Если РеквизитыОснования.СуммаНДС = ТоварыОснования.Итог("СуммаНДС") Тогда 
					СуммаНДС = Товары.Итог("СуммаНДС");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(НоменклатураДел) Тогда
			НоменклатураДел = РеквизитыОснования.НоменклатураДел;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ГрифДоступа) Тогда
			ГрифДоступа = РеквизитыОснования.ГрифДоступа;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Проект) Тогда
			Проект = РеквизитыОснования.Проект;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ОснованиеЗаполнения) = Тип("Массив")
		И ОснованиеЗаполнения.Количество() > 0
		И ТипЗнч(ОснованиеЗаполнения[0]) = Тип("СправочникСсылка.Файлы") Тогда
		
		Если ОснованиеЗаполнения.Количество() = 1 И Не ЗначениеЗаполнено(Заголовок) Тогда
			Заголовок = ОснованиеЗаполнения[0].ПолноеНаименование;
		КонецЕсли;
		
		Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") И Не ЗначениеЗаполнено(Проект) Тогда
			Проекты = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(ОснованиеЗаполнения, "Проект");
			Проект = Проекты.Получить(ОснованиеЗаполнения[0]);
			Для Каждого Строка Из Проекты Цикл
				Если Строка.Значение <> Проект Тогда 
					Проект = Неопределено;
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
		КонецЕсли;	
		
	ИначеЕсли ВстроеннаяПочтаКлиентСервер.ЭтоПисьмо(ОснованиеЗаполнения) Тогда
		
		ОснованиеЗаполненияОбъект = ОснованиеЗаполнения.ПолучитьОбъект();
		
		Если Не ЗначениеЗаполнено(Содержание) Тогда
			Содержание = ОснованиеЗаполненияОбъект.ПолучитьТекстовоеПредставлениеСодержанияПисьма();
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Заголовок) Тогда
			Заголовок = ОснованиеЗаполненияОбъект.Тема;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Проект) Тогда
			Проект = ОснованиеЗаполненияОбъект.Проект;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ОснованиеЗаполнения) = Тип("Структура") Тогда 
		
		ЗаполнитьИзСтруктуры(ОснованиеЗаполнения, "Заголовок", Заголовок);
		ЗаполнитьИзСтруктуры(ОснованиеЗаполнения, "Содержание", Содержание);
		ЗаполнитьИзСтруктуры(ОснованиеЗаполнения, "Комментарий", Комментарий);
		ЗаполнитьИзСтруктуры(ОснованиеЗаполнения, "СуммаДокумента", Сумма);
		ЗаполнитьИзСтруктуры(ОснованиеЗаполнения, "Папка", Папка);
		ЗаполнитьИзСтруктуры(ОснованиеЗаполнения, "Ответственный", Ответственный);
		
		Если ОснованиеЗаполнения.Свойство("Стороны")
				И ТипЗнч(ОснованиеЗаполнения.Стороны) = Тип("ТаблицаЗначений") Тогда
			
			Стороны.Очистить();
			Для Каждого Строка Из ОснованиеЗаполнения.Стороны Цикл
				НоваяСтрока = Стороны.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			КонецЦикла;
			
		ИначеЕсли Стороны.Количество() = 0 Тогда
			
			Если ЗначениеЗаполнено(Организация) Тогда
				НоваяСтрока = Стороны.Добавить();
				НоваяСтрока.Сторона = Организация;
			КонецЕсли;
			
			ОснованиеКонтрагент = Неопределено;
			ОснованиеЗаполнения.Свойство("Контрагент", ОснованиеКонтрагент);
			
			ОснованиеКонтактноеЛицо = Неопределено;
			ОснованиеЗаполнения.Свойство("КонтактноеЛицо", ОснованиеКонтактноеЛицо);
			
			ОснованиеПодписалОтКонтрагента = Неопределено; 
			ОснованиеЗаполнения.Свойство("ПодписалОтКонтрагента", ОснованиеПодписалОтКонтрагента);
			
			Если ЗначениеЗаполнено(ОснованиеКонтрагент)
				Или ЗначениеЗаполнено(ОснованиеКонтактноеЛицо)
				Или ЗначениеЗаполнено(ОснованиеПодписалОтКонтрагента) Тогда 
					НоваяСтрока = Стороны.Добавить();
					НоваяСтрока.Сторона = ОснованиеКонтрагент;
					НоваяСтрока.КонтактноеЛицо = ОснованиеКонтактноеЛицо;
					НоваяСтрока.Подписал = ОснованиеПодписалОтКонтрагента;
					
					НоваяСтрока = Контрагенты.Добавить();
					НоваяСтрока.Контрагент = ОснованиеКонтрагент;
					НоваяСтрока.КонтактноеЛицо = ОснованиеКонтактноеЛицо;
					НоваяСтрока.ПодписалОтКонтрагента = ОснованиеПодписалОтКонтрагента;
			КонецЕсли;
			
		КонецЕсли;
		
		СтруктураИменПередаваемыхРеквизитов = ОбменСКонтрагентамиДОСервер.ИменаПередаваемыхРеквизитов();
		
		Для Каждого КлючИмяПередаваемогоРеквизита Из СтруктураИменПередаваемыхРеквизитов Цикл
			ИмяПередаваемогоРеквизита = КлючИмяПередаваемогоРеквизита.Ключ;
			Если ОснованиеЗаполнения.Свойство(ИмяПередаваемогоРеквизита) 
				И ЗначениеЗаполнено(ОснованиеЗаполнения[ИмяПередаваемогоРеквизита]) Тогда
				Если Метаданные.Справочники.ДокументыПредприятия.Реквизиты.Найти(ИмяПередаваемогоРеквизита) <> Неопределено Тогда
					ЭтотОбъект[ИмяПередаваемогоРеквизита] = ОснованиеЗаполнения[ИмяПередаваемогоРеквизита];
				КонецЕсли; 
			КонецЕсли; 
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ОснованиеЗаполнения) = Тип("СправочникСсылка.Мероприятия") Тогда
		
		РеквизитыМероприятия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОснованиеЗаполнения,
			"Наименование, ГрифДоступа, Организация, Проект, Организатор, ОрганизаторКонтактноеЛицо");
		
		Если Не ЗначениеЗаполнено(Заголовок) Тогда
			Если ВидДокумента.ЯвляетсяИсходящейКорреспонденцией Тогда
					Заголовок = СтрШаблон(НСтр("ru = 'Отправка ""%1""'"), РеквизитыМероприятия.Наименование);
				Иначе
					Заголовок = РеквизитыМероприятия.Наименование;
			КонецЕсли;
		КонецЕсли;

		ГрифДоступа = РеквизитыМероприятия.ГрифДоступа;
		Организация = РеквизитыМероприятия.Организация;
		Проект = РеквизитыМероприятия.Проект;
		
		Если ТипЗнч(РеквизитыМероприятия.Организатор) = Тип("СправочникСсылка.Контрагенты") Тогда
			
			Если Стороны.Количество() = 0 Тогда
				// Если стороны не заполнены - добавляем нового получателя.
				НоваяСтрока = Стороны.Добавить();
				НоваяСтрока.Сторона = РеквизитыМероприятия.Организатор;
				НоваяСтрока.КонтактноеЛицо = РеквизитыМероприятия.ОрганизаторКонтактноеЛицо;
			Иначе
				// Если стороны заполнены - пытаемся заполнить получателя, возможно есть подходящие.
				Для Каждого Сторона Из Стороны Цикл
					Если ЗначениеЗаполнено(Сторона.Сторона) Или ЗначениеЗаполнено(Сторона.КонтактноеЛицо) Тогда
						Продолжить;
					КонецЕсли;
					Сторона.Сторона = РеквизитыМероприятия.Организатор;
					Сторона.КонтактноеЛицо = РеквизитыМероприятия.ОрганизаторКонтактноеЛицо;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Тематика)
		И ТипЗнч(ДанныеЗаполнения) = Тип("Структура") 
		И ДанныеЗаполнения.Свойство("ТематикаДокумента") Тогда
		Тематика = ДанныеЗаполнения.ТематикаДокумента;
	КонецЕсли;
	
КонецПроцедуры

&ИзменениеИКонтроль("ОбработкаПроверкиЗаполнения")
Процедура ЦППК_ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	СтарыеРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "Дело, ВопросДеятельности, Контрагент, 
		|ВидДокумента");
	
#Вставка
	//+ЦППК САНФ-023807, 19.02.2024г
	Если ВидДокумента = Справочники.ВидыДокументов.ПолучитьСсылку(Новый УникальныйИдентификатор("14cf8b02-718b-11e1-a645-00155d01333c")) тогда
		ПроверяемыеРеквизиты.Добавить("СрокИсполнения");  
	КонецЕсли;       
	//-ЦППК, Контроль реквизитов в входящих документах 
	
	//Zayc + 03.04.2016 Добавляем првоерку реквизитов для заявок на возврат
	Если  ЗначениеЗаполнено(ВидДокумента) Тогда
		
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидДокумента, "ЯвляетсяВходящейКорреспонденцией",истина)
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидДокумента,"ЯвляетсяЗаявкойНаВозврат",истина) Тогда
			
			ПроверяемыеРеквизиты.Добавить("ДатаЗаявления_ТТС");
			ПроверяемыеРеквизиты.Добавить("СтанцияПринявшаяЗаявление_ТТС");
			ПроверяемыеРеквизиты.Добавить("ФИОБК_ТТС");
			ПроверяемыеРеквизиты.Добавить("МестоРассмотрения");   // перенос снизу
			ПроверяемыеРеквизиты.Добавить("ЦППК_ВидПД");
			ПроверяемыеРеквизиты.Добавить("ЦППК_НаименованиеЭлектронногоНосителя");
			ПроверяемыеРеквизиты.Добавить("ЦППК_НомерЭлектронногоНосителя");     
			ПроверяемыеРеквизиты.Добавить("ЦППК_СпособОплаты");
			ПроверяемыеРеквизиты.Добавить("ЦППК_ПричинаОбращения");
			
			Если ЗначениеЗаполнено(МестоРассмотрения) Тогда
				ПроверяемыеРеквизиты.Добавить("ТранспортнаяКарта_ТТС");
				ПроверяемыеРеквизиты.Добавить("КвитанцияОбОформлении_ТТС");
				Если МестоРассмотрения = Перечисления.МестоРассмотренияПоДокументуЗВДС.ЦентральныйОфис Тогда
					ПроверяемыеРеквизиты.Добавить("КвитанцияОбОплатеБанкКартой_ТТС");
				КонецЕсли;	
			КонецЕсли;
			
			Если Не ТТС_ОбщийМодуль.НайтиСоответствияКассыИСтанции(ЭтотОбъект) Тогда
				ПроверяемыеРеквизиты.Добавить("ДатаПолученияСоСтанции");
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РешениеЦО) Тогда
				ПроверяемыеРеквизиты.Добавить("ДатаПолученияЗаявления_ТТС");
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;
#КонецВставки

	Если ЗначениеЗаполнено(РегистрационныйНомер) И ЗначениеЗаполнено(ДатаРегистрации) Тогда 
		#Вставка
		Если СокрЛП(ЭтотОбъект.ВидДокумента) = "Журнал ТУ-1" И НЕ ЭтотОбъект.ЭтоНовый() Тогда
			// повторная регистрация задним числом
		Иначе		
		#КонецВставки
		Если Не Делопроизводство.НомерУникален(ЭтотОбъект) Тогда 
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Регистрационный номер не уникален!'"),
				ЭтотОбъект,
				"РегистрационныйНомер",, 
				Отказ);
		КонецЕсли;	
		#Вставка
		КонецЕсли;
		#КонецВставки
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВременныйНомер) Тогда 
		Если Не Делопроизводство.НомерУникален(ЭтотОбъект, Истина) Тогда 
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Временный номер не уникален!'"),
				ЭтотОбъект,
				"РегистрационныйНомер",, 
				Отказ);
		КонецЕсли;	
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСуммуВоВнутренних", 
		Новый Структура("ВидДокумента", ВидДокумента)) Тогда 
		Если ЗначениеЗаполнено(Сумма) Тогда 
			ПроверяемыеРеквизиты.Добавить("Валюта");
		КонецЕсли;	
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоАдресатам", Новый Структура("ВидДокумента", ВидДокумента)) Тогда 
		ПроверяемыеРеквизиты.Добавить("Адресат");
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам")
		И ЗначениеЗаполнено(ВидДокумента) Тогда
		НастройкиУчетаПоПроектам = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидДокумента,
			"ОбязательноУказаниеПроекта, КонтролироватьУникальностьДокументаВРамкахПроекта");
		Если НастройкиУчетаПоПроектам.ОбязательноУказаниеПроекта Тогда
			ПроверяемыеРеквизиты.Добавить("Проект");
		КонецЕсли;
		Если НастройкиУчетаПоПроектам.КонтролироватьУникальностьДокументаВРамкахПроекта
				И Не РаботаСПроектами.ДокументУникален(ЭтотОбъект) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Уже есть %1 с проектом %2. Документ данного вида должен быть уникален в рамках проекта'"
						),
						ВидДокумента,
						Проект),
				ЭтотОбъект,
				"Проект",,
				Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("УчитыватьСрокДействияДокумента", 
		Новый Структура("ВидДокумента", ВидДокумента)) Тогда 
		
		Если ЗначениеЗаполнено(ДатаРегистрации) Тогда
			ПроверяемыеРеквизиты.Добавить("ДатаНачалаДействия");
#Удаление
			Если Не Бессрочный Тогда 
#КонецУдаления
#Вставка
			//Zayc + 18.04.2016       
			//Если Не Бессрочный Тогда 			
			Если Не ДоИсполненияОбязательств и Не Бессрочный  Тогда 
			//Zayc - 18.04.2016
#КонецВставки
				ПроверяемыеРеквизиты.Добавить("ДатаОкончанияДействия");
				ПроверяемыеРеквизиты.Добавить("ПорядокПродления");
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДатаНачалаДействия) И ЗначениеЗаполнено(ДатаОкончанияДействия) 
			И ДатаНачалаДействия > ДатаОкончанияДействия Тогда 
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Дата окончания действия меньше, чем дата начала.'"),
				ЭтотОбъект,
				"ДатаОкончанияДействия",, 
				Отказ);
		КонецЕсли;	
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Дело) Тогда 
		
		Если (СтарыеРеквизиты.Дело <> Дело Или СтарыеРеквизиты.ВидДокумента <> ВидДокумента)   
			И Не Делопроизводство.ДелоМожетСодержатьДокумент("ВидыДокументов", ВидДокумента, Дело) Тогда 
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Дело не может содержать документы с видом %1.'"),
					ВидДокумента),
				,
				"ДелоТекст",, 
				Отказ);
		КонецЕсли;
		
		Если (СтарыеРеквизиты.Дело <> Дело Или СтарыеРеквизиты.Контрагент <> Контрагент)   
			И Не Делопроизводство.ДелоМожетСодержатьДокумент("Контрагенты", Контрагент, Дело) Тогда 
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Дело не может содержать документы по контрагенту %1.'"),
					Контрагент),
				,
				"ДелоТекст",, 
				Отказ);
		КонецЕсли;
		
		Если (СтарыеРеквизиты.Дело <> Дело Или СтарыеРеквизиты.ВопросДеятельности <> ВопросДеятельности)   
			И Не Делопроизводство.ДелоМожетСодержатьДокумент("ВопросыДеятельности", ВопросДеятельности, Дело) Тогда 
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'Дело не может содержать документы по вопросу деятельности %1.'"),
					ВопросДеятельности),
				,
				"ДелоТекст",, 
				Отказ);
		КонецЕсли;
		
	КонецЕсли;	
	
	// Проверим, что дело из которого переносится документ не закрыто
	Если ЗначениеЗаполнено(СтарыеРеквизиты.Дело) И СтарыеРеквизиты.Дело <> Дело Тогда
		РеквизитыДела = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтарыеРеквизиты.Дело,
			"ДелоЗакрыто, ПометкаУдаления");
		Если РеквизитыДела.ДелоЗакрыто И Не РеквизитыДела.ПометкаУдаления Тогда
			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(НСтр("ru = 'Нельзя перенести документы из закрытого дела %1.'"), СтарыеРеквизиты.Дело),
				,
				"ДелоТекст",, 
				Отказ);
		КонецЕсли;	
	КонецЕсли;
		
	Делопроизводство.ПроверкаСвязейПриИзмененииВидаДокумента(ЭтотОбъект, Отказ);
	
	ВидДокументаКэш = Делопроизводство.КэшВидаДокумента(ВидДокумента);
	
	Если ВидДокументаКэш.ВестиУчетПоНоменклатуреДел Тогда
		Делопроизводство.ПроверитьСоответствиеНоменклатурыДел(ЭтотОбъект, Отказ);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетПоОрганизациям")
		И ПолучитьФункциональнуюОпцию("ВестиУчетПоОрганизациям", Новый Структура("ВидДокумента", ВидДокумента)) Тогда
		
		Если Не Делопроизводство.ДелоОтноситсяКОрганизации(ЭтотОбъект) Тогда
			ОбщегоНазначения.СообщитьПользователю(
				НСтр("ru = 'Дело не относится к организации документа.'"),
				,
				"ДелоТекст",, 
				Отказ);
		КонецЕсли;
		
		Если Не ВидДокументаКэш.ВестиУчетСторон И Не ЗначениеЗаполнено(Организация) Тогда
			
			ТекстСообщения = РедакцииКонфигурацииКлиентСервер.ОшибкаНеВыбранаОрганизация();
				ОбщегоНазначения.СообщитьПользователю(
				ТекстСообщения,
				ЭтотОбъект,
				"Организация",,
				Отказ);
			
		КонецЕсли;
	КонецЕсли;
	
	Если ВидДокументаКэш.ВестиУчетСторон Тогда
		Для Каждого Строка Из Стороны Цикл
			Если Строка.Подписан И Не ЗначениеЗаполнено(Строка.Подписал) Тогда 
				Если ЗначениеЗаполнено(Строка.Сторона) И ТипЗнч(Строка.Сторона) = Тип("СправочникСсылка.Контрагенты")
					И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Сторона, "ЮрФизЛицо") = 
					Перечисления.ЮрФизЛицо.ФизЛицо Тогда
					Продолжить;
				Иначе 
					НомерСтроки = Стороны.Индекс(Строка);
					ТекстОшибки = СтрШаблон(
						НСтр("ru = 'Для стороны ""%1"" не указан подписант'"), Строка.Сторона);
					
					ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект,
						"Стороны["+Формат(НомерСтроки, "ЧН=; ЧГ=")+"].Подписал",, Отказ);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	//Проверка табличной части Стороны на задвоения
	КоличествоСторон = Стороны.Количество();
	Если КоличествоСторон > 1 Тогда
		Для Инд1 = 0 По КоличествоСторон - 2 Цикл
			Для Инд2 = Инд1 + 1 По КоличествоСторон - 1 Цикл
				Если Стороны[Инд1].Сторона = Стороны[Инд2].Сторона
					И Стороны[Инд1].Подписал = Стороны[Инд2].Подписал Тогда 
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Сторона ""%1"" указана дважды в списке сторон'"),
						Стороны[Инд2].Сторона);
					
					ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,ЭтотОбъект,
						"Стороны["+ Формат(Инд2, "ЧН=0; ЧГ=0") +"].Сторона",,Отказ);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Если ВидДокументаКэш.ЯвляетсяЗаявкойНаОплату Тогда
		
		Если Не ЗначениеЗаполнено(Сумма) Тогда
			ТекстОшибки = НСтр("ru = 'Не введена сумма'");
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, 
				ЭтотОбъект, 
				"Сумма",,
				Отказ);
		КонецЕсли;
	
		ОтборСторон = Новый Структура("Наименование", Справочники.НаименованияСторон.Получатель);
		НайденныеСтороны = Стороны.НайтиСтроки(ОтборСторон);
		Если НайденныеСтороны.Количество() = 0 Или Не ЗначениеЗаполнено(НайденныеСтороны[0].Сторона) Тогда
			ТекстОшибки = НСтр("ru = 'Не заполнено поле ""Получатель""'");
			ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, ЭтотОбъект, , "Получатель", Отказ);
		КонецЕсли;
	
	КонецЕсли;

	Если ЗначениеЗаполнено(ВидДокумента) Тогда 
		Если ВидДокументаКэш.ОбязательноеУказаниеОтветственного И Не ЗначениеЗаполнено(Ответственный) Тогда
				
#Вставка
			Если Не ЗначениеЗаполнено(Ссылка) Тогда
				// {Грошев Александр ТТС [11.01.2017]
				ТТС_ОсновнойОтветственный = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ТТС_НастройкиОтветственного","ТТС_ОсновнойОтветственный");
				Если ЗначениеЗаполнено(ТТС_ОсновнойОтветственный) Тогда
					Ответственный = ТТС_ОсновнойОтветственный;
				Иначе  
					ПараметрыАлгоритма = Новый Структура("Пользователь", Пользователи.ТекущийПользователь());
					Ответственный = Справочники.Алгоритмы.Вызвать("НепосредственныйРуководительПользователя", ПараметрыАлгоритма);
				КонецЕсли;
				//}
			КонецЕсли;
#КонецВставки

			ОбщегоНазначения.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'У документа вида ""%1"" должен быть обязательно указан ответственный.'"),
					ВидДокумента),
				ЭтотОбъект,
				"Ответственный",,
				Отказ);
				
		КонецЕсли;
		
		Если ВидДокументаКэш.ВестиУчетСторон Тогда
			РаботаСПодписямиДокументов.ПроверитьЗаполнениеСторон(
				ЭтотОбъект, Отказ, ВидДокументаКэш.ЯвляетсяЗаявкойНаОплату, ВидДокументаКэш.ВариантПодписания);
			Индекс = ПроверяемыеРеквизиты.Найти("Контрагенты.Контрагент");
			Если Индекс <> Неопределено Тогда
				ПроверяемыеРеквизиты.Удалить(Индекс);
			КонецЕсли;	
			Если ВидДокументаКэш.ЯвляетсяЗаявкойНаОплату Тогда
				Индекс = ПроверяемыеРеквизиты.Найти("Стороны.Сторона");
				Если Индекс <> Неопределено Тогда
					ПроверяемыеРеквизиты.Удалить(Индекс);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Делопроизводство.ПроверитьЗаполнениеРеквизитовХранения(ЭтотОбъект, ПроверяемыеРеквизиты);
	КонецЕсли;

	Если ВидДокументаКэш.ВестиУчетПоТематикам Тогда 
		ПроверитьЗаполнениеТематики(ЭтотОбъект, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&ИзменениеИКонтроль("ПередЗаписью")
Процедура ЦППК_ПередЗаписью(Отказ)
	
	КОДСобытия.ПередЗаписьюОбъекта(ЭтотОбъект, Отказ);
	
	Если МиграцияПриложенийПереопределяемый.ЭтоЗагрузка(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		
		ИменаПолейДляПолучения = 
			"РегистрационныйНомер,
			|Ответственный,
			|ПодписанЭП,
			|ПометкаУдаления, 
			|ПодписанВсеми, 
			|ДатаРегистрации,
			|ВидДокумента,
			|Тематика,
			|Важность,
			|ФормаДокумента,
			|СрокИсполнения,
			|Дело";
		
		ИменаПолейШаблонаИмени = РаботаСФайламиВызовСервера.ПолучитьИменаРеквизитовПоВидуДокумента(
			Ссылка, ВидДокумента);
		
		Если ИменаПолейШаблонаИмени.Количество() <> 0 Тогда
			
			ДополнительныеСвойства.Вставить("ИменаПолейШаблонаИмени", ИменаПолейШаблонаИмени);
			
			Для Каждого ИмяПоля Из ИменаПолейШаблонаИмени Цикл
				
				Если СтрНайти(ИменаПолейДляПолучения, ИмяПоля) = 0 Тогда
					ИменаПолейДляПолучения = ИменаПолейДляПолучения + ", " + ИмяПоля;
				КонецЕсли;	
				
			КонецЦикла;	
			
		КонецЕсли;	
		
		ПредыдущиеЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка,
			ИменаПолейДляПолучения);
		Если ПредыдущиеЗначенияРеквизитов.Свойство("Контрагенты") Тогда
			ПредыдущиеЗначенияРеквизитов.Контрагенты = ПредыдущиеЗначенияРеквизитов.Контрагенты.Выгрузить();
		КонецЕсли;		
		
		ДополнительныеСвойства.Вставить("ПредыдущиеЗначенияРеквизитовДляПереименования", ПредыдущиеЗначенияРеквизитов);
		
	Иначе
		ПредыдущиеЗначенияРеквизитов = Новый Структура;
		ПредыдущиеЗначенияРеквизитов.Вставить("РегистрационныйНомер", Неопределено);
		ПредыдущиеЗначенияРеквизитов.Вставить("Ответственный", Неопределено);
		ПредыдущиеЗначенияРеквизитов.Вставить("ПодписанЭП", Ложь);
		ПредыдущиеЗначенияРеквизитов.Вставить("ПометкаУдаления", Ложь);
		ПредыдущиеЗначенияРеквизитов.Вставить("ПодписанВсеми", Ложь);
		ПредыдущиеЗначенияРеквизитов.Вставить("ДатаРегистрации", Дата(1, 1, 1));
		ПредыдущиеЗначенияРеквизитов.Вставить("ВидДокумента", Неопределено);
		ПредыдущиеЗначенияРеквизитов.Вставить("Тематика", Неопределено);
		ПредыдущиеЗначенияРеквизитов.Вставить("Важность", Неопределено);
		ПредыдущиеЗначенияРеквизитов.Вставить("ФормаДокумента", Неопределено);
		ПредыдущиеЗначенияРеквизитов.Вставить("СрокИсполнения", Неопределено);
		ПредыдущиеЗначенияРеквизитов.Вставить("Дело", Неопределено);
	КонецЕсли;
#Вставка
	// { *Грошев (ТТС) [29.06.2020]
	Если ПредыдущиеЗначенияРеквизитов.Свойство("ВидДокумента") Тогда
		ДополнительныеСвойства.Вставить("ПредыдущийВидДокумента", ПредыдущиеЗначенияРеквизитов.ВидДокумента);
	КонецЕсли;
	// }
#КонецВставки
	
	ДополнительныеСвойства.Вставить("ЭтоНовый", ЭтоНовый());
	ДополнительныеСвойства.Вставить("ПредыдущийРегистрационныйНомер",
		ПредыдущиеЗначенияРеквизитов.РегистрационныйНомер);
	ДополнительныеСвойства.Вставить("ПредыдущийОтветственный",
		ПредыдущиеЗначенияРеквизитов.Ответственный);
		
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка разрешения на создание.
	Если (ЭтоНовый()
			Или ВидДокумента <> ПредыдущиеЗначенияРеквизитов.ВидДокумента
			Или Тематика <> ПредыдущиеЗначенияРеквизитов.Тематика)
		И Не РегистрыСведений.РазрешенияНаСозданиеДокументов.ЕстьРазрешениеНаСоздание(
			ВидДокумента, Тематика)
		И Не НагрузочноеТестирование.ЭтоНагрузочноеТестирование() Тогда
			
		ТекстОшибки = "";
		Если ЗначениеЗаполнено(Тематика) Тогда	
			ТекстОшибки = СтрШаблон(
				НСтр("ru = '%1 ""%2"" с тематикой ""%3"".
					|Обратитесь к администратору.'"),
				ДелопроизводствоКлиентСервер.Текст_НетРазрешенияНаСозданиеДокументовВида(), ВидДокумента, Тематика);
		Иначе
			ТекстОшибки = СтрШаблон(
				НСтр("ru = '%1 ""%2"".
					|Обратитесь к администратору.'"),
				ДелопроизводствоКлиентСервер.Текст_НетРазрешенияНаСозданиеДокументовВида(), ВидДокумента);
		КонецЕсли;
		
		ВызватьИсключение ТекстОшибки;
		
	КонецЕсли;
	
	ЗаписьПодписанногоОбъекта = Ложь;
	Если ДополнительныеСвойства.Свойство("ЗаписьПодписанногоОбъекта") Тогда
		ЗаписьПодписанногоОбъекта = ДополнительныеСвойства.ЗаписьПодписанногоОбъекта;
	КонецЕсли;	
	
	Если Не ПривилегированныйРежим() И ЗаписьПодписанногоОбъекта <> Истина Тогда
		
		Если ЗначениеЗаполнено(Ссылка) Тогда
			Если ПодписанЭП И ПредыдущиеЗначенияРеквизитов.ПодписанЭП Тогда
				// Проверяем ключевые поля - изменились ли
				МассивИмен = Справочники.ДокументыПредприятия.ПолучитьИменаКлючевыхРеквизитов();
				РаботаСЭП.ПроверитьИзмененностьКлючевыхПолей(МассивИмен, ЭтотОбъект, Ссылка);
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	// Пометка на удаление приложенных файлов.
	Если ПометкаУдаления <> ПредыдущиеЗначенияРеквизитов.ПометкаУдаления Тогда 
		
		Если ПометкаУдаления Тогда
			ДополнительныеСвойства.Вставить("НужноПометитьНаУдалениеБизнесСобытия", Истина);
		КонецЕсли;
		
		Если ДокументооборотПраваДоступа.ПраваПользователяПоОбъекту(Ссылка).Удаление Тогда
			
			Обработка = Справочники.ОбработкиОбъектов.ОбработкаОбъекта(Ссылка);

			Если ПометкаУдаления И ЗначениеЗаполнено(Ссылка) Тогда
				
				КППоПредмету = РаботаСПроцессамиПоОбработкамОбъектов.АктивныйКППоПредмету(Ссылка);
				Если ЗначениеЗаполнено(КППоПредмету) Тогда
					ВызватьИсключение 
						НСтр("ru = 'Нельзя установить пометку удаления. По документу есть активный комплексный процесс.'");
				КонецЕсли;
					
			КонецЕсли;
			
			Если ПометкаУдаления
				И Справочники.ОбработкиОбъектов.ЕстьАктивныеОбработки(Ссылка) Тогда
				Попытка
					ОбработкиОбъектов.ПрерватьОбработкуОбъектаПриПометкеНаУдаление(Ссылка, 
						НСтр("ru = 'Документ помечен на удаление'"));
				Исключение
					ТекстОшибки = ОбработкаОшибок.КраткоеПредставлениеОшибки(ИнформацияОбОшибке()); 
					ВызватьИсключение НСтр("ru = 'Не удалось установить пометку удаления по причине:'") + Символы.ПС + ТекстОшибки;
				КонецПопытки;
			КонецЕсли;

			ВсеОбработкиПредмета = ОбработкиОбъектов.ВсеОбработкиПредмета(Ссылка);
			ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ВсеОбработкиПредмета, Обработка);
			ОбработкиОбъектов.ПометитьОбработкиНаУдаление(ВсеОбработкиПредмета, ПометкаУдаления);
			 
			РаботаСФайламиВызовСервера.ПометитьНаУдалениеПриложенныеФайлы(Ссылка, ПометкаУдаления);
			РаботаСКорреспонденцией.ПометитьНаУдалениеКорреспонденцию(Ссылка, ПометкаУдаления);
			
			Если ПометкаУдаления И ЗначениеЗаполнено(Ссылка) Тогда
				Делопроизводство.УдалитьДанныеОбОтменяемыхДокументах(Ссылка);
				
				ПрочиеЗадачи = РаботаСЗадачами.ЗадачиПоПриложению(Ссылка);
				Для Каждого ПрочаяЗадача Из ПрочиеЗадачи Цикл
					РаботаСЗадачами.УдалитьЗадачу(ПрочаяЗадача);
				КонецЦикла;
			КонецЕсли;	
			
		Иначе
			ВызватьИсключение СтрШаблон(
				НСтр("ru = 'У вас нет права ""Пометка на удаление"" документа ""%1"".'"),
				Строка(Ссылка));
		КонецЕсли;	
		
	КонецЕсли;
	
	РеквизитыВида = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидДокумента, 
		"ВестиУчетПоОрганизациям, ВестиУчетСторон, ВестиУчетТоваровИУслуг, ВариантПодписания, ИспользоватьСрокИсполнения");
	
	Если ЗначениеЗаполнено(РегистрационныйНомер) Тогда
		
		ВестиУчетНДС = Делопроизводство.УчитыватьНДС(Организация);
		
		Если РеквизитыВида.ВестиУчетТоваровИУслуг И ВестиУчетНДС Тогда
			
			ЕстьНедействительныеСтавки = Ложь;
			Для Сч = 0 По Товары.Количество() - 1 Цикл
				Если ЗначениеЗаполнено(Товары[Сч].СтавкаНДС) И
					Не УчетНДС.СтавкаНДСДействует(Товары[Сч].СтавкаНДС, ДатаРегистрации) Тогда
					ЕстьНедействительныеСтавки = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ЕстьНедействительныеСтавки Тогда
				ТекстИсключения = НСтр("ru = 'В таблице ""Товары и услуги"" есть недействительные ставки НДС.
				|Исправьте ставки и зарегистрируйте документ заново.'");
				ВызватьИсключение ТекстИсключения;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Сброс организации при смене вида.
	Если ЗначениеЗаполнено(Организация)
		И ЗначениеЗаполнено(ВидДокумента) 
		И Не РеквизитыВида.ВестиУчетПоОрганизациям Тогда
		Организация = Неопределено;
	КонецЕсли;
	
	// Работа со сторонами
	Если (ДополнительныеСвойства.Свойство("ВестиУчетСторон") И ДополнительныеСвойства.ВестиУчетСторон)
		Или (ЗначениеЗаполнено(ВидДокумента) 
			И РеквизитыВида.ВестиУчетСторон) Тогда
		РаботаСПодписямиДокументов.ПеренестиКонтрагентовИзСторон(Контрагенты, Стороны);
		РаботаСПодписямиДокументов.ПеренестиОрганизациюИзСторон(Организация, Стороны);
		РаботаСПодписямиДокументов.ПеренестиУтвердилИзСторон(Утвердил, Стороны);
		ПодписанВсеми = РаботаСПодписямиДокументов.ДокументПодписанСторонами(Стороны, РеквизитыВида.ВариантПодписания);
	Иначе
		ПодписанВсеми = Ложь;
	КонецЕсли;
	
	// Если изменился признак "ПодписанВсеми", значит нужно обновить состояние документа.
	Если ПодписанВсеми <> ПредыдущиеЗначенияРеквизитов.ПодписанВсеми Тогда 
		Если ПодписанВсеми Тогда
			ДополнительныеСвойства.Вставить("УстановитьСостояние", Перечисления.СостоянияДокументов.Подписан);
		Иначе 
			ДополнительныеСвойства.Вставить("УстановитьСостояние", Перечисления.СостоянияДокументов.НаПодписании);
		КонецЕсли;
	КонецЕсли;
	
	ПодписанУтвержден = Делопроизводство.СтрокаПодписалУтвердил(ЭтотОбъект);
	Делопроизводство.ЗаписатьДанныеДокумента(Ссылка, "ПодписанУтвержден", ПодписанУтвержден);
	
	Если Контрагенты.Количество() = 0 Тогда
		Контрагент = Неопределено;
		КонтактноеЛицо = Неопределено;
		ПодписалОтКонтрагента = Неопределено;
	Иначе
		Строка = Контрагенты[0];
		Контрагент = Строка.Контрагент;
		КонтактноеЛицо = Строка.КонтактноеЛицо;
		ПодписалОтКонтрагента = Строка.ПодписалОтКонтрагента;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Заполним дату начала дела, если не заполнена
	Если ЗначениеЗаполнено(Дело) 
		И ЗначениеЗаполнено(ДатаРегистрации)
		И ДатаРегистрации <> ПредыдущиеЗначенияРеквизитов.ДатаРегистрации
		И Не ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Дело, "ДатаНачала")) Тогда 
		
		ЗаблокироватьДанныеДляРедактирования(Дело.Ссылка);
		ДелоОбъект = Дело.ПолучитьОбъект();
		ДелоОбъект.ДатаНачала = ДатаРегистрации;
		ДелоОбъект.Записать();	
		
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетДоступаКПерсональнымДанным") Тогда
		ДополнительныеСвойства.Вставить(
			"ИзменилсяСписокПерсональныхДанных", ПерсональныеДанные.ИзменилсяСписокПерсональныхДанных(ЭтотОбъект));
	КонецЕсли;	
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда 
		Если Не Ссылка.Пустая() Тогда 
			СсылкаПроект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Проект");
			ДополнительныеСвойства.Вставить("ИзменилсяПроект", СсылкаПроект <> Проект);
		КонецЕсли;	
	КонецЕсли;
	
	// Обработка рабочей группы
	СсылкаОбъекта = Ссылка;
	// Установка ссылки нового
	Если Не ЗначениеЗаполнено(СсылкаОбъекта) Тогда
		СсылкаОбъекта = ПолучитьСсылкуНового();
		Если Не ЗначениеЗаполнено(СсылкаОбъекта) Тогда
			СсылкаНового = Справочники.ДокументыПредприятия.ПолучитьСсылку();
			УстановитьСсылкуНового(СсылкаНового);
			СсылкаОбъекта = СсылкаНового;
		КонецЕсли;
		ДополнительныеСвойства.Вставить("СсылкаНового", СсылкаОбъекта);
	КонецЕсли;
	
	// Определение дескрипторов для проверки прав при записи рабочей группы.
	Если ДокументооборотПраваДоступаПовтИсп.ВключеноИспользованиеПравДоступа() Тогда
		ДокументооборотПраваДоступа.ОпределитьДескрипторыОбъекта(ЭтотОбъект);
	КонецЕсли;
	
	// Подготовка рабочей группы
	РабочаяГруппа = РегистрыСведений.РабочиеГруппы.ПолучитьУчастниковПоОбъекту(СсылкаОбъекта);

	ПодготовленОтИмениНеОсновногоСотрудника = Сотрудники.ЭтоСотрудникТекущегоПользователя(Подготовил)
		И Подготовил <> Сотрудники.ОсновнойСотрудник();
	ДополнительныеСвойства.Вставить("ПодготовленОтИмениНеОсновногоСотрудника",
		ПодготовленОтИмениНеОсновногоСотрудника);
	
	// Добавление участников из самого объекта.
	Если РаботаСРабочимиГруппами.ПоОбъектуВедетсяАвтоматическоеЗаполнениеРабочейГруппы(ЭтотОбъект) Тогда
		
		НовыеУчастникиРГ = РаботаСРабочимиГруппами.ПолучитьПустуюТаблицуУчастников();
		ДобавитьУчастниковРабочейГруппыВНабор(НовыеУчастникиРГ);
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(НовыеУчастникиРГ, РабочаяГруппа);
		
	КонецЕсли;
	
#Вставка	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭтотОбъект.ВидДокумента,"ТТС_РасширениеРабочейГруппыПоПодразделению") И
		ЗначениеЗаполнено(ЭтотОбъект.Подразделение) Тогда 
		ТТС_ОбщийМодуль.ДобавитьСлужебнуюГруппуВерхнегоУровня(ЭтотОбъект, РабочаяГруппа);
	КонецЕсли;
#КонецВставки

	// Добавление участников, переданных "снаружи", например из формы объекта
	Если ДополнительныеСвойства.Свойство("РабочаяГруппаДобавить") Тогда
		Для Каждого Эл Из ДополнительныеСвойства.РабочаяГруппаДобавить Цикл
			
			// Добавление участника в итоговую рабочую группу
			Строка = РабочаяГруппа.Добавить();
			Строка.Участник = Эл.Участник;
			Строка.Изменение = Эл.Изменение;
			
		КонецЦикла;
	КонецЕсли;
	
	// Удаление участников, переданных "снаружи", например из формы объекта
	Если ДополнительныеСвойства.Свойство("РабочаяГруппаУдалить") Тогда
		Для Каждого Эл Из ДополнительныеСвойства.РабочаяГруппаУдалить Цикл
			// Поиск удаляемого участника в итоговой рабочей группе
			Для Каждого Эл2 Из РабочаяГруппа Цикл
				Если Эл2.Участник = Эл.Участник 
					И Эл2.Изменение = Эл.Изменение Тогда
					// Удаление участника из итоговой рабочей группы
					РабочаяГруппа.Удалить(Эл2);
					Прервать;
				КонецЕсли;
			КонецЦикла;	
		КонецЦикла;	
	КонецЕсли;
	
	// Обработка обязательного заполнения рабочих групп 
	Если ЭтоНовый() Или РабочаяГруппа.Количество() = 0 Тогда
		Если Не ПодготовленОтИмениНеОсновногоСотрудника 
			И РаботаСРабочимиГруппами.ОбязательноеЗаполнениеРабочихГруппДокументов(ВидДокумента) Тогда
			
			Строка = РабочаяГруппа.Добавить();
			Строка.Участник = ПараметрыСеанса.ОсновнойСотрудник;
			Строка.Изменение = Истина;
			
		КонецЕсли;
	КонецЕсли;
	
	РаботаСРабочимиГруппами.ОбновитьУчастниковРабочейГруппыПоАвтоподстановкам(РабочаяГруппа, ЭтотОбъект);
	
	// Запись итоговой рабочей группы
	Если Не РаботаСРабочимиГруппами.ПерезаписьРабочейГруппыПредметаПроцессаОтключена(ЭтотОбъект) Тогда
		РаботаСРабочимиГруппами.ПерезаписатьРабочуюГруппуОбъекта(
			?(ЭтоНовый(), ЭтотОбъект, СсылкаОбъекта),
			РабочаяГруппа,
			Ложь, // ОбновитьПрава
			Истина, // ПроверятьПрава 
			?(ЭтоНовый(), Неопределено, ТекущийПользователь));
	КонецЕсли;
	
	// Установка необходимости обновления прав доступа
	ДополнительныеСвойства.Вставить("ДополнительныеПравообразующиеЗначенияИзменены");
	
	Если Сумма > 0 Тогда 
		СуммаПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(Сумма, Валюта);
	КонецЕсли;
	
	Если СуммаНДС > 0 Тогда 
		СуммаНДСПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(СуммаНДС, Валюта);
	КонецЕсли;
	
	СообщениеОбОшибке = "";
	ОписанияОшибок = Новый СписокЗначений;
	Если ДополнительныеСвойства.Свойство("ЭтоРегистрация") Тогда
		
		#Вставка   
		//++AxelSoft Шарапова 23.12.2024 САНФ-031003
		Если НЕ ЭтоНовый() Тогда			
			
			//++AxelSoft Шарапова 13.03.2024 САНФ-САНФ-032689
			РолиПользователя = ТТС_ЖурналыТУВызовСервера.ПолучитьРолиПользователя(ПараметрыСеанса.ОсновнойСотрудник);
			
			Если НЕ РолиПользователя.СБ Тогда
			//--AxelSoft Шарапова 13.03.2024 САНФ-САНФ-032689
				Если НЕ Делопроизводство.ПолеДокументаДоступноПоСостоянию("Регистрация", Ссылка) Тогда
					СообщениеОбОшибке = НСтр("ru = 'В текущем состоянии документа регистрация не доступна.'");
					ОбщегоНазначения.СообщитьПользователю(СообщениеОбОшибке);
					Отказ = Истина;						
				КонецЕсли;
			КонецЕсли; 
			
		КонецЕсли;
		
		МДК_АктуальноеСостояниеДокумента = Делопроизводство.ПолучитьПоследнееСостояниеДокумента(Ссылка);
		МДК_ГрифДоступа = Справочники.ГрифыДоступа.НайтиПоНаименованию("Для служебного пользования");
		Если ГрифДоступа = МДК_ГрифДоступа И (МДК_АктуальноеСостояниеДокумента = Перечисления.СостоянияДокументов.Проект
			ИЛИ МДК_АктуальноеСостояниеДокумента = Перечисления.СостоянияДокументов.ПустаяСсылка()) Тогда		
			Если Справочники.ОбработкиОбъектов.ЕстьАктивныеОбработки(Ссылка) Тогда
				СообщениеОбОшибке = НСтр("ru = 'Обработка находится в очереди для выполнения. 
												|Состояние документа обновится в ближайшее время.'");
				ОбщегоНазначения.СообщитьПользователю(СообщениеОбОшибке);
				Отказ = Истина;						
			Иначе
				СообщениеОбОшибке = НСтр("ru = 'Чтобы зарегистрировать документ, запустите обработку'");
				ОбщегоНазначения.СообщитьПользователю(СообщениеОбОшибке);
				Отказ = Истина;						
			КонецЕсли;
			
		КонецЕсли;
		//--AxelSoft Шарапова 23.12.2024 САНФ-031003
		#КонецВставки

		ПараметрыЗаписи = ДополнительныеСвойства.ПараметрыЗаписи;
		НовыйРегистрационныйНомер = "";
		Если ПараметрыЗаписи.Свойство("УказанРегистрационныйНомер") Тогда
			НовыйРегистрационныйНомер = ПараметрыЗаписи.НовыйРегистрационныйНомер;
		КонецЕсли;
		
		Если ПараметрыЗаписи.Свойство("СтруктураПропущенногоНомера") Тогда
			РегистрыСведений.ПропускиРегистрационныхНомеров.УдалитьПропущенныйНомер(
				ПараметрыЗаписи.СтруктураПропущенногоНомера);
			ПараметрыНумерации = НумерацияКлиентСервер.ПолучитьПараметрыНумерации(ЭтотОбъект);
			Если Не ЗначениеЗаполнено(ПараметрыНумерации.ДатаРегистрации) Тогда
				ПараметрыНумерации.ДатаРегистрации = ТекущаяДатаСеанса();
			КонецЕсли;
			Нумерация.СформироватьСтроковыйНомерДокумента(ПараметрыНумерации, НовыйРегистрационныйНомер, ОписанияОшибок);
		КонецЕсли;
		
		Если Не Делопроизводство.ЗарегистрироватьПредмет(ЭтотОбъект,
				СообщениеОбОшибке,
				НовыйРегистрационныйНомер,
				ПараметрыЗаписи,
				Ложь) Тогда
			ОбщегоНазначения.СообщитьПользователю(СообщениеОбОшибке);
			Отказ = Истина;
		КонецЕсли;
	
	Иначе
		// Установка временного номера документа
		Нумерация.УстановитьВременныйНомерПередЗаписью(ЭтотОбъект);
	КонецЕсли;
	
	ОсвободитьНомер = Ложь;
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Нумератор = Нумерация.ПолучитьНумераторДокумента(ЭтотОбъект, Ложь);
		Если ЗначениеЗаполнено(ПредыдущиеЗначенияРеквизитов.РегистрационныйНомер) Тогда
			Если ПредыдущиеЗначенияРеквизитов.РегистрационныйНомер <> РегистрационныйНомер Тогда
				ОсвободитьНомер = Истина;
			КонецЕсли;
			Если ПредыдущиеЗначенияРеквизитов.ДатаРегистрации <> ДатаРегистрации И
				Нумерация.ПроверитьСменуПериодаНумерации(ДатаРегистрации,
					ПредыдущиеЗначенияРеквизитов.ДатаРегистрации, Нумератор) Тогда
				ОсвободитьНомер = Истина;
			КонецЕсли;
		КонецЕсли;
			
		Если ОсвободитьНомер Тогда
			ДополнительныеСвойства.Вставить("ОсвободитьРегистрационныйНомер", Истина);
			ДополнительныеСвойства.Вставить("ПредыдущиеИзмеренияНумерации", 
				НумерацияКлиентСервер.ПолучитьПараметрыНумерации(Ссылка));
				
			// Очистим файлы визуализации для pdf файлов + картинку рег штампа.	
			РаботаСФайламиВызовСервера.ОбновитьPdfФайлыПриСменеРегНомера(Ссылка, РегистрационныйНомер);
			
		КонецЕсли;
	КонецЕсли;
		
	Если Не ЭтоНовый() И Важность <> ПредыдущиеЗначенияРеквизитов.Важность Тогда 
		ДополнительныеСвойства.Вставить("ИзмениласьВажность", Истина);
	КонецЕсли;
	
	Если Не ЭтоНовый() И ФормаДокумента <> ПредыдущиеЗначенияРеквизитов.ФормаДокумента Тогда 
		ДополнительныеСвойства.Вставить("ИзмениласьФормаДокумента", Истина);
	КонецЕсли;
	
	Если Не ЭтоНовый() И СрокИсполнения <> ПредыдущиеЗначенияРеквизитов.СрокИсполнения Тогда 
		ДополнительныеСвойства.Вставить("ИзменилсяСрокИсполнения", Истина);
		РеквизитыДокумента = Новый Структура;
		РеквизитыДокумента.Вставить("ВидДокументаИспользоватьСрокИсполнения", РеквизитыВида.ИспользоватьСрокИсполнения);
		РеквизитыДокумента.Вставить("СрокИсполнения", ПредыдущиеЗначенияРеквизитов.СрокИсполнения);
		
		ДополнительныеСвойства.Вставить("СтарыйСрокИсполнения", 
			Справочники.ДействияИсполнения.СрокИсполненияПредмета(Ссылка, РеквизитыДокумента));
	КонецЕсли;
	
	Если (ЭтоНовый() И ЗначениеЗаполнено(Дело)) 
		Или Дело <> ПредыдущиеЗначенияРеквизитов.Дело
		Или ПараметрыСеанса.ЗагрузкаОбработанныхДанныхИзДругойСистемы Тогда 
		ДополнительныеСвойства.Вставить("ИзменилосьДело", Истина);
	КонецЕсли; 
	
	// Заполним Наименование по шаблону
	Если Не ПараметрыСеанса.ЗагрузкаОбработанныхДанныхИзДругойСистемы
		И ЗначениеЗаполнено(Шаблон) Тогда 
		РеквизитыШаблона = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Шаблон,
			"ЗаполнениеНаименованияПоШаблону, Заголовок");
		Если РеквизитыШаблона.ЗаполнениеНаименованияПоШаблону Тогда 
			ШаблонЗаголовка = РеквизитыШаблона.Заголовок;
			Заголовок = ШаблоныДокументов.СформироватьНаименованиеПоШаблону(
				ЭтотОбъект, ШаблонЗаголовка);
		КонецЕсли;
	КонецЕсли;
	
	Наименование = Делопроизводство.НаименованиеДокумента(ЭтотОбъект);
	
	РаботаСВнешнимПодписанием.ПередЗаписьюДокумента(ЭтотОбъект, Отказ);

КонецПроцедуры

&После("ПередЗаписью")
Процедура ЦППК_ПередЗаписью1(Отказ)
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
		
		ПредыдущиеЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, "ПометкаУдаления");
		
		Если ПометкаУдаления <> ПредыдущиеЗначенияРеквизитов.ПометкаУдаления Тогда  
			Если ПометкаУдаления Тогда
				ЦППК_ПроверкаУдаленияДокументаВСостоянииПроект(Отказ);  
			КонецЕсли;  
		КонецЕсли;  
		
	КонецЕсли;
	
КонецПроцедуры

&ИзменениеИКонтроль("ПриЗаписи")
Процедура ЦППК_ПриЗаписи(Отказ)
	
	// Корреспонденцию пишем всегда, иначе можем потерять данные.
	РаботаСКорреспонденцией.ПриЗаписи(Ссылка, ДополнительныеСвойства, Отказ);
	
	Если МиграцияПриложенийПереопределяемый.ЭтоЗагрузка(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;

	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	// Возможно, выполнена явная регистрация событий при загрузке объекта.
	Если Не ДополнительныеСвойства.Свойство("НеРегистрироватьБизнесСобытия") Тогда
		
		Если ДополнительныеСвойства.Свойство("ЭтоНовый") И ДополнительныеСвойства.ЭтоНовый Тогда
			БизнесСобытияВызовСервера.ЗарегистрироватьСобытие(Ссылка, Справочники.ВидыБизнесСобытий.СозданиеДокумента);
		Иначе
			БизнесСобытияВызовСервера.ЗарегистрироватьСобытие(Ссылка, Справочники.ВидыБизнесСобытий.ИзменениеДокумента);
		КонецЕсли;
		
		Делопроизводство.ЗарегистрироватьСобытиеНазначениеОтветственного(
			Ссылка,
			Сотрудники.ЛюбойПользовательСотрудника(Ответственный),
			ДополнительныеСвойства.Свойство("ЭтоНовый") И ДополнительныеСвойства.ЭтоНовый,
			?(ДополнительныеСвойства.Свойство("ПредыдущийОтветственный"),
				Сотрудники.ЛюбойПользовательСотрудника(ДополнительныеСвойства.ПредыдущийОтветственный),
				Неопределено));
		
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("НужноПометитьНаУдалениеБизнесСобытия") Тогда
		БизнесСобытияВызовСервера.ПометитьНаУдалениеСобытияПоИсточнику(Ссылка);
	КонецЕсли;
	
	// Возможно, выполнена явная регистрация событий при загрузке объекта.
	ВыполненаРегистрацияДокумента = Ложь;
	Если Не ДополнительныеСвойства.Свойство("НеРегистрироватьБизнесСобытия") Тогда
		Если ЗначениеЗаполнено(РегистрационныйНомер) И РегистрационныйНомер <> ДополнительныеСвойства.ПредыдущийРегистрационныйНомер Тогда
			Если ЗначениеЗаполнено(ДополнительныеСвойства.ПредыдущийРегистрационныйНомер) Тогда
				БизнесСобытияВызовСервера.ЗарегистрироватьСобытие(Ссылка, Справочники.ВидыБизнесСобытий.ПеререгистрацияДокумента);	
			Иначе	
				БизнесСобытияВызовСервера.ЗарегистрироватьСобытие(Ссылка, Справочники.ВидыБизнесСобытий.РегистрацияДокумента);
				ВыполненаРегистрацияДокумента = Истина;	
			КонецЕсли;			
		КонецЕсли;		
	КонецЕсли;		
	
	// Установим состояние Подписания, если изменился признак "ПодписанВсеми".
	Если ДополнительныеСвойства.Свойство("УстановитьСостояние") Тогда
		
		Делопроизводство.ЗаписатьСостояниеДокумента(
			Ссылка, 
			ТекущаяДатаСеанса(), 
			ДополнительныеСвойства.УстановитьСостояние, 
			Сотрудники.ОсновнойСотрудник(), ,
			ДополнительныеСвойства.Свойство("ЭтоНовый") И ДополнительныеСвойства.ЭтоНовый);
			
	КонецЕсли;
	
	ПредыдущаяПометкаУдаления = Ложь;
	Если ДополнительныеСвойства.Свойство("ПредыдущаяПометкаУдаления") Тогда
		ПредыдущаяПометкаУдаления = ДополнительныеСвойства.ПредыдущаяПометкаУдаления;
	КонецЕсли;
	
	Если ПометкаУдаления <> ПредыдущаяПометкаУдаления Тогда
		ПротоколированиеРаботыСотрудников.ЗаписатьПометкуУдаления(Ссылка, ПометкаУдаления);
	КонецЕсли;	
	
#Вставка
	// { *Грошев (ТТС) [29.06.2020]
	Если ЭтотОбъект.ВидДокумента.ТТС_ЯвляетсяЖурналомТУ Тогда
		Если ЭтотОбъект.ДополнительныеСвойства.Свойство("ТТС_ДанныеЖурнала") Тогда
			ТТС_ЖурналыТУВызовСервера.ПроверитьДанныеЖурнала(ЭтотОбъект,ДополнительныеСвойства.ТТС_ДанныеЖурнала);
			РегистрыСведений.ТТС_ЖурналыТУ.ЗаписатьДанныеЖурнала(ЭтотОбъект,ДополнительныеСвойства.ТТС_ДанныеЖурнала);
			РегистрыСведений.ЦППК_ДанныеЖурналаТУ.ЦППК_ОбновитьДанныеЖурналаТУ(ЭтотОбъект.Ссылка);
		Иначе
			Если ПометкаУдаления <> ПредыдущаяПометкаУдаления Тогда
				РегистрыСведений.ТТС_ЖурналыТУ.УстановитьСнятьПометкуУдаления(ЭтотОбъект,ПометкаУдаления);		
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ДополнительныеСвойства.Свойство("ПредыдущийВидДокумента") И ДополнительныеСвойства.ПредыдущийВидДокумента <> Неопределено Тогда

		Если ДополнительныеСвойства.ПредыдущийВидДокумента.ТТС_ЯвляетсяЖурналомТУ Тогда
			РегистрыСведений.ТТС_ЖурналыТУ.ОчиститьДанныеЖурнала(ЭтотОбъект);
		КонецЕсли;

	КонецЕсли;
	// }
#КонецВставки

	УстановитьПривилегированныйРежим(Истина);
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьШтрихкоды")
		И ДополнительныеСвойства.Свойство("ЭтоНовый") 
		И ДополнительныеСвойства.ЭтоНовый
		И Не ПараметрыСеанса.ЗагрузкаОбработанныхДанныхИзДругойСистемы Тогда
		
		Штрихкод = ШтрихкодированиеСервер.СформироватьШтрихКод();
		ШтрихкодированиеСервер.ПрисвоитьШтрихКод(Ссылка, Штрихкод);
		
	КонецЕсли;
	
	// Обновление имен файлов
	Если ДополнительныеСвойства.Свойство("ЭтоНовый") 
		И ДополнительныеСвойства.ЭтоНовый Тогда
		ДополнительныеСвойства.Вставить("НадоПереименоватьФайлыПоШаблону", Истина); // для нового всегда делаем
	ИначеЕсли ДополнительныеСвойства.Свойство("ИменаПолейШаблонаИмени") Тогда 	
		
		Для Каждого ИмяПоля Из ДополнительныеСвойства.ИменаПолейШаблонаИмени Цикл
			
			СтароеЗначение = ДополнительныеСвойства.ПредыдущиеЗначенияРеквизитовДляПереименования[ИмяПоля];
			НовоеЗначение = ЭтотОбъект[ИмяПоля];
				
			Если ИмяПоля = "Контрагенты" Тогда // табл часть

				Если НовоеЗначение.Количество() <> СтароеЗначение.Количество() Тогда
					ДополнительныеСвойства.Вставить("НадоПереименоватьФайлыПоШаблону", Истина);
					Прервать;
				КонецЕсли;
				
				Индекс = 0;	
				Для Каждого КонтрСтрока Из НовоеЗначение Цикл
					
					СтароеЗначениеСтрока = СтароеЗначение[Индекс];
					
					Если КонтрСтрока.Контрагент <> СтароеЗначениеСтрока.Контрагент Тогда
						ДополнительныеСвойства.Вставить("НадоПереименоватьФайлыПоШаблону", Истина);
						Прервать;
					КонецЕсли;
					
					Индекс = Индекс + 1;
				КонецЦикла;
					
			Иначе
						
				Если НовоеЗначение <> СтароеЗначение Тогда
					ДополнительныеСвойства.Вставить("НадоПереименоватьФайлыПоШаблону", Истина);
					Прервать;
				КонецЕсли;
						
			КонецЕсли;		
			
		КонецЦикла;	
		
	КонецЕсли;	
	
	// но только если вызов не из карточки.
	Если ДополнительныеСвойства.Свойство("НадоПереименоватьФайлыПоШаблону")
		И Не ДополнительныеСвойства.Свойство("ИнтерактивнаяЗапись") Тогда
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Ссылка", Ссылка);
		
		РаботаСФайламиВызовСервера.ПереименоватьФайлыПоШаблонуОтложенно(Ссылка);
	КонецЕсли;	
	
	// Заполняем сведения о персональных данных во всех файлах
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетДоступаКПерсональнымДанным") Тогда
		
		Если Не ОбменДанными.Загрузка 
			И ЭтотОбъект.ДополнительныеСвойства.Свойство("ИзменилсяСписокПерсональныхДанных") 
			И ЭтотОбъект.ДополнительныеСвойства.ИзменилсяСписокПерсональныхДанных Тогда
			
			ПерсональныеДанные.ЗаполнитьПерсональныеДанныеФайлов(Ссылка);
			
		КонецЕсли;	
		
	КонецЕсли;
	
	ТипСвязиПриСозданииНаОснованииДокумента = Неопределено;
	Основание = Неопределено;
	УникальныйИдентификаторФормы = Неопределено;
	
	ЭтотОбъект.ДополнительныеСвойства.Свойство("ТипСвязиПриСозданииНаОснованииДокумента",
		ТипСвязиПриСозданииНаОснованииДокумента);
	ЭтотОбъект.ДополнительныеСвойства.Свойство("Основание", Основание);
	ЭтотОбъект.ДополнительныеСвойства.Свойство("УникальныйИдентификаторФормы", УникальныйИдентификаторФормы);
	
	Если ЗначениеЗаполнено(ТипСвязиПриСозданииНаОснованииДокумента) Тогда
		СвязиОбъектов.СоздатьСвязь(ЭтотОбъект.Ссылка, Основание, 
			ТипСвязиПриСозданииНаОснованииДокумента);
			
		//Обновим реквизиты связуемых документов
		СвязиОбъектов.УстановитьРеквизитыПриДобавленииСвязи(ЭтотОбъект.Ссылка,
			УникальныйИдентификаторФормы, ТипСвязиПриСозданииНаОснованииДокумента);
		НастройкаСвязи = СвязиОбъектов.ПолучитьНастройкуСвязи(ЭтотОбъект.Ссылка, Основание, 
			ТипСвязиПриСозданииНаОснованииДокумента);
		
		Если НастройкаСвязи <> Неопределено И ЗначениеЗаполнено(НастройкаСвязи.ТипОбратнойСвязи) Тогда
			СвязиОбъектов.УстановитьРеквизитыПриДобавленииСвязи(Основание,,
				НастройкаСвязи.ТипОбратнойСвязи);
		КонецЕсли;
	КонецЕсли;
	
	
	СоздатьСвязьДляНумерации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ДополнительныеСвойства, "СоздатьСвязьДляНумерации", Ложь);
	СвязанныйДокументДляНумерации =  ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ДополнительныеСвойства, "СвязанныйДокументДляНумерации", Неопределено);
	ТипСвязиНумератора =  ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		ДополнительныеСвойства, "ТипСвязиНумератора", Неопределено);
	
	Если СоздатьСвязьДляНумерации и ЗначениеЗаполнено(СвязанныйДокументДляНумерации) Тогда
		СвязиОбъектов.СоздатьСвязь(Ссылка, СвязанныйДокументДляНумерации, ТипСвязиНумератора);
	КонецЕсли;
	
	
	// Заполнение проекта в файлах
	Если ПолучитьФункциональнуюОпцию("ВестиУчетПоПроектам") Тогда 
		Если ЭтотОбъект.ДополнительныеСвойства.Свойство("ИзменилсяПроект") 
		   И ЭтотОбъект.ДополнительныеСвойства.ИзменилсяПроект Тогда
			РаботаСПроектами.ЗаполнитьПроектПодчиненныхФайлов(Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	// Статьи ДДС.
	Если ДополнительныеСвойства.Свойство("СтатьиДвиженияДенежныхСредств") Тогда
		РегистрыСведений.СтатьиДвиженияДенежныхСредствДокументов.ЗаписатьСтатьиДокумента(Ссылка,
			ДополнительныеСвойства.СтатьиДвиженияДенежныхСредств);
	КонецЕсли;
	
	// обновить связи документа
	СвязиОбъектов.ОбновитьСвязиОбъекта(Ссылка);
	
	// При изменении документа/файлов делать непрочтенным (если не новый)
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПрочтенностьДокументов") Тогда
		Если ДополнительныеСвойства.Свойство("ЭтоНовый") 
			И ДополнительныеСвойства.ЭтоНовый Тогда
			
			// запишем прочтенность
			РаботаСПрочтениями.УстановитьСвойствоПрочтен(Ссылка, Истина);
		Иначе
			
			// если не новый
			РегистрыСведений.СведенияОПрочтении.УбратьСведенияОПрочтенииВсемКромеАвтора(Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ОсвободитьРегистрационныйНомер") Тогда
		Нумерация.ОсвободитьНомер(ДополнительныеСвойства.ПредыдущиеИзмеренияНумерации);
	КонецЕсли;
	
	ЭтоИсходящийДокумент = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидДокумента, "ЯвляетсяИсходящейКорреспонденцией");
	Если ВыполненаРегистрацияДокумента И ЭтоИсходящийДокумент Тогда
		ИнтеграцияЗадач.ОбработатьРегистрациюИсходящегоДокумента(Ссылка);
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ИзмениласьВажность")
		И ДополнительныеСвойства.ИзмениласьВажность Тогда
		ДействияСервер.ОбновитьВажностьДействийПоПредмету(Ссылка, Важность);
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ИзмениласьФормаДокумента")
		И ДополнительныеСвойства.ИзмениласьФормаДокумента Тогда
		Справочники.ДействияПодписания.ОбновитьПодписанияПоПредмету(Ссылка, ФормаДокумента);
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ИзменилсяСрокИсполнения")
		И ДополнительныеСвойства.ИзменилсяСрокИсполнения Тогда
		Справочники.ДействияИсполнения.ОбновитьСрокиПоПредмету(
			Ссылка, ДополнительныеСвойства.СтарыйСрокИсполнения);
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ИзменилосьДело")
		И ДополнительныеСвойства.ИзменилосьДело Тогда
		Если ЗначениеЗаполнено(Дело) Тогда
			СостояниеДела = РегистрыСведений.СостоянияДелХраненияДокументов.СостояниеДела(Дело);
			Делопроизводство.ЗаписатьДанныеДокумента(Ссылка, "СостояниеДелаХранения", СостояниеДела.Состояние);
		Иначе
			Делопроизводство.ЗаписатьДанныеДокумента(Ссылка, "СостояниеДелаХранения", Неопределено);
		КонецЕсли;
	КонецЕсли;
	
	РаботаСВнешнимПодписанием.ПриЗаписиДокумента(ЭтотОбъект, Отказ);
	
КонецПроцедуры

&ИзменениеИКонтроль("ИзменитьСрокДействия")
Процедура ЦППК_ИзменитьСрокДействия(ПараметрыЗаписи)

	Если ПараметрыЗаписи.Документ <> ЭтотОбъект.Ссылка Тогда
		ВызватьИсключение НСтр("ru = 'Передан некорректный параметр <Документ>.'");
	КонецЕсли;

	ЗаблокироватьДанныеДляРедактирования(ЭтотОбъект.Ссылка);

	НачатьТранзакцию();
	Попытка
#Удаление 
		СрокДействияПредыдущий = Новый Структура("ДатаНачалаДействия, ДатаОкончанияДействия, Бессрочный, ПорядокПродления");
		ЗаполнитьЗначенияСвойств(СрокДействияПредыдущий, ЭтотОбъект);
		РегистрыСведений.ИсторияСроковДействияДокументов.ДобавитьЗапись(ПараметрыЗаписи);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыЗаписи, "ДатаНачалаДействия, ДатаОкончанияДействия, Бессрочный, ПорядокПродления");
#КонецУдаления
#Вставка
		//Zayc  + 13.05.2016 Добавлена обработка до исполнения обязательств
		//СрокДействияПредыдущий = Новый Структура("ДатаНачалаДействия, ДатаОкончанияДействия, Бессрочный, ПорядокПродления");
		СрокДействияПредыдущий = Новый Структура("ДатаНачалаДействия, ДатаОкончанияДействия, Бессрочный, ДоИсполненияОбязательств, ПорядокПродления");
		//--
		ЗаполнитьЗначенияСвойств(СрокДействияПредыдущий, ЭтотОбъект);
		РегистрыСведений.ИсторияСроковДействияДокументов.ДобавитьЗапись(ПараметрыЗаписи); 
		//Zayc  + 13.05.2016 Добавлена обработка до исполнения обязательств	
		//ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыЗаписи, "ДатаНачалаДействия, ДатаОкончанияДействия, Бессрочный, ПорядокПродления");
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыЗаписи, "ДатаНачалаДействия, ДатаОкончанияДействия, Бессрочный, ДоИсполненияОбязательств, ПорядокПродления");  	
		//--
#КонецВставки
		Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СрокДействияПредыдущий);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		ВызватьИсключение;
	КонецПопытки

КонецПроцедуры

Процедура ЦППК_ПроверкаУдаленияДокументаВСостоянииПроект(Отказ)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИсторияСостоянийДокументовСрезПоследних.Состояние КАК Состояние
		|ИЗ
		|	РегистрСведений.ИсторияСостоянийДокументов.СрезПоследних(, Документ = &Документ) КАК ИсторияСостоянийДокументовСрезПоследних
		|ГДЕ
		|	ИсторияСостоянийДокументовСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияДокументов.Проект)";
	
	Запрос.УстановитьПараметр("Документ", Ссылка);
	
	ПользовательПодготовил = Сотрудники.ПользовательСотрудника(Подготовил);
	ТекущийПользователь = Пользователи.ТекущийПользователь();
		
	Если Не Пользователи.ЭтоПолноправныйПользователь(ТекущийПользователь) Тогда
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Если Не ПользовательПодготовил = ТекущийПользователь Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Помечать документ на удаление может только автор документа.'"),
				,
				"Подготовил",, 
				Отказ);
			КонецЕсли;	
			
		КонецЕсли;  
		
	КонецЕсли;	
	
КонецПроцедуры
