
&НаКлиенте
Процедура ЦППК_НачатьНепосредственноПосле(Команда)
	ЦППК_НачатьНепосредственноПослеНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЦППК_НачатьНепосредственноПослеНаСервере()
	//МиграцияДанныхИзВнешнихСистемСервер.РегламентнаяЗагрузка();
	
	Настройки = МиграцияДанныхИзВнешнихСистемСервер.КэшНастроек();
		
	МиграцияДанныхИзВнешнихСистемСервер.Загрузка(0, Настройки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦППК_ЗагружатьСПостОбработкойПриИзмененииПосле(Элемент)
	
	ЦППК_УстановитьЗначениеКонстанты("ЗагружатьСПостОбработкой", ЗагружатьСПостОбработкой);
	
КонецПроцедуры

&НаСервере
Процедура ЦППК_УстановитьЗначениеКонстанты(ИмяКонстанты, Значение)

	Константы[ИмяКонстанты].Установить(Значение);

КонецПроцедуры

&НаСервере
Процедура ЦППК_ПриСозданииНаСервереПосле(Отказ, СтандартнаяОбработка)
	
	ЗагружатьСПостОбработкой = Константы.ЗагружатьСПостОбработкой.Получить();
КонецПроцедуры


&НаСервере
&Вместо("ЗавершитьНаСервере")
Процедура ЦППК_ЗавершитьНаСервере()

	//ПрерватьПроцессыИз21();	

	//!!!Проверка и предупреждение.
	Константы.ПереходСтадия.Установить(0);
	МиграцияДанныхИзВнешнихСистемСервер.УстановитьИспользованиеЗадания(Ложь);
	МиграцияДанныхИзВнешнихСистемСервер.УстановитьИспользованиеЗаданий(Истина);

	МиграцияДанныхИзВнешнихСистемСервер.УстановитьИсточникАктивен(Ложь); // тут еще и процессы прервем.

	ОбновлениеКэширующихДанных.СброситьПопытки();

	ОбновитьТекСостояние();

	Константы.ИспользоватьОтметкиВремени.ОбновитьЗначение();

КонецПроцедуры


&НаСервере
&Вместо("НачатьНаСервере")
Процедура ЦППК_НачатьНаСервере()

	КаталогВБазе = Константы.ПереходКаталог.Получить();
	Если ПустаяСтрока(КаталогВБазе) И Не ПустаяСтрока(Каталог) Тогда

		Константы.ПереходКаталог.Установить(Каталог);
	Иначе
		Каталог = КаталогВБазе;
	КонецЕсли;	

	Если ПустаяСтрока(Каталог) Тогда
		ВызватьИсключение НСтр("ru = 'Необходимо заполнить каталог для файлов загрузки'");	
	КонецЕсли;

	//!!! если уже загружена предупреждение.

	Если Константы.ПереходСтадия.Получить() >= 3 Тогда
		ВызватьИсключение НСтр("ru = 'Загрузка уже начата'");
	КонецЕсли;


	// проверить что имя конфигурации верное.
	//ИмяКонфигурации = "";
	//ВерсияКонфигурации = "";
	//Попытка
	//	Чтение = Новый ЧтениеТекста(Каталог + ?(Найти(Каталог, "/"), "/", "\") + "Start.txt", КодировкаТекста.UTF8);
	//	Строки = СтрРазделить(Чтение.Прочитать(), Символы.ПС);
	//	Чтение.Закрыть();
	//	ИмяКонфигурации = Строки[0];
	//	ВерсияКонфигурации = Строки[1];
	//Исключение
	//КонецПопытки;
	//
	//ВерсияКонфигурации3Числа = ОбщегоНазначенияКлиентСервер.ВерсияКонфигурацииБезНомераСборки(
	//	ВерсияКонфигурации);
	//Если ОбщегоНазначенияКлиентСервер.СравнитьВерсииБезНомераСборки(ВерсияКонфигурации3Числа, "2.1.32") < 0 И ОбщегоНазначенияКлиентСервер.СравнитьВерсииБезНомераСборки(ВерсияКонфигурации3Числа, "2.0.19") <> 0 Тогда
	//	
	//	Если ЗначениеЗаполнено(ВерсияКонфигурации) Тогда
	//	
	//		ТекстОшибки = СтрШаблон(НСтр("ru = 'Миграция на версию %1 допустима только с версии 2.1.32 или выше.
	//		|Вы выбрали каталог с данными миграции с версии %2.'"),
	//		Метаданные.Версия,
	//		ВерсияКонфигурации3Числа);
	//	
	//	Иначе

	//		ТекстОшибки = СтрШаблон(НСтр("ru = 'Миграция на версию %1 допустима только с версии 2.1.32 или выше.
	//		|Вы выбрали каталог не содержащий данных миграции. Вначале выполните выгрузку из Документооборот 2.1.'"),
	//		Метаданные.Версия);
	//			
	//	КонецЕсли;	
	//	
	//	Константы.ПереходКаталог.Установить("");
	//	Каталог = "";
	//	
	//	ВызватьИсключение ТекстОшибки;
	//	
	//КонецЕсли;	
	//
	//Если ИмяКонфигурации <> Метаданные.Имя Тогда
	//	
	//	// с корп 2.1 можно перейти сразу на 30 Холдинг
	//	Если Метаданные.Имя <> "ДокументооборотХолдинга" 
	//		Или ИмяКонфигурации <> "ДокументооборотКОРП" Тогда
	//			
	//		ТекстОшибки = СтрШаблон(НСтр("ru = 'Миграция допустима только с %1 на %2.
	//		|Вы выбрали каталог с данными миграции с %3.'"),
	//		Метаданные.Имя,
	//		Метаданные.Имя,
	//		ИмяКонфигурации);
	//		
	//		Константы.ПереходКаталог.Установить("");
	//		Каталог = "";
	//		
	//		ВызватьИсключение ТекстОшибки;
	//			
	//	КонецЕсли;	
	//	
	//КонецЕсли;	


	ЗаписатьНаСервере();

	Если Константы.ПереходСтадия.Получить() < 1 Тогда

		РегистрыСведений.МиграцияДанныхИзВнешнихСистемЖурнал.СоздатьНаборЗаписей().Записать();
		МиграцияДанныхИзВнешнихСистемСервер.Журналировать(НСтр("ru = 'Начало'"));

		Константы.ПереходСтадия.Установить(1);
	КонецЕсли;

	Если Константы.ПереходСтадия.Получить() < 2 Тогда
		//Приостановка лишних рег.заданий.

		МиграцияДанныхИзВнешнихСистемСервер.УстановитьИспользованиеЗаданий(Ложь);

		Если Константы.ИспользоватьОтметкиВремени.Получить() = Ложь Тогда

			Если Не МонопольныйРежим() Тогда
				Попытка
					УстановитьМонопольныйРежим(Истина);

				Исключение

					ВызватьИсключение 
					НСтр("ru = 'Для начала загрузки необходимо временно завершить все параллельные сеансы и повторить попытку'");

				КонецПопытки;
			КонецЕсли;

			Константы.ИспользоватьОтметкиВремени.Установить(Истина);

			Если ПолнотекстовыйПоиск.ПолучитьРежимПолнотекстовогоПоиска() = РежимПолнотекстовогоПоиска.Разрешить Тогда
				ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Запретить);
				Константы.ИспользоватьПолнотекстовыйПоиск.Установить(Ложь);
			КонецЕсли;

			УстановитьМонопольныйРежим(Ложь);

		КонецЕсли;

		Константы.ПереходСтадия.Установить(2);
	КонецЕсли;

	МиграцияДанныхИзВнешнихСистемСервер.УстановитьИспользованиеЗадания(Истина);
	Константы.ПереходСтадия.Установить(3);
	МиграцияДанныхИзВнешнихСистемСервер.УстановитьИсточникАктивен(Истина);

	Константы.ДатаНачалаЗагрузкиИзВнешнейСистемы.Установить(ТекущаяУниверсальнаяДата());

	ОбновитьТекСостояние();

КонецПроцедуры

